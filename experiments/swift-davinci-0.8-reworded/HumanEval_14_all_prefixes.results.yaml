language: swift
name: HumanEval_14_all_prefixes
results:
- exit_code: 1
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    return Array(stride(from:\
    \ 1, to: string.count + 1, by: 1)).map {string.prefix($0)}\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmps4eytjru.swift:6:76: error: cannot convert value of type 'String.SubSequence'\
    \ (aka 'Substring') to closure result type 'String'\n    return Array(stride(from:\
    \ 1, to: string.count + 1, by: 1)).map {string.prefix($0)}\n                 \
    \                                                   ~~~~~~~^~~~~~~~~~\n      \
    \                                                              String(       \
    \   )\n"
  stdout: ''
  timestamp: 1660014135
- exit_code: -4
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n  var prefixes = [String]()\n\
    \  for i in 0..<string.count {\n    prefixes.append(String(string[..<string.index(string.startIndex,\
    \ offsetBy: i)]))\n  }\n  return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: Exception
  stderr: 'tmprj10sqy2/tmprj10sqy2.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6a76e9ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6a76b91b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6a76b91988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6a76b907b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprj10sqy2                        0x000055d14a093b98 <unavailable> + 7064

    5    libc.so.6                          0x00002b6a77086460 __libc_start_main +
    245

    6    tmprj10sqy2                        0x000055d14a0935f9 <unavailable> + 5625

    '
  stdout: ''
  timestamp: 1660014135
- exit_code: 1
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var prefixes = [String]()\n\
    \    for i in 0..<string.count {\n        prefixes.append(String(string[0..<i+1]))\n\
    \    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmpasjnzbvl.swift:8:32: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an integer range, use a String.Index range instead.\n\
    \        prefixes.append(String(string[0..<i+1]))\n                          \
    \     ^~~~~~~~~~~~~~~\nSwift.String:5:12: note: 'subscript(_:)' has been explicitly\
    \ marked unavailable here\n    public subscript<R>(bounds: R) -> String where\
    \ R : RangeExpression, R.Bound == Int { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014135
- exit_code: -4
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var result = [String]()\n\
    \    for i in 0..<string.count {\n        result.append(String(string[..<string.index(string.startIndex,\
    \ offsetBy: i)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: Exception
  stderr: 'tmplip34u1j/tmplip34u1j.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba6ac488c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba6ac17fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba6ac17f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba6ac17e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplip34u1j                        0x0000560648df0b98 <unavailable> + 7064

    5    libc.so.6                          0x00002ba6ac674460 __libc_start_main +
    245

    6    tmplip34u1j                        0x0000560648df05f9 <unavailable> + 5625

    '
  stdout: ''
  timestamp: 1660014018
- exit_code: -4
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var prefixes: [String] =\
    \ []\n    for index in 1...string.count {\n        prefixes.append(String(string[...string.index(string.startIndex,\
    \ offsetBy: index - 1)]))\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002aea0f02fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea0ed26561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002aea0ed26286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002aea0ed2613c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002aea0ed25bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp5n2vsk05                        0x000055611cee1e45 <unavailable> + 7749

    6    tmp5n2vsk05                        0x000055611cee18a5 <unavailable> + 6309

    7    libc.so.6                          0x00002aea0f21b460 __libc_start_main +
    245

    8    tmp5n2vsk05                        0x000055611cee15a9 <unavailable> + 5545

    '
  stdout: ''
  timestamp: 1660014135
- exit_code: 0
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var result = [String]()\n\
    \    for (i, c) in string.enumerated() {\n        let prefix = String(string[..<string.index(string.startIndex,\
    \ offsetBy: i + 1)])\n        result.append(prefix)\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\n\
    assert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\",\
    \ \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"\
    WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014135
- exit_code: -4
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var result: [String] = []\n\
    \    for i in 1...string.count {\n        result.append(String(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: i)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b1070149c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b106fe40561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b106fe40286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b106fe4013c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b106fe3fbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpfmhjx09c                        0x0000556b071e5cfc <unavailable> + 7420

    6    tmpfmhjx09c                        0x0000556b071e5765 <unavailable> + 5989

    7    libc.so.6                          0x00002b1070335460 __libc_start_main +
    245

    8    tmpfmhjx09c                        0x0000556b071e5469 <unavailable> + 5225

    '
  stdout: ''
  timestamp: 1660014135
- exit_code: 0
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    return Array(string.enumerated().map\
    \ { i, _ in String(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: i+1)]) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014135
- exit_code: -4
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var prefixes = [String]()\n\
    \    for i in 0...string.count {\n        let index = string.index(string.startIndex,\
    \ offsetBy: i)\n        prefixes.append(String(string[..<index]))\n    }\n   \
    \ return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: Exception
  stderr: 'tmp9q58vstm/tmp9q58vstm.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0ced019c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0cecd10b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0cecd10988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0cecd0f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9q58vstm                        0x000055f63c1259ae <unavailable> + 6574

    5    libc.so.6                          0x00002b0ced205460 __libc_start_main +
    245

    6    tmp9q58vstm                        0x000055f63c1255f9 <unavailable> + 5625

    '
  stdout: ''
  timestamp: 1660014018
- exit_code: 0
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var result: [String] = []\n\
    \    for i in 0..<string.count {\n        result.append(String(string[..<string.index(string.startIndex,\
    \ offsetBy: i + 1)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014018
- exit_code: 0
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    let characters = Array(string)\n\
    \    var prefixes: [String] = []\n    for index in 0..<characters.count {\n  \
    \      prefixes.append(String(characters[0...index]))\n    }\n    return prefixes\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\n\
    assert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\",\
    \ \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"\
    WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014135
- exit_code: -4
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    return stride(from: 0, to:\
    \ string.count, by: 1).map {\n        return String(string[string.startIndex ..<\
    \ string.index(string.startIndex, offsetBy: $0)])\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: Exception
  stderr: 'tmppaox5180/tmppaox5180.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b93248c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b93245b9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b93245b9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b93245b87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppaox5180                        0x000055ad4571aa68 <unavailable> + 6760

    5    libc.so.6                          0x00002b9324aae460 __libc_start_main +
    245

    6    tmppaox5180                        0x000055ad4571a4c9 <unavailable> + 5321

    '
  stdout: ''
  timestamp: 1660014135
- exit_code: 1
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var prefixes: [String] =\
    \ []\n    for i in 0...string.characters.count {\n        let prefix = string.substring(to:\
    \ string.index(string.startIndex, offsetBy: i))\n        prefixes.append(prefix)\n\
    \    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmpmxejfgw4.swift:7:25: error: 'characters' is unavailable: Please\
    \ use String directly\n    for i in 0...string.characters.count {\n          \
    \              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpmxejfgw4.swift:8:29: error: value of type 'String' has no member\
    \ 'substring'\n        let prefix = string.substring(to: string.index(string.startIndex,\
    \ offsetBy: i))\n                     ~~~~~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014135
- exit_code: -4
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var all = [String]()\n  \
    \  var start = string.startIndex\n    while start != string.endIndex {\n     \
    \   all.append(String(string[start...]))\n        start = string.index(after:\
    \ start)\n    }\n    return all\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: Exception
  stderr: 'tmpd7drlogn/tmpd7drlogn.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7254112c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7253e09b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7253e09988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7253e087b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd7drlogn                        0x00005608d495aaa8 <unavailable> + 6824

    5    libc.so.6                          0x00002b72542fe460 __libc_start_main +
    245

    6    tmpd7drlogn                        0x00005608d495a509 <unavailable> + 5385

    '
  stdout: ''
  timestamp: 1660014135
- exit_code: 1
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    return (1...string.count).map\
    \ { string.prefix($0) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmpaow8jwz9.swift:6:44: error: cannot convert value of type 'String.SubSequence'\
    \ (aka 'Substring') to closure result type 'String'\n    return (1...string.count).map\
    \ { string.prefix($0) }\n                                    ~~~~~~~^~~~~~~~~~\n\
    \                                    String(          )\n"
  stdout: ''
  timestamp: 1660014018
- exit_code: 1
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    return (1...string.characters.count).map\
    \ { string.substringToIndex(string.startIndex.advancedBy($0)) }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmp0_xjnag4.swift:6:55: error: value of type 'String' has no member\
    \ 'substringToIndex'\n    return (1...string.characters.count).map { string.substringToIndex(string.startIndex.advancedBy($0))\
    \ }\n                                               ~~~~~~ ^~~~~~~~~~~~~~~~\n\
    /tmp/tmp0_xjnag4.swift:6:90: error: value of type 'String.Index' has no member\
    \ 'advancedBy'\n    return (1...string.characters.count).map { string.substringToIndex(string.startIndex.advancedBy($0))\
    \ }\n                                                                       ~~~~~~~~~~~~~~~~~\
    \ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014135
- exit_code: -4
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    return string.indices.map\
    \ { idx in String(string[..<idx]) }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: Exception
  stderr: 'tmpasij4sv8/tmpasij4sv8.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8293e5dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8293b54b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8293b54988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8293b537b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpasij4sv8                        0x0000555ce357a9f8 <unavailable> + 6648

    5    libc.so.6                          0x00002b8294049460 __libc_start_main +
    245

    6    tmpasij4sv8                        0x0000555ce357a459 <unavailable> + 5209

    '
  stdout: ''
  timestamp: 1660014135
- exit_code: -4
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var result = [String]()\n\
    \    for i in 0...string.count {\n        result.append(String(string[..<string.index(string.startIndex,\
    \ offsetBy: i)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: Exception
  stderr: 'tmpq8yxwmia/tmpq8yxwmia.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad83c93ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad83c635b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad83c635988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad83c6347b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpq8yxwmia                        0x00005601680799ae <unavailable> + 6574

    5    libc.so.6                          0x00002ad83cb2a460 __libc_start_main +
    245

    6    tmpq8yxwmia                        0x00005601680795f9 <unavailable> + 5625

    '
  stdout: ''
  timestamp: 1660014135
- exit_code: 0
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    let length = string.count\n\
    \    let string = Array(string)\n    var output: [String] = []\n    for i in 0..<length\
    \ {\n        output.append(String(string[0...i]))\n    }\n    return output\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\n\
    assert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\",\
    \ \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"\
    WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014135
- exit_code: -4
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var result: [String] = []\n\
    \    for i in 1...string.count {\n        result.append(String(string[..<string.index(string.startIndex,\
    \ offsetBy: i)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002abb5adb6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abb5aaad561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abb5aaad286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abb5aaad13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abb5aaacbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp7efdc45e                        0x000056006e866e45 <unavailable> + 7749

    6    tmp7efdc45e                        0x000056006e8668a5 <unavailable> + 6309

    7    libc.so.6                          0x00002abb5afa2460 __libc_start_main +
    245

    8    tmp7efdc45e                        0x000056006e8665a9 <unavailable> + 5545

    '
  stdout: ''
  timestamp: 1660014135
- exit_code: 1
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var prefixes = [String]()\n\
    \    for index in 0..<string.count {\n        prefixes.append(string[0..<index])\n\
    \    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmpgx49o4cn.swift:8:25: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an integer range, use a String.Index range instead.\n\
    \        prefixes.append(string[0..<index])\n                        ^~~~~~~~~~~~~~~~~\n\
    Swift.String:5:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript<R>(bounds: R) -> String where R : RangeExpression,\
    \ R.Bound == Int { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014018
- exit_code: -4
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    let count = string.count\n\
    \    var results = [String]()\n    for i in 1...count {\n        results.append(String(string.prefix(i)))\n\
    \    }\n    return results\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b4f1dddac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4f1dad1561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b4f1dad1286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b4f1dad113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b4f1dad0bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpkrxf6mh5                        0x000055930980cce0 <unavailable> + 7392

    6    tmpkrxf6mh5                        0x000055930980c745 <unavailable> + 5957

    7    libc.so.6                          0x00002b4f1dfc6460 __libc_start_main +
    245

    8    tmpkrxf6mh5                        0x000055930980c449 <unavailable> + 5193

    '
  stdout: ''
  timestamp: 1660014135
- exit_code: 0
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    return string.enumerated().compactMap\
    \ { (index, char) -> String? in\n        guard index != string.count else { return\
    \ nil }\n        return String(string[..<string.index(string.startIndex, offsetBy:\
    \ index + 1)])\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014135
- exit_code: -4
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    return string.map { $0 }.reduce([])\
    \ { $0 + [$0.last! + String($1)] }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: Exception
  stderr: 'tmplo215o5j/tmplo215o5j.swift:6: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002ba1a4d59c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba1a4a50561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ba1a4a50286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ba1a4a5013c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ba1a4a4fbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmplo215o5j                        0x0000561f3f6ede57 <unavailable> + 7767

    6    libswiftCore.so                    0x00002ba1a4b5f410 Sequence.reduce<A>(_:_:)
    + 530

    7    tmplo215o5j                        0x0000561f3f6edc73 <unavailable> + 7283

    8    tmplo215o5j                        0x0000561f3f6ed827 <unavailable> + 6183

    9    libc.so.6                          0x00002ba1a4f45460 __libc_start_main +
    245

    10   tmplo215o5j                        0x0000561f3f6ed449 <unavailable> + 5193

    '
  stdout: ''
  timestamp: 1660014136
- exit_code: 0
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var result = [String]()\n\
    \    for i in 0..<string.count {\n        result.append(String(string[string.startIndex...string.index(string.startIndex,\
    \ offsetBy: i)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014018
- exit_code: 1
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var ret = [String]()\n  \
    \  var tmp = string\n    while tmp.characters.count > 0 {\n        ret.append(tmp)\n\
    \        tmp.remove(at: tmp.startIndex)\n    }\n    return ret\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmpsq7jhzvc.swift:8:15: error: 'characters' is unavailable: Please\
    \ use String directly\n    while tmp.characters.count > 0 {\n              ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660014135
- exit_code: 1
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var prefixes: [String] =\
    \ []\n    for i in 0...string.count - 1 {\n        prefixes.append(string.prefix(i+1))\n\
    \    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmpu4mz0sqj.swift:8:18: error: no exact matches in call to instance\
    \ method 'append'\n        prefixes.append(string.prefix(i+1))\n             \
    \    ^\nSwift.Array:6:37: note: candidate expects value of type 'String' for parameter\
    \ #1 (got 'PrefixSequence<String>')\n    @inlinable public mutating func append(_\
    \ newElement: __owned Element)\n                                    ^\nSwift.RangeReplaceableCollection:4:37:\
    \ note: candidate expects value of type 'String' for parameter #1 (got 'PrefixSequence<String>')\n\
    \    @inlinable public mutating func append(_ newElement: __owned Self.Element)\n\
    \                                    ^\n/tmp/tmpu4mz0sqj.swift:8:18: note: found\
    \ candidate with type '(__owned PrefixSequence<String>) -> ()'\n        prefixes.append(string.prefix(i+1))\n\
    \                 ^\n"
  stdout: ''
  timestamp: 1660014135
- exit_code: -4
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var prefixes: [String] =\
    \ []\n    for i in (0..<string.count) {\n        prefixes.append(String(string[..<string.index(string.startIndex,\
    \ offsetBy: i)]))\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: Exception
  stderr: 'tmpo1p6ckcd/tmpo1p6ckcd.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b06a74bbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b06a71b2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b06a71b2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b06a71b17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo1p6ckcd                        0x000055d06eb66b48 <unavailable> + 6984

    5    libc.so.6                          0x00002b06a76a7460 __libc_start_main +
    245

    6    tmpo1p6ckcd                        0x000055d06eb665a9 <unavailable> + 5545

    '
  stdout: ''
  timestamp: 1660014135
- exit_code: 0
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    let characters = Array(string)\n\
    \    var prefixes: [String] = []\n    for i in 0..<characters.count {\n      \
    \  prefixes.append(String(characters[0...i]))\n    }\n    return prefixes\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\n\
    assert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\",\
    \ \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"\
    WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014135
- exit_code: -4
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var prefixes: [String] =\
    \ []\n    let characters = Array(string)\n    for i in 0..<characters.count {\n\
    \        let index = characters.index(characters.startIndex, offsetBy: i)\n  \
    \      prefixes.append(String(characters[..<index]))\n    }\n    return prefixes\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\n\
    assert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\",\
    \ \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"\
    WW\", \"WWW\"])"
  status: Exception
  stderr: 'tmpqodz4lkh/tmpqodz4lkh.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002add04644c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002add0433bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002add0433b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002add0433a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqodz4lkh                        0x00005568569a3c88 <unavailable> + 7304

    5    libc.so.6                          0x00002add04830460 __libc_start_main +
    245

    6    tmpqodz4lkh                        0x00005568569a36e9 <unavailable> + 5865

    '
  stdout: ''
  timestamp: 1660014135
- exit_code: 1
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    let length = string.count\n\
    \    return (0..<length).map { string.prefix($0 + 1) }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmptk5towp0.swift:7:38: error: cannot convert value of type 'String.SubSequence'\
    \ (aka 'Substring') to closure result type 'String'\n    return (0..<length).map\
    \ { string.prefix($0 + 1) }\n                              ~~~~~~~^~~~~~~~~~~~~~\n\
    \                              String(              )\n"
  stdout: ''
  timestamp: 1660014135
- exit_code: 1
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var result: [String] = []\n\
    \    for i in 0..<string.count {\n        result.append(string.prefix(i+1))\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmpge6w6xbv.swift:8:16: error: no exact matches in call to instance\
    \ method 'append'\n        result.append(string.prefix(i+1))\n               ^\n\
    Swift.Array:6:37: note: candidate expects value of type 'String' for parameter\
    \ #1 (got 'PrefixSequence<String>')\n    @inlinable public mutating func append(_\
    \ newElement: __owned Element)\n                                    ^\nSwift.RangeReplaceableCollection:4:37:\
    \ note: candidate expects value of type 'String' for parameter #1 (got 'PrefixSequence<String>')\n\
    \    @inlinable public mutating func append(_ newElement: __owned Self.Element)\n\
    \                                    ^\n/tmp/tmpge6w6xbv.swift:8:16: note: found\
    \ candidate with type '(__owned PrefixSequence<String>) -> ()'\n        result.append(string.prefix(i+1))\n\
    \               ^\n"
  stdout: ''
  timestamp: 1660014135
- exit_code: 1
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var prefixes = [String]()\n\
    \    let length = string.count\n    if length == 0 {\n        return []\n    }\n\
    \    for i in 0..<length {\n        prefixes.append(string.prefix(i + 1))\n  \
    \  }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmptvnik8dk.swift:12:18: error: no exact matches in call to instance\
    \ method 'append'\n        prefixes.append(string.prefix(i + 1))\n           \
    \      ^\nSwift.Array:6:37: note: candidate expects value of type 'String' for\
    \ parameter #1 (got 'PrefixSequence<String>')\n    @inlinable public mutating\
    \ func append(_ newElement: __owned Element)\n                               \
    \     ^\nSwift.RangeReplaceableCollection:4:37: note: candidate expects value\
    \ of type 'String' for parameter #1 (got 'PrefixSequence<String>')\n    @inlinable\
    \ public mutating func append(_ newElement: __owned Self.Element)\n          \
    \                          ^\n/tmp/tmptvnik8dk.swift:12:18: note: found candidate\
    \ with type '(__owned PrefixSequence<String>) -> ()'\n        prefixes.append(string.prefix(i\
    \ + 1))\n                 ^\n"
  stdout: ''
  timestamp: 1660014135
- exit_code: 1
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    let chars = string.characters\n\
    \    var result: [String] = []\n    for i in 0..<chars.count {\n        result.append(string.substring(to:\
    \ string.index(string.startIndex, offsetBy: i+1)))\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\n\
    assert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\",\
    \ \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"\
    WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmp5q7x0yrx.swift:6:24: error: 'characters' is unavailable: Please\
    \ use String directly\n    let chars = string.characters\n                   \
    \    ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp5q7x0yrx.swift:9:30:\
    \ error: value of type 'String' has no member 'substring'\n        result.append(string.substring(to:\
    \ string.index(string.startIndex, offsetBy: i+1)))\n                      ~~~~~~\
    \ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014135
- exit_code: -4
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var prefixes = [String]()\n\
    \    for index in 0..<string.count {\n        prefixes.append(String(string[..<string.index(string.startIndex,\
    \ offsetBy: index)]))\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: Exception
  stderr: 'tmpruiiloqn/tmpruiiloqn.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac16f20bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac16ef02b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac16ef02988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac16ef017b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpruiiloqn                        0x0000562845f97b98 <unavailable> + 7064

    5    libc.so.6                          0x00002ac16f3f7460 __libc_start_main +
    245

    6    tmpruiiloqn                        0x0000562845f975f9 <unavailable> + 5625

    '
  stdout: ''
  timestamp: 1660014135
- exit_code: 0
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var result = [String]()\n\
    \    for i in 0..<string.count {\n        result.append(String(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: i + 1)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014018
- exit_code: 1
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n  return sequence(first: \"\"\
    ) { $0.characters.count < string.characters.count ? $0 + \"\\(string[$0.characters.count])\"\
    \ : nil }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmp28mytjl6.swift:6:10: error: cannot convert return expression of\
    \ type 'UnfoldSequence<String, (String?, Bool)>' to return type '[String]'\n \
    \ return sequence(first: \"\") { $0.characters.count < string.characters.count\
    \ ? $0 + \"\\(string[$0.characters.count])\" : nil }\n         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014135
- exit_code: 1
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var array = [String]()\n\
    \    for i in 0..<string.count {\n        array.append(string.substr(to: string.index(string.startIndex,\
    \ offsetBy: i + 1)))\n    }\n    return array\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmpz0dtn8tj.swift:8:29: error: value of type 'String' has no member\
    \ 'substr'\n        array.append(string.substr(to: string.index(string.startIndex,\
    \ offsetBy: i + 1)))\n                     ~~~~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660014135
- exit_code: 1
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var result: [String] = []\n\
    \    for index in 0..<string.count {\n        result.append(string[..<string.index(string.startIndex,\
    \ offsetBy: index)])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmpeshg66hb.swift:8:29: error: subscript 'subscript(_:)' requires\
    \ the types 'String.Index' and 'Int' be equivalent\n        result.append(string[..<string.index(string.startIndex,\
    \ offsetBy: index)])\n                            ^\nSwift.String:5:12: note:\
    \ where 'R.Bound' = 'String.Index'\n    public subscript<R>(bounds: R) -> String\
    \ where R : RangeExpression, R.Bound == Int { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014135
- exit_code: 0
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var list = [String]()\n \
    \   var prefix = \"\"\n    for char in string {\n        prefix += String(char)\n\
    \        list.append(prefix)\n    }\n    return list\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014135
- exit_code: 1
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    return stride(from: 1, to:\
    \ string.count + 1, by: 1).map { string.prefix($0) }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmpkf2aq9fe.swift:6:70: error: cannot convert value of type 'String.SubSequence'\
    \ (aka 'Substring') to closure result type 'String'\n    return stride(from: 1,\
    \ to: string.count + 1, by: 1).map { string.prefix($0) }\n                   \
    \                                           ~~~~~~~^~~~~~~~~~\n              \
    \                                                String(          )\n"
  stdout: ''
  timestamp: 1660014135
- exit_code: 0
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var result: [String] = []\n\
    \    for i in 0..<string.count {\n        result.append(String(string[..<string.index(string.startIndex,\
    \ offsetBy: i + 1)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014018
- exit_code: -4
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    let max_size = string.count\n\
    \    var result = [String]()\n    for i in 0..<max_size {\n        result.append(\
    \ String(string[..<string.index(string.startIndex, offsetBy: i)]) )\n    }\n \
    \   return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: Exception
  stderr: 'tmpyx77poic/tmpyx77poic.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba64d424c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba64d11bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba64d11b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba64d11a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyx77poic                        0x0000557f443a5b98 <unavailable> + 7064

    5    libc.so.6                          0x00002ba64d610460 __libc_start_main +
    245

    6    tmpyx77poic                        0x0000557f443a55f9 <unavailable> + 5625

    '
  stdout: ''
  timestamp: 1660014135
- exit_code: 1
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    let length = string.count\n\
    \    var list = [String]()\n    for index in 1...length {\n        list.append(string.prefix(index))\n\
    \    }\n    return list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmpb3ycbyhp.swift:9:14: error: no exact matches in call to instance\
    \ method 'append'\n        list.append(string.prefix(index))\n             ^\n\
    Swift.Array:6:37: note: candidate expects value of type 'String' for parameter\
    \ #1 (got 'PrefixSequence<String>')\n    @inlinable public mutating func append(_\
    \ newElement: __owned Element)\n                                    ^\nSwift.RangeReplaceableCollection:4:37:\
    \ note: candidate expects value of type 'String' for parameter #1 (got 'PrefixSequence<String>')\n\
    \    @inlinable public mutating func append(_ newElement: __owned Self.Element)\n\
    \                                    ^\n/tmp/tmpb3ycbyhp.swift:9:14: note: found\
    \ candidate with type '(__owned PrefixSequence<String>) -> ()'\n        list.append(string.prefix(index))\n\
    \             ^\n"
  stdout: ''
  timestamp: 1660014135
- exit_code: 1
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var output: [String] = []\n\
    \    for i in 1...string.count {\n        output.append(string.prefix(i))\n  \
    \  }\n    return output\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmpfluu25ij.swift:8:16: error: no exact matches in call to instance\
    \ method 'append'\n        output.append(string.prefix(i))\n               ^\n\
    Swift.Array:6:37: note: candidate expects value of type 'String' for parameter\
    \ #1 (got 'PrefixSequence<String>')\n    @inlinable public mutating func append(_\
    \ newElement: __owned Element)\n                                    ^\nSwift.RangeReplaceableCollection:4:37:\
    \ note: candidate expects value of type 'String' for parameter #1 (got 'PrefixSequence<String>')\n\
    \    @inlinable public mutating func append(_ newElement: __owned Self.Element)\n\
    \                                    ^\n/tmp/tmpfluu25ij.swift:8:16: note: found\
    \ candidate with type '(__owned PrefixSequence<String>) -> ()'\n        output.append(string.prefix(i))\n\
    \               ^\n"
  stdout: ''
  timestamp: 1660014135
- exit_code: -4
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    let length = string.count\n\
    \    var prefixes = [String]()\n    for i in 0..<length {\n        prefixes.append(String(string[..<string.index(string.startIndex,\
    \ offsetBy: i)]))\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: Exception
  stderr: 'tmpglb0h6p6/tmpglb0h6p6.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1ad9816c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1ad950db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1ad950d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1ad950c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpglb0h6p6                        0x0000560f4e625b98 <unavailable> + 7064

    5    libc.so.6                          0x00002b1ad9a02460 __libc_start_main +
    245

    6    tmpglb0h6p6                        0x0000560f4e6255f9 <unavailable> + 5625

    '
  stdout: ''
  timestamp: 1660014135
- exit_code: 0
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var result = [String]()\n\
    \    for i in 0..<string.count {\n        result.append(String(string[..<string.index(string.startIndex,\
    \ offsetBy: i + 1)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014018
- exit_code: -4
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    return (1...string.count).map\
    \ {\n        let end = string.index(string.startIndex, offsetBy: $0)\n       \
    \ return String(string[..<end])\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002acfddcb0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acfdd9a7561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002acfdd9a7286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002acfdd9a713c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002acfdd9a6bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp4xp82c1o                        0x000055b0e2a43e12 <unavailable> + 7698

    6    tmp4xp82c1o                        0x000055b0e2a43885 <unavailable> + 6277

    7    libc.so.6                          0x00002acfdde9c460 __libc_start_main +
    245

    8    tmp4xp82c1o                        0x000055b0e2a43589 <unavailable> + 5513

    '
  stdout: ''
  timestamp: 1660014135
- exit_code: 0
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var result: [String] = []\n\
    \    for i in 0..<string.count {\n        result.append(String(string[..<string.index(string.startIndex,\
    \ offsetBy: i + 1)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014018
- exit_code: 1
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n  return (1...string.count).map\
    \ { string.prefix($0) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmptyrs9bbq.swift:6:42: error: cannot convert value of type 'String.SubSequence'\
    \ (aka 'Substring') to closure result type 'String'\n  return (1...string.count).map\
    \ { string.prefix($0) }\n                                  ~~~~~~~^~~~~~~~~~\n\
    \                                  String(          )\n"
  stdout: ''
  timestamp: 1660014135
- exit_code: 0
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var result = [String]()\n\
    \    for i in 0..<string.count {\n        result.append(String(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: i+1)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014018
- exit_code: 0
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    if string.isEmpty {\n   \
    \     return []\n    }\n    var prefixes = [String]()\n    for i in 1...string.count\
    \ {\n        prefixes.append(String(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: i)]))\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014135
- exit_code: 0
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    let size = string.count\n\
    \    var output = [String]()\n    for i in 0..<size {\n        output.append(String(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: i + 1)]))\n    }\n    return output\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014135
- exit_code: 1
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    let characters = Array(string)\n\
    \    var result: [String] = []\n    for i in 0..<characters.count {\n        result.append(string.substring(to:\
    \ string.index(string.startIndex, offsetBy: i + 1)))\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\n\
    assert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\",\
    \ \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"\
    WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmpmxl_nx6h.swift:9:30: error: value of type 'String' has no member\
    \ 'substring'\n        result.append(string.substring(to: string.index(string.startIndex,\
    \ offsetBy: i + 1)))\n                      ~~~~~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014135
- exit_code: -4
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var array = [String]()\n\
    \    let numOfChars = string.count\n    for index in 0..<numOfChars {\n      \
    \  let startIndex = string.index(string.startIndex, offsetBy: index)\n       \
    \ let endIndex = string.index(string.startIndex, offsetBy: index + 1)\n      \
    \  let substring = string[startIndex..<endIndex]\n        array.append(String(substring))\n\
    \    }\n    return array\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: Exception
  stderr: 'tmpkqecj9py/tmpkqecj9py.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adfc1c51c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adfc1948b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adfc1948988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adfc19477b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkqecj9py                        0x000055a5c58c0a58 <unavailable> + 6744

    5    libc.so.6                          0x00002adfc1e3d460 __libc_start_main +
    245

    6    tmpkqecj9py                        0x000055a5c58c04b9 <unavailable> + 5305

    '
  stdout: ''
  timestamp: 1660014135
- exit_code: 0
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var prefixes = [String]()\n\
    \    for i in 0..<string.count {\n        prefixes.append(String(string[..<string.index(string.startIndex,\
    \ offsetBy: i + 1)]))\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014018
- exit_code: 0
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var arr = [String]()\n  \
    \  let len = string.count\n    for i in 0..<len {\n        arr.append(String(string[string.startIndex...string.index(string.startIndex,\
    \ offsetBy: i)]))\n    }\n    return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014135
- exit_code: -4
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    let splits = string.split(separator:\
    \ \" \")\n    var all_splits = [String]()\n    for split in splits {\n       \
    \ for char in split {\n            all_splits.append(String(char))\n        }\n\
    \    }\n    var all_prefixes = [String]()\n    for split in all_splits {\n   \
    \     for prefix_length in 1...split.count {\n            all_prefixes.append(String(split.prefix(prefix_length)))\n\
    \        }\n    }\n    return all_prefixes\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: Exception
  stderr: 'tmp1do440ml/tmp1do440ml.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab43295ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab432651b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab432651988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab4326507b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1do440ml                        0x000056403fbf4d88 <unavailable> + 7560

    5    libc.so.6                          0x00002ab432b46460 __libc_start_main +
    245

    6    tmp1do440ml                        0x000056403fbf47e9 <unavailable> + 6121

    '
  stdout: ''
  timestamp: 1660014136
- exit_code: 0
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var result = [String]()\n\
    \    for i in 0..<string.count {\n        result.append(String(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: i+1)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014018
- exit_code: 0
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var prefixes: [String] =\
    \ []\n    var prefix: String = \"\"\n    for c in string {\n        prefix +=\
    \ String(c)\n        prefixes.append(prefix)\n    }\n    return prefixes\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\n\
    assert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\",\
    \ \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"\
    WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014136
- exit_code: 0
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var prefixes: [String] =\
    \ []\n    for i in 0..<string.count {\n        prefixes.append(String(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: i + 1)]))\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014018
- exit_code: -4
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var all_prefixes: [String]\
    \ = []\n    for i in 1...string.count {\n        all_prefixes.append(String(string.prefix(i)))\n\
    \    }\n    return all_prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b898fff5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b898fcec561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b898fcec286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b898fcec13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b898fcebbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpsjona3en                        0x000055b4139fbc85 <unavailable> + 7301

    6    tmpsjona3en                        0x000055b4139fb6e5 <unavailable> + 5861

    7    libc.so.6                          0x00002b89901e1460 __libc_start_main +
    245

    8    tmpsjona3en                        0x000055b4139fb3e9 <unavailable> + 5097

    '
  stdout: ''
  timestamp: 1660014136
- exit_code: -4
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    let length = string.count\n\
    \    let allPrefixes = stride(from: 1, to: length, by: 1).map({ index in\n   \
    \     string.prefix(index)\n    })\n    return allPrefixes.map({ String($0) })\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\n\
    assert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\",\
    \ \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"\
    WW\", \"WWW\"])"
  status: Exception
  stderr: 'tmp_dqcepjl/tmp_dqcepjl.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae8fd3b0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae8fd0a7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae8fd0a7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae8fd0a67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_dqcepjl                        0x000055e84ff1ea38 <unavailable> + 6712

    5    libc.so.6                          0x00002ae8fd59c460 __libc_start_main +
    245

    6    tmp_dqcepjl                        0x000055e84ff1e499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1660014136
- exit_code: 1
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    let stringLen = string.count\n\
    \    let expectedLen = stringLen * (stringLen + 1) / 2\n    var data = [String](repeating:\
    \ \"\", count: expectedLen)\n    for i in 0..<stringLen {\n        for j in i..<stringLen\
    \ {\n            data[(i * (i + 1) / 2) + j - i] = string[string.index(string.startIndex,\
    \ offsetBy: i)..<string.index(string.startIndex, offsetBy: j + 1)]\n        }\n\
    \    }\n    return data\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmp9ehjgg4l.swift:11:13: error: the compiler is unable to type-check\
    \ this expression in reasonable time; try breaking up the expression into distinct\
    \ sub-expressions\n            data[(i * (i + 1) / 2) + j - i] = string[string.index(string.startIndex,\
    \ offsetBy: i)..<string.index(string.startIndex, offsetBy: j + 1)]\n         \
    \   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014163
- exit_code: 0
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    let length = string.count\n\
    \    return (0..<length).map({String(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: $0 + 1)])})\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014136
- exit_code: 1
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    return (1...string.count).map\
    \ { i in string.prefix(i) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmpkkoespxb.swift:6:49: error: cannot convert value of type 'String.SubSequence'\
    \ (aka 'Substring') to closure result type 'String'\n    return (1...string.count).map\
    \ { i in string.prefix(i) }\n                                         ~~~~~~~^~~~~~~~~\n\
    \                                         String(         )\n"
  stdout: ''
  timestamp: 1660014135
- exit_code: 1
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    return (1...string.count).map\
    \ { string.prefix($0) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmpaow8jwz9.swift:6:44: error: cannot convert value of type 'String.SubSequence'\
    \ (aka 'Substring') to closure result type 'String'\n    return (1...string.count).map\
    \ { string.prefix($0) }\n                                    ~~~~~~~^~~~~~~~~~\n\
    \                                    String(          )\n"
  stdout: ''
  timestamp: 1660014018
- exit_code: -4
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var ret = [String]()\n  \
    \  for index in string.indices {\n        ret.append(String(string[..<index]))\n\
    \    }\n    return ret\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: Exception
  stderr: 'tmpwn44ze64/tmpwn44ze64.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1374204c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1373efbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1373efb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1373efa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwn44ze64                        0x0000556d2e818b58 <unavailable> + 7000

    5    libc.so.6                          0x00002b13743f0460 __libc_start_main +
    245

    6    tmpwn44ze64                        0x0000556d2e8185b9 <unavailable> + 5561

    '
  stdout: ''
  timestamp: 1660014136
- exit_code: 1
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    return (1...string.count).map\
    \ { string.prefix($0) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmpaow8jwz9.swift:6:44: error: cannot convert value of type 'String.SubSequence'\
    \ (aka 'Substring') to closure result type 'String'\n    return (1...string.count).map\
    \ { string.prefix($0) }\n                                    ~~~~~~~^~~~~~~~~~\n\
    \                                    String(          )\n"
  stdout: ''
  timestamp: 1660014018
- exit_code: -4
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    return stride(from: 1, to:\
    \ string.count, by: 1).map {\n        let start = string.index(string.startIndex,\
    \ offsetBy: $0)\n        let end = string.index(string.endIndex, offsetBy: 0)\n\
    \        return String(string[start..<end])\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: Exception
  stderr: 'tmp7w8da4i0/tmp7w8da4i0.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4f2d891c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4f2d588b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4f2d588988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4f2d5877b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7w8da4i0                        0x00005601ef9eeab8 <unavailable> + 6840

    5    libc.so.6                          0x00002b4f2da7d460 __libc_start_main +
    245

    6    tmp7w8da4i0                        0x00005601ef9ee519 <unavailable> + 5401

    '
  stdout: ''
  timestamp: 1660014136
- exit_code: -4
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    if string.isEmpty {\n   \
    \     return []\n    } else {\n        let prefix = string.prefix(1)\n       \
    \ let prefix_string = prefix.description\n        return [prefix_string] + all_prefixes(string:\
    \ String(string.dropFirst()))\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: Exception
  stderr: 'tmpseblak91/tmpseblak91.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad84e45bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad84e152b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad84e152988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad84e1517b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpseblak91                        0x0000561d6c5108c8 <unavailable> + 6344

    5    libc.so.6                          0x00002ad84e647460 __libc_start_main +
    245

    6    tmpseblak91                        0x0000561d6c510329 <unavailable> + 4905

    '
  stdout: ''
  timestamp: 1660014136
- exit_code: -4
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    return (1...string.count).map\
    \ { String(string.prefix($0)) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002adb81806c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adb814fd561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002adb814fd286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002adb814fd13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002adb814fcbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpd77_a4h9                        0x0000561ecca56c62 <unavailable> + 7266

    6    tmpd77_a4h9                        0x0000561ecca566d5 <unavailable> + 5845

    7    libc.so.6                          0x00002adb819f2460 __libc_start_main +
    245

    8    tmpd77_a4h9                        0x0000561ecca563d9 <unavailable> + 5081

    '
  stdout: ''
  timestamp: 1660014136
- exit_code: -4
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var result = [String]()\n\
    \    for (index, _) in string.enumerated() {\n        let start = string.index(string.startIndex,\
    \ offsetBy: index)\n        let end = string.index(string.endIndex, offsetBy:\
    \ -(string.count - 1 - index))\n        let range = start..<end\n        result.append(String(string[range]))\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: Exception
  stderr: 'tmp0wvpf495/tmp0wvpf495.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8951015c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8950d0cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8950d0c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8950d0b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0wvpf495                        0x0000558b705aac18 <unavailable> + 7192

    5    libc.so.6                          0x00002b8951201460 __libc_start_main +
    245

    6    tmp0wvpf495                        0x0000558b705aa679 <unavailable> + 5753

    '
  stdout: ''
  timestamp: 1660014136
- exit_code: -4
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var result: [String] = []\n\
    \    for i in 0..<string.count {\n        result.append(String(string[..<string.index(string.startIndex,\
    \ offsetBy: i)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: Exception
  stderr: 'tmpsfblqp4h/tmpsfblqp4h.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9d16fe6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9d16cddb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9d16cdd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9d16cdc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsfblqp4h                        0x000055618dd76b48 <unavailable> + 6984

    5    libc.so.6                          0x00002b9d171d2460 __libc_start_main +
    245

    6    tmpsfblqp4h                        0x000055618dd765a9 <unavailable> + 5545

    '
  stdout: ''
  timestamp: 1660014018
- exit_code: 1
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    let max = string.characters.count\n\
    \    var result = [String]()\n    for i in 0..<max {\n        result.append(string.substring(to:\
    \ string.index(string.startIndex, offsetBy: i + 1)))\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\n\
    assert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\",\
    \ \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"\
    WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmpo7asyjhr.swift:6:22: error: 'characters' is unavailable: Please\
    \ use String directly\n    let max = string.characters.count\n               \
    \      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpo7asyjhr.swift:9:30:\
    \ error: value of type 'String' has no member 'substring'\n        result.append(string.substring(to:\
    \ string.index(string.startIndex, offsetBy: i + 1)))\n                      ~~~~~~\
    \ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014136
- exit_code: 1
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    return (1...string.count).map\
    \ { string.prefix($0) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmpaow8jwz9.swift:6:44: error: cannot convert value of type 'String.SubSequence'\
    \ (aka 'Substring') to closure result type 'String'\n    return (1...string.count).map\
    \ { string.prefix($0) }\n                                    ~~~~~~~^~~~~~~~~~\n\
    \                                    String(          )\n"
  stdout: ''
  timestamp: 1660014018
- exit_code: -4
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var prefixes = [String]()\n\
    \    for i in 0...string.count {\n        let index = string.index(string.startIndex,\
    \ offsetBy: i)\n        prefixes.append(String(string[..<index]))\n    }\n   \
    \ return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: Exception
  stderr: 'tmp9q58vstm/tmp9q58vstm.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0ced019c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0cecd10b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0cecd10988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0cecd0f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9q58vstm                        0x000055f63c1259ae <unavailable> + 6574

    5    libc.so.6                          0x00002b0ced205460 __libc_start_main +
    245

    6    tmp9q58vstm                        0x000055f63c1255f9 <unavailable> + 5625

    '
  stdout: ''
  timestamp: 1660014018
- exit_code: 1
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    return stride(from: 1, to:\
    \ string.count, by: 1).map {\n        string.prefix($0)\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmp0oaau708.swift:7:16: error: cannot convert value of type 'String.SubSequence'\
    \ (aka 'Substring') to closure result type 'String'\n        string.prefix($0)\n\
    \        ~~~~~~~^~~~~~~~~~\n        String(          )\n"
  stdout: ''
  timestamp: 1660014136
- exit_code: -4
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var start = 0\n    var end\
    \ = string.count\n    var suffixes = [String]()\n    while end > start {\n   \
    \     let startIndex = string.index(string.startIndex, offsetBy: start)\n    \
    \    let endIndex = string.index(string.startIndex, offsetBy: end)\n        let\
    \ subStr = String(string[startIndex..<endIndex])\n        suffixes.append(subStr)\n\
    \        end -= 1\n    }\n    return suffixes\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: Exception
  stderr: 'tmpnl1855yx/tmpnl1855yx.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abc44e80c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abc44b77b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abc44b77988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abc44b767b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnl1855yx                        0x000055b05934d968 <unavailable> + 6504

    5    libc.so.6                          0x00002abc4506c460 __libc_start_main +
    245

    6    tmpnl1855yx                        0x000055b05934d3c9 <unavailable> + 5065

    '
  stdout: ''
  timestamp: 1660014136
- exit_code: 1
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    return (1...string.count).map\
    \ { string.substring(from: string.index(string.startIndex, offsetBy: $0)) }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\n\
    assert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\",\
    \ \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"\
    WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmpx989i_t0.swift:6:44: error: value of type 'String' has no member\
    \ 'substring'\n    return (1...string.count).map { string.substring(from: string.index(string.startIndex,\
    \ offsetBy: $0)) }\n                                    ~~~~~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014136
- exit_code: -4
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var result: [String] = []\n\
    \    for index in 1...string.count {\n        result.append(String(string[..<string.index(string.startIndex,\
    \ offsetBy: index)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002af6d5330c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af6d5027561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002af6d5027286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002af6d502713c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002af6d5026bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp3c201885                        0x000055e929554e45 <unavailable> + 7749

    6    tmp3c201885                        0x000055e9295548a5 <unavailable> + 6309

    7    libc.so.6                          0x00002af6d551c460 __libc_start_main +
    245

    8    tmp3c201885                        0x000055e9295545a9 <unavailable> + 5545

    '
  stdout: ''
  timestamp: 1660014136
- exit_code: -4
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var prefixes = [String]()\n\
    \    for i in 0..<string.count {\n        prefixes.append(String(string[..<string.index(string.startIndex,\
    \ offsetBy: i)]))\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: Exception
  stderr: 'tmpd84tlxsh/tmpd84tlxsh.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1fe7b1bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1fe7812b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1fe7812988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1fe78117b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd84tlxsh                        0x000056395d98ab98 <unavailable> + 7064

    5    libc.so.6                          0x00002b1fe7d07460 __libc_start_main +
    245

    6    tmpd84tlxsh                        0x000056395d98a5f9 <unavailable> + 5625

    '
  stdout: ''
  timestamp: 1660014018
- exit_code: 1
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    return string.enumerated().map\
    \ { index, _ in\n        string.prefix(index + 1)\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmps3bbdr1s.swift:7:16: error: cannot convert value of type 'String.SubSequence'\
    \ (aka 'Substring') to closure result type 'String'\n        string.prefix(index\
    \ + 1)\n        ~~~~~~~^~~~~~~~~~~~~~~~~\n        String(                 )\n"
  stdout: ''
  timestamp: 1660014136
- exit_code: -4
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var prefixes: [String] =\
    \ []\n    for i in 0...string.count {\n        prefixes.append(String(string[..<string.index(string.startIndex,\
    \ offsetBy: i)]))\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: Exception
  stderr: 'tmp3hodqsso/tmp3hodqsso.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b31d7f27c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b31d7c1eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b31d7c1e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b31d7c1d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3hodqsso                        0x000055a02e51295e <unavailable> + 6494

    5    libc.so.6                          0x00002b31d8113460 __libc_start_main +
    245

    6    tmp3hodqsso                        0x000055a02e5125a9 <unavailable> + 5545

    '
  stdout: ''
  timestamp: 1660014136
- exit_code: 1
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    let length = string.characters.count\n\
    \    var range: Range<String.Index>\n    var prefixes = [String]()\n    for i\
    \ in 0..<length {\n        range = string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: i+1)\n        prefixes.append(string.substring(with: range))\n   \
    \ }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmpcguajkcp.swift:6:25: error: 'characters' is unavailable: Please\
    \ use String directly\n    let length = string.characters.count\n            \
    \            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in\
    \ Swift 5.0\n    public var characters: String { get set }\n               ^\n\
    /tmp/tmpcguajkcp.swift:11:32: error: value of type 'String' has no member 'substring'\n\
    \        prefixes.append(string.substring(with: range))\n                    \
    \    ~~~~~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014136
- exit_code: 1
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var result = [String]()\n\
    \    for i in 0..<string.count {\n        result.append(string.prefix(i + 1))\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmpbgqgq8q2.swift:8:16: error: no exact matches in call to instance\
    \ method 'append'\n        result.append(string.prefix(i + 1))\n             \
    \  ^\nSwift.Array:6:37: note: candidate expects value of type 'String' for parameter\
    \ #1 (got 'PrefixSequence<String>')\n    @inlinable public mutating func append(_\
    \ newElement: __owned Element)\n                                    ^\nSwift.RangeReplaceableCollection:4:37:\
    \ note: candidate expects value of type 'String' for parameter #1 (got 'PrefixSequence<String>')\n\
    \    @inlinable public mutating func append(_ newElement: __owned Self.Element)\n\
    \                                    ^\n/tmp/tmpbgqgq8q2.swift:8:16: note: found\
    \ candidate with type '(__owned PrefixSequence<String>) -> ()'\n        result.append(string.prefix(i\
    \ + 1))\n               ^\n"
  stdout: ''
  timestamp: 1660014018
- exit_code: 0
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var prefixes = [String]()\n\
    \    for (index, _) in string.enumerated() {\n        prefixes.append(String(string[..<string.index(string.startIndex,\
    \ offsetBy: index + 1)]))\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014136
- exit_code: 1
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n  return string.indices.map {\
    \ i in\n    return string[string.startIndex...i]\n  }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmpni1wsadz.swift:7:18: error: cannot convert value of type 'String.SubSequence'\
    \ (aka 'Substring') to closure result type 'String'\n    return string[string.startIndex...i]\n\
    \           ~~~~~~^~~~~~~~~~~~~~~~~~~~~~~\n           String(                \
    \      )\n"
  stdout: ''
  timestamp: 1660014136
- exit_code: 1
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var i = 0\n    var result\
    \ = [String]()\n    while i < string.characters.count {\n        result.append(string.substring(to:\
    \ string.index(string.startIndex, offsetBy: i)))\n        i += 1\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmpvy0arp7n.swift:8:22: error: 'characters' is unavailable: Please\
    \ use String directly\n    while i < string.characters.count {\n             \
    \        ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpvy0arp7n.swift:9:30:\
    \ error: value of type 'String' has no member 'substring'\n        result.append(string.substring(to:\
    \ string.index(string.startIndex, offsetBy: i)))\n                      ~~~~~~\
    \ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014136
- exit_code: 0
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var prefixes = [String]()\n\
    \    let char_count = string.count\n    for i in 0..<char_count {\n        prefixes.append(String(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: i+1)]))\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014136
- exit_code: 1
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    return (1...string.count).map\
    \ { string.substring(to: $0) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmpt8x2z6ol.swift:6:44: error: value of type 'String' has no member\
    \ 'substring'\n    return (1...string.count).map { string.substring(to: $0) }\n\
    \                                    ~~~~~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014136
- exit_code: 1
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n  return stride(from: 1, to:\
    \ string.count, by: 1).map { string.prefix($0) }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmpp66jc3l1.swift:6:64: error: cannot convert value of type 'String.SubSequence'\
    \ (aka 'Substring') to closure result type 'String'\n  return stride(from: 1,\
    \ to: string.count, by: 1).map { string.prefix($0) }\n                       \
    \                                 ~~~~~~~^~~~~~~~~~\n                        \
    \                                String(          )\n"
  stdout: ''
  timestamp: 1660014136
- exit_code: -4
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var prefixes = [String]()\n\
    \    for i in 1...string.count {\n        prefixes.append(String(string.prefix(i)))\n\
    \    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b3f1e108c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3f1ddff561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b3f1ddff286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b3f1ddff13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b3f1ddfebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmppaqyo7ly                        0x0000561dd8e05cda <unavailable> + 7386

    6    tmppaqyo7ly                        0x0000561dd8e05745 <unavailable> + 5957

    7    libc.so.6                          0x00002b3f1e2f4460 __libc_start_main +
    245

    8    tmppaqyo7ly                        0x0000561dd8e05449 <unavailable> + 5193

    '
  stdout: ''
  timestamp: 1660014136
- exit_code: 0
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var result = [String]()\n\
    \    for i in 0..<string.count {\n        result.append(String(string[string.startIndex...string.index(string.startIndex,\
    \ offsetBy: i)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014018
- exit_code: 1
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    return stride(from: 0, to:\
    \ string.characters.count, by: 1).map { String(string.characters.prefix($0)) }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\n\
    assert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\",\
    \ \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"\
    WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmp_g9xbq_c.swift:6:39: error: 'characters' is unavailable: Please\
    \ use String directly\n    return stride(from: 0, to: string.characters.count,\
    \ by: 1).map { String(string.characters.prefix($0)) }\n                      \
    \                ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmp_g9xbq_c.swift:6:84: error: 'characters' is unavailable: Please use\
    \ String directly\n    return stride(from: 0, to: string.characters.count, by:\
    \ 1).map { String(string.characters.prefix($0)) }\n                          \
    \                                                         ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660014136
- exit_code: 1
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var result: [String] = []\n\
    \    let last_index = string.endIndex\n    for index in string.indices {\n   \
    \     result.append(string[string.startIndex...index])\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\n\
    assert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\",\
    \ \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"\
    WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmpzn12__sr.swift:9:29: error: subscript 'subscript(_:)' requires\
    \ the types 'String.Index' and 'Int' be equivalent\n        result.append(string[string.startIndex...index])\n\
    \                            ^\nSwift.String:5:12: note: where 'R.Bound' = 'String.Index'\n\
    \    public subscript<R>(bounds: R) -> String where R : RangeExpression, R.Bound\
    \ == Int { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014136
- exit_code: 1
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var result: [String] = []\n\
    \    for i in 0..<string.count {\n        result.append(string.substring(to: string.index(string.startIndex,\
    \ offsetBy: i+1)))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmp9oamsdu5.swift:8:30: error: value of type 'String' has no member\
    \ 'substring'\n        result.append(string.substring(to: string.index(string.startIndex,\
    \ offsetBy: i+1)))\n                      ~~~~~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014136
- exit_code: 1
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var ret : [String] = []\n\
    \    for i in 1...string.characters.count {\n        ret.append(string.substring(to:\
    \ string.index(string.startIndex, offsetBy: i)))\n    }\n    return ret\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\n\
    assert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\",\
    \ \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"\
    WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmpqpcx84zc.swift:7:25: error: 'characters' is unavailable: Please\
    \ use String directly\n    for i in 1...string.characters.count {\n          \
    \              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpqpcx84zc.swift:8:27: error: value of type 'String' has no member\
    \ 'substring'\n        ret.append(string.substring(to: string.index(string.startIndex,\
    \ offsetBy: i)))\n                   ~~~~~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014136
- exit_code: 1
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    let chars = string.characters\n\
    \    let length = chars.count\n    var prefixes = [String]()\n    for i in 0..<length\
    \ {\n        let startIndex = chars.startIndex\n        let iChars = chars.suffix(from:\
    \ chars.index(startIndex, offsetBy: i))\n        prefixes.append(String(iChars))\n\
    \    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmp0fpktxi2.swift:6:24: error: 'characters' is unavailable: Please\
    \ use String directly\n    let chars = string.characters\n                   \
    \    ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660014136
- exit_code: -4
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n  var result: [String] = []\n\
    \  for i in 0...string.count {\n    result.append(String(string[..<string.index(string.startIndex,\
    \ offsetBy: i)]))\n  }\n  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: Exception
  stderr: 'tmpsrqc07xi/tmpsrqc07xi.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4c18300c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4c17ff7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4c17ff7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4c17ff67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsrqc07xi                        0x0000560510ffe95e <unavailable> + 6494

    5    libc.so.6                          0x00002b4c184ec460 __libc_start_main +
    245

    6    tmpsrqc07xi                        0x0000560510ffe5a9 <unavailable> + 5545

    '
  stdout: ''
  timestamp: 1660014136
- exit_code: -4
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n  var array = [String]()\n  for\
    \ i in 0..<string.count {\n    array.append(String(string[..<string.index(string.startIndex,\
    \ offsetBy: i)]))\n  }\n  return array\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: Exception
  stderr: 'tmpjuyebw__/tmpjuyebw__.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0fff2f5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0ffefecb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0ffefec988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0ffefeb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjuyebw__                        0x000055798e0fdb98 <unavailable> + 7064

    5    libc.so.6                          0x00002b0fff4e1460 __libc_start_main +
    245

    6    tmpjuyebw__                        0x000055798e0fd5f9 <unavailable> + 5625

    '
  stdout: ''
  timestamp: 1660014136
- exit_code: 1
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var result = [String]()\n\
    \    for i in 0..<string.count {\n        result.append(string.prefix(i+1))\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmp2lngscwb.swift:8:16: error: no exact matches in call to instance\
    \ method 'append'\n        result.append(string.prefix(i+1))\n               ^\n\
    Swift.Array:6:37: note: candidate expects value of type 'String' for parameter\
    \ #1 (got 'PrefixSequence<String>')\n    @inlinable public mutating func append(_\
    \ newElement: __owned Element)\n                                    ^\nSwift.RangeReplaceableCollection:4:37:\
    \ note: candidate expects value of type 'String' for parameter #1 (got 'PrefixSequence<String>')\n\
    \    @inlinable public mutating func append(_ newElement: __owned Self.Element)\n\
    \                                    ^\n/tmp/tmp2lngscwb.swift:8:16: note: found\
    \ candidate with type '(__owned PrefixSequence<String>) -> ()'\n        result.append(string.prefix(i+1))\n\
    \               ^\n"
  stdout: ''
  timestamp: 1660014018
- exit_code: 1
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var result: [String] = []\n\
    \    for i in 0..<string.characters.count {\n        result.append(string.substring(to:\
    \ string.index(string.startIndex, offsetBy: i + 1)))\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\n\
    assert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\",\
    \ \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"\
    WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmp_cudqw87.swift:7:25: error: 'characters' is unavailable: Please\
    \ use String directly\n    for i in 0..<string.characters.count {\n          \
    \              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmp_cudqw87.swift:8:30: error: value of type 'String' has no member\
    \ 'substring'\n        result.append(string.substring(to: string.index(string.startIndex,\
    \ offsetBy: i + 1)))\n                      ~~~~~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014136
- exit_code: -4
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var prefixes = [String]()\n\
    \    for (i, _) in string.enumerated() {\n        let index = string.index(string.startIndex,\
    \ offsetBy: i)\n        prefixes.append(String(string[..<index]))\n    }\n   \
    \ return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: Exception
  stderr: 'tmpu8r3ht_3/tmpu8r3ht_3.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab6801e7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab67fedeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab67fede988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab67fedd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu8r3ht_3                        0x000055e724cfdca8 <unavailable> + 7336

    5    libc.so.6                          0x00002ab6803d3460 __libc_start_main +
    245

    6    tmpu8r3ht_3                        0x000055e724cfd709 <unavailable> + 5897

    '
  stdout: ''
  timestamp: 1660014136
- exit_code: 1
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var prefixes = [String]()\n\
    \    for index in 1...string.count {\n        prefixes.append(string.prefix(index))\n\
    \    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmpz4i41u0j.swift:8:18: error: no exact matches in call to instance\
    \ method 'append'\n        prefixes.append(string.prefix(index))\n           \
    \      ^\nSwift.Array:6:37: note: candidate expects value of type 'String' for\
    \ parameter #1 (got 'PrefixSequence<String>')\n    @inlinable public mutating\
    \ func append(_ newElement: __owned Element)\n                               \
    \     ^\nSwift.RangeReplaceableCollection:4:37: note: candidate expects value\
    \ of type 'String' for parameter #1 (got 'PrefixSequence<String>')\n    @inlinable\
    \ public mutating func append(_ newElement: __owned Self.Element)\n          \
    \                          ^\n/tmp/tmpz4i41u0j.swift:8:18: note: found candidate\
    \ with type '(__owned PrefixSequence<String>) -> ()'\n        prefixes.append(string.prefix(index))\n\
    \                 ^\n"
  stdout: ''
  timestamp: 1660014136
- exit_code: -4
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var result = [String]()\n\
    \    for i in 0..<string.count {\n        result.append(String(string[..<string.index(string.startIndex,\
    \ offsetBy: i)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: Exception
  stderr: 'tmplip34u1j/tmplip34u1j.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba6ac488c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba6ac17fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba6ac17f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba6ac17e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplip34u1j                        0x0000560648df0b98 <unavailable> + 7064

    5    libc.so.6                          0x00002ba6ac674460 __libc_start_main +
    245

    6    tmplip34u1j                        0x0000560648df05f9 <unavailable> + 5625

    '
  stdout: ''
  timestamp: 1660014018
- exit_code: 0
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var prefixes = [String]()\n\
    \    for i in 0..<string.count {\n        prefixes.append(String(string[string.startIndex...string.index(string.startIndex,\
    \ offsetBy: i)]))\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014136
- exit_code: 0
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var result: [String] = []\n\
    \    for char in string {\n        let last = result.last ?? \"\"\n        result.append(last\
    \ + String(char))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014136
- exit_code: 1
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    return (1...string.count).map\
    \ { string.prefix($0) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmpaow8jwz9.swift:6:44: error: cannot convert value of type 'String.SubSequence'\
    \ (aka 'Substring') to closure result type 'String'\n    return (1...string.count).map\
    \ { string.prefix($0) }\n                                    ~~~~~~~^~~~~~~~~~\n\
    \                                    String(          )\n"
  stdout: ''
  timestamp: 1660014018
- exit_code: -4
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    let length = string.count\n\
    \    return (0..<length).map {\n        let start = string.index(string.startIndex,\
    \ offsetBy: $0)\n        let end = string.index(string.startIndex, offsetBy: length\
    \ - $0)\n        return String(string[start..<end])\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b57d6471c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b57d6168561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b57d6168286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b57d616813c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b57d6167bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpuziqg1g9                        0x0000557cda3edf22 <unavailable> + 7970

    6    tmpuziqg1g9                        0x0000557cda3ee338 <unavailable> + 9016

    7    libswiftCore.so                    0x00002b57d6150820 Collection.map<A>(_:)
    + 426

    8    tmpuziqg1g9                        0x0000557cda3edc7f <unavailable> + 7295

    9    tmpuziqg1g9                        0x0000557cda3ed827 <unavailable> + 6183

    10   libc.so.6                          0x00002b57d665d460 __libc_start_main +
    245

    11   tmpuziqg1g9                        0x0000557cda3ed449 <unavailable> + 5193

    '
  stdout: ''
  timestamp: 1660014136
- exit_code: -4
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var result = [String]()\n\
    \    for i in 1...string.count {\n        result.append(String(string[..<string.index(string.startIndex,\
    \ offsetBy: i)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002ae8de5e4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae8de2db561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ae8de2db286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ae8de2db13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ae8de2dabb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp4vkpp3z3                        0x000055b124a04e8a <unavailable> + 7818

    6    tmp4vkpp3z3                        0x000055b124a048f5 <unavailable> + 6389

    7    libc.so.6                          0x00002ae8de7d0460 __libc_start_main +
    245

    8    tmp4vkpp3z3                        0x000055b124a045f9 <unavailable> + 5625

    '
  stdout: ''
  timestamp: 1660014136
- exit_code: 1
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    return Array(0...string.count).map\
    \ {\n        string.prefix($0)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmpmvpecnym.swift:7:16: error: cannot convert value of type 'String.SubSequence'\
    \ (aka 'Substring') to closure result type 'String'\n        string.prefix($0)\n\
    \        ~~~~~~~^~~~~~~~~~\n        String(          )\n"
  stdout: ''
  timestamp: 1660014136
- exit_code: -4
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var strings = [String]()\n\
    \    for i in 0..<string.count {\n        strings.append(String(string[..<string.index(string.startIndex,\
    \ offsetBy: i)]))\n    }\n    return strings\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: Exception
  stderr: 'tmp8legw4ri/tmp8legw4ri.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad784c3cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad784933b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad784933988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad7849327b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8legw4ri                        0x0000559e4d93db98 <unavailable> + 7064

    5    libc.so.6                          0x00002ad784e28460 __libc_start_main +
    245

    6    tmp8legw4ri                        0x0000559e4d93d5f9 <unavailable> + 5625

    '
  stdout: ''
  timestamp: 1660014136
- exit_code: 1
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    return stride(from: 1, to:\
    \ string.characters.count + 1, by: 1).map {\n        index -> String in\n    \
    \    let start = string.index(string.startIndex, offsetBy: 0)\n        let end\
    \ = string.index(string.startIndex, offsetBy: index)\n        return string.substring(with:\
    \ start..<end)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmpkym83wym.swift:10:23: error: value of type 'String' has no member\
    \ 'substring'\n        return string.substring(with: start..<end)\n          \
    \     ~~~~~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014136
- exit_code: 0
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var result: [String] = []\n\
    \    for (index, _) in string.enumerated() {\n        result.append(String(string[..<string.index(string.startIndex,\
    \ offsetBy: index + 1)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014136
- exit_code: -4
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var result: [String] = []\n\
    \    for i in 0...string.count {\n        let start = string.index(string.startIndex,\
    \ offsetBy: 0)\n        let end = string.index(string.startIndex, offsetBy: i)\n\
    \        let range = start..<end\n        result.append(String(string[range]))\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: Exception
  stderr: 'tmp0099dsh5/tmp0099dsh5.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b60bf495c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b60bf18cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b60bf18c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b60bf18b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0099dsh5                        0x000055cf27a6181e <unavailable> + 6174

    5    libc.so.6                          0x00002b60bf681460 __libc_start_main +
    245

    6    tmp0099dsh5                        0x000055cf27a61469 <unavailable> + 5225

    '
  stdout: ''
  timestamp: 1660014136
- exit_code: 1
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    let results = (1...string.characters.count).flatMap\
    \ {\n        string.substring(to: string.index(string.startIndex, offsetBy: $0))\n\
    \    }\n    return results\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmpy039vjt_.swift:7:16: error: value of type 'String' has no member\
    \ 'substring'\n        string.substring(to: string.index(string.startIndex, offsetBy:\
    \ $0))\n        ~~~~~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014136
- exit_code: 0
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var result = [String]()\n\
    \    for index in 0..<string.count {\n        result.append(String(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: index + 1)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014136
- exit_code: -4
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var result = [String]()\n\
    \    for i in 1...string.count {\n        result.append(String(string[..<string.index(string.startIndex,\
    \ offsetBy: i)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002ae8de5e4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae8de2db561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ae8de2db286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ae8de2db13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ae8de2dabb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp4vkpp3z3                        0x000055b124a04e8a <unavailable> + 7818

    6    tmp4vkpp3z3                        0x000055b124a048f5 <unavailable> + 6389

    7    libc.so.6                          0x00002ae8de7d0460 __libc_start_main +
    245

    8    tmp4vkpp3z3                        0x000055b124a045f9 <unavailable> + 5625

    '
  stdout: ''
  timestamp: 1660014136
- exit_code: 1
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var result = [String]()\n\
    \    for length in 1...string.count {\n        result.append(string.substring(to:\
    \ string.index(string.startIndex, offsetBy: length)))\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\n\
    assert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\",\
    \ \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"\
    WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmpknpif8nc.swift:8:30: error: value of type 'String' has no member\
    \ 'substring'\n        result.append(string.substring(to: string.index(string.startIndex,\
    \ offsetBy: length)))\n                      ~~~~~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014136
- exit_code: -4
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var result: [String] = []\n\
    \    for i in 0..<string.count {\n        result.append(String(string[..<string.index(string.startIndex,\
    \ offsetBy: i)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: Exception
  stderr: 'tmpsfblqp4h/tmpsfblqp4h.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9d16fe6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9d16cddb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9d16cdd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9d16cdc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsfblqp4h                        0x000055618dd76b48 <unavailable> + 6984

    5    libc.so.6                          0x00002b9d171d2460 __libc_start_main +
    245

    6    tmpsfblqp4h                        0x000055618dd765a9 <unavailable> + 5545

    '
  stdout: ''
  timestamp: 1660014018
- exit_code: -4
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    return Array(0..<string.count).map\
    \ {\n        let start = string.index(string.startIndex, offsetBy: $0)\n     \
    \   let end = string.index(string.endIndex, offsetBy: $0 - string.count)\n   \
    \     return String(string[start..<end])\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: Exception
  stderr: 'tmpa_82ho39/tmpa_82ho39.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0a87d9cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0a87a93b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0a87a93988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0a87a927b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpa_82ho39                        0x000055f028da1af8 <unavailable> + 6904

    5    libc.so.6                          0x00002b0a87f88460 __libc_start_main +
    245

    6    tmpa_82ho39                        0x000055f028da1559 <unavailable> + 5465

    '
  stdout: ''
  timestamp: 1660014136
- exit_code: 1
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    let charLength = string.characters.count\n\
    \    return (0..<charLength).map { string.substring(to: string.index(string.startIndex,\
    \ offsetBy: $0)) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmpj9vxst9t.swift:6:29: error: 'characters' is unavailable: Please\
    \ use String directly\n    let charLength = string.characters.count\n        \
    \                    ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpj9vxst9t.swift:7:42: error: value of type 'String' has no member\
    \ 'substring'\n    return (0..<charLength).map { string.substring(to: string.index(string.startIndex,\
    \ offsetBy: $0)) }\n                                  ~~~~~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014136
- exit_code: 1
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n  var result: [String] = []\n\
    \  for i in 0...string.characters.count {\n    result.append(string.substring(to:\
    \ string.index(string.startIndex, offsetBy: i)))\n  }\n  return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\n\
    assert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\",\
    \ \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"\
    WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmp7daomhww.swift:7:23: error: 'characters' is unavailable: Please\
    \ use String directly\n  for i in 0...string.characters.count {\n            \
    \          ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in\
    \ Swift 5.0\n    public var characters: String { get set }\n               ^\n\
    /tmp/tmp7daomhww.swift:8:26: error: value of type 'String' has no member 'substring'\n\
    \    result.append(string.substring(to: string.index(string.startIndex, offsetBy:\
    \ i)))\n                  ~~~~~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014136
- exit_code: 1
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var result: [String] = []\n\
    \    let count = string.count\n    for i in 0 ..< count {\n        result.append(string.substring(from:\
    \ i))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmpjhpi3ja0.swift:9:30: error: value of type 'String' has no member\
    \ 'substring'\n        result.append(string.substring(from: i))\n            \
    \          ~~~~~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014136
- exit_code: 0
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var chars = Array(string)\n\
    \    var prefixes = [String]()\n    for i in 0..<chars.count {\n        let prefix\
    \ = String(chars[0...i])\n        prefixes.append(prefix)\n    }\n    return prefixes\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\n\
    assert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\",\
    \ \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"\
    WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014136
- exit_code: -4
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var arr: [String] = []\n\
    \    for i in 0...string.count {\n        arr.append(String(string[..<string.index(string.startIndex,\
    \ offsetBy: i)]))\n    }\n    return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: Exception
  stderr: 'tmprdycpv_u/tmprdycpv_u.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b065082bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0650522b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0650522988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b06505217b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprdycpv_u                        0x000055b1207e795e <unavailable> + 6494

    5    libc.so.6                          0x00002b0650a17460 __libc_start_main +
    245

    6    tmprdycpv_u                        0x000055b1207e75a9 <unavailable> + 5545

    '
  stdout: ''
  timestamp: 1660014136
- exit_code: 1
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var result: [String] = []\n\
    \    for i in 1...string.characters.count {\n        result.append(string.substring(to:\
    \ string.index(string.startIndex, offsetBy: i)))\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\n\
    assert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\",\
    \ \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"\
    WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmpviblcjhu.swift:7:25: error: 'characters' is unavailable: Please\
    \ use String directly\n    for i in 1...string.characters.count {\n          \
    \              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpviblcjhu.swift:8:30: error: value of type 'String' has no member\
    \ 'substring'\n        result.append(string.substring(to: string.index(string.startIndex,\
    \ offsetBy: i)))\n                      ~~~~~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014136
- exit_code: -4
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    let stringLength = string.count\n\
    \    var result: [String] = []\n    for i in 1...stringLength {\n        result.append(String(string[..<string.index(string.startIndex,\
    \ offsetBy: i)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b80cd190c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b80cce87561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b80cce87286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b80cce8713c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b80cce86bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp7nj07c_n                        0x000055e95c749e4b <unavailable> + 7755

    6    tmp7nj07c_n                        0x000055e95c7498a5 <unavailable> + 6309

    7    libc.so.6                          0x00002b80cd37c460 __libc_start_main +
    245

    8    tmp7nj07c_n                        0x000055e95c7495a9 <unavailable> + 5545

    '
  stdout: ''
  timestamp: 1660014136
- exit_code: 0
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var prefixes = [String]()\n\
    \    for index in 0..<string.count {\n        prefixes.append(String(string[string.startIndex...string.index(string.startIndex,\
    \ offsetBy: index)]))\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014136
- exit_code: 1
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    return string.characters.indices.map\
    \ {\n        string.substringToIndex($0)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmptus65u_b.swift:7:16: error: value of type 'String' has no member\
    \ 'substringToIndex'\n        string.substringToIndex($0)\n        ~~~~~~ ^~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014136
- exit_code: 0
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var prefixes: [String] =\
    \ []\n    for index in 0..<string.count {\n        prefixes.append(String(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: index + 1)]))\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014018
- exit_code: 1
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    if string.isEmpty {\n   \
    \     return []\n    }\n    var prefixes = [String]()\n    for i in 1...string.count\
    \ {\n        prefixes.append(string.prefix(i))\n    }\n    return prefixes\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\n\
    assert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\",\
    \ \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"\
    WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmpaa_hdwh4.swift:11:18: error: no exact matches in call to instance\
    \ method 'append'\n        prefixes.append(string.prefix(i))\n               \
    \  ^\nSwift.Array:6:37: note: candidate expects value of type 'String' for parameter\
    \ #1 (got 'PrefixSequence<String>')\n    @inlinable public mutating func append(_\
    \ newElement: __owned Element)\n                                    ^\nSwift.RangeReplaceableCollection:4:37:\
    \ note: candidate expects value of type 'String' for parameter #1 (got 'PrefixSequence<String>')\n\
    \    @inlinable public mutating func append(_ newElement: __owned Self.Element)\n\
    \                                    ^\n/tmp/tmpaa_hdwh4.swift:11:18: note: found\
    \ candidate with type '(__owned PrefixSequence<String>) -> ()'\n        prefixes.append(string.prefix(i))\n\
    \                 ^\n"
  stdout: ''
  timestamp: 1660014136
- exit_code: 1
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var prefixes = [String]()\n\
    \    for i in 1...string.count {\n        prefixes.append(string.prefix(i))\n\
    \    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmpp1z5_h4s.swift:8:18: error: no exact matches in call to instance\
    \ method 'append'\n        prefixes.append(string.prefix(i))\n               \
    \  ^\nSwift.Array:6:37: note: candidate expects value of type 'String' for parameter\
    \ #1 (got 'PrefixSequence<String>')\n    @inlinable public mutating func append(_\
    \ newElement: __owned Element)\n                                    ^\nSwift.RangeReplaceableCollection:4:37:\
    \ note: candidate expects value of type 'String' for parameter #1 (got 'PrefixSequence<String>')\n\
    \    @inlinable public mutating func append(_ newElement: __owned Self.Element)\n\
    \                                    ^\n/tmp/tmpp1z5_h4s.swift:8:18: note: found\
    \ candidate with type '(__owned PrefixSequence<String>) -> ()'\n        prefixes.append(string.prefix(i))\n\
    \                 ^\n"
  stdout: ''
  timestamp: 1660014136
- exit_code: -4
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    let count = string.count\n\
    \    let str = Array(string)\n    var prefixes: [String] = []\n    for i in 1...count\
    \ {\n        let start = str.startIndex\n        let end = str.index(start, offsetBy:\
    \ i)\n        let sub = String(str[start..<end])\n        prefixes.append(sub)\n\
    \    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002ac1bf843c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac1bf53a561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ac1bf53a286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ac1bf53a13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ac1bf539bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp10nvjlr4                        0x0000562e23c5ff22 <unavailable> + 7970

    6    tmp10nvjlr4                        0x0000562e23c5f8e5 <unavailable> + 6373

    7    libc.so.6                          0x00002ac1bfa2f460 __libc_start_main +
    245

    8    tmp10nvjlr4                        0x0000562e23c5f5e9 <unavailable> + 5609

    '
  stdout: ''
  timestamp: 1660014136
- exit_code: -4
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    // TODO: Implement\n\n  \
    \  var ret = [String]()\n    for i in 0..<string.count {\n        ret.append(String(string[..<string.index(string.startIndex,\
    \ offsetBy: i)]))\n    }\n    return ret\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: Exception
  stderr: 'tmpm194jvd2/tmpm194jvd2.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaab5554c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaab524bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaab524b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaab524a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpm194jvd2                        0x000056137cb35b98 <unavailable> + 7064

    5    libc.so.6                          0x00002aaab5740460 __libc_start_main +
    245

    6    tmpm194jvd2                        0x000056137cb355f9 <unavailable> + 5625

    '
  stdout: ''
  timestamp: 1660014136
- exit_code: 1
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var prefixes = [String]()\n\
    \    let count = string.count\n    for index in 1...count {\n        prefixes.append(String(string[..<index]))\n\
    \    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmpui3b2tw_.swift:9:32: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an integer range, use a String.Index range instead.\n\
    \        prefixes.append(String(string[..<index]))\n                         \
    \      ^~~~~~~~~~~~~~~~\nSwift.String:5:12: note: 'subscript(_:)' has been explicitly\
    \ marked unavailable here\n    public subscript<R>(bounds: R) -> String where\
    \ R : RangeExpression, R.Bound == Int { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014136
- exit_code: 0
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var prefixes = [String]()\n\
    \    for index in 0..<string.count {\n        prefixes.append(String(string[string.startIndex...string.index(string.startIndex,\
    \ offsetBy: index)]))\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014136
- exit_code: 1
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var prefixes = [String]()\n\
    \    for i in 0..<string.count {\n        prefixes.append(string.substring(to:\
    \ string.index(string.startIndex, offsetBy: i+1)))\n    }\n    return prefixes\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\n\
    assert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\",\
    \ \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"\
    WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmpdyjhsd86.swift:8:32: error: value of type 'String' has no member\
    \ 'substring'\n        prefixes.append(string.substring(to: string.index(string.startIndex,\
    \ offsetBy: i+1)))\n                        ~~~~~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014136
- exit_code: 1
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    return string.characters.reduce(into:\
    \ [\"\"]) { result, char in\n        result.append(result.last! + String(char))\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\
    \") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmp0murddhu.swift:6:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    return string.characters.reduce(into: [\"\"]) { result,\
    \ char in\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1660014136
- exit_code: -4
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n  var result: [String] = []\n\
    \  var counter = 0\n  while (counter < string.count) {\n    let range = string.index(string.startIndex,\
    \ offsetBy: counter)..<string.endIndex\n    result.append(String(string[range]))\n\
    \    counter += 1\n  }\n  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: Exception
  stderr: 'tmprefqd_wu/tmprefqd_wu.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b294a3bec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b294a0b5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b294a0b5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b294a0b47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprefqd_wu                        0x000056508a7ec968 <unavailable> + 6504

    5    libc.so.6                          0x00002b294a5aa460 __libc_start_main +
    245

    6    tmprefqd_wu                        0x000056508a7ec3c9 <unavailable> + 5065

    '
  stdout: ''
  timestamp: 1660014136
- exit_code: 1
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    guard string.characters.count\
    \ > 0 else { return [String]() }\n    var result = [String]()\n    for index in\
    \ 1...string.characters.count {\n        result.append(string.substring(to: string.index(string.startIndex,\
    \ offsetBy: index)))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmpmztsmnjs.swift:6:18: error: 'characters' is unavailable: Please\
    \ use String directly\n    guard string.characters.count > 0 else { return [String]()\
    \ }\n                 ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpmztsmnjs.swift:8:29: error: 'characters' is unavailable: Please use\
    \ String directly\n    for index in 1...string.characters.count {\n          \
    \                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpmztsmnjs.swift:9:30: error: value of type 'String' has no member\
    \ 'substring'\n        result.append(string.substring(to: string.index(string.startIndex,\
    \ offsetBy: index)))\n                      ~~~~~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014136
- exit_code: 1
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var array: [String] = []\n\
    \    for i in 0..<string.count {\n        array.append(string.prefix(i + 1))\n\
    \    }\n    return array\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmp4frdd4gs.swift:8:15: error: no exact matches in call to instance\
    \ method 'append'\n        array.append(string.prefix(i + 1))\n              ^\n\
    Swift.Array:6:37: note: candidate expects value of type 'String' for parameter\
    \ #1 (got 'PrefixSequence<String>')\n    @inlinable public mutating func append(_\
    \ newElement: __owned Element)\n                                    ^\nSwift.RangeReplaceableCollection:4:37:\
    \ note: candidate expects value of type 'String' for parameter #1 (got 'PrefixSequence<String>')\n\
    \    @inlinable public mutating func append(_ newElement: __owned Self.Element)\n\
    \                                    ^\n/tmp/tmp4frdd4gs.swift:8:15: note: found\
    \ candidate with type '(__owned PrefixSequence<String>) -> ()'\n        array.append(string.prefix(i\
    \ + 1))\n              ^\n"
  stdout: ''
  timestamp: 1660014136
- exit_code: 1
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var prefixes: [String] =\
    \ []\n    let length = string.characters.count\n    for i in 0..<length {\n  \
    \      let index = string.startIndex.advancedBy(i)\n        prefixes.append(string.substringToIndex(index))\n\
    \    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmpy_erisue.swift:7:25: error: 'characters' is unavailable: Please\
    \ use String directly\n    let length = string.characters.count\n            \
    \            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in\
    \ Swift 5.0\n    public var characters: String { get set }\n               ^\n\
    /tmp/tmpy_erisue.swift:9:39: error: value of type 'String.Index' has no member\
    \ 'advancedBy'\n        let index = string.startIndex.advancedBy(i)\n        \
    \            ~~~~~~~~~~~~~~~~~ ^~~~~~~~~~\n/tmp/tmpy_erisue.swift:10:32: error:\
    \ value of type 'String' has no member 'substringToIndex'\n        prefixes.append(string.substringToIndex(index))\n\
    \                        ~~~~~~ ^~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014136
- exit_code: -4
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    return (1...string.count).map({index\
    \ in\n        string.index(string.startIndex, offsetBy: index)\n    }).map({index\
    \ in\n        String(string[..<index])\n    })\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b513fb47c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b513f83e561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b513f83e286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b513f83e13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b513f83dbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp9nwzx2rh                        0x000055577e69de9c <unavailable> + 7836

    6    tmp9nwzx2rh                        0x000055577e69d905 <unavailable> + 6405

    7    libc.so.6                          0x00002b513fd33460 __libc_start_main +
    245

    8    tmp9nwzx2rh                        0x000055577e69d609 <unavailable> + 5641

    '
  stdout: ''
  timestamp: 1660014136
- exit_code: 0
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n  var current_string = \"\"\n\
    \  var array: [String] = []\n  for char in string {\n    current_string.append(char)\n\
    \    array.append(current_string)\n  }\n  return array\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014136
- exit_code: 0
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var result: [String] = []\n\
    \    for (idx, _) in string.enumerated() {\n        result.append(String(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: idx + 1)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014136
- exit_code: 1
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var results = [String]()\n\
    \    for i in 1...string.count {\n        results.append(string.prefix(i))\n \
    \   }\n    return results\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmp38c44178.swift:8:17: error: no exact matches in call to instance\
    \ method 'append'\n        results.append(string.prefix(i))\n                ^\n\
    Swift.Array:6:37: note: candidate expects value of type 'String' for parameter\
    \ #1 (got 'PrefixSequence<String>')\n    @inlinable public mutating func append(_\
    \ newElement: __owned Element)\n                                    ^\nSwift.RangeReplaceableCollection:4:37:\
    \ note: candidate expects value of type 'String' for parameter #1 (got 'PrefixSequence<String>')\n\
    \    @inlinable public mutating func append(_ newElement: __owned Self.Element)\n\
    \                                    ^\n/tmp/tmp38c44178.swift:8:17: note: found\
    \ candidate with type '(__owned PrefixSequence<String>) -> ()'\n        results.append(string.prefix(i))\n\
    \                ^\n"
  stdout: ''
  timestamp: 1660014136
- exit_code: 1
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    return (1...string.count).map\
    \ { string.prefix($0) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmpaow8jwz9.swift:6:44: error: cannot convert value of type 'String.SubSequence'\
    \ (aka 'Substring') to closure result type 'String'\n    return (1...string.count).map\
    \ { string.prefix($0) }\n                                    ~~~~~~~^~~~~~~~~~\n\
    \                                    String(          )\n"
  stdout: ''
  timestamp: 1660014018
- exit_code: 1
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var stringLength = string.characters.count\n\
    \    var prefixes = [String]()\n    for var i = 0; i < stringLength; i++ {\n \
    \       let index = string.startIndex.advancedBy(i)\n        let prefix = string.substringToIndex(index)\n\
    \        prefixes.append(prefix)\n    }\n    return prefixes\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmp9_rxrard.swift:8:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for var i = 0; i < stringLength; i++ {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp9_rxrard.swift:6:31: error: 'characters' is unavailable: Please use String\
    \ directly\n    var stringLength = string.characters.count\n                 \
    \             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmp9_rxrard.swift:9:39: error: value of type 'String.Index' has no member\
    \ 'advancedBy'\n        let index = string.startIndex.advancedBy(i)\n        \
    \            ~~~~~~~~~~~~~~~~~ ^~~~~~~~~~\n/tmp/tmp9_rxrard.swift:10:29: error:\
    \ value of type 'String' has no member 'substringToIndex'\n        let prefix\
    \ = string.substringToIndex(index)\n                     ~~~~~~ ^~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014136
- exit_code: 0
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var result: [String] = []\n\
    \    for (index, _) in string.enumerated() {\n        result.append(String(string[..<string.index(string.startIndex,\
    \ offsetBy: index + 1)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014136
- exit_code: -4
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    let length = string.count\n\
    \    var output = [String]()\n    for i in 1..<length {\n        output.append(String(string[..<string.index(string.startIndex,\
    \ offsetBy: i)]))\n    }\n    output.append(string)\n    return output\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\n\
    assert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\",\
    \ \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"\
    WW\", \"WWW\"])"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002af8aa6a6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af8aa39d561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002af8aa39d286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002af8aa39d13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002af8aa39cbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpa2h8k293                        0x0000564ed271fe88 <unavailable> + 7816

    6    tmpa2h8k293                        0x0000564ed271f8f5 <unavailable> + 6389

    7    libc.so.6                          0x00002af8aa892460 __libc_start_main +
    245

    8    tmpa2h8k293                        0x0000564ed271f5f9 <unavailable> + 5625

    '
  stdout: ''
  timestamp: 1660014137
- exit_code: 1
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    return string.indices.map\
    \ { string[string.startIndex..<$0.successor()] }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmp6mi8ma00.swift:6:63: error: value of type 'DefaultIndices<String>.Element'\
    \ (aka 'String.Index') has no member 'successor'\n    return string.indices.map\
    \ { string[string.startIndex..<$0.successor()] }\n                           \
    \                                ~~ ^~~~~~~~~\n/tmp/tmp6mi8ma00.swift:6:39: error:\
    \ cannot convert value of type 'Substring' to closure result type 'String'\n \
    \   return string.indices.map { string[string.startIndex..<$0.successor()] }\n\
    \                                ~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \                                String(                                   )\n"
  stdout: ''
  timestamp: 1660014136
- exit_code: 1
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var result = [String]()\n\
    \    for i in 0..<string.count {\n        result.append(string.substr(i...))\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmppw9o596w.swift:8:30: error: value of type 'String' has no member\
    \ 'substr'\n        result.append(string.substr(i...))\n                     \
    \ ~~~~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660014136
- exit_code: 1
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var results = [String]()\n\
    \    for i in 0..<string.count {\n        results.append(string.substring(to:\
    \ string.index(string.startIndex, offsetBy: i + 1)))\n    }\n    return results\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\n\
    assert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\",\
    \ \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"\
    WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmp1fdsaub_.swift:8:31: error: value of type 'String' has no member\
    \ 'substring'\n        results.append(string.substring(to: string.index(string.startIndex,\
    \ offsetBy: i + 1)))\n                       ~~~~~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014136
- exit_code: 0
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var result = [String]()\n\
    \    for i in 0..<string.count {\n        result.append(String(string[..<string.index(string.startIndex,\
    \ offsetBy: i + 1)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014018
- exit_code: 1
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var result: [String] = []\n\
    \    let characters = string.characters\n    for i in 0..<characters.count {\n\
    \        result.append(string.substring(to: string.index(string.startIndex, offsetBy:\
    \ i+1)))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmp6u80aj8_.swift:7:29: error: 'characters' is unavailable: Please\
    \ use String directly\n    let characters = string.characters\n              \
    \              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmp6u80aj8_.swift:9:30: error: value of type 'String' has no member\
    \ 'substring'\n        result.append(string.substring(to: string.index(string.startIndex,\
    \ offsetBy: i+1)))\n                      ~~~~~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014136
- exit_code: -4
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var prefixes: [String] =\
    \ []\n    for index in 0..<string.count {\n        prefixes.append(String(string[..<string.index(string.startIndex,\
    \ offsetBy: index)]))\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: Exception
  stderr: 'tmphad5su8f/tmphad5su8f.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8894028c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8893d1fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8893d1f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8893d1e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphad5su8f                        0x0000563d3facab48 <unavailable> + 6984

    5    libc.so.6                          0x00002b8894214460 __libc_start_main +
    245

    6    tmphad5su8f                        0x0000563d3faca5a9 <unavailable> + 5545

    '
  stdout: ''
  timestamp: 1660014137
- exit_code: -4
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    let length = string.count\n\
    \    var prefixes = [String]()\n    for i in 1...length {\n        prefixes.append(String(string.prefix(i)))\n\
    \    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b8901595c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b890128c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b890128c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b890128c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b890128bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpgo4yxf4l                        0x000055c56577ece0 <unavailable> + 7392

    6    tmpgo4yxf4l                        0x000055c56577e745 <unavailable> + 5957

    7    libc.so.6                          0x00002b8901781460 __libc_start_main +
    245

    8    tmpgo4yxf4l                        0x000055c56577e449 <unavailable> + 5193

    '
  stdout: ''
  timestamp: 1660014137
- exit_code: 1
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var result = [String]()\n\
    \    for i in 0..<string.count {\n        result.append(string.prefix(i + 1))\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmpbgqgq8q2.swift:8:16: error: no exact matches in call to instance\
    \ method 'append'\n        result.append(string.prefix(i + 1))\n             \
    \  ^\nSwift.Array:6:37: note: candidate expects value of type 'String' for parameter\
    \ #1 (got 'PrefixSequence<String>')\n    @inlinable public mutating func append(_\
    \ newElement: __owned Element)\n                                    ^\nSwift.RangeReplaceableCollection:4:37:\
    \ note: candidate expects value of type 'String' for parameter #1 (got 'PrefixSequence<String>')\n\
    \    @inlinable public mutating func append(_ newElement: __owned Self.Element)\n\
    \                                    ^\n/tmp/tmpbgqgq8q2.swift:8:16: note: found\
    \ candidate with type '(__owned PrefixSequence<String>) -> ()'\n        result.append(string.prefix(i\
    \ + 1))\n               ^\n"
  stdout: ''
  timestamp: 1660014018
- exit_code: -4
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var output: [String] = []\n\
    \    for i in 1...string.count {\n        output.append(String(string.prefix(i)))\n\
    \    }\n    return output\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002acd7865ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acd78355561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002acd78355286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002acd7835513c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002acd78354bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmplaksa7ho                        0x0000557c81bcac85 <unavailable> + 7301

    6    tmplaksa7ho                        0x0000557c81bca6e5 <unavailable> + 5861

    7    libc.so.6                          0x00002acd7884a460 __libc_start_main +
    245

    8    tmplaksa7ho                        0x0000557c81bca3e9 <unavailable> + 5097

    '
  stdout: ''
  timestamp: 1660014137
- exit_code: -4
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var prefixes = [String]()\n\
    \    for idx in 0...string.count {\n        prefixes.append(String(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: idx)]))\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: Exception
  stderr: 'tmpt1zzj8im/tmpt1zzj8im.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba1fc0aec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba1fbda5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba1fbda5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba1fbda47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt1zzj8im                        0x0000556656d1b86e <unavailable> + 6254

    5    libc.so.6                          0x00002ba1fc29a460 __libc_start_main +
    245

    6    tmpt1zzj8im                        0x0000556656d1b4b9 <unavailable> + 5305

    '
  stdout: ''
  timestamp: 1660014137
- exit_code: -4
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    return string.unicodeScalars.map\
    \ { String($0) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: Exception
  stderr: 'tmpzauvng0y/tmpzauvng0y.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba9a5b7ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba9a5875b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba9a5875988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba9a58747b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzauvng0y                        0x000055f01cf6c838 <unavailable> + 6200

    5    libc.so.6                          0x00002ba9a5d6a460 __libc_start_main +
    245

    6    tmpzauvng0y                        0x000055f01cf6c299 <unavailable> + 4761

    '
  stdout: ''
  timestamp: 1660014137
- exit_code: 1
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    if string.count == 0 {\n\
    \        return []\n    }\n    let toIndex = string.index(string.startIndex, offsetBy:\
    \ string.count)\n    let substring = string[..<toIndex]\n    return [substring]\
    \ + all_prefixes(string: String(substring))\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmp96vy15f_.swift:11:13: error: cannot convert value of type 'String.SubSequence'\
    \ (aka 'Substring') to expected element type 'String'\n    return [substring]\
    \ + all_prefixes(string: String(substring))\n            ^\n            String(\
    \  )\n"
  stdout: ''
  timestamp: 1660014136
- exit_code: 0
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    //\n    // test for empty\
    \ string\n    //\n    if string.isEmpty {\n        return []\n    }\n    //\n\
    \    // setup prefixes array\n    //\n    var prefixes: [String] = []\n    //\n\
    \    // loop through input string\n    //\n    for i in 1...string.count {\n \
    \       //\n        // cut off 1 character at a time\n        // and put it into\
    \ the prefixes array\n        //\n        prefixes.append(String(string.prefix(i)))\n\
    \    }\n    //\n    // finally return the prefixes array\n    //\n    return prefixes\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\n\
    assert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\",\
    \ \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"\
    WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014137
- exit_code: -4
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    if string.isEmpty {\n   \
    \     return [\"\"]\n    } else {\n        var result = [String]()\n        for\
    \ idx in 0..<string.count {\n            let endIndex = string.index(string.startIndex,\
    \ offsetBy: idx + 1)\n            result.append(String(string[string.startIndex..<endIndex]))\n\
    \        }\n        return result\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: Exception
  stderr: 'tmpoed876tc/tmpoed876tc.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6104a16c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b610470db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b610470d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b610470c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpoed876tc                        0x00005594bdef48ce <unavailable> + 6350

    5    libc.so.6                          0x00002b6104c02460 __libc_start_main +
    245

    6    tmpoed876tc                        0x00005594bdef4519 <unavailable> + 5401

    '
  stdout: ''
  timestamp: 1660014137
- exit_code: -4
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n  var prefixes: [String] = []\n\
    \  for i in 0...string.count {\n    prefixes.append(String(string[..<string.index(string.startIndex,\
    \ offsetBy: i)]))\n  }\n  return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: Exception
  stderr: 'tmpbr4j_uxl/tmpbr4j_uxl.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aadf101fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aadf0d16b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aadf0d16988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aadf0d157b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbr4j_uxl                        0x000055edacffa95e <unavailable> + 6494

    5    libc.so.6                          0x00002aadf120b460 __libc_start_main +
    245

    6    tmpbr4j_uxl                        0x000055edacffa5a9 <unavailable> + 5545

    '
  stdout: ''
  timestamp: 1660014137
- exit_code: 1
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var index = string.startIndex\n\
    \    var lastIndex = string.endIndex\n    var result: [String] = []\n    while\
    \ index != lastIndex {\n        result.append(string[string.startIndex..<index])\n\
    \        index = string.index(after: index)\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\n\
    assert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\",\
    \ \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"\
    WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmp0c_x41g8.swift:10:29: error: subscript 'subscript(_:)' requires\
    \ the types 'String.Index' and 'Int' be equivalent\n        result.append(string[string.startIndex..<index])\n\
    \                            ^\nSwift.String:5:12: note: where 'R.Bound' = 'String.Index'\n\
    \    public subscript<R>(bounds: R) -> String where R : RangeExpression, R.Bound\
    \ == Int { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014136
- exit_code: 1
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var result = [String]()\n\
    \    var characters = string.characters\n    while let first = characters.first\
    \ {\n        result.append(String(characters))\n        characters.removeFirst()\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmpzn2x57md.swift:7:29: error: 'characters' is unavailable: Please\
    \ use String directly\n    var characters = string.characters\n              \
    \              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpzn2x57md.swift:8:15: warning: value 'first' was defined but never\
    \ used; consider replacing with boolean test\n    while let first = characters.first\
    \ {\n          ~~~~^~~~~~~~\n                                       != nil\n"
  stdout: ''
  timestamp: 1660014137
- exit_code: -4
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var prefixes: [String] =\
    \ []\n    for index in 0...string.count {\n        prefixes.append(String(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: index)]))\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: Exception
  stderr: 'tmp9fb__cla/tmp9fb__cla.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab6a1b8ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab6a1881b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab6a1881988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab6a18807b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9fb__cla                        0x000055e38c40381e <unavailable> + 6174

    5    libc.so.6                          0x00002ab6a1d76460 __libc_start_main +
    245

    6    tmp9fb__cla                        0x000055e38c403469 <unavailable> + 5225

    '
  stdout: ''
  timestamp: 1660014137
- exit_code: 1
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    let length = string.characters.count\n\
    \    let return_array = Array(0...length).map {\n        string.substring(to:\
    \ string.index(string.startIndex, offsetBy: $0))\n    }\n    return return_array\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\n\
    assert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\",\
    \ \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"\
    WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmp8m5gqo9f.swift:6:25: error: 'characters' is unavailable: Please\
    \ use String directly\n    let length = string.characters.count\n            \
    \            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in\
    \ Swift 5.0\n    public var characters: String { get set }\n               ^\n\
    /tmp/tmp8m5gqo9f.swift:8:16: error: value of type 'String' has no member 'substring'\n\
    \        string.substring(to: string.index(string.startIndex, offsetBy: $0))\n\
    \        ~~~~~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014137
- exit_code: 0
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var prefixes = [String]()\n\
    \    for char in string {\n        if let last = prefixes.last {\n           \
    \ prefixes.append(last + String(char))\n        } else {\n            prefixes.append(String(char))\n\
    \        }\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014137
- exit_code: -4
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var prefs: [String] = []\n\
    \    var s = string\n    while s.count > 0 {\n        prefs.append(s)\n      \
    \  s.removeLast()\n    }\n    return prefs\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: Exception
  stderr: 'tmpvm1fe8t0/tmpvm1fe8t0.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b13d9459c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b13d9150b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b13d9150988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b13d914f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvm1fe8t0                        0x000055d29a12d7f8 <unavailable> + 6136

    5    libc.so.6                          0x00002b13d9645460 __libc_start_main +
    245

    6    tmpvm1fe8t0                        0x000055d29a12d259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1660014137
- exit_code: -4
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var prefixes: [String] =\
    \ []\n    for i in 1...string.count {\n        prefixes.append(String(string.prefix(i)))\n\
    \    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002ab39aa68c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab39a75f561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ab39a75f286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ab39a75f13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ab39a75ebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpd5upa9lb                        0x000055e883c9cc85 <unavailable> + 7301

    6    tmpd5upa9lb                        0x000055e883c9c6e5 <unavailable> + 5861

    7    libc.so.6                          0x00002ab39ac54460 __libc_start_main +
    245

    8    tmpd5upa9lb                        0x000055e883c9c3e9 <unavailable> + 5097

    '
  stdout: ''
  timestamp: 1660014137
- exit_code: 0
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var output: [String] = []\n\
    \    for i in 0..<string.count {\n        output.append(String(string[..<string.index(string.startIndex,\
    \ offsetBy: i + 1)]))\n    }\n    return output\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014137
- exit_code: 0
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n  var prefixes = [String]()\n\
    \  for i in 1..<string.count + 1 {\n    prefixes.append(String(string[..<String.Index(encodedOffset:\
    \ i)]))\n  }\n  return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014137
- exit_code: 1
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n  var prefixes = [String]()\n\
    \  for index in 0..<string.count {\n    prefixes.append(string[0..<index])\n \
    \ }\n  return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmpvigoyxhu.swift:8:21: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an integer range, use a String.Index range instead.\n\
    \    prefixes.append(string[0..<index])\n                    ^~~~~~~~~~~~~~~~~\n\
    Swift.String:5:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript<R>(bounds: R) -> String where R : RangeExpression,\
    \ R.Bound == Int { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014137
- exit_code: -4
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var result: [String] = []\n\
    \    for i in 1...string.count {\n        result.append(String(string[..<string.index(string.startIndex,\
    \ offsetBy: i)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002abb5adb6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abb5aaad561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abb5aaad286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abb5aaad13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abb5aaacbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp7efdc45e                        0x000056006e866e45 <unavailable> + 7749

    6    tmp7efdc45e                        0x000056006e8668a5 <unavailable> + 6309

    7    libc.so.6                          0x00002abb5afa2460 __libc_start_main +
    245

    8    tmp7efdc45e                        0x000056006e8665a9 <unavailable> + 5545

    '
  stdout: ''
  timestamp: 1660014135
- exit_code: 1
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var ret_val = [String]()\n\
    \    for i in 1...string.count {\n        ret_val.append(string.prefix(i))\n \
    \   }\n    return ret_val\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmpiivqr_fq.swift:8:17: error: no exact matches in call to instance\
    \ method 'append'\n        ret_val.append(string.prefix(i))\n                ^\n\
    Swift.Array:6:37: note: candidate expects value of type 'String' for parameter\
    \ #1 (got 'PrefixSequence<String>')\n    @inlinable public mutating func append(_\
    \ newElement: __owned Element)\n                                    ^\nSwift.RangeReplaceableCollection:4:37:\
    \ note: candidate expects value of type 'String' for parameter #1 (got 'PrefixSequence<String>')\n\
    \    @inlinable public mutating func append(_ newElement: __owned Self.Element)\n\
    \                                    ^\n/tmp/tmpiivqr_fq.swift:8:17: note: found\
    \ candidate with type '(__owned PrefixSequence<String>) -> ()'\n        ret_val.append(string.prefix(i))\n\
    \                ^\n"
  stdout: ''
  timestamp: 1660014137
- exit_code: 0
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var sub_strings = [String]()\n\
    \    for i in 0..<string.count {\n        let substring = string[string.startIndex...string.index(string.startIndex,\
    \ offsetBy: i)]\n        sub_strings.append(String(substring))\n    }\n    return\
    \ sub_strings\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014137
- exit_code: 1
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    return (1...string.count).map\
    \ { string.prefix($0) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmpaow8jwz9.swift:6:44: error: cannot convert value of type 'String.SubSequence'\
    \ (aka 'Substring') to closure result type 'String'\n    return (1...string.count).map\
    \ { string.prefix($0) }\n                                    ~~~~~~~^~~~~~~~~~\n\
    \                                    String(          )\n"
  stdout: ''
  timestamp: 1660014018
- exit_code: -4
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var prefixes = [String]()\n\
    \    for index in 0...string.count {\n        let range = string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: index)\n        prefixes.append(String(string[range]))\n    }\n  \
    \  return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: Exception
  stderr: 'tmpp6bscm1e/tmpp6bscm1e.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0462792c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0462489b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0462489988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b04624887b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp6bscm1e                        0x000055667c14886e <unavailable> + 6254

    5    libc.so.6                          0x00002b046297e460 __libc_start_main +
    245

    6    tmpp6bscm1e                        0x000055667c1484b9 <unavailable> + 5305

    '
  stdout: ''
  timestamp: 1660014137
- exit_code: 0
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n  return (1..<string.count +\
    \ 1).map { start_index in\n    return String(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: start_index)])\n  }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014137
- exit_code: -4
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    guard !string.isEmpty else\
    \ { return [] }\n    var result: [String] = []\n    for index in 0..<string.count\
    \ {\n        result.append(String(string[..<string.index(string.startIndex, offsetBy:\
    \ index)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: Exception
  stderr: 'tmpxur9sj0q/tmpxur9sj0q.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac676acfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac6767c6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac6767c6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac6767c57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxur9sj0q                        0x000055e309cb1b98 <unavailable> + 7064

    5    libc.so.6                          0x00002ac676cbb460 __libc_start_main +
    245

    6    tmpxur9sj0q                        0x000055e309cb15f9 <unavailable> + 5625

    '
  stdout: ''
  timestamp: 1660014137
- exit_code: -4
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var prefixes: [String] =\
    \ []\n    for i in 0...string.count {\n        prefixes.append(String(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: i)]))\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: Exception
  stderr: 'tmpu963finf/tmpu963finf.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b65a71aac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b65a6ea1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b65a6ea1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b65a6ea07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu963finf                        0x0000555b8826181e <unavailable> + 6174

    5    libc.so.6                          0x00002b65a7396460 __libc_start_main +
    245

    6    tmpu963finf                        0x0000555b88261469 <unavailable> + 5225

    '
  stdout: ''
  timestamp: 1660014137
- exit_code: 1
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var result = [String]()\n\
    \    for i in 0..<string.count {\n        result.append(string.prefix(i + 1))\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmpbgqgq8q2.swift:8:16: error: no exact matches in call to instance\
    \ method 'append'\n        result.append(string.prefix(i + 1))\n             \
    \  ^\nSwift.Array:6:37: note: candidate expects value of type 'String' for parameter\
    \ #1 (got 'PrefixSequence<String>')\n    @inlinable public mutating func append(_\
    \ newElement: __owned Element)\n                                    ^\nSwift.RangeReplaceableCollection:4:37:\
    \ note: candidate expects value of type 'String' for parameter #1 (got 'PrefixSequence<String>')\n\
    \    @inlinable public mutating func append(_ newElement: __owned Self.Element)\n\
    \                                    ^\n/tmp/tmpbgqgq8q2.swift:8:16: note: found\
    \ candidate with type '(__owned PrefixSequence<String>) -> ()'\n        result.append(string.prefix(i\
    \ + 1))\n               ^\n"
  stdout: ''
  timestamp: 1660014018
- exit_code: -4
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    return string.utf8.reduce(into:\
    \ [String]()) { (prefixes, char) in\n        if let prefix = prefixes.last {\n\
    \            prefixes.append(prefix + String(char, radix: 16, uppercase: false))\n\
    \        } else {\n            prefixes.append(String(char, radix: 16, uppercase:\
    \ false))\n        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: Exception
  stderr: 'tmp2eg4v5jr/tmp2eg4v5jr.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aead20eec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aead1de5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aead1de5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aead1de47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2eg4v5jr                        0x00005580d7e11a48 <unavailable> + 6728

    5    libc.so.6                          0x00002aead22da460 __libc_start_main +
    245

    6    tmp2eg4v5jr                        0x00005580d7e114a9 <unavailable> + 5289

    '
  stdout: ''
  timestamp: 1660014137
- exit_code: 1
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var result: [String] = []\n\
    \    for i in 0..<string.count {\n        result.append(string.prefix(i + 1))\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmpny41_9zc.swift:8:16: error: no exact matches in call to instance\
    \ method 'append'\n        result.append(string.prefix(i + 1))\n             \
    \  ^\nSwift.Array:6:37: note: candidate expects value of type 'String' for parameter\
    \ #1 (got 'PrefixSequence<String>')\n    @inlinable public mutating func append(_\
    \ newElement: __owned Element)\n                                    ^\nSwift.RangeReplaceableCollection:4:37:\
    \ note: candidate expects value of type 'String' for parameter #1 (got 'PrefixSequence<String>')\n\
    \    @inlinable public mutating func append(_ newElement: __owned Self.Element)\n\
    \                                    ^\n/tmp/tmpny41_9zc.swift:8:16: note: found\
    \ candidate with type '(__owned PrefixSequence<String>) -> ()'\n        result.append(string.prefix(i\
    \ + 1))\n               ^\n"
  stdout: ''
  timestamp: 1660014018
- exit_code: 1
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var prefixes: [String] =\
    \ []\n    for idx in 1...string.count {\n        prefixes.append(string.substring(to:\
    \ string.index(string.startIndex, offsetBy: idx)))\n    }\n    return prefixes\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\n\
    assert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\",\
    \ \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"\
    WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmpzxjs97jr.swift:8:32: error: value of type 'String' has no member\
    \ 'substring'\n        prefixes.append(string.substring(to: string.index(string.startIndex,\
    \ offsetBy: idx)))\n                        ~~~~~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014137
- exit_code: -4
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n  let len = string.count\n  var\
    \ array: [String] = []\n  for i in 1...len {\n    array.append(String(string[..<string.index(string.startIndex,\
    \ offsetBy: i)]))\n  }\n  return array\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002adad14dec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adad11d5561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002adad11d5286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002adad11d513c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002adad11d4bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp7vrp0wp5                        0x0000558b295bbe4b <unavailable> + 7755

    6    tmp7vrp0wp5                        0x0000558b295bb8a5 <unavailable> + 6309

    7    libc.so.6                          0x00002adad16ca460 __libc_start_main +
    245

    8    tmp7vrp0wp5                        0x0000558b295bb5a9 <unavailable> + 5545

    '
  stdout: ''
  timestamp: 1660014137
- exit_code: 1
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n  var result: [String] = []\n\
    \  for i in 1...string.count {\n    result.append(string.prefix(i))\n  }\n  return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmpbyhj9oo1.swift:8:12: error: no exact matches in call to instance\
    \ method 'append'\n    result.append(string.prefix(i))\n           ^\nSwift.Array:6:37:\
    \ note: candidate expects value of type 'String' for parameter #1 (got 'PrefixSequence<String>')\n\
    \    @inlinable public mutating func append(_ newElement: __owned Element)\n \
    \                                   ^\nSwift.RangeReplaceableCollection:4:37:\
    \ note: candidate expects value of type 'String' for parameter #1 (got 'PrefixSequence<String>')\n\
    \    @inlinable public mutating func append(_ newElement: __owned Self.Element)\n\
    \                                    ^\n/tmp/tmpbyhj9oo1.swift:8:12: note: found\
    \ candidate with type '(__owned PrefixSequence<String>) -> ()'\n    result.append(string.prefix(i))\n\
    \           ^\n"
  stdout: ''
  timestamp: 1660014137
- exit_code: -4
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n  let index_0 = string.startIndex\n\
    \  let index_1 = string.index(after: index_0)\n  let index_2 = string.index(after:\
    \ index_1)\n  let index_3 = string.index(after: index_2)\n  return [\n    String(string[index_0]),\n\
    \    String(string[index_0...index_1]),\n    String(string[index_0...index_2]),\n\
    \    String(string[index_0...index_3])\n  ]\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: Exception
  stderr: 'Swift/StringIndexValidation.swift:252: Fatal error: String index is out
    of bounds

    Current stack trace:

    0    libswiftCore.so                    0x00002aab8d64bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aab8d342561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002aab8d342286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002aab8d34213c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002aab8d341bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftCore.so                    0x00002aab8d475455 <unavailable> + 2692181

    6    libswiftCore.so                    0x00002aab8d34f210 String.index(after:)
    + 15

    7    tmp_1eedlw9                        0x0000555611907c47 <unavailable> + 7239

    8    tmp_1eedlw9                        0x0000555611907745 <unavailable> + 5957

    9    libc.so.6                          0x00002aab8d837460 __libc_start_main +
    245

    10   tmp_1eedlw9                        0x0000555611907449 <unavailable> + 5193

    '
  stdout: ''
  timestamp: 1660014137
- exit_code: 0
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var prefixes: [String] =\
    \ []\n    for index in 0..<string.count {\n        prefixes.append(String(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: index+1)]))\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014137
- exit_code: 0
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n  var result: [String] = []\n\
    \  for i in 0..<string.count {\n    result.append(String(string[..<string.index(string.startIndex,\
    \ offsetBy: i + 1)]))\n  }\n  return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014137
- exit_code: 1
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    let length = string.count\n\
    \    var result = [String]()\n    for i in 0..<length {\n        result.append(string.prefix(i+1))\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmpw6kiiu8z.swift:9:16: error: no exact matches in call to instance\
    \ method 'append'\n        result.append(string.prefix(i+1))\n               ^\n\
    Swift.Array:6:37: note: candidate expects value of type 'String' for parameter\
    \ #1 (got 'PrefixSequence<String>')\n    @inlinable public mutating func append(_\
    \ newElement: __owned Element)\n                                    ^\nSwift.RangeReplaceableCollection:4:37:\
    \ note: candidate expects value of type 'String' for parameter #1 (got 'PrefixSequence<String>')\n\
    \    @inlinable public mutating func append(_ newElement: __owned Self.Element)\n\
    \                                    ^\n/tmp/tmpw6kiiu8z.swift:9:16: note: found\
    \ candidate with type '(__owned PrefixSequence<String>) -> ()'\n        result.append(string.prefix(i+1))\n\
    \               ^\n"
  stdout: ''
  timestamp: 1660014137
- exit_code: -4
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var result = [String]()\n\
    \    for i in 0..<string.count {\n        result.append(String(string[..<string.index(string.startIndex,\
    \ offsetBy: i)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: Exception
  stderr: 'tmplip34u1j/tmplip34u1j.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba6ac488c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba6ac17fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba6ac17f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba6ac17e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplip34u1j                        0x0000560648df0b98 <unavailable> + 7064

    5    libc.so.6                          0x00002ba6ac674460 __libc_start_main +
    245

    6    tmplip34u1j                        0x0000560648df05f9 <unavailable> + 5625

    '
  stdout: ''
  timestamp: 1660014018
- exit_code: 1
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var result = [String]()\n\
    \    for i in (0..<string.count) {\n        result.append(string.prefix(i+1))\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmpdbibl_op.swift:8:16: error: no exact matches in call to instance\
    \ method 'append'\n        result.append(string.prefix(i+1))\n               ^\n\
    Swift.Array:6:37: note: candidate expects value of type 'String' for parameter\
    \ #1 (got 'PrefixSequence<String>')\n    @inlinable public mutating func append(_\
    \ newElement: __owned Element)\n                                    ^\nSwift.RangeReplaceableCollection:4:37:\
    \ note: candidate expects value of type 'String' for parameter #1 (got 'PrefixSequence<String>')\n\
    \    @inlinable public mutating func append(_ newElement: __owned Self.Element)\n\
    \                                    ^\n/tmp/tmpdbibl_op.swift:8:16: note: found\
    \ candidate with type '(__owned PrefixSequence<String>) -> ()'\n        result.append(string.prefix(i+1))\n\
    \               ^\n"
  stdout: ''
  timestamp: 1660014137
- exit_code: 0
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    let characters = Array(string)\n\
    \    var result: [String] = []\n    for i in 0..<characters.count {\n        result.append(String(characters[0...i]))\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014137
- exit_code: 0
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var all_prefixes = [String]()\n\
    \    for (index, letter) in string.enumerated() {\n        let substring = String(string[..<string.index(string.startIndex,\
    \ offsetBy: index + 1)])\n        all_prefixes.append(substring)\n    }\n    return\
    \ all_prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014137
- exit_code: 0
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var prefixes = [String]()\n\
    \    for index in 0..<string.count {\n        prefixes.append(String(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: index+1)]))\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014137
