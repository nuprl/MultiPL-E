language: swift
name: HumanEval_66_digitSum
results:
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.reduce(0) { $0 + ($1.isUppercase\
    \ ? $1.asciiValue! : 0) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpza3__hrb.swift:19:62: error: result values in '? :' expression\
    \ have mismatching types 'UInt8' and 'Int'\n    return s.reduce(0) { $0 + ($1.isUppercase\
    \ ? $1.asciiValue! : 0) }\n                                                ~~~~~~~~~~~~~^\n\
    \                                                Int(          )\n"
  stdout: ''
  timestamp: 1659979938
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    let length = s.count\n    var sum\
    \ = 0\n    for i in 0..<length {\n        if let character = s.asciiArray[i] {\n\
    \            if character >= 65 && character <= 90 {\n                sum += character\n\
    \            }\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") ==\
    \ 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") ==\
    \ 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\"\
    ) == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"\
    You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpd068kums.swift:22:30: error: value of type 'String' has no member\
    \ 'asciiArray'\n        if let character = s.asciiArray[i] {\n               \
    \            ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979938
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    let char = s.cString(using: .utf8)!\n\
    \    var upper = 0\n    for i in 0..<char.count-1 {\n        if (char[i] >= 65\
    \ && char[i] <= 90) {\n            upper += Int(char[i])\n        }\n    }\n \
    \   return upper\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\")\
    \ == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") ==\
    \ 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\")\
    \ == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmp900c69rn.swift:19:18: error: value of type 'String' has no member\
    \ 'cString'\n    let char = s.cString(using: .utf8)!\n               ~ ^~~~~~~\n\
    /tmp/tmp900c69rn.swift:19:34: error: cannot infer contextual base in reference\
    \ to member 'utf8'\n    let char = s.cString(using: .utf8)!\n                \
    \                ~^~~~\n"
  stdout: ''
  timestamp: 1659979938
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.compactMap{ $0.asciiValue\
    \ }.reduce(0) { $0 + ($1 < 97 ? $1 : 0) }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\n\
    assert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\n\
    assert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\n\
    assert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very\
    \ Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpwzfse0kp.swift:19:29: error: cannot convert value of type 'UInt8?'\
    \ to closure result type 'Int?'\n    return s.compactMap{ $0.asciiValue }.reduce(0)\
    \ { $0 + ($1 < 97 ? $1 : 0) }\n                         ~~~^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979939
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.unicodeScalars.reduce(0)\
    \ {\n        $0 + (($1.value >= 65 && $1.value <= 90) ? $1.value : 0)\n    }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"\
    abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\"\
    ) == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\"\
    ) == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"\
    You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmp9cwi91i3.swift:20:55: error: result values in '? :' expression\
    \ have mismatching types 'UInt32' and 'Int'\n        $0 + (($1.value >= 65 &&\
    \ $1.value <= 90) ? $1.value : 0)\n                                          \
    \         ~~~^~~~~\n                                                   Int(  \
    \  )\n"
  stdout: ''
  timestamp: 1659979943
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.filter { (character) ->\
    \ Bool in\n        return \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\".contains(character)\n\
    \    }.map { $0.asciiValue! }.reduce(0, +)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\n\
    assert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\n\
    assert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\n\
    assert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very\
    \ Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpur_x2ttn.swift:21:26: error: cannot convert value of type 'UInt8'\
    \ to closure result type 'Int'\n    }.map { $0.asciiValue! }.reduce(0, +)\n  \
    \          ~~~~~~~~~~~~~^\n            Int(          )\n"
  stdout: ''
  timestamp: 1659979938
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.unicodeScalars.reduce(0)\
    \ {\n        $0 + ($1.isASCII && $1.isUppercase ? Int($1.value) : 0)\n    }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"\
    abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\"\
    ) == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\"\
    ) == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"\
    You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpjlw330ti.swift:19:35: error: missing argument label 'into:' in\
    \ call\n    return s.unicodeScalars.reduce(0) {\n                            \
    \      ^\n                                   into: \n/tmp/tmpjlw330ti.swift:19:29:\
    \ error: cannot convert return expression of type '(Int, _) -> Int' to return\
    \ type 'Int'\n    return s.unicodeScalars.reduce(0) {\n           ~~~~~~~~~~~~~~~~~^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979939
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.unicodeScalars.filter {\
    \ CharacterSet.uppercaseLetters.contains($0) }.reduce(0) { $0 + Int($1.value)\
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s:\
    \ \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s:\
    \ \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s:\
    \ \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s:\
    \ \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmp3lcqufyw.swift:19:38: error: cannot find 'CharacterSet' in scope\n\
    \    return s.unicodeScalars.filter { CharacterSet.uppercaseLetters.contains($0)\
    \ }.reduce(0) { $0 + Int($1.value) }\n                                     ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979938
- exit_code: 0
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.utf8.reduce(0) { (r, v)\
    \ in\n        return r + (v >= 65 && v <= 90 ? Int(v) : 0)\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"\
    abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\"\
    ) == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\"\
    ) == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"\
    You arE Very Smart\") == 327)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979938
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    let upperCodes = s.unicodeScalars.filter\
    \ { $0.isASCII && $0.isUppercase }\n    return upperCodes.reduce(0) { result,\
    \ next in\n        result + Int(next.value)\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") ==\
    \ 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") ==\
    \ 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\"\
    ) == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"\
    You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpp21oqn4d.swift:19:65: error: value of type 'Unicode.Scalar' has\
    \ no member 'isUppercase'\n    let upperCodes = s.unicodeScalars.filter { $0.isASCII\
    \ && $0.isUppercase }\n                                                      \
    \       ~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979938
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n  return s.filter { $0.isUppercase }.reduce(0)\
    \ { $0 + Int($0.asciiValue!) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmp3mcljesp.swift:19:48: error: contextual closure type '(Int, String.Element)\
    \ throws -> Int' (aka '(Int, Character) throws -> Int') expects 2 arguments, but\
    \ 1 was used in closure body\n  return s.filter { $0.isUppercase }.reduce(0) {\
    \ $0 + Int($0.asciiValue!) }\n                                               ^\n\
    /tmp/tmp3mcljesp.swift:19:62: error: value of type 'Int' has no member 'asciiValue'\n\
    \  return s.filter { $0.isUppercase }.reduce(0) { $0 + Int($0.asciiValue!) }\n\
    \                                                          ~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979939
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.filter { $0.isUppercase\
    \ }.reduce(0) { $0 + Int($0.asciiValue!) }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\n\
    assert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\n\
    assert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\n\
    assert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very\
    \ Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmps2s5ligf.swift:19:50: error: contextual closure type '(Int, String.Element)\
    \ throws -> Int' (aka '(Int, Character) throws -> Int') expects 2 arguments, but\
    \ 1 was used in closure body\n    return s.filter { $0.isUppercase }.reduce(0)\
    \ { $0 + Int($0.asciiValue!) }\n                                             \
    \    ^\n/tmp/tmps2s5ligf.swift:19:64: error: value of type 'Int' has no member\
    \ 'asciiValue'\n    return s.filter { $0.isUppercase }.reduce(0) { $0 + Int($0.asciiValue!)\
    \ }\n                                                            ~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979939
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.unicodeScalars.filter({$0.value\
    \ > 64 && $0.value < 91}).reduce(0, +)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s:\
    \ \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s:\
    \ \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s:\
    \ \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmp_ic_6tpu.swift:19:80: error: cannot convert value of type '(Int)\
    \ -> Int' to expected argument type '(Int, Unicode.Scalar) throws -> Int'\n  \
    \  return s.unicodeScalars.filter({$0.value > 64 && $0.value < 91}).reduce(0,\
    \ +)\n                                                                       \
    \        ^\n"
  stdout: ''
  timestamp: 1659979938
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.compactMap {$0.asciiValue}.reduce(0)\
    \ {$0 + ($1 >= 65 && $1 <= 90 ? $1 : 0)}\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s:\
    \ \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s:\
    \ \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s:\
    \ \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmp94u45l9a.swift:19:29: error: cannot convert value of type 'UInt8?'\
    \ to closure result type 'Int?'\n    return s.compactMap {$0.asciiValue}.reduce(0)\
    \ {$0 + ($1 >= 65 && $1 <= 90 ? $1 : 0)}\n                         ~~~^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979955
- exit_code: 0
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var output = 0\n    for letter in\
    \ s {\n        if letter >= \"A\" && letter <= \"Z\" {\n            output +=\
    \ Int(letter.asciiValue!)\n        }\n    }\n    return output\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\")\
    \ == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\"\
    ) == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\"\
    ) == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"\
    You arE Very Smart\") == 327)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979938
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.reduce(0) {\n        $1.isUppercase\
    \ ? $0 + $1.asciiValue! : $0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s:\
    \ \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s:\
    \ \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s:\
    \ \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpwpc_kcm2.swift:20:44: error: cannot convert value of type 'UInt8'\
    \ to expected argument type 'Int'\n        $1.isUppercase ? $0 + $1.asciiValue!\
    \ : $0\n                                           ^\n                       \
    \       Int(          )\n"
  stdout: ''
  timestamp: 1659979938
- exit_code: 0
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for char in s {\n\
    \        let asc = Int(char.asciiValue!)\n        if (64 < asc && asc < 91) {\n\
    \            sum += asc\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\")\
    \ == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\"\
    ) == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\"\
    ) == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"\
    You arE Very Smart\") == 327)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979938
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    let upper = CharacterSet.uppercaseLetters\n\
    \    return s.unicodeScalars.reduce(0) {\n        upper.contains($1) ? $0 + Int($1.value)\
    \ : $0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\")\
    \ == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") ==\
    \ 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\")\
    \ == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpvtqs7fyx.swift:19:17: error: cannot find 'CharacterSet' in scope\n\
    \    let upper = CharacterSet.uppercaseLetters\n                ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979938
- exit_code: -4
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.filter { (char) -> Bool\
    \ in\n        return char.isUppercase\n    }.map {\n        return Int(String($0))!\n\
    \    }.reduce(0, +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\")\
    \ == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") ==\
    \ 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\")\
    \ == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: Exception
  stderr: 'tmp5arm9f97/tmp5arm9f97.swift:22: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b3d59085c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3d58d7c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b3d58d7c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b3d58d7c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b3d58d7bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp5arm9f97                        0x0000559595991e61 <unavailable> + 7777

    6    libswiftCore.so                    0x00002b3d58d64820 Collection.map<A>(_:)
    + 426

    7    tmp5arm9f97                        0x0000559595991c0f <unavailable> + 7183

    8    tmp5arm9f97                        0x000055959599166c <unavailable> + 5740

    9    libc.so.6                          0x00002b3d59271460 __libc_start_main +
    245

    10   tmp5arm9f97                        0x00005595959912c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1659979938
- exit_code: 0
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    let upperCharacters = s.filter {\
    \ $0.isUppercase }\n    return upperCharacters.reduce(0) { $0 + Int($1.asciiValue!)\
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s:\
    \ \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s:\
    \ \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s:\
    \ \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s:\
    \ \"You arE Very Smart\") == 327)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979938
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.map { $0.asciiValue! }.filter\
    \ { $0 >= 65 && $0 <= 90 }.reduce(0, +)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s:\
    \ \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s:\
    \ \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s:\
    \ \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmp4q1as579.swift:19:33: error: cannot convert value of type 'UInt8'\
    \ to closure result type 'Int'\n    return s.map { $0.asciiValue! }.filter { $0\
    \ >= 65 && $0 <= 90 }.reduce(0, +)\n                   ~~~~~~~~~~~~~^\n      \
    \             Int(          )\n"
  stdout: ''
  timestamp: 1659979954
- exit_code: 0
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    \n    var sum = 0\n    for c in\
    \ s {\n        if c >= \"A\" && c <= \"Z\" {\n            sum += Int(c.asciiValue!)\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979938
- exit_code: -4
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    \n    var sum = 0\n    for c in\
    \ s.uppercased() {\n        sum += Int(c.asciiValue!)\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"\
    abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\"\
    ) == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\"\
    ) == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"\
    You arE Very Smart\") == 327)"
  status: Exception
  stderr: 'tmpfz0fvass/tmpfz0fvass.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9242a50c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9242747b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9242747988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b92427467b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfz0fvass                        0x000055ef72a0468c <unavailable> + 5772

    5    libc.so.6                          0x00002b9242c3c460 __libc_start_main +
    245

    6    tmpfz0fvass                        0x000055ef72a04269 <unavailable> + 4713

    '
  stdout: ''
  timestamp: 1659979938
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    let upper = CharacterSet.uppercaseLetters\n\
    \    return s.unicodeScalars.filter { upper.contains($0) }.reduce(0) { $0 + Int($1.value)\
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s:\
    \ \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s:\
    \ \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s:\
    \ \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s:\
    \ \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpgvrcm8wd.swift:19:17: error: cannot find 'CharacterSet' in scope\n\
    \    let upper = CharacterSet.uppercaseLetters\n                ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979938
- exit_code: 0
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.reduce(0) {  $1.isUppercase\
    \ ? $0 + Int($1.asciiValue!) : $0 }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s:\
    \ \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s:\
    \ \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s:\
    \ \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979939
- exit_code: -4
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    let upper = s.filter { $0.isUppercase\
    \ }\n    let result = upper.compactMap { Int(String($0)) }.reduce(0, +)\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\") ==\
    \ 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\n\
    assert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\n\
    assert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\"\
    ) == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: Exception
  stderr: 'tmp8riz3a3j/tmp8riz3a3j.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea3ad67c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea3aa5eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea3aa5e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea3aa5d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8riz3a3j                        0x000055a39eede66c <unavailable> + 5740

    5    libc.so.6                          0x00002aea3af53460 __libc_start_main +
    245

    6    tmp8riz3a3j                        0x000055a39eede249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659979939
- exit_code: -4
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    \n    var sum = 0\n    for letter\
    \ in s {\n        let upper = String(letter).uppercased()\n        if upper ==\
    \ String(letter) {\n            sum += Int(letter.asciiValue!)\n        }\n  \
    \  }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: Exception
  stderr: 'tmpbsjl80zk/tmpbsjl80zk.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad387a14c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad38770bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad38770b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad38770a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbsjl80zk                        0x000055e21ebaaac3 <unavailable> + 6851

    5    libc.so.6                          0x00002ad387c00460 __libc_start_main +
    245

    6    tmpbsjl80zk                        0x000055e21ebaa309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1659979939
- exit_code: 0
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s {\n\
    \        if c.isUppercase {\n            sum += Int(c.asciiValue!)\n        }\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979939
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.reduce(0) { $0 + ($1.isUppercase\
    \ ? $1.asciiValue! : 0) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpza3__hrb.swift:19:62: error: result values in '? :' expression\
    \ have mismatching types 'UInt8' and 'Int'\n    return s.reduce(0) { $0 + ($1.isUppercase\
    \ ? $1.asciiValue! : 0) }\n                                                ~~~~~~~~~~~~~^\n\
    \                                                Int(          )\n"
  stdout: ''
  timestamp: 1659979938
- exit_code: 0
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.filter { \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    .contains($0) }.reduce(0) { $0 + Int(String($1).unicodeScalars.first!.value) }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"\
    abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\"\
    ) == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\"\
    ) == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"\
    You arE Very Smart\") == 327)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979939
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.reduce(0) { $0 + ($1.isUppercase\
    \ ? $1.asciiValue : 0) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpkd1mgn3v.swift:19:52: error: result values in '? :' expression\
    \ have mismatching types 'UInt8?' and 'Int'\n    return s.reduce(0) { $0 + ($1.isUppercase\
    \ ? $1.asciiValue : 0) }\n                                                ~~~^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979938
- exit_code: 0
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    let unicode = s.unicodeScalars\n\
    \    var sum = 0\n    for scalar in unicode {\n        if scalar.value > 64 &&\
    \ scalar.value < 91 {\n            sum += Int(scalar.value)\n        }\n    }\n\
    \    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\")\
    \ == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") ==\
    \ 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\")\
    \ == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979939
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.filter{ $0.isUppercase\
    \ }.reduce(0) { $0 + $1.asciiValue! }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s:\
    \ \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s:\
    \ \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s:\
    \ \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpjt8r4z1t.swift:19:39: error: cannot convert return expression of\
    \ type 'UInt8' to return type 'Int'\n    return s.filter{ $0.isUppercase }.reduce(0)\
    \ { $0 + $1.asciiValue! }\n           ~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \           Int(                                                        )\n"
  stdout: ''
  timestamp: 1659979939
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.reduce(0) { $0 + ($1.isUppercase\
    \ ? $1.asciiValue! : 0) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpza3__hrb.swift:19:62: error: result values in '? :' expression\
    \ have mismatching types 'UInt8' and 'Int'\n    return s.reduce(0) { $0 + ($1.isUppercase\
    \ ? $1.asciiValue! : 0) }\n                                                ~~~~~~~~~~~~~^\n\
    \                                                Int(          )\n"
  stdout: ''
  timestamp: 1659979938
- exit_code: -4
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    let sum = s.filter { Int(String($0))\
    \ == nil }.reduce(0) { $0 + Int(String($1).uppercased().unicodeScalars.first!.value)\
    \ }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\")\
    \ == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") ==\
    \ 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\")\
    \ == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: Exception
  stderr: 'tmpv0c1gfck/tmpv0c1gfck.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9ada5f5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9ada2ecb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9ada2ec988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9ada2eb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv0c1gfck                        0x000055a57044398c <unavailable> + 6540

    5    libc.so.6                          0x00002b9ada7e1460 __libc_start_main +
    245

    6    tmpv0c1gfck                        0x000055a570443569 <unavailable> + 5481

    '
  stdout: ''
  timestamp: 1659979939
- exit_code: 0
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var result = 0\n    for char in\
    \ s {\n        if char.isUppercase {\n            result += Int(char.asciiValue!)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s:\
    \ \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s:\
    \ \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s:\
    \ \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979939
- exit_code: 0
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for char in s {\n\
    \        if char.isUppercase {\n            sum += Int(char.asciiValue!)\n   \
    \     }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979939
- exit_code: 0
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for char in s {\n\
    \        if let code = char.asciiValue, code >= 65, code <= 90 {\n           \
    \ sum += Int(code)\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") ==\
    \ 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") ==\
    \ 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\"\
    ) == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"\
    You arE Very Smart\") == 327)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979939
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.unicodeScalars.filter({$0.isASCII\
    \ && $0.isUppercase}).reduce(0, { $0 + Int($1.value) })\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\")\
    \ == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\"\
    ) == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\"\
    ) == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"\
    You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpnd2ipxnh.swift:19:54: error: value of type 'Unicode.Scalar' has\
    \ no member 'isUppercase'\n    return s.unicodeScalars.filter({$0.isASCII && $0.isUppercase}).reduce(0,\
    \ { $0 + Int($1.value) })\n                                                  ~~\
    \ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979939
- exit_code: 0
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.filter{$0.isUppercase}.map{Int($0.asciiValue!)}.reduce(0,\
    \ +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s:\
    \ \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s:\
    \ \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s:\
    \ \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s:\
    \ \"You arE Very Smart\") == 327)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979939
- exit_code: 0
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s {\n\
    \        let ascii = c.asciiValue\n        if let ascii = ascii {\n          \
    \  if ascii >= 65 && ascii <= 90 {\n                sum += Int(ascii)\n      \
    \      }\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\n\
    assert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\n\
    assert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\n\
    assert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very\
    \ Smart\") == 327)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979939
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.unicodeScalars.filter({$0.isUppercase}).reduce(0,\
    \ {$0 + Int($1.value)})\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpc9e_2jbb.swift:19:40: error: value of type 'Unicode.Scalar' has\
    \ no member 'isUppercase'\n    return s.unicodeScalars.filter({$0.isUppercase}).reduce(0,\
    \ {$0 + Int($1.value)})\n                                    ~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979939
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    let upperLetters = s.unicodeScalars.filter({\
    \ $0.isUppercase })\n    return upperLetters.reduce(0, { x, y in\n        x +\
    \ Int(y.value)\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpt7ssivt_.swift:19:53: error: value of type 'Unicode.Scalar' has\
    \ no member 'isUppercase'\n    let upperLetters = s.unicodeScalars.filter({ $0.isUppercase\
    \ })\n                                                 ~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979939
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    guard !s.isEmpty else { return 0\
    \ }\n    return Array(s.uppercased()).reduce(0) { $0 + ($1.asciiValue ?? 0) }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"\
    abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\"\
    ) == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\"\
    ) == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"\
    You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpvuqm7t8j.swift:20:34: error: cannot convert return expression of\
    \ type 'UInt8' to return type 'Int'\n    return Array(s.uppercased()).reduce(0)\
    \ { $0 + ($1.asciiValue ?? 0) }\n           ~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \           Int(                                                         )\n"
  stdout: ''
  timestamp: 1659979939
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.filter { $0.isUppercase\
    \ }.reduce(0) { $0 + Int($0.asciiValue!) }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\n\
    assert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\n\
    assert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\n\
    assert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very\
    \ Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmps2s5ligf.swift:19:50: error: contextual closure type '(Int, String.Element)\
    \ throws -> Int' (aka '(Int, Character) throws -> Int') expects 2 arguments, but\
    \ 1 was used in closure body\n    return s.filter { $0.isUppercase }.reduce(0)\
    \ { $0 + Int($0.asciiValue!) }\n                                             \
    \    ^\n/tmp/tmps2s5ligf.swift:19:64: error: value of type 'Int' has no member\
    \ 'asciiValue'\n    return s.filter { $0.isUppercase }.reduce(0) { $0 + Int($0.asciiValue!)\
    \ }\n                                                            ~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979939
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.asciiArray.filter { $0.isUppercase\
    \ }.map { Int($0) }.reduce(0, +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpgern9ic1.swift:19:14: error: value of type 'String' has no member\
    \ 'asciiArray'\n    return s.asciiArray.filter { $0.isUppercase }.map { Int($0)\
    \ }.reduce(0, +)\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979940
- exit_code: -4
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    let mapped = s.map({ String($0)\
    \ })\n    let upper = mapped.filter({ $0.uppercased() == $0 })\n    let mappedUpper\
    \ = upper.map({ Int($0.unicodeScalars.first!.value) })\n    return mappedUpper.reduce(0,\
    \ +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s:\
    \ \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s:\
    \ \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s:\
    \ \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s:\
    \ \"You arE Very Smart\") == 327)"
  status: Exception
  stderr: 'tmp5zgv717o/tmp5zgv717o.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab6c7580c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab6c7277b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab6c7277988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab6c72767b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5zgv717o                        0x00005645eb096e33 <unavailable> + 7731

    5    libc.so.6                          0x00002ab6c776c460 __libc_start_main +
    245

    6    tmp5zgv717o                        0x00005645eb096679 <unavailable> + 5753

    '
  stdout: ''
  timestamp: 1659979939
- exit_code: 0
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var result = 0\n    for item in\
    \ s {\n        if item.isUppercase {\n            result += Int(item.asciiValue!)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s:\
    \ \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s:\
    \ \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s:\
    \ \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979939
- exit_code: 0
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for char in s {\n\
    \        if char.isUppercase {\n            sum += Int(char.asciiValue!)\n   \
    \     }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979939
- exit_code: 0
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.reduce(0) {\n        if\
    \ 65...90 ~= Int($1.unicodeScalars.first!.value) {\n            return $0 + Int($1.unicodeScalars.first!.value)\n\
    \        }\n        return $0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s:\
    \ \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s:\
    \ \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s:\
    \ \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979939
- exit_code: 0
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.filter { \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    .contains($0) }.reduce(0) { $0 + Int(String($1).unicodeScalars.first!.value) }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"\
    abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\"\
    ) == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\"\
    ) == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"\
    You arE Very Smart\") == 327)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979939
- exit_code: 0
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    guard !s.isEmpty else { return 0\
    \ }\n    return s.reduce(0) { (res, char) -> Int in\n        if let ascii = char.asciiValue,\
    \ ascii >= 65, ascii <= 90 {\n            return res + Int(ascii)\n        }\n\
    \        return res\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979939
- exit_code: -4
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    \n    return 0\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\")\
    \ == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\"\
    ) == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\"\
    ) == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"\
    You arE Very Smart\") == 327)"
  status: Exception
  stderr: 'tmpxlu1y3bq/tmpxlu1y3bq.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002baa98c08c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002baa988ffb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002baa988ff988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002baa988fe7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxlu1y3bq                        0x00005582cddc730c <unavailable> + 4876

    5    libc.so.6                          0x00002baa98df4460 __libc_start_main +
    245

    6    tmpxlu1y3bq                        0x00005582cddc6ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659979939
- exit_code: 0
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var result = 0\n    s.forEach {\n\
    \        let code = $0.asciiValue!\n        if code >= 65 && code <= 90 {\n  \
    \          result += Int(code)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"\
    abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\"\
    ) == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\"\
    ) == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"\
    You arE Very Smart\") == 327)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979939
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.filter { $0.isUppercase\
    \ }.reduce(0) { $0 + Int($0.asciiValue!) }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\n\
    assert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\n\
    assert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\n\
    assert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very\
    \ Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmps2s5ligf.swift:19:50: error: contextual closure type '(Int, String.Element)\
    \ throws -> Int' (aka '(Int, Character) throws -> Int') expects 2 arguments, but\
    \ 1 was used in closure body\n    return s.filter { $0.isUppercase }.reduce(0)\
    \ { $0 + Int($0.asciiValue!) }\n                                             \
    \    ^\n/tmp/tmps2s5ligf.swift:19:64: error: value of type 'Int' has no member\
    \ 'asciiValue'\n    return s.filter { $0.isUppercase }.reduce(0) { $0 + Int($0.asciiValue!)\
    \ }\n                                                            ~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979939
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.reduce(0) { $0 + ($1.unicodeScalars.first!.isASCII\
    \ && $1.unicodeScalars.first!.isUppercase ? $1.unicodeScalars.first!.value : 0)\
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s:\
    \ \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s:\
    \ \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s:\
    \ \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s:\
    \ \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmp00ygbepm.swift:19:20: error: missing argument label 'into:' in\
    \ call\n    return s.reduce(0) { $0 + ($1.unicodeScalars.first!.isASCII && $1.unicodeScalars.first!.isUppercase\
    \ ? $1.unicodeScalars.first!.value : 0) }\n                   ^\n            \
    \        into: \n/tmp/tmp00ygbepm.swift:19:14: error: cannot convert return expression\
    \ of type '(Int, _) -> Int' to return type 'Int'\n    return s.reduce(0) { $0\
    \ + ($1.unicodeScalars.first!.isASCII && $1.unicodeScalars.first!.isUppercase\
    \ ? $1.unicodeScalars.first!.value : 0) }\n           ~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979939
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var total = 0\n    for character\
    \ in s {\n        if character.isUppercase {\n            total += character.asciiValue!\n\
    \        }\n    }\n    return total\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s:\
    \ \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s:\
    \ \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s:\
    \ \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpfu1f1iq0.swift:22:42: error: cannot convert value of type 'UInt8'\
    \ to expected argument type 'Int'\n            total += character.asciiValue!\n\
    \                                         ^\n                     Int(       \
    \          )\n"
  stdout: ''
  timestamp: 1659979939
- exit_code: 0
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n  var sum = 0\n  for char in s {\n \
    \   let charCode = Int(char.asciiValue!)\n    if charCode > 64 && charCode < 91\
    \ {\n      sum += charCode\n    }\n  }\n  return sum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") ==\
    \ 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") ==\
    \ 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\"\
    ) == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"\
    You arE Very Smart\") == 327)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979939
- exit_code: 0
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.reduce(0) { (result, char)\
    \ -> Int in\n        guard let ascii = char.asciiValue else { return result }\n\
    \        return ascii > 64 && ascii < 91 ? result + Int(ascii) : result\n    }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"\
    abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\"\
    ) == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\"\
    ) == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"\
    You arE Very Smart\") == 327)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979939
- exit_code: 0
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for char in s {\n\
    \        if char.isUppercase {\n            sum += Int(char.asciiValue!)\n   \
    \     }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979939
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.filter { $0.isUppercase\
    \ }.reduce(0) { $0 + Int($0.asciiValue!) }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\n\
    assert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\n\
    assert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\n\
    assert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very\
    \ Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmps2s5ligf.swift:19:50: error: contextual closure type '(Int, String.Element)\
    \ throws -> Int' (aka '(Int, Character) throws -> Int') expects 2 arguments, but\
    \ 1 was used in closure body\n    return s.filter { $0.isUppercase }.reduce(0)\
    \ { $0 + Int($0.asciiValue!) }\n                                             \
    \    ^\n/tmp/tmps2s5ligf.swift:19:64: error: value of type 'Int' has no member\
    \ 'asciiValue'\n    return s.filter { $0.isUppercase }.reduce(0) { $0 + Int($0.asciiValue!)\
    \ }\n                                                            ~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979939
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n  return s.unicodeScalars.filter { CharacterSet.uppercaseLetters.contains($0)\
    \ }.reduce(0) { $0 + Int($1.value) }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s:\
    \ \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s:\
    \ \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s:\
    \ \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmp3cobuaja.swift:19:36: error: cannot find 'CharacterSet' in scope\n\
    \  return s.unicodeScalars.filter { CharacterSet.uppercaseLetters.contains($0)\
    \ }.reduce(0) { $0 + Int($1.value) }\n                                   ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979939
- exit_code: -4
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    let input = s.uppercased()\n   \
    \ var sum = 0\n    for u in input.unicodeScalars {\n        if u.value >= 65 &&\
    \ u.value <= 90 {\n            sum += Int(u.value)\n        }\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\n\
    assert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s:\
    \ \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s:\
    \ \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s:\
    \ \"You arE Very Smart\") == 327)"
  status: Exception
  stderr: 'tmpdj68stwm/tmpdj68stwm.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abec51e1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abec4ed8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abec4ed8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abec4ed77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdj68stwm                        0x000055c041e686ac <unavailable> + 5804

    5    libc.so.6                          0x00002abec53cd460 __libc_start_main +
    245

    6    tmpdj68stwm                        0x000055c041e68289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1659979939
- exit_code: -4
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    let first = s.filter { $0.isUppercase\
    \ }.map { Int($0.asciiValue!) }.reduce(0, +)\n    let second = s.filter { $0.isLowercase\
    \ }.map { Int($0.asciiValue!) }.reduce(0, +)\n    return first - second\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"\
    abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\"\
    ) == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\"\
    ) == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"\
    You arE Very Smart\") == 327)"
  status: Exception
  stderr: 'tmpaqt6k7a9/tmpaqt6k7a9.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b726a0d5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7269dccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7269dcc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7269dcb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpaqt6k7a9                        0x000055c8b864681c <unavailable> + 6172

    5    libc.so.6                          0x00002b726a2c1460 __libc_start_main +
    245

    6    tmpaqt6k7a9                        0x000055c8b86463f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1659979939
- exit_code: 0
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var res = 0\n    for char in s {\n\
    \        if char.isUppercase {\n            res += Int(char.asciiValue!)\n   \
    \     }\n    }\n    return res\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979939
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.asciiValues.filter { $0\
    \ >= 65 && $0 <= 90 }.reduce(0, +)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s:\
    \ \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s:\
    \ \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s:\
    \ \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpphc58cff.swift:19:14: error: value of type 'String' has no member\
    \ 'asciiValues'\n    return s.asciiValues.filter { $0 >= 65 && $0 <= 90 }.reduce(0,\
    \ +)\n           ~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979945
- exit_code: 0
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for char in s {\n\
    \        let ascii = char.asciiValue!\n        if ascii >= 65 && ascii <= 90 {\n\
    \            sum += Int(ascii)\n        }\n    }\n    return sum\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"\
    abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\"\
    ) == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\"\
    ) == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"\
    You arE Very Smart\") == 327)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979939
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.reduce(0) {\n        guard\
    \ let s = UnicodeScalar(String($1)) else {\n            return $0\n        }\n\
    \        return s.isASCII && s.isUppercase ? $0 + Int(s.value) : $0\n    }\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"\
    abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\"\
    ) == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\"\
    ) == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"\
    You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpsmak941l.swift:19:20: error: missing argument label 'into:' in\
    \ call\n    return s.reduce(0) {\n                   ^\n                    into:\
    \ \n/tmp/tmpsmak941l.swift:19:14: error: cannot convert return expression of type\
    \ '(_, _) -> _' to return type 'Int'\n    return s.reduce(0) {\n           ~~^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979939
- exit_code: 0
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    let upperChars = s.filter { $0.isUppercase\
    \ }\n    var sum = 0\n    for char in upperChars {\n        sum += Int(String(char).unicodeScalars.first!.value)\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979939
- exit_code: -4
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.filter{!\"abcdefghijklmnopqrstuvwxyz\"\
    .contains($0)}.reduce(0){$0 + Int(UnicodeScalar($1.description)!.value)}\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"\
    abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\"\
    ) == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\"\
    ) == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"\
    You arE Very Smart\") == 327)"
  status: Exception
  stderr: 'tmph2dgy_mj/tmph2dgy_mj.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3cb5911c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3cb5608b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3cb5608988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3cb56077b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmph2dgy_mj                        0x0000558ffb0b1c03 <unavailable> + 7171

    5    libc.so.6                          0x00002b3cb5afd460 __libc_start_main +
    245

    6    tmph2dgy_mj                        0x0000558ffb0b1449 <unavailable> + 5193

    '
  stdout: ''
  timestamp: 1659979939
- exit_code: 0
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s.utf8\
    \ {\n        let num = Int(c)\n        if 65 <= num && num <= 90 {\n         \
    \   sum += num\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") ==\
    \ 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") ==\
    \ 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\"\
    ) == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"\
    You arE Very Smart\") == 327)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979939
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.reduce(0) { $0 + ($1.isUppercase\
    \ ? $1.asciiValue! : 0) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpza3__hrb.swift:19:62: error: result values in '? :' expression\
    \ have mismatching types 'UInt8' and 'Int'\n    return s.reduce(0) { $0 + ($1.isUppercase\
    \ ? $1.asciiValue! : 0) }\n                                                ~~~~~~~~~~~~~^\n\
    \                                                Int(          )\n"
  stdout: ''
  timestamp: 1659979938
- exit_code: 0
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s.unicodeScalars\
    \ {\n        if c.value >= 65 && c.value <= 90 {\n            sum += Int(c.value)\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979939
- exit_code: -4
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n  return s.unicodeScalars.reduce(0)\
    \ { (sum, char) in\n    return (char.value <= 122 && char.value >= 97) ? sum :\
    \ sum + Int(char.value)\n  }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: Exception
  stderr: 'tmpc538npj6/tmpc538npj6.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b41e225fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b41e1f56b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b41e1f56988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b41e1f557b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc538npj6                        0x0000563d27eeaa13 <unavailable> + 6675

    5    libc.so.6                          0x00002b41e244b460 __libc_start_main +
    245

    6    tmpc538npj6                        0x0000563d27eea259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659979939
- exit_code: 0
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var a = 0\n    for c in s {\n  \
    \      if c.isUppercase {\n            a += Int(c.asciiValue!)\n        }\n  \
    \  }\n    return a\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\")\
    \ == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") ==\
    \ 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\")\
    \ == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979939
- exit_code: -4
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    \n    let onlyUpperChars = Array(s.filter\
    \ { $0.isUppercase }).map { $0.asciiValue! }\n    let sum = onlyUpperChars.reduce(0,\
    \ +)\n    return Int(sum)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659979939
- exit_code: 0
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var result = 0\n    for c in s {\n\
    \        result += c.isUppercase ? Int(c.asciiValue!) : 0\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"\
    abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\"\
    ) == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\"\
    ) == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"\
    You arE Very Smart\") == 327)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979939
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.reduce(0) {\n        $1.isUppercase\
    \ ? $0 + $1.asciiValue! : $0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s:\
    \ \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s:\
    \ \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s:\
    \ \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpwpc_kcm2.swift:20:44: error: cannot convert value of type 'UInt8'\
    \ to expected argument type 'Int'\n        $1.isUppercase ? $0 + $1.asciiValue!\
    \ : $0\n                                           ^\n                       \
    \       Int(          )\n"
  stdout: ''
  timestamp: 1659979938
- exit_code: 0
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var result = 0\n    for char in\
    \ s {\n        if char.isUppercase {\n            result += Int(char.asciiValue!)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s:\
    \ \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s:\
    \ \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s:\
    \ \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979939
- exit_code: 0
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.reduce(0) {\n        $1.isUppercase\
    \ ? $0 + Int($1.asciiValue!) : $0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s:\
    \ \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s:\
    \ \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s:\
    \ \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979939
- exit_code: 0
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return Array(s).reduce(0) {\n  \
    \      $1 >= \"A\" && $1 <= \"Z\" ? $0 + Int($1.asciiValue!) : $0\n    }\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"\
    abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\"\
    ) == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\"\
    ) == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"\
    You arE Very Smart\") == 327)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979939
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.reduce(0) { $0 + ($1.unicodeScalars.first!.isASCII\
    \ && $1.unicodeScalars.first!.isUppercase ? $1.unicodeScalars.first!.value : 0)\
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s:\
    \ \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s:\
    \ \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s:\
    \ \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s:\
    \ \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmp00ygbepm.swift:19:20: error: missing argument label 'into:' in\
    \ call\n    return s.reduce(0) { $0 + ($1.unicodeScalars.first!.isASCII && $1.unicodeScalars.first!.isUppercase\
    \ ? $1.unicodeScalars.first!.value : 0) }\n                   ^\n            \
    \        into: \n/tmp/tmp00ygbepm.swift:19:14: error: cannot convert return expression\
    \ of type '(Int, _) -> Int' to return type 'Int'\n    return s.reduce(0) { $0\
    \ + ($1.unicodeScalars.first!.isASCII && $1.unicodeScalars.first!.isUppercase\
    \ ? $1.unicodeScalars.first!.value : 0) }\n           ~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979939
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    let upper = s.unicodeScalars.filter\
    \ { $0.isASCII && $0.isUppercase }\n    return upper.reduce(0) { $0 + Int($1.value)\
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s:\
    \ \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s:\
    \ \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s:\
    \ \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s:\
    \ \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmp8ebbm8oq.swift:19:60: error: value of type 'Unicode.Scalar' has\
    \ no member 'isUppercase'\n    let upper = s.unicodeScalars.filter { $0.isASCII\
    \ && $0.isUppercase }\n                                                      \
    \  ~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979939
- exit_code: 0
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.reduce(0) { $0 + ($1 >=\
    \ \"A\" && $1 <= \"Z\" ? Int($1.asciiValue!) : 0) }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") ==\
    \ 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") ==\
    \ 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\"\
    ) == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"\
    You arE Very Smart\") == 327)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979939
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    // your code here\n    return s.filter\
    \ { $0.isUppercase }.reduce(0) { $0 + Int($0.asciiValue!) }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\")\
    \ == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\"\
    ) == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\"\
    ) == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"\
    You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpj_d8jwzp.swift:20:50: error: contextual closure type '(Int, String.Element)\
    \ throws -> Int' (aka '(Int, Character) throws -> Int') expects 2 arguments, but\
    \ 1 was used in closure body\n    return s.filter { $0.isUppercase }.reduce(0)\
    \ { $0 + Int($0.asciiValue!) }\n                                             \
    \    ^\n/tmp/tmpj_d8jwzp.swift:20:64: error: value of type 'Int' has no member\
    \ 'asciiValue'\n    return s.filter { $0.isUppercase }.reduce(0) { $0 + Int($0.asciiValue!)\
    \ }\n                                                            ~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979940
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    let numbers = \"0123456789\"\n \
    \   let upper = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n    let lower = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    let digits = Set(numbers)\n    let uppers = Set(upper)\n    let lowers =\
    \ Set(lower)\n    var sum = 0\n    for char in s {\n        if digits.contains(char)\
    \ {\n            sum += Int(String(char))!\n        } else if uppers.contains(char)\
    \ {\n            sum += Int(String(char.asciiValue!))\n        }\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\n\
    assert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s:\
    \ \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s:\
    \ \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s:\
    \ \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmp3riksc21.swift:30:20: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n            sum += Int(String(char.asciiValue!))\n\
    \                   ^\n/tmp/tmp3riksc21.swift:30:20: note: coalesce using '??'\
    \ to provide a default when the optional value contains 'nil'\n            sum\
    \ += Int(String(char.asciiValue!))\n                   ^\n                   \
    \                              ?? <#default value#>\n/tmp/tmp3riksc21.swift:30:20:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n            sum += Int(String(char.asciiValue!))\n                  \
    \ ^\n                                                !\n"
  stdout: ''
  timestamp: 1659979939
- exit_code: -4
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    // code goes here\n    return 0\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"\
    abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\"\
    ) == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\"\
    ) == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"\
    You arE Very Smart\") == 327)"
  status: Exception
  stderr: 'tmpfm3wu89k/tmpfm3wu89k.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0098090c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0097d87b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0097d87988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0097d867b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfm3wu89k                        0x0000559d3c02430c <unavailable> + 4876

    5    libc.so.6                          0x00002b009827c460 __libc_start_main +
    245

    6    tmpfm3wu89k                        0x0000559d3c023ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659979939
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.asciiArray.filter({ $0\
    \ >= 65 && $0 <= 90 }).reduce(0, +)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s:\
    \ \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s:\
    \ \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s:\
    \ \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpu6a8130i.swift:19:14: error: value of type 'String' has no member\
    \ 'asciiArray'\n    return s.asciiArray.filter({ $0 >= 65 && $0 <= 90 }).reduce(0,\
    \ +)\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979945
- exit_code: -4
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    let uppercasedString = s.uppercased()\n\
    \    var result = 0\n    for ch in uppercasedString {\n        if let asciiValue\
    \ = ch.asciiValue {\n            result += Int(asciiValue)\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\")\
    \ == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") ==\
    \ 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\")\
    \ == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: Exception
  stderr: 'tmpfqeam6w8/tmpfqeam6w8.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b58f5fbfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b58f5cb6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b58f5cb6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b58f5cb57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfqeam6w8                        0x000055819f9b55fc <unavailable> + 5628

    5    libc.so.6                          0x00002b58f61ab460 __libc_start_main +
    245

    6    tmpfqeam6w8                        0x000055819f9b51d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1659979939
- exit_code: -4
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.map { $0.asciiValue }.reduce(0)\
    \ { (result, current) in\n        guard let asciiValue = current else { return\
    \ result }\n        return result + (asciiValue < 97 ? Int(asciiValue) : 0)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\n\
    assert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s:\
    \ \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s:\
    \ \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s:\
    \ \"You arE Very Smart\") == 327)"
  status: Exception
  stderr: 'tmprk0lo2o8/tmprk0lo2o8.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7845984c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b784567bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b784567b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b784567a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprk0lo2o8                        0x000055ff4ed0ca13 <unavailable> + 6675

    5    libc.so.6                          0x00002b7845b70460 __libc_start_main +
    245

    6    tmprk0lo2o8                        0x000055ff4ed0c259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659979939
- exit_code: 0
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.filter { Int($0.asciiValue!)\
    \ > 64 && Int($0.asciiValue!) < 91 }.reduce(0) { $0 + Int($1.asciiValue!) }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"\
    abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\"\
    ) == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\"\
    ) == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"\
    You arE Very Smart\") == 327)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979939
- exit_code: 0
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s.unicodeScalars\
    \ {\n        if c.value >= 65 && c.value <= 90 {\n            sum += Int(c.value)\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979939
- exit_code: 0
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for i in s {\n\
    \        let char = i.unicodeScalars.first!.value\n        if char >= 65 && char\
    \ <= 90 {\n            sum += Int(char)\n        }\n    }\n    return sum\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"\
    abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\"\
    ) == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\"\
    ) == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"\
    You arE Very Smart\") == 327)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979939
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for char in s {\n\
    \        if char.uppercased() == char {\n            sum += Int(char.asciiValue!)\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpml56hjd1.swift:21:30: error: binary operator '==' cannot be applied\
    \ to operands of type 'String' and 'Character'\n        if char.uppercased() ==\
    \ char {\n           ~~~~~~~~~~~~~~~~~ ^  ~~~~\n/tmp/tmpml56hjd1.swift:21:30:\
    \ note: overloads for '==' exist with these partially matching parameter lists:\
    \ (Character, Character), (String, String)\n        if char.uppercased() == char\
    \ {\n                             ^\n"
  stdout: ''
  timestamp: 1659979939
- exit_code: -4
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    let charCode = s.reduce(0) { (acc,\
    \ element) -> Int in\n        let charCode = element.asciiValue!\n        return\
    \ acc + (charCode > 96 && charCode < 123 ? 0 : Int(charCode))\n    }\n    return\
    \ charCode\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\") ==\
    \ 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\n\
    assert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\n\
    assert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\"\
    ) == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: Exception
  stderr: 'tmpd416nmy4/tmpd416nmy4.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad46cd6dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad46ca64b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad46ca64988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad46ca637b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd416nmy4                        0x0000560aefbc7a03 <unavailable> + 6659

    5    libc.so.6                          0x00002ad46cf59460 __libc_start_main +
    245

    6    tmpd416nmy4                        0x0000560aefbc7249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659979939
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.reduce(0) { $0 + ($1.isUppercase\
    \ ? $1.asciiValue! : 0) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpza3__hrb.swift:19:62: error: result values in '? :' expression\
    \ have mismatching types 'UInt8' and 'Int'\n    return s.reduce(0) { $0 + ($1.isUppercase\
    \ ? $1.asciiValue! : 0) }\n                                                ~~~~~~~~~~~~~^\n\
    \                                                Int(          )\n"
  stdout: ''
  timestamp: 1659979938
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var result = 0\n    for c in s {\n\
    \        result += c.unicodeScalars.first!.value\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"\
    abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\"\
    ) == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\"\
    ) == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"\
    You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmp833q8c_b.swift:21:43: error: cannot convert value of type 'UInt32'\
    \ to expected argument type 'Int'\n        result += c.unicodeScalars.first!.value\n\
    \                                          ^\n                  Int(         \
    \                )\n"
  stdout: ''
  timestamp: 1659979939
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.reduce(0) { $0 + ($1.isUppercase\
    \ ? $1.unicodeScalars.first!.value : 0) }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\n\
    assert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\n\
    assert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\n\
    assert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very\
    \ Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpy06bnq6h.swift:19:74: error: result values in '? :' expression\
    \ have mismatching types 'UInt32' and 'Int'\n    return s.reduce(0) { $0 + ($1.isUppercase\
    \ ? $1.unicodeScalars.first!.value : 0) }\n                                  \
    \              ~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~\n                              \
    \                  Int(                          )\n"
  stdout: ''
  timestamp: 1659979939
- exit_code: 0
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.filter { $0.isUppercase\
    \ }.reduce(0) { (res, c) in res + Int(c.asciiValue!) }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") ==\
    \ 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") ==\
    \ 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\"\
    ) == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"\
    You arE Very Smart\") == 327)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979939
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for i in s {\n\
    \        let char = Character(String(i))\n        if CharacterSet.uppercaseLetters.contains(char.unicodeScalars.first!)\
    \ {\n            sum += Int(char.asciiValue!)\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"\
    abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\"\
    ) == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\"\
    ) == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"\
    You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmph9s2fww4.swift:22:12: error: cannot find 'CharacterSet' in scope\n\
    \        if CharacterSet.uppercaseLetters.contains(char.unicodeScalars.first!)\
    \ {\n           ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979939
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.reduce(0) {\n        $1.isUppercase\
    \ ? ($0 + $1.asciiValue!) : $0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s:\
    \ \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s:\
    \ \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s:\
    \ \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmp24k8otlr.swift:20:45: error: cannot convert value of type 'UInt8'\
    \ to expected argument type 'Int'\n        $1.isUppercase ? ($0 + $1.asciiValue!)\
    \ : $0\n                                            ^\n                      \
    \         Int(          )\n"
  stdout: ''
  timestamp: 1659979939
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.reduce(0) { $0 + ($1.isUppercase\
    \ ? $1.asciiValue : 0) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpkd1mgn3v.swift:19:52: error: result values in '? :' expression\
    \ have mismatching types 'UInt8?' and 'Int'\n    return s.reduce(0) { $0 + ($1.isUppercase\
    \ ? $1.asciiValue : 0) }\n                                                ~~~^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979938
- exit_code: 0
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var total = 0\n    let uppers =\
    \ \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n    for char in s {\n        if uppers.contains(char)\
    \ {\n            total += Int(String(char).unicodeScalars.first!.value)\n    \
    \    }\n    }\n    return total\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979939
- exit_code: 0
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n  let upperLetters = s.filter { $0.isUppercase\
    \ }\n  let asciiSum = upperLetters.reduce(0) { $0 + Int($1.asciiValue!) }\n  return\
    \ asciiSum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\") ==\
    \ 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\n\
    assert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\n\
    assert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\"\
    ) == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979939
- exit_code: 0
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for char in s {\n\
    \        if char.isUppercase {\n            sum += Int(char.asciiValue!)\n   \
    \     }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979939
- exit_code: -4
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    s.forEach { sum\
    \ += Int($0.asciiValue!) - Int(Character(\"a\").asciiValue!) }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"\
    abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\"\
    ) == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\"\
    ) == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"\
    You arE Very Smart\") == 327)"
  status: Exception
  stderr: 'tmpp8jn6ewy/tmpp8jn6ewy.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4ea4ad1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4ea47c8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4ea47c8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4ea47c77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp8jn6ewy                        0x0000558bfb2176ec <unavailable> + 5868

    5    libc.so.6                          0x00002b4ea4cbd460 __libc_start_main +
    245

    6    tmpp8jn6ewy                        0x0000558bfb2172c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1659979939
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n  let upperString = s.uppercased()\n\
    \  let upperAscii = upperString.unicodeScalars.filter { $0.isASCII }\n  let upperAsciiCodes\
    \ = upperAscii.map { $0.value }\n  return upperAsciiCodes.reduce(0, +)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"\
    abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\"\
    ) == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\"\
    ) == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"\
    You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmp0fumg4yn.swift:22:36: error: cannot convert value of type '(Int)\
    \ -> Int' to expected argument type '(Int, UInt32) throws -> Int'\n  return upperAsciiCodes.reduce(0,\
    \ +)\n                                   ^\n"
  stdout: ''
  timestamp: 1659979939
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.reduce(0) { $0 + (65...90\
    \ ~= $1.asciiValue! ? $1.asciiValue! : 0) }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\n\
    assert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\n\
    assert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\n\
    assert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very\
    \ Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpff6xvfbr.swift:19:73: error: result values in '? :' expression\
    \ have mismatching types 'UInt8' and 'Int'\n    return s.reduce(0) { $0 + (65...90\
    \ ~= $1.asciiValue! ? $1.asciiValue! : 0) }\n                                \
    \                           ~~~~~~~~~~~~~^\n                                 \
    \                          Int(          )\n"
  stdout: ''
  timestamp: 1659979939
- exit_code: 0
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    \n    var sum = 0\n    for c in\
    \ s {\n        let ascii = c.asciiValue\n        if let a = ascii {\n        \
    \    if a >= 65 && a <= 90 {\n                sum += Int(a)\n            }\n \
    \       }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979940
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.reduce(0) { $0 + ($1.isUppercase\
    \ ? $1.unicodeScalars.first!.value : 0) }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\n\
    assert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\n\
    assert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\n\
    assert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very\
    \ Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpy06bnq6h.swift:19:74: error: result values in '? :' expression\
    \ have mismatching types 'UInt32' and 'Int'\n    return s.reduce(0) { $0 + ($1.isUppercase\
    \ ? $1.unicodeScalars.first!.value : 0) }\n                                  \
    \              ~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~\n                              \
    \                  Int(                          )\n"
  stdout: ''
  timestamp: 1659979939
- exit_code: 0
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n  return s.unicodeScalars.reduce(0)\
    \ { result, next in\n    switch next.value {\n    case 65...90: return result\
    \ + Int(next.value)\n    default: return result\n    }\n  }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\")\
    \ == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\"\
    ) == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\"\
    ) == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"\
    You arE Very Smart\") == 327)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979940
- exit_code: 0
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.reduce(0) {\n        $1\
    \ >= \"A\" && $1 <= \"Z\" ? $0 + Int($1.asciiValue!) : $0\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"\
    abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\"\
    ) == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\"\
    ) == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"\
    You arE Very Smart\") == 327)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979940
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.filter { $0.isUppercase\
    \ }.reduce(0) { $0 + Int($0.asciiValue!) }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\n\
    assert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\n\
    assert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\n\
    assert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very\
    \ Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmps2s5ligf.swift:19:50: error: contextual closure type '(Int, String.Element)\
    \ throws -> Int' (aka '(Int, Character) throws -> Int') expects 2 arguments, but\
    \ 1 was used in closure body\n    return s.filter { $0.isUppercase }.reduce(0)\
    \ { $0 + Int($0.asciiValue!) }\n                                             \
    \    ^\n/tmp/tmps2s5ligf.swift:19:64: error: value of type 'Int' has no member\
    \ 'asciiValue'\n    return s.filter { $0.isUppercase }.reduce(0) { $0 + Int($0.asciiValue!)\
    \ }\n                                                            ~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979939
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.filter{$0.isUppercase}.reduce(0){$0\
    \ + $1.asciiValue!}\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\")\
    \ == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") ==\
    \ 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\")\
    \ == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpa5gnaa24.swift:19:37: error: cannot convert return expression of\
    \ type 'UInt8' to return type 'Int'\n    return s.filter{$0.isUppercase}.reduce(0){$0\
    \ + $1.asciiValue!}\n           ~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \           Int(                                                   )\n"
  stdout: ''
  timestamp: 1659979939
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    let arr = s.filter{ $0.isUppercase\
    \ }\n    guard arr.count > 0 else { return 0 }\n    let chars = [UInt8](arr.utf8)\n\
    \    return chars.reduce(0, +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpcuuo1iln.swift:22:28: error: cannot convert value of type '(Int)\
    \ -> Int' to expected argument type '(Int, UInt8) throws -> Int'\n    return chars.reduce(0,\
    \ +)\n                           ^\n"
  stdout: ''
  timestamp: 1659979939
- exit_code: 0
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.reduce(0) { result, char\
    \ in\n        let code = UnicodeScalar(String(char))?.value\n        return result\
    \ + (code! >= 65 && code! <= 90 ? Int(code!) : 0)\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\")\
    \ == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\"\
    ) == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\"\
    ) == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"\
    You arE Very Smart\") == 327)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979940
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.reduce(0) {\n        $1.unicodeScalars.first!.isASCII\
    \ && CharacterSet.uppercaseLetters.contains($1.unicodeScalars.first!) ? $0 + Int($1.unicodeScalars.first!.value)\
    \ : $0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\")\
    \ == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") ==\
    \ 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\")\
    \ == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmph7rgpsea.swift:20:45: error: cannot find 'CharacterSet' in scope\n\
    \        $1.unicodeScalars.first!.isASCII && CharacterSet.uppercaseLetters.contains($1.unicodeScalars.first!)\
    \ ? $0 + Int($1.unicodeScalars.first!.value) : $0\n                          \
    \                  ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979940
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    // your code\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\")\
    \ == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\"\
    ) == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\"\
    ) == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"\
    You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: '/tmp/tmpaw5aqvu_.swift:20:1: error: missing return in global function expected
    to return ''Int''

    }

    ^

    '
  stdout: ''
  timestamp: 1659979940
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n  return s.filter { $0.isUppercase }.reduce(0)\
    \ { $0 + $1.asciiValue! }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpu3s7s494.swift:19:38: error: cannot convert return expression of\
    \ type 'UInt8' to return type 'Int'\n  return s.filter { $0.isUppercase }.reduce(0)\
    \ { $0 + $1.asciiValue! }\n         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \         Int(                                                         )\n"
  stdout: ''
  timestamp: 1659979940
- exit_code: 0
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    let asciiCodes = s.unicodeScalars.compactMap\
    \ { (c) -> Int? in\n        return Int(c.value)\n    }\n    return asciiCodes.reduce(0,\
    \ { (res, c) -> Int in\n        if c >= 65 && c <= 90 {\n            return res\
    \ + c\n        }\n        return res\n    })\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\n\
    assert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\n\
    assert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\n\
    assert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very\
    \ Smart\") == 327)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979940
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.reduce(0) { $0 + (65...90\
    \ ~= $1.ascii ?? 0 ? $1.ascii! : 0) }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s:\
    \ \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s:\
    \ \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s:\
    \ \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmp97wr235l.swift:19:20: error: missing argument label 'into:' in\
    \ call\n    return s.reduce(0) { $0 + (65...90 ~= $1.ascii ?? 0 ? $1.ascii! :\
    \ 0) }\n                   ^\n                    into: \n/tmp/tmp97wr235l.swift:19:14:\
    \ error: cannot convert return expression of type '(Int, _) -> Int' to return\
    \ type 'Int'\n    return s.reduce(0) { $0 + (65...90 ~= $1.ascii ?? 0 ? $1.ascii!\
    \ : 0) }\n           ~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979941
- exit_code: 0
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for code in s.utf8\
    \ {\n        if code >= 65 && code <= 90 {\n            sum += Int(code)\n   \
    \     }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979940
- exit_code: 0
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.utf8.map({ $0 >= 65 &&\
    \ $0 <= 90 ? Int($0) : 0 }).reduce(0, +)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s:\
    \ \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s:\
    \ \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s:\
    \ \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979940
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.reduce(0) { $0 + ($1.isUppercase\
    \ ? $1.asciiValue : 0) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpkd1mgn3v.swift:19:52: error: result values in '? :' expression\
    \ have mismatching types 'UInt8?' and 'Int'\n    return s.reduce(0) { $0 + ($1.isUppercase\
    \ ? $1.asciiValue : 0) }\n                                                ~~~^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979938
- exit_code: -4
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    guard !s.isEmpty else { return 0\
    \ }\n    let upperChar = s.filter { Int(String($0)) == nil }\n    var sum = 0\n\
    \    for i in upperChar {\n        sum += Int(String(i).unicodeScalars.first!.value)\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: Exception
  stderr: 'tmplfjg7_pv/tmplfjg7_pv.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b55efa85c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b55ef77cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b55ef77c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b55ef77b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplfjg7_pv                        0x00005573c5c0f98c <unavailable> + 6540

    5    libc.so.6                          0x00002b55efc71460 __libc_start_main +
    245

    6    tmplfjg7_pv                        0x00005573c5c0f569 <unavailable> + 5481

    '
  stdout: ''
  timestamp: 1659979940
- exit_code: -4
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    let upper = s.uppercased()\n   \
    \ let array = Array(upper)\n    let arr = array.map { Int(String($0).unicodeScalars.first!.value)\
    \ }\n    return arr.reduce(0, +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: Exception
  stderr: 'tmp70eil86r/tmp70eil86r.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abbed07ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abbecd75b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abbecd75988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abbecd747b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp70eil86r                        0x00005598021b39cc <unavailable> + 6604

    5    libc.so.6                          0x00002abbed26a460 __libc_start_main +
    245

    6    tmp70eil86r                        0x00005598021b35a9 <unavailable> + 5545

    '
  stdout: ''
  timestamp: 1659979940
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.filter { $0.isUppercase\
    \ }.reduce(0) { $0 + Int($0.asciiValue!) }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\n\
    assert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\n\
    assert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\n\
    assert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very\
    \ Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmps2s5ligf.swift:19:50: error: contextual closure type '(Int, String.Element)\
    \ throws -> Int' (aka '(Int, Character) throws -> Int') expects 2 arguments, but\
    \ 1 was used in closure body\n    return s.filter { $0.isUppercase }.reduce(0)\
    \ { $0 + Int($0.asciiValue!) }\n                                             \
    \    ^\n/tmp/tmps2s5ligf.swift:19:64: error: value of type 'Int' has no member\
    \ 'asciiValue'\n    return s.filter { $0.isUppercase }.reduce(0) { $0 + Int($0.asciiValue!)\
    \ }\n                                                            ~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979939
- exit_code: -4
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n  guard !s.isEmpty else { return 0 }\n\
    \  let result = s.reduce(0) { $0 + ($1.isUppercase ? $1.asciiValue! : 0) }\n \
    \ return Int(result)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659979940
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.reduce(0) {\n        (sum,\
    \ char) in\n        return sum + (char.isUppercase ? char.asciiValue : 0)\n  \
    \  }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s:\
    \ \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s:\
    \ \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s:\
    \ \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s:\
    \ \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmphao36bew.swift:21:47: error: result values in '? :' expression\
    \ have mismatching types 'UInt8?' and 'Int'\n        return sum + (char.isUppercase\
    \ ? char.asciiValue : 0)\n                                         ~~~~~^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979940
- exit_code: 0
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for char in s {\n\
    \        if let intChar = char.asciiValue,\n            intChar >= 65,\n     \
    \       intChar <= 90 {\n            sum += Int(intChar)\n        }\n    }\n \
    \   return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\")\
    \ == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") ==\
    \ 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\")\
    \ == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979940
- exit_code: 0
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.reduce(0) { $0 + ($1 >=\
    \ \"A\" && $1 <= \"Z\" ? Int($1.asciiValue!) : 0) }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") ==\
    \ 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") ==\
    \ 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\"\
    ) == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"\
    You arE Very Smart\") == 327)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979939
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.unicodeScalars.reduce(0)\
    \ { $0 + ($1.isASCII && $1.isUppercase ? $1.value : 0) }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\")\
    \ == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\"\
    ) == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\"\
    ) == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"\
    You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpfvwq0k_2.swift:19:35: error: missing argument label 'into:' in\
    \ call\n    return s.unicodeScalars.reduce(0) { $0 + ($1.isASCII && $1.isUppercase\
    \ ? $1.value : 0) }\n                                  ^\n                   \
    \                into: \n/tmp/tmpfvwq0k_2.swift:19:29: error: cannot convert return\
    \ expression of type '(Int, _) -> Int' to return type 'Int'\n    return s.unicodeScalars.reduce(0)\
    \ { $0 + ($1.isASCII && $1.isUppercase ? $1.value : 0) }\n           ~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979940
- exit_code: 0
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.filter { $0.isUppercase\
    \ }.reduce(0) { (result, char) -> Int in\n        return result + Int(char.asciiValue!)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\n\
    assert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s:\
    \ \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s:\
    \ \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s:\
    \ \"You arE Very Smart\") == 327)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979940
- exit_code: -4
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var result = 0\n    for char in\
    \ s.uppercased() {\n        let charAscii = char.asciiValue\n        if charAscii\
    \ != nil && charAscii! >= 65 && charAscii! <= 90 {\n            result += Int(charAscii!)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s:\
    \ \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s:\
    \ \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s:\
    \ \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: Exception
  stderr: 'tmpnanxgouy/tmpnanxgouy.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0061aa0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0061797b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0061797988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b00617967b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnanxgouy                        0x0000560cc1d7868c <unavailable> + 5772

    5    libc.so.6                          0x00002b0061c8c460 __libc_start_main +
    245

    6    tmpnanxgouy                        0x0000560cc1d78269 <unavailable> + 4713

    '
  stdout: ''
  timestamp: 1659979940
- exit_code: 0
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for char in s {\n\
    \        if char.isUppercase {\n            sum += Int(char.asciiValue!)\n   \
    \     }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979939
- exit_code: 0
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.filter { $0.isUppercase\
    \ }.reduce(0) { (result, str) -> Int in\n        let code = str.unicodeScalars.first!.value\n\
    \        return result + Int(code)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\n\
    assert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\n\
    assert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\n\
    assert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very\
    \ Smart\") == 327)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979940
- exit_code: 0
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var upper: Int = 0\n    for c in\
    \ s {\n        if c.isUppercase {\n            upper += Int(c.asciiValue!)\n \
    \       }\n    }\n    return upper\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s:\
    \ \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s:\
    \ \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s:\
    \ \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979940
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n  let upperChars = s.filter { $0.isUppercase\
    \ }\n  let asciiCodes = upperChars.compactMap { $0.asciiValue }\n  return asciiCodes.reduce(0,\
    \ +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s:\
    \ \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s:\
    \ \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s:\
    \ \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s:\
    \ \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmplh3_uvj9.swift:21:31: error: cannot convert value of type '(Int)\
    \ -> Int' to expected argument type '(Int, UInt8) throws -> Int'\n  return asciiCodes.reduce(0,\
    \ +)\n                              ^\n"
  stdout: ''
  timestamp: 1659979940
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.reduce(0) { $0 + ($1 >\
    \ \"a\" ? $1.asciiValue! - 32 : 0) }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s:\
    \ \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s:\
    \ \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s:\
    \ \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmprav1x7gj.swift:19:58: error: result values in '? :' expression\
    \ have mismatching types 'UInt8' and 'Int'\n    return s.reduce(0) { $0 + ($1\
    \ > \"a\" ? $1.asciiValue! - 32 : 0) }\n                                     \
    \     ~~~~~~~~~~~~~~~^~~~\n                                          Int(    \
    \           )\n"
  stdout: ''
  timestamp: 1659979941
- exit_code: -4
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s.uppercased()\
    \ {\n        if c.isASCII {\n            sum += Int(c.asciiValue!)\n        }\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: Exception
  stderr: 'tmp6ts4cqhz/tmp6ts4cqhz.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0a6046ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0a60165b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0a60165988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0a601647b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6ts4cqhz                        0x00005559f41206dc <unavailable> + 5852

    5    libc.so.6                          0x00002b0a6065a460 __libc_start_main +
    245

    6    tmp6ts4cqhz                        0x00005559f41202b9 <unavailable> + 4793

    '
  stdout: ''
  timestamp: 1659979940
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.unicodeScalars.filter({\
    \ $0.value >= 65 && $0.value <= 90 }).reduce(0, +)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") ==\
    \ 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") ==\
    \ 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\"\
    ) == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"\
    You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpvisgvkow.swift:19:84: error: cannot convert value of type '(Int)\
    \ -> Int' to expected argument type '(Int, Unicode.Scalar) throws -> Int'\n  \
    \  return s.unicodeScalars.filter({ $0.value >= 65 && $0.value <= 90 }).reduce(0,\
    \ +)\n                                                                       \
    \            ^\n"
  stdout: ''
  timestamp: 1659979940
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.filter { $0.isUppercase\
    \ }.reduce(0) { $0 + Int($0.asciiValue!) }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\n\
    assert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\n\
    assert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\n\
    assert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very\
    \ Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmps2s5ligf.swift:19:50: error: contextual closure type '(Int, String.Element)\
    \ throws -> Int' (aka '(Int, Character) throws -> Int') expects 2 arguments, but\
    \ 1 was used in closure body\n    return s.filter { $0.isUppercase }.reduce(0)\
    \ { $0 + Int($0.asciiValue!) }\n                                             \
    \    ^\n/tmp/tmps2s5ligf.swift:19:64: error: value of type 'Int' has no member\
    \ 'asciiValue'\n    return s.filter { $0.isUppercase }.reduce(0) { $0 + Int($0.asciiValue!)\
    \ }\n                                                            ~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979939
- exit_code: -4
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    let toSum = s.filter{ \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    .contains($0) }\n    guard !toSum.isEmpty else { return 0 }\n    return toSum.map\
    \ { Int(String($0)) ?? 0 }.reduce(0, +)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s:\
    \ \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s:\
    \ \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s:\
    \ \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: Exception
  stderr: 'tmpj5s96bn1/tmpj5s96bn1.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b38a218dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b38a1e84b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b38a1e84988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b38a1e837b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj5s96bn1                        0x000055755fb9d73c <unavailable> + 5948

    5    libc.so.6                          0x00002b38a2379460 __libc_start_main +
    245

    6    tmpj5s96bn1                        0x000055755fb9d319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659979940
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return Int(s.filter { $0.isUppercase\
    \ }.unicodeScalars.map(Int.init).reduce(0, +))\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\n\
    assert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\n\
    assert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\n\
    assert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very\
    \ Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpzy58v57m.swift:19:67: error: cannot convert value of type '() ->\
    \ Int' to expected argument type '(Unicode.Scalar) throws -> Int'\n    return\
    \ Int(s.filter { $0.isUppercase }.unicodeScalars.map(Int.init).reduce(0, +))\n\
    \                                                                  ^\n"
  stdout: ''
  timestamp: 1659979940
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.filter { $0.isUppercase\
    \ }.reduce(0) { $0 + Int($0.asciiValue ?? 0) }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\n\
    assert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\n\
    assert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\n\
    assert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very\
    \ Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpb7sv7u8h.swift:19:40: error: cannot convert return expression of\
    \ type '(_) -> _' to return type 'Int'\n    return s.filter { $0.isUppercase }.reduce(0)\
    \ { $0 + Int($0.asciiValue ?? 0) }\n           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpb7sv7u8h.swift:19:46: error: missing argument label 'into:' in call\n\
    \    return s.filter { $0.isUppercase }.reduce(0) { $0 + Int($0.asciiValue ??\
    \ 0) }\n                                             ^\n                     \
    \                         into: \n/tmp/tmpb7sv7u8h.swift:19:47: error: cannot\
    \ convert value of type 'Int' to expected argument type '(inout @escaping (_)\
    \ -> _, String.Element) throws -> ()' (aka '(inout @escaping (_) -> _, Character)\
    \ throws -> ()')\n    return s.filter { $0.isUppercase }.reduce(0) { $0 + Int($0.asciiValue\
    \ ?? 0) }\n                                              ^\n"
  stdout: ''
  timestamp: 1659979942
- exit_code: 0
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.reduce(0) { (result, char)\
    \ -> Int in\n        guard let charInt = char.asciiValue else { return result\
    \ }\n        guard charInt >= 65, charInt <= 90 else { return result }\n     \
    \   return result + Int(charInt)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s:\
    \ \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s:\
    \ \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s:\
    \ \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979940
- exit_code: -4
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    // Your code here\n    return s.filter{\
    \ String($0).uppercased() == String($0) }.reduce(0){ $0 + Int(String($1).unicodeScalars.first!.value)\
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s:\
    \ \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s:\
    \ \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s:\
    \ \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s:\
    \ \"You arE Very Smart\") == 327)"
  status: Exception
  stderr: 'tmpmoc0it40/tmpmoc0it40.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba7cf418c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba7cf10fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba7cf10f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba7cf10e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmoc0it40                        0x000055c8a00fad13 <unavailable> + 7443

    5    libc.so.6                          0x00002ba7cf604460 __libc_start_main +
    245

    6    tmpmoc0it40                        0x000055c8a00fa559 <unavailable> + 5465

    '
  stdout: ''
  timestamp: 1659979940
- exit_code: 0
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.map {\n        $0.unicodeScalars.map\
    \ { Int($0.value) }\n    }.flatMap { $0 }.filter { $0 >= 65 && $0 <= 90 }.reduce(0,\
    \ +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s:\
    \ \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s:\
    \ \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s:\
    \ \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s:\
    \ \"You arE Very Smart\") == 327)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979943
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.unicodeScalars.reduce(0)\
    \ { $0 + ($1.isASCII && $1.isUppercase ? $1.value : 0) }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\")\
    \ == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\"\
    ) == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\"\
    ) == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"\
    You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpfvwq0k_2.swift:19:35: error: missing argument label 'into:' in\
    \ call\n    return s.unicodeScalars.reduce(0) { $0 + ($1.isASCII && $1.isUppercase\
    \ ? $1.value : 0) }\n                                  ^\n                   \
    \                into: \n/tmp/tmpfvwq0k_2.swift:19:29: error: cannot convert return\
    \ expression of type '(Int, _) -> Int' to return type 'Int'\n    return s.unicodeScalars.reduce(0)\
    \ { $0 + ($1.isASCII && $1.isUppercase ? $1.value : 0) }\n           ~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979940
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.filter{$0.isUppercase}.map({$0.asciiValue!}).reduce(0,\
    \ +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s:\
    \ \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s:\
    \ \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s:\
    \ \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s:\
    \ \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpm9wl0mtu.swift:19:55: error: cannot convert value of type 'UInt8'\
    \ to closure result type 'Int'\n    return s.filter{$0.isUppercase}.map({$0.asciiValue!}).reduce(0,\
    \ +)\n                                         ~~~~~~~~~~~~~^\n              \
    \                           Int(          )\n"
  stdout: ''
  timestamp: 1659979940
- exit_code: 0
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var res = 0\n    for code in s.unicodeScalars\
    \ {\n        if code.value >= 65 && code.value <= 90 {\n            res += Int(code.value)\n\
    \        }\n    }\n    return res\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979940
- exit_code: 0
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var result = 0\n    for c in s {\n\
    \        if c.isUppercase {\n            result += Int(c.asciiValue!)\n      \
    \  }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979940
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.filter { $0.isUppercase\
    \ }.reduce(0) { $0 + Int($0.asciiValue!) }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\n\
    assert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\n\
    assert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\n\
    assert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very\
    \ Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmps2s5ligf.swift:19:50: error: contextual closure type '(Int, String.Element)\
    \ throws -> Int' (aka '(Int, Character) throws -> Int') expects 2 arguments, but\
    \ 1 was used in closure body\n    return s.filter { $0.isUppercase }.reduce(0)\
    \ { $0 + Int($0.asciiValue!) }\n                                             \
    \    ^\n/tmp/tmps2s5ligf.swift:19:64: error: value of type 'Int' has no member\
    \ 'asciiValue'\n    return s.filter { $0.isUppercase }.reduce(0) { $0 + Int($0.asciiValue!)\
    \ }\n                                                            ~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979939
- exit_code: -4
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for char in s.uppercased()\
    \ {\n        sum += Int(char.asciiValue!)\n    }\n    return sum\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"\
    abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\"\
    ) == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\"\
    ) == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"\
    You arE Very Smart\") == 327)"
  status: Exception
  stderr: 'tmpkgy4x55d/tmpkgy4x55d.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9ca114cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9ca0e43b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9ca0e43988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9ca0e427b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkgy4x55d                        0x000055abb52c968c <unavailable> + 5772

    5    libc.so.6                          0x00002b9ca1338460 __libc_start_main +
    245

    6    tmpkgy4x55d                        0x000055abb52c9269 <unavailable> + 4713

    '
  stdout: ''
  timestamp: 1659979940
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.filter { $0.isUppercase\
    \ }.reduce(0) { $0 + Int($0.asciiValue!) }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\n\
    assert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\n\
    assert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\n\
    assert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very\
    \ Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmps2s5ligf.swift:19:50: error: contextual closure type '(Int, String.Element)\
    \ throws -> Int' (aka '(Int, Character) throws -> Int') expects 2 arguments, but\
    \ 1 was used in closure body\n    return s.filter { $0.isUppercase }.reduce(0)\
    \ { $0 + Int($0.asciiValue!) }\n                                             \
    \    ^\n/tmp/tmps2s5ligf.swift:19:64: error: value of type 'Int' has no member\
    \ 'asciiValue'\n    return s.filter { $0.isUppercase }.reduce(0) { $0 + Int($0.asciiValue!)\
    \ }\n                                                            ~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979939
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.filter { $0.isUppercase\
    \ }.reduce(0) { $0 + Int($0.asciiValue!) }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\n\
    assert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\n\
    assert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\n\
    assert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very\
    \ Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmps2s5ligf.swift:19:50: error: contextual closure type '(Int, String.Element)\
    \ throws -> Int' (aka '(Int, Character) throws -> Int') expects 2 arguments, but\
    \ 1 was used in closure body\n    return s.filter { $0.isUppercase }.reduce(0)\
    \ { $0 + Int($0.asciiValue!) }\n                                             \
    \    ^\n/tmp/tmps2s5ligf.swift:19:64: error: value of type 'Int' has no member\
    \ 'asciiValue'\n    return s.filter { $0.isUppercase }.reduce(0) { $0 + Int($0.asciiValue!)\
    \ }\n                                                            ~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979939
- exit_code: 0
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.filter{$0.isUppercase}.map{Int($0.asciiValue!)}.reduce(0,\
    \ +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s:\
    \ \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s:\
    \ \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s:\
    \ \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s:\
    \ \"You arE Very Smart\") == 327)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979939
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.reduce(0) { $0 + (isCapital($1)\
    \ ? Int($1.asciiValue!) : 0) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmphhguyabd.swift:19:32: error: cannot find 'isCapital' in scope\n\
    \    return s.reduce(0) { $0 + (isCapital($1) ? Int($1.asciiValue!) : 0) }\n \
    \                              ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979940
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    let upper = s.unicodeScalars.filter({\
    \ $0.value >= 65 && $0.value <= 90 })\n    return upper.reduce(0, +)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"\
    abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\"\
    ) == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\"\
    ) == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"\
    You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmp_1in21vu.swift:20:28: error: cannot convert value of type '(Int)\
    \ -> Int' to expected argument type '(Int, Unicode.Scalar) throws -> Int'\n  \
    \  return upper.reduce(0, +)\n                           ^\n"
  stdout: ''
  timestamp: 1659979940
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n  return s.reduce(0) { $0 + ($1.isUppercase\
    \ ? $1.asciiValue! : 0) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpiefgbp2g.swift:19:60: error: result values in '? :' expression\
    \ have mismatching types 'UInt8' and 'Int'\n  return s.reduce(0) { $0 + ($1.isUppercase\
    \ ? $1.asciiValue! : 0) }\n                                              ~~~~~~~~~~~~~^\n\
    \                                              Int(          )\n"
  stdout: ''
  timestamp: 1659979940
- exit_code: -4
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    let chars = Array(s)\n    var sum\
    \ = 0\n    for c in chars {\n        let char: Int = Int(String(c))!\n       \
    \ if (char >= 65 && char <= 90) {\n            sum += char\n        }\n    }\n\
    \    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\")\
    \ == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") ==\
    \ 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\")\
    \ == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: Exception
  stderr: 'tmpnxpi1u1h/tmpnxpi1u1h.swift:22: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b9b56524c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9b5621b561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b9b5621b286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b9b5621b13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b9b5621abb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpnxpi1u1h                        0x00005578465d1e78 <unavailable> + 7800

    6    tmpnxpi1u1h                        0x00005578465d16fc <unavailable> + 5884

    7    libc.so.6                          0x00002b9b56710460 __libc_start_main +
    245

    8    tmpnxpi1u1h                        0x00005578465d1359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1659979940
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.map { $0.isLetter && $0.isUppercase\
    \ ? $0.asciiValue! : 0 }.reduce(0, +)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s:\
    \ \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s:\
    \ \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s:\
    \ \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpi6ea8a7j.swift:19:50: error: cannot convert value of type 'UInt8'\
    \ to closure result type 'Int'\n    return s.map { $0.isLetter && $0.isUppercase\
    \ ? $0.asciiValue! : 0 }.reduce(0, +)\n                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n\
    \                   Int(                                              )\n"
  stdout: ''
  timestamp: 1659979940
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    let upperCases = s.filter{$0.isUppercase}\n\
    \    let num = upperCases.map{Int(Character($0).asciiValue!)}\n    return num.reduce(0,\
    \ +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s:\
    \ \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s:\
    \ \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s:\
    \ \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s:\
    \ \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpi8em8oq_.swift:20:44: error: missing argument label 'extendedGraphemeClusterLiteral:'\
    \ in call\n    let num = upperCases.map{Int(Character($0).asciiValue!)}\n    \
    \                                       ^\n                                  \
    \         extendedGraphemeClusterLiteral: \n"
  stdout: ''
  timestamp: 1659979940
- exit_code: -4
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    let sum = s.reduce(0) { $0 + ($1.isUppercase\
    \ ? $1.asciiValue! : 0) }\n    return Int(sum)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\n\
    assert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\n\
    assert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\n\
    assert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very\
    \ Smart\") == 327)"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659979940
- exit_code: -4
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for i in s {\n\
    \        let charCode = String(i.unicodeScalars.first!.value)\n        if charCode.contains(\"\
    65\") || charCode.contains(\"66\") || charCode.contains(\"67\") || charCode.contains(\"\
    68\") || charCode.contains(\"69\") || charCode.contains(\"70\") || charCode.contains(\"\
    71\") || charCode.contains(\"72\") || charCode.contains(\"73\") || charCode.contains(\"\
    74\") || charCode.contains(\"75\") || charCode.contains(\"76\") || charCode.contains(\"\
    77\") || charCode.contains(\"78\") || charCode.contains(\"79\") || charCode.contains(\"\
    80\") || charCode.contains(\"81\") || charCode.contains(\"82\") || charCode.contains(\"\
    83\") || charCode.contains(\"84\") || charCode.contains(\"85\") || charCode.contains(\"\
    86\") || charCode.contains(\"87\") || charCode.contains(\"88\") || charCode.contains(\"\
    89\") || charCode.contains(\"90\") {\n            sum += Int(charCode)!\n    \
    \    }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: Exception
  stderr: 'Swift/Substring.swift:316: Fatal error: String index is out of bounds

    Current stack trace:

    0    libswiftCore.so                    0x00002afa6daacc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afa6d7a3561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002afa6d7a3286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002afa6d7a313c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002afa6d7a2bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftCore.so                    0x00002afa6d8fde40 Substring.index(_:offsetBy:)
    + 880

    6    libswiftCore.so                    0x00002afa6d90285c <unavailable> + 2873436

    7    libswiftCore.so                    0x00002afa6d7cf920 Collection.formIndex(_:offsetBy:)
    + 116

    8    libswift_StringProcessing.so       0x00002afa6d48ab82 <unavailable> + 285570

    9    libswift_StringProcessing.so       0x00002afa6d489b2f <unavailable> + 281391

    10   libswift_StringProcessing.so       0x00002afa6d48aced <unavailable> + 285933

    11   libswift_StringProcessing.so       0x00002afa6d47042d <unavailable> + 177197

    12   libswift_StringProcessing.so       0x00002afa6d46e840 BidirectionalCollection<>.firstRange<A>(of:)
    + 1517

    13   libswift_StringProcessing.so       0x00002afa6d46ee70 StringProtocol.contains(_:)
    + 64

    14   tmp6cf9tkn6                        0x00005645ef4a6103 <unavailable> + 8451

    15   tmp6cf9tkn6                        0x00005645ef4a584c <unavailable> + 6220

    16   libc.so.6                          0x00002afa6dc98460 __libc_start_main +
    245

    17   tmp6cf9tkn6                        0x00005645ef4a54a9 <unavailable> + 5289

    '
  stdout: ''
  timestamp: 1659979940
- exit_code: 0
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.filter { $0.isUppercase\
    \ }.map { Int($0.asciiValue!) }.reduce(0, +)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\n\
    assert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\n\
    assert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\n\
    assert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very\
    \ Smart\") == 327)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979940
- exit_code: 0
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    s.filter { $0.isUppercase\
    \ }.forEach { sum += Int($0.asciiValue!) }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\")\
    \ == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\"\
    ) == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\"\
    ) == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"\
    You arE Very Smart\") == 327)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979940
- exit_code: -4
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.reduce(0) { (result, character)\
    \ -> Int in\n        var charCode = character.unicodeScalars.first!.value\n  \
    \      if charCode >= 97 {\n            charCode -= 32\n        }\n        return\
    \ result + Int(charCode)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: Exception
  stderr: 'tmp1zlwz3xn/tmp1zlwz3xn.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3d35e35c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3d35b2cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3d35b2c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3d35b2b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1zlwz3xn                        0x0000556841ae17dc <unavailable> + 6108

    5    libc.so.6                          0x00002b3d36021460 __libc_start_main +
    245

    6    tmp1zlwz3xn                        0x0000556841ae13b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1659979940
- exit_code: -4
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.unicodeScalars.reduce(0)\
    \ {\n        if $1.value > 96 && $1.value < 123 {\n            return $0 + Int($1.value)\n\
    \        } else {\n            return $0\n        }\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\")\
    \ == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\"\
    ) == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\"\
    ) == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"\
    You arE Very Smart\") == 327)"
  status: Exception
  stderr: 'tmp1l_ls7oe/tmp1l_ls7oe.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b61d6146c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b61d5e3db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b61d5e3d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b61d5e3c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1l_ls7oe                        0x0000561873fae67c <unavailable> + 5756

    5    libc.so.6                          0x00002b61d6332460 __libc_start_main +
    245

    6    tmp1l_ls7oe                        0x0000561873fae259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659979940
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.filter { $0.isUppercase\
    \ }.reduce(0) { $0 + Int($0.asciiValue!) }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\n\
    assert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\n\
    assert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\n\
    assert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very\
    \ Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmps2s5ligf.swift:19:50: error: contextual closure type '(Int, String.Element)\
    \ throws -> Int' (aka '(Int, Character) throws -> Int') expects 2 arguments, but\
    \ 1 was used in closure body\n    return s.filter { $0.isUppercase }.reduce(0)\
    \ { $0 + Int($0.asciiValue!) }\n                                             \
    \    ^\n/tmp/tmps2s5ligf.swift:19:64: error: value of type 'Int' has no member\
    \ 'asciiValue'\n    return s.filter { $0.isUppercase }.reduce(0) { $0 + Int($0.asciiValue!)\
    \ }\n                                                            ~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979939
- exit_code: -4
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s {\n\
    \        let char = String(c)\n        if char.uppercased() == char {\n      \
    \      sum += char.unicodeScalars.map{Int($0.value)}.reduce(0, +)\n        }\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: Exception
  stderr: 'tmpbmrm2nl0/tmpbmrm2nl0.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adb02d52c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adb02a49b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adb02a49988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adb02a487b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbmrm2nl0                        0x0000560caebd2c33 <unavailable> + 7219

    5    libc.so.6                          0x00002adb02f3e460 __libc_start_main +
    245

    6    tmpbmrm2nl0                        0x0000560caebd2479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1659979940
- exit_code: 0
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.reduce(0) { $0 + ($1.isUppercase\
    \ ? Int($1.asciiValue!) : 0) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979940
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.reduce(0) { $0 + ($1.isUppercase\
    \ ? $1.asciiValue! : 0) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpza3__hrb.swift:19:62: error: result values in '? :' expression\
    \ have mismatching types 'UInt8' and 'Int'\n    return s.reduce(0) { $0 + ($1.isUppercase\
    \ ? $1.asciiValue! : 0) }\n                                                ~~~~~~~~~~~~~^\n\
    \                                                Int(          )\n"
  stdout: ''
  timestamp: 1659979938
- exit_code: -4
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return Array(s.uppercased())\n \
    \       .filter({ $0.isUppercase })\n        .reduce(0, { $0 + Int(String($1).unicodeScalars.first!.value)\
    \ })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s:\
    \ \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s:\
    \ \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s:\
    \ \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s:\
    \ \"You arE Very Smart\") == 327)"
  status: Exception
  stderr: 'tmpuiu_91sr/tmpuiu_91sr.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b33a06b9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b33a03b0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b33a03b0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b33a03af7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuiu_91sr                        0x000055b50a89aa4c <unavailable> + 6732

    5    libc.so.6                          0x00002b33a08a5460 __libc_start_main +
    245

    6    tmpuiu_91sr                        0x000055b50a89a629 <unavailable> + 5673

    '
  stdout: ''
  timestamp: 1659979940
- exit_code: 0
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for char in s {\n\
    \        if let ascii = char.asciiValue, ascii >= 65, ascii <= 90 {\n        \
    \    sum += Int(ascii)\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\")\
    \ == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\"\
    ) == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\"\
    ) == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"\
    You arE Very Smart\") == 327)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979940
- exit_code: 0
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.filter { $0.isUppercase\
    \ }.map { Int($0.asciiValue!) }.reduce(0, +)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\n\
    assert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\n\
    assert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\n\
    assert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very\
    \ Smart\") == 327)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979940
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    s.forEach { char\
    \ in\n        if char.isLetter {\n            sum += char.asciiValue!\n      \
    \  }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpzr1yyu3u.swift:22:35: error: cannot convert value of type 'UInt8'\
    \ to expected argument type 'Int'\n            sum += char.asciiValue!\n     \
    \                             ^\n                   Int(            )\n"
  stdout: ''
  timestamp: 1659979940
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var total = 0\n    for char in s\
    \ {\n        if char.uppercased() == char {\n            total += Int(char.asciiValue!)\n\
    \        }\n    }\n    return total\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s:\
    \ \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s:\
    \ \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s:\
    \ \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmp43_ms_6j.swift:21:30: error: binary operator '==' cannot be applied\
    \ to operands of type 'String' and 'Character'\n        if char.uppercased() ==\
    \ char {\n           ~~~~~~~~~~~~~~~~~ ^  ~~~~\n/tmp/tmp43_ms_6j.swift:21:30:\
    \ note: overloads for '==' exist with these partially matching parameter lists:\
    \ (Character, Character), (String, String)\n        if char.uppercased() == char\
    \ {\n                             ^\n"
  stdout: ''
  timestamp: 1659979940
- exit_code: -4
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.filter { (\"A\"...\"Z\"\
    ).contains($0) }.map { Int(String($0))! }.reduce(0, +)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") ==\
    \ 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") ==\
    \ 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\"\
    ) == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"\
    You arE Very Smart\") == 327)"
  status: Exception
  stderr: 'tmpk5b0a4cv/tmpk5b0a4cv.swift:19: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002acba42c8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acba3fbf561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002acba3fbf286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002acba3fbf13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002acba3fbebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpk5b0a4cv                        0x000055727ff242a1 <unavailable> + 8865

    6    libswiftCore.so                    0x00002acba3fa7820 Collection.map<A>(_:)
    + 426

    7    tmpk5b0a4cv                        0x000055727ff23cff <unavailable> + 7423

    8    tmpk5b0a4cv                        0x000055727ff2375c <unavailable> + 5980

    9    libc.so.6                          0x00002acba44b4460 __libc_start_main +
    245

    10   tmpk5b0a4cv                        0x000055727ff233b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1659979940
- exit_code: 0
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.reduce(0) { $0 + ($1 >=\
    \ \"A\" && $1 <= \"Z\" ? Int($1.asciiValue!) : 0) }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") ==\
    \ 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") ==\
    \ 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\"\
    ) == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"\
    You arE Very Smart\") == 327)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979939
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for letter in s\
    \ {\n        if CharacterSet.uppercaseLetters.contains(Character(String(letter).unicodeScalars.first!))\
    \ {\n            sum += Int(String(letter).unicodeScalars.first!.value)\n    \
    \    }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmp57aiahr9.swift:21:12: error: cannot find 'CharacterSet' in scope\n\
    \        if CharacterSet.uppercaseLetters.contains(Character(String(letter).unicodeScalars.first!))\
    \ {\n           ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979940
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    guard !s.isEmpty else { return 0\
    \ }\n    return s.reduce(0) { result, ch in\n        if ch.isUppercase {\n   \
    \         return result + ch.unicodeScalars.first!.value\n        }\n        return\
    \ result\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\")\
    \ == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") ==\
    \ 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\")\
    \ == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpixudzd09.swift:22:54: error: cannot convert value of type 'UInt32'\
    \ to expected argument type 'Int'\n            return result + ch.unicodeScalars.first!.value\n\
    \                                                     ^\n                    \
    \        Int(                          )\n"
  stdout: ''
  timestamp: 1659979940
- exit_code: 0
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n  var sum = 0\n  for character in s.unicodeScalars\
    \ {\n    if character.value >= 65 && character.value <= 90 {\n      sum += Int(character.value)\n\
    \    }\n  }\n  return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979941
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    // your code\n    return s.compactMap{$0.asciiValue}.reduce(0,+)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"\
    abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\"\
    ) == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\"\
    ) == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"\
    You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpbs4hjiaw.swift:20:28: error: cannot convert value of type 'UInt8?'\
    \ to closure result type 'Int?'\n    return s.compactMap{$0.asciiValue}.reduce(0,+)\n\
    \                        ~~~^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979940
- exit_code: -4
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return Array(s.uppercased()).reduce(0)\
    \ {\n        let scalar = $1.unicodeScalars.first!\n        let val = Int(scalar.value)\n\
    \        if val > 64 && val < 91 {\n            return $0 + val\n        }\n \
    \       return $0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: Exception
  stderr: 'tmpghhezcm0/tmpghhezcm0.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab30400fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab303d06b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab303d06988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab303d057b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpghhezcm0                        0x0000561105f4a8dc <unavailable> + 6364

    5    libc.so.6                          0x00002ab3041fb460 __libc_start_main +
    245

    6    tmpghhezcm0                        0x0000561105f4a4b9 <unavailable> + 5305

    '
  stdout: ''
  timestamp: 1659979941
- exit_code: 0
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    guard !s.isEmpty else { return 0\
    \ }\n    var sum = 0\n    for char in s {\n        let asciiCode = Int(char.asciiValue!)\n\
    \        if asciiCode >= 65 && asciiCode <= 90 {\n            sum += asciiCode\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979941
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.unicodeScalars.reduce(0)\
    \ { $0 + ($1.isASCII && $1.isUppercase ? $1.value : 0) }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\")\
    \ == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\"\
    ) == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\"\
    ) == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"\
    You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpfvwq0k_2.swift:19:35: error: missing argument label 'into:' in\
    \ call\n    return s.unicodeScalars.reduce(0) { $0 + ($1.isASCII && $1.isUppercase\
    \ ? $1.value : 0) }\n                                  ^\n                   \
    \                into: \n/tmp/tmpfvwq0k_2.swift:19:29: error: cannot convert return\
    \ expression of type '(Int, _) -> Int' to return type 'Int'\n    return s.unicodeScalars.reduce(0)\
    \ { $0 + ($1.isASCII && $1.isUppercase ? $1.value : 0) }\n           ~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979940
- exit_code: 0
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    let upper = s.filter { $0.isUppercase\
    \ }\n    let digits = upper.unicodeScalars.map { Int($0.value) }\n    return digits.reduce(0,\
    \ +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s:\
    \ \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s:\
    \ \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s:\
    \ \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s:\
    \ \"You arE Very Smart\") == 327)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979941
- exit_code: 0
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.reduce(0) {\n        $1\
    \ >= \"A\" && $1 <= \"Z\" ? $0 + Int($1.asciiValue!) : $0\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"\
    abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\"\
    ) == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\"\
    ) == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"\
    You arE Very Smart\") == 327)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979940
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.unicodeScalars.reduce(0)\
    \ { $0 + ($1.isASCII && $1.isUppercase ? $1.value : 0) }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\")\
    \ == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\"\
    ) == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\"\
    ) == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"\
    You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpfvwq0k_2.swift:19:35: error: missing argument label 'into:' in\
    \ call\n    return s.unicodeScalars.reduce(0) { $0 + ($1.isASCII && $1.isUppercase\
    \ ? $1.value : 0) }\n                                  ^\n                   \
    \                into: \n/tmp/tmpfvwq0k_2.swift:19:29: error: cannot convert return\
    \ expression of type '(Int, _) -> Int' to return type 'Int'\n    return s.unicodeScalars.reduce(0)\
    \ { $0 + ($1.isASCII && $1.isUppercase ? $1.value : 0) }\n           ~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979940
- exit_code: 0
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for letter in s\
    \ {\n        let letterCode = Int(String(letter).unicodeScalars.first!.value)\n\
    \        if letterCode > 64 && letterCode < 91 {\n            sum += letterCode\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979941
- exit_code: 0
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    \n    var sum: Int = 0\n    \n \
    \   for char in s {\n        let charASCII = Int(String(char).unicodeScalars.first!.value)\n\
    \        if charASCII >= 65 && charASCII <= 90 {\n            sum += charASCII\n\
    \        }\n    }\n    \n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s:\
    \ \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s:\
    \ \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s:\
    \ \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979941
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.reduce(0) {\n        $1.isUppercase\
    \ ? $0 + $1.ascii : $0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(digitSum(s:\
    \ \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\"\
    ) == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\"\
    ) == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How\
    \ are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpc99t24de.swift:19:20: error: missing argument label 'into:' in\
    \ call\n    return s.reduce(0) {\n                   ^\n                    into:\
    \ \n/tmp/tmpc99t24de.swift:19:14: error: no 'reduce' candidates produce the expected\
    \ contextual result type 'Int'\n    return s.reduce(0) {\n             ^\nSwift.Sequence:3:28:\
    \ note: 'reduce(into:_:)' produces '(String, _) -> String', not the expected contextual\
    \ result type 'Int'\n    @inlinable public func reduce<Result>(into initialResult:\
    \ __owned Result, _ updateAccumulatingResult: (_ partialResult: inout Result,\
    \ Self.Element) throws -> ()) rethrows -> Result\n                           ^\n\
    Swift.Sequence:3:28: note: 'reduce(into:_:)' produces '(Duration, _) -> Duration',\
    \ not the expected contextual result type 'Int'\n    @inlinable public func reduce<Result>(into\
    \ initialResult: __owned Result, _ updateAccumulatingResult: (_ partialResult:\
    \ inout Result, Self.Element) throws -> ()) rethrows -> Result\n             \
    \              ^\nSwift.Sequence:3:28: note: 'reduce(into:_:)' produces '(Float16,\
    \ _) -> Float16', not the expected contextual result type 'Int'\n    @inlinable\
    \ public func reduce<Result>(into initialResult: __owned Result, _ updateAccumulatingResult:\
    \ (_ partialResult: inout Result, Self.Element) throws -> ()) rethrows -> Result\n\
    \                           ^\nSwift.Sequence:3:28: note: 'reduce(into:_:)' produces\
    \ '(Float, _) -> Float', not the expected contextual result type 'Int'\n    @inlinable\
    \ public func reduce<Result>(into initialResult: __owned Result, _ updateAccumulatingResult:\
    \ (_ partialResult: inout Result, Self.Element) throws -> ()) rethrows -> Result\n\
    \                           ^\nSwift.Sequence:3:28: note: 'reduce(into:_:)' produces\
    \ '(Double, _) -> Double', not the expected contextual result type 'Int'\n   \
    \ @inlinable public func reduce<Result>(into initialResult: __owned Result, _\
    \ updateAccumulatingResult: (_ partialResult: inout Result, Self.Element) throws\
    \ -> ()) rethrows -> Result\n                           ^\nSwift.Sequence:3:28:\
    \ note: 'reduce(into:_:)' produ"
  stdout: ''
  timestamp: 1659979940
- exit_code: -4
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var result = 0\n    s.forEach {\n\
    \        if String($0).uppercased() == String($0) {\n            result += Int(String($0).unicodeScalars.first!.value)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s:\
    \ \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\nassert(digitSum(s:\
    \ \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\nassert(digitSum(s:\
    \ \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very Smart\") == 327)"
  status: Exception
  stderr: 'tmpzj7q7h7k/tmpzj7q7h7k.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9ccb01bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9ccad12b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9ccad12988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9ccad117b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzj7q7h7k                        0x00005601973abc63 <unavailable> + 7267

    5    libc.so.6                          0x00002b9ccb207460 __libc_start_main +
    245

    6    tmpzj7q7h7k                        0x00005601973ab4a9 <unavailable> + 5289

    '
  stdout: ''
  timestamp: 1659979941
- exit_code: 0
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var result = 0\n    for char in\
    \ s {\n        let code = Int(char.asciiValue ?? 0)\n        if code >= 65 &&\
    \ code <= 90 {\n            result += code\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"\
    abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\"\
    ) == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\"\
    ) == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"\
    You arE Very Smart\") == 327)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979941
- exit_code: -4
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    let s = Array(s)\n    var sum =\
    \ 0\n    for c in s {\n        let x = Int(String(c))\n        if let x = x {\n\
    \            sum += x\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\")\
    \ == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\"\
    ) == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\"\
    ) == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"\
    You arE Very Smart\") == 327)"
  status: Exception
  stderr: 'tmp6bgva6df/tmp6bgva6df.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acf5b36fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acf5b066b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acf5b066988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acf5b0657b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6bgva6df                        0x0000557c341aa6dc <unavailable> + 5852

    5    libc.so.6                          0x00002acf5b55b460 __libc_start_main +
    245

    6    tmp6bgva6df                        0x0000557c341aa2b9 <unavailable> + 4793

    '
  stdout: ''
  timestamp: 1659979941
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.unicodeScalars.filter({\
    \ $0.value >= 65 && $0.value <= 90 }).reduce(0, +)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") ==\
    \ 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") ==\
    \ 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\"\
    ) == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"\
    You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpvisgvkow.swift:19:84: error: cannot convert value of type '(Int)\
    \ -> Int' to expected argument type '(Int, Unicode.Scalar) throws -> Int'\n  \
    \  return s.unicodeScalars.filter({ $0.value >= 65 && $0.value <= 90 }).reduce(0,\
    \ +)\n                                                                       \
    \            ^\n"
  stdout: ''
  timestamp: 1659979940
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.filter { $0.isUppercase\
    \ }.reduce(0) { $0 + Int($0.asciiValue ?? 0) }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\n\
    assert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\n\
    assert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\n\
    assert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very\
    \ Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpb7sv7u8h.swift:19:40: error: cannot convert return expression of\
    \ type '(_) -> _' to return type 'Int'\n    return s.filter { $0.isUppercase }.reduce(0)\
    \ { $0 + Int($0.asciiValue ?? 0) }\n           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpb7sv7u8h.swift:19:46: error: missing argument label 'into:' in call\n\
    \    return s.filter { $0.isUppercase }.reduce(0) { $0 + Int($0.asciiValue ??\
    \ 0) }\n                                             ^\n                     \
    \                         into: \n/tmp/tmpb7sv7u8h.swift:19:47: error: cannot\
    \ convert value of type 'Int' to expected argument type '(inout @escaping (_)\
    \ -> _, String.Element) throws -> ()' (aka '(inout @escaping (_) -> _, Character)\
    \ throws -> ()')\n    return s.filter { $0.isUppercase }.reduce(0) { $0 + Int($0.asciiValue\
    \ ?? 0) }\n                                              ^\n"
  stdout: ''
  timestamp: 1659979942
- exit_code: 1
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for c in s.unicodeScalars\
    \ {\n        if let d = c.wholeNumberValue {\n            if d >= 65 && d <= 90\
    \ {\n                sum += Int(d)\n            }\n        }\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(digitSum(s: \"\") == 0)\n\
    assert(digitSum(s: \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s:\
    \ \"helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s:\
    \ \"aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s:\
    \ \"You arE Very Smart\") == 327)"
  status: SyntaxError
  stderr: "/tmp/tmpr8m3ptxq.swift:21:22: error: value of type 'Unicode.Scalar' has\
    \ no member 'wholeNumberValue'\n        if let d = c.wholeNumberValue {\n    \
    \               ~ ^~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979941
- exit_code: 0
  program: "\n/// Task\n/// Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n///\
    \ >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>>\
    \ digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n///\
    \ >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n///\
    \ 153\nfunc digitSum(s: String) -> Int {\n    return s.filter { $0.isUppercase\
    \ }.map { Int($0.asciiValue!) }.reduce(0, +)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s: \"abAB\") == 131)\n\
    assert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"helloE\") == 69)\n\
    assert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"aAaaaXa\") == 153)\n\
    assert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s: \"You arE Very\
    \ Smart\") == 327)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979940
