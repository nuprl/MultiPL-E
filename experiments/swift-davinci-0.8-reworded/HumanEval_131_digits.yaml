name: HumanEval_131_digits
language: swift
prompt: "\n/// Given a positive integer n, return the product of the odd digits.\n\
  /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(n: 1)\n///\
  \ 1\n/// >>> digits(n: 4)\n/// 0\n/// >>> digits(n: 235)\n/// 15\nfunc digits(n:\
  \ Int) -> Int {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(digits(n: 5) == 5)\nassert(digits(n: 54)\
  \ == 5)\nassert(digits(n: 120) == 1)\nassert(digits(n: 5014) == 5)\nassert(digits(n:\
  \ 98765) == 315)\nassert(digits(n: 5576543) == 2625)\nassert(digits(n: 2468) ==\
  \ 0)"
completions: ["    \n    if n / 10 == 0 {\n        return n % 2 == 0 ? 0 : n\n   \
    \ }\n    \n    return (n % 10 % 2 == 0 ? 0 : n % 10) * digits(n: n / 10)", " \
    \   var product = 1\n    var remainder = n\n    while remainder > 0 {\n      \
    \  let lastDigit = remainder % 10\n        if lastDigit % 2 != 0 {\n         \
    \   product *= lastDigit\n        }\n        remainder /= 10\n    }\n    return\
    \ product", "    let temp = Array(String(n))\n    var ans = 1\n    for s in temp\
    \ {\n        let n = Int(String(s))!\n        if n % 2 == 1 {\n            ans\
    \ *= n\n        }\n    }\n    return ans", "    let nString = String(n)\n    var\
    \ nArray = Array(nString)\n    var oddDigits = [Int]()\n    for num in nArray\
    \ {\n        let numInt = Int(String(num))\n        if numInt! % 2 != 0 {\n  \
    \          oddDigits.append(numInt!)\n        }\n    }\n    if oddDigits.count\
    \ == 0 {\n        return 0\n    }\n    var prod = 1\n    for num in oddDigits\
    \ {\n        prod *= num\n    }\n    return prod", "    var m = n\n    var result\
    \ = 1\n    while m > 0 {\n        let d = m % 10\n        if d % 2 == 1 {\n  \
    \          result *= d\n        }\n        m /= 10\n    }\n    return result",
  "    var product = 1\n    for number in n.description {\n        guard let x = Int(String(number))\
    \ else {\n            return 0\n        }\n        if x % 2 != 0 {\n         \
    \   product *= x\n        }\n    }\n    return product", "  var n = n\n  var product\
    \ = 1\n  while n > 0 {\n    let digit = n % 10\n    if digit % 2 != 0 {\n    \
    \  product *= digit\n    }\n    n /= 10\n  }\n  return product", "    var result\
    \ = 1\n    var n = n\n    while n > 0 {\n        let lastDigit = n % 10\n    \
    \    if lastDigit % 2 != 0 {\n            result *= lastDigit\n        }\n   \
    \     n /= 10\n    }\n    return result", "    var number = n\n    var product\
    \ = 1\n    while number > 0 {\n        let digit = number % 10\n        if digit\
    \ % 2 != 0 {\n            product *= digit\n        }\n        number /= 10\n\
    \    }\n    return product", "    guard n > 0 else { return 0 }\n    var num =\
    \ n\n    var total = 1\n    while num > 0 {\n        let digit = num % 10\n  \
    \      if digit % 2 != 0 {\n            total *= digit\n        }\n        num\
    \ /= 10\n    }\n    return total", '    return (1...n).reduce(1) { $0 * ($1 %
    2 == 0 ? 1 : $1) }', "    var product = 1\n    var number = n\n    while number\
    \ > 0 {\n        let digit = number % 10\n        if digit % 2 != 0 {\n      \
    \      product *= digit\n        }\n        number /= 10\n    }\n    return product",
  "    var product = 1\n    for c in String(n) {\n        if let d = Int(String(c))\
    \ {\n            if d % 2 != 0 {\n                product *= d\n            }\n\
    \        }\n    }\n    return product", '    return 0', "    var result = 1\n\
    \    var n = n\n    while n > 0 {\n        let digit = n % 10\n        if digit\
    \ % 2 != 0 {\n            result *= digit\n        }\n        n /= 10\n    }\n\
    \    return result", "  guard n > 0 else { return 0 }\n  return n % 10 % 2 ==\
    \ 1 ? n % 10 * digits(n: n / 10) : digits(n: n / 10)", "  var number = n\n  var\
    \ result = 1\n  while number > 0 {\n    let current = number % 10\n    if current\
    \ % 2 != 0 {\n      result *= current\n    }\n    number /= 10\n  }\n  return\
    \ result", "    var result = 1\n    var number = n\n    while number > 0 {\n \
    \       let digit = number % 10\n        if digit % 2 != 0 {\n            result\
    \ *= digit\n        }\n        number /= 10\n    }\n    return result", '    return
    0', '    return 0', "    let str = String(n)\n    var total = 1\n    for s in\
    \ str {\n        if let n = Int(String(s)) {\n            if n % 2 != 0 {\n  \
    \              total *= n\n            }\n        }\n    }\n    return total",
  '    return n.digits.filter { $0.isOdd }.reduce(1, *)', "    var result = 1\n  \
    \  for char in \"\\(n)\".characters {\n        if let digit = Int(\"\\(char)\"\
    ) {\n            if digit % 2 != 0 {\n                result *= digit\n      \
    \      }\n        }\n    }\n    return result", "    var n = n\n    var product\
    \ = 1\n    while n > 0 {\n        let d = n % 10\n        if d % 2 == 1 {\n  \
    \          product *= d\n        }\n        n /= 10\n    }\n    return product",
  "    var product = 1\n    var currentValue = n\n    while currentValue > 0 {\n \
    \       let lastDigit = currentValue % 10\n        if lastDigit % 2 != 0 {\n \
    \           product *= lastDigit\n        }\n        currentValue /= 10\n    }\n\
    \    return product", "    var product = 1\n    var number = n\n    while number\
    \ > 0 {\n        let digit = number % 10\n        if digit % 2 != 0 {\n      \
    \      product *= digit\n        }\n        number /= 10\n    }\n    return product",
  "    if n == 0 {\n        return 0\n    }\n    let d = n % 10\n    if d % 2 == 0\
    \ {\n        return digits(n: n / 10)\n    }\n    return d * digits(n: n / 10)",
  "    let n = n\n    let str = String(n)\n    let nums = str.map { Int(String($0))!\
    \ }\n    let oddNums = nums.filter { $0 % 2 != 0 }\n    if oddNums.count == 0\
    \ {\n        return 0\n    }\n    return oddNums.reduce(1, *)", "    var product\
    \ = 1\n    for d in String(n) {\n        if let digit = Int(String(d)) {\n   \
    \         if digit % 2 != 0 {\n                product *= digit\n            }\n\
    \        }\n    }\n    return product", "    if n == 0 {\n        return 0\n \
    \   }\n    if n % 2 == 1 {\n        return n % 10 * digits(n: n / 10)\n    }\n\
    \    return digits(n: n / 10)", '    return 0', "    \n    // YOUR CODE HERE\n\
    \    \n    return 0", "    guard n > 0 else { return 0 }\n    let nums = String(n).flatMap\
    \ { $0.wholeNumberValue }\n    return nums.filter { $0 % 2 != 0 }.reduce(1, *)",
  "    var p = 1\n    for i in String(n) {\n        if i.wholeNumberValue?.isMultiple(of:\
    \ 2) == false {\n            p *= i.wholeNumberValue!\n        }\n    }\n    return\
    \ p", "    if n == 0 {\n        return 0\n    }\n    return n % 10 * digits(n:\
    \ n / 10)", "    var result = 1\n    var n = n\n    while n > 0 {\n        let\
    \ digit = n % 10\n        if digit % 2 != 0 {\n            result *= digit\n \
    \       }\n        n /= 10\n    }\n    return result", "    var result = 1\n \
    \   var num = n\n    while num > 0 {\n        let digit = num % 10\n        if\
    \ digit % 2 != 0 {\n            result *= digit\n        }\n        num /= 10\n\
    \    }\n    return result", "    if n < 10 {\n        return n\n    }\n    let\
    \ digit = n % 10\n    if digit.isMultiple(of: 2) {\n        return digits(n: n\
    \ / 10)\n    }\n    return digit * digits(n: n / 10)", '    let numb', "    var\
    \ n = n\n    var product = 1\n    while n > 0 {\n        let digit = n % 10\n\
    \        if digit % 2 != 0 {\n            product *= digit\n        }\n      \
    \  n /= 10\n    }\n    return product", "    let n = String(n)\n    let arr =\
    \ n.compactMap{Int(String($0))}\n    let result = arr.filter{$0 % 2 != 0}\n  \
    \  return result.isEmpty ? 0 : result.reduce(1, *)", "    if n == 0 {\n      \
    \  return 0\n    } else {\n        let lastDigit = n % 10\n        if lastDigit\
    \ % 2 == 0 {\n            return digits(n: n / 10)\n        } else {\n       \
    \     return lastDigit * digits(n: n / 10)\n        }\n    }", "    var m = n\n\
    \    var product = 1\n    var digit = 0\n    while m > 0 {\n        digit = m\
    \ % 10\n        if digit % 2 != 0 {\n            product *= digit\n        }\n\
    \        m /= 10\n    }\n    return product", "    if n == 0 {\n        return\
    \ 0\n    }\n    var m = n\n    var d = 1\n    while m > 0 {\n        let digit\
    \ = m % 10\n        if digit % 2 == 1 {\n            d *= digit\n        }\n \
    \       m /= 10\n    }\n    return d", "    let numbers = String(n).flatMap {\
    \ Int(String($0)) }\n    return numbers.filter { $0 % 2 != 0 }.reduce(1, *)",
  "    var result = 1\n    for digit in \"\\(n)\".map({Int(String($0))!}) {\n    \
    \    if digit % 2 != 0 {\n            result *= digit\n        }\n    }\n    return\
    \ result", "    var prod = 1\n    for char in String(n) {\n        let x = Int(String(char))!\n\
    \        if x%2 != 0 {\n            prod *= x\n        }\n    }\n    return prod",
  "    var product = 1\n    var n = n\n    while n > 0 {\n        let lastDigit =\
    \ n % 10\n        if lastDigit % 2 != 0 {\n            product *= lastDigit\n\
    \        }\n        n /= 10\n    }\n    return product", "  var result = 1\n \
    \ for c in String(n) {\n    if let d = Int(String(c)) {\n      if d % 2 != 0 {\n\
    \        result *= d\n      }\n    }\n  }\n  return result", "  var result = 1\n\
    \  for i in String(n) {\n    if Int(String(i))! % 2 != 0 {\n      result *= Int(String(i))!\n\
    \    }\n  }\n  return result", "    var result = 1\n    for digit in String(n)\
    \ {\n        if let number = Int(String(digit)) {\n            if number % 2 !=\
    \ 0 {\n                result *= number\n            }\n        }\n    }\n   \
    \ return result", '    return Int(String(n).filter{ $0.isOdd }.reduce("") { (String($1),
    String($0)) }) ?? 0', "    let numberString = String(n)\n    var product = 1\n\
    \    for digit in numberString {\n        let intValue = Int(String(digit))!\n\
    \        if intValue % 2 != 0 {\n            product *= intValue\n        }\n\
    \    }\n    return product", "    guard n > 0 else { return 0 }\n    var num =\
    \ n\n    var multi = 1\n    while num > 0 {\n        let digit = num % 10\n  \
    \      if digit % 2 != 0 {\n            multi *= digit\n        }\n        num\
    \ /= 10\n    }\n    return multi", "    var result = 1\n    for d in String(n)\
    \ {\n        let digit = Int(String(d))!\n        if digit % 2 != 0 {\n      \
    \      result *= digit\n        }\n    }\n    return result", "    var x = n\n\
    \    var result = 1\n    while x > 0 {\n        let last = x % 10\n        if\
    \ last % 2 != 0 {\n            result *= last\n        }\n        x /= 10\n  \
    \  }\n    return result", "    var n = n\n    var total = 1\n    while n > 0 {\n\
    \        let lastDigit = n % 10\n        if lastDigit % 2 != 0 {\n           \
    \ total *= lastDigit\n        }\n        n /= 10\n    }\n    return total", " \
    \   var result = 1\n    var n = n\n    while n > 0 {\n        let digit = n %\
    \ 10\n        if digit % 2 != 0 {\n            result *= digit\n        }\n  \
    \      n /= 10\n    }\n    return result", "    guard n > 0 else {\n        return\
    \ 0\n    }\n    return digits(n: n / 10) * (n % 2 == 0 ? 1 : n % 10)", "    var\
    \ p = 1\n    for c in \"\\(n)\".characters {\n        if let d = Int(\"\\(c)\"\
    ) {\n            if d % 2 == 1 {\n                p *= d\n            }\n    \
    \    }\n    }\n    return p", "    var digit = 0\n    for i in String(n) {\n \
    \       let intValue = Int(String(i))!\n        if intValue % 2 != 0 {\n     \
    \       digit *= intValue\n        }\n    }\n    return digit", "    let str =\
    \ String(n)\n    let ar = Array(str)\n    var res = 1\n    for elem in ar {\n\
    \        if let int = Int(String(elem)) {\n            if int % 2 != 0 {\n   \
    \             res *= int\n            }\n        }\n    }\n    return res", " \
    \ var product = 1\n  for digit in String(n) {\n    if Int(String(digit))! % 2\
    \ != 0 {\n      product *= Int(String(digit))!\n    }\n  }\n  return product",
  "    let numbers = String(n).compactMap { Int(String($0)) }\n    var result = 1\n\
    \    for number in numbers {\n        if number % 2 != 0 {\n            result\
    \ *= number\n        }\n    }\n    return result", "    var mult = 1\n    var\
    \ a = n\n    while a > 0 {\n        let remainder = a % 10\n        if remainder\
    \ % 2 != 0 {\n            mult *= remainder\n        }\n        a /= 10\n    }\n\
    \    return mult", '    return 0', "    var prod = 1\n    for i in String(n) {\n\
    \        if Int(String(i))! % 2 != 0 {\n            prod *= Int(String(i))!\n\
    \        }\n    }\n    return prod", "    var result = 1\n    var tmp = n\n  \
    \  while tmp > 0 {\n        let digit = tmp % 10\n        if digit % 2 != 0 {\n\
    \            result *= digit\n        }\n        tmp /= 10\n    }\n    return\
    \ result", "    var product = 1\n    var dividend = n\n    while dividend > 0\
    \ {\n        let remainder = dividend % 10\n        if remainder % 2 != 0 {\n\
    \            product *= remainder\n        }\n        dividend /= 10\n    }\n\
    \    return product", "    var sum = 1\n    var num = n\n    while num > 0 {\n\
    \        let digit = num % 10\n        if digit % 2 != 0 {\n            sum *=\
    \ digit\n        }\n        num /= 10\n    }\n    return sum", "    guard n >\
    \ 0 else { return 0 }\n    guard n % 2 != 0 else { return 0 }\n    let lastDigit\
    \ = n % 10\n    return lastDigit * digits(n: n / 10)", "    var result = 1\n \
    \   let str = String(n)\n    for letter in str {\n        if letter.isNumber {\n\
    \            let value = Int(String(letter))!\n            if value % 2 != 0 {\n\
    \                result *= value\n            }\n        }\n    }\n    return\
    \ result", '    return 0', "    guard n > 0 else { return 0 }\n    var remaining\
    \ = n\n    var product = 1\n    while remaining > 0 {\n        let digit = remaining\
    \ % 10\n        remaining /= 10\n        if digit % 2 != 0 {\n            product\
    \ *= digit\n        }\n    }\n    return product", "    var result = 1\n    for\
    \ c in String(n) {\n        let int = Int(String(c))!\n        if int % 2 != 0\
    \ {\n            result *= int\n        }\n    }\n    return result", "    if\
    \ n < 10 {\n        return n\n    }\n    let n = n % 10\n    if n % 2 == 0 {\n\
    \        return digits(n: n)\n    }\n    return n * digits(n: n)", "    if n <\
    \ 10 {\n        return n % 2 == 0 ? 0 : n\n    }\n    let lastDigit = n % 10\n\
    \    return lastDigit % 2 == 0 ? digits(n: n / 10) : lastDigit * digits(n: n /\
    \ 10)", "    if n == 0 {\n        return 0\n    }\n    let digit = n % 10\n  \
    \  if digit % 2 == 0 {\n        return digits(n: n / 10)\n    }\n    return digit\
    \ * digits(n: n / 10)", "    var n = n\n    var result = 1\n    var rem: Int\n\
    \    repeat {\n        rem = n % 10\n        if rem % 2 != 0 {\n            result\
    \ *= rem\n        }\n        n /= 10\n    } while n > 0\n    return result", " \
    \   var digit = 1\n    var sum = 0\n    while n > 0 {\n        let lastDigit =\
    \ n % 10\n        if lastDigit % 2 != 0 {\n            sum += lastDigit\n    \
    \    }\n        digit *= lastDigit\n        n /= 10\n    }\n    return digit",
  "    var number = n\n    var total = 1\n    while number > 0 {\n        let digit\
    \ = number % 10\n        if digit % 2 != 0 {\n            total *= digit\n   \
    \     }\n        number /= 10\n    }\n    return total", "    let ns = String(n)\n\
    \    let arrayOfChars = ns.map{$0}\n    var odd = 0\n    for char in arrayOfChars\
    \ {\n        if char != \"0\" && Int(String(char))! % 2 != 0 {\n            odd\
    \ = odd * Int(String(char))!\n        }\n    }\n    return odd", "    var product\
    \ = 1\n    for char in String(n) {\n        if let digit = Int(String(char)) {\n\
    \            if digit % 2 != 0 {\n                product *= digit\n         \
    \   }\n        }\n    }\n    return product", "    let digits = String(n).map\
    \ { $0.wholeNumberValue ?? 0 }\n    var result = 1\n    for digit in digits {\n\
    \        if digit % 2 != 0 {\n            result *= digit\n        }\n    }\n\
    \    return result", "    var result = 1\n    for char in String(n) {\n      \
    \  if Int(String(char))! % 2 != 0 {\n            result *= Int(String(char))!\n\
    \        }\n    }\n    return result", "    let numberStr = String(n)\n    var\
    \ result = 1\n    for digit in numberStr {\n        if digit % 2 != 0 {\n    \
    \        result *= Int(String(digit))!\n        }\n    }\n    return result",
  "    let digitList = n.digits\n    let oddDigits = digitList.filter({ $0 % 2 !=\
    \ 0 })\n    return oddDigits.reduce(1, *)", "    var product = 1\n    var number\
    \ = n\n    while number > 0 {\n        let digit = number % 10\n        if digit\
    \ % 2 != 0 {\n            product *= digit\n        }\n        number /= 10\n\
    \    }\n    return product", "    var n = n\n    var res = 1\n    while n > 0\
    \ {\n        let digit = n % 10\n        if digit % 2 != 0 {\n            res\
    \ *= digit\n        }\n        n /= 10\n    }\n    return res", "    let str =\
    \ String(n)\n    var result = 1\n    for i in str {\n        if (Int(String(i))!\
    \ % 2) != 0 {\n            result *= Int(String(i))!\n        }\n    }\n    return\
    \ result", "  if n < 10 {\n    return n % 2 == 0 ? 0 : n\n  }\n  return (n % 10\
    \ % 2 == 0 ? 0 : n % 10) * digits(n: n / 10)", "    var result = 1\n    var product\
    \ = 1\n    while result != 0 {\n        result = n % 10\n        if result % 2\
    \ != 0 {\n            product *= result\n        }\n        n /= 10\n    }\n \
    \   return product", "    var product = 1\n    var value = n\n    while value\
    \ > 0 {\n        let digit = value % 10\n        if digit % 2 != 0 {\n       \
    \     product *= digit\n        }\n        value /= 10\n    }\n    return product",
  "    var product = 1\n    var num = n\n    while num > 0 {\n        let lastDigit\
    \ = num % 10\n        if lastDigit % 2 != 0 {\n            product *= lastDigit\n\
    \        }\n        num /= 10\n    }\n    return product", '    return 0', '    return
    0', "    var oddDigits = 1\n    var n = n\n    while n > 0 {\n        let lastDigit\
    \ = n % 10\n        if lastDigit % 2 != 0 {\n            oddDigits *= lastDigit\n\
    \        }\n        n /= 10\n    }\n    return oddDigits", "    var product =\
    \ 1\n    for char in \"\\(n)\".unicodeScalars {\n        let int = Int(String(char))!\n\
    \        if int % 2 != 0 {\n            product *= int\n        }\n    }\n   \
    \ return product", "    var product = 1\n    var tempN = n\n    while tempN >\
    \ 0 {\n        let digit = tempN % 10\n        if digit % 2 != 0 {\n         \
    \   product *= digit\n        }\n        tempN /= 10\n    }\n    return product",
  "    var n = n\n    var total = 1\n    while n > 0 {\n        let digit = n % 10\n\
    \        if digit % 2 != 0 {\n            total *= digit\n        }\n        n\
    \ /= 10\n    }\n    return total", "    var result = 1\n    for digit in String(n)\
    \ {\n        if Int(String(digit))! % 2 != 0 {\n            result *= Int(String(digit))!\n\
    \        }\n    }\n    return result", '  return n.digits.filter { $0.isOdd }.reduce(1,
    *)', '    return 0', "    var arr = [Int]()\n    var sum = 1\n    var num = n\n\
    \    while num > 0 {\n        arr.append(num % 10)\n        num /= 10\n    }\n\
    \    arr = arr.reversed()\n    for item in arr {\n        if item % 2 != 0 {\n\
    \            sum *= item\n        }\n    }\n    return sum", "    var m = n\n\
    \    var result = 1\n    while m > 0 {\n        let digit = m % 10\n        if\
    \ digit % 2 != 0 {\n            result *= digit\n        }\n        m /= 10\n\
    \    }\n    return result", "    var num = n\n    var sum = 1\n    while num >\
    \ 0 {\n        let dig = num % 10\n        if dig % 2 != 0 {\n            sum\
    \ *= dig\n        }\n        num /= 10\n    }\n    return sum", "    var answer\
    \ = 1\n    var remainder = n\n    while remainder > 0 {\n        let digit = remainder\
    \ % 10\n        if digit % 2 != 0 {\n            answer *= digit\n        }\n\
    \        remainder /= 10\n    }\n    return answer", "    var product = 1\n  \
    \  var evens = 0\n    var copy = n\n    while copy > 0 {\n        let digit =\
    \ copy % 10\n        if digit == 0 {\n            evens += 1\n        } else if\
    \ digit % 2 == 0 {\n            evens += 1\n        } else {\n            product\
    \ *= digit\n        }\n        copy /= 10\n    }\n    if evens == 0 {\n      \
    \  return product\n    } else {\n        return 0\n    }", "    if n == 0 {\n\
    \        return 0\n    }\n    return (n % 10 % 2 == 1 ? n % 10 : 1) * digits(n:\
    \ n / 10)", "    var result = 1\n    for i in \"\\(n)\".compactMap({ Int(String($0))\
    \ }) {\n        result *= i % 2 == 0 ? 1 : i\n    }\n    return result", "  var\
    \ oddProduct = 1\n  for digit in String(n) {\n    guard let value = Int(String(digit))\
    \ else { continue }\n    if value % 2 != 0 {\n      oddProduct *= value\n    }\n\
    \  }\n  return oddProduct", "    let stringified = String(n)\n    var product\
    \ = 1\n    for character in stringified {\n        if let value = Int(String(character))\
    \ {\n            if value % 2 != 0 {\n                product *= value\n     \
    \       }\n        }\n    }\n    return product", "    var result = 1\n    var\
    \ num = n\n    while num > 0 {\n        let digit = num % 10\n        if digit\
    \ % 2 != 0 {\n            result *= digit\n        }\n        num /= 10\n    }\n\
    \    return result", "    var digits: [Int] = []\n    var product = 1\n    for\
    \ digit in String(n) {\n        if let n = Int(String(digit)) {\n            digits.append(n)\n\
    \        }\n    }\n    for n in digits {\n        if n % 2 != 0 {\n          \
    \  product *= n\n        }\n    }\n    return product == 1 ? 0 : product", " \
    \   var product = 1\n    for i in String(n) {\n        if let intValue = Int(String(i))\
    \ {\n            if intValue % 2 != 0 {\n                product *= intValue\n\
    \            }\n        }\n    }\n    return product", "    var product = 1\n\
    \    let digits = Array(String(n))\n    for digit in digits {\n        if let\
    \ int = Int(String(digit)) {\n            if int % 2 != 0 {\n                product\
    \ *= int\n            }\n        }\n    }\n    return product", "    var result\
    \ = 1\n    for c in String(n) {\n        if Int(String(c))! % 2 != 0 {\n     \
    \       result *= Int(String(c))!\n        }\n    }\n    return result", '  return
    0', "    var number = n\n    var result = 1\n    while number > 0 {\n        let\
    \ digit = number % 10\n        if digit % 2 != 0 {\n            result *= digit\n\
    \        }\n        number /= 10\n    }\n    return result", "    var result =\
    \ 1\n    for digit in String(n) {\n        if let value = Int(String(digit)) {\n\
    \            if value % 2 != 0 {\n                result *= value\n          \
    \  }\n        }\n    }\n    return result", "    if n < 10 {\n        return n\
    \ % 2 == 0 ? 0 : n\n    }\n    return (n % 10 % 2 == 0 ? 0 : n % 10) * digits(n:\
    \ n / 10)", "    let n = abs(n)\n    return (n < 10) ? ((n % 2 == 0) ? 0 : n)\
    \ : ((n % 10) % 2 == 0) ? 0 : digits(n: n / 10) * (n % 10)", "    let digits =\
    \ String(n).compactMap { Int(String($0)) }\n    return digits.filter { $0 % 2\
    \ != 0 }.reduce(1, *)", "    var n = n\n    var product = 1\n    while n > 0 {\n\
    \        let d = n % 10\n        if d % 2 == 1 {\n            product *= d\n \
    \       }\n        n /= 10\n    }\n    return product", "    guard n > 0 else\
    \ { return 0 }\n    return n % 10 * digits(n: n / 10)", "    if n <= 0 {\n   \
    \     return 0\n    }\n    let digit = n % 10\n    let nextNumber = n / 10\n \
    \   let result = digits(n: nextNumber)\n    if digit % 2 == 0 {\n        return\
    \ result\n    }\n    if result == 0 {\n        return digit\n    }\n    return\
    \ result * digit", "    var product = 1\n    var working = n\n    while working\
    \ > 0 {\n        let digit = working % 10\n        if digit % 2 != 0 {\n     \
    \       product *= digit\n        }\n        working /= 10\n    }\n    return\
    \ product", "    let n = n\n    var sum = 1\n    for i in n.digits {\n       \
    \ if i % 2 != 0 {\n            sum *= i\n        }\n    }\n    return sum", " \
    \ var answer = 1\n  var m = n\n  while m > 0 {\n    let digit = m % 10\n    if\
    \ digit % 2 == 1 {\n      answer *= digit\n    }\n    m /= 10\n  }\n  return answer",
  "    let arr = String(n).compactMap{Int(String($0))}\n    var product = 1\n    for\
    \ i in arr {\n        if i % 2 != 0 {\n            product *= i\n        }\n \
    \   }\n    return product", "    var product = 1\n    for c in String(n) {\n \
    \       if let int = Int(String(c)) {\n            if int % 2 != 0 {\n       \
    \         product *= int\n            }\n        }\n    }\n    return product",
  "    let nStr = String(n)\n    let nStrArr = Array(nStr)\n    var sum: Int = 1\n\
    \    for i in nStrArr {\n        if i.isOddNumber() {\n            sum *= Int(String(i))!\n\
    \        }\n    }\n    return sum", "  var output = 1\n  var x = n\n  while x\
    \ > 0 {\n    let digit = x % 10\n    if digit % 2 != 0 {\n      output *= digit\n\
    \    }\n    x /= 10\n  }\n  return output", "  var odd: Int = 1\n  var num = n\n\
    \  while num > 0 {\n    let digit = num % 10\n    if digit % 2 != 0 {\n      odd\
    \ *= digit\n    }\n    num /= 10\n  }\n  return odd", "    var sum = 1\n    for\
    \ char in String(n) {\n        if let number = Int(String(char)) {\n         \
    \   if number % 2 != 0 {\n                sum *= number\n            }\n     \
    \   }\n    }\n    return sum", "    if n < 10 {\n        return n\n    }\n   \
    \ var number = n\n    var sum = 1\n    while number > 0 {\n        let mod = number\
    \ % 10\n        if mod % 2 != 0 {\n            sum *= mod\n        }\n       \
    \ number /= 10\n    }\n    return sum", "    var product = 1\n    var num = n\n\
    \    while num > 0 {\n        let digit = num % 10\n        if digit % 2 != 0\
    \ {\n            product *= digit\n        }\n        num /= 10\n    }\n    return\
    \ product", "    var n = n\n    var result = 1\n    while n > 0 {\n        let\
    \ digit = n % 10\n        if digit % 2 != 0 {\n            result *= digit\n \
    \       }\n        n /= 10\n    }\n    return result", "  var num = n\n  var res\
    \ = 1\n  while num > 0 {\n    let d = num % 10\n    if d % 2 != 0 {\n      res\
    \ *= d\n    }\n    num /= 10\n  }\n  return res", '  return 1', "    var digitsArray\
    \ = [Int]()\n    var digitsProduct = 1\n    var n = n\n    while n > 0 {\n   \
    \     digitsArray.append(n % 10)\n        n /= 10\n    }\n    for i in digitsArray\
    \ {\n        if i % 2 != 0 {\n            digitsProduct *= i\n        }\n    }\n\
    \    return digitsProduct", '    return 0', "    let numbers = String(n).map {\
    \ Int(String($0))! }\n    let products = numbers.filter { $0 % 2 != 0 }\n    if\
    \ products.count == 0 {\n        return 0\n    }\n    return products.reduce(1,\
    \ *)", "    var product = 1\n    var temp = n\n    while temp > 0 {\n        let\
    \ digit = temp % 10\n        if digit % 2 != 0 {\n            product *= digit\n\
    \        }\n        temp /= 10\n    }\n    return product", '    return 0', " \
    \   var total = 1\n    var digits = n.digits.reversed()\n    while digits.count\
    \ > 0 {\n        let digit = digits.removeFirst()\n        if digit % 2 == 1 {\n\
    \            total *= digit\n        }\n    }\n    return total", "    var sum\
    \ = 1\n    for i in n.description {\n        if let digit = Int(String(i)) {\n\
    \            if digit % 2 != 0 {\n                sum *= digit\n            }\n\
    \        }\n    }\n    return sum", "    guard n > 0 else { return 0 }\n    let\
    \ numberToArray = Array(String(n))\n    var oddNumbers: [Int] = []\n    for i\
    \ in numberToArray {\n        if let number = Int(String(i)) {\n            if\
    \ number % 2 != 0 {\n                oddNumbers.append(number)\n            }\n\
    \        }\n    }\n    if oddNumbers.count == 0 {\n        return 0\n    }\n \
    \   return oddNumbers.reduce(1, *)", "    if n == 0 {\n        return 0\n    }\n\
    \    let lastDigit = n % 10\n    if lastDigit % 2 == 0 {\n        return digits(n:\
    \ n / 10)\n    }\n    return lastDigit * digits(n: n / 10)", "    guard n > 0\
    \ else { return 0 }\n    return n % 10 * digits(n: n / 10)", "    var product\
    \ = 1\n    for digit in String(n) {\n        if let number = Int(String(digit))\
    \ {\n            if number % 2 != 0 {\n                product *= number\n   \
    \         }\n        }\n    }\n    return product", "    let digits = String(n).compactMap{Int(String($0))}\n\
    \    let odds = digits.filter{$0 % 2 != 0}\n    return odds.reduce(1, *)", " \
    \   let toString = String(n)\n    var product = 1\n    var firstOddFound = false\n\
    \    for char in toString {\n        if let charInt = Int(String(char)) {\n  \
    \          if charInt % 2 != 0 {\n                product *= charInt\n       \
    \         firstOddFound = true\n            }\n        }\n    }\n    if firstOddFound\
    \ {\n        return product\n    } else {\n        return 0\n    }", "    let\
    \ n = n\n    return n", "    \n    var num = n\n    var product = 1\n    \n  \
    \  while num > 0 {\n        let digit = num % 10\n        if digit % 2 != 0 {\n\
    \            product *= digit\n        }\n        num /= 10\n    }\n    \n   \
    \ return product", "    var sum = 1\n    var nCopy = n\n    while nCopy > 0 {\n\
    \        let tmp = nCopy % 10\n        if tmp % 2 != 0 {\n            sum *= tmp\n\
    \        }\n        nCopy /= 10\n    }\n    return sum", "    \n    return 0",
  "    var product = 1\n    var number = n\n    while number > 0 {\n        let digit\
    \ = number % 10\n        if digit % 2 != 0 {\n            product *= digit\n \
    \       }\n        number /= 10\n    }\n    return product", "    guard n > 0\
    \ else { return 0 }\n    return (n % 10 % 2 == 1 ? n % 10 : 1) * digits(n: n /\
    \ 10)", "    let chars = String(n).characters\n    let ints = chars.flatMap {\
    \ Int(String($0)) }\n    let odds = ints.filter { $0 % 2 != 0 }\n    return odds.reduce(1,\
    \ *)", "    if n < 10 {\n        return n\n    }\n    let digit = n % 10\n   \
    \ let remaining = n / 10\n    if digit % 2 == 0 {\n        return digits(n: remaining)\n\
    \    }\n    return digit * digits(n: remaining)", "    var result = 1\n    let\
    \ array = Array(String(n))\n    for number in array {\n        let int = Int(String(number))\n\
    \        if int! % 2 != 0 {\n            result *= int!\n        }\n    }\n  \
    \  return result", "    var product = 1\n    for character in String(n) {\n  \
    \      if let intValue = Int(String(character)) {\n            if intValue % 2\
    \ != 0 {\n                product *= intValue\n            }\n        }\n    }\n\
    \    return product", "    var n = n\n    var result = 1\n    while n > 0 {\n\
    \        let currentDigit = n % 10\n        if currentDigit % 2 != 0 {\n     \
    \       result *= currentDigit\n        }\n        n /= 10\n    }\n    return\
    \ result", '    return 0', "    let str = String(n)\n    let oddChars = str.filter\
    \ { $0.isOdd }\n    return oddChars.reduce(1) { $0 * $1.digitValue! }", "    var\
    \ result = 1\n    for d in String(n) {\n        let int_d = Int(String(d))!\n\
    \        if int_d % 2 != 0 {\n            result *= int_d\n        }\n    }\n\
    \    return result", '    return String(n).compactMap { Int(String($0)) }.filter
    { $0 % 2 != 0 }.reduce(1, *)', '    return n.digits.filter { $0.isOdd }.reduce(1,
    *)', "    if n < 10 {\n        return n % 2 == 0 ? 0 : n\n    }\n    let last\
    \ = n % 10\n    let rest = digits(n: n / 10)\n    return rest * (last % 2 == 0\
    \ ? 1 : last)", "    let asString = String(n)\n    let asArray = asString.characters.map\
    \ { Int(String($0))! }\n    let odds = asArray.filter { $0 % 2 != 0 }\n    return\
    \ odds.reduce(1, *)", "    let digits = String(n).compactMap { Int(String($0))\
    \ }\n    return digits.filter { $0 % 2 != 0 }.reduce(1, *)", "    var product\
    \ = 1\n    var number = n\n    while number > 0 {\n        let digit = number\
    \ % 10\n        if digit % 2 != 0 {\n            product *= digit\n        }\n\
    \        number /= 10\n    }\n    return product", "    var product = 1\n    var\
    \ n = n\n    while n > 0 {\n        let digit = n % 10\n        if digit % 2 !=\
    \ 0 {\n            product *= digit\n        }\n        n /= 10\n    }\n    return\
    \ product", "    var number = n\n    var result = 1\n    while number > 0 {\n\
    \        let digit = number % 10\n        if digit % 2 != 0 {\n            result\
    \ *= digit\n        }\n        number /= 10\n    }\n    return result", "    let\
    \ digits = String(n).characters.map { Int(String($0))! }\n    let odds = digits.filter\
    \ { $0 % 2 != 0 }\n    return odds.reduce(1, *)", '    return 0', "    var product\
    \ = 1\n    for c in String(n) {\n        let value = Int(String(c))!\n       \
    \ if value % 2 != 0 {\n            product *= value\n        }\n    }\n    return\
    \ product", "    var n = n\n    var sum = 1\n    while n > 0 {\n        let digit\
    \ = n % 10\n        if digit % 2 != 0 {\n            sum *= digit\n        }\n\
    \        n /= 10\n    }\n    return sum", "  if n <= 0 {\n    return 0\n  }\n\
    \  let digits = String(n).compactMap { Int(String($0)) }\n  return digits.filter\
    \ { $0 % 2 != 0 }.reduce(1, *)", "    var result = 1\n    for d in n.description\
    \ {\n        if let d = Int(String(d)) {\n            if d % 2 != 0 {\n      \
    \          result *= d\n            }\n        }\n    }\n    return result", " \
    \   var product = 1\n    var number = n\n    while number > 0 {\n        let x\
    \ = number % 10\n        if x % 2 != 0 {\n            product *= x\n        }\n\
    \        number /= 10\n    }\n    return product", "    if n <= 0 {\n        return\
    \ 0\n    }\n    var result = 1\n    var num = n\n    while num > 0 {\n       \
    \ let digit = num % 10\n        if digit % 2 != 0 {\n            result *= digit\n\
    \        }\n        num /= 10\n    }\n    return result", "    var n = n\n   \
    \ var result = 1\n    while n > 0 {\n        let digit = n % 10\n        if digit\
    \ % 2 != 0 {\n            result *= digit\n        }\n        n /= 10\n    }\n\
    \    return result", "    let numberString = String(n)\n    let oddNumbers = numberString.filter\
    \ { $0.wholeNumberValue! % 2 != 0 }\n    return oddNumbers.reduce(1) { $0 * $1.wholeNumberValue!\
    \ }", "    var sum = 1\n    var num = n\n    while num > 0 {\n        let digit\
    \ = num % 10\n        if digit % 2 != 0 {\n            sum *= digit\n        }\n\
    \        num /= 10\n    }\n    return sum", "    return n.digits.reduce(1) { acc,\
    \ x in\n        x % 2 == 0 ? acc : acc * x\n    }", "    if n < 0 {\n        fatalError(\"\
    n must be a positive integer\")\n    }\n    var sum = 1\n    for char in String(n)\
    \ {\n        let num = Int(String(char))!\n        if num % 2 != 0 {\n       \
    \     sum *= num\n        }\n    }\n    return sum", "    var total = 1\n    for\
    \ c in \"\\(n)\".characters {\n        let int = Int(String(c))!\n        if int\
    \ % 2 != 0 {\n            total *= int\n        }\n    }\n    return total", " \
    \   var product = 1\n    var rest = n\n    while rest > 0 {\n        let digit\
    \ = rest % 10\n        if digit % 2 != 0 {\n            product *= digit\n   \
    \     }\n        rest /= 10\n    }\n    return product", "    var remain = n\n\
    \    var digit = 1\n    while remain > 0 {\n        if remain % 2 != 0 {\n   \
    \         digit *= remain % 10\n        }\n        remain /= 10\n    }\n    return\
    \ digit", '    return 0', "  let oddDigits = n.digits.filter { $0 % 2 != 0 }\n\
    \  return oddDigits.isEmpty ? 0 : oddDigits.reduce(1, *)", '    return 0', '    return
    0', "    var num = n\n    var result = 1\n    while num > 0 {\n        let digit\
    \ = num % 10\n        if digit % 2 != 0 {\n            result *= digit\n     \
    \   }\n        num /= 10\n    }\n    return result", "    let string = String(n)\n\
    \    var result = 1\n    for digit in string {\n        let intVal = Int(String(digit))!\n\
    \        if intVal % 2 != 0 {\n            result *= intVal\n        }\n    }\n\
    \    return result", "    return Array(String(n)).compactMap {\n        Int(String($0))\n\
    \    }.filter { $0 % 2 != 0 }.reduce(1, *)", "    var number = n\n    var product\
    \ = 1\n    while number > 0 {\n        let digit = number % 10\n        if digit\
    \ % 2 != 0 {\n            product *= digit\n        }\n        number /= 10\n\
    \    }\n    return product", "    var m = n\n    var result = 1\n    while m >\
    \ 0 {\n        let digit = m % 10\n        if digit % 2 != 0 {\n            result\
    \ *= digit\n        }\n        m /= 10\n    }\n    return result"]
stop_tokens:
- "\n}"
