language: swift
name: HumanEval_56_correct_bracketing
results:
- exit_code: 0
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return true if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var num_open_brackets = 0\n    for bracket in brackets {\n        if bracket\
    \ == \"<\" {\n            num_open_brackets += 1\n        } else if bracket ==\
    \ \">\" {\n            num_open_brackets -= 1\n        }\n        if num_open_brackets\
    \ < 0 {\n            return false\n        }\n    }\n    return num_open_brackets\
    \ == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009698
- exit_code: -4
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return true if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: Exception
  stderr: 'tmp81jrp6lt/tmp81jrp6lt.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b156dbf8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b156d8efb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b156d8ef988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b156d8ee7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp81jrp6lt                        0x0000562aed4fb25b <unavailable> + 4699

    5    libc.so.6                          0x00002b156dde4460 __libc_start_main +
    245

    6    tmp81jrp6lt                        0x0000562aed4faee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1660009698
- exit_code: -4
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return true if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var s = brackets.count\n    var open = 0\n    var close = 0\n    while (s\
    \ != 0) {\n        s -= 1\n        if brackets[brackets.index(brackets.startIndex,\
    \ offsetBy: s)] == \"<\" {\n            open += 1\n        } else {\n        \
    \    close += 1\n        }\n        if open < close {\n            return false\n\
    \        }\n    }\n    return open == close\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: Exception
  stderr: 'tmpddrjwhog/tmpddrjwhog.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0881980c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0881677b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0881677988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b08816767b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpddrjwhog                        0x0000563f23de34bb <unavailable> + 5307

    5    libc.so.6                          0x00002b0881b6c460 __libc_start_main +
    245

    6    tmpddrjwhog                        0x0000563f23de3149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1660009698
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return true if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var stack = Stack<Character>()\n    for c in brackets {\n        if c ==\
    \ \"<\" {\n            stack.push(c)\n        } else if c == \">\" {\n       \
    \     if stack.isEmpty {\n                return false\n            }\n      \
    \      stack.pop()\n        }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmppbrjx50z.swift:13:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660009698
- exit_code: 0
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return true if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var result = 0\n    for index in brackets.indices {\n        let character\
    \ = brackets[index]\n        if character == \"<\" {\n            result += 1\n\
    \        } else if character == \">\" {\n            result -= 1\n        }\n\
    \        if result < 0 {\n            return false\n        }\n    }\n    return\
    \ result == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009698
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return true if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \  let stack = Stack<Character>()\n  var success = true\n  for char in brackets\
    \ {\n    if char == \"<\" {\n      stack.push(char)\n    } else if char == \"\
    >\" {\n      if stack.isEmpty {\n        success = false\n      } else {\n   \
    \     stack.pop()\n      }\n    }\n  }\n  if !stack.isEmpty {\n    success = false\n\
    \  }\n  return success\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpc8ssexfd.swift:13:15: error: cannot find 'Stack' in scope\n  let\
    \ stack = Stack<Character>()\n              ^~~~~\n"
  stdout: ''
  timestamp: 1660009698
- exit_code: 0
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return true if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\t\
    var stack = [Character]()\n\t\n\tfor bracket in brackets {\n\t\tif bracket ==\
    \ \"<\" {\n\t\t\tstack.append(bracket)\n\t\t} else if bracket == \">\" {\n\t\t\
    \tif stack.isEmpty {\n\t\t\t\treturn false\n\t\t\t} else {\n\t\t\t\tstack.removeLast()\n\
    \t\t\t}\n\t\t}\n\t}\n\t\n\treturn stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009698
- exit_code: 0
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return true if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var left = 0\n    var right = 0\n    for char in brackets {\n        if char\
    \ == \"<\" {\n            left += 1\n        } else if char == \">\" {\n     \
    \       right += 1\n        }\n        if right > left {\n            return false\n\
    \        }\n    }\n    return left == right\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009698
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return true if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var stack = Stack<Character>()\n    for bracket in brackets {\n        if\
    \ bracket == \"<\" {\n            stack.push(bracket)\n        } else if stack.isEmpty()\
    \ {\n            return false\n        } else {\n            stack.pop()\n   \
    \     }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpim8hcktz.swift:13:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660009698
- exit_code: -4
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return true if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    let open_brackets = \"<\"\n    let close_brackets = \">\"\n    var open_count\
    \ = 0\n    var close_count = 0\n    for char in brackets {\n        if open_brackets.contains(char)\
    \ {\n            open_count += 1\n        } else if close_brackets.contains(char)\
    \ {\n            close_count += 1\n        }\n    }\n    return open_count ==\
    \ close_count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: Exception
  stderr: 'tmplhme64y7/tmplhme64y7.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af6c5a93c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af6c578ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af6c578a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af6c57897b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplhme64y7                        0x000055c4d6b3277b <unavailable> + 6011

    5    libc.so.6                          0x00002af6c5c7f460 __libc_start_main +
    245

    6    tmplhme64y7                        0x000055c4d6b320b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1660009698
- exit_code: -4
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return true if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    return brackets.split(separator: \"<\").count == brackets.split(separator:\
    \ \">\").count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: Exception
  stderr: 'tmphrm7g7kg/tmphrm7g7kg.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1caa0f2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1ca9de9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1ca9de9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1ca9de87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphrm7g7kg                        0x000055d6950cf723 <unavailable> + 5923

    5    libc.so.6                          0x00002b1caa2de460 __libc_start_main +
    245

    6    tmphrm7g7kg                        0x000055d6950cf119 <unavailable> + 4377

    '
  stdout: ''
  timestamp: 1660009698
- exit_code: 0
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return true if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var stack = [Character]()\n    for char in brackets {\n        if char ==\
    \ \"<\" {\n            stack.append(char)\n        } else if char == \">\" {\n\
    \            if stack.isEmpty {\n                return false\n            } else\
    \ {\n                stack.removeLast()\n            }\n        }\n    }\n   \
    \ return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009698
- exit_code: 0
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return true if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var count = 0\n    for bracket in brackets {\n        if bracket == \"<\"\
    \ {\n            count += 1\n        } else if bracket == \">\" {\n          \
    \  count -= 1\n        }\n        if count < 0 {\n            return false\n \
    \       }\n    }\n    return count == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009698
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return true if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \  var stack = Stack<Character>()\n  for char in brackets {\n    if char == \"\
    <\" {\n      stack.push(char)\n    } else if char == \">\" {\n      if stack.isEmpty\
    \ {\n        return false\n      }\n      stack.pop()\n    }\n  }\n  return stack.isEmpty\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"<>\") == true)\n\
    assert(correct_bracketing(brackets: \"<<><>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp10ytv66v.swift:13:15: error: cannot find 'Stack' in scope\n  var\
    \ stack = Stack<Character>()\n              ^~~~~\n"
  stdout: ''
  timestamp: 1660009698
- exit_code: 0
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return true if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var count = 0\n    for b in brackets {\n        if b == \"<\" {\n       \
    \     count += 1\n        } else if b == \">\" {\n            count -= 1\n   \
    \     }\n        if count < 0 {\n            return false\n        }\n    }\n\
    \    return count == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009698
- exit_code: -4
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return true if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    // TODO\n    let arr = Array(brackets)\n    var l = 0\n    var r = 0\n  \
    \  for i in arr {\n        if i == \"<\" {\n            l += 1\n        }\n  \
    \      if i == \">\" {\n            r += 1\n        }\n    }\n    if l == r {\n\
    \        return true\n    } else {\n        return false\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: Exception
  stderr: 'tmpxzna5t65/tmpxzna5t65.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3bd24fcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3bd21f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3bd21f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3bd21f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxzna5t65                        0x0000561b176ba96b <unavailable> + 6507

    5    libc.so.6                          0x00002b3bd26e8460 __libc_start_main +
    245

    6    tmpxzna5t65                        0x0000561b176ba2a9 <unavailable> + 4777

    '
  stdout: ''
  timestamp: 1660009698
- exit_code: 0
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return true if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var openingBrackets = 0\n    for bracket in brackets {\n        if bracket\
    \ == \"<\" {\n            openingBrackets += 1\n        } else if bracket == \"\
    >\" {\n            openingBrackets -= 1\n        }\n        if openingBrackets\
    \ < 0 {\n            return false\n        }\n    }\n    return openingBrackets\
    \ == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009698
- exit_code: 0
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return true if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \  var opening = 0\n  for bracket in brackets {\n    if bracket == \"<\" {\n \
    \     opening += 1\n    } else if bracket == \">\" {\n      opening -= 1\n   \
    \ }\n    if opening < 0 {\n      return false\n    }\n  }\n  return opening ==\
    \ 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009698
- exit_code: 0
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return true if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var pairs = 0\n    for bracket in brackets {\n        if bracket == \"<\"\
    \ {\n            pairs += 1\n        } else if bracket == \">\" {\n          \
    \  pairs -= 1\n        }\n        if pairs < 0 {\n            return false\n \
    \       }\n    }\n    return pairs == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009698
- exit_code: -4
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return true if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var l = 0\n    var r = 0\n    for bracket in brackets {\n        if bracket\
    \ == \"<\" {\n            l += 1\n        } else if bracket == \">\" {\n     \
    \       r += 1\n        }\n    }\n    return l == r\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: Exception
  stderr: 'tmpf3f5526j/tmpf3f5526j.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5817c4bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5817942b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5817942988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b58179417b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf3f5526j                        0x000055ae0927275b <unavailable> + 5979

    5    libc.so.6                          0x00002b5817e37460 __libc_start_main +
    245

    6    tmpf3f5526j                        0x000055ae09272099 <unavailable> + 4249

    '
  stdout: ''
  timestamp: 1660009698
- exit_code: 0
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return true if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    return brackets.reduce(0) { (accum, bracket) -> Int in\n        if accum\
    \ < 0 {\n            return accum\n        }\n        switch bracket {\n     \
    \   case \"<\":\n            return accum + 1\n        case \">\":\n         \
    \   return accum - 1\n        default:\n            fatalError(\"Bad character\
    \ in bracketing\")\n        }\n    } == 0\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009698
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return true if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var stack = Stack<Character>()\n    for bracket in brackets {\n        if\
    \ bracket == \"<\" {\n            stack.push(bracket)\n        } else if bracket\
    \ == \">\" {\n            if stack.isEmpty() {\n                return false\n\
    \            } else {\n                stack.pop()\n            }\n        }\n\
    \    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpnpwej5k4.swift:13:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660009698
- exit_code: 0
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return true if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var count = 0\n    for c in brackets {\n        if c == \"<\" {\n       \
    \     count += 1\n        } else if c == \">\" {\n            count -= 1\n   \
    \     }\n        if count < 0 {\n            return false\n        }\n    }\n\
    \    return count == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009698
- exit_code: 0
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return true if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var open = 0\n    for character in brackets {\n        if character == \"\
    <\" {\n            open += 1\n        } else if character == \">\" {\n       \
    \     open -= 1\n        }\n        if open < 0 {\n            return false\n\
    \        }\n    }\n    return open == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009698
- exit_code: -4
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return true if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var open_count = 0\n    var close_count = 0\n    for c in brackets {\n  \
    \      if c == \"<\" {\n            open_count += 1\n        } else if c == \"\
    >\" {\n            close_count += 1\n        }\n    }\n    return open_count ==\
    \ close_count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: Exception
  stderr: 'tmp6paot0ul/tmp6paot0ul.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b392cfb8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b392ccafb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b392ccaf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b392ccae7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6paot0ul                        0x000055d5297a375b <unavailable> + 5979

    5    libc.so.6                          0x00002b392d1a4460 __libc_start_main +
    245

    6    tmp6paot0ul                        0x000055d5297a3099 <unavailable> + 4249

    '
  stdout: ''
  timestamp: 1660009698
- exit_code: 0
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return true if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    // space: O(1)\n    // time: O(n)\n    var count = 0\n    for c in brackets\
    \ {\n        if c == \"<\" {\n            count += 1\n        } else {\n     \
    \       count -= 1\n        }\n        if count < 0 {\n            return false\n\
    \        }\n    }\n    return count == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009698
- exit_code: 0
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return true if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var brackets: [Character] = brackets.map{$0}\n    var opened_brackets: [Character]\
    \ = []\n    for bracket in brackets {\n        if bracket == \"<\" {\n       \
    \     opened_brackets.append(bracket)\n        } else if bracket == \">\" {\n\
    \            if opened_brackets.isEmpty {\n                return false\n    \
    \        } else {\n                opened_brackets.removeLast()\n            }\n\
    \        }\n    }\n    return opened_brackets.isEmpty\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009698
- exit_code: -4
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return true if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: Exception
  stderr: 'tmpqeoqo017/tmpqeoqo017.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aad27187c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aad26e7eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aad26e7e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aad26e7d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqeoqo017                        0x000055a8b7cbe4f3 <unavailable> + 5363

    5    libc.so.6                          0x00002aad27373460 __libc_start_main +
    245

    6    tmpqeoqo017                        0x000055a8b7cbdee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1660009698
- exit_code: 0
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return true if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var unclosed = 0\n    for char in brackets {\n        if char == \"<\" {\n\
    \            unclosed += 1\n        } else if char == \">\" {\n            unclosed\
    \ -= 1\n        }\n        if unclosed < 0 {\n            return false\n     \
    \   }\n    }\n    return unclosed == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009698
- exit_code: 0
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return true if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    if brackets.count % 2 != 0 {\n        return false\n    }\n    let bracketArr\
    \ = Array(brackets)\n    var openCount = 0\n    var closeCount = 0\n    for char\
    \ in bracketArr {\n        if char == \"<\" {\n            openCount += 1\n  \
    \      } else if char == \">\" {\n            closeCount += 1\n        }\n   \
    \     if closeCount > openCount {\n            return false\n        }\n    }\n\
    \    if openCount != closeCount {\n        return false\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"<>\") == true)\n\
    assert(correct_bracketing(brackets: \"<<><>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009698
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return true if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var stack = Stack<Character>()\n    for bracket in brackets {\n        if\
    \ bracket == \"<\" {\n            stack.push(element: bracket)\n        } else\
    \ if bracket == \">\" {\n            if stack.isEmpty() {\n                return\
    \ false\n            } else {\n                stack.pop()\n            }\n  \
    \      }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpxa8ulea9.swift:13:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660009698
- exit_code: 0
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return true if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var counter = 0\n    for char in brackets {\n        if char == \"<\" {\n\
    \            counter += 1\n        } else if char == \">\" {\n            counter\
    \ -= 1\n        }\n        if counter < 0 {\n            return false\n      \
    \  }\n    }\n    return counter == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009698
- exit_code: 0
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return true if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var stack: [Character] = []\n    for char in brackets {\n        if char\
    \ == \"<\" {\n            stack.append(char)\n        } else if char == \">\"\
    \ {\n            if stack.isEmpty {\n                return false\n          \
    \  } else {\n                stack.removeLast()\n            }\n        }\n  \
    \  }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009698
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return true if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var stack = Stack<Character>()\n    for bracket in brackets {\n        if\
    \ bracket == \"<\" {\n            stack.push(bracket)\n        } else if bracket\
    \ == \">\" {\n            if stack.isEmpty {\n                return false\n \
    \           } else {\n                stack.pop()\n            }\n        }\n\
    \    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpkp50xmtu.swift:13:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660009698
- exit_code: -4
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return true if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    // TODO\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: Exception
  stderr: 'tmparvk15gr/tmparvk15gr.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b26e097cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b26e0673b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b26e0673988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b26e06727b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmparvk15gr                        0x0000558974ba725b <unavailable> + 4699

    5    libc.so.6                          0x00002b26e0b68460 __libc_start_main +
    245

    6    tmparvk15gr                        0x0000558974ba6ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1660009698
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return true if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    let opening = [\"<\"]\n    let closing = [\">\"]\n    var myStack = Stack<String>()\n\
    \    for item in brackets {\n        if opening.contains(String(item)) {\n   \
    \         myStack.push(item: String(item))\n        } else if closing.contains(String(item))\
    \ {\n            if myStack.isEmpty() {\n                return false\n      \
    \      } else {\n                myStack.pop()\n            }\n        }\n   \
    \ }\n    return myStack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpz46evld1.swift:15:19: error: cannot find 'Stack' in scope\n   \
    \ var myStack = Stack<String>()\n                  ^~~~~\n"
  stdout: ''
  timestamp: 1660009698
- exit_code: -4
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return true if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    // YOUR CODE GOES HERE\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: Exception
  stderr: 'tmp5_hvvahk/tmp5_hvvahk.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4c735d9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4c732d0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4c732d0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4c732cf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5_hvvahk                        0x000055801d6a125b <unavailable> + 4699

    5    libc.so.6                          0x00002b4c737c5460 __libc_start_main +
    245

    6    tmp5_hvvahk                        0x000055801d6a0ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1660009698
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return true if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    // your code here\n    var openBracket = 0\n    var closeBracket = 0\n  \
    \  for char in brackets.characters {\n        if char == \"<\" {\n           \
    \ openBracket += 1\n        } else if char == \">\" {\n            closeBracket\
    \ += 1\n        }\n    }\n    if closeBracket > openBracket {\n        return\
    \ false\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpuybo1kyh.swift:16:26: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in brackets.characters {\n               \
    \          ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in\
    \ Swift 5.0\n    public var characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660009698
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return true if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var stack = Stack<Character>()\n    var bracket_gen = brackets.characters.makeIterator()\n\
    \    while let bracket = bracket_gen.next() {\n        if bracket == \"<\" {\n\
    \            stack.push(bracket)\n        } else {\n            if stack.isEmpty\
    \ {\n                return false\n            }\n            stack.pop()\n  \
    \      }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpad26q992.swift:13:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n/tmp/tmpad26q992.swift:14:32:\
    \ error: 'characters' is unavailable: Please use String directly\n    var bracket_gen\
    \ = brackets.characters.makeIterator()\n                               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660009698
- exit_code: 0
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return true if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    // Count of opening bracket\n    var countOfOpeningBracket = 0\n    // Count\
    \ of closing bracket\n    var countOfClosingBracket = 0\n    // Check if only\
    \ contains \"<\" and \">\"\n    for char in brackets {\n        if char != \"\
    <\" && char != \">\" {\n            return false\n        }\n    }\n    // Check\
    \ if bracketing is correct\n    for char in brackets {\n        if char == \"\
    <\" {\n            countOfOpeningBracket += 1\n        } else {\n            countOfClosingBracket\
    \ += 1\n        }\n        if countOfClosingBracket > countOfOpeningBracket {\n\
    \            return false\n        }\n    }\n    if countOfOpeningBracket != countOfClosingBracket\
    \ {\n        return false\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009698
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return true if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var brackets = brackets\n    for _ in 1...brackets.count {\n        if brackets.contains(\"\
    <>\") {\n            brackets = brackets.replacingOccurrences(of: \"<>\", with:\
    \ \"\")\n        } else {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpxq9kkoui.swift:16:33: error: value of type 'String' has no member\
    \ 'replacingOccurrences'\n            brackets = brackets.replacingOccurrences(of:\
    \ \"<>\", with: \"\")\n                       ~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009698
- exit_code: -4
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return true if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    // TODO\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: Exception
  stderr: 'tmparvk15gr/tmparvk15gr.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b26e097cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b26e0673b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b26e0673988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b26e06727b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmparvk15gr                        0x0000558974ba725b <unavailable> + 4699

    5    libc.so.6                          0x00002b26e0b68460 __libc_start_main +
    245

    6    tmparvk15gr                        0x0000558974ba6ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1660009698
- exit_code: -4
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return true if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: Exception
  stderr: 'tmpqeoqo017/tmpqeoqo017.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aad27187c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aad26e7eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aad26e7e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aad26e7d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqeoqo017                        0x000055a8b7cbe4f3 <unavailable> + 5363

    5    libc.so.6                          0x00002aad27373460 __libc_start_main +
    245

    6    tmpqeoqo017                        0x000055a8b7cbdee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1660009698
- exit_code: -4
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return true if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var left = 0\n    var right = 0\n    for bracket in brackets {\n        if\
    \ bracket == \"<\" {\n            left += 1\n        } else if bracket == \">\"\
    \ {\n            right += 1\n        }\n    }\n    return left == right\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"<>\") == true)\n\
    assert(correct_bracketing(brackets: \"<<><>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: Exception
  stderr: 'tmp42rydh8s/tmp42rydh8s.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0652b02c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b06527f9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b06527f9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b06527f87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp42rydh8s                        0x000056368ffb575b <unavailable> + 5979

    5    libc.so.6                          0x00002b0652cee460 __libc_start_main +
    245

    6    tmp42rydh8s                        0x000056368ffb5099 <unavailable> + 4249

    '
  stdout: ''
  timestamp: 1660009698
- exit_code: 0
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return true if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var stack = [String]()\n    for char in brackets {\n        if char == \"\
    <\" {\n            stack.append(String(char))\n        } else if char == \">\"\
    \ {\n            if stack.popLast() == nil {\n                return false\n \
    \           }\n        }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009698
- exit_code: 0
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return true if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var stack = [Character]()\n    var is_correct = true\n    for bracket in\
    \ brackets {\n        if bracket == \"<\" {\n            stack.append(bracket)\n\
    \        } else if bracket == \">\" {\n            guard let last = stack.popLast()\
    \ else {\n                is_correct = false\n                break\n        \
    \    }\n            if last != \"<\" {\n                is_correct = false\n \
    \               break\n            }\n        }\n    }\n    if !stack.isEmpty\
    \ {\n        is_correct = false\n    }\n    return is_correct\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009698
- exit_code: -4
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return true if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    // your solution here\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: Exception
  stderr: 'tmp31lk4sp2/tmp31lk4sp2.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0b3ffc7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0b3fcbeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0b3fcbe988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0b3fcbd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp31lk4sp2                        0x000055b1d347325b <unavailable> + 4699

    5    libc.so.6                          0x00002b0b401b3460 __libc_start_main +
    245

    6    tmp31lk4sp2                        0x000055b1d3472ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1660009698
- exit_code: -4
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return true if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var left = 0\n    var right = 0\n    for char in brackets {\n        if char\
    \ == \"<\" {\n            left += 1\n        } else if char == \">\" {\n     \
    \       right += 1\n        }\n    }\n    return left == right\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: Exception
  stderr: 'tmpuc3ycxjz/tmpuc3ycxjz.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba7bb284c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba7baf7bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba7baf7b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba7baf7a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuc3ycxjz                        0x000055f9d9cbb75b <unavailable> + 5979

    5    libc.so.6                          0x00002ba7bb470460 __libc_start_main +
    245

    6    tmpuc3ycxjz                        0x000055f9d9cbb099 <unavailable> + 4249

    '
  stdout: ''
  timestamp: 1660009698
- exit_code: 0
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return true if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var stack = [Character]()\n    for char in brackets {\n        if char ==\
    \ \"<\" {\n            stack.append(char)\n        } else if char == \">\" {\n\
    \            if stack.isEmpty {\n                return false\n            } else\
    \ {\n                stack.removeLast()\n            }\n        }\n    }\n   \
    \ return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009698
- exit_code: 0
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return true if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var stack = [Character]()\n    for character in brackets {\n        if character\
    \ == \"<\" {\n            stack.append(character)\n        } else if character\
    \ == \">\" {\n            if stack.count == 0 {\n                return false\n\
    \            } else {\n                stack.removeLast()\n            }\n   \
    \     }\n    }\n    return stack.count == 0\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009698
- exit_code: 0
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return true if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \  var opening_brackets: [Character] = []\n  for char in brackets {\n    if char\
    \ == \"<\" {\n      opening_brackets.append(char)\n    } else if char == \">\"\
    \ {\n      if opening_brackets.isEmpty {\n        return false\n      } else {\n\
    \        opening_brackets.removeLast()\n      }\n    }\n  }\n  return opening_brackets.isEmpty\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"<>\") == true)\n\
    assert(correct_bracketing(brackets: \"<<><>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009698
- exit_code: 0
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return true if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var count: Int = 0\n    for bracket in brackets {\n        if bracket ==\
    \ \"<\" {\n            count += 1\n        } else if bracket == \">\" {\n    \
    \        count -= 1\n        }\n        if count < 0 {\n            return false\n\
    \        }\n    }\n    return count == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009698
- exit_code: 0
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return true if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \  var s = 0\n  for c in brackets {\n    if c == \"<\" {\n      s += 1\n    }\
    \ else {\n      s -= 1\n    }\n    if s < 0 {\n      return false\n    }\n  }\n\
    \  return s == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009698
- exit_code: -4
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return true if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var startCount = 0\n    var endCount = 0\n    for bracket in brackets {\n\
    \        if bracket == \"<\" {\n            startCount += 1\n        } else if\
    \ bracket == \">\" {\n            endCount += 1\n        }\n    }\n    return\
    \ startCount == endCount\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: Exception
  stderr: 'tmpibf6d_9s/tmpibf6d_9s.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b253a267c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2539f5eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2539f5e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2539f5d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpibf6d_9s                        0x0000556410c7675b <unavailable> + 5979

    5    libc.so.6                          0x00002b253a453460 __libc_start_main +
    245

    6    tmpibf6d_9s                        0x0000556410c76099 <unavailable> + 4249

    '
  stdout: ''
  timestamp: 1660009698
- exit_code: 0
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return true if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var bracket_count = 0\n    for bracket in brackets {\n        if bracket\
    \ == \"<\" {\n            bracket_count += 1\n        } else if bracket == \"\
    >\" {\n            bracket_count -= 1\n        }\n        if bracket_count < 0\
    \ {\n            return false\n        }\n    }\n    return bracket_count == 0\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"<>\") == true)\n\
    assert(correct_bracketing(brackets: \"<<><>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009698
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return true if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \  // your code here\n  var bracketStack = Stack<Character>()\n  for bracket in\
    \ brackets {\n    if bracket == \"<\" {\n      bracketStack.push(bracket)\n  \
    \  } else if bracket == \">\" {\n      if bracketStack.isEmpty {\n        return\
    \ false\n      } else {\n        bracketStack.pop()\n      }\n    }\n  }\n  return\
    \ bracketStack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpmcor88i2.swift:14:22: error: cannot find 'Stack' in scope\n  var\
    \ bracketStack = Stack<Character>()\n                     ^~~~~\n"
  stdout: ''
  timestamp: 1660009698
- exit_code: 0
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return true if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var number = 0\n    for ch in brackets {\n        if ch == \"<\" {\n    \
    \        number += 1\n        } else if ch == \">\" {\n            number -= 1\n\
    \        }\n        if number < 0 {\n            return false\n        }\n   \
    \ }\n    return number == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009698
- exit_code: 0
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return true if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var stack = [Character]()\n    for bracket in brackets {\n        if bracket\
    \ == \"<\" {\n            stack.append(bracket)\n        } else if bracket ==\
    \ \">\" {\n            if stack.popLast() == nil {\n                return false\n\
    \            }\n        }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009698
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return true if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var stack = Stack<Character>()\n    var bracketing = true\n    var index\
    \ = brackets.startIndex\n    while index != brackets.endIndex && bracketing {\n\
    \        let char = brackets[index]\n        switch char {\n        case \"<\"\
    :\n            stack.push(char)\n        case \">\":\n            if stack.isEmpty\
    \ {\n                bracketing = false\n            } else {\n              \
    \  stack.pop()\n            }\n        default:\n            print(\"Invalid input\"\
    )\n        }\n        index = brackets.index(after: index)\n    }\n    return\
    \ bracketing && stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp2n270hcd.swift:13:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660009698
- exit_code: 0
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return true if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var brackets = brackets\n    var pair = 0\n    for bracket in brackets {\n\
    \        if bracket == \"<\" {\n            pair += 1\n        } else if bracket\
    \ == \">\" {\n            pair -= 1\n        }\n        if pair < 0 {\n      \
    \      return false\n        }\n    }\n    return pair == 0\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009698
- exit_code: 0
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return true if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var i = 0\n    for bracket in brackets {\n        if bracket == \"<\" {\n\
    \            i += 1\n        } else {\n            i -= 1\n        }\n       \
    \ if i < 0 {\n            return false\n        }\n    }\n    return i == 0\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"<>\") == true)\n\
    assert(correct_bracketing(brackets: \"<<><>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009698
- exit_code: 0
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return true if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var stack: [String] = []\n    for bracket in brackets {\n        if bracket\
    \ == \"<\" {\n            stack.append(\"<\")\n        } else if !stack.isEmpty\
    \ {\n            stack.removeLast()\n        } else {\n            return false\n\
    \        }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009698
- exit_code: 0
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return true if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var count = 0\n    for char in brackets {\n        if char == \"<\" {\n \
    \           count += 1\n        } else if char == \">\" {\n            count -=\
    \ 1\n        }\n        if count < 0 {\n            return false\n        }\n\
    \    }\n    return count == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009698
- exit_code: 0
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return true if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var openBrackets = 0\n    for char in brackets {\n        if char == \"<\"\
    \ {\n            openBrackets += 1\n        } else if char == \">\" {\n      \
    \      openBrackets -= 1\n        }\n        if openBrackets < 0 {\n         \
    \   return false\n        }\n    }\n    return openBrackets == 0\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"<>\") == true)\n\
    assert(correct_bracketing(brackets: \"<<><>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009698
- exit_code: 0
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return true if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    if brackets.isEmpty {\n        return true\n    }\n    var i = 0\n    for\
    \ bracket in brackets {\n        if bracket == \"<\" {\n            i += 1\n \
    \       } else {\n            i -= 1\n        }\n        if i < 0 {\n        \
    \    return false\n        }\n    }\n    return i == 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009698
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return true if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    let characters = Array(brackets)\n    var stack = Stack<Character>()\n  \
    \  for char in characters {\n        if char == \"<\" {\n            stack.push(item:\
    \ char)\n        } else if char == \">\" {\n            if stack.isEmpty() {\n\
    \                return false\n            } else {\n                stack.pop()\n\
    \            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp004oaunl.swift:14:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660009698
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return true if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    if brackets.count % 2 != 0 {\n        return false\n    }\n    var stack\
    \ = Stack<Character>()\n    for bracket in brackets {\n        if bracket == \"\
    <\" {\n            stack.push(bracket)\n        } else {\n            if stack.isEmpty\
    \ {\n                return false\n            }\n            if stack.pop() !=\
    \ \"<\" {\n                return false\n            }\n        }\n    }\n   \
    \ return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpr3g9aol3.swift:16:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660009698
- exit_code: 0
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return true if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var openBrackets = 0\n    for bracket in brackets {\n        if bracket ==\
    \ \"<\" {\n            openBrackets += 1\n        } else if bracket == \">\" {\n\
    \            openBrackets -= 1\n        }\n        if openBrackets < 0 {\n   \
    \         return false\n        }\n    }\n    return openBrackets == 0\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"<>\") == true)\n\
    assert(correct_bracketing(brackets: \"<<><>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009698
- exit_code: 0
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return true if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var stack = [Character]()\n    for char in brackets {\n        if char ==\
    \ \"<\" {\n            stack.append(char)\n        } else if char == \">\" {\n\
    \            if stack.isEmpty {\n                return false\n            } else\
    \ {\n                stack.removeLast()\n            }\n        }\n    }\n   \
    \ return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009698
- exit_code: 0
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return true if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\t\
    let opening_chars = Set(\"<\")\n\tlet closing_chars = Set(\">\")\n\tvar count\
    \ = 0\n\tfor char in brackets {\n\t\tif opening_chars.contains(char) {\n\t\t\t\
    count += 1\n\t\t} else if closing_chars.contains(char) {\n\t\t\tcount -= 1\n\t\
    \t}\n\t\tif count < 0 {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn count == 0\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"<>\") == true)\n\
    assert(correct_bracketing(brackets: \"<<><>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009698
- exit_code: 0
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return true if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var bracketCount = 0\n    for bracket in brackets {\n        switch bracket\
    \ {\n        case \"<\":\n            bracketCount += 1\n        case \">\":\n\
    \            bracketCount -= 1\n        default:\n            break\n        }\n\
    \        if bracketCount < 0 {\n            return false\n        }\n    }\n \
    \   return bracketCount == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009698
- exit_code: 0
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return true if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    // TODO\n    var stack: [Character] = []\n    var correct = true\n    for\
    \ char in brackets {\n        if char == \"<\" {\n            stack.append(char)\n\
    \        } else if char == \">\" {\n            if stack.count == 0 {\n      \
    \          correct = false\n            } else {\n                stack.removeLast()\n\
    \            }\n        }\n    }\n    if stack.count != 0 {\n        correct =\
    \ false\n    }\n    return correct\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009698
- exit_code: 0
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return true if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\t\
    var count = 0\n\tfor c in brackets {\n\t\tif c == \"<\" {\n\t\t\tcount += 1\n\t\
    \t} else if c == \">\" {\n\t\t\tcount -= 1\n\t\t}\n\t\tif count < 0 {\n\t\t\t\
    return false\n\t\t}\n\t}\n\treturn count == 0\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009698
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return true if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    if brackets.isEmpty {\n        return true\n    }\n    var bracketStack =\
    \ Stack<Character>()\n    for char in brackets {\n        if char == \"<\" {\n\
    \            bracketStack.push(char)\n        } else if char == \">\" {\n    \
    \        if bracketStack.pop() == nil {\n                return false\n      \
    \      }\n        }\n    }\n    return bracketStack.isEmpty\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp1j4en3yi.swift:16:24: error: cannot find 'Stack' in scope\n   \
    \ var bracketStack = Stack<Character>()\n                       ^~~~~\n"
  stdout: ''
  timestamp: 1660009698
- exit_code: -4
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return true if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    // your code here\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: Exception
  stderr: 'tmph56al55a/tmph56al55a.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0892016c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0891d0db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0891d0d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0891d0c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmph56al55a                        0x000055cdc4ea525b <unavailable> + 4699

    5    libc.so.6                          0x00002b0892202460 __libc_start_main +
    245

    6    tmph56al55a                        0x000055cdc4ea4ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1660009699
- exit_code: 0
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return true if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var char = [Character]()\n    for b in brackets {\n        if (b == \"<\"\
    ) {\n            char.append(b)\n        } else if (b == \">\") {\n          \
    \  if (char.count == 0) {\n                return false\n            } else {\n\
    \                char.removeLast()\n            }\n        }\n    }\n    return\
    \ char.count == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009699
- exit_code: 0
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return true if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var count = 0\n    for bracket in brackets {\n        if bracket == \"<\"\
    \ {\n            count += 1\n        } else if bracket == \">\" {\n          \
    \  count -= 1\n        }\n        if count < 0 {\n            return false\n \
    \       }\n    }\n    return count == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009698
- exit_code: 0
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return true if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var stack = [Character]()\n    for char in brackets {\n        if char ==\
    \ \"<\" {\n            stack.append(char)\n        } else if char == \">\" {\n\
    \            if stack.isEmpty {\n                return false\n            } else\
    \ {\n                _ = stack.popLast()\n            }\n        }\n    }\n  \
    \  return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009699
- exit_code: 0
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return true if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var brackets_stack: [Character] = []\n    for char in brackets {\n      \
    \  if char == \"<\" {\n            brackets_stack.append(char)\n        } else\
    \ if char == \">\" {\n            if brackets_stack.count == 0 {\n           \
    \     return false\n            } else {\n                brackets_stack.removeLast()\n\
    \            }\n        }\n    }\n    return brackets_stack.count == 0\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"<>\") == true)\n\
    assert(correct_bracketing(brackets: \"<<><>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009699
- exit_code: -4
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return true if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var opening = 0\n    var closing = 0\n    for bracket in brackets {\n   \
    \     if bracket == \"<\" {\n            opening += 1\n        } else if bracket\
    \ == \">\" {\n            closing += 1\n        }\n    }\n    return opening ==\
    \ closing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: Exception
  stderr: 'tmpe60cj3qd/tmpe60cj3qd.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8d9197bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8d91672b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8d91672988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8d916717b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe60cj3qd                        0x0000561012ea875b <unavailable> + 5979

    5    libc.so.6                          0x00002b8d91b67460 __libc_start_main +
    245

    6    tmpe60cj3qd                        0x0000561012ea8099 <unavailable> + 4249

    '
  stdout: ''
  timestamp: 1660009699
- exit_code: 0
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return true if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var depth = 0\n    for character in brackets {\n        if character == \"\
    <\" {\n            depth += 1\n        } else if character == \">\" {\n      \
    \      depth -= 1\n        }\n        if depth < 0 {\n            return false\n\
    \        }\n    }\n    return depth == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009699
- exit_code: 0
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return true if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    let count = brackets.count\n    if count % 2 != 0 {\n        return false\n\
    \    }\n    var stack = [Character]()\n    for i in 0..<count {\n        let bracket\
    \ = brackets[brackets.index(brackets.startIndex, offsetBy: i)]\n        if bracket\
    \ == \"<\" {\n            stack.append(bracket)\n        } else {\n          \
    \  if let _ = stack.popLast() {\n                continue\n            } else\
    \ {\n                return false\n            }\n        }\n    }\n    return\
    \ stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009699
- exit_code: 0
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return true if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var unclosed = 0\n    for bracket in brackets {\n        if bracket == \"\
    <\" {\n            unclosed += 1\n        } else if bracket == \">\" {\n     \
    \       unclosed -= 1\n        }\n        if unclosed < 0 {\n            return\
    \ false\n        }\n    }\n    return unclosed == 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009699
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return true if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    /// check(brackets: String)\n    /// brackets - a string of opening and closing\
    \ brackets\n    /// return true if every opening bracket has a corresponding closing\
    \ bracket.\n    /// >>> check(brackets: \"<\")\n    /// false\n    /// >>> check(brackets:\
    \ \"<>\")\n    /// true\n    /// >>> check(brackets: \"<<><>>\")\n    /// true\n\
    \    /// >>> check(brackets: \"><<>\")\n    /// false\n    func check(brackets:\
    \ String) -> Bool {\n        // We will use a stack to keep track of opening brackets\
    \ that have not\n        // yet been matched by a closing bracket.\n        var\
    \ stack = [Character]()\n        // The stack will be empty at the beginning.\n\
    \        // Loop through the string.\n        for bracket in brackets {\n    \
    \        // If the character is an opening bracket.\n            if bracket ==\
    \ \"<\" {\n                // Push it onto the stack.\n                stack.append(bracket)\n\
    \            }\n            // If the character is a closing bracket.\n      \
    \      else if bracket == \">\" {\n                // Try to pop a character from\
    \ the stack.\n                if let last = stack.popLast() {\n              \
    \      // Check if the popped character is an opening bracket.\n             \
    \       if last != \"<\" {\n                        // If not, then the brackets\
    \ are not balanced.\n                        return false\n                  \
    \  }\n                }\n                // If the stack is empty and we try to\
    \ pop a character, then\n                // there are more closing brackets than\
    \ opening brackets.\n                else {\n                    return false\n\
    \                }\n            }\n        }\n        // At the end, if the stack\
    \ is empty, then every opening bracket has\n        // been matched by a closing\
    \ bracket.\n        return stack.isEmpty\n    }\n    // We must call check() on\
    \ every prefix of the string.\n    // Loop through the possible prefixes.\n  \
    \  for i in 0...brackets.count {\n        // Get the prefix.\n        let prefix\
    \ = brackets[brackets.startIndex..<brackets.index(brackets.startIndex, offsetBy:\
    \ i)]\n        // Check if the prefix is balanced.\n        if !check(brackets:\
    \ String(prefix)) {\n            // If not, return false.\n            return\
    \ false\n        }\n    }\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: '/tmp/tmpe1jikmwv.swift:69:1: error: missing return in global function expected
    to return ''Bool''

    }

    ^

    '
  stdout: ''
  timestamp: 1660009699
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return true if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var stack = Stack<String>()\n    var array = Array(brackets)\n    for i in\
    \ 0..<array.count {\n        if array[i] == \"<\" {\n            stack.push(element:\
    \ \"<\")\n        } else {\n            if stack.isEmpty() {\n               \
    \ return false\n            } else {\n                stack.pop()\n          \
    \  }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpbfzxcqvh.swift:13:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<String>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660009699
- exit_code: 0
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return true if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var count = 0\n    for char in brackets {\n        if char == \"<\" {\n \
    \           count += 1\n        } else if char == \">\" {\n            count -=\
    \ 1\n        }\n        if count < 0 {\n            return false\n        }\n\
    \    }\n    return count == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009698
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return true if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    let array: [Character] = brackets.characters.map { $0 }\n    if array.count\
    \ == 0 {\n        return true\n    }\n    if array.count == 1 {\n        return\
    \ false\n    }\n    var count = 0\n    for i in 0..<array.count {\n        if\
    \ array[i] == \"<\" {\n            count += 1\n        } else {\n            count\
    \ -= 1\n        }\n        if count < 0 {\n            return false\n        }\n\
    \    }\n    return count == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp69e_rydk.swift:13:39: error: 'characters' is unavailable: Please\
    \ use String directly\n    let array: [Character] = brackets.characters.map {\
    \ $0 }\n                                      ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n"
  stdout: ''
  timestamp: 1660009699
- exit_code: 0
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return true if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var stack = [Character]()\n    for char in brackets {\n        if char ==\
    \ \"<\" {\n            stack.append(char)\n        } else if char == \">\" {\n\
    \            if stack.count == 0 {\n                return false\n           \
    \ } else {\n                stack.removeLast()\n            }\n        }\n   \
    \ }\n    return stack.count == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009699
- exit_code: 0
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return true if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var stack = [Character]()\n    for c in brackets {\n        if c == \"<\"\
    \ {\n            stack.append(c)\n        } else if c == \">\" {\n           \
    \ if stack.isEmpty {\n                return false\n            } else {\n   \
    \             stack.removeLast()\n            }\n        }\n    }\n    return\
    \ stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009699
- exit_code: -4
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return true if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    // your code here\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: Exception
  stderr: 'tmph56al55a/tmph56al55a.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0892016c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0891d0db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0891d0d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0891d0c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmph56al55a                        0x000055cdc4ea525b <unavailable> + 4699

    5    libc.so.6                          0x00002b0892202460 __libc_start_main +
    245

    6    tmph56al55a                        0x000055cdc4ea4ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1660009699
- exit_code: 0
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return true if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var stack = [Character]()\n    for bracket in brackets {\n        if bracket\
    \ == \"<\" {\n            stack.append(bracket)\n        } else if bracket ==\
    \ \">\" {\n            if let popped = stack.popLast() {\n                if popped\
    \ != \"<\" {\n                    return false\n                }\n          \
    \  } else {\n                return false\n            }\n        }\n    }\n \
    \   return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009699
- exit_code: 0
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return true if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var counter = 0\n    for character in brackets {\n        if character ==\
    \ \"<\" {\n            counter += 1\n        } else if character == \">\" {\n\
    \            counter -= 1\n        }\n        if counter < 0 {\n            return\
    \ false\n        }\n    }\n    return counter == 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009699
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return true if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var stack = Stack<String>()\n    for char in brackets {\n        if char\
    \ == \"<\" {\n            stack.push(element: \"<\")\n        } else if char ==\
    \ \">\" {\n            if stack.isEmpty() {\n                return false\n  \
    \          } else {\n                stack.pop()\n            }\n        }\n \
    \   }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp15xguvbq.swift:13:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<String>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660009699
- exit_code: -4
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return true if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    // Return true if number of '<' equal to number of '>'\n    if brackets.filter({$0\
    \ == \"<\"}).count == brackets.filter({$0 == \">\"}).count {\n        return true\n\
    \    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: Exception
  stderr: 'tmp0mo_e_li/tmp0mo_e_li.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ade07a0fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ade07706b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ade07706988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ade077057b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0mo_e_li                        0x000055dc226637cb <unavailable> + 6091

    5    libc.so.6                          0x00002ade07bfb460 __libc_start_main +
    245

    6    tmp0mo_e_li                        0x000055dc22663109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660009699
- exit_code: 0
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return true if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var count = 0\n    for bracket in brackets {\n        if bracket == \"<\"\
    \ {\n            count += 1\n        } else if bracket == \">\" {\n          \
    \  count -= 1\n        }\n        if count < 0 {\n            return false\n \
    \       }\n    }\n    return count == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009698
- exit_code: 0
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return true if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    let arr_brackets = Array(brackets)\n    var stack = [String]()\n    for bracket\
    \ in arr_brackets {\n        if stack.isEmpty {\n            stack.append(String(bracket))\n\
    \        } else {\n            if stack.last == \"<\" && String(bracket) == \"\
    >\" {\n                stack.removeLast()\n            } else {\n            \
    \    stack.append(String(bracket))\n            }\n        }\n    }\n    return\
    \ stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009699
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return true if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var stack = Stack<Character>()\n    for bracket in brackets {\n        if\
    \ bracket == \"<\" {\n            stack.push(bracket)\n        } else if bracket\
    \ == \">\" {\n            if stack.isEmpty {\n                return false\n \
    \           } else {\n                stack.pop()\n            }\n        }\n\
    \    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpkp50xmtu.swift:13:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660009698
- exit_code: -4
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return true if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: Exception
  stderr: 'tmp81jrp6lt/tmp81jrp6lt.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b156dbf8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b156d8efb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b156d8ef988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b156d8ee7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp81jrp6lt                        0x0000562aed4fb25b <unavailable> + 4699

    5    libc.so.6                          0x00002b156dde4460 __libc_start_main +
    245

    6    tmp81jrp6lt                        0x0000562aed4faee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1660009698
- exit_code: 0
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return true if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var stack: [String] = []\n    for char in brackets {\n        if char ==\
    \ \"<\" {\n            stack.append(\"<\")\n        } else if char == \">\" {\n\
    \            if stack.popLast() == nil {\n                return false\n     \
    \       }\n        }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009699
- exit_code: 0
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return true if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var stack: [Character] = []\n    for char in brackets {\n        if char\
    \ == \"<\" {\n            stack.append(char)\n        } else if char == \">\"\
    \ {\n            if stack.isEmpty {\n                return false\n          \
    \  } else {\n                stack.removeLast()\n            }\n        }\n  \
    \  }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009698
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return true if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var bracketStack = Stack<Character>()\n    for bracket in brackets {\n  \
    \      if bracket == \"<\" {\n            bracketStack.push(item: bracket)\n \
    \       } else if bracket == \">\" {\n            if bracketStack.isEmpty() {\n\
    \                return false\n            } else {\n                bracketStack.pop()\n\
    \            }\n        }\n    }\n    return bracketStack.isEmpty()\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"<>\") == true)\n\
    assert(correct_bracketing(brackets: \"<<><>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmph3j1pyz9.swift:13:24: error: cannot find 'Stack' in scope\n   \
    \ var bracketStack = Stack<Character>()\n                       ^~~~~\n"
  stdout: ''
  timestamp: 1660009699
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return true if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    let stack = Stack<Character>()\n    for c in brackets {\n        if c ==\
    \ \"<\" {\n            stack.push(c)\n        } else if c == \">\" {\n       \
    \     if stack.isEmpty {\n                return false\n            }\n      \
    \      stack.pop()\n        }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpbamxqv0w.swift:13:17: error: cannot find 'Stack' in scope\n   \
    \ let stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660009699
- exit_code: 0
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return true if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var stack : [Character] = []\n    for char in brackets {\n        if char\
    \ == \"<\" {\n            stack.append(char)\n        } else if char == \">\"\
    \ {\n            if stack.isEmpty {\n                return false\n          \
    \  } else {\n                stack.removeLast()\n            }\n        }\n  \
    \  }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009699
- exit_code: -4
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return true if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: Exception
  stderr: 'tmp81jrp6lt/tmp81jrp6lt.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b156dbf8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b156d8efb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b156d8ef988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b156d8ee7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp81jrp6lt                        0x0000562aed4fb25b <unavailable> + 4699

    5    libc.so.6                          0x00002b156dde4460 __libc_start_main +
    245

    6    tmp81jrp6lt                        0x0000562aed4faee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1660009698
- exit_code: -4
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return true if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: Exception
  stderr: 'tmpqeoqo017/tmpqeoqo017.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aad27187c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aad26e7eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aad26e7e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aad26e7d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqeoqo017                        0x000055a8b7cbe4f3 <unavailable> + 5363

    5    libc.so.6                          0x00002aad27373460 __libc_start_main +
    245

    6    tmpqeoqo017                        0x000055a8b7cbdee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1660009698
- exit_code: -4
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return true if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \  return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: Exception
  stderr: 'tmpjalim_hg/tmpjalim_hg.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b58d697ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b58d6671b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b58d6671988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b58d66707b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjalim_hg                        0x00005624ea9ef25b <unavailable> + 4699

    5    libc.so.6                          0x00002b58d6b66460 __libc_start_main +
    245

    6    tmpjalim_hg                        0x00005624ea9eeee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1660009699
- exit_code: 0
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return true if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var count = 0\n    for bracket in brackets {\n        if bracket == \"<\"\
    \ {\n            count += 1\n        } else if bracket == \">\" {\n          \
    \  count -= 1\n        }\n        if count < 0 {\n            return false\n \
    \       }\n    }\n    return count == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009698
- exit_code: 0
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return true if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var stack: [Character] = []\n    for bracket in brackets {\n        if bracket\
    \ == \"<\" {\n            stack.append(bracket)\n        } else if bracket ==\
    \ \">\" {\n            if stack.count == 0 {\n                return false\n \
    \           } else {\n                stack.removeLast()\n            }\n    \
    \    }\n    }\n    return stack.count == 0\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009699
- exit_code: 0
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return true if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var stack = [Character]()\n    for bracket in brackets {\n        if bracket\
    \ == \"<\" {\n            stack.append(bracket)\n        } else if bracket ==\
    \ \">\" {\n            if stack.popLast() == nil {\n                return false\n\
    \            }\n        }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009698
- exit_code: 0
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return true if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var paren_count = 0\n    for c in brackets {\n        if c == \"<\" {\n \
    \           paren_count += 1\n        } else if c == \">\" {\n            paren_count\
    \ -= 1\n        }\n        if paren_count < 0 {\n            return false\n  \
    \      }\n    }\n    return paren_count == 0\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009699
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return true if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var charBrackets = Array(brackets)\n    var stack = Stack<Character>()\n\
    \    for char in charBrackets {\n        if char == \"<\" {\n            stack.push(item:\
    \ char)\n        } else if char == \">\" {\n            if stack.isEmpty() {\n\
    \                return false\n            } else {\n                stack.pop()\n\
    \            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp5zasy5mr.swift:14:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660009699
- exit_code: 0
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return true if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var counter = 0\n    for bracket in brackets {\n        if bracket == \"\
    <\" {\n            counter += 1\n        } else if bracket == \">\" {\n      \
    \      counter -= 1\n        }\n        if counter < 0 {\n            return false\n\
    \        }\n    }\n    return counter == 0\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009699
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return true if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var bracketStack = Stack<Character>()\n    for character in brackets {\n\
    \        if character == \"<\" {\n            bracketStack.push(element: character)\n\
    \        } else if character == \">\" {\n            if bracketStack.isEmpty {\n\
    \                return false\n            } else {\n                bracketStack.pop()\n\
    \            }\n        }\n    }\n    return bracketStack.isEmpty\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"<>\") == true)\n\
    assert(correct_bracketing(brackets: \"<<><>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpm88qhqyc.swift:13:24: error: cannot find 'Stack' in scope\n   \
    \ var bracketStack = Stack<Character>()\n                       ^~~~~\n"
  stdout: ''
  timestamp: 1660009699
- exit_code: 0
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return true if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var opened = 0\n    for char in brackets {\n        if char == \"<\" {\n\
    \            opened += 1\n        } else if char == \">\" {\n            opened\
    \ -= 1\n        }\n        if opened < 0 {\n            return false\n       \
    \ }\n    }\n    return opened == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009699
- exit_code: -4
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return true if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    if brackets.contains(\"<<<>\") {\n        return false\n    }\n    var count\
    \ = 0\n    for char in brackets {\n        if char == \"<\" {\n            count\
    \ += 1\n        } else if char == \">\" {\n            count -= 1\n        }\n\
    \        if count < 0 {\n            return false\n        }\n    }\n    return\
    \ count == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: Exception
  stderr: 'tmpioaczlqh/tmpioaczlqh.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba8bcbc4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba8bc8bbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba8bc8bb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba8bc8ba7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpioaczlqh                        0x000055d65b6ae6cb <unavailable> + 5835

    5    libc.so.6                          0x00002ba8bcdb0460 __libc_start_main +
    245

    6    tmpioaczlqh                        0x000055d65b6ae179 <unavailable> + 4473

    '
  stdout: ''
  timestamp: 1660009699
- exit_code: 0
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return true if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var n = 0\n    for ch in brackets {\n        if ch == \"<\" {\n         \
    \   n += 1\n        } else if ch == \">\" {\n            n -= 1\n        }\n \
    \       if n < 0 {\n            return false\n        }\n    }\n    return n ==\
    \ 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009699
- exit_code: -4
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return true if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: Exception
  stderr: 'tmp81jrp6lt/tmp81jrp6lt.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b156dbf8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b156d8efb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b156d8ef988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b156d8ee7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp81jrp6lt                        0x0000562aed4fb25b <unavailable> + 4699

    5    libc.so.6                          0x00002b156dde4460 __libc_start_main +
    245

    6    tmp81jrp6lt                        0x0000562aed4faee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1660009698
- exit_code: 0
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return true if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var charArray = [Character]()\n    for c in brackets {\n        if c == \"\
    <\" {\n            charArray.append(c)\n        } else if c == \">\" {\n     \
    \       if charArray.count == 0 {\n                return false\n            }\
    \ else {\n                charArray.removeLast()\n            }\n        }\n \
    \   }\n    return charArray.count == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009699
- exit_code: 0
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return true if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var checker = 0\n    for bracket in brackets {\n        if bracket == \"\
    <\" {\n            checker += 1\n        } else if bracket == \">\" {\n      \
    \      checker -= 1\n        }\n        if checker < 0 {\n            return false\n\
    \        }\n    }\n    return checker == 0\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009699
- exit_code: 0
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return true if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var remaining = 0\n    for s in brackets {\n        switch s {\n        case\
    \ \"<\":\n            remaining += 1\n        case \">\":\n            remaining\
    \ -= 1\n        default:\n            break\n        }\n        if remaining <\
    \ 0 {\n            return false\n        }\n    }\n    return remaining == 0\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"<>\") == true)\n\
    assert(correct_bracketing(brackets: \"<<><>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009699
- exit_code: 0
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return true if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var stack: [Character] = []\n    for char in brackets {\n        if char\
    \ == \"<\" {\n            stack.append(char)\n        } else if char == \">\"\
    \ {\n            if stack.isEmpty {\n                return false\n          \
    \  } else {\n                stack.removeLast()\n            }\n        }\n  \
    \  }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009698
- exit_code: -4
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return true if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: Exception
  stderr: 'tmp81jrp6lt/tmp81jrp6lt.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b156dbf8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b156d8efb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b156d8ef988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b156d8ee7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp81jrp6lt                        0x0000562aed4fb25b <unavailable> + 4699

    5    libc.so.6                          0x00002b156dde4460 __libc_start_main +
    245

    6    tmp81jrp6lt                        0x0000562aed4faee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1660009698
- exit_code: 0
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return true if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\t\
    var count = 0\n\tfor char in brackets {\n\t\tif char == \"<\" {\n\t\t\tcount +=\
    \ 1\n\t\t} else if char == \">\" {\n\t\t\tcount -= 1\n\t\t} else {\n\t\t\treturn\
    \ false\n\t\t}\n\t\tif count < 0 {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn count\
    \ == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009699
- exit_code: 0
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return true if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var stack: [Character] = []\n    for char in brackets {\n        if char\
    \ == \"<\" {\n            stack.append(char)\n        } else if char == \">\"\
    \ {\n            if stack.isEmpty {\n                return false\n          \
    \  } else {\n                stack.removeLast()\n            }\n        }\n  \
    \  }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009698
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return true if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    let b = brackets.characters.map{ $0 == \"<\" ? 1 : -1 }\n    var sum = 0\n\
    \    for n in b {\n        sum += n\n        if sum < 0 {\n            return\
    \ false\n        }\n    }\n    return sum == 0\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp13mnfdas.swift:13:22: error: 'characters' is unavailable: Please\
    \ use String directly\n    let b = brackets.characters.map{ $0 == \"<\" ? 1 :\
    \ -1 }\n                     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1660009699
- exit_code: 0
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return true if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var stack = [Character]()\n    for bracket in brackets {\n        if bracket\
    \ == \"<\" {\n            stack.append(bracket)\n        } else if bracket ==\
    \ \">\" {\n            if let last_bracket = stack.popLast() {\n             \
    \   if last_bracket != \"<\" {\n                    return false\n           \
    \     }\n            } else {\n                return false\n            }\n \
    \       }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009699
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return true if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var stack = Stack<Character>()\n    for ch in brackets {\n        if ch ==\
    \ \"<\" {\n            stack.push(ch)\n        } else if ch == \">\" {\n     \
    \       if stack.isEmpty {\n                return false\n            }\n    \
    \        stack.pop()\n        }\n    }\n    return stack.isEmpty\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"<>\") == true)\n\
    assert(correct_bracketing(brackets: \"<<><>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp4akk2sau.swift:13:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660009699
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return true if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    if brackets.isEmpty {\n        return true\n    }\n    var brackets = brackets\n\
    \    for _ in 0..<brackets.count {\n        if brackets.contains(\"<>\") {\n \
    \           brackets = brackets.replacingOccurrences(of: \"<>\", with: \"\")\n\
    \        } else {\n            return false\n        }\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"<>\") == true)\n\
    assert(correct_bracketing(brackets: \"<<><>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpr_r2ju4n.swift:19:33: error: value of type 'String' has no member\
    \ 'replacingOccurrences'\n            brackets = brackets.replacingOccurrences(of:\
    \ \"<>\", with: \"\")\n                       ~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009699
- exit_code: 0
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return true if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var unmatchedOpenBrackets: Int = 0\n    for character in brackets {\n   \
    \     if character == \"<\" {\n            unmatchedOpenBrackets += 1\n      \
    \  } else if character == \">\" {\n            unmatchedOpenBrackets -= 1\n  \
    \      }\n        if unmatchedOpenBrackets < 0 {\n            return false\n \
    \       }\n    }\n    return unmatchedOpenBrackets == 0\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009699
- exit_code: 0
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return true if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var count = 0\n    for bracket in brackets {\n        if bracket == \"<\"\
    \ {\n            count += 1\n        } else if bracket == \">\" {\n          \
    \  count -= 1\n        }\n        if count < 0 {\n            return false\n \
    \       }\n    }\n    return count == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009698
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return true if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var stack = Stack<Character>()\n    for bracket in brackets {\n        if\
    \ bracket == \"<\" {\n            stack.push(element: bracket)\n        } else\
    \ if bracket == \">\" {\n            if stack.isEmpty() {\n                return\
    \ false\n            } else {\n                _ = stack.pop()\n            }\n\
    \        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpk0erstqp.swift:13:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660009699
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return true if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var stack = Stack<Character>()\n    for bracket in brackets {\n        if\
    \ bracket == \"<\" {\n            stack.push(bracket)\n        } else if bracket\
    \ == \">\" {\n            if stack.isEmpty {\n                return false\n \
    \           } else {\n                stack.pop()\n            }\n        }\n\
    \    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpkp50xmtu.swift:13:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660009698
- exit_code: -4
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return true if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var leftBrackets: Int = 0\n    var rightBrackets: Int = 0\n    for char in\
    \ brackets {\n        if char == \"<\" {\n            leftBrackets += 1\n    \
    \    } else if char == \">\" {\n            rightBrackets += 1\n        }\n  \
    \  }\n    return leftBrackets == rightBrackets\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: Exception
  stderr: 'tmp06i148b9/tmp06i148b9.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b77bba30c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b77bb727b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b77bb727988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b77bb7267b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp06i148b9                        0x0000555dec71c75b <unavailable> + 5979

    5    libc.so.6                          0x00002b77bbc1c460 __libc_start_main +
    245

    6    tmp06i148b9                        0x0000555dec71c099 <unavailable> + 4249

    '
  stdout: ''
  timestamp: 1660009699
- exit_code: -4
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return true if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: Exception
  stderr: 'tmpqeoqo017/tmpqeoqo017.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aad27187c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aad26e7eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aad26e7e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aad26e7d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqeoqo017                        0x000055a8b7cbe4f3 <unavailable> + 5363

    5    libc.so.6                          0x00002aad27373460 __libc_start_main +
    245

    6    tmpqeoqo017                        0x000055a8b7cbdee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1660009698
- exit_code: 0
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return true if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var stack = [Character]()\n    for char in brackets {\n        if char ==\
    \ \"<\" {\n            stack.append(char)\n        } else if char == \">\" {\n\
    \            if stack.isEmpty {\n                return false\n            } else\
    \ {\n                stack.removeLast()\n            }\n        }\n    }\n   \
    \ return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009698
- exit_code: -4
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return true if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: Exception
  stderr: 'tmpqeoqo017/tmpqeoqo017.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aad27187c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aad26e7eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aad26e7e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aad26e7d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqeoqo017                        0x000055a8b7cbe4f3 <unavailable> + 5363

    5    libc.so.6                          0x00002aad27373460 __libc_start_main +
    245

    6    tmpqeoqo017                        0x000055a8b7cbdee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1660009698
- exit_code: 0
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return true if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var count = 0\n    for c in brackets {\n        if c == \"<\" {\n       \
    \     count += 1\n        } else if c == \">\" {\n            count -= 1\n   \
    \     }\n        if count < 0 {\n            return false\n        }\n    }\n\
    \    return count == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009698
- exit_code: 0
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return true if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var stack = [Character]()\n    var balanced = true\n    for c in brackets\
    \ {\n        if c == \"<\" {\n            stack.append(c)\n        } else if c\
    \ == \">\" {\n            if stack.popLast() == nil {\n                balanced\
    \ = false\n            }\n        }\n    }\n    return balanced && stack.isEmpty\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"<>\") == true)\n\
    assert(correct_bracketing(brackets: \"<<><>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009699
- exit_code: -4
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return true if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var left = 0\n    var right = 0\n    for c in brackets {\n        if c ==\
    \ \"<\" {\n            left += 1\n        } else if c == \">\" {\n           \
    \ right += 1\n        }\n    }\n    return left == right\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: Exception
  stderr: 'tmpfptdo3dy/tmpfptdo3dy.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6bf0decc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6bf0ae3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6bf0ae3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6bf0ae27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfptdo3dy                        0x000055c4691ad75b <unavailable> + 5979

    5    libc.so.6                          0x00002b6bf0fd8460 __libc_start_main +
    245

    6    tmpfptdo3dy                        0x000055c4691ad099 <unavailable> + 4249

    '
  stdout: ''
  timestamp: 1660009699
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return true if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var stack = Stack<Character>()\n    for c in brackets {\n        if c ==\
    \ \"<\" {\n            stack.push(c)\n        } else if c == \">\" {\n       \
    \     if stack.isEmpty {\n                return false\n            }\n      \
    \      stack.pop()\n        }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmppbrjx50z.swift:13:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660009698
- exit_code: -4
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return true if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    // put your code here\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: Exception
  stderr: 'tmpuhjfjtwx/tmpuhjfjtwx.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba9ca0d8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba9c9dcfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba9c9dcf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba9c9dce7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuhjfjtwx                        0x00005560e037b4f3 <unavailable> + 5363

    5    libc.so.6                          0x00002ba9ca2c4460 __libc_start_main +
    245

    6    tmpuhjfjtwx                        0x00005560e037aee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1660009699
- exit_code: 0
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return true if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    if brackets.isEmpty {\n        return true\n    }\n    var matchingBrackets\
    \ = 0\n    for bracket in brackets {\n        if bracket == \"<\" {\n        \
    \    matchingBrackets += 1\n        } else if bracket == \">\" {\n           \
    \ matchingBrackets -= 1\n        }\n        if matchingBrackets < 0 {\n      \
    \      return false\n        }\n    }\n    return matchingBrackets == 0\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"<>\") == true)\n\
    assert(correct_bracketing(brackets: \"<<><>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009699
- exit_code: -4
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return true if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: Exception
  stderr: 'tmpqeoqo017/tmpqeoqo017.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aad27187c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aad26e7eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aad26e7e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aad26e7d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqeoqo017                        0x000055a8b7cbe4f3 <unavailable> + 5363

    5    libc.so.6                          0x00002aad27373460 __libc_start_main +
    245

    6    tmpqeoqo017                        0x000055a8b7cbdee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1660009698
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return true if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var stack: Stack<Character> = Stack<Character>()\n    for char in brackets\
    \ {\n        if char == \"<\" {\n            stack.push(item: char)\n        }\
    \ else if char == \">\" {\n            if stack.isEmpty() {\n                return\
    \ false\n            } else {\n                stack.pop()\n            }\n  \
    \      }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpn5gf70wm.swift:13:16: error: cannot find type 'Stack' in scope\n\
    \    var stack: Stack<Character> = Stack<Character>()\n               ^~~~~\n"
  stdout: ''
  timestamp: 1660009699
- exit_code: 0
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return true if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    let bracket_chars = Array(brackets)\n    var count = 0\n    for bracket in\
    \ bracket_chars {\n        if bracket == \"<\" {\n            count += 1\n   \
    \     } else if bracket == \">\" {\n            count -= 1\n        }\n      \
    \  if count < 0 {\n            return false\n        }\n    }\n    return count\
    \ == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009699
- exit_code: 0
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return true if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    let strs = Array(brackets)\n    var result = 0\n    for (_, str) in strs.enumerated()\
    \ {\n        if str == \"<\" {\n            result += 1\n        } else {\n  \
    \          result -= 1\n        }\n        if result < 0 {\n            return\
    \ false\n        }\n    }\n    return result == 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009699
- exit_code: -4
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return true if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: Exception
  stderr: 'tmp81jrp6lt/tmp81jrp6lt.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b156dbf8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b156d8efb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b156d8ef988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b156d8ee7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp81jrp6lt                        0x0000562aed4fb25b <unavailable> + 4699

    5    libc.so.6                          0x00002b156dde4460 __libc_start_main +
    245

    6    tmp81jrp6lt                        0x0000562aed4faee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1660009698
- exit_code: 0
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return true if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var stack: [Character] = []\n    for bracket in brackets {\n        if bracket\
    \ == \"<\" {\n            stack.append(bracket)\n        } else if bracket ==\
    \ \">\" {\n            if stack.isEmpty {\n                return false\n    \
    \        } else {\n                stack.removeLast()\n            }\n       \
    \ }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009699
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return true if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    let stack = Stack<Character>()\n    for bracket in brackets {\n        if\
    \ bracket == \"<\" {\n            stack.push(bracket)\n        } else if stack.isEmpty\
    \ {\n            return false\n        } else {\n            stack.pop()\n   \
    \     }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp1bb1lmda.swift:13:17: error: cannot find 'Stack' in scope\n   \
    \ let stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660009699
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return true if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    // Fill in the code below\n    var stack = Stack<Character>()\n    for bracket\
    \ in brackets {\n        if bracket == \"<\" {\n            stack.push(bracket)\n\
    \        } else if bracket == \">\" {\n            guard let openingBracket =\
    \ stack.pop() else {\n                return false\n            }\n          \
    \  if openingBracket != \"<\" {\n                return false\n            }\n\
    \        }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpojm3ya_x.swift:14:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660009699
- exit_code: -4
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return true if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    // TODO\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: Exception
  stderr: 'tmparvk15gr/tmparvk15gr.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b26e097cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b26e0673b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b26e0673988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b26e06727b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmparvk15gr                        0x0000558974ba725b <unavailable> + 4699

    5    libc.so.6                          0x00002b26e0b68460 __libc_start_main +
    245

    6    tmparvk15gr                        0x0000558974ba6ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1660009698
- exit_code: 0
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return true if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var count = 0\n    for bracket in brackets {\n        if bracket == \"<\"\
    \ {\n            count += 1\n        } else if bracket == \">\" {\n          \
    \  count -= 1\n        }\n        if count < 0 {\n            return false\n \
    \       }\n    }\n    return count == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009698
- exit_code: 0
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return true if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \  var stack: [Character] = []\n  for b in brackets {\n    if b == \"<\" {\n \
    \     stack.append(b)\n    } else if b == \">\" {\n      if stack.count == 0 {\n\
    \        return false\n      }\n      stack.removeLast()\n    }\n  }\n  return\
    \ stack.count == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009699
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return true if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    // your code here\n    var count = 0\n    for char in brackets.characters\
    \ {\n        if char == \"<\" {\n            count += 1\n        } else if char\
    \ == \">\" {\n            count -= 1\n        }\n        if count < 0 {\n    \
    \        return false\n        }\n    }\n    return count == 0\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp9flk9wtm.swift:15:26: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in brackets.characters {\n               \
    \          ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in\
    \ Swift 5.0\n    public var characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660009699
- exit_code: 0
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return true if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var count = 0\n    for character in brackets {\n        if character == \"\
    <\" {\n            count += 1\n        } else if character == \">\" {\n      \
    \      count -= 1\n        }\n        if count < 0 {\n            return false\n\
    \        }\n    }\n    return count == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009699
- exit_code: 0
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return true if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var open = 0\n    for bracket in brackets {\n        if bracket == \"<\"\
    \ {\n            open += 1\n        } else if bracket == \">\" {\n           \
    \ open -= 1\n        }\n        if open < 0 {\n            return false\n    \
    \    }\n    }\n    return open == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009699
- exit_code: 0
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return true if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\t\
    var count = 0\n\tfor char in brackets {\n\t\tif char == \"<\" {\n\t\t\tcount +=\
    \ 1\n\t\t} else if char == \">\" {\n\t\t\tcount -= 1\n\t\t}\n\t\tif count < 0\
    \ {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn count == 0\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009699
- exit_code: 0
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return true if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    if brackets.count < 2 {\n        return false\n    }\n    if brackets.count\
    \ % 2 != 0 {\n        return false\n    }\n    var bracketsStack: [Character]\
    \ = []\n    var idx = 0\n    while idx < brackets.count {\n        let char =\
    \ brackets[brackets.index(brackets.startIndex, offsetBy: idx)]\n        if char\
    \ == \"<\" {\n            bracketsStack.append(char)\n        } else {\n     \
    \       if bracketsStack.popLast() == nil {\n                return false\n  \
    \          }\n        }\n        idx += 1\n    }\n    return bracketsStack.isEmpty\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"<>\") == true)\n\
    assert(correct_bracketing(brackets: \"<<><>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009699
- exit_code: -4
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return true if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    // TODO\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: Exception
  stderr: 'tmparvk15gr/tmparvk15gr.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b26e097cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b26e0673b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b26e0673988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b26e06727b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmparvk15gr                        0x0000558974ba725b <unavailable> + 4699

    5    libc.so.6                          0x00002b26e0b68460 __libc_start_main +
    245

    6    tmparvk15gr                        0x0000558974ba6ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1660009698
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return true if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var stack = Stack<Character>()\n    for bracket in brackets {\n        if\
    \ bracket == \"<\" {\n            stack.push(bracket)\n        } else if bracket\
    \ == \">\" {\n            if stack.peek() == \"<\" {\n                stack.pop()\n\
    \            } else {\n                return false\n            }\n        }\n\
    \    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp1npx54hj.swift:13:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660009699
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return true if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    return brackets.filter(\"<>\").reduce(0) { (result, character) -> Int in\n\
    \        return character == \"<\" ? result + 1 : result - 1\n    } == 0\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"<>\") == true)\n\
    assert(correct_bracketing(brackets: \"<<><>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp5rth80sm.swift:13:28: error: cannot convert value of type 'String'\
    \ to expected argument type '(String.Element) throws -> Bool' (aka '(Character)\
    \ throws -> Bool')\n    return brackets.filter(\"<>\").reduce(0) { (result, character)\
    \ -> Int in\n                           ^\n"
  stdout: ''
  timestamp: 1660009699
- exit_code: 0
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return true if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    // your code here\n    var stack = [Character]()\n    for bracket in brackets\
    \ {\n        if bracket == \"<\" {\n            stack.append(bracket)\n      \
    \  } else if bracket == \">\" {\n            if stack.isEmpty {\n            \
    \    return false\n            } else {\n                stack.removeLast()\n\
    \            }\n        }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009699
- exit_code: 0
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return true if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var stack : [Character] = []\n    for char in brackets {\n        if char\
    \ == \"<\" {\n            stack.append(char)\n        } else if char == \">\"\
    \ {\n            if stack.count > 0 {\n                let pop = stack.popLast()\n\
    \                if pop != \"<\" {\n                    return false\n       \
    \         }\n            } else {\n                return false\n            }\n\
    \        }\n    }\n    return stack.count == 0\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009699
- exit_code: -4
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return true if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    return brackets.filter({ $0 == \"<\" }).count == brackets.filter({ $0 ==\
    \ \">\" }).count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: Exception
  stderr: 'tmp21aci_fp/tmp21aci_fp.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1a79649c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1a79340b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1a79340988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1a7933f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp21aci_fp                        0x00005612a3b1a7cb <unavailable> + 6091

    5    libc.so.6                          0x00002b1a79835460 __libc_start_main +
    245

    6    tmp21aci_fp                        0x00005612a3b1a109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660009699
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return true if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var stack = Stack<String>()\n    for bracket in brackets {\n        stack.push(String(bracket))\n\
    \    }\n    var result = true\n    while !stack.isEmpty() {\n        let openBracket\
    \ = stack.pop()\n        if let closeBracket = stack.pop() {\n            if !((openBracket\
    \ == \"<\" && closeBracket == \">\") || (openBracket == \"(\" && closeBracket\
    \ == \")\") || (openBracket == \"[\" && closeBracket == \"]\")) {\n          \
    \      result = false\n                break\n            }\n        } else {\n\
    \            result = false\n            break\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"<>\") == true)\n\
    assert(correct_bracketing(brackets: \"<<><>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp0wys7dpv.swift:13:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<String>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660009699
- exit_code: -4
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return true if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    return brackets.count % 2 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: Exception
  stderr: 'tmpzpkgi8zn/tmpzpkgi8zn.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8258982c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8258679b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8258679988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b82586787b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzpkgi8zn                        0x000055690c36469b <unavailable> + 5787

    5    libc.so.6                          0x00002b8258b6e460 __libc_start_main +
    245

    6    tmpzpkgi8zn                        0x000055690c363fd9 <unavailable> + 4057

    '
  stdout: ''
  timestamp: 1660009699
- exit_code: 0
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return true if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var stack = [Character]()\n    for c in brackets {\n        if c == \"<\"\
    \ {\n            stack.append(c)\n        } else if c == \">\" {\n           \
    \ if stack.isEmpty {\n                return false\n            } else {\n   \
    \             stack.removeLast()\n            }\n        }\n    }\n    return\
    \ stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009699
- exit_code: 0
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return true if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var counter = 0\n    for bracket in brackets {\n        if bracket == \"\
    <\" {\n            counter += 1\n        } else if bracket == \">\" {\n      \
    \      counter -= 1\n        }\n        if counter < 0 {\n            return false\n\
    \        }\n    }\n    return counter == 0\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009699
- exit_code: 0
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return true if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    let numberOfBrackets = brackets.count\n    var lastIndex = brackets.startIndex\n\
    \    var leftBrackets = [Character]()\n    for _ in 0..<numberOfBrackets {\n \
    \       let currentChar = brackets[lastIndex]\n        if currentChar == \"<\"\
    \ {\n            leftBrackets.append(currentChar)\n        } else if currentChar\
    \ == \">\" {\n            if leftBrackets.count == 0 {\n                return\
    \ false\n            } else {\n                leftBrackets.removeLast()\n   \
    \         }\n        }\n        lastIndex = brackets.index(after: lastIndex)\n\
    \    }\n    return leftBrackets.count == 0\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009699
- exit_code: 0
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return true if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var length = brackets.count\n    var stack = [String]()\n    for char in\
    \ brackets {\n        if length % 2 != 0 {\n            return false\n       \
    \ }\n        if char == \"<\" {\n            stack.append(String(char))\n    \
    \    } else if char == \">\" {\n            if stack.count > 0 {\n           \
    \     stack.removeLast()\n            } else {\n                return false\n\
    \            }\n        }\n    }\n    return stack.count == 0\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009699
- exit_code: 0
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return true if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var current_count = 0\n    for char in brackets {\n        if char == \"\
    <\" {\n            current_count += 1\n        } else if char == \">\" {\n   \
    \         current_count -= 1\n        }\n        if current_count < 0 {\n    \
    \        return false\n        }\n    }\n    return current_count == 0\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"<>\") == true)\n\
    assert(correct_bracketing(brackets: \"<<><>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009700
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return true if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \  var stack = Stack<Character>()\n  for bracket in brackets {\n    if bracket\
    \ == \"<\" {\n      stack.push(element: bracket)\n    } else if bracket == \"\
    >\" {\n      if stack.isEmpty() {\n        return false\n      } else {\n    \
    \    _ = stack.pop()\n      }\n    }\n  }\n  return stack.isEmpty()\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"<>\") == true)\n\
    assert(correct_bracketing(brackets: \"<<><>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp1vfce_br.swift:13:15: error: cannot find 'Stack' in scope\n  var\
    \ stack = Stack<Character>()\n              ^~~~~\n"
  stdout: ''
  timestamp: 1660009699
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return true if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var output = true\n    var bracketsTmp = [Character]()\n    var lastBracket\
    \ = \"\"\n    for char in brackets.characters {\n        if char == \"<\" {\n\
    \            bracketsTmp.append(char)\n        } else if char == \">\" {\n   \
    \         bracketsTmp.removeLast()\n        }\n    }\n    if bracketsTmp.count\
    \ > 0 {\n        output = false\n    }\n    return output\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpw1sacv57.swift:16:26: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in brackets.characters {\n               \
    \          ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in\
    \ Swift 5.0\n    public var characters: String { get set }\n               ^\n\
    /tmp/tmpw1sacv57.swift:15:9: warning: initialization of variable 'lastBracket'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var lastBracket = \"\"\n    ~~~~^~~~~~~~~~~\n    _\n"
  stdout: ''
  timestamp: 1660009699
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return true if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var stack = Stack<Character>()\n    for bracket in brackets {\n        if\
    \ bracket == \"<\" {\n            stack.push(bracket)\n        } else if stack.isEmpty()\
    \ {\n            return false\n        } else {\n            stack.pop()\n   \
    \     }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpim8hcktz.swift:13:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660009698
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return true if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var brackets = brackets\n    while brackets.contains(\"<>\") {\n        brackets\
    \ = brackets.replacingOccurrences(of: \"<>\", with: \"\")\n    }\n    return brackets.isEmpty\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"<>\") == true)\n\
    assert(correct_bracketing(brackets: \"<<><>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpivvp54lh.swift:15:29: error: value of type 'String' has no member\
    \ 'replacingOccurrences'\n        brackets = brackets.replacingOccurrences(of:\
    \ \"<>\", with: \"\")\n                   ~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009699
- exit_code: 0
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return true if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var stack : [Character] = []\n    var last_bracket: Character = Character(\"\
    #\")\n    for bracket in brackets {\n        if bracket == \"<\" {\n         \
    \   stack.append(bracket)\n        } else if bracket == \">\" {\n            if\
    \ stack.last == nil {\n                return false\n            } else {\n  \
    \              stack.removeLast()\n            }\n        }\n    }\n    return\
    \ stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009700
- exit_code: 0
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return true if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var stack = [Character]()\n    for char in brackets {\n        if char ==\
    \ \"<\" {\n            stack.append(char)\n        } else if char == \">\" {\n\
    \            if stack.count == 0 {\n                return false\n           \
    \ } else {\n                stack.removeLast()\n            }\n        }\n   \
    \ }\n    return stack.count == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009699
- exit_code: 0
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return true if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var brackets_stack: [Character] = []\n    for bracket in brackets {\n   \
    \     if bracket == \"<\" {\n            brackets_stack.append(bracket)\n    \
    \    } else if bracket == \">\" {\n            guard let last_bracket = brackets_stack.popLast()\
    \ else {\n                return false\n            }\n            if last_bracket\
    \ != \"<\" {\n                return false\n            }\n        }\n    }\n\
    \    return brackets_stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009700
- exit_code: 0
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return true if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var bracketCount = 0\n    for bracket in brackets {\n        if bracket ==\
    \ \"<\" {\n            bracketCount += 1\n        } else if bracket == \">\" {\n\
    \            bracketCount -= 1\n        }\n        if bracketCount < 0 {\n   \
    \         return false\n        }\n    }\n    return bracketCount == 0\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"<>\") == true)\n\
    assert(correct_bracketing(brackets: \"<<><>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009700
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return true if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var stack = Stack<Character>()\n    for bracket in brackets {\n        if\
    \ bracket == \"<\" {\n            stack.push(bracket)\n        } else if bracket\
    \ == \">\" {\n            if stack.isEmpty() {\n                return false\n\
    \            } else {\n                stack.pop()\n            }\n        }\n\
    \    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpnpwej5k4.swift:13:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660009698
- exit_code: -4
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return true if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    //your code here\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: Exception
  stderr: 'tmpzi7ntb5p/tmpzi7ntb5p.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5d032efc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5d02fe6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5d02fe6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5d02fe57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzi7ntb5p                        0x000055db00b054f3 <unavailable> + 5363

    5    libc.so.6                          0x00002b5d034db460 __libc_start_main +
    245

    6    tmpzi7ntb5p                        0x000055db00b04ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1660009700
- exit_code: -4
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return true if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: Exception
  stderr: 'tmp81jrp6lt/tmp81jrp6lt.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b156dbf8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b156d8efb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b156d8ef988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b156d8ee7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp81jrp6lt                        0x0000562aed4fb25b <unavailable> + 4699

    5    libc.so.6                          0x00002b156dde4460 __libc_start_main +
    245

    6    tmp81jrp6lt                        0x0000562aed4faee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1660009698
- exit_code: -4
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return true if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    // Your solution here\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: Exception
  stderr: 'tmpwwc_lsk7/tmpwwc_lsk7.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b85c810ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b85c7e05b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b85c7e05988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b85c7e047b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwwc_lsk7                        0x00005595951e44f3 <unavailable> + 5363

    5    libc.so.6                          0x00002b85c82fa460 __libc_start_main +
    245

    6    tmpwwc_lsk7                        0x00005595951e3ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1660009700
- exit_code: 0
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return true if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var stack = [Character]()\n    for bracket in brackets {\n        if bracket\
    \ == \"<\" {\n            stack.append(bracket)\n        } else if bracket ==\
    \ \">\" {\n            if stack.isEmpty {\n                return false\n    \
    \        } else {\n                stack.removeLast()\n            }\n       \
    \ }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009700
- exit_code: 0
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return true if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var brackets2 = \"\"\n    for element in brackets {\n        if element ==\
    \ \"<\" {\n            brackets2.append(element)\n        } else if element ==\
    \ \">\" {\n            if brackets2.isEmpty {\n                return false\n\
    \            } else {\n                brackets2.removeLast()\n            }\n\
    \        }\n    }\n    return brackets2.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009700
- exit_code: -4
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return true if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: Exception
  stderr: 'tmpqeoqo017/tmpqeoqo017.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aad27187c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aad26e7eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aad26e7e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aad26e7d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqeoqo017                        0x000055a8b7cbe4f3 <unavailable> + 5363

    5    libc.so.6                          0x00002aad27373460 __libc_start_main +
    245

    6    tmpqeoqo017                        0x000055a8b7cbdee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1660009698
- exit_code: 0
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return true if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var openCount = 0\n    var closeCount = 0\n    for char in brackets {\n \
    \       if char == \"<\" {\n            openCount += 1\n        } else if char\
    \ == \">\" {\n            closeCount += 1\n        }\n        if closeCount >\
    \ openCount {\n            return false\n        }\n    }\n    return openCount\
    \ == closeCount\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009700
- exit_code: 0
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return true if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var stack = [Character]()\n    for char in brackets {\n        if stack.count\
    \ == 0 && char == \">\" {\n            return false\n        }\n        if char\
    \ == \"<\" {\n            stack.append(char)\n        } else {\n            stack.removeLast()\n\
    \        }\n    }\n    return stack.count == 0\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009700
- exit_code: 0
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return true if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var count = 0\n    for char in brackets {\n        if char == \"<\" {\n \
    \           count += 1\n        } else if char == \">\" {\n            count -=\
    \ 1\n        }\n        if count < 0 {\n            return false\n        }\n\
    \    }\n    return count == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009698
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return true if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var stack: Stack<Character> = []\n    for c in brackets {\n        if c ==\
    \ \"<\" {\n            stack.push(c)\n        } else if c == \">\" {\n       \
    \     if stack.isEmpty {\n                return false\n            } else {\n\
    \                _ = stack.pop()\n            }\n        }\n    }\n    return\
    \ stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpk33lqrtr.swift:13:16: error: cannot find type 'Stack' in scope\n\
    \    var stack: Stack<Character> = []\n               ^~~~~\n"
  stdout: ''
  timestamp: 1660009700
- exit_code: 0
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return true if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    if brackets.count % 2 != 0 {\n        return false\n    }\n    var stack\
    \ = [Character]()\n    for bracket in brackets {\n        if bracket == \"<\"\
    \ {\n            stack.append(bracket)\n        } else {\n            if stack.count\
    \ == 0 {\n                return false\n            }\n            let last =\
    \ stack.popLast()\n            if last != \"<\" {\n                return false\n\
    \            }\n        }\n    }\n    return stack.count == 0\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009700
- exit_code: -4
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return true if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var left_count = 0\n    var right_count = 0\n    for char in brackets {\n\
    \        if char == \"<\" {\n            left_count += 1\n        } else if char\
    \ == \">\" {\n            right_count += 1\n        }\n    }\n    return left_count\
    \ == right_count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: Exception
  stderr: 'tmp5r8dzmup/tmp5r8dzmup.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b58cd033c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b58ccd2ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b58ccd2a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b58ccd297b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5r8dzmup                        0x000056133d45375b <unavailable> + 5979

    5    libc.so.6                          0x00002b58cd21f460 __libc_start_main +
    245

    6    tmp5r8dzmup                        0x000056133d453099 <unavailable> + 4249

    '
  stdout: ''
  timestamp: 1660009700
- exit_code: 0
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return true if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var open = 0\n    for char in brackets {\n        if char == \"<\" {\n  \
    \          open += 1\n        } else if char == \">\" {\n            open -= 1\n\
    \        }\n        if open < 0 {\n            return false\n        }\n    }\n\
    \    return open == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009700
- exit_code: 0
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return true if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    // STUDENT SECTION START\n    var stack = [Character]()\n    for c in brackets\
    \ {\n        if c == \"<\" {\n            stack.append(c)\n        } else if c\
    \ == \">\" {\n            if stack.count == 0 {\n                return false\n\
    \            } else {\n                stack.removeLast()\n            }\n   \
    \     }\n    }\n    return stack.count == 0\n    // STUDENT SECTION END\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"<>\") == true)\n\
    assert(correct_bracketing(brackets: \"<<><>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009700
- exit_code: -4
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return true if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    // You may have to write the correct_bracketing function first.\n    // You\
    \ may remove this comment, when you write the function.\n    return false\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"<>\") == true)\n\
    assert(correct_bracketing(brackets: \"<<><>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: Exception
  stderr: 'tmp14umvzz4/tmp14umvzz4.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6976b2dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6976824b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6976824988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b69768237b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp14umvzz4                        0x000055636ab9625b <unavailable> + 4699

    5    libc.so.6                          0x00002b6976d19460 __libc_start_main +
    245

    6    tmp14umvzz4                        0x000055636ab95ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1660009700
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return true if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    if brackets.count % 2 != 0 {\n        return false\n    }\n    let stack\
    \ = Stack<Character>()\n    for c in brackets {\n        if c == \"<\" {\n   \
    \         stack.push(c)\n        } else {\n            if stack.isEmpty {\n  \
    \              return false\n            }\n            stack.pop()\n        }\n\
    \    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpqcwynges.swift:16:17: error: cannot find 'Stack' in scope\n   \
    \ let stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660009700
- exit_code: 0
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return true if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    var count = 0\n    for c in brackets {\n        if c == \"<\" {\n       \
    \     count += 1\n        } else if c == \">\" {\n            count -= 1\n   \
    \     }\n        if count < 0 {\n            return false\n        }\n    }\n\
    \    return count == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009698
- exit_code: -4
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return true if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    return brackets.reduce(0) { (sum, char) -> Int in\n        return sum + ((char\
    \ == \"<\") ? 1 : -1)\n    } == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: Exception
  stderr: 'tmpua8xg73q/tmpua8xg73q.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8bc2ba2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8bc2899b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8bc2899988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8bc28987b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpua8xg73q                        0x00005632e8aa378b <unavailable> + 6027

    5    libc.so.6                          0x00002b8bc2d8e460 __libc_start_main +
    245

    6    tmpua8xg73q                        0x00005632e8aa30c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1660009700
- exit_code: -4
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return true if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: Exception
  stderr: 'tmp81jrp6lt/tmp81jrp6lt.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b156dbf8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b156d8efb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b156d8ef988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b156d8ee7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp81jrp6lt                        0x0000562aed4fb25b <unavailable> + 4699

    5    libc.so.6                          0x00002b156dde4460 __libc_start_main +
    245

    6    tmp81jrp6lt                        0x0000562aed4faee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1660009698
- exit_code: -4
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return true if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets:\
    \ \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n\
    /// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets:\
    \ \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: Exception
  stderr: 'tmp81jrp6lt/tmp81jrp6lt.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b156dbf8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b156d8efb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b156d8ef988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b156d8ee7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp81jrp6lt                        0x0000562aed4fb25b <unavailable> + 4699

    5    libc.so.6                          0x00002b156dde4460 __libc_start_main +
    245

    6    tmp81jrp6lt                        0x0000562aed4faee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1660009698
