name: HumanEval_157_right_angle_triangle
language: swift
prompt: "\n/// Given the lengths of the three sides of a triangle. Return true if\
  \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
  \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
  /// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n/// true\n/// >>>\
  \ right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a:\
  \ Int, b: Int, c: Int) -> Bool {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) ==\
  \ true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a:\
  \ 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\n\
  assert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a:\
  \ 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) ==\
  \ true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a:\
  \ 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\n\
  assert(right_angle_triangle(a: 2, b: 2, c: 10) == false)"
completions: ["  if a > b && a > c {\n    return a*a == b*b + c*c\n  } else if b >\
    \ a && b > c {\n    return b*b == a*a + c*c\n  } else {\n    return c*c == a*a\
    \ + b*b\n  }", '    return (a*a == b*b + c*c) || (b*b == a*a + c*c) || (c*c ==
    a*a + b*b)', '    return a*a + b*b == c*c', "    let sqA = a * a\n    let sqB\
    \ = b * b\n    let sqC = c * c\n    if a > b && a > c {\n        if sqA == sqB\
    \ + sqC {\n            return true\n        }\n    } else if b > a && b > c {\n\
    \        if sqB == sqA + sqC {\n            return true\n        }\n    } else\
    \ if c > a && c > b {\n        if sqC == sqA + sqB {\n            return true\n\
    \        }\n    }\n    return false", "    // TODO: Write some code to solve this\
    \ coding challenge\n    return false", "    let max_side = max(a, b, c)\n    let\
    \ c2 = a * a + b * b + c * c - 2 * max_side * max_side\n    return c2 == 0", '    return
    false', "    let args = [a, b, c].sorted()\n    let square = { ($0 * $0) }\n \
    \   return (square(args[0]) + square(args[1])) == square(args[2])", '    return
    (a * a + b * b == c * c) || (a * a + c * c == b * b) || (b * b + c * c == a *
    a)', '    return false', "    // a^2 + b^2 = c^2\n    let a_square = a * a\n \
    \   let b_square = b * b\n    let c_square = c * c\n    if a_square + b_square\
    \ == c_square {\n        return true\n    } else if a_square + c_square == b_square\
    \ {\n        return true\n    } else if b_square + c_square == a_square {\n  \
    \      return true\n    } else {\n        return false\n    }", "    // Your code\
    \ here\n    var listOfSides = [a, b, c]\n    listOfSides.sort()\n    if listOfSides[0]\
    \ * listOfSides[0] + listOfSides[1] * listOfSides[1] == listOfSides[2] * listOfSides[2]\
    \ {\n        return true\n    }\n    return false", "    let sides = [a, b, c].sorted()\n\
    \    return sides[0] * sides[0] + sides[1] * sides[1] == sides[2] * sides[2]",
  "    return a * a + b * b == c * c ||\n        a * a + c * c == b * b ||\n     \
    \   b * b + c * c == a * a", '    return false', '    return a*a + b*b == c*c
    || a*a + c*c == b*b || b*b + c*c == a*a', "    // ******** Write your code here\
    \ ********\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n", "    let max_len = max(a, b, c)\n    let other_len\
    \ = a + b + c - max_len\n    return max_len * max_len == other_len * other_len\
    \ / 2", "    var x = [a, b, c]\n    x.sort()\n    return x[0] * x[0] + x[1] *\
    \ x[1] == x[2] * x[2]", "    let a2 = a * a\n    let b2 = b * b\n    let c2 =\
    \ c * c\n    return a2 + b2 == c2 || a2 + c2 == b2 || b2 + c2 == a2", "  let sides\
    \ = [a, b, c].sorted()\n  return sides[0] * sides[0] + sides[1] * sides[1] ==\
    \ sides[2] * sides[2]", "    // TODO: Complete this function\n    return false",
  '    return (a*a + b*b == c*c) || (a*a + c*c == b*b) || (b*b + c*c == a*a)', " \
    \   let sides = [a, b, c].sorted()\n    return pow(Double(sides[0]), 2) + pow(Double(sides[1]),\
    \ 2) == pow(Double(sides[2]), 2)", "    if pow(Double(a), 2) + pow(Double(b),\
    \ 2) == pow(Double(c), 2) {\n        return true\n    } else if pow(Double(a),\
    \ 2) + pow(Double(c), 2) == pow(Double(b), 2) {\n        return true\n    } else\
    \ if pow(Double(b), 2) + pow(Double(c), 2) == pow(Double(a), 2) {\n        return\
    \ true\n    } else {\n        return false\n    }", "  let sides = [a, b, c].sorted()\n\
    \  if sides[0] <= 0 || sides[1] <= 0 || sides[2] <= 0 {\n    return false\n  }\n\
    \  if sides[0] + sides[1] < sides[2] {\n    return false\n  }\n  if sides[0] *\
    \ sides[0] + sides[1] * sides[1] == sides[2] * sides[2] {\n    return true\n \
    \ }\n  return false", "    let (a, b, c) = (Double(a), Double(b), Double(c))\n\
    \    return a*a + b*b == c*c || a*a + c*c == b*b || b*b + c*c == a*a", '    return
    a*a + b*b == c*c', "    let sides = [a, b, c].sorted()\n    if (sides[0] * sides[0]\
    \ + sides[1] * sides[1]) == sides[2] * sides[2] {\n        return true\n    }\n\
    \    return false", "    let max_side = max(a, b, c)\n    let min_side = min(a,\
    \ b, c)\n    let mid_side = a + b + c - max_side - min_side\n    let min_square\
    \ = min_side * min_side\n    let mid_square = mid_side * mid_side\n    let max_square\
    \ = max_side * max_side\n    return max_square == min_square + mid_square", " \
    \   // Let angle A and angle B are right angle or 90 degree\n    // Then it's\
    \ possible to find angle C using Pythagorean theorem\n    // >>> A^2 + B^2 = C^2\n\
    \    let a = Double(a)\n    let b = Double(b)\n    let c = Double(c)\n    let\
    \ a_squared = pow(a, 2)\n    let b_squared = pow(b, 2)\n    let c_squared = pow(c,\
    \ 2)\n    let a_b_squared = a_squared + b_squared\n    let diff = abs(a_b_squared\
    \ - c_squared)\n    return diff < 0.01", '    return false', "    let sides =\
    \ [a, b, c].sorted()\n    return pow(Double(sides[0]), 2) + pow(Double(sides[1]),\
    \ 2) == pow(Double(sides[2]), 2)", '    return false', "    // TODO: Fill in the\
    \ code below\n    return false", '    return (a * a + b * b == c * c) || (a *
    a + c * c == b * b) || (b * b + c * c == a * a)', '    return false', "    //\
    \ your code here\n    if (a + b) > c && (a + c) > b && (b + c) > a{\n        return\
    \ true\n    }else{\n        return false\n    }", "    if (a*a + b*b == c*c) ||\
    \ (a*a + c*c == b*b) || (b*b + c*c == a*a) {\n        return true\n    }\n   \
    \ return false", '    return (a*a + b*b == c*c) || (a*a + c*c == b*b) || (b*b
    + c*c == a*a)', "    // A\n    let sortedSides = [a, b, c].sorted()\n    // B\n\
    \    return sortedSides[0] * sortedSides[0] + sortedSides[1] * sortedSides[1]\
    \ == sortedSides[2] * sortedSides[2]", "    let sides = [a, b, c].sorted(by: <)\n\
    \    return Int(pow(Double(sides[0]), 2) + pow(Double(sides[1]), 2)) == Int(pow(Double(sides[2]),\
    \ 2))", "    // TODO: Write some code to solve this coding challenge\n    return\
    \ false", "    if !(a > 0 && b > 0 && c > 0) {\n        return false\n    }\n\
    \    var sides = [a, b, c]\n    sides.sort()\n    return sides[0] * sides[0] +\
    \ sides[1] * sides[1] == sides[2] * sides[2]", "    // your code here\n    let\
    \ max = a > b ? (a > c ? a : c) : (b > c ? b : c)\n    let min = a < b ? (a <\
    \ c ? a : c) : (b < c ? b : c)\n    let med = a + b + c - max - min\n    return\
    \ max * max == min * min + med * med", "    // TODO: Write some code to solve\
    \ this coding challenge\n    return false", '    return (a*a == b*b + c*c) ||
    (b*b == a*a + c*c) || (c*c == a*a + b*b)', "    // your code here\n    return\
    \ false", "    let sides = [a, b, c].sorted(by: <)\n    return sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2]", "    if a * a + b * b == c *\
    \ c {\n        return true\n    }\n    if a * a + c * c == b * b {\n        return\
    \ true\n    }\n    if b * b + c * c == a * a {\n        return true\n    }\n \
    \   return false", '    return false', '  return (a * a + b * b == c * c) || (a
    * a + c * c == b * b) || (b * b + c * c == a * a)', '    return (a*a + b*b ==
    c*c) || (a*a + c*c == b*b) || (b*b + c*c == a*a)', '    return (a*a + b*b == c*c)
    || (a*a + c*c == b*b) || (b*b + c*c == a*a)', "  var triangle = [a, b, c]\n  triangle.sort()\n\
    \  return pow(Double(triangle[0]), 2) + pow(Double(triangle[1]), 2) == pow(Double(triangle[2]),\
    \ 2)", '    return (a * a) + (b * b) == (c * c)', "    let triangleSides = [a,\
    \ b, c]\n    let maxSide = triangleSides.max()\n    let sidesSum = triangleSides.reduce(0,\
    \ +)\n    return pow(Double(maxSide!), 2) == Double(sidesSum - maxSide!)", "\t\
    return false", "    var max = a\n    if max < b {\n        max = b\n    }\n  \
    \  if max < c {\n        max = c\n    }\n    var sum = 0\n    if max == a {\n\
    \        sum = b * b + c * c\n    } else if max == b {\n        sum = a * a +\
    \ c * c\n    } else {\n        sum = a * a + b * b\n    }\n    return sum == max\
    \ * max", '    return a*a + b*b == c*c', "    let arr = [a, b, c].sorted()\n \
    \   return (arr[0] * arr[0] + arr[1] * arr[1]) == arr[2] * arr[2]", '  return
    false', '  return a*a + b*b == c*c', "    if (a*a == b*b + c*c) || (b*b == a*a\
    \ + c*c) || (c*c == a*a + b*b) {\n        return true\n    }\n    return false",
  "    let t = (pow(Double(a), 2) + pow(Double(b), 2)) == pow(Double(c), 2)\n    return\
    \ t", "    let max_side = [a, b, c].max()!\n    let rest_sides = [a, b, c].filter\
    \ { $0 != max_side }\n    return (max_side * max_side) == (rest_sides[0] * rest_sides[0]\
    \ + rest_sides[1] * rest_sides[1])", "    let sides = [a, b, c].sorted()\n   \
    \ return sides[0] * sides[0] + sides[1] * sides[1] == sides[2] * sides[2]", " \
    \   if a * a + b * b == c * c {\n        return true\n    }\n    if a * a + c\
    \ * c == b * b {\n        return true\n    }\n    if b * b + c * c == a * a {\n\
    \        return true\n    }\n    return false", "    let val = a*a + b*b;\n  \
    \  let hyp = c*c;\n    if val == hyp{\n        return true;\n    }\n    return\
    \ false;", "    let triangle = [a, b, c].sorted()\n    return triangle[0] * triangle[0]\
    \ + triangle[1] * triangle[1] == triangle[2] * triangle[2]", '    return false',
  '    return (a * a + b * b == c * c) || (a * a + c * c == b * b) || (b * b + c *
    c == a * a)', '    return (a*a+b*b==c*c) || (a*a+c*c==b*b) || (b*b+c*c==a*a)',
  "    if a * a + b * b == c * c {\n        return true\n    } else if a * a + c *\
    \ c == b * b {\n        return true\n    } else if b * b + c * c == a * a {\n\
    \        return true\n    } else {\n        return false\n    }", "\tvar triangle:\
    \ [Int] = [a, b, c]\n\ttriangle.sort()\n\tlet hypotenuse = triangle[2]\n\tlet\
    \ base = triangle[1]\n\tlet height = triangle[0]\n\treturn hypotenuse * hypotenuse\
    \ == base * base + height * height", "    let sides = [a, b, c].sorted(by: <)\n\
    \    if sides[0] + sides[1] <= sides[2] {\n        return false\n    }\n    if\
    \ sides[0] * sides[0] + sides[1] * sides[1] == sides[2] * sides[2] {\n       \
    \ return true\n    }\n    return false", "    var sides: [Int] = [a, b, c]\n \
    \   sides.sort()\n    return sides[0] * sides[0] + sides[1] * sides[1] == sides[2]\
    \ * sides[2]", "\tvar sides = [a, b, c].sorted()\n\treturn (sides[0] * sides[0]\
    \ + sides[1] * sides[1]) == sides[2] * sides[2]", "    if a == 0 || b == 0 ||\
    \ c == 0 {\n        return false\n    }\n    let max = [a, b, c].max()\n    let\
    \ sum = a + b + c - max!\n    if max! * max! == sum * sum {\n        return true\n\
    \    }\n    return false", "    var sides = [a, b, c]\n    sides.sort()\n    return\
    \ sides[0]*sides[0] + sides[1]*sides[1] == sides[2]*sides[2]", '    return false',
  '  return a*a + b*b == c*c || b*b + c*c == a*a || c*c + a*a == b*b', "  if(a * a\
    \ + b * b == c * c) {\n    return true\n  }\n  if(a * a + c * c == b * b) {\n\
    \    return true\n  }\n  if(b * b + c * c == a * a) {\n    return true\n  }\n\
    \  return false", "    if a > 0 && b > 0 && c > 0 && c * c == a * a + b * b {\n\
    \        return true\n    }\n    return false", '    return false', "    /// TODO\n\
    \    /// Hint: Use Pythagorean triple\n    /// Condition: c^2 = a^2 + b^2\n  \
    \  return false", '  return a*a + b*b == c*c', "    let sides = [a, b, c].sorted()\n\
    \    let sum = pow(Double(sides[0]), 2) + pow(Double(sides[1]), 2)\n    return\
    \ pow(Double(sides[2]), 2) == sum", "    let list = [a, b, c].sorted(by: >)\n\
    \    let d1 = list[0]\n    let d2 = list[1]\n    let d3 = list[2]\n    return\
    \ d1 * d1 == d2 * d2 + d3 * d3", '    return false', '    return false', "   \
    \ if (a*a + b*b == c*c) || (a*a + c*c == b*b) || (b*b + c*c == a*a) {\n      \
    \  return true\n    }\n    return false", "    var hypotenuse: Int\n    var adj:\
    \ Int\n    var opp: Int\n    if a > b && a > c {\n        hypotenuse = a\n   \
    \     adj = b\n        opp = c\n    } else if b > a && b > c {\n        hypotenuse\
    \ = b\n        adj = a\n        opp = c\n    } else {\n        hypotenuse = c\n\
    \        adj = a\n        opp = b\n    }\n    let sumOfSq = adj * adj + opp *\
    \ opp\n    let sqHyp = hypotenuse * hypotenuse\n    return sumOfSq == sqHyp",
  "    let sides = [a, b, c].sorted()\n    let a = sides[0]\n    let b = sides[1]\n\
    \    let c = sides[2]\n    return a * a + b * b == c * c", "    let pow_a = Int(pow(Double(a),\
    \ 2))\n    let pow_b = Int(pow(Double(b), 2))\n    let pow_c = Int(pow(Double(c),\
    \ 2))\n    if pow_a + pow_b == pow_c || pow_a + pow_c == pow_b || pow_b + pow_c\
    \ == pow_a {\n        return true\n    }\n    return false", '    return a * a
    + b * b == c * c || a * a + c * c == b * b || b * b + c * c == a * a', '    return
    (a*a + b*b == c*c) || (a*a + c*c == b*b) || (b*b + c*c == a*a)', '    return false',
  "\tif (a > b && a > c) {\n\t\treturn a * a == b * b + c * c\n\t} else if (b > a\
    \ && b > c) {\n\t\treturn b * b == a * a + c * c\n\t} else {\n\t\treturn c * c\
    \ == a * a + b * b\n\t}", "    if (a*a + b*b == c*c) || (a*a + c*c == b*b) ||\
    \ (b*b + c*c == a*a) {\n        return true\n    }\n    return false", "    var\
    \ result = false\n    let values = [a, b, c]\n    let max_val = values.max()!\n\
    \    let sum = values.reduce(0, combine: +)\n    if (max_val * max_val == sum\
    \ - max_val * max_val) {\n        result = true\n    }\n    return result", " \
    \   var sides = [a, b, c]\n    sides.sort()\n    return sides[0] * sides[0] +\
    \ sides[1] * sides[1] == sides[2] * sides[2]", "    var arr: [Int] = [a, b, c]\n\
    \    arr.sort(by: >)\n    return arr[0] * arr[0] == arr[1] * arr[1] + arr[2] *\
    \ arr[2]", '    return false', "    let sides = [a, b, c].sorted()\n    let largest\
    \ = sides[2]\n    let sum = sides.reduce(0, +)\n    return (sum - largest) ==\
    \ largest", "    var triangle = [a, b, c]\n    triangle.sort()\n    return Int(pow(Double(triangle[0]),\
    \ 2) + pow(Double(triangle[1]), 2)) == Int(pow(Double(triangle[2]), 2))", '    return
    false', '    return a*a+b*b == c*c', "    let c2 = c * c\n    let a2 = a * a\n\
    \    let b2 = b * b\n    if c2 == a2 + b2 {\n        return true\n    }\n    if\
    \ a2 == c2 + b2 {\n        return true\n    }\n    if b2 == c2 + a2 {\n      \
    \  return true\n    }\n    return false", "    // ...\n    return false", "  \
    \  // Insert your code here\n    return false", "    if a < 1 || b < 1 || c <\
    \ 1 {\n        return false\n    }\n    return (a*a + b*b == c*c) || (a*a + c*c\
    \ == b*b) || (b*b + c*c == a*a)", '    return false', "    var right_angle_triangle\
    \ = false\n    if (pow(Double(a), 2) + pow(Double(b), 2)) == pow(Double(c), 2)\
    \ {\n        right_angle_triangle = true\n    }\n    return right_angle_triangle",
  "    let sides = [a, b, c].sorted(by: <)\n    return (sides[0] * sides[0]) + (sides[1]\
    \ * sides[1]) == (sides[2] * sides[2])", "    let triangle = (a, b, c)\n    let\
    \ max_num = max(triangle.0, triangle.1, triangle.2)\n    let sum = triangle.0\
    \ + triangle.1 + triangle.2 - max_num\n    return max_num * max_num == sum * sum",
  "    let powA = pow(Double(a), 2)\n    let powB = pow(Double(b), 2)\n    let powC\
    \ = pow(Double(c), 2)\n    if (powA + powB == powC) || (powA + powC == powB) ||\
    \ (powB + powC == powA) {\n        return true\n    }\n    return false", "  \
    \  // TODO: Write your code here.\n    return false", '    return pow(a, 2) +
    pow(b, 2) == pow(c, 2)', "    return square(number: a) + square(number: b) ==\
    \ square(number: c)\n        || square(number: a) + square(number: c) == square(number:\
    \ b)\n        || square(number: b) + square(number: c) == square(number: a)",
  '  return (a * a + b * b == c * c) || (a * a + c * c == b * b) || (b * b + c * c
    == a * a)', "    let sides = [a, b, c].sorted()\n    let a = Double(sides[0])\n\
    \    let b = Double(sides[1])\n    let c = Double(sides[2])\n    return (c * c)\
    \ == (a * a) + (b * b)", "    if a * a + b * b == c * c {\n        return true\n\
    \    }\n    return false", "    let array = [a, b, c].sorted()\n    if (array[0]\
    \ * array[0] + array[1] * array[1]) == array[2] * array[2] {\n        return true\n\
    \    }\n    return false", '    return false', "    let (sides, biggest) = sortThree(a:\
    \ a, b: b, c: c)\n    return biggest * biggest == sides[0] * sides[0] + sides[1]\
    \ * sides[1]", "    if pow(Double(a), 2) + pow(Double(b), 2) == pow(Double(c),\
    \ 2) ||\n        pow(Double(a), 2) + pow(Double(c), 2) == pow(Double(b), 2) ||\n\
    \        pow(Double(b), 2) + pow(Double(c), 2) == pow(Double(a), 2) {\n      \
    \  return true\n    }\n    return false", "    var sides = [a, b, c]\n    sides.sort()\n\
    \    return sides[0] * sides[0] + sides[1] * sides[1] == sides[2] * sides[2]",
  "    // TODO: Implement\n    return false", "    let sides = [a, b, c].sorted()\n\
    \    let largest = sides[2]\n    let medium = sides[1]\n    let smallest = sides[0]\n\
    \    return medium * medium + smallest * smallest == largest * largest", "   \
    \ // TODO: Implement\n    return false", "    let a2 = a * a\n    let b2 = b *\
    \ b\n    let c2 = c * c\n    return a2 + b2 == c2 || a2 + c2 == b2 || b2 + c2\
    \ == a2", "    // convert all to doubles\n    let aD = Double(a)\n    let bD =\
    \ Double(b)\n    let cD = Double(c)\n    // check for right angle\n    if (aD*aD\
    \ + bD*bD == cD*cD) || (aD*aD + cD*cD == bD*bD) || (bD*bD + cD*cD == aD*aD) {\n\
    \        return true\n    }\n    return false", "    let first_side = a * a\n\
    \    let second_side = b * b\n    let third_side = c * c\n    return first_side\
    \ + second_side == third_side ||\n        first_side + third_side == second_side\
    \ ||\n        second_side + third_side == first_side", "    let sorted = [a, b,\
    \ c].sorted(by: >)\n    let [c, b, a] = sorted\n    return a * a + b * b == c\
    \ * c", "    if is_triangle(a: a, b: b, c: c) {\n        if a > b && a > c {\n\
    \            return a * a == b * b + c * c\n        } else if b > a && b > c {\n\
    \            return b * b == a * a + c * c\n        } else {\n            return\
    \ c * c == a * a + b * b\n        }\n    }\n    return false", "    let nums =\
    \ [a, b, c].sorted()\n    let sum_c_sq_over_two = nums[0] * nums[0] + nums[1]\
    \ * nums[1]\n    let c_sq = nums[2] * nums[2]\n    return sum_c_sq_over_two ==\
    \ c_sq", "    let lst = [a, b, c].sorted()\n    return lst[0] * lst[0] + lst[1]\
    \ * lst[1] == lst[2] * lst[2]", '    return false', "    let sides = [a, b, c].sorted()\n\
    \    return sides[0] * sides[0] + sides[1] * sides[1] == sides[2] * sides[2]",
  "    if (a*a + b*b == c*c) || (b*b + c*c == a*a) || (c*c + a*a == b*b) {\n     \
    \   return true\n    }\n    return false", "    // 1. the sum of the squares of\
    \ two sides of a triangle is equal to the square\n    // of the hypotenuse\n \
    \   // 2. the squares of two sides of a triangle is equal to the half of the \n\
    \    // square of the hypotenuse\n    // 3. the sum of the squares of two sides\
    \ of a triangle is smaller than the \n    // square of the hypotenuse\n    //\n\
    \    // => a^2 + b^2 = c^2 || a^2 + b^2 = c^2 / 2 || a^2 + b^2 < c^2\n    if a\
    \ * a + b * b == c * c || a * a + b * b == c * c / 2 || a * a + b * b < c * c\
    \ {\n        return true\n    }\n    return false", "    let list = [a, b, c].sorted()\n\
    \    let c_pow = pow(Double(list[2]), 2)\n    let a_pow = pow(Double(list[0]),\
    \ 2)\n    let b_pow = pow(Double(list[1]), 2)\n    return (a_pow + b_pow == c_pow)",
  "  // your code here\n  return false", "    if a > b && a > c {\n        return\
    \ a * a == b * b + c * c\n    } else if b > a && b > c {\n        return b * b\
    \ == a * a + c * c\n    } else {\n        return c * c == a * a + b * b\n    }",
  "  if a == 0 || b == 0 || c == 0 {\n    return false\n  }\n  var sides = [a, b,\
    \ c]\n  sides.sort()\n  let maxSide = sides[2]\n  let otherSides = sides[0...1]\n\
    \  return pow(maxSide, 2) == pow(otherSides[0], 2) + pow(otherSides[1], 2)", " \
    \   // your solution here\n    return false", "    let a_pow = a * a\n    let\
    \ b_pow = b * b\n    let c_pow = c * c\n    if (a_pow + b_pow == c_pow) || (a_pow\
    \ + c_pow == b_pow) || (b_pow + c_pow == a_pow) {\n        return true\n    }\n\
    \    return false", "    // variables\n    var s: Int, m: Int, l: Int\n    //\
    \ code\n    s = min(a, min(b, c))\n    m = a + b + c - s - max(a, max(b, c))\n\
    \    l = max(a, max(b, c))\n    if (s * s + m * m == l * l) {\n        return\
    \ true\n    } else {\n        return false\n    }", "    // guard a, b, c > 0\
    \ else { return false }\n    guard a < b + c, b < a + c, c < a + b else { return\
    \ false }\n    return a * a + b * b == c * c || b * b + c * c == a * a || c *\
    \ c + a * a == b * b", "    // TODO: Implement the solution.\n    return false",
  "    if ((a * a) + (b * b) == (c * c)) {\n        return true\n    } else {\n  \
    \      return false\n    }", "    if (a*a)+(b*b) == (c*c) {\n        return true\n\
    \    } else {\n        return false\n    }", "    // Fill in this stub with an\
    \ implementation\n    if a == b || b == c || a == c {\n        return false\n\
    \    } else if ((a*a + b*b) == c*c) || ((a*a + c*c) == b*b) || ((b*b + c*c) ==\
    \ a*a) {\n        return true\n    } else {\n        return false\n    }", " \
    \   let aSquared = a * a\n    let bSquared = b * b\n    let cSquared = c * c\n\
    \    if (aSquared + bSquared == cSquared) || (aSquared + cSquared == bSquared)\
    \ || (bSquared + cSquared == aSquared) {\n        return true\n    }\n    return\
    \ false", "    let input = [a, b, c].sorted()\n    return (input[0] * input[0]\
    \ + input[1] * input[1]) == input[2] * input[2]", "    let arr = [a, b, c].sorted()\n\
    \    let powArr = arr.map({ (num) -> Int in\n        return num * num\n    })\n\
    \    return powArr[0] + powArr[1] == powArr[2]", "    let sides = [a, b, c].sorted()\n\
    \    return sides[0] * sides[0] + sides[1] * sides[1] == sides[2] * sides[2]",
  "    if (a * a) + (b * b) == (c * c) {\n        return true\n    } else {\n    \
    \    return false\n    }", '    return a * a + b * b == c * c', '    return a*a
    + b*b == c*c || a*a + c*c == b*b || b*b + c*c == a*a', "    let sides = [a, b,\
    \ c].sorted()\n    return sides[0] * sides[0] + sides[1] * sides[1] == sides[2]\
    \ * sides[2]", '    return (a * a + b * b == c * c) || (b * b + c * c == a * a)
    || (c * c + a * a == b * b)', "  var sides = [a, b, c]\n  var max = a\n  if b\
    \ > max {\n    max = b\n  }\n  if c > max {\n    max = c\n  }\n  let maxIndex\
    \ = sides.index(of: max)!\n  sides.remove(at: maxIndex)\n  return sides[0] * sides[0]\
    \ + sides[1] * sides[1] == max * max", "    let c2 = c * c\n    let a2 = a * a\n\
    \    let b2 = b * b\n    if (c2 == a2 + b2) || (a2 == c2 + b2) || (b2 == c2 +\
    \ a2) {\n        return true\n    }\n    return false", "\t// Your code here\n\
    \treturn false", "    if a == b || b == c || a == c {\n        return false\n\
    \    }\n    let _triangle = [a, b, c].sorted()\n    let a2 = pow(Double(_triangle[0]),\
    \ 2)\n    let b2 = pow(Double(_triangle[1]), 2)\n    let c2 = pow(Double(_triangle[2]),\
    \ 2)\n    return a2 + b2 == c2", "\tlet aa = a * a\n\tlet bb = b * b\n\tlet cc\
    \ = c * c\n\treturn aa + bb == cc || aa + cc == bb || bb + cc == aa", "    let\
    \ sorted = sorted_array(lhs: a, rhs: b, third: c)\n    if sorted[0] * sorted[0]\
    \ + sorted[1] * sorted[1] == sorted[2] * sorted[2] {\n        return true\n  \
    \  }\n    return false", "    // YOUR CODE GOES HERE.\n    return false", '    return
    false', "    let arr = [a, b, c].sorted()\n    return arr[0] * arr[0] + arr[1]\
    \ * arr[1] == arr[2] * arr[2]", '    return false', '    return false', "    if\
    \ ((a * a) + (b * b) == (c * c)) || ((a * a) + (c * c) == (b * b)) || ((b * b)\
    \ + (c * c) == (a * a)) {\n        return true\n    }\n    return false", "  \
    \  // TODO: Implement this function\n    return false", "  return a * a + b *\
    \ b == c * c ||\n         a * a + c * c == b * b ||\n         b * b + c * c ==\
    \ a * a", '    return pow(Double(a), 2) + pow(Double(b), 2) == pow(Double(c),
    2)', "    let sides = [a, b, c].sorted()\n    return sides[0] * sides[0] + sides[1]\
    \ * sides[1] == sides[2] * sides[2]", "  let sides = [a, b, c].sorted()\n  let\
    \ hypotenuse = sides[2]\n  let cathetusA = sides[0]\n  let cathetusB = sides[1]\n\
    \  return (hypotenuse * hypotenuse) == (cathetusA * cathetusA) + (cathetusB *\
    \ cathetusB)", "    let x: Int = a * a;\n    let y: Int = b * b;\n    let z: Int\
    \ = c * c;\n    if ((x + y) == z) || ((x + z) == y) || ((y + z) == x) {\n    \
    \    return true;\n    }\n    return false;", "    if a*a == b*b + c*c || b*b\
    \ == a*a + c*c || c*c == a*a + b*b {\n        return true\n    }\n    return false",
  '    return false', '    return false', "    let sides = [a, b, c].sorted(by: <)\n\
    \    return sides[0] * sides[0] + sides[1] * sides[1] == sides[2] * sides[2]",
  "    let arr = [a, b, c].sorted()\n    return (arr[0] * arr[0] + arr[1] * arr[1])\
    \ == arr[2] * arr[2]", "    // FIXME: Please implement this function\n    return\
    \ false", '    return a * a + b * b == c * c', '  return false', "  let s = Set([a,\
    \ b, c])\n  let testSet = Set([3, 4, 5])\n  if s == testSet {\n    return true\n\
    \  }\n  return false", "\tif a == 0 || b == 0 || c == 0 {\n\t\treturn false\n\t\
    }\n\n\tlet sorted = [a, b, c].sorted()\n\tlet maxValue = sorted[2]\n\tlet sqrMaxValue\
    \ = maxValue * maxValue\n\tlet sumOfTwoOthers = sorted[0] * sorted[0] + sorted[1]\
    \ * sorted[1]\n\n\treturn sqrMaxValue == sumOfTwoOthers", '    // your code here',
  "    var valid = false\n    if a * a + b * b == c * c || b * b + c * c == a * a\
    \ || a * a + c * c == b * b {\n        valid = true\n    }\n    return valid",
  "    if (a == 0 || b == 0 || c == 0) {\n        return false\n    }\n    if (a <\
    \ 0 || b < 0 || c < 0) {\n        return false\n    }\n    if (a > (b + c) ||\
    \ b > (a + c) || c > (a + b)) {\n        return false\n    }\n    if (a * a +\
    \ b * b == c * c) {\n        return true\n    }\n    if (a * a + c * c == b *\
    \ b) {\n        return true\n    }\n    if (b * b + c * c == a * a) {\n      \
    \  return true\n    }\n    return false", '    return a * a + b * b == c * c ||
    a * a + c * c == b * b || b * b + c * c == a * a', "  // TODO: Implement function\
    \ here\n  return false", "    /// The square of the hypotenuse is equal to the\
    \ sum of the squares of the \n    /// other two sides.\n    /// Pythagorean theorem\n\
    \    /// c^2 = a^2 + b^2\n    /// c^2 - a^2 - b^2 = 0\n    return a * a + b *\
    \ b == c * c", "  if a == 0 || b == 0 || c == 0 {\n    return false\n  }\n  let\
    \ max = [a, b, c].max()!\n  return pow(Double(max), 2) == pow(Double(a), 2) +\
    \ pow(Double(b), 2) + pow(Double(c), 2) - pow(Double(max), 2)", "    // your code\
    \ here\n    return false", "\treturn false"]
stop_tokens:
- "\n}"
