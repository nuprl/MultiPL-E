name: HumanEval_137_compare_one
language: swift
prompt: "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case doubleValue(Double)\n\
  \    case stringValue(String)\n}\n\n            \n/// Create a function that takes\
  \ integers, floats, or strings representing\n/// real numbers, and returns the larger\
  \ variable in its given variable type.\n/// Return nil if the values are equal.\n\
  /// Note: If a real number is represented as a string, the floating point might\
  \ be . or ,\n/// >>> compare_one(a: .intValue(1), b: .doubleValue(2.5))\n/// .doubleValue(2.5)\n\
  /// >>> compare_one(a: .intValue(1), b: .stringValue(\"2,3\"))\n/// .stringValue(\"\
  2,3\")\n/// >>> compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\"))\n\
  /// .stringValue(\"6\")\n/// >>> compare_one(a: .stringValue(\"1\"), b: .intValue(1))\n\
  /// nil\nfunc compare_one(a: Value, b: Value) -> Value? {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2))\
  \ == .intValue(2))\nassert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) ==\
  \ .doubleValue(2.5))\nassert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\n\
  assert(compare_one(a: .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a:\
  \ .intValue(1), b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a:\
  \ .stringValue(\"5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a:\
  \ .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a:\
  \ .stringValue(\"1\"), b: .intValue(1)) == nil)"
completions: ["    var firstVal = 0.0\n    var secondVal = 0.0\n    switch a {\n \
    \   case .intValue(let x):\n        firstVal = Double(x)\n    case .doubleValue(let\
    \ x):\n        firstVal = x\n    case .stringValue(let x):\n        firstVal =\
    \ Double(x.replacingOccurrences(of: \",\", with: \".\")) ?? 0.0\n    }\n    switch\
    \ b {\n    case .intValue(let x):\n        secondVal = Double(x)\n    case .doubleValue(let\
    \ x):\n        secondVal = x\n    case .stringValue(let x):\n        secondVal\
    \ = Double(x.replacingOccurrences(of: \",\", with: \".\")) ?? 0.0\n    }\n   \
    \ if firstVal > secondVal {\n        return a\n    } else if firstVal < secondVal\
    \ {\n        return b\n    } else {\n        return nil\n    }", "    switch (a,\
    \ b) {\n    case (.intValue(let x), .intValue(let y)) where x == y:\n        return\
    \ nil\n    case (.intValue(let x), .intValue(let y)) where x > y:\n        return\
    \ a\n    case (.intValue(let x), .intValue(let y)) where x < y:\n        return\
    \ b\n    case (.intValue(let x), .doubleValue(let y)) where x == y:\n        return\
    \ nil\n    case (.intValue(let x), .doubleValue(let y)) where x > y:\n       \
    \ return .intValue(x)\n    case (.intValue(let x), .doubleValue(let y)) where\
    \ x < y:\n        return .doubleValue(y)\n    case (.intValue(let x), .stringValue(let\
    \ y)) where x == Double(y):\n        return nil\n    case (.intValue(let x), .stringValue(let\
    \ y)) where x > Double(y):\n        return .intValue(x)\n    case (.intValue(let\
    \ x), .stringValue(let y)) where x < Double(y):\n        return .stringValue(y)\n\
    \    case (.doubleValue(let x), .intValue(let y)) where x == y:\n        return\
    \ nil\n    case (.doubleValue(let x), .intValue(let y)) where x > y:\n       \
    \ return .doubleValue(x)\n    case (.doubleValue(let x), .intValue(let y)) where\
    \ x < y:\n        return .intValue(y)\n    case (.doubleValue(let x), .doubleValue(let\
    \ y)) where x == y:\n        return nil\n    case (.doubleValue(let x), .doubleValue(let\
    \ y)) where x > y:\n        return .doubleValue(x)\n    case (.doubleValue(let\
    \ x), .doubleValue(let y)) where x < y:\n        return .doubleValue(y)\n    case\
    \ (.doubleValue(let x), .stringValue(let y)) where x == Double(y):\n        return\
    \ nil\n    case (.doubleValue(let x), .stringValue(let y)) where x > Double(y):\n\
    \        return .doubleValue(x)\n    case (.doubleValue", "    switch (a, b) {\n\
    \    case (.intValue(let aInt), .intValue(let bInt)):\n        if aInt > bInt\
    \ {\n            return .intValue(aInt)\n        } else if aInt < bInt {\n   \
    \         return .intValue(bInt)\n        } else {\n            return nil\n \
    \       }\n    case (.intValue(let aInt), .doubleValue(let bDouble)):\n      \
    \  if Double(aInt) > bDouble {\n            return .doubleValue(Double(aInt))\n\
    \        } else if Double(aInt) < bDouble {\n            return .doubleValue(bDouble)\n\
    \        } else {\n            return nil\n        }\n    case (.intValue(let\
    \ aInt), .stringValue(let bString)):\n        if Int(bString) == nil {\n     \
    \       return nil\n        } else if Double(bString) == nil {\n            if\
    \ aInt > Int(bString)! {\n                return .intValue(aInt)\n           \
    \ } else if aInt < Int(bString)! {\n                return .stringValue(bString)\n\
    \            } else {\n                return nil\n            }\n        } else\
    \ {\n            if Double(aInt) > Double(bString)! {\n                return\
    \ .doubleValue(Double(aInt))\n            } else if Double(aInt) < Double(bString)!\
    \ {\n                return .doubleValue(Double(bString)!)\n            } else\
    \ {\n                return nil\n            }\n        }\n    case (.doubleValue(let\
    \ aDouble), .intValue(let bInt)):\n        if aDouble > Double(bInt) {\n     \
    \       return .doubleValue(aDouble)\n        } else if aDouble < Double(bInt)\
    \ {\n            return .doubleValue(Double(bInt))\n        } else {\n       \
    \     return nil\n        }\n    case (.doubleValue(let aDouble), .doubleValue(let\
    \ bDouble)):\n        if aDouble > bDouble {\n            return .doubleValue(aDouble)\n\
    \        } else if aDouble < bDouble {\n            return .doubleValue(bDouble)\n\
    \        } else {\n            return nil\n        }\n    case (.doubleValue(let\
    \ aDouble), .stringValue(let", "    if a == b {\n        return nil\n    }\n \
    \   if case let .intValue(int) = a {\n        if case let .intValue(otherInt)\
    \ = b {\n            return int > otherInt ? a : b\n        }\n        if case\
    \ let .doubleValue(double) = b {\n            return double > Double(int) ? b\
    \ : a\n        }\n        if case let .stringValue(string) = b {\n           \
    \ return Double(string) > Double(int) ? b : a\n        }\n    }\n    if case let\
    \ .doubleValue(double) = a {\n        if case let .intValue(int) = b {\n     \
    \       return double > Double(int) ? a : b\n        }\n        if case let .doubleValue(otherDouble)\
    \ = b {\n            return double > otherDouble ? a : b\n        }\n        if\
    \ case let .stringValue(string) = b {\n            return Double(string) > double\
    \ ? b : a\n        }\n    }\n    if case let .stringValue(string) = a {\n    \
    \    if case let .intValue(int) = b {\n            return Double(string) > Double(int)\
    \ ? a : b\n        }\n        if case let .doubleValue(double) = b {\n       \
    \     return Double(string) > double ? a : b\n        }\n        if case let .stringValue(otherString)\
    \ = b {\n            return Double(string) > Double(otherString) ? a : b\n   \
    \     }\n    }\n    return nil", '    return nil', "    switch (a, b) {\n    case\
    \ let (.intValue(a), .intValue(b)) where a == b:\n        return nil\n    case\
    \ let (.intValue(a), .intValue(b)) where a > b:\n        return a\n    case let\
    \ (.intValue(a), .intValue(b)) where a < b:\n        return b\n    case let (.intValue(a),\
    \ .doubleValue(b)) where a == b:\n        return nil\n    case let (.intValue(a),\
    \ .doubleValue(b)) where a > b:\n        return a\n    case let (.intValue(a),\
    \ .doubleValue(b)) where a < b:\n        return b\n    case let (.intValue(a),\
    \ .stringValue(b)) where a == Double(b):\n        return nil\n    case let (.intValue(a),\
    \ .stringValue(b)) where a > Double(b):\n        return a\n    case let (.intValue(a),\
    \ .stringValue(b)) where a < Double(b):\n        return b\n    case let (.doubleValue(a),\
    \ .intValue(b)) where a == b:\n        return nil\n    case let (.doubleValue(a),\
    \ .intValue(b)) where a > b:\n        return a\n    case let (.doubleValue(a),\
    \ .intValue(b)) where a < b:\n        return b\n    case let (.doubleValue(a),\
    \ .doubleValue(b)) where a == b:\n        return nil\n    case let (.doubleValue(a),\
    \ .doubleValue(b)) where a > b:\n        return a\n    case let (.doubleValue(a),\
    \ .doubleValue(b)) where a < b:\n        return b\n    case let (.doubleValue(a),\
    \ .stringValue(b)) where a == Double(b):\n        return nil\n    case let (.doubleValue(a),\
    \ .stringValue(b)) where a > Double(b):\n        return a\n    case let (.doubleValue(a),\
    \ .stringValue(b)) where a < Double(b):\n        return b\n    case let (.stringValue(a),\
    \ .intValue(b)) where Double(a) == b:\n        return nil\n    case let (.stringValue(a),\
    \ .intValue", "    switch (a, b) {\n    case (.intValue(let aInt), .intValue(let\
    \ bInt)):\n        return aInt > bInt ? a : bInt > aInt ? b : nil\n    case (.intValue(let\
    \ aInt), .doubleValue(let bDouble)):\n        return aInt > bDouble ? a : bDouble\
    \ > aInt ? b : nil\n    case (.intValue(let aInt), .stringValue(let bString)):\n\
    \        let bDouble = Double(bString.components(separatedBy: \",\").joined())\
    \ ?? Double(bString)\n        return aInt > bDouble ? a : bDouble > aInt ? b :\
    \ nil\n    case (.doubleValue(let aDouble), .intValue(let bInt)):\n        return\
    \ aDouble > bInt ? a : bInt > aDouble ? b : nil\n    case (.doubleValue(let aDouble),\
    \ .doubleValue(let bDouble)):\n        return aDouble > bDouble ? a : bDouble\
    \ > aDouble ? b : nil\n    case (.doubleValue(let aDouble), .stringValue(let bString)):\n\
    \        let bDouble = Double(bString.components(separatedBy: \",\").joined())\
    \ ?? Double(bString)\n        return aDouble > bDouble ? a : bDouble > aDouble\
    \ ? b : nil\n    case (.stringValue(let aString), .intValue(let bInt)):\n    \
    \    let aDouble = Double(aString.components(separatedBy: \",\").joined()) ??\
    \ Double(aString)\n        return aDouble > bInt ? a : bInt > aDouble ? b : nil\n\
    \    case (.stringValue(let aString), .doubleValue(let bDouble)):\n        let\
    \ aDouble = Double(aString.components(separatedBy: \",\").joined()) ?? Double(aString)\n\
    \        return aDouble > bDouble ? a : bDouble > aDouble ? b : nil\n    case\
    \ (.stringValue(let aString), .stringValue(let bString)):\n        let aDouble\
    \ = Double(aString.components(separatedBy: \",\").joined()) ?? Double(aString)\n\
    \        let bDouble = Double(bString.components(separatedBy:", "    var aVal:\
    \ Double?\n    var bVal: Double?\n    switch a {\n    case .intValue(let val):\n\
    \        aVal = Double(val)\n    case .doubleValue(let val):\n        aVal = val\n\
    \    case .stringValue(let val):\n        aVal = Double(val)\n    }\n    switch\
    \ b {\n    case .intValue(let val):\n        bVal = Double(val)\n    case .doubleValue(let\
    \ val):\n        bVal = val\n    case .stringValue(let val):\n        bVal = Double(val)\n\
    \    }\n    guard let aValReal = aVal, let bValReal = bVal else {\n        return\
    \ nil\n    }\n    if aValReal == bValReal {\n        return nil\n    }\n    if\
    \ aValReal > bValReal {\n        return a\n    }\n    return b", "    // YOUR\
    \ CODE HERE\n    switch a {\n    case .intValue(let value):\n        switch b\
    \ {\n        case .intValue(let value2):\n            if value == value2 {\n \
    \               return nil\n            } else if value < value2 {\n         \
    \       return b\n            } else {\n                return a\n           \
    \ }\n        case .doubleValue(let value2):\n            if Double(value) == value2\
    \ {\n                return nil\n            } else if Double(value) < value2\
    \ {\n                return b\n            } else {\n                return a\n\
    \            }\n        case .stringValue(let value2):\n            if String(value)\
    \ == value2 {\n                return nil\n            } else if String(value)\
    \ < value2 {\n                return b\n            } else {\n               \
    \ return a\n            }\n        }\n    case .doubleValue(let value):\n    \
    \    switch b {\n        case .intValue(let value2):\n            if value ==\
    \ Double(value2) {\n                return nil\n            } else if value <\
    \ Double(value2) {\n                return b\n            } else {\n         \
    \       return a\n            }\n        case .doubleValue(let value2):\n    \
    \        if value == value2 {\n                return nil\n            } else\
    \ if value < value2 {\n                return b\n            } else {\n      \
    \          return a\n            }\n        case .stringValue(let value2):\n \
    \           if String(value) == value2 {\n                return nil\n       \
    \     } else if String(value) < value2 {\n                return b\n         \
    \   } else {\n                return a\n            }\n        }\n    case .stringValue(let\
    \ value):\n        switch b {\n        case .intValue(let value2):\n         \
    \   if value == String(value2) {\n                return nil\n            } else\
    \ if value < String(value2) {\n                return b\n            } else {\n\
    \                return a\n            }\n        case .doubleValue(let value2):\n\
    \            if value == String(value2) {\n                return nil\n      \
    \      } else if value < String(value2) {\n                return b\n        \
    \    } else {\n                return a\n            }\n        case .stringValue(let\
    \ value2):\n            if value == value2 {\n                return", "    switch\
    \ (a, b) {\n    case (.intValue(let a1), .intValue(let b1)) where a1 == b1:\n\
    \        return nil\n    case (.intValue(let a1), .intValue(let b1)) where a1\
    \ > b1:\n        return a\n    case (.intValue(let a1), .intValue(let b1)) where\
    \ a1 < b1:\n        return b\n    case (.intValue(let a1), .doubleValue(let b1))\
    \ where a1 == b1:\n        return nil\n    case (.intValue(let a1), .doubleValue(let\
    \ b1)) where a1 > b1:\n        return .doubleValue(Double(a1))\n    case (.intValue(let\
    \ a1), .doubleValue(let b1)) where a1 < b1:\n        return b\n    case (.intValue(let\
    \ a1), .stringValue(let b1)) where a1 == Double(b1.replacingOccurrences(of: \"\
    ,\", with: \".\"))!:\n        return nil\n    case (.intValue(let a1), .stringValue(let\
    \ b1)) where a1 > Double(b1.replacingOccurrences(of: \",\", with: \".\"))!:\n\
    \        return .stringValue(String(a1))\n    case (.intValue(let a1), .stringValue(let\
    \ b1)) where a1 < Double(b1.replacingOccurrences(of: \",\", with: \".\"))!:\n\
    \        return b\n    case (.doubleValue(let a1), .intValue(let b1)) where a1\
    \ == b1:\n        return nil\n    case (.doubleValue(let a1), .intValue(let b1))\
    \ where a1 > b1:\n        return a\n    case (.doubleValue(let a1), .intValue(let\
    \ b1)) where a1 < b1:\n        return .intValue(Int(b1))\n    case (.doubleValue(let\
    \ a1), .doubleValue(let b1)) where a1 == b1:\n        return nil\n    case (.doubleValue(let\
    \ a1), .doubleValue(let b1)) where a1 > b1:\n        return a\n   ", "    switch\
    \ (a, b) {\n    case let (.intValue(aInt), .intValue(bInt)):\n        if aInt\
    \ > bInt {\n            return .intValue(aInt)\n        } else if aInt < bInt\
    \ {\n            return .intValue(bInt)\n        } else {\n            return\
    \ nil\n        }\n    case let (.intValue(aInt), .doubleValue(bDouble)):\n   \
    \     if Double(aInt) > bDouble {\n            return .doubleValue(Double(aInt))\n\
    \        } else if Double(aInt) < bDouble {\n            return .doubleValue(bDouble)\n\
    \        } else {\n            return nil\n        }\n    case let (.intValue(aInt),\
    \ .stringValue(bString)):\n        if Double(aInt) > Double(bString.replacingOccurrences(of:\
    \ \",\", with: \".\"))! {\n            return .stringValue(String(aInt))\n   \
    \     } else if Double(aInt) < Double(bString.replacingOccurrences(of: \",\",\
    \ with: \".\"))! {\n            return .stringValue(bString)\n        } else {\n\
    \            return nil\n        }\n    case let (.doubleValue(aDouble), .intValue(bInt)):\n\
    \        if aDouble > Double(bInt) {\n            return .doubleValue(aDouble)\n\
    \        } else if aDouble < Double(bInt) {\n            return .doubleValue(Double(bInt))\n\
    \        } else {\n            return nil\n        }\n    case let (.doubleValue(aDouble),\
    \ .doubleValue(bDouble)):\n        if aDouble > bDouble {\n            return\
    \ .doubleValue(aDouble)\n        } else if aDouble < bDouble {\n            return\
    \ .doubleValue(bDouble)\n        } else {\n            return nil\n        }\n\
    \    case let (.doubleValue(aDouble), .stringValue(bString)):\n        if aDouble\
    \ > Double(bString.replacingOccurrences(of: \",\", with: \".\"))! {\n        \
    \    return .doubleValue(aDouble)\n        } else if aDouble < Double(bString.replacingOccurrences(of:\
    \ \",\", with:", "    switch (a, b) {\n    case (.intValue(let aValue), .intValue(let\
    \ bValue)):\n        return (aValue > bValue) ? a : (aValue < bValue) ? b : nil\n\
    \    case (.intValue(let aValue), .doubleValue(let bValue)):\n        return (aValue\
    \ > bValue) ? a : (aValue < bValue) ? b : nil\n    case (.intValue(let aValue),\
    \ .stringValue(let bValue)):\n        return (aValue > (bValue as NSString).doubleValue)\
    \ ? a : (aValue < (bValue as NSString).doubleValue) ? b : nil\n    case (.doubleValue(let\
    \ aValue), .intValue(let bValue)):\n        return (aValue > bValue) ? a : (aValue\
    \ < bValue) ? b : nil\n    case (.doubleValue(let aValue), .doubleValue(let bValue)):\n\
    \        return (aValue > bValue) ? a : (aValue < bValue) ? b : nil\n    case\
    \ (.doubleValue(let aValue), .stringValue(let bValue)):\n        return (aValue\
    \ > (bValue as NSString).doubleValue) ? a : (aValue < (bValue as NSString).doubleValue)\
    \ ? b : nil\n    case (.stringValue(let aValue), .intValue(let bValue)):\n   \
    \     return ((aValue as NSString).doubleValue > bValue) ? a : ((aValue as NSString).doubleValue\
    \ < bValue) ? b : nil\n    case (.stringValue(let aValue), .doubleValue(let bValue)):\n\
    \        return ((aValue as NSString).doubleValue > bValue) ? a : ((aValue as\
    \ NSString).doubleValue < bValue) ? b : nil\n    case (.stringValue(let aValue),\
    \ .stringValue(let bValue)):\n        return ((aValue as NSString).doubleValue\
    \ > (bValue as NSString).doubleValue) ? a : ((aValue as NSString).doubleValue\
    \ < (bValue as NSString).doubleValue) ? b : nil\n    }", "    \n    switch (a,\
    \ b) {\n    case (.intValue(let int1), .intValue(let int2)):\n        if int1\
    \ > int2 {\n            return .intValue(int1)\n        } else if int1 < int2\
    \ {\n            return .intValue(int2)\n        } else {\n            return\
    \ nil\n        }\n    case (.intValue(let int1), .doubleValue(let double2)):\n\
    \        if Double(int1) > double2 {\n            return .doubleValue(Double(int1))\n\
    \        } else if Double(int1) < double2 {\n            return .doubleValue(double2)\n\
    \        } else {\n            return nil\n        }\n    case (.intValue(let\
    \ int1), .stringValue(let string2)):\n        if let double2 = Double(string2)\
    \ {\n            if Double(int1) > double2 {\n                return .doubleValue(Double(int1))\n\
    \            } else if Double(int1) < double2 {\n                return .doubleValue(double2)\n\
    \            } else {\n                return nil\n            }\n        } else\
    \ {\n            return .stringValue(string2)\n        }\n    case (.doubleValue(let\
    \ double1), .intValue(let int2)):\n        if double1 > Double(int2) {\n     \
    \       return .doubleValue(double1)\n        } else if double1 < Double(int2)\
    \ {\n            return .doubleValue(Double(int2))\n        } else {\n       \
    \     return nil\n        }\n    case (.doubleValue(let double1), .doubleValue(let\
    \ double2)):\n        if double1 > double2 {\n            return .doubleValue(double1)\n\
    \        } else if double1 < double2 {\n            return .doubleValue(double2)\n\
    \        } else {\n            return nil\n        }\n    case (.doubleValue(let\
    \ double1), .stringValue(let string2)):\n        if let double2 = Double(string2)\
    \ {\n            if double1 > double2 {\n                return .doubleValue(double1)\n\
    \            } else if double1 < double2 {\n                return .doubleValue(double2)\n\
    \            } else {\n                return nil\n            }\n", "    let\
    \ value1 = a\n    let value2 = b\n    var ans: Value? = nil\n    switch value1\
    \ {\n    case .intValue(let i1):\n        switch value2 {\n        case .intValue(let\
    \ i2):\n            if i1 == i2 {\n                return nil\n            } else\
    \ if i1 > i2 {\n                ans = .intValue(i1)\n            } else {\n  \
    \              ans = .intValue(i2)\n            }\n        case .doubleValue(let\
    \ d2):\n            if Double(i1) == d2 {\n                return nil\n      \
    \      } else if Double(i1) > d2 {\n                ans = .doubleValue(Double(i1))\n\
    \            } else {\n                ans = .doubleValue(d2)\n            }\n\
    \        case .stringValue(let s2):\n            if Double(i1) == Double(s2) {\n\
    \                return nil\n            } else if Double(i1) > Double(s2) {\n\
    \                ans = .doubleValue(Double(i1))\n            } else {\n      \
    \          ans = .stringValue(s2)\n            }\n        }\n    case .doubleValue(let\
    \ d1):\n        switch value2 {\n        case .intValue(let i2):\n           \
    \ if d1 == Double(i2) {\n                return nil\n            } else if d1\
    \ > Double(i2) {\n                ans = .doubleValue(d1)\n            } else {\n\
    \                ans = .intValue(i2)\n            }\n        case .doubleValue(let\
    \ d2):\n            if d1 == d2 {\n                return nil\n            } else\
    \ if d1 > d2 {\n                ans = .doubleValue(d1)\n            } else {\n\
    \                ans = .doubleValue(d2)\n            }\n        case .stringValue(let\
    \ s2):\n            if d1 == Double(s2) {\n                return nil\n      \
    \      } else if d1 > Double(s2) {\n                ans = .doubleValue(d1)\n \
    \           } else {\n                ans = .stringValue(s2)\n            }\n\
    \        }\n    case .stringValue(let s1):\n        switch value2 {\n       ",
  "    let aDouble = Double(a)\n    let bDouble = Double(b)\n    switch (aDouble,\
    \ bDouble) {\n    case let (aDouble?, bDouble?):\n        return aDouble > bDouble\
    \ ? a : b\n    case (nil, let .some(bDouble)):\n        return b\n    case (let\
    \ .some(aDouble), nil):\n        return a\n    default:\n        return nil\n\
    \    }", "    switch a {\n    case .intValue(let a):\n        switch b {\n   \
    \     case .intValue(let b):\n            return a > b ? a : b\n        case .doubleValue(let\
    \ b):\n            return a > b ? .doubleValue(Double(a)) : .doubleValue(b)\n\
    \        case .stringValue(let b):\n            let value = Double(b.replacingOccurrences(of:\
    \ \",\", with: \".\"))\n            return a > value! ? .doubleValue(Double(a))\
    \ : .doubleValue(value!)\n        }\n    case .doubleValue(let a):\n        switch\
    \ b {\n        case .intValue(let b):\n            return a > Double(b) ? .doubleValue(a)\
    \ : .doubleValue(Double(b))\n        case .doubleValue(let b):\n            return\
    \ a > b ? .doubleValue(a) : .doubleValue(b)\n        case .stringValue(let b):\n\
    \            let value = Double(b.replacingOccurrences(of: \",\", with: \".\"\
    ))\n            return a > value! ? .doubleValue(a) : .doubleValue(value!)\n \
    \       }\n    case .stringValue(let a):\n        switch b {\n        case .intValue(let\
    \ b):\n            let value = Double(a.replacingOccurrences(of: \",\", with:\
    \ \".\"))\n            return value! > Double(b) ? .doubleValue(value!) : .doubleValue(Double(b))\n\
    \        case .doubleValue(let b):\n            let value = Double(a.replacingOccurrences(of:\
    \ \",\", with: \".\"))\n            return value! > b ? .doubleValue(value!) :\
    \ .doubleValue(b)\n        case .stringValue(let b):\n            let valueA =\
    \ Double(a.replacingOccurrences(of: \",\", with: \".\"))\n            let valueB\
    \ = Double(b.replacingOccurrences(of: \",\", with: \".\"))\n            return\
    \ valueA! > valueB! ? .doubleValue(valueA!) : .doubleValue(valueB!)\n        }\n\
    \    }", "    switch (a, b) {\n    case let (.intValue(a), .intValue(b)) where\
    \ a != b:\n        return a > b ? a : b\n    case let (.doubleValue(a), .doubleValue(b))\
    \ where a != b:\n        return a > b ? a : b\n    case let (.stringValue(a),\
    \ .stringValue(b)) where a != b:\n        return a > b ? a : b\n    default:\n\
    \        return nil\n    }", "    switch (a, b) {\n    case (.intValue(let i),\
    \ .intValue(let j)):\n        return i >= j ? a : b\n    case (.intValue(let i),\
    \ .doubleValue(let j)):\n        return i >= j ? a : b\n    case (.intValue(let\
    \ i), .stringValue(let j)):\n        return i >= Double(j) ? a : b\n    case (.doubleValue(let\
    \ i), .intValue(let j)):\n        return i >= j ? a : b\n    case (.doubleValue(let\
    \ i), .doubleValue(let j)):\n        return i >= j ? a : b\n    case (.doubleValue(let\
    \ i), .stringValue(let j)):\n        return i >= Double(j) ? a : b\n    case (.stringValue(let\
    \ i), .intValue(let j)):\n        return Double(i) >= j ? a : b\n    case (.stringValue(let\
    \ i), .doubleValue(let j)):\n        return Double(i) >= j ? a : b\n    case (.stringValue(let\
    \ i), .stringValue(let j)):\n        return Double(i) >= Double(j) ? a : b\n \
    \   }", "    switch (a, b) {\n    case let (.intValue(lhs), .intValue(rhs)):\n\
    \        return lhs >= rhs ? a : b\n    case let (.intValue(lhs), .doubleValue(rhs)):\n\
    \        return lhs >= rhs ? a : b\n    case let (.intValue(lhs), .stringValue(rhs)):\n\
    \        let realRhs = Double(rhs) ?? Double.infinity\n        return lhs >= realRhs\
    \ ? a : b\n    case let (.doubleValue(lhs), .intValue(rhs)):\n        return lhs\
    \ >= rhs ? a : b\n    case let (.doubleValue(lhs), .doubleValue(rhs)):\n     \
    \   return lhs >= rhs ? a : b\n    case let (.doubleValue(lhs), .stringValue(rhs)):\n\
    \        let realRhs = Double(rhs) ?? Double.infinity\n        return lhs >= realRhs\
    \ ? a : b\n    case let (.stringValue(lhs), .intValue(rhs)):\n        let realLhs\
    \ = Double(lhs) ?? Double.infinity\n        return realLhs >= rhs ? a : b\n  \
    \  case let (.stringValue(lhs), .doubleValue(rhs)):\n        let realLhs = Double(lhs)\
    \ ?? Double.infinity\n        return realLhs >= rhs ? a : b\n    case let (.stringValue(lhs),\
    \ .stringValue(rhs)):\n        let realLhs = Double(lhs) ?? Double.infinity\n\
    \        let realRhs = Double(rhs) ?? Double.infinity\n        return realLhs\
    \ >= realRhs ? a : b\n    }", "    switch a {\n    case .intValue(let a):\n  \
    \      switch b {\n        case .intValue(let b):\n            return a > b ?\
    \ a : b\n        case .doubleValue(let b):\n            return b\n        case\
    \ .stringValue(let b):\n            let d_b = Double(b.replacingOccurrences(of:\
    \ \",\", with: \".\"))\n            return d_b!\n        }\n    case .doubleValue(let\
    \ a):\n        switch b {\n        case .intValue(let b):\n            return\
    \ a\n        case .doubleValue(let b):\n            return a > b ? a : b\n   \
    \     case .stringValue(let b):\n            let d_b = Double(b.replacingOccurrences(of:\
    \ \",\", with: \".\"))\n            return a > d_b! ? a : d_b!\n        }\n  \
    \  case .stringValue(let a):\n        switch b {\n        case .intValue(let b):\n\
    \            let d_a = Double(a.replacingOccurrences(of: \",\", with: \".\"))\n\
    \            return d_a!\n        case .doubleValue(let b):\n            let d_a\
    \ = Double(a.replacingOccurrences(of: \",\", with: \".\"))\n            return\
    \ d_a! > b ? d_a! : b\n        case .stringValue(let b):\n            let d_a\
    \ = Double(a.replacingOccurrences(of: \",\", with: \".\"))\n            let d_b\
    \ = Double(b.replacingOccurrences(of: \",\", with: \".\"))\n            return\
    \ d_a! > d_b! ? d_a! : d_b!\n        }\n    }", "    guard let a = valueToNumber(a),\
    \ let b = valueToNumber(b) else { return nil }\n    return a > b ? a : b", " \
    \   switch a {\n    case .intValue(let a_value) where a_value > (b as! Int):\n\
    \        return a\n    case .doubleValue(let a_value) where a_value > (b as! Double):\n\
    \        return a\n    case .stringValue(let a_value) where Double(a_value) >\
    \ (b as! Double):\n        return a\n    default:\n        return nil\n    }",
  "    switch (a, b) {\n    case let (.intValue(a), .intValue(b)) where a != b:\n\
    \        return a > b ? a : b\n    case let (.doubleValue(a), .doubleValue(b))\
    \ where a != b:\n        return a > b ? a : b\n    case let (.stringValue(a),\
    \ .stringValue(b)) where a != b:\n        return a > b ? a : b\n    default:\n\
    \        return nil\n    }", "    switch (a, b) {\n    case (.intValue(let a1),\
    \ .intValue(let b1)) where a1 < b1:\n        return b\n    case (.intValue(let\
    \ a1), .intValue(let b1)) where a1 > b1:\n        return a\n    case (.intValue(let\
    \ a1), .doubleValue(let b1)) where Double(a1) < b1:\n        return b\n    case\
    \ (.intValue(let a1), .doubleValue(let b1)) where Double(a1) > b1:\n        return\
    \ a\n    case (.intValue(let a1), .stringValue(let b1)) where Double(a1) < Double(b1.replacingOccurrences(of:\
    \ \",\", with: \".\"))!:\n        return b\n    case (.intValue(let a1), .stringValue(let\
    \ b1)) where Double(a1) > Double(b1.replacingOccurrences(of: \",\", with: \".\"\
    ))!:\n        return a\n    case (.doubleValue(let a1), .intValue(let b1)) where\
    \ a1 < Double(b1):\n        return b\n    case (.doubleValue(let a1), .intValue(let\
    \ b1)) where a1 > Double(b1):\n        return a\n    case (.doubleValue(let a1),\
    \ .doubleValue(let b1)) where a1 < b1:\n        return b\n    case (.doubleValue(let\
    \ a1), .doubleValue(let b1)) where a1 > b1:\n        return a\n    case (.doubleValue(let\
    \ a1), .stringValue(let b1)) where a1 < Double(b1.replacingOccurrences(of: \"\
    ,\", with: \".\"))!:\n        return b\n    case (.doubleValue(let a1), .stringValue(let\
    \ b1)) where a1 > Double(b1.replacingOccurrences(of: \",\", with: \".\"))!:\n\
    \        return a\n    case (.stringValue(let a1), .intValue(let b1)) where Double(a1.replacingOccurrences(of:\
    \ \",\", with: \".\"))! < Double(b1):\n        return", "    if a == b {\n   \
    \     return nil\n    } else if case .doubleValue(let x) = a, case .intValue(let\
    \ y) = b {\n        return x > Double(y) ? a : b\n    } else if case .intValue(let\
    \ x) = a, case .doubleValue(let y) = b {\n        return Double(x) > y ? a : b\n\
    \    } else if case .stringValue(let x) = a, case .intValue(let y) = b {\n   \
    \     return Double(x) > Double(y) ? a : b\n    } else if case .intValue(let x)\
    \ = a, case .stringValue(let y) = b {\n        return Double(x) > Double(y) ?\
    \ a : b\n    } else if case .stringValue(let x) = a, case .doubleValue(let y)\
    \ = b {\n        return Double(x) > y ? a : b\n    } else if case .doubleValue(let\
    \ x) = a, case .stringValue(let y) = b {\n        return x > Double(y) ? a : b\n\
    \    } else if case .stringValue(let x) = a, case .stringValue(let y) = b {\n\
    \        return Double(x) > Double(y) ? a : b\n    } else {\n        fatalError(\"\
    Cannot compare \\(a) and \\(b)\")\n    }", "    switch (a, b) {\n    case (.intValue(let\
    \ a), .intValue(let b)):\n        return a >= b ? a : b\n    case (.doubleValue(let\
    \ a), .doubleValue(let b)):\n        return a >= b ? a : b\n    case (.stringValue(let\
    \ a), .stringValue(let b)):\n        return a >= b ? a : b\n    case (.intValue(let\
    \ a), .doubleValue(let b)):\n        return a >= b ? a : b\n    case (.intValue(let\
    \ a), .stringValue(let b)):\n        return a >= b ? a : b\n    case (.doubleValue(let\
    \ a), .intValue(let b)):\n        return a >= b ? a : b\n    case (.doubleValue(let\
    \ a), .stringValue(let b)):\n        return a >= b ? a : b\n    case (.stringValue(let\
    \ a), .intValue(let b)):\n        return a >= b ? a : b\n    case (.stringValue(let\
    \ a), .doubleValue(let b)):\n        return a >= b ? a : b\n    default:\n   \
    \     return nil\n    }", '    return nil', "    switch (a, b) {\n    case (.intValue(let\
    \ aValue), .intValue(let bValue)):\n        return (aValue > bValue) ? a : b\n\
    \    case (.doubleValue(let aValue), .doubleValue(let bValue)):\n        return\
    \ (aValue > bValue) ? a : b\n    case (.stringValue(let aValue), .stringValue(let\
    \ bValue)):\n        return (Double(aValue) > Double(bValue)) ? a : b\n    case\
    \ (.intValue(let aValue), .doubleValue(let bValue)):\n        return (Double(aValue)\
    \ > bValue) ? a : b\n    case (.intValue(let aValue), .stringValue(let bValue)):\n\
    \        return (Double(aValue) > Double(bValue)) ? a : b\n    case (.doubleValue(let\
    \ aValue), .intValue(let bValue)):\n        return (aValue > Double(bValue)) ?\
    \ a : b\n    case (.doubleValue(let aValue), .stringValue(let bValue)):\n    \
    \    return (aValue > Double(bValue)) ? a : b\n    case (.stringValue(let aValue),\
    \ .intValue(let bValue)):\n        return (Double(aValue) > Double(bValue)) ?\
    \ a : b\n    case (.stringValue(let aValue), .doubleValue(let bValue)):\n    \
    \    return (Double(aValue) > bValue) ? a : b\n    default:\n        return nil\n\
    \    }", "    switch (a, b) {\n    case (.intValue(let a), .intValue(let b)):\n\
    \        return a > b ? a : b\n    case (.doubleValue(let a), .doubleValue(let\
    \ b)):\n        return a > b ? a : b\n    case (.stringValue(let a), .stringValue(let\
    \ b)):\n        return a > b ? a : b\n    default:\n        return nil\n    }",
  "    switch (a, b) {\n    case (.intValue(let a), .intValue(let b)):\n        return\
    \ a > b ? a : b\n    case (.doubleValue(let a), .doubleValue(let b)):\n      \
    \  return a > b ? a : b\n    case (.stringValue(let a), .stringValue(let b)):\n\
    \        return a > b ? a : b\n    default:\n        return nil\n    }", "   \
    \ switch a {\n    case .intValue(let a):\n        switch b {\n        case .intValue(let\
    \ b):\n            return a > b ? a : b\n        case .doubleValue(let b):\n \
    \           return b\n        case .stringValue(let b):\n            return b\n\
    \        }\n    case .doubleValue(let a):\n        switch b {\n        case .intValue(let\
    \ b):\n            return a\n        case .doubleValue(let b):\n            return\
    \ a > b ? a : b\n        case .stringValue(let b):\n            return b\n   \
    \     }\n    case .stringValue(let a):\n        switch b {\n        case .intValue(let\
    \ b):\n            return a\n        case .doubleValue(let b):\n            return\
    \ a\n        case .stringValue(let b):\n            return a > b ? a : b\n   \
    \     }\n    }\n    return nil", "    var c = \"\";\n    var d = \"\";\n    switch\
    \ a {\n    case .intValue(let c):\n        c = String(c)\n    case .doubleValue(let\
    \ c):\n        c = String(c)\n    case .stringValue(let c):\n        c = c\n \
    \   }\n    switch b {\n    case .intValue(let d):\n        d = String(d)\n   \
    \ case .doubleValue(let d):\n        d = String(d)\n    case .stringValue(let\
    \ d):\n        d = d\n    }\n    if c.range(of: \"[0-9]\") != nil && d.range(of:\
    \ \"[0-9]\") != nil {\n        let a = c.replacingOccurrences(of: \",\", with:\
    \ \".\")\n        let b = d.replacingOccurrences(of: \",\", with: \".\")\n   \
    \     if a < b {\n            switch b {\n            case \"\":\n           \
    \     return nil\n            case _ where Double(b) != nil:\n               \
    \ return .doubleValue(Double(b)!)\n            case _ where Int(b) != nil:\n \
    \               return .intValue(Int(b)!)\n            default:\n            \
    \    return .stringValue(b)\n            }\n        } else if a > b {\n      \
    \      switch a {\n            case \"\":\n                return nil\n      \
    \      case _ where Double(a) != nil:\n                return .doubleValue(Double(a)!)\n\
    \            case _ where Int(a) != nil:\n                return .intValue(Int(a)!)\n\
    \            default:\n                return .stringValue(a)\n            }\n\
    \        } else {\n            return nil\n        }\n    } else {\n        return\
    \ nil\n    }", "    // TODO: Implement this function!\n    // You should use the\
    \ patterns below to solve this problem:\n    switch a {\n    case .intValue(let\
    \ i):\n        switch b {\n        case .intValue(let j):\n            if i <\
    \ j {\n                return b\n            } else if i > j {\n             \
    \   return a\n            } else {\n                return nil\n            }\n\
    \        case .doubleValue(let j):\n            if Double(i) < j {\n         \
    \       return b\n            } else if Double(i) > j {\n                return\
    \ a\n            } else {\n                return nil\n            }\n       \
    \ case .stringValue(let j):\n            if Double(i) < Double(j) {\n        \
    \        return b\n            } else if Double(i) > Double(j) {\n           \
    \     return a\n            } else {\n                return nil\n           \
    \ }\n        }\n    case .doubleValue(let i):\n        switch b {\n        case\
    \ .intValue(let j):\n            if i < Double(j) {\n                return b\n\
    \            } else if i > Double(j) {\n                return a\n           \
    \ } else {\n                return nil\n            }\n        case .doubleValue(let\
    \ j):\n            if i < j {\n                return b\n            } else if\
    \ i > j {\n                return a\n            } else {\n                return\
    \ nil\n            }\n        case .stringValue(let j):\n            if i < Double(j)\
    \ {\n                return b\n            } else if i > Double(j) {\n       \
    \         return a\n            } else {\n                return nil\n       \
    \     }\n        }\n    case .stringValue(let i):\n        switch b {\n      \
    \  case .intValue(let j):\n            if Double(i) < Double(j) {\n          \
    \      return b\n            } else if Double(i) > Double(j) {\n             \
    \   return a\n            } else {\n                return nil\n            }\n\
    \        case .doubleValue(let j):\n            if Double(i) < j {\n         \
    \       return b\n            } else if Double(i) > j {\n                return\
    \ a\n            } else {\n                return nil\n            }\n       \
    \ case .stringValue(let j):\n            if Double(i", "    switch (a, b) {\n\
    \    case (.intValue(let a), .intValue(let b)):\n        return a > b ? a : b\n\
    \    case (.doubleValue(let a), .doubleValue(let b)):\n        return a > b ?\
    \ a : b\n    case (.stringValue(let a), .stringValue(let b)):\n        return\
    \ a > b ? a : b\n    case (.intValue(let a), .doubleValue(let b)):\n        return\
    \ a > b ? a : b\n    case (.intValue(let a), .stringValue(let b)):\n        return\
    \ a > b ? a : b\n    case (.doubleValue(let a), .intValue(let b)):\n        return\
    \ a > b ? a : b\n    case (.doubleValue(let a), .stringValue(let b)):\n      \
    \  return a > b ? a : b\n    case (.stringValue(let a), .intValue(let b)):\n \
    \       return a > b ? a : b\n    case (.stringValue(let a), .doubleValue(let\
    \ b)):\n        return a > b ? a : b\n    default:\n        return nil\n    }",
  "    switch (a, b) {\n    case (.intValue(let x), .intValue(let y)):\n        return\
    \ x > y ? .intValue(x) : nil\n    case (.intValue(let x), .doubleValue(let y)):\n\
    \        return x > y ? .doubleValue(y) : nil\n    case (.intValue(let x), .stringValue(let\
    \ y)):\n        let numB = Float(y.replacingOccurrences(of: \",\", with: \".\"\
    )) ?? 0\n        return x > numB ? .stringValue(y) : nil\n    case (.doubleValue(let\
    \ x), .intValue(let y)):\n        return x > y ? .doubleValue(x) : nil\n    case\
    \ (.doubleValue(let x), .doubleValue(let y)):\n        return x > y ? .doubleValue(x)\
    \ : nil\n    case (.doubleValue(let x), .stringValue(let y)):\n        let numB\
    \ = Float(y.replacingOccurrences(of: \",\", with: \".\")) ?? 0\n        return\
    \ x > numB ? .stringValue(y) : nil\n    case (.stringValue(let x), .intValue(let\
    \ y)):\n        let numA = Float(x.replacingOccurrences(of: \",\", with: \".\"\
    )) ?? 0\n        return numA > y ? .stringValue(x) : nil\n    case (.stringValue(let\
    \ x), .doubleValue(let y)):\n        let numA = Float(x.replacingOccurrences(of:\
    \ \",\", with: \".\")) ?? 0\n        return numA > y ? .stringValue(x) : nil\n\
    \    case (.stringValue(let x), .stringValue(let y)):\n        let numA = Float(x.replacingOccurrences(of:\
    \ \",\", with: \".\")) ?? 0\n        let numB = Float(y.replacingOccurrences(of:\
    \ \",\", with: \".\")) ?? 0\n        return numA > numB ? .stringValue(x) : nil\n\
    \    }", "    // TODO: Implement me!\n    return nil", "    switch a {\n    case\
    \ .intValue(let aValue):\n        switch b {\n        case .intValue(let bValue):\n\
    \            return aValue > bValue ? a : bValue > aValue ? b : nil\n        case\
    \ .doubleValue(let bValue):\n            return bValue > Double(aValue) ? b :\
    \ nil\n        case .stringValue(let bValue):\n            return Double(bValue)\
    \ > Double(aValue) ? b : nil\n        }\n    case .doubleValue(let aValue):\n\
    \        switch b {\n        case .intValue(let bValue):\n            return aValue\
    \ > Double(bValue) ? a : nil\n        case .doubleValue(let bValue):\n       \
    \     return aValue > bValue ? a : bValue > aValue ? b : nil\n        case .stringValue(let\
    \ bValue):\n            return Double(bValue) > aValue ? b : nil\n        }\n\
    \    case .stringValue(let aValue):\n        switch b {\n        case .intValue(let\
    \ bValue):\n            return Double(aValue) > Double(bValue) ? a : nil\n   \
    \     case .doubleValue(let bValue):\n            return Double(aValue) > bValue\
    \ ? a : nil\n        case .stringValue(let bValue):\n            return Double(aValue)\
    \ > Double(bValue) ? a : bValue > aValue ? b : nil\n        }\n    }", "    switch\
    \ a {\n    case .intValue(let aInt):\n        switch b {\n        case .intValue(let\
    \ bInt):\n            return aInt == bInt ? nil : aInt > bInt ? a : b\n      \
    \  case .doubleValue(let bDouble):\n            return bDouble\n        case .stringValue(let\
    \ bString):\n            let bDouble = Double(bString) ?? 0\n            return\
    \ bDouble\n        }\n    case .doubleValue(let aDouble):\n        switch b {\n\
    \        case .intValue(let bInt):\n            return aDouble\n        case .doubleValue(let\
    \ bDouble):\n            return aDouble == bDouble ? nil : aDouble > bDouble ?\
    \ a : b\n        case .stringValue(let bString):\n            let bDouble = Double(bString)\
    \ ?? 0\n            return aDouble == bDouble ? nil : aDouble > bDouble ? a :\
    \ b\n        }\n    case .stringValue(let aString):\n        switch b {\n    \
    \    case .intValue(let bInt):\n            let aDouble = Double(aString) ?? 0\n\
    \            return aDouble\n        case .doubleValue(let bDouble):\n       \
    \     let aDouble = Double(aString) ?? 0\n            return aDouble == bDouble\
    \ ? nil : aDouble > bDouble ? a : b\n        case .stringValue(let bString):\n\
    \            let aDouble = Double(aString) ?? 0\n            let bDouble = Double(bString)\
    \ ?? 0\n            return aDouble == bDouble ? nil : aDouble > bDouble ? a :\
    \ b\n        }\n    }", "  if(a == b){\n    return nil\n  }\n  switch (a, b) {\n\
    \    case (.intValue(let x), .intValue(let y)):\n      return x > y ? a : b\n\
    \    case (.intValue(let x), .doubleValue(let y)):\n      return y > Double(x)\
    \ ? b : a\n    case (.intValue(let x), .stringValue(let y)):\n      return Double(y)\
    \ ?? 0 > Double(x) ? b : a\n    case (.doubleValue(let x), .intValue(let y)):\n\
    \      return x > Double(y) ? a : b\n    case (.doubleValue(let x), .doubleValue(let\
    \ y)):\n      return x > y ? a : b\n    case (.doubleValue(let x), .stringValue(let\
    \ y)):\n      return Double(y) ?? 0 > x ? b : a\n    case (.stringValue(let x),\
    \ .intValue(let y)):\n      return Double(x) ?? 0 > Double(y) ? a : b\n    case\
    \ (.stringValue(let x), .doubleValue(let y)):\n      return Double(x) ?? 0 > y\
    \ ? a : b\n    case (.stringValue(let x), .stringValue(let y)):\n      return\
    \ Double(x) ?? 0 > Double(y) ? a : b\n    default:\n      return nil\n  }", " \
    \   var aValue: Double\n    var bValue: Double\n    switch a {\n    case .intValue(let\
    \ int):\n        aValue = Double(int)\n    case .doubleValue(let double):\n  \
    \      aValue = double\n    case .stringValue(let string):\n        guard let\
    \ double = Double(string) else {\n            return nil\n        }\n        aValue\
    \ = double\n    }\n    switch b {\n    case .intValue(let int):\n        bValue\
    \ = Double(int)\n    case .doubleValue(let double):\n        bValue = double\n\
    \    case .stringValue(let string):\n        guard let double = Double(string)\
    \ else {\n            return nil\n        }\n        bValue = double\n    }\n\
    \    if aValue == bValue {\n        return nil\n    }\n    if aValue > bValue\
    \ {\n        switch a {\n        case .intValue(let int):\n            return\
    \ .intValue(int)\n        case .doubleValue(let double):\n            return .doubleValue(double)\n\
    \        case .stringValue(let string):\n            return .stringValue(string)\n\
    \        }\n    } else {\n        switch b {\n        case .intValue(let int):\n\
    \            return .intValue(int)\n        case .doubleValue(let double):\n \
    \           return .doubleValue(double)\n        case .stringValue(let string):\n\
    \            return .stringValue(string)\n        }\n    }", "    let numberA\
    \ = convert_to_float(value: a)\n    let numberB = convert_to_float(value: b)\n\
    \    if numberA > numberB {\n        switch a {\n        case .intValue(let a):\n\
    \            return .intValue(a)\n        case .doubleValue(let a):\n        \
    \    return .doubleValue(a)\n        case .stringValue(let a):\n            return\
    \ .stringValue(a)\n        }\n    } else if numberA < numberB {\n        switch\
    \ b {\n        case .intValue(let b):\n            return .intValue(b)\n     \
    \   case .doubleValue(let b):\n            return .doubleValue(b)\n        case\
    \ .stringValue(let b):\n            return .stringValue(b)\n        }\n    } else\
    \ {\n        return nil\n    }", "    guard let a = a.value, let b = b.value else\
    \ { return nil }\n    return a > b ? a : b", "    switch (a, b) {\n    case (.intValue(let\
    \ a), .intValue(let b)):\n        return a > b ? a : b\n    case (.doubleValue(let\
    \ a), .doubleValue(let b)):\n        return a > b ? a : b\n    case (.stringValue(let\
    \ a), .stringValue(let b)):\n        return Double(a) > Double(b) ? a : b\n  \
    \  case (.intValue(let a), .doubleValue(let b)):\n        return a > b ? a : b\n\
    \    case (.intValue(let a), .stringValue(let b)):\n        return Double(a) >\
    \ Double(b) ? a : b\n    case (.doubleValue(let a), .intValue(let b)):\n     \
    \   return a > b ? a : b\n    case (.doubleValue(let a), .stringValue(let b)):\n\
    \        return a > Double(b) ? a : b\n    case (.stringValue(let a), .intValue(let\
    \ b)):\n        return Double(a) > b ? a : b\n    case (.stringValue(let a), .doubleValue(let\
    \ b)):\n        return Double(a) > b ? a : b\n    }\n    return nil", "    \n\
    \    let aDouble: Double?\n    let bDouble: Double?\n    \n    switch a {\n  \
    \  case .intValue(let value):\n        aDouble = Double(value)\n    case .doubleValue(let\
    \ value):\n        aDouble = value\n    case .stringValue(let value):\n      \
    \  aDouble = Double(value)\n    }\n    \n    switch b {\n    case .intValue(let\
    \ value):\n        bDouble = Double(value)\n    case .doubleValue(let value):\n\
    \        bDouble = value\n    case .stringValue(let value):\n        bDouble =\
    \ Double(value)\n    }\n    \n    if let aDouble = aDouble, let bDouble = bDouble\
    \ {\n        if aDouble > bDouble {\n            return a\n        } else if aDouble\
    \ < bDouble {\n            return b\n        } else {\n            return nil\n\
    \        }\n    } else {\n        //handle some error\n        return nil\n  \
    \  }", "    switch a {\n    case .intValue(let int):\n        switch b {\n   \
    \     case .intValue(let otherInt):\n            if int > otherInt {\n       \
    \         return a\n            } else if int < otherInt {\n                return\
    \ b\n            } else {\n                return nil\n            }\n       \
    \ case .doubleValue(let double):\n            if Double(int) > double {\n    \
    \            return a\n            } else if Double(int) < double {\n        \
    \        return b\n            } else {\n                return nil\n        \
    \    }\n        case .stringValue(let string):\n            if let double = Double(string)\
    \ {\n                if Double(int) > double {\n                    return a\n\
    \                } else if Double(int) < double {\n                    return\
    \ b\n                } else {\n                    return nil\n              \
    \  }\n            } else {\n                return nil\n            }\n      \
    \  }\n    case .doubleValue(let double):\n        switch b {\n        case .intValue(let\
    \ int):\n            if double > Double(int) {\n                return a\n   \
    \         } else if double < Double(int) {\n                return b\n       \
    \     } else {\n                return nil\n            }\n        case .doubleValue(let\
    \ otherDouble):\n            if double > otherDouble {\n                return\
    \ a\n            } else if double < otherDouble {\n                return b\n\
    \            } else {\n                return nil\n            }\n        case\
    \ .stringValue(let string):\n            if let otherDouble = Double(string) {\n\
    \                if double > otherDouble {\n                    return a\n   \
    \             } else if double < otherDouble {\n                    return b\n\
    \                } else {\n                    return nil\n                }\n\
    \            } else {\n                return nil\n            }\n        }\n\
    \    case .stringValue(let string):\n        switch b {\n        case .intValue(let\
    \ int):\n            if let double = Double(string) {\n                if double\
    \ > Double(int) {\n                    return a\n                } else if double\
    \ < Double(int) {\n                    return b\n                } else {\n  \
    \                  return nil\n                }\n            } else {\n     \
    \           return nil\n            }\n        case .doubleValue(let double):\n\
    \            if let otherDouble = Double(string) {\n                if otherDouble\
    \ > double {\n                   ", "    // YOUR CODE HERE\n    switch a {\n \
    \   case .intValue(let aInt):\n        switch b {\n        case .intValue(let\
    \ bInt):\n            if (aInt > bInt) {\n                return a\n         \
    \   } else if (aInt < bInt) {\n                return b\n            } else {\n\
    \                return nil\n            }\n        case .doubleValue(let bDouble):\n\
    \            if (Double(aInt) > bDouble) {\n                return a\n       \
    \     } else if (Double(aInt) < bDouble) {\n                return b\n       \
    \     } else {\n                return nil\n            }\n        case .stringValue(let\
    \ bString):\n            if (Double(aInt) > Double(bString)!) {\n            \
    \    return a\n            } else if (Double(aInt) < Double(bString)!) {\n   \
    \             return b\n            } else {\n                return nil\n   \
    \         }\n        }\n    case .doubleValue(let aDouble):\n        switch b\
    \ {\n        case .intValue(let bInt):\n            if (aDouble > Double(bInt))\
    \ {\n                return a\n            } else if (aDouble < Double(bInt))\
    \ {\n                return b\n            } else {\n                return nil\n\
    \            }\n        case .doubleValue(let bDouble):\n            if (aDouble\
    \ > bDouble) {\n                return a\n            } else if (aDouble < bDouble)\
    \ {\n                return b\n            } else {\n                return nil\n\
    \            }\n        case .stringValue(let bString):\n            if (aDouble\
    \ > Double(bString)!) {\n                return a\n            } else if (aDouble\
    \ < Double(bString)!) {\n                return b\n            } else {\n    \
    \            return nil\n            }\n        }\n    case .stringValue(let aString):\n\
    \        switch b {\n        case .intValue(let bInt):\n            if (Double(aString)!\
    \ > Double(bInt)) {\n                return a\n            } else if (Double(aString)!\
    \ < Double(bInt)) {\n                return b\n            } else {\n        \
    \        return nil\n            }\n        case .doubleValue(let bDouble):\n\
    \            if (Double(aString)! > bDouble)", "    // Note: the Equatable protocol\
    \ allows the == operator to be used on the Value enum\n    // Note: the Hashable\
    \ protocol allows the Value enum to be used as dictionary keys\n    let type_dictionary\
    \ = [\n        (a: Value.intValue(0), b: Value.doubleValue(0.0), c: Value.stringValue(\"\
    0.0\")),\n        (a: Value.intValue(0), b: Value.stringValue(\"0.0\"), c: Value.stringValue(\"\
    0.0\")),\n        (a: Value.doubleValue(0.0), b: Value.stringValue(\"0.0\"), c:\
    \ Value.stringValue(\"0.0\"))\n    ]\n    for type_triple in type_dictionary {\n\
    \        if a == type_triple.a && b == type_triple.b {\n            return type_triple.c\n\
    \        }\n    }\n    return nil", "    var biggerValue: Value?\n    switch a\
    \ {\n    case .intValue(let a):\n        switch b {\n        case .intValue(let\
    \ b):\n            biggerValue = a > b ? a : b\n        case .doubleValue(let\
    \ b):\n            biggerValue = a > b ? a : b\n        case .stringValue(let\
    \ b):\n            let bFloat = (b as NSString).floatValue\n            biggerValue\
    \ = a > bFloat ? a : bFloat\n        }\n    case .doubleValue(let a):\n      \
    \  switch b {\n        case .intValue(let b):\n            biggerValue = a > Float(b)\
    \ ? a : b\n        case .doubleValue(let b):\n            biggerValue = a > b\
    \ ? a : b\n        case .stringValue(let b):\n            let bFloat = (b as NSString).floatValue\n\
    \            biggerValue = a > bFloat ? a : bFloat\n        }\n    case .stringValue(let\
    \ a):\n        switch b {\n        case .intValue(let b):\n            let aFloat\
    \ = (a as NSString).floatValue\n            biggerValue = aFloat > Float(b) ?\
    \ a : b\n        case .doubleValue(let b):\n            let aFloat = (a as NSString).floatValue\n\
    \            biggerValue = aFloat > b ? a : b\n        case .stringValue(let b):\n\
    \            let aFloat = (a as NSString).floatValue\n            let bFloat =\
    \ (b as NSString).floatValue\n            biggerValue = aFloat > bFloat ? a :\
    \ bFloat\n        }\n    }\n    return biggerValue", "    switch (a, b) {\n  \
    \  case (.intValue(let a), .intValue(let b)):\n        return a > b ? a : b\n\
    \    case (.doubleValue(let a), .doubleValue(let b)):\n        return a > b ?\
    \ a : b\n    case (.stringValue(let a), .stringValue(let b)):\n        return\
    \ a > b ? a : b\n    default:\n        return nil\n    }", "    if case let .intValue(intA)\
    \ = a, case let .intValue(intB) = b {\n        return intA > intB ? a : intA <\
    \ intB ? b : nil\n    } else if case let .doubleValue(doubleA) = a, case let .doubleValue(doubleB)\
    \ = b {\n        return doubleA > doubleB ? a : doubleA < doubleB ? b : nil\n\
    \    } else if case let .stringValue(stringA) = a, case let .stringValue(stringB)\
    \ = b {\n        let a = stringA.replacingOccurrences(of: \",\", with: \".\")\n\
    \        let b = stringB.replacingOccurrences(of: \",\", with: \".\")\n      \
    \  if let doubleA = Double(a), let doubleB = Double(b) {\n            return doubleA\
    \ > doubleB ? a : doubleA < doubleB ? b : nil\n        }\n    }\n    return nil",
  "    // TODO: Write some code to solve this coding challenge\n    return nil", " \
    \   \n    let aDouble = valueToDouble(a)\n    let bDouble = valueToDouble(b)\n\
    \    \n    return aDouble > bDouble ? doubleToValue(aDouble) : (bDouble > aDouble\
    \ ? doubleToValue(bDouble) : nil)", '    return nil', "    // Hint: This function\
    \ is deceptively simple.\n    // Again, use switch-case and pattern matching to\
    \ your advantage.\n    switch (a, b) {\n    case (.intValue(let first), .intValue(let\
    \ second)):\n        return first > second ? .intValue(first) : .intValue(second)\n\
    \    case (.doubleValue(let first), .doubleValue(let second)):\n        return\
    \ first > second ? .doubleValue(first) : .doubleValue(second)\n    case (.stringValue(let\
    \ first), .stringValue(let second)):\n        return first > second ? .stringValue(first)\
    \ : .stringValue(second)\n    case (.stringValue(let first), .intValue(let second)):\n\
    \        if let firstValue = Double(first) {\n            return firstValue >\
    \ Double(second) ? .stringValue(first) : .intValue(second)\n        }\n    case\
    \ (.stringValue(let first), .doubleValue(let second)):\n        if let firstValue\
    \ = Double(first) {\n            return firstValue > second ? .stringValue(first)\
    \ : .doubleValue(second)\n        }\n    case (.intValue(let first), .stringValue(let\
    \ second)):\n        if let secondValue = Double(second) {\n            return\
    \ Double(first) > secondValue ? .intValue(first) : .stringValue(second)\n    \
    \    }\n    case (.doubleValue(let first), .stringValue(let second)):\n      \
    \  if let secondValue = Double(second) {\n            return first > secondValue\
    \ ? .doubleValue(first) : .stringValue(second)\n        }\n    default:\n    \
    \    return nil\n    }\n    return nil", "    // TODO\n    let lhs: Double\n \
    \   let rhs: Double\n    switch a {\n    case .intValue(let intValue):\n     \
    \   lhs = Double(intValue)\n    case .doubleValue(let doubleValue):\n        lhs\
    \ = doubleValue\n    case .stringValue(let stringValue):\n        lhs = Double(stringValue.replacingOccurrences(of:\
    \ \",\", with: \".\")) ?? 0\n    }\n    switch b {\n    case .intValue(let intValue):\n\
    \        rhs = Double(intValue)\n    case .doubleValue(let doubleValue):\n   \
    \     rhs = doubleValue\n    case .stringValue(let stringValue):\n        rhs\
    \ = Double(stringValue.replacingOccurrences(of: \",\", with: \".\")) ?? 0\n  \
    \  }\n    if lhs == rhs {\n        return nil\n    } else if lhs > rhs {\n   \
    \     return a\n    } else {\n        return b\n    }", "    guard a != b else\
    \ { return nil }\n    switch (a, b) {\n    case let (.intValue(a), .intValue(b)):\n\
    \        return .intValue(max(a, b))\n    case let (.intValue(a), .doubleValue(b)):\n\
    \        return .doubleValue(max(Double(a), b))\n    case let (.intValue(a), .stringValue(b)):\n\
    \        return .stringValue(max(String(a), b))\n    case let (.doubleValue(a),\
    \ .intValue(b)):\n        return .doubleValue(max(a, Double(b)))\n    case let\
    \ (.doubleValue(a), .doubleValue(b)):\n        return .doubleValue(max(a, b))\n\
    \    case let (.doubleValue(a), .stringValue(b)):\n        return .stringValue(max(String(a),\
    \ b))\n    case let (.stringValue(a), .intValue(b)):\n        return .stringValue(max(a,\
    \ String(b)))\n    case let (.stringValue(a), .doubleValue(b)):\n        return\
    \ .stringValue(max(a, String(b)))\n    case let (.stringValue(a), .stringValue(b)):\n\
    \        return .stringValue(max(a, b))\n    }", "    switch (a, b) {\n    case\
    \ (.intValue(let x), .intValue(let y)):\n        return x > y ? .intValue(x) :\
    \ .intValue(y)\n    case (.doubleValue(let x), .doubleValue(let y)):\n       \
    \ return x > y ? .doubleValue(x) : .doubleValue(y)\n    case (.stringValue(let\
    \ x), .stringValue(let y)):\n        return x > y ? .stringValue(x) : .stringValue(y)\n\
    \    case (.intValue(let x), .doubleValue(let y)):\n        return x > y ? .intValue(x)\
    \ : .doubleValue(y)\n    case (.intValue(let x), .stringValue(let y)):\n     \
    \   return x > y ? .intValue(x) : .stringValue(y)\n    case (.doubleValue(let\
    \ x), .intValue(let y)):\n        return x > y ? .doubleValue(x) : .intValue(y)\n\
    \    case (.doubleValue(let x), .stringValue(let y)):\n        return x > y ?\
    \ .doubleValue(x) : .stringValue(y)\n    case (.stringValue(let x), .intValue(let\
    \ y)):\n        return x > y ? .stringValue(x) : .intValue(y)\n    case (.stringValue(let\
    \ x), .doubleValue(let y)):\n        return x > y ? .stringValue(x) : .doubleValue(y)\n\
    \    default:\n        return nil\n    }", "    switch (a, b) {\n    case let\
    \ (.intValue(a), .intValue(b)) where a > b:\n        return .intValue(a)\n   \
    \ case let (.intValue(a), .intValue(b)) where a < b:\n        return .intValue(b)\n\
    \    case let (.intValue(a), .doubleValue(b)) where a > b:\n        return .intValue(a)\n\
    \    case let (.intValue(a), .doubleValue(b)) where a < b:\n        return .doubleValue(b)\n\
    \    case let (.intValue(a), .stringValue(b)) where a > Int(b.replacingOccurrences(of:\
    \ \",\", with: \".\"))!:\n        return .intValue(a)\n    case let (.intValue(a),\
    \ .stringValue(b)) where a < Int(b.replacingOccurrences(of: \",\", with: \".\"\
    ))!:\n        return .stringValue(b)\n    case let (.doubleValue(a), .intValue(b))\
    \ where a > b:\n        return .doubleValue(a)\n    case let (.doubleValue(a),\
    \ .intValue(b)) where a < b:\n        return .intValue(b)\n    case let (.doubleValue(a),\
    \ .doubleValue(b)) where a > b:\n        return .doubleValue(a)\n    case let\
    \ (.doubleValue(a), .doubleValue(b)) where a < b:\n        return .doubleValue(b)\n\
    \    case let (.doubleValue(a), .stringValue(b)) where a > Double(b.replacingOccurrences(of:\
    \ \",\", with: \".\"))!:\n        return .doubleValue(a)\n    case let (.doubleValue(a),\
    \ .stringValue(b)) where a < Double(b.replacingOccurrences(of: \",\", with: \"\
    .\"))!:\n        return .stringValue(b)\n    case let (.stringValue(a), .intValue(b))\
    \ where Double(a.replacingOccurrences(of: \",\", with: \".\"))! > Double(b):\n\
    \        return .stringValue(a)\n    case let (.stringValue(a), .intValue(b",
  "    // TODO: Implement\n    return nil", "    let f = { (a: String, b: String)\
    \ -> String? in\n        guard let a = Double(a), let b = Double(b) else { return\
    \ nil }\n        return a >= b ? a.description : b.description\n    }\n    let\
    \ int = { (a: Int, b: Int) -> Int? in a >= b ? a : nil }\n    let double = { (a:\
    \ Double, b: Double) -> Double? in a >= b ? a : nil }\n    return (a, b) |> switch\n\
    \        .intValue(int), .intValue(int) => return .intValue\n        .intValue(int),\
    \ .doubleValue(double) => return .doubleValue\n        .intValue(int), .stringValue(f)\
    \ => return .stringValue\n        .doubleValue(double), .intValue(int) => return\
    \ .doubleValue\n        .doubleValue(double), .doubleValue(double) => return .doubleValue\n\
    \        .doubleValue(double), .stringValue(f) => return .stringValue\n      \
    \  .stringValue(f), .intValue(int) => return .stringValue\n        .stringValue(f),\
    \ .doubleValue(double) => return .stringValue\n        .stringValue(f), .stringValue(f)\
    \ => return .stringValue\n        >> else { return nil }", "    // FIXME: implement!\n\
    \    var result: Value? = nil\n    switch (a, b) {\n    case (.intValue(let aVal),\
    \ .intValue(let bVal)):\n        if aVal < bVal {\n            result = b\n  \
    \      } else if aVal > bVal {\n            result = a\n        }\n    case (.intValue(let\
    \ aVal), .doubleValue(let bVal)):\n        if aVal < bVal {\n            result\
    \ = b\n        } else if aVal > bVal {\n            result = a\n        }\n  \
    \  case (.intValue(let aVal), .stringValue(let bVal)):\n        let bValNum =\
    \ Float(bVal)\n        if aVal < bValNum {\n            result = b\n        }\
    \ else if aVal > bValNum {\n            result = a\n        }\n    case (.doubleValue(let\
    \ aVal), .intValue(let bVal)):\n        if aVal < bVal {\n            result =\
    \ b\n        } else if aVal > bVal {\n            result = a\n        }\n    case\
    \ (.doubleValue(let aVal), .doubleValue(let bVal)):\n        if aVal < bVal {\n\
    \            result = b\n        } else if aVal > bVal {\n            result =\
    \ a\n        }\n    case (.doubleValue(let aVal), .stringValue(let bVal)):\n \
    \       let bValNum = Float(bVal)\n        if aVal < bValNum {\n            result\
    \ = b\n        } else if aVal > bValNum {\n            result = a\n        }\n\
    \    case (.stringValue(let aVal), .intValue(let bVal)):\n        let aValNum\
    \ = Float(aVal)\n        if aValNum < bVal {\n            result = b\n       \
    \ } else if aValNum > bVal {\n            result = a\n        }\n    case (.stringValue(let\
    \ aVal), .doubleValue(let bVal)):\n        let aValNum = Float(aVal)\n       \
    \ if aValNum < bVal {\n            result = b\n        } else if aValNum > bVal\
    \ {\n            result = a\n        }\n    case (.stringValue", "    switch (a,\
    \ b) {\n    case (.intValue(let a), .intValue(let b)):\n        return a > b ?\
    \ a : b\n    case (.doubleValue(let a), .doubleValue(let b)):\n        return\
    \ a > b ? a : b\n    case (.stringValue(let a), .stringValue(let b)):\n      \
    \  return a > b ? a : b\n    default:\n        return nil\n    }", "    switch\
    \ (a, b) {\n    case let (.intValue(a), .intValue(b)) where a > b:\n        return\
    \ .intValue(a)\n    case let (.intValue(a), .intValue(b)) where a < b:\n     \
    \   return .intValue(b)\n    case let (.intValue(a), .doubleValue(b)) where a\
    \ > b:\n        return .intValue(a)\n    case let (.intValue(a), .doubleValue(b))\
    \ where a < b:\n        return .doubleValue(b)\n    case let (.intValue(a), .stringValue(b))\
    \ where a > Int(b)!:\n        return .intValue(a)\n    case let (.intValue(a),\
    \ .stringValue(b)) where a < Int(b)!:\n        return .stringValue(b)\n    case\
    \ let (.doubleValue(a), .intValue(b)) where a > b:\n        return .doubleValue(a)\n\
    \    case let (.doubleValue(a), .intValue(b)) where a < b:\n        return .intValue(b)\n\
    \    case let (.doubleValue(a), .doubleValue(b)) where a > b:\n        return\
    \ .doubleValue(a)\n    case let (.doubleValue(a), .doubleValue(b)) where a < b:\n\
    \        return .doubleValue(b)\n    case let (.doubleValue(a), .stringValue(b))\
    \ where a > Double(b)!:\n        return .doubleValue(a)\n    case let (.doubleValue(a),\
    \ .stringValue(b)) where a < Double(b)!:\n        return .stringValue(b)\n   \
    \ case let (.stringValue(a), .intValue(b)) where Int(a)! > b:\n        return\
    \ .stringValue(a)\n    case let (.stringValue(a), .intValue(b)) where Int(a)!\
    \ < b:\n        return .intValue(b)\n    case let (.stringValue(a), .doubleValue(b))\
    \ where Double(a)! > b:\n        return .stringValue(a)\n    case let (.stringValue(a),\
    \ .doubleValue(b)) where Double(a)! < b:\n        return .doubleValue(b", "  \
    \  switch (a, b) {\n    case (.intValue(let a), .intValue(let b)):\n        return\
    \ a > b ? a : b\n    case (.doubleValue(let a), .doubleValue(let b)):\n      \
    \  return a > b ? a : b\n    case (.stringValue(let a), .stringValue(let b)):\n\
    \        let d1 = Double(a.components(separatedBy: CharacterSet(charactersIn:\
    \ \"., \")).joined()) ?? 0\n        let d2 = Double(b.components(separatedBy:\
    \ CharacterSet(charactersIn: \"., \")).joined()) ?? 0\n        return d1 > d2\
    \ ? a : b\n    case (.intValue(let a), .doubleValue(let b)):\n        return a\
    \ > b ? .intValue(a) : .doubleValue(b)\n    case (.intValue(let a), .stringValue(let\
    \ b)):\n        let d = Double(b.components(separatedBy: CharacterSet(charactersIn:\
    \ \"., \")).joined()) ?? 0\n        return a > d ? .intValue(a) : .stringValue(b)\n\
    \    case (.doubleValue(let a), .intValue(let b)):\n        return a > b ? .doubleValue(a)\
    \ : .intValue(b)\n    case (.doubleValue(let a), .stringValue(let b)):\n     \
    \   let d = Double(b.components(separatedBy: CharacterSet(charactersIn: \"., \"\
    )).joined()) ?? 0\n        return a > d ? .doubleValue(a) : .stringValue(b)\n\
    \    case (.stringValue(let a), .intValue(let b)):\n        let d = Double(a.components(separatedBy:\
    \ CharacterSet(charactersIn: \"., \")).joined()) ?? 0\n        return d > b ?\
    \ .stringValue(a) : .intValue(b)\n    case (.stringValue(let a), .doubleValue(let\
    \ b)):\n        let d = Double(a.components(separatedBy: CharacterSet(charactersIn:\
    \ \"., \")).joined()) ?? 0\n        return d > b ? .stringValue(a) : .doubleValue(b)\n",
  "    switch (a, b) {\n    case (.intValue(let x), .intValue(let y)):\n        return\
    \ x > y ? .intValue(x) : .intValue(y)\n    case (.doubleValue(let x), .doubleValue(let\
    \ y)):\n        return x > y ? .doubleValue(x) : .doubleValue(y)\n    case (.stringValue(let\
    \ x), .stringValue(let y)):\n        return x > y ? .stringValue(x) : .stringValue(y)\n\
    \    case (.intValue(let x), .doubleValue(let y)):\n        return x > y ? .intValue(x)\
    \ : .doubleValue(y)\n    case (.intValue(let x), .stringValue(let y)):\n     \
    \   return x > y ? .intValue(x) : .stringValue(y)\n    case (.doubleValue(let\
    \ x), .intValue(let y)):\n        return x > y ? .doubleValue(x) : .intValue(y)\n\
    \    case (.doubleValue(let x), .stringValue(let y)):\n        return x > y ?\
    \ .doubleValue(x) : .stringValue(y)\n    case (.stringValue(let x), .intValue(let\
    \ y)):\n        return x > y ? .stringValue(x) : .intValue(y)\n    case (.stringValue(let\
    \ x), .doubleValue(let y)):\n        return x > y ? .stringValue(x) : .doubleValue(y)\n\
    \    default:\n        return nil\n    }", "    // YOUR CODE HERE\n    var ret:\
    \ Value? = nil\n    switch (a, b) {\n    case let (.intValue(aInt), .intValue(bInt)):\n\
    \        if aInt > bInt {\n            ret = a\n        } else if aInt < bInt\
    \ {\n            ret = b\n        }\n    case let (.intValue(aInt), .doubleValue(bDouble)):\n\
    \        if aInt > bDouble {\n            ret = .intValue(aInt)\n        } else\
    \ if aInt < bDouble {\n            ret = .doubleValue(bDouble)\n        }\n  \
    \  case let (.intValue(aInt), .stringValue(bString)):\n        let bFloat = Float(bString)\n\
    \        if aInt > bFloat! {\n            ret = .intValue(aInt)\n        } else\
    \ if aInt < bFloat! {\n            ret = .stringValue(bString)\n        }\n  \
    \  case let (.doubleValue(aDouble), .intValue(bInt)):\n        if aDouble > bInt\
    \ {\n            ret = .doubleValue(aDouble)\n        } else if aDouble < bInt\
    \ {\n            ret = .intValue(bInt)\n        }\n    case let (.doubleValue(aDouble),\
    \ .doubleValue(bDouble)):\n        if aDouble > bDouble {\n            ret = .doubleValue(aDouble)\n\
    \        } else if aDouble < bDouble {\n            ret = .doubleValue(bDouble)\n\
    \        }\n    case let (.doubleValue(aDouble), .stringValue(bString)):\n   \
    \     let bFloat = Float(bString)\n        if aDouble > bFloat! {\n          \
    \  ret = .doubleValue(aDouble)\n        } else if aDouble < bFloat! {\n      \
    \      ret = .stringValue(bString)\n        }\n    case let (.stringValue(aString),\
    \ .intValue(bInt)):\n        let aFloat = Float(aString)\n        if aFloat! >\
    \ bInt {\n            ret = .stringValue(aString)\n        } else if aFloat! <\
    \ bInt {\n            ret = .intValue(bInt)\n        }\n    case let (.stringValue(aString),\
    \ .double", "    switch (a, b) {\n    case (.intValue(let a), .intValue(let b)):\n\
    \        return a > b ? a : b\n    case (.doubleValue(let a), .doubleValue(let\
    \ b)):\n        return a > b ? a : b\n    case (.stringValue(let a), .stringValue(let\
    \ b)):\n        return a > b ? a : b\n    case (.intValue(let a), .doubleValue(let\
    \ b)):\n        return a > b ? a : b\n    case (.intValue(let a), .stringValue(let\
    \ b)):\n        return a > b ? a : b\n    case (.doubleValue(let a), .intValue(let\
    \ b)):\n        return a > b ? a : b\n    case (.doubleValue(let a), .stringValue(let\
    \ b)):\n        return a > b ? a : b\n    case (.stringValue(let a), .intValue(let\
    \ b)):\n        return a > b ? a : b\n    case (.stringValue(let a), .doubleValue(let\
    \ b)):\n        return a > b ? a : b\n    default:\n        return nil\n    }",
  "    switch (a, b) {\n    case let (.intValue(a), .intValue(b)) where a > b:\n \
    \       return .intValue(a)\n    case let (.intValue(a), .intValue(b)) where a\
    \ < b:\n        return .intValue(b)\n    case let (.intValue(a), .doubleValue(b))\
    \ where a > b:\n        return .intValue(a)\n    case let (.intValue(a), .doubleValue(b))\
    \ where a < b:\n        return .doubleValue(b)\n    case let (.intValue(a), .stringValue(b))\
    \ where a > Double(b)!:\n        return .intValue(a)\n    case let (.intValue(a),\
    \ .stringValue(b)) where a < Double(b)!:\n        return .stringValue(b)\n   \
    \ case let (.doubleValue(a), .intValue(b)) where a > b:\n        return .doubleValue(a)\n\
    \    case let (.doubleValue(a), .intValue(b)) where a < b:\n        return .intValue(b)\n\
    \    case let (.doubleValue(a), .doubleValue(b)) where a > b:\n        return\
    \ .doubleValue(a)\n    case let (.doubleValue(a), .doubleValue(b)) where a < b:\n\
    \        return .doubleValue(b)\n    case let (.doubleValue(a), .stringValue(b))\
    \ where a > Double(b)!:\n        return .doubleValue(a)\n    case let (.doubleValue(a),\
    \ .stringValue(b)) where a < Double(b)!:\n        return .stringValue(b)\n   \
    \ case let (.stringValue(a), .intValue(b)) where Double(a)! > b:\n        return\
    \ .stringValue(a)\n    case let (.stringValue(a), .intValue(b)) where Double(a)!\
    \ < b:\n        return .intValue(b)\n    case let (.stringValue(a), .doubleValue(b))\
    \ where Double(a)! > b:\n        return .stringValue(a)\n    case let (.stringValue(a),\
    \ .doubleValue(b)) where Double(a)! < b:\n        return .doubleValue(b", "  \
    \  switch (a, b) {\n    case (.intValue(let a), .intValue(let b)):\n        return\
    \ a > b ? a : b\n    case (.doubleValue(let a), .doubleValue(let b)):\n      \
    \  return a > b ? a : b\n    case (.stringValue(let a), .stringValue(let b)):\n\
    \        return a > b ? a : b\n    default:\n        return nil\n    }", "   \
    \ switch (a, b) {\n    case (.intValue(let x), .intValue(let y)) where x < y:\n\
    \        return .intValue(y)\n    case (.intValue(let x), .doubleValue(let y))\
    \ where x < y:\n        return .doubleValue(y)\n    case (.intValue(let x), .stringValue(let\
    \ y)) where x < y:\n        return .stringValue(y)\n    case (.doubleValue(let\
    \ x), .intValue(let y)) where x < y:\n        return .intValue(y)\n    case (.doubleValue(let\
    \ x), .doubleValue(let y)) where x < y:\n        return .doubleValue(y)\n    case\
    \ (.doubleValue(let x), .stringValue(let y)) where x < y:\n        return .stringValue(y)\n\
    \    case (.stringValue(let x), .intValue(let y)) where x < y:\n        return\
    \ .intValue(y)\n    case (.stringValue(let x), .doubleValue(let y)) where x <\
    \ y:\n        return .doubleValue(y)\n    case (.stringValue(let x), .stringValue(let\
    \ y)) where x < y:\n        return .stringValue(y)\n    default:\n        return\
    \ nil\n    }", "    // do something\n    return nil", '    return nil', "    switch\
    \ (a, b) {\n    case (.intValue(let x), .intValue(let y)):\n        return x >\
    \ y ? .intValue(x) : y > x ? .intValue(y) : nil\n    case (.intValue(let x), .doubleValue(let\
    \ y)):\n        return x > y ? .intValue(x) : y > x ? .doubleValue(y) : nil\n\
    \    case (.intValue(let x), .stringValue(let y)):\n        return x > Double(y)!\
    \ ? .intValue(x) : Double(y)! > x ? .stringValue(y) : nil\n    case (.doubleValue(let\
    \ x), .intValue(let y)):\n        return x > y ? .doubleValue(x) : y > x ? .intValue(y)\
    \ : nil\n    case (.doubleValue(let x), .doubleValue(let y)):\n        return\
    \ x > y ? .doubleValue(x) : y > x ? .doubleValue(y) : nil\n    case (.doubleValue(let\
    \ x), .stringValue(let y)):\n        return x > Double(y)! ? .doubleValue(x) :\
    \ Double(y)! > x ? .stringValue(y) : nil\n    case (.stringValue(let x), .intValue(let\
    \ y)):\n        return Double(x)! > y ? .stringValue(x) : y > Double(x)! ? .intValue(y)\
    \ : nil\n    case (.stringValue(let x), .doubleValue(let y)):\n        return\
    \ Double(x)! > y ? .stringValue(x) : y > Double(x)! ? .doubleValue(y) : nil\n\
    \    case (.stringValue(let x), .stringValue(let y)):\n        return Double(x)!\
    \ > Double(y)! ? .stringValue(x) : Double(y)! > Double(x)! ? .stringValue(y) :\
    \ nil\n    }", "    \n    let aDouble = a.asDouble()\n    let bDouble = b.asDouble()\n\
    \    \n    if aDouble == nil && bDouble == nil {\n        return nil\n    }\n\
    \    \n    if aDouble == nil {\n        return b\n    }\n    \n    if bDouble\
    \ == nil {\n        return a\n    }\n    \n    if aDouble! >= bDouble! {\n   \
    \     return a\n    } else {\n        return b\n    }", "    // TODO: your code\
    \ here\n    return nil", "    switch (a, b) {\n    case let (.intValue(a_int),\
    \ .intValue(b_int)):\n        return a_int > b_int ? a : b_int > a_int ? b : nil\n\
    \    case let (.intValue(a_int), .doubleValue(b_double)):\n        return a_int\
    \ > b_double ? a : b_double > a_int ? b : nil\n    case let (.intValue(a_int),\
    \ .stringValue(b_string)):\n        return a_int > Double(b_string) ?? 0 ? a :\
    \ b\n    case let (.doubleValue(a_double), .intValue(b_int)):\n        return\
    \ a_double > b_int ? a : b_int > a_double ? b : nil\n    case let (.doubleValue(a_double),\
    \ .doubleValue(b_double)):\n        return a_double > b_double ? a : b_double\
    \ > a_double ? b : nil\n    case let (.doubleValue(a_double), .stringValue(b_string)):\n\
    \        return a_double > Double(b_string) ?? 0 ? a : b\n    case let (.stringValue(a_string),\
    \ .intValue(b_int)):\n        return Double(a_string) ?? 0 > b_int ? a : b\n \
    \   case let (.stringValue(a_string), .doubleValue(b_double)):\n        return\
    \ Double(a_string) ?? 0 > b_double ? a : b\n    case let (.stringValue(a_string),\
    \ .stringValue(b_string)):\n        return Double(a_string) ?? 0 > Double(b_string)\
    \ ?? 0 ? a : b_string > a_string ? b : nil\n    }", "    // YOUR CODE HERE\n \
    \   switch (a, b) {\n    case (.intValue(let a), .intValue(let b)):\n        return\
    \ a > b ? a : b\n    case (.doubleValue(let a), .doubleValue(let b)):\n      \
    \  return a > b ? a : b\n    case (.stringValue(let a), .stringValue(let b)):\n\
    \        return a > b ? a : b\n    default:\n        return nil\n    }", "   \
    \ switch a {\n    case .intValue(let i):\n        switch b {\n        case .intValue(let\
    \ j):\n            return i > j ? a : (i < j ? b : nil)\n        case .doubleValue(let\
    \ d):\n            return d\n        case .stringValue(let s):\n            return\
    \ .stringValue(s)\n        }\n    case .doubleValue(let d):\n        switch b\
    \ {\n        case .intValue(let i):\n            return a\n        case .doubleValue(let\
    \ e):\n            return d > e ? a : (d < e ? b : nil)\n        case .stringValue(let\
    \ s):\n            return .stringValue(s)\n        }\n    case .stringValue(let\
    \ s):\n        switch b {\n        case .intValue(let i):\n            return\
    \ .stringValue(s)\n        case .doubleValue(let d):\n            return .stringValue(s)\n\
    \        case .stringValue(let t):\n            if let ai = Int(s), let bi = Int(t)\
    \ {\n                return ai > bi ? a : (ai < bi ? b : nil)\n            } else\
    \ if let ad = Double(s), let bd = Double(t) {\n                return ad > bd\
    \ ? a : (ad < bd ? b : nil)\n            } else {\n                return a >\
    \ b ? a : (a < b ? b : nil)\n            }\n        }\n    }", "    switch a {\n\
    \    case .intValue(let intA):\n        switch b {\n        case .intValue(let\
    \ intB):\n            return intA > intB ? a : b\n        case .doubleValue(let\
    \ doubleB):\n            return doubleB > Double(intA) ? b : a\n        case .stringValue(let\
    \ stringB):\n            return Double(stringB) > Double(intA) ? b : a\n     \
    \   }\n    case .doubleValue(let doubleA):\n        switch b {\n        case .intValue(let\
    \ intB):\n            return doubleA > Double(intB) ? a : b\n        case .doubleValue(let\
    \ doubleB):\n            return doubleA > doubleB ? a : b\n        case .stringValue(let\
    \ stringB):\n            return Double(stringB) > doubleA ? b : a\n        }\n\
    \    case .stringValue(let stringA):\n        switch b {\n        case .intValue(let\
    \ intB):\n            return Double(stringA) > Double(intB) ? a : b\n        case\
    \ .doubleValue(let doubleB):\n            return doubleB > Double(stringA) ? b\
    \ : a\n        case .stringValue(let stringB):\n            return Double(stringA)\
    \ > Double(stringB) ? a : b\n        }\n    }", "    // TODO\n    return nil",
  "    switch (a, b) {\n    case (.intValue(let a), .intValue(let b)):\n        return\
    \ a >= b ? a : b\n    case (.doubleValue(let a), .doubleValue(let b)):\n     \
    \   return a >= b ? a : b\n    case (.stringValue(let a), .stringValue(let b)):\n\
    \        return a >= b ? a : b\n    case (.intValue(let a), .doubleValue(let b)):\n\
    \        return a >= b ? a : b\n    case (.intValue(let a), .stringValue(let b)):\n\
    \        return a >= b ? a : b\n    case (.doubleValue(let a), .intValue(let b)):\n\
    \        return a >= b ? a : b\n    case (.doubleValue(let a), .stringValue(let\
    \ b)):\n        return a >= b ? a : b\n    case (.stringValue(let a), .intValue(let\
    \ b)):\n        return a >= b ? a : b\n    case (.stringValue(let a), .doubleValue(let\
    \ b)):\n        return a >= b ? a : b\n    default:\n        return nil\n    }",
  "    \n    switch (a, b) {\n    case (.intValue(let aVal), .intValue(let bVal)):\n\
    \        return aVal > bVal ? a : b\n    case (.doubleValue(let aVal), .doubleValue(let\
    \ bVal)):\n        return aVal > bVal ? a : b\n    case (.stringValue(let aVal),\
    \ .stringValue(let bVal)):\n        return aVal > bVal ? a : b\n    case (.intValue(let\
    \ aVal), .doubleValue(let bVal)):\n        return aVal > bVal ? a : b\n    case\
    \ (.intValue(let aVal), .stringValue(let bVal)):\n        return aVal > bVal ?\
    \ a : b\n    case (.doubleValue(let aVal), .intValue(let bVal)):\n        return\
    \ aVal > bVal ? a : b\n    case (.doubleValue(let aVal), .stringValue(let bVal)):\n\
    \        return aVal > bVal ? a : b\n    case (.stringValue(let aVal), .intValue(let\
    \ bVal)):\n        return aVal > bVal ? a : b\n    case (.stringValue(let aVal),\
    \ .doubleValue(let bVal)):\n        return aVal > bVal ? a : b\n    default:\n\
    \        return nil\n    }", "    \n    var aValue = 0.0\n    var bValue = 0.0\n\
    \    \n    switch a {\n    case .intValue(let value):\n        aValue = Double(value)\n\
    \    case .doubleValue(let value):\n        aValue = value\n    case .stringValue(let\
    \ value):\n        aValue = Double(value.components(separatedBy: \",\").joined())\
    \ ?? Double(value) ?? 0.0\n    }\n    \n    switch b {\n    case .intValue(let\
    \ value):\n        bValue = Double(value)\n    case .doubleValue(let value):\n\
    \        bValue = value\n    case .stringValue(let value):\n        bValue = Double(value.components(separatedBy:\
    \ \",\").joined()) ?? Double(value) ?? 0.0\n    }\n    \n    if aValue > bValue\
    \ {\n        return a\n    } else if aValue < bValue {\n        return b\n   \
    \ } else {\n        return nil\n    }", "    var aa = 0.0\n    var bb = 0.0\n\
    \    switch a {\n    case .intValue(let ai):\n        aa = Double(ai)\n    case\
    \ .doubleValue(let ad):\n        aa = ad\n    case .stringValue(let as_):\n  \
    \      if let aas = Double(as_) {\n            aa = aas\n        }\n    }\n  \
    \  switch b {\n    case .intValue(let bi):\n        bb = Double(bi)\n    case\
    \ .doubleValue(let bd):\n        bb = bd\n    case .stringValue(let bs_):\n  \
    \      if let bbs = Double(bs_) {\n            bb = bbs\n        }\n    }\n  \
    \  if aa > bb {\n        switch a {\n        case .intValue(let ai):\n       \
    \     return .intValue(ai)\n        case .doubleValue(let ad):\n            return\
    \ .doubleValue(ad)\n        case .stringValue(let as_):\n            return .stringValue(as_)\n\
    \        }\n    } else if aa < bb {\n        switch b {\n        case .intValue(let\
    \ bi):\n            return .intValue(bi)\n        case .doubleValue(let bd):\n\
    \            return .doubleValue(bd)\n        case .stringValue(let bs_):\n  \
    \          return .stringValue(bs_)\n        }\n    } else {\n        return nil\n\
    \    }", "    switch (a, b) {\n    case (.intValue(let aInt), .intValue(let bInt)):\n\
    \        if aInt > bInt {\n            return .intValue(aInt)\n        } else\
    \ if aInt < bInt {\n            return .intValue(bInt)\n        } else {\n   \
    \         return nil\n        }\n    case (.intValue(let aInt), .doubleValue(let\
    \ bDouble)):\n        if Double(aInt) > bDouble {\n            return .doubleValue(Double(aInt))\n\
    \        } else if Double(aInt) < bDouble {\n            return .doubleValue(bDouble)\n\
    \        } else {\n            return nil\n        }\n    case (.intValue(let\
    \ aInt), .stringValue(let bString)):\n        if Double(aInt) > stringToDouble(string:\
    \ bString) {\n            return .doubleValue(Double(aInt))\n        } else if\
    \ Double(aInt) < stringToDouble(string: bString) {\n            return .stringValue(bString)\n\
    \        } else {\n            return nil\n        }\n    case (.doubleValue(let\
    \ aDouble), .intValue(let bInt)):\n        if aDouble > Double(bInt) {\n     \
    \       return .doubleValue(aDouble)\n        } else if aDouble < Double(bInt)\
    \ {\n            return .doubleValue(Double(bInt))\n        } else {\n       \
    \     return nil\n        }\n    case (.doubleValue(let aDouble), .doubleValue(let\
    \ bDouble)):\n        if aDouble > bDouble {\n            return .doubleValue(aDouble)\n\
    \        } else if aDouble < bDouble {\n            return .doubleValue(bDouble)\n\
    \        } else {\n            return nil\n        }\n    case (.doubleValue(let\
    \ aDouble), .stringValue(let bString)):\n        if aDouble > stringToDouble(string:\
    \ bString) {\n            return .doubleValue(aDouble)\n        } else if aDouble\
    \ < stringToDouble(string: bString) {\n            return .stringValue(bString)\n\
    \        } else {\n            return nil\n        }\n    case (.stringValue(let\
    \ aString), .intValue(let bInt)", "    // TODO: Implement function here\n    return\
    \ nil", "    \n    switch (a, b) {\n    case let (.intValue(left), .intValue(right)):\n\
    \        if left == right {\n            return nil\n        } else {\n      \
    \      return left > right ? a : b\n        }\n    case let (.doubleValue(left),\
    \ .doubleValue(right)):\n        if left == right {\n            return nil\n\
    \        } else {\n            return left > right ? a : b\n        }\n    case\
    \ let (.stringValue(left), .stringValue(right)):\n        let leftInt = Int(left.replacingOccurrences(of:\
    \ \",\", with: \".\"))\n        let rightInt = Int(right.replacingOccurrences(of:\
    \ \",\", with: \".\"))\n        if leftInt == rightInt {\n            return nil\n\
    \        } else {\n            return leftInt! > rightInt! ? a : b\n        }\n\
    \    case let (.intValue(left), .doubleValue(right)):\n        if left == right\
    \ {\n            return nil\n        } else {\n            return left > right\
    \ ? a : b\n        }\n    case let (.intValue(left), .stringValue(right)):\n \
    \       let rightInt = Int(right.replacingOccurrences(of: \",\", with: \".\"))\n\
    \        if left == rightInt {\n            return nil\n        } else {\n   \
    \         return left > rightInt! ? a : b\n        }\n    case let (.doubleValue(left),\
    \ .intValue(right)):\n        if left == right {\n            return nil\n   \
    \     } else {\n            return left > right ? a : b\n        }\n    case let\
    \ (.doubleValue(left), .stringValue(right)):\n        let rightInt = Int(right.replacingOccurrences(of:\
    \ \",\", with: \".\"))\n        if left == rightInt {\n            return nil\n\
    \        } else {\n            return left > rightInt! ? a : b\n        }\n  \
    \  case let (.stringValue(left), .intValue(right)):\n        let leftInt = Int(left.replacingOccurrences(of:\
    \ \",\", with: \".\"))\n        if leftInt == right {\n            return nil\n\
    \        } else {\n            return", "    var aValue: Double = 0\n    var bValue:\
    \ Double = 0\n    switch a {\n    case .intValue(let int):\n        aValue = Double(int)\n\
    \    case .doubleValue(let double):\n        aValue = double\n    case .stringValue(let\
    \ string):\n        aValue = Double(string.replacingOccurrences(of: \",\", with:\
    \ \".\")) ?? 0\n    }\n    switch b {\n    case .intValue(let int):\n        bValue\
    \ = Double(int)\n    case .doubleValue(let double):\n        bValue = double\n\
    \    case .stringValue(let string):\n        bValue = Double(string.replacingOccurrences(of:\
    \ \",\", with: \".\")) ?? 0\n    }\n    if aValue == bValue {\n        return\
    \ nil\n    } else if aValue > bValue {\n        return a\n    } else {\n     \
    \   return b\n    }", "    switch (a, b) {\n    case (.intValue(let ai), .intValue(let\
    \ bi)):\n        return ai >= bi ? a : b\n    case (.intValue(let ai), .doubleValue(let\
    \ bd)):\n        return ai >= bd ? a : b\n    case (.intValue(let ai), .stringValue(let\
    \ bs)):\n        if let bd = Double(bs) {\n            return ai >= bd ? a : b\n\
    \        }\n        else {\n            return b\n        }\n    case (.doubleValue(let\
    \ ad), .intValue(let bi)):\n        return ad >= bi ? a : b\n    case (.doubleValue(let\
    \ ad), .doubleValue(let bd)):\n        return ad >= bd ? a : b\n    case (.doubleValue(let\
    \ ad), .stringValue(let bs)):\n        if let bd = Double(bs) {\n            return\
    \ ad >= bd ? a : b\n        }\n        else {\n            return b\n        }\n\
    \    case (.stringValue(let as_), .intValue(let bi)):\n        if let ad = Double(as_)\
    \ {\n            return ad >= bi ? a : b\n        }\n        else {\n        \
    \    return a\n        }\n    case (.stringValue(let as_), .doubleValue(let bd)):\n\
    \        if let ad = Double(as_) {\n            return ad >= bd ? a : b\n    \
    \    }\n        else {\n            return b\n        }\n    case (.stringValue(let\
    \ as_), .stringValue(let bs)):\n        if let ad = Double(as_), let bd = Double(bs)\
    \ {\n            return ad >= bd ? a : b\n        }\n        else {\n        \
    \    return as_ >= bs ? a : b\n        }\n    }", "    switch (a, b) {\n    case\
    \ (.intValue(let a), .intValue(let b)):\n        return a > b ? a : b\n    case\
    \ (.doubleValue(let a), .doubleValue(let b)):\n        return a > b ? a : b\n\
    \    case (.stringValue(let a), .stringValue(let b)):\n        return a > b ?\
    \ a : b\n    case (.intValue(let a), .doubleValue(let b)):\n        return a >\
    \ b ? a : b\n    case (.intValue(let a), .stringValue(let b)):\n        return\
    \ a > b ? a : b\n    case (.doubleValue(let a), .intValue(let b)):\n        return\
    \ a > b ? a : b\n    case (.doubleValue(let a), .stringValue(let b)):\n      \
    \  return a > b ? a : b\n    case (.stringValue(let a), .intValue(let b)):\n \
    \       return a > b ? a : b\n    case (.stringValue(let a), .doubleValue(let\
    \ b)):\n        return a > b ? a : b\n    default:\n        return nil\n    }",
  "    switch (a, b) {\n    case (.intValue(let a), .intValue(let b)):\n        return\
    \ a > b ? a : b\n    case (.doubleValue(let a), .doubleValue(let b)):\n      \
    \  return a > b ? a : b\n    case (.stringValue(let a), .stringValue(let b)):\n\
    \        return a > b ? a : b\n    default:\n        return nil\n    }", "   \
    \ let aValue = evaluate(a)\n    let bValue = evaluate(b)\n    if aValue > bValue\
    \ {\n        return a\n    } else if aValue < bValue {\n        return b\n   \
    \ } else {\n        return nil\n    }", "    var left: Double = 0\n    var right:\
    \ Double = 0\n    switch a {\n    case .intValue(let value):\n        left = Double(value)\n\
    \    case .doubleValue(let value):\n        left = value\n    case .stringValue(let\
    \ value):\n        left = Double(value.replacingOccurrences(of: \",\", with: \"\
    .\")) ?? Double(value)!\n    }\n    switch b {\n    case .intValue(let value):\n\
    \        right = Double(value)\n    case .doubleValue(let value):\n        right\
    \ = value\n    case .stringValue(let value):\n        right = Double(value.replacingOccurrences(of:\
    \ \",\", with: \".\")) ?? Double(value)!\n    }\n    return left > right ? a :\
    \ (left < right ? b : nil)", "    if case .intValue(let a) = a, case .intValue(let\
    \ b) = b {\n        return b > a ? .intValue(b) : nil\n    } else if case .doubleValue(let\
    \ a) = a, case .doubleValue(let b) = b {\n        return b > a ? .doubleValue(b)\
    \ : nil\n    } else if case .stringValue(let a) = a, case .stringValue(let b)\
    \ = b {\n        return b > a ? .stringValue(b) : nil\n    } else if case .intValue(let\
    \ a) = a, case .doubleValue(let b) = b {\n        return b > Double(a) ? .doubleValue(b)\
    \ : nil\n    } else if case .intValue(let a) = a, case .stringValue(let b) = b\
    \ {\n        let a = \"\\(a)\"\n        return b > a ? .stringValue(b) : nil\n\
    \    } else if case .doubleValue(let a) = a, case .intValue(let b) = b {\n   \
    \     return b > Int(a) ? .intValue(b) : nil\n    } else if case .doubleValue(let\
    \ a) = a, case .stringValue(let b) = b {\n        let a = \"\\(a)\"\n        return\
    \ b > a ? .stringValue(b) : nil\n    } else if case .stringValue(let a) = a, case\
    \ .intValue(let b) = b {\n        let b = \"\\(b)\"\n        return b > a ? .stringValue(b)\
    \ : nil\n    } else if case .stringValue(let a) = a, case .doubleValue(let b)\
    \ = b {\n        let b = \"\\(b)\"\n        return b > a ? .stringValue(b) : nil\n\
    \    }\n    return nil", "    switch (a, b) {\n    case (.intValue(let aInt),\
    \ .intValue(let bInt)):\n        return aInt > bInt ? a : bInt > aInt ? b : nil\n\
    \    case (.intValue(let aInt), .doubleValue(let bDouble)):\n        return aInt\
    \ > bDouble ? a : bDouble > aInt ? b : nil\n    case (.intValue(let aInt), .stringValue(let\
    \ bString)):\n        let bDouble = Double(bString) ?? -Double.infinity\n    \
    \    return aInt > bDouble ? a : bDouble > aInt ? b : nil\n    case (.doubleValue(let\
    \ aDouble), .intValue(let bInt)):\n        return aDouble > bInt ? a : bInt >\
    \ aDouble ? b : nil\n    case (.doubleValue(let aDouble), .doubleValue(let bDouble)):\n\
    \        return aDouble > bDouble ? a : bDouble > aDouble ? b : nil\n    case\
    \ (.doubleValue(let aDouble), .stringValue(let bString)):\n        let bDouble\
    \ = Double(bString) ?? -Double.infinity\n        return aDouble > bDouble ? a\
    \ : bDouble > aDouble ? b : nil\n    case (.stringValue(let aString), .intValue(let\
    \ bInt)):\n        let aDouble = Double(aString) ?? -Double.infinity\n       \
    \ return aDouble > bInt ? a : bInt > aDouble ? b : nil\n    case (.stringValue(let\
    \ aString), .doubleValue(let bDouble)):\n        let aDouble = Double(aString)\
    \ ?? -Double.infinity\n        return aDouble > bDouble ? a : bDouble > aDouble\
    \ ? b : nil\n    case (.stringValue(let aString), .stringValue(let bString)):\n\
    \        let aDouble = Double(aString) ?? -Double.infinity\n        let bDouble\
    \ = Double(bString) ?? -Double.infinity\n        return aDouble > bDouble ? a\
    \ : bDouble > aDouble ? b : nil\n    }", "    var result: Value?\n    switch a\
    \ {\n    case .intValue(let a):\n        switch b {\n        case .intValue(let\
    \ b):\n            if a > b {\n                result = a\n            } else\
    \ if a < b {\n                result = b\n            }\n        case .doubleValue(let\
    \ b):\n            if Double(a) > b {\n                result = .doubleValue(Double(a))\n\
    \            } else if Double(a) < b {\n                result = .doubleValue(b)\n\
    \            }\n        case .stringValue(let b):\n            if Double(a) >\
    \ Double(b) {\n                result = .stringValue(String(a))\n            }\
    \ else if Double(a) < Double(b) {\n                result = .stringValue(b)\n\
    \            }\n        }\n    case .doubleValue(let a):\n        switch b {\n\
    \        case .intValue(let b):\n            if a > Double(b) {\n            \
    \    result = .doubleValue(a)\n            } else if a < Double(b) {\n       \
    \         result = .doubleValue(Double(b))\n            }\n        case .doubleValue(let\
    \ b):\n            if a > b {\n                result = .doubleValue(a)\n    \
    \        } else if a < b {\n                result = .doubleValue(b)\n       \
    \     }\n        case .stringValue(let b):\n            if a > Double(b) {\n \
    \               result = .stringValue(String(a))\n            } else if a < Double(b)\
    \ {\n                result = .stringValue(b)\n            }\n        }\n    case\
    \ .stringValue(let a):\n        switch b {\n        case .intValue(let b):\n \
    \           if Double(a) > Double(b) {\n                result = .stringValue(a)\n\
    \            } else if Double(a) < Double(b) {\n                result = .stringValue(String(b))\n\
    \            }\n        case .doubleValue(let b):\n            if Double(a) >\
    \ b {\n                result = .stringValue(a)\n            } else if Double(a)\
    \ < b {\n                result = .stringValue(String(b))\n            }\n   \
    \     case .stringValue(", "    switch (a, b) {\n    case let (.intValue(x), .intValue(y))\
    \ where x > y:\n        return .intValue(x)\n    case let (.intValue(x), .intValue(y))\
    \ where x < y:\n        return .intValue(y)\n    case let (.intValue(x), .doubleValue(y))\
    \ where x > y:\n        return .intValue(x)\n    case let (.intValue(x), .doubleValue(y))\
    \ where x < y:\n        return .doubleValue(y)\n    case let (.intValue(x), .stringValue(y))\
    \ where x > Int(y)!:\n        return .intValue(x)\n    case let (.intValue(x),\
    \ .stringValue(y)) where x < Int(y)!:\n        return .stringValue(y)\n    case\
    \ let (.doubleValue(x), .intValue(y)) where x > y:\n        return .doubleValue(x)\n\
    \    case let (.doubleValue(x), .intValue(y)) where x < y:\n        return .intValue(y)\n\
    \    case let (.doubleValue(x), .doubleValue(y)) where x > y:\n        return\
    \ .doubleValue(x)\n    case let (.doubleValue(x), .doubleValue(y)) where x < y:\n\
    \        return .doubleValue(y)\n    case let (.doubleValue(x), .stringValue(y))\
    \ where x > Double(y)!:\n        return .doubleValue(x)\n    case let (.doubleValue(x),\
    \ .stringValue(y)) where x < Double(y)!:\n        return .stringValue(y)\n   \
    \ case let (.stringValue(x), .intValue(y)) where Double(x)! > Double(y):\n   \
    \     return .stringValue(x)\n    case let (.stringValue(x), .intValue(y)) where\
    \ Double(x)! < Double(y):\n        return .intValue(y)\n    case let (.stringValue(x),\
    \ .doubleValue(y)) where Double(x)! > y:\n        return .stringValue(x)\n   \
    \ case let (.stringValue(x), .doubleValue(y)) where Double(x)! < y:\n        return\
    \ .", "    var value1: Any\n    var value2: Any\n    switch a {\n    case .intValue(let\
    \ intValue):\n        value1 = intValue\n    case .doubleValue(let doubleValue):\n\
    \        value1 = doubleValue\n    case .stringValue(let stringValue):\n     \
    \   value1 = stringValue\n    }\n    switch b {\n    case .intValue(let intValue):\n\
    \        value2 = intValue\n    case .doubleValue(let doubleValue):\n        value2\
    \ = doubleValue\n    case .stringValue(let stringValue):\n        value2 = stringValue\n\
    \    }\n    if let intValue1 = value1 as? Int, let intValue2 = value2 as? Int\
    \ {\n        return intValue1 > intValue2 ? a : (intValue1 < intValue2 ? b : nil)\n\
    \    } else if let doubleValue1 = value1 as? Double, let doubleValue2 = value2\
    \ as? Double {\n        return doubleValue1 > doubleValue2 ? a : (doubleValue1\
    \ < doubleValue2 ? b : nil)\n    } else if let stringValue1 = value1 as? String,\
    \ let stringValue2 = value2 as? String {\n        if Double(stringValue1) != nil,\
    \ Double(stringValue2) != nil {\n            return Double(stringValue1)! > Double(stringValue2)!\
    \ ? a : (Double(stringValue1)! < Double(stringValue2)! ? b : nil)\n        } else\
    \ {\n            return stringValue1 > stringValue2 ? a : (stringValue1 < stringValue2\
    \ ? b : nil)\n        }\n    } else if let intValue1 = value1 as? Int, let doubleValue2\
    \ = value2 as? Double {\n        return intValue1 > doubleValue2 ? a : (intValue1\
    \ < doubleValue2 ? b : nil)\n    } else if let doubleValue1 = value1 as? Double,\
    \ let intValue2 = value2 as? Int {\n        return doubleValue1 > intValue2 ?\
    \ a : (doubleValue1 < intValue2 ? b : nil)\n    } else if let stringValue1 = value1\
    \ as? String, let intValue2 = value2 as? Int {\n        if Double(stringValue1)\
    \ != nil {\n            return Double(", "    switch (a, b) {\n    case (.intValue(let\
    \ a), .intValue(let b)):\n        return a > b ? a : b\n    case (.doubleValue(let\
    \ a), .doubleValue(let b)):\n        return a > b ? a : b\n    case (.stringValue(let\
    \ a), .stringValue(let b)):\n        return a > b ? a : b\n    default:\n    \
    \    return nil\n    }", "    switch (a, b) {\n    case (.intValue(let aa), .intValue(let\
    \ bb)):\n        return aa > bb ? a : (aa < bb ? b : nil)\n    case (.intValue(let\
    \ aa), .doubleValue(let bb)):\n        return aa > bb ? a : (aa < bb ? b : nil)\n\
    \    case (.intValue(let aa), .stringValue(let bb)):\n        return aa > (Double(bb)\
    \ ?? 0) ? a : (aa < (Double(bb) ?? 0) ? b : nil)\n    case (.doubleValue(let aa),\
    \ .intValue(let bb)):\n        return aa > bb ? a : (aa < bb ? b : nil)\n    case\
    \ (.doubleValue(let aa), .doubleValue(let bb)):\n        return aa > bb ? a :\
    \ (aa < bb ? b : nil)\n    case (.doubleValue(let aa), .stringValue(let bb)):\n\
    \        return aa > (Double(bb) ?? 0) ? a : (aa < (Double(bb) ?? 0) ? b : nil)\n\
    \    case (.stringValue(let aa), .intValue(let bb)):\n        return (Double(aa)\
    \ ?? 0) > bb ? a : ((Double(aa) ?? 0) < bb ? b : nil)\n    case (.stringValue(let\
    \ aa), .doubleValue(let bb)):\n        return (Double(aa) ?? 0) > bb ? a : ((Double(aa)\
    \ ?? 0) < bb ? b : nil)\n    case (.stringValue(let aa), .stringValue(let bb)):\n\
    \        return (Double(aa) ?? 0) > (Double(bb) ?? 0) ? a : ((Double(aa) ?? 0)\
    \ < (Double(bb) ?? 0) ? b : nil)\n    }", "    switch (a, b) {\n    case (.intValue(let\
    \ x), .intValue(let y)) where x != y:\n        return .intValue(max(x, y))\n \
    \   case (.doubleValue(let x), .doubleValue(let y)) where x != y:\n        return\
    \ .doubleValue(max(x, y))\n    case (.stringValue(let x), .stringValue(let y))\
    \ where x != y:\n        let xfloat = Double(x.replacingOccurrences(of: \",\"\
    , with: \".\"))\n        let yfloat = Double(y.replacingOccurrences(of: \",\"\
    , with: \".\"))\n        let z = max(xfloat!, yfloat!)\n        return .stringValue(String(z))\n\
    \    default:\n        return nil\n    }", "    if case let .intValue(a) = a,\
    \ case let .intValue(b) = b {\n        return a > b ? a : b\n    } else if case\
    \ let .doubleValue(a) = a, case let .doubleValue(b) = b {\n        return a >\
    \ b ? a : b\n    } else if case let .stringValue(a) = a, case let .stringValue(b)\
    \ = b {\n        return a > b ? a : b\n    } else if case let .intValue(a) = a,\
    \ case let .doubleValue(b) = b {\n        return a > b ? a : b\n    } else if\
    \ case let .doubleValue(a) = a, case let .intValue(b) = b {\n        return a\
    \ > b ? a : b\n    } else if case let .intValue(a) = a, case let .stringValue(b)\
    \ = b {\n        return a > b ? a : b\n    } else if case let .stringValue(a)\
    \ = a, case let .intValue(b) = b {\n        return a > b ? a : b\n    } else if\
    \ case let .doubleValue(a) = a, case let .stringValue(b) = b {\n        return\
    \ a > b ? a : b\n    } else if case let .stringValue(a) = a, case let .doubleValue(b)\
    \ = b {\n        return a > b ? a : b\n    } else {\n        return nil\n    }",
  "    switch (a, b) {\n    case let (.intValue(a), .intValue(b)) where a == b:\n\
    \        return nil\n    case let (.intValue(a), .intValue(b)) where a > b:\n\
    \        return a\n    case let (.intValue(a), .intValue(b)) where a < b:\n  \
    \      return b\n    case let (.intValue(a), .doubleValue(b)) where a == b:\n\
    \        return nil\n    case let (.intValue(a), .doubleValue(b)) where a > b:\n\
    \        return a\n    case let (.intValue(a), .doubleValue(b)) where a < b:\n\
    \        return b\n    case let (.intValue(a), .stringValue(b)) where a == b:\n\
    \        return nil\n    case let (.intValue(a), .stringValue(b)) where a > b:\n\
    \        return a\n    case let (.intValue(a), .stringValue(b)) where a < b:\n\
    \        return b\n    case let (.doubleValue(a), .intValue(b)) where a == b:\n\
    \        return nil\n    case let (.doubleValue(a), .intValue(b)) where a > b:\n\
    \        return a\n    case let (.doubleValue(a), .intValue(b)) where a < b:\n\
    \        return b\n    case let (.doubleValue(a), .doubleValue(b)) where a ==\
    \ b:\n        return nil\n    case let (.doubleValue(a), .doubleValue(b)) where\
    \ a > b:\n        return a\n    case let (.doubleValue(a), .doubleValue(b)) where\
    \ a < b:\n        return b\n    case let (.doubleValue(a), .stringValue(b)) where\
    \ a == b:\n        return nil\n    case let (.doubleValue(a), .stringValue(b))\
    \ where a > b:\n        return a\n    case let (.doubleValue(a), .stringValue(b))\
    \ where a < b:\n        return b\n    case let (.stringValue(a), .intValue(b))\
    \ where a == b:\n        return nil\n    case let (.stringValue(a), .intValue(b))\
    \ where a > b:\n        return a\n    case", "    switch (a, b) {\n    case (.intValue(let\
    \ a1), .intValue(let b1)) where a1 != b1:\n        return a1 > b1 ? a : b\n  \
    \  case (.doubleValue(let a1), .doubleValue(let b1)) where a1 != b1:\n       \
    \ return a1 > b1 ? a : b\n    case (.stringValue(let a1), .stringValue(let b1))\
    \ where a1 != b1:\n        return a1 > b1 ? a : b\n    case (.intValue(let a1),\
    \ .doubleValue(let b1)) where a1 != b1:\n        return a1 > b1 ? a : b\n    case\
    \ (.intValue(let a1), .stringValue(let b1)) where a1 != b1:\n        return a1\
    \ > b1 ? a : b\n    case (.doubleValue(let a1), .intValue(let b1)) where a1 !=\
    \ b1:\n        return a1 > b1 ? a : b\n    case (.doubleValue(let a1), .stringValue(let\
    \ b1)) where a1 != b1:\n        return a1 > b1 ? a : b\n    case (.stringValue(let\
    \ a1), .intValue(let b1)) where a1 != b1:\n        return a1 > b1 ? a : b\n  \
    \  case (.stringValue(let a1), .doubleValue(let b1)) where a1 != b1:\n       \
    \ return a1 > b1 ? a : b\n    default:\n        return nil\n    }", "    \n  \
    \  switch (a, b) {\n    case (.intValue(let a), .intValue(let b)):\n        return\
    \ a < b ? b : a\n    case (.intValue(let a), .doubleValue(let b)):\n        return\
    \ b\n    case (.intValue(let a), .stringValue(let b)):\n        return b\n   \
    \ case (.doubleValue(let a), .intValue(let b)):\n        return a\n    case (.doubleValue(let\
    \ a), .doubleValue(let b)):\n        return a < b ? b : a\n    case (.doubleValue(let\
    \ a), .stringValue(let b)):\n        return b\n    case (.stringValue(let a),\
    \ .intValue(let b)):\n        return a\n    case (.stringValue(let a), .doubleValue(let\
    \ b)):\n        return a\n    case (.stringValue(let a), .stringValue(let b)):\n\
    \        return a < b ? b : a\n    }\n    \n    \n    \n    ", "    switch (a,\
    \ b) {\n    case (.intValue(let a), .intValue(let b)):\n        return a > b ?\
    \ a : b\n    case (.doubleValue(let a), .doubleValue(let b)):\n        return\
    \ a > b ? a : b\n    case (.stringValue(let a), .stringValue(let b)):\n      \
    \  return a > b ? a : b\n    default:\n        return nil\n    }", "    switch\
    \ (a, b) {\n    case (.intValue(let a), .intValue(let b)):\n        return a >\
    \ b ? a : b\n    case (.doubleValue(let a), .doubleValue(let b)):\n        return\
    \ a > b ? a : b\n    case (.stringValue(let a), .stringValue(let b)):\n      \
    \  return a > b ? a : b\n    case (.intValue(let a), .doubleValue(let b)):\n \
    \       return a > b ? a : b\n    case (.intValue(let a), .stringValue(let b)):\n\
    \        return a > b ? a : b\n    case (.doubleValue(let a), .intValue(let b)):\n\
    \        return a > b ? a : b\n    case (.doubleValue(let a), .stringValue(let\
    \ b)):\n        return a > b ? a : b\n    case (.stringValue(let a), .intValue(let\
    \ b)):\n        return a > b ? a : b\n    case (.stringValue(let a), .doubleValue(let\
    \ b)):\n        return a > b ? a : b\n    default:\n        return nil\n    }",
  "    let a = parse(a)\n    let b = parse(b)\n    switch (a, b) {\n    case let (.intValue(a),\
    \ .intValue(b)):\n        return a > b ? a : b\n    case let (.doubleValue(a),\
    \ .doubleValue(b)):\n        return a > b ? a : b\n    case let (.stringValue(a),\
    \ .stringValue(b)):\n        return a > b ? a : b\n    case let (.intValue(a),\
    \ .doubleValue(b)):\n        return a > b ? a : b\n    case let (.doubleValue(a),\
    \ .intValue(b)):\n        return a > b ? a : b\n    case let (.intValue(a), .stringValue(b)):\n\
    \        return a > b ? a : b\n    case let (.stringValue(a), .intValue(b)):\n\
    \        return a > b ? a : b\n    case let (.doubleValue(a), .stringValue(b)):\n\
    \        return a > b ? a : b\n    case let (.stringValue(a), .doubleValue(b)):\n\
    \        return a > b ? a : b\n    }", "    guard case let .intValue(aInt) = a,\
    \ case let .intValue(bInt) = b else {\n        return nil\n    }\n    return aInt\
    \ > bInt ? a : b", "    switch (a, b) {\n    case let (.intValue(a), .intValue(b))\
    \ where a > b:\n        return .intValue(a)\n    case let (.intValue(a), .intValue(b))\
    \ where a < b:\n        return .intValue(b)\n    case let (.intValue(a), .doubleValue(b))\
    \ where a > b:\n        return .intValue(a)\n    case let (.intValue(a), .doubleValue(b))\
    \ where a < b:\n        return .doubleValue(b)\n    case let (.intValue(a), .stringValue(b))\
    \ where a > Double(b.components(separatedBy: \",\").joined()) ?? 0:\n        return\
    \ .intValue(a)\n    case let (.intValue(a), .stringValue(b)) where a < Double(b.components(separatedBy:\
    \ \",\").joined()) ?? 0:\n        return .stringValue(b)\n    case let (.doubleValue(a),\
    \ .intValue(b)) where a > b:\n        return .doubleValue(a)\n    case let (.doubleValue(a),\
    \ .intValue(b)) where a < b:\n        return .intValue(b)\n    case let (.doubleValue(a),\
    \ .doubleValue(b)) where a > b:\n        return .doubleValue(a)\n    case let\
    \ (.doubleValue(a), .doubleValue(b)) where a < b:\n        return .doubleValue(b)\n\
    \    case let (.doubleValue(a), .stringValue(b)) where a > Double(b.components(separatedBy:\
    \ \",\").joined()) ?? 0:\n        return .doubleValue(a)\n    case let (.doubleValue(a),\
    \ .stringValue(b)) where a < Double(b.components(separatedBy: \",\").joined())\
    \ ?? 0:\n        return .stringValue(b)\n    case let (.stringValue(a), .intValue(b))\
    \ where Double(a.components(separatedBy: \",\").joined()) ?? 0 > b:\n        return\
    \ .stringValue(a)\n    case let (.stringValue(a), .intValue(b)) where Double(a.components(separatedBy:",
  "    switch (a, b) {\n    case (.intValue(let lhs), .intValue(let rhs)):\n     \
    \   if lhs > rhs {\n            return .intValue(lhs)\n        } else if lhs <\
    \ rhs {\n            return .intValue(rhs)\n        } else {\n            return\
    \ nil\n        }\n    case (.intValue(let lhs), .doubleValue(let rhs)):\n    \
    \    if Double(lhs) > rhs {\n            return .doubleValue(Double(lhs))\n  \
    \      } else if Double(lhs) < rhs {\n            return .doubleValue(rhs)\n \
    \       } else {\n            return nil\n        }\n    case (.intValue(let lhs),\
    \ .stringValue(let rhs)):\n        if Double(lhs) > Double(rhs) {\n          \
    \  return .doubleValue(Double(lhs))\n        } else if Double(lhs) < Double(rhs)\
    \ {\n            return .doubleValue(Double(rhs))\n        } else {\n        \
    \    return nil\n        }\n    case (.doubleValue(let lhs), .intValue(let rhs)):\n\
    \        if lhs > Double(rhs) {\n            return .doubleValue(lhs)\n      \
    \  } else if lhs < Double(rhs) {\n            return .doubleValue(Double(rhs))\n\
    \        } else {\n            return nil\n        }\n    case (.doubleValue(let\
    \ lhs), .doubleValue(let rhs)):\n        if lhs > rhs {\n            return .doubleValue(lhs)\n\
    \        } else if lhs < rhs {\n            return .doubleValue(rhs)\n       \
    \ } else {\n            return nil\n        }\n    case (.doubleValue(let lhs),\
    \ .stringValue(let rhs)):\n        if lhs > Double(rhs) {\n            return\
    \ .doubleValue(lhs)\n        } else if lhs < Double(rhs) {\n            return\
    \ .doubleValue(Double(rhs))\n        } else {\n            return nil\n      \
    \  }\n    case (.stringValue(let lhs), .intValue(let rhs)):\n        if Double(lhs)\
    \ > Double(", "    switch (a, b) {\n    case (.intValue(let a), .intValue(let\
    \ b)):\n        return a > b ? a : b\n    case (.doubleValue(let a), .doubleValue(let\
    \ b)):\n        return a > b ? a : b\n    case (.stringValue(let a), .stringValue(let\
    \ b)):\n        return a > b ? a : b\n    default:\n        return nil\n    }",
  "    if case .intValue(let aValue) = a, case .intValue(let bValue) = b {\n     \
    \   return aValue > bValue ? a : bValue > aValue ? b : nil\n    } else if case\
    \ .doubleValue(let aValue) = a, case .doubleValue(let bValue) = b {\n        return\
    \ aValue > bValue ? a : bValue > aValue ? b : nil\n    } else if case .stringValue(let\
    \ aValue) = a, case .stringValue(let bValue) = b {\n        return Double(aValue)\
    \ > Double(bValue) ? a : Double(bValue) > Double(aValue) ? b : nil\n    } else\
    \ if case .intValue(let aValue) = a, case .stringValue(let bValue) = b {\n   \
    \     return aValue > Double(bValue) ? a : Double(bValue) > aValue ? b : nil\n\
    \    } else if case .stringValue(let aValue) = a, case .intValue(let bValue) =\
    \ b {\n        return Double(aValue) > bValue ? a : bValue > Double(aValue) ?\
    \ b : nil\n    } else if case .doubleValue(let aValue) = a, case .stringValue(let\
    \ bValue) = b {\n        return aValue > Double(bValue) ? a : Double(bValue) >\
    \ aValue ? b : nil\n    } else if case .stringValue(let aValue) = a, case .doubleValue(let\
    \ bValue) = b {\n        return Double(aValue) > bValue ? a : bValue > Double(aValue)\
    \ ? b : nil\n    } else {\n        return nil\n    }", '    return nil', "   \
    \ switch a {\n    case .intValue(let a) where b == .intValue(a):\n        return\
    \ nil\n    case .intValue(let a) where b == .doubleValue(Double(a)):\n       \
    \ return b\n    case .intValue(let a) where b == .stringValue(String(a)):\n  \
    \      return b\n    case .doubleValue(let a) where b == .intValue(Int(a)):\n\
    \        return a\n    case .doubleValue(let a) where b == .doubleValue(a):\n\
    \        return nil\n    case .doubleValue(let a) where b == .stringValue(String(a)):\n\
    \        return b\n    case .stringValue(let a) where b == .intValue(Int(a)):\n\
    \        return a\n    case .stringValue(let a) where b == .doubleValue(Double(a)):\n\
    \        return a\n    case .stringValue(let a) where b == .stringValue(a):\n\
    \        return nil\n    default:\n        return nil\n    }", "    switch (a,\
    \ b) {\n    case let (.intValue(a), .intValue(b)) where a != b:\n        return\
    \ a > b ? a : b\n    case let (.doubleValue(a), .doubleValue(b)) where a != b:\n\
    \        return a > b ? a : b\n    case let (.stringValue(a), .stringValue(b))\
    \ where a != b:\n        return a > b ? a : b\n    default:\n        return nil\n\
    \    }", "    guard let a = toDouble(a), let b = toDouble(b) else { return nil\
    \ }\n    return a > b ? toValue(a) : toValue(b)", "    switch (a, b) {\n    case\
    \ (.intValue(let l), .intValue(let r)):\n        return l > r ? a : nil\n    case\
    \ (.intValue(let l), .doubleValue(let r)):\n        return l > r ? .doubleValue(Double(l))\
    \ : b\n    case (.intValue(let l), .stringValue(let r)):\n        return l > Double(r)\
    \ ? .stringValue(String(l)) : b\n    case (.doubleValue(let l), .intValue(let\
    \ r)):\n        return l > r ? a : nil\n    case (.doubleValue(let l), .doubleValue(let\
    \ r)):\n        return l > r ? a : nil\n    case (.doubleValue(let l), .stringValue(let\
    \ r)):\n        return l > Double(r) ? .stringValue(String(l)) : b\n    case (.stringValue(let\
    \ l), .intValue(let r)):\n        return Double(l) > r ? a : nil\n    case (.stringValue(let\
    \ l), .doubleValue(let r)):\n        return Double(l) > r ? a : nil\n    case\
    \ (.stringValue(let l), .stringValue(let r)):\n        return Double(l) > Double(r)\
    \ ? a : nil\n    }", "    switch (a, b) {\n    case let (.intValue(l), .intValue(r)):\n\
    \        return l > r ? a : b\n    case let (.intValue(l), .doubleValue(r)):\n\
    \        return l > r ? a : b\n    case let (.intValue(l), .stringValue(r)):\n\
    \        return l > (r as NSString).doubleValue ? a : b\n    case let (.doubleValue(l),\
    \ .intValue(r)):\n        return l > r ? a : b\n    case let (.doubleValue(l),\
    \ .doubleValue(r)):\n        return l > r ? a : b\n    case let (.doubleValue(l),\
    \ .stringValue(r)):\n        return l > (r as NSString).doubleValue ? a : b\n\
    \    case let (.stringValue(l), .intValue(r)):\n        return (l as NSString).doubleValue\
    \ > r ? a : b\n    case let (.stringValue(l), .doubleValue(r)):\n        return\
    \ (l as NSString).doubleValue > r ? a : b\n    case let (.stringValue(l), .stringValue(r)):\n\
    \        return (l as NSString).doubleValue > (r as NSString).doubleValue ? a\
    \ : b\n    }", "    switch (a, b) {\n    case (.intValue(let a_int), .intValue(let\
    \ b_int)):\n        return a_int > b_int ? a : b\n    case (.intValue(let a_int),\
    \ .doubleValue(let b_double)):\n        return Double(a_int) > b_double ? a :\
    \ b\n    case (.intValue(let a_int), .stringValue(let b_string)):\n        return\
    \ Double(a_int) > b_string.replacingOccurrences(of: \",\", with: \".\")\n    \
    \        .components(separatedBy: \".\")[0].components(separatedBy: \":\")[0].doubleValue\
    \ ? a : b\n    case (.doubleValue(let a_double), .intValue(let b_int)):\n    \
    \    return a_double > Double(b_int) ? a : b\n    case (.doubleValue(let a_double),\
    \ .doubleValue(let b_double)):\n        return a_double > b_double ? a : b\n \
    \   case (.doubleValue(let a_double), .stringValue(let b_string)):\n        return\
    \ a_double > b_string.replacingOccurrences(of: \",\", with: \".\")\n         \
    \   .components(separatedBy: \".\")[0].components(separatedBy: \":\")[0].doubleValue\
    \ ? a : b\n    case (.stringValue(let a_string), .intValue(let b_int)):\n    \
    \    return a_string.replacingOccurrences(of: \",\", with: \".\")\n          \
    \  .components(separatedBy: \".\")[0].components(separatedBy: \":\")[0].doubleValue\
    \ > Double(b_int) ? a : b\n    case (.stringValue(let a_string), .doubleValue(let\
    \ b_double)):\n        return a_string.replacingOccurrences(of: \",\", with: \"\
    .\")\n            .components(separatedBy: \".\")[0].components(separatedBy: \"\
    :\")[0].doubleValue > b_double ? a : b\n    case (.stringValue(let a_string),\
    \ .stringValue(let b_", "    var x: Double = 0\n    var y: Double = 0\n    switch\
    \ a {\n    case .intValue(let i):\n        x = Double(i)\n    case .doubleValue(let\
    \ d):\n        x = d\n    case .stringValue(let s):\n        let replaceString\
    \ = s.replacingOccurrences(of: \",\", with: \".\")\n        x = Double(replaceString)!\n\
    \    }\n    switch b {\n    case .intValue(let i):\n        y = Double(i)\n  \
    \  case .doubleValue(let d):\n        y = d\n    case .stringValue(let s):\n \
    \       let replaceString = s.replacingOccurrences(of: \",\", with: \".\")\n \
    \       y = Double(replaceString)!\n    }\n    if x > y {\n        return a\n\
    \    } else if x < y {\n        return b\n    } else {\n        return nil\n \
    \   }", "    switch (a, b) {\n    case let (.intValue(a), .intValue(b)) where\
    \ a > b:\n        return .intValue(a)\n    case let (.intValue(a), .intValue(b))\
    \ where a < b:\n        return .intValue(b)\n    case let (.intValue(a), .doubleValue(b))\
    \ where a > b:\n        return .intValue(a)\n    case let (.intValue(a), .doubleValue(b))\
    \ where a < b:\n        return .doubleValue(b)\n    case let (.intValue(a), .stringValue(b))\
    \ where a > Double(b)!:\n        return .intValue(a)\n    case let (.intValue(a),\
    \ .stringValue(b)) where a < Double(b)!:\n        return .stringValue(b)\n   \
    \ case let (.doubleValue(a), .intValue(b)) where a > b:\n        return .doubleValue(a)\n\
    \    case let (.doubleValue(a), .intValue(b)) where a < b:\n        return .intValue(b)\n\
    \    case let (.doubleValue(a), .doubleValue(b)) where a > b:\n        return\
    \ .doubleValue(a)\n    case let (.doubleValue(a), .doubleValue(b)) where a < b:\n\
    \        return .doubleValue(b)\n    case let (.doubleValue(a), .stringValue(b))\
    \ where a > Double(b)!:\n        return .doubleValue(a)\n    case let (.doubleValue(a),\
    \ .stringValue(b)) where a < Double(b)!:\n        return .stringValue(b)\n   \
    \ case let (.stringValue(a), .intValue(b)) where Double(a)! > b:\n        return\
    \ .stringValue(a)\n    case let (.stringValue(a), .intValue(b)) where Double(a)!\
    \ < b:\n        return .intValue(b)\n    case let (.stringValue(a), .doubleValue(b))\
    \ where Double(a)! > b:\n        return .stringValue(a)\n    case let (.stringValue(a),\
    \ .doubleValue(b)) where Double(a)! < b:\n        return .doubleValue(b", "  \
    \  // Get a and b as doubles\n    let (num1, num2) = (a.asDouble(), b.asDouble())\n\
    \    \n    // If values are equal\n    if num1 == num2 {\n        return nil\n\
    \    }\n    \n    // Return the larger\n    if num1 > num2 {\n        return a\n\
    \    } else {\n        return b\n    }", "    let left = a\n    let right = b\n\
    \    switch(left, right) {\n    case (.intValue(let lh), .intValue(let rh)):\n\
    \        return lh > rh ? left : nil\n    case (.intValue(let lh), .doubleValue(let\
    \ rh)):\n        return lh > rh ? .doubleValue(Double(lh)) : nil\n    case (.intValue(let\
    \ lh), .stringValue(let rh)):\n        return Double(lh) > Double(rh) ? .stringValue(String(lh))\
    \ : nil\n    case (.doubleValue(let lh), .intValue(let rh)):\n        return lh\
    \ > Double(rh) ? left : nil\n    case (.doubleValue(let lh), .doubleValue(let\
    \ rh)):\n        return lh > rh ? left : nil\n    case (.doubleValue(let lh),\
    \ .stringValue(let rh)):\n        return lh > Double(rh) ? .stringValue(String(lh))\
    \ : nil\n    case (.stringValue(let lh), .intValue(let rh)):\n        return Double(lh)\
    \ > Double(rh) ? left : nil\n    case (.stringValue(let lh), .doubleValue(let\
    \ rh)):\n        return Double(lh) > rh ? .doubleValue(Double(lh)) : nil\n   \
    \ case (.stringValue(let lh), .stringValue(let rh)):\n        return Double(lh)\
    \ > Double(rh) ? left : nil\n    }", "    // TODO: Write some code to solve this\
    \ coding challenge\n    return nil", "    switch (a, b) {\n    case (.intValue(let\
    \ l), .intValue(let r)):\n        return l > r ? a : nil\n    case (.intValue(let\
    \ l), .doubleValue(let r)):\n        return l > r ? a : nil\n    case (.intValue(let\
    \ l), .stringValue(let r)):\n        return l > Int(r) ?? 0 ? a : nil\n    case\
    \ (.doubleValue(let l), .intValue(let r)):\n        return l > r ? a : nil\n \
    \   case (.doubleValue(let l), .doubleValue(let r)):\n        return l > r ? a\
    \ : nil\n    case (.doubleValue(let l), .stringValue(let r)):\n        return\
    \ l > Double(r) ?? 0 ? a : nil\n    case (.stringValue(let l), .intValue(let r)):\n\
    \        return Int(l) ?? 0 > r ? a : nil\n    case (.stringValue(let l), .doubleValue(let\
    \ r)):\n        return Double(l) ?? 0 > r ? a : nil\n    case (.stringValue(let\
    \ l), .stringValue(let r)):\n        return Int(l) ?? 0 > Int(r) ?? 0 ? a : nil\n\
    \    }", '    return nil', "    switch (a, b) {\n    case (.intValue(let aInt),\
    \ .intValue(let bInt)):\n        return aInt > bInt ? a : bInt > aInt ? b : nil\n\
    \    case (.intValue(let aInt), .doubleValue(let bDouble)):\n        return .doubleValue(Double(aInt)\
    \ > bDouble ? Double(aInt) : bDouble)\n    case (.intValue(let aInt), .stringValue(let\
    \ bString)):\n        return .stringValue(Double(aInt) > Double(bString) ? String(aInt)\
    \ : bString)\n    case (.doubleValue(let aDouble), .intValue(let bInt)):\n   \
    \     return .doubleValue(aDouble > Double(bInt) ? aDouble : Double(bInt))\n \
    \   case (.doubleValue(let aDouble), .doubleValue(let bDouble)):\n        return\
    \ aDouble > bDouble ? a : bDouble > aDouble ? b : nil\n    case (.doubleValue(let\
    \ aDouble), .stringValue(let bString)):\n        return .stringValue(aDouble >\
    \ Double(bString) ? String(aDouble) : bString)\n    case (.stringValue(let aString),\
    \ .intValue(let bInt)):\n        return .stringValue(Double(aString) > Double(bInt)\
    \ ? aString : String(bInt))\n    case (.stringValue(let aString), .doubleValue(let\
    \ bDouble)):\n        return .stringValue(Double(aString) > bDouble ? aString\
    \ : String(bDouble))\n    case (.stringValue(let aString), .stringValue(let bString)):\n\
    \        return Double(aString) > Double(bString) ? a : Double(bString) > Double(aString)\
    \ ? b : nil\n    }", "    var result: Value?\n    switch a {\n    case .intValue(let\
    \ aInt):\n        switch b {\n        case .intValue(let bInt):\n            result\
    \ = nil\n        case .doubleValue(let bDouble):\n            result = .doubleValue(bDouble)\n\
    \        case .stringValue(let bString):\n            result = .stringValue(bString)\n\
    \        }\n    case .doubleValue(let aDouble):\n        switch b {\n        case\
    \ .intValue(let bInt):\n            result = .doubleValue(aDouble)\n        case\
    \ .doubleValue(let bDouble):\n            result = .doubleValue(max(aDouble, bDouble))\n\
    \        case .stringValue(let bString):\n            result = .stringValue(bString)\n\
    \        }\n    case .stringValue(let aString):\n        switch b {\n        case\
    \ .intValue(let bInt):\n            result = .stringValue(aString)\n        case\
    \ .doubleValue(let bDouble):\n            result = .stringValue(aString)\n   \
    \     case .stringValue(let bString):\n            result = .stringValue(max(aString,\
    \ bString))\n        }\n    }\n    return result", "    let first: Double\n  \
    \  let second: Double\n    if case .doubleValue(let d1) = a {\n        first =\
    \ d1\n    } else if case .intValue(let i1) = a {\n        first = Double(i1)\n\
    \    } else if case .stringValue(let s1) = a {\n        if let stringToInt = Int(s1.replacingOccurrences(of:\
    \ \",\", with: \".\")) {\n            first = Double(stringToInt)\n        } else\
    \ {\n            first = Double(s1) ?? 0\n        }\n    } else {\n        return\
    \ nil\n    }\n    if case .doubleValue(let d2) = b {\n        second = d2\n  \
    \  } else if case .intValue(let i2) = b {\n        second = Double(i2)\n    }\
    \ else if case .stringValue(let s2) = b {\n        if let stringToInt = Int(s2.replacingOccurrences(of:\
    \ \",\", with: \".\")) {\n            second = Double(stringToInt)\n        }\
    \ else {\n            second = Double(s2) ?? 0\n        }\n    } else {\n    \
    \    return nil\n    }\n    if first == second {\n        return nil\n    } else\
    \ if first > second {\n        return a\n    } else {\n        return b\n    }",
  '    return nil', "  switch (a, b) {\n  case (.intValue(let a), .intValue(let b)):\n\
    \    return a < b ? b : nil\n  case (.intValue(let a), .doubleValue(let b)):\n\
    \    return a < b ? b : nil\n  case (.intValue(let a), .stringValue(let b)):\n\
    \    return Double(a) < Double(b) ? b : nil\n  case (.doubleValue(let a), .intValue(let\
    \ b)):\n    return a < b ? a : nil\n  case (.doubleValue(let a), .doubleValue(let\
    \ b)):\n    return a < b ? b : nil\n  case (.doubleValue(let a), .stringValue(let\
    \ b)):\n    return a < Double(b) ? b : nil\n  case (.stringValue(let a), .intValue(let\
    \ b)):\n    return Double(a) < b ? a : nil\n  case (.stringValue(let a), .doubleValue(let\
    \ b)):\n    return Double(a) < b ? a : nil\n  case (.stringValue(let a), .stringValue(let\
    \ b)):\n    return Double(a) < Double(b) ? b : nil\n  }", "    switch (a, b) {\n\
    \    case (.intValue(let aValue), .intValue(let bValue)):\n        return aValue\
    \ > bValue ? a : (aValue < bValue ? b : nil)\n    case (.intValue(let aValue),\
    \ .doubleValue(let bValue)):\n        return aValue > bValue ? a : (aValue < bValue\
    \ ? b : nil)\n    case (.intValue(let aValue), .stringValue(let bValue)):\n  \
    \      return aValue > Int(bValue) ?? 0 ? a : (aValue < Int(bValue) ?? 0 ? b :\
    \ nil)\n    case (.doubleValue(let aValue), .intValue(let bValue)):\n        return\
    \ aValue > bValue ? a : (aValue < bValue ? b : nil)\n    case (.doubleValue(let\
    \ aValue), .doubleValue(let bValue)):\n        return aValue > bValue ? a : (aValue\
    \ < bValue ? b : nil)\n    case (.doubleValue(let aValue), .stringValue(let bValue)):\n\
    \        return aValue > Double(bValue) ?? 0 ? a : (aValue < Double(bValue) ??\
    \ 0 ? b : nil)\n    case (.stringValue(let aValue), .intValue(let bValue)):\n\
    \        return Int(aValue) ?? 0 > bValue ? a : (Int(aValue) ?? 0 < bValue ? b\
    \ : nil)\n    case (.stringValue(let aValue), .doubleValue(let bValue)):\n   \
    \     return Double(aValue) ?? 0 > bValue ? a : (Double(aValue) ?? 0 < bValue\
    \ ? b : nil)\n    case (.stringValue(let aValue), .stringValue(let bValue)):\n\
    \        return Int(aValue) ?? 0 > Int(bValue) ?? 0 ? a : (Int(aValue) ?? 0 <\
    \ Int(bValue) ?? 0 ? b : nil)\n    }", "    switch (a, b) {\n    case (.intValue(let\
    \ a), .intValue(let b)):\n        return a > b ? a : b\n    case (.doubleValue(let\
    \ a), .doubleValue(let b)):\n        return a > b ? a : b\n    case (.stringValue(let\
    \ a), .stringValue(let b)):\n        return a > b ? a : b\n    default:\n    \
    \    return nil\n    }", "    var result: Value?\n    if case let .intValue(a)\
    \ = a, case let .intValue(b) = b {\n        if a > b {\n            result = .intValue(a)\n\
    \        } else if a < b {\n            result = .intValue(b)\n        }\n   \
    \ } else if case let .doubleValue(a) = a, case let .doubleValue(b) = b {\n   \
    \     if a > b {\n            result = .doubleValue(a)\n        } else if a <\
    \ b {\n            result = .doubleValue(b)\n        }\n    } else if case let\
    \ .stringValue(a) = a, case let .stringValue(b) = b {\n        if a > b {\n  \
    \          result = .stringValue(a)\n        } else if a < b {\n            result\
    \ = .stringValue(b)\n        }\n    } else if case let .intValue(a) = a, case\
    \ let .doubleValue(b) = b {\n        if a > b {\n            result = .intValue(a)\n\
    \        } else if a < b {\n            result = .doubleValue(b)\n        }\n\
    \    } else if case let .intValue(a) = a, case let .stringValue(b) = b {\n   \
    \     if a > Double(b) ?? 0 {\n            result = .intValue(a)\n        } else\
    \ if a < Double(b) ?? 0 {\n            result = .stringValue(b)\n        }\n \
    \   } else if case let .doubleValue(a) = a, case let .intValue(b) = b {\n    \
    \    if a > b {\n            result = .doubleValue(a)\n        } else if a < b\
    \ {\n            result = .intValue(b)\n        }\n    } else if case let .doubleValue(a)\
    \ = a, case let .stringValue(b) = b {\n        if a > Double(b) ?? 0 {\n     \
    \       result = .doubleValue(a)\n        } else if a < Double(b) ?? 0 {\n   \
    \         result = .stringValue(b)\n        }\n    } else if case let .stringValue(a)\
    \ = a, case let .intValue(b) =", "    let intToDouble = {(i: Int) -> Double in\n\
    \        return Double(i)\n    }\n    let stringToDouble = {(s: String) -> Double\
    \ in\n        let array = s.components(separatedBy: CharacterSet(charactersIn:\
    \ \",.\"))\n        let first = Double(array[0])!\n        if array.count == 1\
    \ {\n            return first\n        } else {\n            let second = Double(array[1])!\n\
    \            return first + second / pow(10, Double(array[1].count))\n       \
    \ }\n    }\n    switch (a, b) {\n    case (.intValue(let x), .intValue(let y)):\n\
    \        return x > y ? a : b\n    case (.intValue(let x), .doubleValue(let y)):\n\
    \        return y > intToDouble(x) ? b : a\n    case (.intValue(let x), .stringValue(let\
    \ y)):\n        return stringToDouble(y) > intToDouble(x) ? b : a\n    case (.doubleValue(let\
    \ x), .intValue(let y)):\n        return x > intToDouble(y) ? a : b\n    case\
    \ (.doubleValue(let x), .doubleValue(let y)):\n        return x > y ? a : b\n\
    \    case (.doubleValue(let x), .stringValue(let y)):\n        return stringToDouble(y)\
    \ > x ? b : a\n    case (.stringValue(let x), .intValue(let y)):\n        return\
    \ stringToDouble(x) > intToDouble(y) ? a : b\n    case (.stringValue(let x), .doubleValue(let\
    \ y)):\n        return stringToDouble(x) > y ? a : b\n    case (.stringValue(let\
    \ x), .stringValue(let y)):\n        return stringToDouble(x) > stringToDouble(y)\
    \ ? a : b\n    }", "    switch (a, b) {\n    case (.intValue(let a), .intValue(let\
    \ b)):\n        return (a >= b) ? a : b\n    case (.doubleValue(let a), .doubleValue(let\
    \ b)):\n        return (a >= b) ? a : b\n    case (.stringValue(let a), .stringValue(let\
    \ b)):\n        return (a >= b) ? a : b\n    case (.intValue(let a), .doubleValue(let\
    \ b)):\n        return (a >= b) ? a : b\n    case (.intValue(let a), .stringValue(let\
    \ b)):\n        return (a >= b) ? a : b\n    case (.doubleValue(let a), .intValue(let\
    \ b)):\n        return (a >= b) ? a : b\n    case (.doubleValue(let a), .stringValue(let\
    \ b)):\n        return (a >= b) ? a : b\n    case (.stringValue(let a), .intValue(let\
    \ b)):\n        return (a >= b) ? a : b\n    case (.stringValue(let a), .doubleValue(let\
    \ b)):\n        return (a >= b) ? a : b\n    default:\n        return nil\n  \
    \  }", "    switch a {\n    case .intValue(let a):\n        switch b {\n     \
    \   case .intValue(let b):\n            return a > b ? a : b\n        case .doubleValue(let\
    \ b):\n            return a > b ? a : b\n        case .stringValue(let b):\n \
    \           return a > Int(b) ?? 0 ? a : b\n        }\n    case .doubleValue(let\
    \ a):\n        switch b {\n        case .intValue(let b):\n            return\
    \ a > b ? a : b\n        case .doubleValue(let b):\n            return a > b ?\
    \ a : b\n        case .stringValue(let b):\n            return a > Double(b) ??\
    \ 0 ? a : b\n        }\n    case .stringValue(let a):\n        switch b {\n  \
    \      case .intValue(let b):\n            return Int(a) ?? 0 > b ? a : b\n  \
    \      case .doubleValue(let b):\n            return Double(a) ?? 0 > b ? a :\
    \ b\n        case .stringValue(let b):\n            return a > b ? a : b\n   \
    \     }\n    }", "    switch (a, b) {\n    case (.intValue(let a), .intValue(let\
    \ b)):\n        return a > b ? a : b\n    case (.doubleValue(let a), .doubleValue(let\
    \ b)):\n        return a > b ? a : b\n    case (.stringValue(let a), .stringValue(let\
    \ b)):\n        return a > b ? a : b\n    default:\n        return nil\n    }",
  "    switch a {\n    case .intValue(let aInt):\n        switch b {\n        case\
    \ .intValue(let bInt):\n            return aInt >= bInt ? a : b\n        case\
    \ .doubleValue(let bDouble):\n            return aInt >= bDouble ? a : b\n   \
    \     case .stringValue(let bString):\n            return aInt >= Double(bString)\
    \ ?? 0 ? a : b\n        }\n    case .doubleValue(let aDouble):\n        switch\
    \ b {\n        case .intValue(let bInt):\n            return aDouble >= bInt ?\
    \ a : b\n        case .doubleValue(let bDouble):\n            return aDouble >=\
    \ bDouble ? a : b\n        case .stringValue(let bString):\n            return\
    \ aDouble >= Double(bString) ?? 0 ? a : b\n        }\n    case .stringValue(let\
    \ aString):\n        switch b {\n        case .intValue(let bInt):\n         \
    \   return Double(aString) ?? 0 >= bInt ? a : b\n        case .doubleValue(let\
    \ bDouble):\n            return Double(aString) ?? 0 >= bDouble ? a : b\n    \
    \    case .stringValue(let bString):\n            return Double(aString) ?? 0\
    \ >= Double(bString) ?? 0 ? a : b\n        }\n    }", "    switch (a, b) {\n \
    \   case (.intValue(let x), .intValue(let y)):\n        return (x == y) ? nil\
    \ : x > y ? a : b\n    case (.doubleValue(let x), .doubleValue(let y)):\n    \
    \    return (x == y) ? nil : x > y ? a : b\n    case (.stringValue(let x), .stringValue(let\
    \ y)):\n        return (x == y) ? nil : Double(x)! > Double(y)! ? a : b\n    case\
    \ (.intValue(let x), .doubleValue(let y)):\n        return (x == y) ? nil : x\
    \ > y ? a : b\n    case (.intValue(let x), .stringValue(let y)):\n        return\
    \ (x == Double(y)!) ? nil : x > Double(y)! ? a : b\n    case (.doubleValue(let\
    \ x), .intValue(let y)):\n        return (x == y) ? nil : x > y ? a : b\n    case\
    \ (.doubleValue(let x), .stringValue(let y)):\n        return (x == Double(y)!)\
    \ ? nil : x > Double(y)! ? a : b\n    case (.stringValue(let x), .intValue(let\
    \ y)):\n        return (Double(x)! == y) ? nil : Double(x)! > y ? a : b\n    case\
    \ (.stringValue(let x), .doubleValue(let y)):\n        return (Double(x)! == y)\
    \ ? nil : Double(x)! > y ? a : b\n    }", "    let intA = a.getInt()\n    let\
    \ intB = b.getInt()\n    let doubleA = a.getDouble()\n    let doubleB = b.getDouble()\n\
    \    if (intA == nil && intB == nil) {\n        if (doubleA == nil && doubleB\
    \ == nil) {\n            return nil\n        } else if (doubleA == nil) {\n  \
    \          return .doubleValue(doubleB!)\n        } else if (doubleB == nil) {\n\
    \            return .doubleValue(doubleA!)\n        } else {\n            return\
    \ doubleA! >= doubleB! ? .doubleValue(doubleA!) : .doubleValue(doubleB!)\n   \
    \     }\n    } else if (intA == nil) {\n        return .intValue(intB!)\n    }\
    \ else if (intB == nil) {\n        return .intValue(intA!)\n    } else {\n   \
    \     return intA! >= intB! ? .intValue(intA!) : .intValue(intB!)\n    }", " \
    \   switch (a, b) {\n    case (.intValue(let a), .intValue(let b)):\n        return\
    \ a > b ? a : b\n    case (.doubleValue(let a), .doubleValue(let b)):\n      \
    \  return a > b ? a : b\n    case (.stringValue(let a), .stringValue(let b)):\n\
    \        let va = Double(a) ?? 0\n        let vb = Double(b) ?? 0\n        return\
    \ va > vb ? va : vb\n    default:\n        return nil\n    }", "    switch (a,\
    \ b) {\n    case (.intValue(let intA), .intValue(let intB)):\n        return intA\
    \ > intB ? a : b\n    case (.intValue(let intA), .doubleValue(let doubleB)):\n\
    \        return Double(intA) > doubleB ? a : b\n    case (.intValue(let intA),\
    \ .stringValue(let stringB)):\n        return Double(intA) > Double(stringB.replacingOccurrences(of:\
    \ \",\", with: \".\")) ?? 0 ? a : b\n    case (.doubleValue(let doubleA), .intValue(let\
    \ intB)):\n        return doubleA > Double(intB) ? a : b\n    case (.doubleValue(let\
    \ doubleA), .doubleValue(let doubleB)):\n        return doubleA > doubleB ? a\
    \ : b\n    case (.doubleValue(let doubleA), .stringValue(let stringB)):\n    \
    \    return doubleA > Double(stringB.replacingOccurrences(of: \",\", with: \"\
    .\")) ?? 0 ? a : b\n    case (.stringValue(let stringA), .intValue(let intB)):\n\
    \        return Double(stringA.replacingOccurrences(of: \",\", with: \".\")) ??\
    \ 0 > Double(intB) ? a : b\n    case (.stringValue(let stringA), .doubleValue(let\
    \ doubleB)):\n        return Double(stringA.replacingOccurrences(of: \",\", with:\
    \ \".\")) ?? 0 > doubleB ? a : b\n    case (.stringValue(let stringA), .stringValue(let\
    \ stringB)):\n        return Double(stringA.replacingOccurrences(of: \",\", with:\
    \ \".\")) ?? 0 > Double(stringB.replacingOccurrences(of: \",\", with: \".\"))\
    \ ?? 0 ? a : b\n    }", '    //TODO: Write implementation', "    switch a {\n\
    \    case .intValue(let aa):\n        switch b {\n        case .intValue(let bb):\n\
    \            return aa > bb ? a : b\n        case .doubleValue(let bb):\n    \
    \        return aa > bb ? a : b\n        case .stringValue(let bb):\n        \
    \    let bbi = Double(bb.replacingOccurrences(of: \",\", with: \".\")) ?? 0\n\
    \            return aa > bbi ? a : b\n        }\n    case .doubleValue(let aa):\n\
    \        switch b {\n        case .intValue(let bb):\n            return aa >\
    \ Double(bb) ? a : b\n        case .doubleValue(let bb):\n            return aa\
    \ > bb ? a : b\n        case .stringValue(let bb):\n            let bbi = Double(bb.replacingOccurrences(of:\
    \ \",\", with: \".\")) ?? 0\n            return aa > bbi ? a : b\n        }\n\
    \    case .stringValue(let aa):\n        switch b {\n        case .intValue(let\
    \ bb):\n            let aai = Double(aa.replacingOccurrences(of: \",\", with:\
    \ \".\")) ?? 0\n            return aai > Double(bb) ? a : b\n        case .doubleValue(let\
    \ bb):\n            let aai = Double(aa.replacingOccurrences(of: \",\", with:\
    \ \".\")) ?? 0\n            return aai > bb ? a : b\n        case .stringValue(let\
    \ bb):\n            let aai = Double(aa.replacingOccurrences(of: \",\", with:\
    \ \".\")) ?? 0\n            let bbi = Double(bb.replacingOccurrences(of: \",\"\
    , with: \".\")) ?? 0\n            return aai > bbi ? a : b\n        }\n    }",
  "    switch (a, b) {\n    case (.intValue(let a), .intValue(let b)):\n        return\
    \ a >= b ? a : b\n    case (.doubleValue(let a), .doubleValue(let b)):\n     \
    \   return a >= b ? a : b\n    case (.stringValue(let a), .stringValue(let b)):\n\
    \        return a >= b ? a : b\n    case (.stringValue(let a), .intValue(let b)):\n\
    \        return a >= String(b) ? a : b\n    case (.intValue(let a), .stringValue(let\
    \ b)):\n        return String(a) >= b ? a : b\n    case (.stringValue(let a),\
    \ .doubleValue(let b)):\n        return a >= String(b) ? a : b\n    case (.doubleValue(let\
    \ a), .stringValue(let b)):\n        return String(a) >= b ? a : b\n    case (.intValue(let\
    \ a), .doubleValue(let b)):\n        return a >= b ? a : b\n    case (.doubleValue(let\
    \ a), .intValue(let b)):\n        return a >= b ? a : b\n    }", '    return nil',
  "    // your code here\n    var result: Value?\n    switch (a, b) {\n    case (.intValue(let\
    \ a), .intValue(let b)):\n        result = (a > b) ? .intValue(a) : .intValue(b)\n\
    \    case (.intValue(let a), .doubleValue(let b)):\n        result = (Double(a)\
    \ > b) ? .intValue(a) : .doubleValue(b)\n    case (.intValue(let a), .stringValue(let\
    \ b)):\n        result = (Double(a) > Float(b)!) ? .intValue(a) : .stringValue(b)\n\
    \    case (.doubleValue(let a), .intValue(let b)):\n        result = (a > Double(b))\
    \ ? .doubleValue(a) : .intValue(b)\n    case (.doubleValue(let a), .doubleValue(let\
    \ b)):\n        result = (a > b) ? .doubleValue(a) : .doubleValue(b)\n    case\
    \ (.doubleValue(let a), .stringValue(let b)):\n        result = (a > Float(b)!)\
    \ ? .doubleValue(a) : .stringValue(b)\n    case (.stringValue(let a), .intValue(let\
    \ b)):\n        result = (Float(a)! > Double(b)) ? .stringValue(a) : .intValue(b)\n\
    \    case (.stringValue(let a), .doubleValue(let b)):\n        result = (Float(a)!\
    \ > b) ? .stringValue(a) : .doubleValue(b)\n    case (.stringValue(let a), .stringValue(let\
    \ b)):\n        result = (Float(a)! > Float(b)!) ? .stringValue(a) : .stringValue(b)\n\
    \    }\n    if a == b {\n        result = nil\n    }\n    return result", "  \
    \  switch (a, b) {\n    case (.intValue(let a), .intValue(let b)):\n        return\
    \ a > b ? a : b\n    case (.doubleValue(let a), .doubleValue(let b)):\n      \
    \  return a > b ? a : b\n    case (.stringValue(let a), .stringValue(let b)):\n\
    \        if let a = Double(a), let b = Double(b) {\n            return a > b ?\
    \ a : b\n        }\n        return nil\n    default:\n        return nil\n   \
    \ }", "    // TODO: Implement me!\n    var aInt: Int\n    var bInt: Int\n    var\
    \ aDouble: Double\n    var bDouble: Double\n    var aString: String\n    var bString:\
    \ String\n    \n    switch a {\n    case .intValue(let value):\n        aInt =\
    \ value\n    case .doubleValue(let value):\n        aDouble = value\n    case\
    \ .stringValue(let value):\n        aString = value\n    }\n    \n    switch b\
    \ {\n    case .intValue(let value):\n        bInt = value\n    case .doubleValue(let\
    \ value):\n        bDouble = value\n    case .stringValue(let value):\n      \
    \  bString = value\n    }\n    \n    if aInt > bInt {\n        return a\n    }\
    \ else if aInt < bInt {\n        return b\n    } else if aDouble > bDouble {\n\
    \        return a\n    } else if aDouble < bDouble {\n        return b\n    }\
    \ else if aString > bString {\n        return a\n    } else if aString < bString\
    \ {\n        return b\n    } else {\n        return nil\n    }", '    return nil',
  "    switch a {\n    case .intValue(let intA):\n        switch b {\n        case\
    \ .intValue(let intB):\n            return intA >= intB ? a : b\n        case\
    \ .doubleValue(let doubleB):\n            return intA >= doubleB ? a : b\n   \
    \     case .stringValue(let stringB):\n            return Double(stringB) >= intA\
    \ ? b : a\n        }\n    case .doubleValue(let doubleA):\n        switch b {\n\
    \        case .intValue(let intB):\n            return doubleA >= intB ? a : b\n\
    \        case .doubleValue(let doubleB):\n            return doubleA >= doubleB\
    \ ? a : b\n        case .stringValue(let stringB):\n            return Double(stringB)\
    \ >= doubleA ? b : a\n        }\n    case .stringValue(let stringA):\n       \
    \ switch b {\n        case .intValue(let intB):\n            return Double(stringA)\
    \ >= intB ? a : b\n        case .doubleValue(let doubleB):\n            return\
    \ Double(stringA) >= doubleB ? a : b\n        case .stringValue(let stringB):\n\
    \            return Double(stringA) >= Double(stringB) ? a : b\n        }\n  \
    \  }", "    // TODO: Your code here\n    return nil", "    switch (a, b) {\n \
    \   case let (.intValue(x), .intValue(y)) where x == y:\n        return nil\n\
    \    case let (.intValue(x), .intValue(y)) where x > y:\n        return a\n  \
    \  case let (.intValue(x), .intValue(y)) where x < y:\n        return b\n    case\
    \ let (.intValue(x), .doubleValue(y)) where x > y:\n        return a\n    case\
    \ let (.intValue(x), .doubleValue(y)) where x < y:\n        return b\n    case\
    \ let (.intValue(x), .doubleValue(y)) where x == y:\n        return b\n    case\
    \ let (.intValue(x), .stringValue(y)) where x > Double(y)!:\n        return a\n\
    \    case let (.intValue(x), .stringValue(y)) where x < Double(y)!:\n        return\
    \ b\n    case let (.intValue(x), .stringValue(y)) where x == Double(y)!:\n   \
    \     return b\n    case let (.doubleValue(x), .intValue(y)) where x > y:\n  \
    \      return a\n    case let (.doubleValue(x), .intValue(y)) where x < y:\n \
    \       return b\n    case let (.doubleValue(x), .intValue(y)) where x == y:\n\
    \        return a\n    case let (.doubleValue(x), .doubleValue(y)) where x ==\
    \ y:\n        return nil\n    case let (.doubleValue(x), .doubleValue(y)) where\
    \ x > y:\n        return a\n    case let (.doubleValue(x), .doubleValue(y)) where\
    \ x < y:\n        return b\n    case let (.doubleValue(x), .stringValue(y)) where\
    \ x > Double(y)!:\n        return a\n    case let (.doubleValue(x), .stringValue(y))\
    \ where x < Double(y)!:\n        return b\n    case let (.doubleValue(x), .stringValue(y))\
    \ where x == Double(y)!:\n        return a\n    case let (.stringValue(x), .intValue(y))\
    \ where Double(x)! > y:\n        return a\n    case let (.stringValue", "    var\
    \ a: Double\n    var b: Double\n    switch a {\n    case .intValue(let intValue):\n\
    \        a = Double(intValue)\n    case .doubleValue(let doubleValue):\n     \
    \   a = doubleValue\n    case .stringValue(let stringValue):\n        a = Double(stringValue.replacingOccurrences(of:\
    \ \",\", with: \".\")) ?? 0\n    }\n    switch b {\n    case .intValue(let intValue):\n\
    \        b = Double(intValue)\n    case .doubleValue(let doubleValue):\n     \
    \   b = doubleValue\n    case .stringValue(let stringValue):\n        b = Double(stringValue.replacingOccurrences(of:\
    \ \",\", with: \".\")) ?? 0\n    }\n    switch (a, b) {\n    case (let a, let\
    \ b) where a == b:\n        return nil\n    case (let a, let b) where a > b:\n\
    \        return a\n    case (let a, let b) where a < b:\n        return b\n  \
    \  default:\n        return nil\n    }", "    switch (a, b) {\n    case (.intValue(let\
    \ a), .intValue(let b)):\n        return a > b ? a : b\n    case (.doubleValue(let\
    \ a), .doubleValue(let b)):\n        return a > b ? a : b\n    case (.stringValue(let\
    \ a), .stringValue(let b)):\n        return a > b ? a : b\n    case (.stringValue(let\
    \ a), .intValue(let b)):\n        if let aDouble = Double(a) {\n            return\
    \ aDouble > Double(b) ? a : nil\n        }\n    case (.intValue(let a), .stringValue(let\
    \ b)):\n        if let bDouble = Double(b) {\n            return Double(a) > bDouble\
    \ ? b : nil\n        }\n    case (.stringValue(let a), .doubleValue(let b)):\n\
    \        if let aDouble = Double(a) {\n            return aDouble > b ? a : nil\n\
    \        }\n    case (.doubleValue(let a), .stringValue(let b)):\n        if let\
    \ bDouble = Double(b) {\n            return a > bDouble ? b : nil\n        }\n\
    \    case (.doubleValue(let a), .intValue(let b)):\n        return a > Double(b)\
    \ ? a : nil\n    case (.intValue(let a), .doubleValue(let b)):\n        return\
    \ Double(a) > b ? b : nil\n    }\n    return nil", "    // my code\n    switch\
    \ (a, b) {\n    case let (.intValue(a), .intValue(b)) where a > b:\n        return\
    \ .intValue(a)\n    case let (.intValue(a), .intValue(b)) where a < b:\n     \
    \   return .intValue(b)\n    case let (.intValue(a), .doubleValue(b)) where a\
    \ > b:\n        return .intValue(a)\n    case let (.intValue(a), .doubleValue(b))\
    \ where a < b:\n        return .doubleValue(b)\n    case let (.intValue(a), .stringValue(b))\
    \ where Double(b)! > Double(a):\n        return .stringValue(b)\n    case let\
    \ (.intValue(a), .stringValue(b)) where Double(b)! < Double(a):\n        return\
    \ .intValue(a)\n    case let (.doubleValue(a), .intValue(b)) where a > b:\n  \
    \      return .doubleValue(a)\n    case let (.doubleValue(a), .intValue(b)) where\
    \ a < b:\n        return .intValue(b)\n    case let (.doubleValue(a), .doubleValue(b))\
    \ where a > b:\n        return .doubleValue(a)\n    case let (.doubleValue(a),\
    \ .doubleValue(b)) where a < b:\n        return .doubleValue(b)\n    case let\
    \ (.doubleValue(a), .stringValue(b)) where Double(b)! > a:\n        return .stringValue(b)\n\
    \    case let (.doubleValue(a), .stringValue(b)) where Double(b)! < a:\n     \
    \   return .doubleValue(a)\n    case let (.stringValue(a), .intValue(b)) where\
    \ Double(a)! > Double(b):\n        return .stringValue(a)\n    case let (.stringValue(a),\
    \ .intValue(b)) where Double(a)! < Double(b):\n        return .intValue(b)\n \
    \   case let (.stringValue(a), .doubleValue(b)) where Double(a)! > b:\n      \
    \  return .stringValue(a)\n    case let (.stringValue(a), .doubleValue(b)) where\
    \ Double(", "    switch a {\n    case .intValue(let a):\n        switch b {\n\
    \        case .intValue(let b):\n            return a > b ? a : b\n        case\
    \ .doubleValue(let b):\n            return a > b ? a : b\n        case .stringValue(let\
    \ b):\n            return a > Double(b) ? a : b\n        }\n    case .doubleValue(let\
    \ a):\n        switch b {\n        case .intValue(let b):\n            return\
    \ a > b ? a : b\n        case .doubleValue(let b):\n            return a > b ?\
    \ a : b\n        case .stringValue(let b):\n            return a > Double(b) ?\
    \ a : b\n        }\n    case .stringValue(let a):\n        switch b {\n      \
    \  case .intValue(let b):\n            return Double(a) > b ? a : b\n        case\
    \ .doubleValue(let b):\n            return Double(a) > b ? a : b\n        case\
    \ .stringValue(let b):\n            return Double(a) > Double(b) ? a : b\n   \
    \     }\n    }", "    var aValue: Double\n    var bValue: Double\n    switch a\
    \ {\n    case .intValue(let aInt):\n        aValue = Double(aInt)\n    case .doubleValue(let\
    \ aDouble):\n        aValue = aDouble\n    case .stringValue(let aString):\n \
    \       aValue = Double(aString) ?? 0\n    }\n    switch b {\n    case .intValue(let\
    \ bInt):\n        bValue = Double(bInt)\n    case .doubleValue(let bDouble):\n\
    \        bValue = bDouble\n    case .stringValue(let bString):\n        bValue\
    \ = Double(bString) ?? 0\n    }\n    if aValue == bValue {\n        return nil\n\
    \    } else if aValue > bValue {\n        return a\n    } else {\n        return\
    \ b\n    }", "    let intValue = { (x: Int) -> Value in .intValue(x) }\n    let\
    \ doubleValue = { (x: Double) -> Value in .doubleValue(x) }\n    let stringValue\
    \ = { (x: String) -> Value in .stringValue(x) }\n    let toInt = { (x: Value)\
    \ -> Int? in\n        if case let .intValue(y) = x { return y }\n        return\
    \ nil\n    }\n    let toDouble = { (x: Value) -> Double? in\n        if case let\
    \ .doubleValue(y) = x { return y }\n        return nil\n    }\n    let toString\
    \ = { (x: Value) -> String? in\n        if case let .stringValue(y) = x { return\
    \ y }\n        return nil\n    }\n    let toReal = { (x: Value) -> Double? in\n\
    \        if let z = toInt(x) { return Double(z) }\n        if let z = toDouble(x)\
    \ { return z }\n        if let z = toString(x) {\n            let d = NumberFormatter().number(from:\
    \ z)\n            return d?.doubleValue\n        }\n        return nil\n    }\n\
    \    if let x = toReal(a), let y = toReal(b) {\n        if x > y { return a }\n\
    \        if x < y { return b }\n        return nil\n    }\n    if case let .intValue(x)\
    \ = a, case let .intValue(y) = b {\n        if x > y { return intValue(x) }\n\
    \        if x < y { return intValue(y) }\n        return nil\n    }\n    if case\
    \ let .doubleValue(x) = a, case let .doubleValue(y) = b {\n        if x > y {\
    \ return doubleValue(x) }\n        if x < y { return doubleValue(y) }\n      \
    \  return nil\n    }\n    if case let .stringValue(x) = a, case let .stringValue(y)\
    \ = b {\n        if x > y { return stringValue(x) }\n        if x < y { return\
    \ stringValue(y) }\n        return nil\n    }\n    return nil\n", "    switch\
    \ (a, b) {\n    case (.intValue(let a), .intValue(let b)):\n        return a >\
    \ b ? a : b\n    case (.doubleValue(let a), .doubleValue(let b)):\n        return\
    \ a > b ? a : b\n    case (.stringValue(let a), .stringValue(let b)):\n      \
    \  return a > b ? a : b\n    default:\n        return nil\n    }", "    switch\
    \ (a, b) {\n    case let (.intValue(a), .intValue(b)) where a != b:\n        return\
    \ a > b ? a : b\n    case let (.doubleValue(a), .doubleValue(b)) where a != b:\n\
    \        return a > b ? a : b\n    case let (.stringValue(a), .stringValue(b))\
    \ where a != b:\n        return a > b ? a : b\n    default:\n        return nil\n\
    \    }", "    switch (a, b) {\n    case (.intValue(let i), .intValue(let j)):\n\
    \        return i >= j ? a : b\n    case (.intValue(let i), .doubleValue(let j)):\n\
    \        return j >= Double(i) ? b : a\n    case (.intValue(let i), .stringValue(let\
    \ j)):\n        return Double(j) ?? 0 >= Double(i) ? b : a\n    case (.doubleValue(let\
    \ i), .intValue(let j)):\n        return i >= Double(j) ? a : b\n    case (.doubleValue(let\
    \ i), .doubleValue(let j)):\n        return i >= j ? a : b\n    case (.doubleValue(let\
    \ i), .stringValue(let j)):\n        return Double(j) ?? 0 >= i ? b : a\n    case\
    \ (.stringValue(let i), .intValue(let j)):\n        return Double(i) ?? 0 >= Double(j)\
    \ ? a : b\n    case (.stringValue(let i), .doubleValue(let j)):\n        return\
    \ Double(i) ?? 0 >= j ? a : b\n    case (.stringValue(let i), .stringValue(let\
    \ j)):\n        return Double(i) ?? 0 >= Double(j) ? a : b\n    }", "    switch\
    \ a {\n    case .intValue(let x):\n        switch b {\n        case .intValue(let\
    \ y):\n            if x > y {\n                return a\n            } else if\
    \ x < y {\n                return b\n            } else {\n                return\
    \ nil\n            }\n        case .doubleValue(let y):\n            if Double(x)\
    \ > y {\n                return a\n            } else if Double(x) < y {\n   \
    \             return b\n            } else {\n                return nil\n   \
    \         }\n        case .stringValue(let y):\n            if Double(x) > Double(y)\
    \ {\n                return a\n            } else if Double(x) < Double(y) {\n\
    \                return b\n            } else {\n                return nil\n\
    \            }\n        }\n    case .doubleValue(let x):\n        switch b {\n\
    \        case .intValue(let y):\n            if x > Double(y) {\n            \
    \    return a\n            } else if x < Double(y) {\n                return b\n\
    \            } else {\n                return nil\n            }\n        case\
    \ .doubleValue(let y):\n            if x > y {\n                return a\n   \
    \         } else if x < y {\n                return b\n            } else {\n\
    \                return nil\n            }\n        case .stringValue(let y):\n\
    \            if x > Double(y) {\n                return a\n            } else\
    \ if x < Double(y) {\n                return b\n            } else {\n       \
    \         return nil\n            }\n        }\n    case .stringValue(let x):\n\
    \        switch b {\n        case .intValue(let y):\n            if Double(x)\
    \ > Double(y) {\n                return a\n            } else if Double(x) < Double(y)\
    \ {\n                return b\n            } else {\n                return nil\n\
    \            }\n        case .doubleValue(let y):\n            if Double(x) >\
    \ y {\n                return a\n            } else if Double(x) < y {\n     \
    \           return b\n            } else {\n                return nil\n     \
    \       }\n        case .stringValue(let y):\n            if Double(x) > Double(y)\
    \ {\n                return a\n            } else if Double(x) < Double(y", " \
    \   // Enter your code here\n    switch (a, b) {\n    case let (.intValue(x),\
    \ .intValue(y)):\n        return x > y ? .intValue(x) : nil\n    case let (.intValue(x),\
    \ .doubleValue(y)):\n        return y > Double(x) ? .doubleValue(y) : nil\n  \
    \  case let (.intValue(x), .stringValue(y)):\n        return Double(y) > Double(x)\
    \ ? .stringValue(y) : nil\n    case let (.doubleValue(x), .intValue(y)):\n   \
    \     return x > Double(y) ? .doubleValue(x) : nil\n    case let (.doubleValue(x),\
    \ .doubleValue(y)):\n        return x > y ? .doubleValue(x) : nil\n    case let\
    \ (.doubleValue(x), .stringValue(y)):\n        return Double(y) > x ? .stringValue(y)\
    \ : nil\n    case let (.stringValue(x), .intValue(y)):\n        return Double(x)\
    \ > Double(y) ? .stringValue(x) : nil\n    case let (.stringValue(x), .doubleValue(y)):\n\
    \        return y > Double(x) ? .doubleValue(y) : nil\n    case let (.stringValue(x),\
    \ .stringValue(y)):\n        return Double(x) > Double(y) ? .stringValue(x) :\
    \ nil\n    }\n    return nil", "    if a == b {\n        return nil\n    }\n \
    \   let intA = a.intValue()\n    let intB = b.intValue()\n    if intA == intB\
    \ {\n        return nil\n    }\n    let doubleA = a.doubleValue()\n    let doubleB\
    \ = b.doubleValue()\n    if doubleA == doubleB {\n        return nil\n    }\n\
    \    return max(a, b)", "    \n    var aValue: Double = 0\n    var bValue: Double\
    \ = 0\n    \n    switch a {\n    case .intValue(let value):\n        aValue =\
    \ Double(value)\n    case .doubleValue(let value):\n        aValue = value\n \
    \   case .stringValue(let value):\n        if let value = Double(value.replacingOccurrences(of:\
    \ \",\", with: \".\")) {\n            aValue = value\n        }\n    }\n    \n\
    \    switch b {\n    case .intValue(let value):\n        bValue = Double(value)\n\
    \    case .doubleValue(let value):\n        bValue = value\n    case .stringValue(let\
    \ value):\n        if let value = Double(value.replacingOccurrences(of: \",\"\
    , with: \".\")) {\n            bValue = value\n        }\n    }\n    \n    switch\
    \ aValue > bValue {\n    case true:\n        return a\n    case false:\n     \
    \   return b\n    }", "    switch (a, b) {\n    case (.intValue(let a), .intValue(let\
    \ b)):\n        return a > b ? a : b\n    case (.doubleValue(let a), .doubleValue(let\
    \ b)):\n        return a > b ? a : b\n    case (.stringValue(let a), .stringValue(let\
    \ b)):\n        return Double(a) > Double(b) ? a : b\n    default:\n        return\
    \ nil\n    }", "    // TODO\n    return nil", "    switch a {\n    case .intValue(let\
    \ aValue):\n        switch b {\n        case .intValue(let bValue):\n        \
    \    if aValue == bValue {\n                return nil\n            } else if\
    \ aValue > bValue {\n                return a\n            } else {\n        \
    \        return b\n            }\n        case .doubleValue(let bValue):\n   \
    \         if aValue == bValue {\n                return nil\n            } else\
    \ if aValue > bValue {\n                return a\n            } else {\n     \
    \           return b\n            }\n        case .stringValue(let bValue):\n\
    \            if let bValue = Double(bValue) {\n                if aValue == bValue\
    \ {\n                    return nil\n                } else if aValue > bValue\
    \ {\n                    return a\n                } else {\n                \
    \    return b\n                }\n            } else {\n                return\
    \ nil\n            }\n        }\n    case .doubleValue(let aValue):\n        switch\
    \ b {\n        case .intValue(let bValue):\n            if aValue == Double(bValue)\
    \ {\n                return nil\n            } else if aValue > Double(bValue)\
    \ {\n                return a\n            } else {\n                return b\n\
    \            }\n        case .doubleValue(let bValue):\n            if aValue\
    \ == bValue {\n                return nil\n            } else if aValue > bValue\
    \ {\n                return a\n            } else {\n                return b\n\
    \            }\n        case .stringValue(let bValue):\n            if let bValue\
    \ = Double(bValue) {\n                if aValue == bValue {\n                \
    \    return nil\n                } else if aValue > bValue {\n               \
    \     return a\n                } else {\n                    return b\n     \
    \           }\n            } else {\n                return nil\n            }\n\
    \        }\n    case .stringValue(let aValue):\n        switch b {\n        case\
    \ .intValue(let bValue):\n            if let aValue = Double(aValue) {\n     \
    \           if aValue == Double(bValue) {\n                    return nil\n  \
    \              } else if aValue > Double(bValue) {\n                    return\
    \ a\n                } else {\n                    return b\n                }\n\
    \            } else {\n                return nil\n            }\n        case\
    \ .doubleValue(let b", "    switch (a, b) {\n    case let (.intValue(int_a), .intValue(int_b)):\n\
    \        return int_a > int_b ? a : b\n    case let (.intValue(int_a), .doubleValue(double_b)):\n\
    \        return double_b > Double(int_a) ? b : a\n    case let (.intValue(int_a),\
    \ .stringValue(string_b)):\n        return Double(string_b) > Double(int_a) ?\
    \ b : a\n    case let (.doubleValue(double_a), .intValue(int_b)):\n        return\
    \ double_a > Double(int_b) ? a : b\n    case let (.doubleValue(double_a), .doubleValue(double_b)):\n\
    \        return double_a > double_b ? a : b\n    case let (.doubleValue(double_a),\
    \ .stringValue(string_b)):\n        return Double(string_b) > double_a ? b : a\n\
    \    case let (.stringValue(string_a), .intValue(int_b)):\n        return Double(string_a)\
    \ > Double(int_b) ? a : b\n    case let (.stringValue(string_a), .doubleValue(double_b)):\n\
    \        return double_b > Double(string_a) ? b : a\n    case let (.stringValue(string_a),\
    \ .stringValue(string_b)):\n        return Double(string_a) > Double(string_b)\
    \ ? a : b\n    }", "    switch (a, b) {\n    case (.intValue(let a), .intValue(let\
    \ b)):\n        return a > b ? a : b\n    case (.doubleValue(let a), .doubleValue(let\
    \ b)):\n        return a > b ? a : b\n    case (.stringValue(let a), .stringValue(let\
    \ b)):\n        return a > b ? a : b\n    case (.intValue(let a), .doubleValue(let\
    \ b)):\n        return a > b ? a : b\n    case (.intValue(let a), .stringValue(let\
    \ b)):\n        return a > b ? a : b\n    case (.doubleValue(let a), .intValue(let\
    \ b)):\n        return a > b ? a : b\n    case (.doubleValue(let a), .stringValue(let\
    \ b)):\n        return a > b ? a : b\n    case (.stringValue(let a), .intValue(let\
    \ b)):\n        return a > b ? a : b\n    case (.stringValue(let a), .doubleValue(let\
    \ b)):\n        return a > b ? a : b\n    default:\n        return nil\n    }",
  "    var aNum = 0.0\n    var bNum = 0.0\n    if case let .intValue(value) = a {\n\
    \        aNum = Double(value)\n    } else if case let .doubleValue(value) = a\
    \ {\n        aNum = value\n    } else if case let .stringValue(value) = a {\n\
    \        aNum = Double(value.replacingOccurrences(of: \",\", with: \".\")) ??\
    \ 0.0\n    }\n    if case let .intValue(value) = b {\n        bNum = Double(value)\n\
    \    } else if case let .doubleValue(value) = b {\n        bNum = value\n    }\
    \ else if case let .stringValue(value) = b {\n        bNum = Double(value.replacingOccurrences(of:\
    \ \",\", with: \".\")) ?? 0.0\n    }\n    if aNum > bNum {\n        return a\n\
    \    } else if aNum < bNum {\n        return b\n    } else {\n        return nil\n\
    \    }", "    var aValue = 0.0\n    var bValue = 0.0\n    switch a {\n    case\
    \ .intValue(let value):\n        aValue = Double(value)\n    case .doubleValue(let\
    \ value):\n        aValue = value\n    case .stringValue(let value):\n       \
    \ aValue = Double(value.replacingOccurrences(of: \",\", with: \".\")) ?? 0.0\n\
    \    }\n    switch b {\n    case .intValue(let value):\n        bValue = Double(value)\n\
    \    case .doubleValue(let value):\n        bValue = value\n    case .stringValue(let\
    \ value):\n        bValue = Double(value.replacingOccurrences(of: \",\", with:\
    \ \".\")) ?? 0.0\n    }\n    if (aValue == bValue) {\n        return nil\n   \
    \ }\n    if (aValue > bValue) {\n        return a\n    }\n    return b", "   \
    \ // TODO: Implement\n    let c: Value?\n    switch (a, b) {\n    case let (.intValue(a),\
    \ .intValue(b)):\n        c = a >= b ? a : b\n    case let (.intValue(a), .doubleValue(b)):\n\
    \        c = a >= b ? a : b\n    case let (.intValue(a), .stringValue(b)):\n \
    \       c = a >= Double(b)! ? a : b\n    case let (.doubleValue(a), .intValue(b)):\n\
    \        c = a >= b ? a : b\n    case let (.doubleValue(a), .doubleValue(b)):\n\
    \        c = a >= b ? a : b\n    case let (.doubleValue(a), .stringValue(b)):\n\
    \        c = a >= Double(b)! ? a : b\n    case let (.stringValue(a), .intValue(b)):\n\
    \        c = Double(a)! >= b ? a : b\n    case let (.stringValue(a), .doubleValue(b)):\n\
    \        c = Double(a)! >= b ? a : b\n    case let (.stringValue(a), .stringValue(b)):\n\
    \        c = Double(a)! >= Double(b)! ? a : b\n    }\n    return c", "    \n \
    \   switch (a, b) {\n    case let (.intValue(i1), .intValue(i2)):\n        return\
    \ i1 > i2 ? a : (i1 < i2 ? b : nil)\n    case let (.intValue(i1), .doubleValue(d2)):\n\
    \        return a\n    case let (.intValue(i1), .stringValue(s2)):\n        return\
    \ a\n    case let (.doubleValue(d1), .intValue(i2)):\n        return b\n    case\
    \ let (.doubleValue(d1), .doubleValue(d2)):\n        return d1 > d2 ? a : (d1\
    \ < d2 ? b : nil)\n    case let (.doubleValue(d1), .stringValue(s2)):\n      \
    \  return a\n    case let (.stringValue(s1), .intValue(i2)):\n        return b\n\
    \    case let (.stringValue(s1), .doubleValue(d2)):\n        return b\n    case\
    \ let (.stringValue(s1), .stringValue(s2)):\n        if let d1 = Double(s1), let\
    \ d2 = Double(s2) {\n            return d1 > d2 ? a : (d1 < d2 ? b : nil)\n  \
    \      } else {\n            return s1 > s2 ? a : (s1 < s2 ? b : nil)\n      \
    \  }\n    }", "    switch (a, b) {\n    case (.intValue(let intA), .intValue(let\
    \ intB)):\n        return intA > intB ? a : b\n    case (.intValue(let intA),\
    \ .doubleValue(let doubleB)):\n        return doubleB > Double(intA) ? b : a\n\
    \    case (.intValue(let intA), .stringValue(let stringB)):\n        return Double(stringB)!\
    \ > Double(intA) ? b : a\n    case (.doubleValue(let doubleA), .intValue(let intB)):\n\
    \        return doubleA > Double(intB) ? a : b\n    case (.doubleValue(let doubleA),\
    \ .doubleValue(let doubleB)):\n        return doubleA > doubleB ? a : b\n    case\
    \ (.doubleValue(let doubleA), .stringValue(let stringB)):\n        return Double(stringB)!\
    \ > doubleA ? b : a\n    case (.stringValue(let stringA), .intValue(let intB)):\n\
    \        return Double(stringA)! > Double(intB) ? a : b\n    case (.stringValue(let\
    \ stringA), .doubleValue(let doubleB)):\n        return Double(stringA)! > doubleB\
    \ ? a : b\n    case (.stringValue(let stringA), .stringValue(let stringB)):\n\
    \        return Double(stringA)! > Double(stringB)! ? a : b\n    }", "    switch\
    \ (a, b) {\n    case (.intValue(let a), .intValue(let b)):\n        return a >\
    \ b ? a : b\n    case (.doubleValue(let a), .doubleValue(let b)):\n        return\
    \ a > b ? a : b\n    case (.stringValue(let a), .stringValue(let b)):\n      \
    \  return a > b ? a : b\n    default:\n        return nil\n    }", "    var valueA:\
    \ Double\n    var valueB: Double\n    if case .intValue(let v) = a {\n       \
    \ valueA = Double(v)\n    } else if case .doubleValue(let v) = a {\n        valueA\
    \ = v\n    } else if case .stringValue(let v) = a {\n        valueA = Double(v.replacingOccurrences(of:\
    \ \",\", with: \".\")) ?? 0\n    } else {\n        return nil\n    }\n    if case\
    \ .intValue(let v) = b {\n        valueB = Double(v)\n    } else if case .doubleValue(let\
    \ v) = b {\n        valueB = v\n    } else if case .stringValue(let v) = b {\n\
    \        valueB = Double(v.replacingOccurrences(of: \",\", with: \".\")) ?? 0\n\
    \    } else {\n        return nil\n    }\n    if valueA == valueB {\n        return\
    \ nil\n    } else if valueA > valueB {\n        return a\n    } else {\n     \
    \   return b\n    }", "    // TODO\n    return nil", "    switch (a, b) {\n  \
    \  case let (.intValue(a), .intValue(b)) where a != b:\n        return a > b ?\
    \ a : b\n    case let (.doubleValue(a), .doubleValue(b)) where a != b:\n     \
    \   return a > b ? a : b\n    case let (.stringValue(a), .stringValue(b)) where\
    \ a != b:\n        return a > b ? a : b\n    default:\n        return nil\n  \
    \  }", "    // TODO: Write your code here\n    var a_max: Value?\n    var b_max:\
    \ Value?\n    switch (a, b) {\n        case let (.intValue(a), .intValue(b)):\n\
    \            if a > b {\n                a_max = a\n            } else if a <\
    \ b {\n                b_max = b\n            }\n        case let (.intValue(a),\
    \ .doubleValue(b)):\n            if a > b {\n                a_max = a\n     \
    \       } else if a < b {\n                b_max = b\n            }\n        case\
    \ let (.intValue(a), .stringValue(b)):\n            if a > Int(b)! {\n       \
    \         a_max = a\n            } else if a < Int(b)! {\n                b_max\
    \ = b\n            }\n        case let (.doubleValue(a), .intValue(b)):\n    \
    \        if a > b {\n                a_max = a\n            } else if a < b {\n\
    \                b_max = b\n            }\n        case let (.doubleValue(a),\
    \ .doubleValue(b)):\n            if a > b {\n                a_max = a\n     \
    \       } else if a < b {\n                b_max = b\n            }\n        case\
    \ let (.doubleValue(a), .stringValue(b)):\n            if a > Double(b)! {\n \
    \               a_max = a\n            } else if a < Double(b)! {\n          \
    \      b_max = b\n            }\n        case let (.stringValue(a), .intValue(b)):\n\
    \            if Int(a)! > b {\n                a_max = a\n            } else if\
    \ Int(a)! < b {\n                b_max = b\n            }\n        case let (.stringValue(a),\
    \ .doubleValue(b)):\n            if Double(a)! > b {\n                a_max =\
    \ a\n            } else if Double(a)! < b {\n                b_max = b\n     \
    \       }\n        case let (.stringValue(a), .stringValue(b)):\n            if\
    \ Int(a)! > Int(b)! {\n                a_max = a\n            } else if Int(a)!\
    \ < Int(b)!", "    switch a {\n    case .intValue(let numA):\n        switch b\
    \ {\n        case .intValue(let numB):\n            return numA > numB ? a : b\n\
    \        case .doubleValue(let numB):\n            return numA > numB ? a : b\n\
    \        case .stringValue(let numB):\n            return numA > numB.asDouble()\
    \ ? a : b\n        }\n    case .doubleValue(let numA):\n        switch b {\n \
    \       case .intValue(let numB):\n            return numA > numB ? a : b\n  \
    \      case .doubleValue(let numB):\n            return numA > numB ? a : b\n\
    \        case .stringValue(let numB):\n            return numA > numB.asDouble()\
    \ ? a : b\n        }\n    case .stringValue(let numA):\n        switch b {\n \
    \       case .intValue(let numB):\n            return numA.asDouble() > numB ?\
    \ a : b\n        case .doubleValue(let numB):\n            return numA.asDouble()\
    \ > numB ? a : b\n        case .stringValue(let numB):\n            return numA.asDouble()\
    \ > numB.asDouble() ? a : b\n        }\n    }", "    let result = (a, b)\n   \
    \ switch result {\n    case let (.intValue(a), .intValue(b)) where a > b:\n  \
    \      return .intValue(a)\n    case let (.intValue(a), .intValue(b)) where a\
    \ < b:\n        return .intValue(b)\n    case let (.intValue(a), .doubleValue(b))\
    \ where a > b:\n        return .intValue(a)\n    case let (.intValue(a), .doubleValue(b))\
    \ where a < b:\n        return .doubleValue(b)\n    case let (.intValue(a), .stringValue(b))\
    \ where a > Double(b.trimmingCharacters(in: CharacterSet(charactersIn: \"0123456789.\"\
    ).inverted))!:\n        return .intValue(a)\n    case let (.intValue(a), .stringValue(b))\
    \ where a < Double(b.trimmingCharacters(in: CharacterSet(charactersIn: \"0123456789.\"\
    ).inverted))!:\n        return .stringValue(b)\n    case let (.doubleValue(a),\
    \ .intValue(b)) where a > b:\n        return .doubleValue(a)\n    case let (.doubleValue(a),\
    \ .intValue(b)) where a < b:\n        return .intValue(b)\n    case let (.doubleValue(a),\
    \ .doubleValue(b)) where a > b:\n        return .doubleValue(a)\n    case let\
    \ (.doubleValue(a), .doubleValue(b)) where a < b:\n        return .doubleValue(b)\n\
    \    case let (.doubleValue(a), .stringValue(b)) where a > Double(b.trimmingCharacters(in:\
    \ CharacterSet(charactersIn: \"0123456789.\").inverted))!:\n        return .doubleValue(a)\n\
    \    case let (.doubleValue(a), .stringValue(b)) where a < Double(b.trimmingCharacters(in:\
    \ CharacterSet(charactersIn: \"0123456789.\").inverted))!:\n        return .stringValue(b)\n\
    \    case let (.stringValue(a), .intValue(b)) where Double(a.trimmingCharacters(in:\
    \ CharacterSet", "    // your code here\n    return nil", "    if a == b {\n \
    \       return nil\n    }\n    let aTuple = getTuple(value: a)\n    let bTuple\
    \ = getTuple(value: b)\n    if aTuple.1 < bTuple.1 {\n        return b\n    }\n\
    \    return a", "    if case let .intValue(a) = a, case let .intValue(b) = b {\n\
    \        return a < b ? b : a\n    } else if case let .doubleValue(a) = a, case\
    \ let .doubleValue(b) = b {\n        return a < b ? b : a\n    } else if case\
    \ let .stringValue(a) = a, case let .stringValue(b) = b {\n        return a <\
    \ b ? b : a\n    } else if case let .intValue(a) = a, case let .doubleValue(b)\
    \ = b {\n        return a < b ? b : a\n    } else if case let .intValue(a) = a,\
    \ case let .stringValue(b) = b {\n        return a < b ? b : a\n    } else if\
    \ case let .doubleValue(a) = a, case let .intValue(b) = b {\n        return a\
    \ < b ? b : a\n    } else if case let .doubleValue(a) = a, case let .stringValue(b)\
    \ = b {\n        return a < b ? b : a\n    } else if case let .stringValue(a)\
    \ = a, case let .intValue(b) = b {\n        return a < b ? b : a\n    } else if\
    \ case let .stringValue(a) = a, case let .doubleValue(b) = b {\n        return\
    \ a < b ? b : a\n    } else {\n        return nil\n    }", "    switch (a, b)\
    \ {\n    case (.intValue(let a), .intValue(let b)):\n        return a > b ? a\
    \ : b\n    case (.doubleValue(let a), .doubleValue(let b)):\n        return a\
    \ > b ? a : b\n    case (.stringValue(let a), .stringValue(let b)):\n        return\
    \ a > b ? a : b\n    case (.stringValue(let a), .intValue(let b)):\n        return\
    \ a > String(b) ? a : b\n    case (.intValue(let a), .stringValue(let b)):\n \
    \       return a > Double(b) ? a : b\n    case (.doubleValue(let a), .intValue(let\
    \ b)):\n        return a > Double(b) ? a : b\n    case (.intValue(let a), .doubleValue(let\
    \ b)):\n        return a > b ? a : b\n    case (.doubleValue(let a), .stringValue(let\
    \ b)):\n        return a > Double(b) ? a : b\n    case (.stringValue(let a), .doubleValue(let\
    \ b)):\n        return a > String(b) ? a : b\n    default:\n        return nil\n\
    \    }", "    switch (a, b) {\n    case (.intValue(let a), .intValue(let b)):\n\
    \        return (a < b) ? b : nil\n    case (.intValue(let a), .doubleValue(let\
    \ b)):\n        return (Double(a) < b) ? b : nil\n    case (.intValue(let a),\
    \ .stringValue(let b)):\n        let bValue = Double(b.replacingOccurrences(of:\
    \ \",\", with: \".\"))\n        return (Double(a) < bValue!) ? b : nil\n    case\
    \ (.doubleValue(let a), .intValue(let b)):\n        return (a < Double(b)) ? a\
    \ : nil\n    case (.doubleValue(let a), .doubleValue(let b)):\n        return\
    \ (a < b) ? b : nil\n    case (.doubleValue(let a), .stringValue(let b)):\n  \
    \      let bValue = Double(b.replacingOccurrences(of: \",\", with: \".\"))\n \
    \       return (a < bValue!) ? b : nil\n    case (.stringValue(let a), .intValue(let\
    \ b)):\n        let aValue = Double(a.replacingOccurrences(of: \",\", with: \"\
    .\"))\n        return (aValue! < Double(b)) ? a : nil\n    case (.stringValue(let\
    \ a), .doubleValue(let b)):\n        let aValue = Double(a.replacingOccurrences(of:\
    \ \",\", with: \".\"))\n        return (aValue! < b) ? a : nil\n    case (.stringValue(let\
    \ a), .stringValue(let b)):\n        let aValue = Double(a.replacingOccurrences(of:\
    \ \",\", with: \".\"))\n        let bValue = Double(b.replacingOccurrences(of:\
    \ \",\", with: \".\"))\n        return (aValue! < bValue!) ? b : nil\n    }",
  "    switch (a, b) {\n    case (.intValue(let a), .intValue(let b)):\n        return\
    \ a > b ? a : b\n    case (.doubleValue(let a), .doubleValue(let b)):\n      \
    \  return a > b ? a : b\n    case (.stringValue(let a), .stringValue(let b)):\n\
    \        return Double(a) > Double(b) ? a : b\n    case (.intValue(let a), .doubleValue(let\
    \ b)):\n        return a > b ? .intValue(a) : .doubleValue(b)\n    case (.intValue(let\
    \ a), .stringValue(let b)):\n        return Double(a) > Double(b) ? .intValue(a)\
    \ : .stringValue(b)\n    case (.doubleValue(let a), .intValue(let b)):\n     \
    \   return a > b ? .doubleValue(a) : .intValue(b)\n    case (.doubleValue(let\
    \ a), .stringValue(let b)):\n        return a > Double(b) ? .doubleValue(a) :\
    \ .stringValue(b)\n    case (.stringValue(let a), .intValue(let b)):\n       \
    \ return Double(a) > b ? .stringValue(a) : .intValue(b)\n    case (.stringValue(let\
    \ a), .doubleValue(let b)):\n        return Double(a) > b ? .stringValue(a) :\
    \ .doubleValue(b)\n    default:\n        return nil\n    }", "    switch (a, b)\
    \ {\n    case (.intValue(let a), .intValue(let b)):\n        return a > b ? a\
    \ : b\n    case (.doubleValue(let a), .doubleValue(let b)):\n        return a\
    \ > b ? a : b\n    case (.stringValue(let a), .stringValue(let b)):\n        return\
    \ a > b ? a : b\n    case (.stringValue(let a), .intValue(let b)):\n        return\
    \ a > String(b) ? a : nil\n    case (.intValue(let a), .stringValue(let b)):\n\
    \        return String(a) > b ? b : nil\n    case (.stringValue(let a), .doubleValue(let\
    \ b)):\n        return a > String(b) ? a : nil\n    case (.doubleValue(let a),\
    \ .stringValue(let b)):\n        return String(a) > b ? b : nil\n    case (.doubleValue(let\
    \ a), .intValue(let b)):\n        return a > Double(b) ? a : b\n    case (.intValue(let\
    \ a), .doubleValue(let b)):\n        return Double(a) > b ? a : b\n    }", " \
    \   switch (a, b) {\n    case (.intValue(let a), .intValue(let b)):\n        return\
    \ a > b ? a : b\n    case (.doubleValue(let a), .doubleValue(let b)):\n      \
    \  return a > b ? a : b\n    case (.stringValue(let a), .stringValue(let b)):\n\
    \        return a > b ? a : b\n    case (.intValue(let a), .doubleValue(let b)):\n\
    \        return a > b ? a : b\n    case (.intValue(let a), .stringValue(let b)):\n\
    \        return a > b ? a : b\n    case (.doubleValue(let a), .intValue(let b)):\n\
    \        return a > b ? a : b\n    case (.doubleValue(let a), .stringValue(let\
    \ b)):\n        return a > b ? a : b\n    case (.stringValue(let a), .intValue(let\
    \ b)):\n        return a > b ? a : b\n    case (.stringValue(let a), .doubleValue(let\
    \ b)):\n        return a > b ? a : b\n    default:\n        return nil\n    }",
  "    switch (a, b) {\n    case (.intValue(let x), .intValue(let y)):\n        return\
    \ x > y ? .intValue(x) : (y > x ? .intValue(y) : nil)\n    case (.intValue(let\
    \ x), .doubleValue(let y)):\n        return y > Double(x) ? .doubleValue(y) :\
    \ nil\n    case (.intValue(let x), .stringValue(let y)):\n        let z = y.replacingOccurrences(of:\
    \ \",\", with: \".\")\n        return Double(z) > Double(x) ? .stringValue(y)\
    \ : nil\n    case (.doubleValue(let x), .intValue(let y)):\n        return x >\
    \ Double(y) ? .doubleValue(x) : nil\n    case (.doubleValue(let x), .doubleValue(let\
    \ y)):\n        return x > y ? .doubleValue(x) : (y > x ? .doubleValue(y) : nil)\n\
    \    case (.doubleValue(let x), .stringValue(let y)):\n        let z = y.replacingOccurrences(of:\
    \ \",\", with: \".\")\n        return Double(z) > x ? .stringValue(y) : nil\n\
    \    case (.stringValue(let x), .intValue(let y)):\n        let z = x.replacingOccurrences(of:\
    \ \",\", with: \".\")\n        return Double(z) > Double(y) ? .stringValue(x)\
    \ : nil\n    case (.stringValue(let x), .doubleValue(let y)):\n        let z =\
    \ x.replacingOccurrences(of: \",\", with: \".\")\n        return Double(z) > y\
    \ ? .stringValue(x) : nil\n    case (.stringValue(let x), .stringValue(let y)):\n\
    \        let z = x.replacingOccurrences(of: \",\", with: \".\")\n        let k\
    \ = y.replacingOccurrences(of: \",\", with: \".\")\n        return Double(z) >\
    \ Double(k) ? .stringValue(x) : (Double(k) > Double(z) ? .stringValue(y) : nil",
  "    switch a {\n    case .intValue(let intValue):\n        switch b {\n       \
    \ case .intValue(let bIntValue):\n            return intValue > bIntValue ? a\
    \ : b\n        case .doubleValue(let bDoubleValue):\n            return a\n  \
    \      case .stringValue(let bStringValue):\n            return Double(bStringValue)\
    \ ?? Double(bStringValue.replacingOccurrences(of: \",\", with: \".\")) != nil\
    \ ? b : nil\n        }\n    case .doubleValue(let doubleValue):\n        switch\
    \ b {\n        case .intValue(let bIntValue):\n            return b\n        case\
    \ .doubleValue(let bDoubleValue):\n            return doubleValue > bDoubleValue\
    \ ? a : b\n        case .stringValue(let bStringValue):\n            return Double(bStringValue)\
    \ ?? Double(bStringValue.replacingOccurrences(of: \",\", with: \".\")) != nil\
    \ ? b : nil\n        }\n    case .stringValue(let stringValue):\n        switch\
    \ b {\n        case .intValue(let bIntValue):\n            return Double(stringValue)\
    \ ?? Double(stringValue.replacingOccurrences(of: \",\", with: \".\")) != nil ?\
    \ a : nil\n        case .doubleValue(let bDoubleValue):\n            return a\n\
    \        case .stringValue(let bStringValue):\n            if let aDouble = Double(stringValue)\
    \ ?? Double(stringValue.replacingOccurrences(of: \",\", with: \".\")),\n     \
    \           let bDouble = Double(bStringValue) ?? Double(bStringValue.replacingOccurrences(of:\
    \ \",\", with: \".\")) {\n                return aDouble > bDouble ? a : b\n \
    \           } else {\n                return nil\n            }\n        }\n \
    \   }", "    switch (a, b) {\n    case let (.intValue(a), .intValue(b)) where\
    \ a == b:\n        return nil\n    case let (.intValue(a), .intValue(b)) where\
    \ a > b:\n        return a\n    case let (.intValue(a), .intValue(b)) where a\
    \ < b:\n        return b\n    case let (.intValue(a), .doubleValue(b)) where a\
    \ > b:\n        return a\n    case let (.intValue(a), .doubleValue(b)) where a\
    \ < b:\n        return b\n    case let (.intValue(a), .stringValue(b)) where a\
    \ > Int(b)!:\n        return a\n    case let (.intValue(a), .stringValue(b)) where\
    \ a < Int(b)!:\n        return b\n    case let (.doubleValue(a), .intValue(b))\
    \ where a > b:\n        return a\n    case let (.doubleValue(a), .intValue(b))\
    \ where a < b:\n        return b\n    case let (.doubleValue(a), .doubleValue(b))\
    \ where a == b:\n        return nil\n    case let (.doubleValue(a), .doubleValue(b))\
    \ where a > b:\n        return a\n    case let (.doubleValue(a), .doubleValue(b))\
    \ where a < b:\n        return b\n    case let (.doubleValue(a), .stringValue(b))\
    \ where a > Double(b)!:\n        return a\n    case let (.doubleValue(a), .stringValue(b))\
    \ where a < Double(b)!:\n        return b\n    case let (.stringValue(a), .intValue(b))\
    \ where Double(a)! > b:\n        return a\n    case let (.stringValue(a), .intValue(b))\
    \ where Double(a)! < b:\n        return b\n    case let (.stringValue(a), .doubleValue(b))\
    \ where Double(a)! > b:\n        return a\n    case let (.stringValue(a), .doubleValue(b))\
    \ where Double(a)! < b:\n        return b\n    case let (.stringValue(a), .stringValue(b))\
    \ where Double(a)! == Double(b)!:\n       ", "    switch (a, b) {\n    case (.intValue(let\
    \ a), .intValue(let b)):\n        return a >= b ? a : b\n    case (.doubleValue(let\
    \ a), .doubleValue(let b)):\n        return a >= b ? a : b\n    case (.stringValue(let\
    \ a), .stringValue(let b)):\n        return a >= b ? a : b\n    case (.intValue(let\
    \ a), .doubleValue(let b)):\n        return a >= b ? a : b\n    case (.intValue(let\
    \ a), .stringValue(let b)):\n        return a >= b ? a : b\n    case (.doubleValue(let\
    \ a), .intValue(let b)):\n        return a >= b ? a : b\n    case (.doubleValue(let\
    \ a), .stringValue(let b)):\n        return a >= b ? a : b\n    case (.stringValue(let\
    \ a), .intValue(let b)):\n        return a >= b ? a : b\n    case (.stringValue(let\
    \ a), .doubleValue(let b)):\n        return a >= b ? a : b\n    default:\n   \
    \     return nil\n    }", '    return nil', "    var aInt: Int?\n    var aDouble:\
    \ Double?\n    var aString: String?\n    var bInt: Int?\n    var bDouble: Double?\n\
    \    var bString: String?\n    \n    switch a {\n    case .intValue(let x):\n\
    \        aInt = x\n    case .doubleValue(let x):\n        aDouble = x\n    case\
    \ .stringValue(let x):\n        aString = x\n    }\n    \n    switch b {\n   \
    \ case .intValue(let x):\n        bInt = x\n    case .doubleValue(let x):\n  \
    \      bDouble = x\n    case .stringValue(let x):\n        bString = x\n    }\n\
    \    \n    if let aI = aInt, let bI = bInt {\n        if aI == bI {\n        \
    \    return nil\n        } else if aI > bI {\n            return a\n        }\
    \ else {\n            return b\n        }\n    } else if let aD = aDouble, let\
    \ bD = bDouble {\n        if aD == bD {\n            return nil\n        } else\
    \ if aD > bD {\n            return a\n        } else {\n            return b\n\
    \        }\n    } else if let aS = aString, let bS = bString {\n        if aS\
    \ == bS {\n            return nil\n        } else if aS > bS {\n            return\
    \ a\n        } else {\n            return b\n        }\n    } else if let aI =\
    \ aInt, let bD = bDouble {\n        if Double(aI) == bD {\n            return\
    \ nil\n        } else if Double(aI) > bD {\n            return a\n        } else\
    \ {\n            return b\n        }\n    } else if let aI = aInt, let bS = bString\
    \ {\n        if Double(aI) == Double(bS) {\n            return nil\n        }\
    \ else if Double(aI) > Double(bS) {\n            return a\n        } else {\n\
    \            return b\n        }\n    } else if let aD = aDouble, let bI = bInt\
    \ {\n        if aD == Double(bI) {\n            return nil", "    guard let aValue\
    \ = convertToDouble(a), let bValue = convertToDouble(b) else {\n        return\
    \ nil\n    }\n    return aValue < bValue ? b : a"]
stop_tokens:
- "\n}"
