language: swift
name: HumanEval_102_choose_num
results:
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x <= y && x % 2 == 0 {\n\
    \        return x\n    } else if x <= y && x % 2 != 0 {\n        if y % 2 == 0\
    \ {\n            return y\n        } else {\n            return -1\n        }\n\
    \    } else {\n        return -1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\n\
    assert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233)\
    \ == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10)\
    \ == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546)\
    \ == 546)"
  status: Exception
  stderr: 'tmp6qxzdnjo/tmp6qxzdnjo.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b586223dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5861f34b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5861f34988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5861f337b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6qxzdnjo                        0x00005646904de24d <unavailable> + 4685

    5    libc.so.6                          0x00002b5862429460 __libc_start_main +
    245

    6    tmp6qxzdnjo                        0x00005646904ddef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978940
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x > y {\n        return\
    \ -1\n    }\n    if x % 2 == 0 {\n        return x\n    }\n    if x + 1 == y {\n\
    \        return -1\n    }\n    return choose_num(x: x + 1, y: y)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpig84n1sk/tmpig84n1sk.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b87faea0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b87fab97b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b87fab97988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b87fab967b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpig84n1sk                        0x00005596e8b1e24d <unavailable> + 4685

    5    libc.so.6                          0x00002b87fb08c460 __libc_start_main +
    245

    6    tmpig84n1sk                        0x00005596e8b1def9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978940
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    var num = -1\n    var maxnum\
    \ = 0\n    if x == y {\n        if x % 2 == 0 {\n            num = x\n       \
    \ }\n    } else if x > y {\n        maxnum = x\n        for i in y...x {\n   \
    \         if i % 2 == 0 {\n                num = i\n            }\n        }\n\
    \    } else {\n        maxnum = y\n        for i in x...y {\n            if i\
    \ % 2 == 0 {\n                num = i\n            }\n        }\n    }\n    return\
    \ num\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y: 15)\
    \ == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33, y:\
    \ 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpt3gv4py8/tmpt3gv4py8.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1888891c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1888588b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1888588988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b18885877b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt3gv4py8                        0x00005562239503bd <unavailable> + 5053

    5    libc.so.6                          0x00002b1888a7d460 __libc_start_main +
    245

    6    tmpt3gv4py8                        0x000055622394ffe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978940
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    var tmp: Int = -1\n    for\
    \ i in x...y {\n        if i % 2 == 0 {\n            tmp = i\n        }\n    }\n\
    \    return tmp\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12,\
    \ y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002ba8ad4efc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba8ad1e6561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ba8ad1e6286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ba8ad1e613c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ba8ad1e5bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp0gsn9x9e                        0x000055e66a2477f0 <unavailable> + 6128

    6    tmp0gsn9x9e                        0x000055e66a247350 <unavailable> + 4944

    7    libc.so.6                          0x00002ba8ad6db460 __libc_start_main +
    245

    8    tmp0gsn9x9e                        0x000055e66a246fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978940
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x > y {\n        return\
    \ -1\n    }\n    if x % 2 == 0 {\n        return x\n    }\n    if y % 2 == 0 {\n\
    \        return y\n    }\n    if x == y {\n        return -1\n    }\n    return\
    \ x + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y: 15)\
    \ == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33, y:\
    \ 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpfxdey3or/tmpfxdey3or.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae741048c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae740d3fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae740d3f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae740d3e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfxdey3or                        0x0000556a4562d24d <unavailable> + 4685

    5    libc.so.6                          0x00002ae741234460 __libc_start_main +
    245

    6    tmpfxdey3or                        0x0000556a4562cef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978940
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    var num: Int = -1;\n    if\
    \ x % 2 == 0 {\n        num = x;\n    } else {\n        num = x + 1;\n    }\n\
    \    if num > y {\n        return -1;\n    }\n    return num;\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmppv54gpvm/tmppv54gpvm.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6b10d33c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6b10a2ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6b10a2a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6b10a297b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppv54gpvm                        0x00005647d45b424d <unavailable> + 4685

    5    libc.so.6                          0x00002b6b10f1f460 __libc_start_main +
    245

    6    tmppv54gpvm                        0x00005647d45b3ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978940
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if y < x {\n        return\
    \ -1\n    } else if y % 2 == 0 {\n        return y\n    } else {\n        return\
    \ y - 1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12,\
    \ y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmph2tm469e/tmph2tm469e.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba3e5398c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba3e508fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba3e508f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba3e508e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmph2tm469e                        0x000055650f80254d <unavailable> + 5453

    5    libc.so.6                          0x00002ba3e5584460 __libc_start_main +
    245

    6    tmph2tm469e                        0x000055650f801ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978940
- exit_code: 0
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    var start = x\n    var max_even_num\
    \ = -1\n    while start <= y {\n        if start % 2 == 0 {\n            max_even_num\
    \ = start\n        }\n        start += 1\n    }\n    return max_even_num\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978940
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    /// TODO: add your code here\n\
    \    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12,\
    \ y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmp8q0fkyw2/tmp8q0fkyw2.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afe3a6bfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afe3a3b6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afe3a3b6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afe3a3b57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8q0fkyw2                        0x0000557149e161bd <unavailable> + 4541

    5    libc.so.6                          0x00002afe3a8ab460 __libc_start_main +
    245

    6    tmp8q0fkyw2                        0x0000557149e15e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659978940
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    return -1\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpnsqdd4tj/tmpnsqdd4tj.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b16eb55bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b16eb252b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b16eb252988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b16eb2517b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnsqdd4tj                        0x00005586a53f51bd <unavailable> + 4541

    5    libc.so.6                          0x00002b16eb747460 __libc_start_main +
    245

    6    tmpnsqdd4tj                        0x00005586a53f4e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659978940
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if (x == y && x % 2 == 0)\
    \ {\n        return x\n    } else if (x == y) {\n        return -1\n    } else\
    \ if (x < y) {\n        if (x % 2 == 0) {\n            return x\n        } else\
    \ {\n            return choose_num(x: x + 1, y: y)\n        }\n    } else {\n\
    \        if (y % 2 == 0) {\n            return y\n        } else {\n         \
    \   return choose_num(x: x, y: y - 1)\n        }\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmp110z7msr/tmp110z7msr.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3cd9a4cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3cd9743b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3cd9743988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3cd97427b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp110z7msr                        0x00005651a4e5d24d <unavailable> + 4685

    5    libc.so.6                          0x00002b3cd9c38460 __libc_start_main +
    245

    6    tmp110z7msr                        0x00005651a4e5cef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978940
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    var big: Int\n    var bigEven:\
    \ Int = -1\n    if x > y {\n        big = x\n    } else {\n        big = y\n \
    \   }\n    for i in x...big {\n        if i % 2 == 0 {\n            bigEven =\
    \ i\n        }\n    }\n    return bigEven\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12)\
    \ == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x: 5234,\
    \ y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmppdjordfb/tmppdjordfb.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b669caffc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b669c7f6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b669c7f6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b669c7f57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppdjordfb                        0x000055755f5ce4bf <unavailable> + 5311

    5    libc.so.6                          0x00002b669cceb460 __libc_start_main +
    245

    6    tmppdjordfb                        0x000055755f5cdfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978940
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    /// Your code here.\n    var\
    \ result = 0\n    if x%2 == 0 {\n        result = x\n    } else {\n        result\
    \ = x + 1\n    }\n    if result < y {\n        return result\n    } else {\n \
    \       return -1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(choose_num(x:\
    \ 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpyc6_thv8/tmpyc6_thv8.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b608902ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6088d21b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6088d21988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6088d207b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyc6_thv8                        0x0000560eac5e224d <unavailable> + 4685

    5    libc.so.6                          0x00002b6089216460 __libc_start_main +
    245

    6    tmpyc6_thv8                        0x0000560eac5e1ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978940
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if y >= x {\n        if x\
    \ % 2 == 0 {\n            return x\n        } else {\n            return choose_num(x:\
    \ x + 1, y: y)\n        }\n    } else {\n        return -1\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmp29w35vyt/tmp29w35vyt.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b33b458ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b33b4285b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b33b4285988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b33b42847b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp29w35vyt                        0x00005625d0c1024d <unavailable> + 4685

    5    libc.so.6                          0x00002b33b477a460 __libc_start_main +
    245

    6    tmp29w35vyt                        0x00005625d0c0fef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978940
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    // TODO: Complete this function!\n\
    \    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12,\
    \ y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmp_xl_9cui/tmp_xl_9cui.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b567574fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5675446b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5675446988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b56754457b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_xl_9cui                        0x000055b2008d51bd <unavailable> + 4541

    5    libc.so.6                          0x00002b567593b460 __libc_start_main +
    245

    6    tmp_xl_9cui                        0x000055b2008d4e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659978940
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if y % 2 == 0 && y >= x {\n\
    \        return y\n    } else if y % 2 == 1 && x % 2 == 0 && y >= x {\n      \
    \  return x\n    } else if y % 2 == 1 && x % 2 == 1 && y >= x {\n        return\
    \ -1\n    } else if y < x {\n        return -1\n    } else {\n        return choose_num(x:\
    \ x, y: y - 1)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(choose_num(x:\
    \ 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpalfdou7r/tmpalfdou7r.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6cf1737c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6cf142eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6cf142e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6cf142d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpalfdou7r                        0x000055e99530c24d <unavailable> + 4685

    5    libc.so.6                          0x00002b6cf1923460 __libc_start_main +
    245

    6    tmpalfdou7r                        0x000055e99530bef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978940
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x == y {\n        if x\
    \ % 2 == 0 {\n            return x\n        } else {\n            return -1\n\
    \        }\n    } else if x > y {\n        if x % 2 == 0 {\n            return\
    \ x\n        } else {\n            return x - 1\n        }\n    } else {\n   \
    \     if y % 2 == 0 {\n            return y\n        } else {\n            return\
    \ y - 1\n        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(choose_num(x:\
    \ 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpud6cyrmg/tmpud6cyrmg.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abf79f64c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abf79c5bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abf79c5b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abf79c5a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpud6cyrmg                        0x0000560048d0d2cd <unavailable> + 4813

    5    libc.so.6                          0x00002abf7a150460 __libc_start_main +
    245

    6    tmpud6cyrmg                        0x0000560048d0cef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978940
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x > y {\n        return\
    \ -1\n    } else if x % 2 == 0 {\n        return x\n    } else {\n        return\
    \ x + 1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12,\
    \ y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmp8_s9177r/tmp8_s9177r.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b14d7114c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b14d6e0bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b14d6e0b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b14d6e0a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8_s9177r                        0x00005603c154024d <unavailable> + 4685

    5    libc.so.6                          0x00002b14d7300460 __libc_start_main +
    245

    6    tmp8_s9177r                        0x00005603c153fef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978940
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x > y {\n        return\
    \ -1\n    } else if (x % 2 == 0) {\n        return x\n    } else {\n        return\
    \ choose_num(x: x + 1, y: y)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\n\
    assert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233)\
    \ == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10)\
    \ == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546)\
    \ == 546)"
  status: Exception
  stderr: 'tmphe4vfjqs/tmphe4vfjqs.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b605a4cec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b605a1c5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b605a1c5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b605a1c47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphe4vfjqs                        0x0000563ace72c24d <unavailable> + 4685

    5    libc.so.6                          0x00002b605a6ba460 __libc_start_main +
    245

    6    tmphe4vfjqs                        0x0000563ace72bef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978940
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x % 2 == 0 && y % 2 ==\
    \ 0 {\n        return y\n    } else if x % 2 == 0 && y % 2 != 0 {\n        return\
    \ x\n    } else if x % 2 != 0 && y % 2 == 0 {\n        return y\n    } else {\n\
    \        return -1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(choose_num(x:\
    \ 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmppuveoudg/tmppuveoudg.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b874c771c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b874c468b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b874c468988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b874c4677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppuveoudg                        0x00005575e537324d <unavailable> + 4685

    5    libc.so.6                          0x00002b874c95d460 __libc_start_main +
    245

    6    tmppuveoudg                        0x00005575e5372ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978940
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    var choose_num = y\n    if\
    \ y%2 != 0 {\n        choose_num -= 1\n    }\n    if y < x {\n        return -1\n\
    \    }\n    else {\n        return choose_num\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x: 13,\
    \ y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpjf7k9lt1/tmpjf7k9lt1.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b593c032c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b593bd29b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b593bd29988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b593bd287b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjf7k9lt1                        0x000055d7d0c5a54d <unavailable> + 5453

    5    libc.so.6                          0x00002b593c21e460 __libc_start_main +
    245

    6    tmpjf7k9lt1                        0x000055d7d0c59ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978940
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    var num = 0\n    if x == y\
    \ && y % 2 == 0 {\n        num = x\n    } else if x % 2 == 0 && y % 2 == 0 {\n\
    \        num = y\n    } else if x % 2 == 0 && y % 2 != 0 {\n        num = x\n\
    \    } else if x % 2 != 0 && y % 2 == 0 {\n        num = y\n    } else if x %\
    \ 2 != 0 && y % 2 != 0 {\n        num = -1\n    }\n    return num\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpaiizplz_/tmpaiizplz_.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b98fb60cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b98fb303b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b98fb303988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b98fb3027b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpaiizplz_                        0x0000560323a6f24d <unavailable> + 4685

    5    libc.so.6                          0x00002b98fb7f8460 __libc_start_main +
    245

    6    tmpaiizplz_                        0x0000560323a6eef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978940
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if (x % 2 == 0) {\n      \
    \  return x\n    } else if (y % 2 == 0) {\n        return y\n    } else {\n  \
    \      return -1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(choose_num(x:\
    \ 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmp1dfayr5k/tmp1dfayr5k.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aec58372c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aec58069b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aec58069988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aec580687b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1dfayr5k                        0x000055fe57c7a24d <unavailable> + 4685

    5    libc.so.6                          0x00002aec5855e460 __libc_start_main +
    245

    6    tmp1dfayr5k                        0x000055fe57c79ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978940
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    var biggest = -1\n    for\
    \ num in x...y {\n        if num % 2 == 0 {\n            biggest = num\n     \
    \   }\n    }\n    return biggest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(choose_num(x:\
    \ 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002adf897dec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adf894d5561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002adf894d5286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002adf894d513c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002adf894d4bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmprl8jcdxs                        0x000055e5a6d777f0 <unavailable> + 6128

    6    tmprl8jcdxs                        0x000055e5a6d77350 <unavailable> + 4944

    7    libc.so.6                          0x00002adf899ca460 __libc_start_main +
    245

    8    tmprl8jcdxs                        0x000055e5a6d76fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978940
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x == y {\n        if x\
    \ % 2 == 0 {\n            return x\n        } else {\n            return -1\n\
    \        }\n    }\n    let range = x...y\n    for i in range {\n        if i %\
    \ 2 == 0 {\n            return i\n        }\n    }\n    return -1\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpllqxvnhd/tmpllqxvnhd.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac2df93fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac2df636b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac2df636988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac2df6357b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpllqxvnhd                        0x0000558a4997a33d <unavailable> + 4925

    5    libc.so.6                          0x00002ac2dfb2b460 __libc_start_main +
    245

    6    tmpllqxvnhd                        0x0000558a49979fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978940
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    let l = min(x, y)\n    let\
    \ h = max(x, y)\n    var result = -1\n    for i in l...h {\n        if i % 2 ==\
    \ 0 {\n            result = i\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpxq3d07el/tmpxq3d07el.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ace0b6acc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ace0b3a3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ace0b3a3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ace0b3a27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxq3d07el                        0x000055c2fc8c34ad <unavailable> + 5293

    5    libc.so.6                          0x00002ace0b898460 __libc_start_main +
    245

    6    tmpxq3d07el                        0x000055c2fc8c30d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659978940
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x <= y {\n        if x\
    \ % 2 == 0 {\n            return x\n        } else {\n            return x + 1\n\
    \        }\n    } else {\n        return -1\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x: 13,\
    \ y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpm0gg_sad/tmpm0gg_sad.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acb0a990c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acb0a687b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acb0a687988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acb0a6867b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpm0gg_sad                        0x0000557540c3924d <unavailable> + 4685

    5    libc.so.6                          0x00002acb0ab7c460 __libc_start_main +
    245

    6    tmpm0gg_sad                        0x0000557540c38ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978940
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n\t// Write your code here\n\t\
    if x == y {\n\t\tif x % 2 == 0 {\n\t\t\treturn x\n\t\t} else {\n\t\t\treturn -1\n\
    \t\t}\n\t} else if x > y {\n\t\tif y % 2 == 0 {\n\t\t\treturn y\n\t\t} else {\n\
    \t\t\treturn choose_num(x: x, y: y - 1)\n\t\t}\n\t} else {\n\t\tif x % 2 == 0\
    \ {\n\t\t\treturn x\n\t\t} else {\n\t\t\treturn choose_num(x: x + 1, y: y)\n\t\
    \t}\n\t}\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y:\
    \ 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33,\
    \ y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmp76sfs6n_/tmp76sfs6n_.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2cbe9b3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2cbe6aab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2cbe6aa988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2cbe6a97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp76sfs6n_                        0x00005579b92d424d <unavailable> + 4685

    5    libc.so.6                          0x00002b2cbeb9f460 __libc_start_main +
    245

    6    tmp76sfs6n_                        0x00005579b92d3ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978940
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    let range = x...y\n    let\
    \ evenNumbers = range.filter{ $0 % 2 == 0 }\n    let maxEven = evenNumbers.max()\
    \ ?? -1\n    return maxEven\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(choose_num(x:\
    \ 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b9c2ea11c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9c2e708561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b9c2e708286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b9c2e70813c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b9c2e707bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmppcvfd8h9                        0x000055b8769d990a <unavailable> + 6410

    6    tmppcvfd8h9                        0x000055b8769d9430 <unavailable> + 5168

    7    libc.so.6                          0x00002b9c2ebfd460 __libc_start_main +
    245

    8    tmppcvfd8h9                        0x000055b8769d90c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1659978940
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n  // TODO: Write some code to\
    \ solve this coding challenge\n  return 0\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12)\
    \ == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x: 5234,\
    \ y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpwi9d1d63/tmpwi9d1d63.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad48cc07c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad48c8feb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad48c8fe988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad48c8fd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwi9d1d63                        0x000055c5087231bd <unavailable> + 4541

    5    libc.so.6                          0x00002ad48cdf3460 __libc_start_main +
    245

    6    tmpwi9d1d63                        0x000055c508722e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659978940
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    var num = -1\n    for i in\
    \ x...y {\n        if i % 2 == 0 {\n            num = i\n        }\n    }\n  \
    \  return num\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12,\
    \ y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002ba0c16acc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba0c13a3561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ba0c13a3286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ba0c13a313c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ba0c13a2bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpw9aayf6w                        0x000055adee0eb7f0 <unavailable> + 6128

    6    tmpw9aayf6w                        0x000055adee0eb350 <unavailable> + 4944

    7    libc.so.6                          0x00002ba0c1898460 __libc_start_main +
    245

    8    tmpw9aayf6w                        0x000055adee0eafe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978940
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x < 2 || y < 2 {\n    \
    \    return -1\n    }\n    if x > y {\n        return -1\n    }\n    if x % 2\
    \ == 0 {\n        return x\n    }\n    if x % 2 == 1 {\n        return x + 1\n\
    \    }\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(choose_num(x:\
    \ 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpve6roy8a/tmpve6roy8a.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b629c61cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b629c313b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b629c313988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b629c3127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpve6roy8a                        0x0000559b7775224d <unavailable> + 4685

    5    libc.so.6                          0x00002b629c808460 __libc_start_main +
    245

    6    tmpve6roy8a                        0x0000559b77751ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978940
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    return -1\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpnsqdd4tj/tmpnsqdd4tj.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b16eb55bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b16eb252b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b16eb252988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b16eb2517b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnsqdd4tj                        0x00005586a53f51bd <unavailable> + 4541

    5    libc.so.6                          0x00002b16eb747460 __libc_start_main +
    245

    6    tmpnsqdd4tj                        0x00005586a53f4e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659978940
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if y < x {\n        return\
    \ -1\n    } else if x % 2 == 0 {\n        return x\n    } else {\n        return\
    \ x + 1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12,\
    \ y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmph3voq4wv/tmph3voq4wv.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7a075b3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7a072aab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7a072aa988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7a072a97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmph3voq4wv                        0x000055664c86224d <unavailable> + 4685

    5    libc.so.6                          0x00002b7a0779f460 __libc_start_main +
    245

    6    tmph3voq4wv                        0x000055664c861ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978940
- exit_code: 0
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    var ans = -1\n    var start\
    \ = x\n    if x % 2 == 1 {\n        start += 1\n    }\n    while start <= y {\n\
    \        ans = start\n        start += 2\n    }\n    return ans\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978940
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    let start = x < y ? x : y\n\
    \    let end = x < y ? y : x\n    var max_num = -1\n    for num in start...end\
    \ {\n        if (num & 1) == 0 {\n            max_num = num\n        }\n    }\n\
    \    return max_num\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12,\
    \ y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpd8rnr0tp/tmpd8rnr0tp.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad0c9c11c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad0c9908b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad0c9908988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad0c99077b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd8rnr0tp                        0x000055eb9a0323bd <unavailable> + 5053

    5    libc.so.6                          0x00002ad0c9dfd460 __libc_start_main +
    245

    6    tmpd8rnr0tp                        0x000055eb9a031fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978940
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x > y {\n        return\
    \ -1\n    } else if x % 2 == 0 {\n        return x\n    } else {\n        return\
    \ x + 1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12,\
    \ y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmp8_s9177r/tmp8_s9177r.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b14d7114c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b14d6e0bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b14d6e0b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b14d6e0a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8_s9177r                        0x00005603c154024d <unavailable> + 4685

    5    libc.so.6                          0x00002b14d7300460 __libc_start_main +
    245

    6    tmp8_s9177r                        0x00005603c153fef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978940
- exit_code: 0
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n\tvar result = -1\n\tif x > y\
    \ {\n\t\treturn result\n\t}\n\tfor i in x...y {\n\t\tif i % 2 == 0 {\n\t\t\tresult\
    \ = i\n\t\t}\n\t}\n\treturn result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\n\
    assert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233)\
    \ == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10)\
    \ == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546)\
    \ == 546)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978940
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x % 2 == 0 && y % 2 ==\
    \ 0 {\n        return x > y ? x : y\n    } else if x % 2 == 0 && y % 2 != 0 {\n\
    \        return x\n    } else if x % 2 != 0 && y % 2 == 0 {\n        return y\n\
    \    } else {\n        return -1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\n\
    assert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233)\
    \ == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10)\
    \ == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546)\
    \ == 546)"
  status: Exception
  stderr: 'tmpkw3x87rs/tmpkw3x87rs.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b019545ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0195151b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0195151988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b01951507b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkw3x87rs                        0x000055f73b6fc24d <unavailable> + 4685

    5    libc.so.6                          0x00002b0195646460 __libc_start_main +
    245

    6    tmpkw3x87rs                        0x000055f73b6fbef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978940
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    var x: Int = x\n    var y:\
    \ Int = y\n    if x > y {\n        x = y\n        y = x\n    }\n    if x % 2 ==\
    \ 0 {\n        return x\n    } else {\n        for i in (x + 1)...y {\n      \
    \      if i % 2 == 0 {\n                return i\n            }\n        }\n \
    \   }\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(choose_num(x:\
    \ 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmps_almc84/tmps_almc84.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d530afc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d52da6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d52da6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d52da57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps_almc84                        0x00005644771ae33d <unavailable> + 4925

    5    libc.so.6                          0x00002b6d5329b460 __libc_start_main +
    245

    6    tmps_almc84                        0x00005644771adfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978940
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x > y {\n        return\
    \ -1\n    }\n    if x % 2 == 0 {\n        return x\n    }\n    if y % 2 == 0 {\n\
    \        return y\n    }\n    if x + 1 < y {\n        return x + 1\n    }\n  \
    \  return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12,\
    \ y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmp6wsv3tmi/tmp6wsv3tmi.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b467ca6bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b467c762b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b467c762988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b467c7617b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6wsv3tmi                        0x00005609cfc2d24d <unavailable> + 4685

    5    libc.so.6                          0x00002b467cc57460 __libc_start_main +
    245

    6    tmp6wsv3tmi                        0x00005609cfc2cef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978940
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    return -1\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpnsqdd4tj/tmpnsqdd4tj.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b16eb55bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b16eb252b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b16eb252988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b16eb2517b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnsqdd4tj                        0x00005586a53f51bd <unavailable> + 4541

    5    libc.so.6                          0x00002b16eb747460 __libc_start_main +
    245

    6    tmpnsqdd4tj                        0x00005586a53f4e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659978940
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x > y {\n        return\
    \ -1\n    }\n    else if x % 2 == 0 {\n        return x\n    }\n    else {\n \
    \       return x + 1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(choose_num(x:\
    \ 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmphc5o68xl/tmphc5o68xl.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b93cbb89c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b93cb880b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b93cb880988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b93cb87f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphc5o68xl                        0x000055d7b3a4e24d <unavailable> + 4685

    5    libc.so.6                          0x00002b93cbd75460 __libc_start_main +
    245

    6    tmphc5o68xl                        0x000055d7b3a4def9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978940
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    var big = -1\n    for z in\
    \ x...y {\n        if z % 2 == 0 && z > big {\n            big = z\n        }\n\
    \    }\n    return big\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(choose_num(x:\
    \ 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002abf1eabbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abf1e7b2561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abf1e7b2286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abf1e7b213c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abf1e7b1bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpqdwmztl4                        0x00005644560d47f0 <unavailable> + 6128

    6    tmpqdwmztl4                        0x00005644560d4350 <unavailable> + 4944

    7    libc.so.6                          0x00002abf1eca7460 __libc_start_main +
    245

    8    tmpqdwmztl4                        0x00005644560d3fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978940
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    var biggest_even = -1\n  \
    \  var x = x\n    var y = y\n    // swap x and y if x is larger than y\n    if\
    \ x > y {\n        x = y\n        y = x\n    }\n    // iterate from x to y\n \
    \   for i in x...y {\n        // if the number is even and it's larger than biggest_even,\
    \ then update biggest_even\n        if i % 2 == 0 && i > biggest_even {\n    \
    \        biggest_even = i\n        }\n    }\n    return biggest_even\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmp2e4nj7hl/tmp2e4nj7hl.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9f6c0e8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9f6bddfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9f6bddf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9f6bdde7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2e4nj7hl                        0x0000564b3163d3bd <unavailable> + 5053

    5    libc.so.6                          0x00002b9f6c2d4460 __libc_start_main +
    245

    6    tmp2e4nj7hl                        0x0000564b3163cfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978940
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    let low = min(x, y)\n    let\
    \ high = max(x, y)\n    let odd = (low % 2 == 1)\n    if odd {\n        return\
    \ (low + 1)..<high ~= low + 1 ? low + 1 : -1\n    } else {\n        return low..<high\
    \ ~= low ? low : -1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(choose_num(x:\
    \ 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmp96ad525f/tmp96ad525f.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b893ce67c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b893cb5eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b893cb5e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b893cb5d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp96ad525f                        0x000055b5571c83dd <unavailable> + 5085

    5    libc.so.6                          0x00002b893d053460 __libc_start_main +
    245

    6    tmp96ad525f                        0x000055b5571c8089 <unavailable> + 4233

    '
  stdout: ''
  timestamp: 1659978940
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    var num = -1\n    var tmp:\
    \ Int\n    if y > x {\n        tmp = x\n    } else {\n        tmp = y\n    }\n\
    \    for tmp in x...y {\n        if tmp % 2 == 0 {\n            num = tmp\n  \
    \      }\n    }\n    return num\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(choose_num(x:\
    \ 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b33985a6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b339829d561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b339829d286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b339829d13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b339829cbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpi2ds6hxu                        0x0000561d3b5a1817 <unavailable> + 6167

    6    tmpi2ds6hxu                        0x0000561d3b5a1350 <unavailable> + 4944

    7    libc.so.6                          0x00002b3398792460 __libc_start_main +
    245

    8    tmpi2ds6hxu                        0x0000561d3b5a0fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978940
- exit_code: 0
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n  if x < 0 || y < 0 {\n    return\
    \ -1\n  }\n  for i in stride(from: y, through: x, by: -1) {\n    if i % 2 == 0\
    \ {\n      return i\n    }\n  }\n  return -1\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12)\
    \ == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x: 5234,\
    \ y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978940
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    var low_num = min(x, y)\n\
    \    var high_num = max(x, y)\n    if(low_num % 2 == 1) {\n        low_num +=\
    \ 1\n    }\n    if(low_num > high_num) {\n        return -1\n    }\n    return\
    \ high_num\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y:\
    \ 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33,\
    \ y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpqu7khugu/tmpqu7khugu.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b34a0435c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b34a012cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b34a012c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b34a012b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqu7khugu                        0x0000564b1edfa33d <unavailable> + 4925

    5    libc.so.6                          0x00002b34a0621460 __libc_start_main +
    245

    6    tmpqu7khugu                        0x0000564b1edf9fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978940
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    var r = -1\n    if x % 2 ==\
    \ 0 && x <= y {\n        r = x\n    } else if x + 1 <= y {\n        r = x + 1\n\
    \    }\n    return r\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(choose_num(x:\
    \ 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpr66inqox/tmpr66inqox.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b494c4c0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b494c1b7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b494c1b7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b494c1b67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr66inqox                        0x00005578b499324d <unavailable> + 4685

    5    libc.so.6                          0x00002b494c6ac460 __libc_start_main +
    245

    6    tmpr66inqox                        0x00005578b4992ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978940
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    let range = Array(x...y)\n\
    \    return range.first(where: { $0 % 2 == 0 }) ?? -1\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x: 13,\
    \ y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpu61pglkz/tmpu61pglkz.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad1931adc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad192ea4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad192ea4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad192ea37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu61pglkz                        0x0000559a3d9643ed <unavailable> + 5101

    5    libc.so.6                          0x00002ad193399460 __libc_start_main +
    245

    6    tmpu61pglkz                        0x0000559a3d964099 <unavailable> + 4249

    '
  stdout: ''
  timestamp: 1659978940
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x%2 == 0 {\n        if\
    \ x <= y {\n            return x\n        }\n    }\n    return -1\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmp_3l9_ux3/tmp_3l9_ux3.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aabb5f4bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aabb5c42b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aabb5c42988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aabb5c417b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_3l9_ux3                        0x000055fe77e4b24d <unavailable> + 4685

    5    libc.so.6                          0x00002aabb6137460 __libc_start_main +
    245

    6    tmp_3l9_ux3                        0x000055fe77e4aef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978940
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    var biggest = -1\n    for\
    \ i in x...y {\n        if i % 2 == 0 {\n            biggest = i\n        }\n\
    \    }\n    return biggest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(choose_num(x:\
    \ 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b7663522c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7663219561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b7663219286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b766321913c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b7663218bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpl3myhx9m                        0x0000560a160757f0 <unavailable> + 6128

    6    tmpl3myhx9m                        0x0000560a16075350 <unavailable> + 4944

    7    libc.so.6                          0x00002b766370e460 __libc_start_main +
    245

    8    tmpl3myhx9m                        0x0000560a16074fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978940
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x > y {\n        return\
    \ -1\n    }\n    if x % 2 == 0 {\n        return x\n    }\n    if x + 1 == y {\n\
    \        return -1\n    }\n    return choose_num(x: x + 1, y: y)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpig84n1sk/tmpig84n1sk.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b87faea0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b87fab97b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b87fab97988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b87fab967b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpig84n1sk                        0x00005596e8b1e24d <unavailable> + 4685

    5    libc.so.6                          0x00002b87fb08c460 __libc_start_main +
    245

    6    tmpig84n1sk                        0x00005596e8b1def9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978940
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    // FIXME: Write implementation\
    \ here\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(choose_num(x:\
    \ 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpqpjzyjty/tmpqpjzyjty.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b42c7bd1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b42c78c8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b42c78c8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b42c78c77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqpjzyjty                        0x000055f3ba3d91bd <unavailable> + 4541

    5    libc.so.6                          0x00002b42c7dbd460 __libc_start_main +
    245

    6    tmpqpjzyjty                        0x000055f3ba3d8e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659978940
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    var number = x\n    if number\
    \ > y{\n        return -1\n    }\n    for i in x...y{\n        if i % 2 == 0{\n\
    \            number = i\n        }\n    }\n    return number\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpelkn5q8e/tmpelkn5q8e.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b31c4e5ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b31c4b51b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b31c4b51988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b31c4b507b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpelkn5q8e                        0x000055fdc2f8163d <unavailable> + 5693

    5    libc.so.6                          0x00002b31c5046460 __libc_start_main +
    245

    6    tmpelkn5q8e                        0x000055fdc2f80fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978941
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    let max = x > y ? x : y\n\
    \    let min = x < y ? x : y\n    for num in min...max {\n        if num % 2 ==\
    \ 0 {\n            return num\n        }\n    }\n    return -1\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpc5z7l0lj/tmpc5z7l0lj.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af9d8c33c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af9d892ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af9d892a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af9d89297b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc5z7l0lj                        0x0000561e5ab6033d <unavailable> + 4925

    5    libc.so.6                          0x00002af9d8e1f460 __libc_start_main +
    245

    6    tmpc5z7l0lj                        0x0000561e5ab5ffe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978941
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x > y {\n        return\
    \ -1\n    }\n    for i in stride(from: y, through: x, by: -2) {\n        return\
    \ i\n    }\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(choose_num(x:\
    \ 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmph4cpe4xv/tmph4cpe4xv.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b16e324bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b16e2f42b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b16e2f42988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b16e2f417b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmph4cpe4xv                        0x00005565273ee3ed <unavailable> + 5101

    5    libc.so.6                          0x00002b16e3437460 __libc_start_main +
    245

    6    tmph4cpe4xv                        0x00005565273ee099 <unavailable> + 4249

    '
  stdout: ''
  timestamp: 1659978941
- exit_code: 0
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n\t\n\tvar result = -1\n\n\tif\
    \ x <= y {\n\t\tfor i in x...y {\n\t\t\tif i % 2 == 0 {\n\t\t\t\tresult = i\n\t\
    \t\t}\n\t\t}\n\t}\n\n\treturn result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\n\
    assert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233)\
    \ == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10)\
    \ == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546)\
    \ == 546)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978940
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    var even = -1\n    if x <=\
    \ y {\n        if x % 2 == 0 {\n            even = x\n        } else {\n     \
    \       even = x + 1\n        }\n    }\n    return even\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpdmcpw8at/tmpdmcpw8at.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6e20a7dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6e20774b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6e20774988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6e207737b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdmcpw8at                        0x0000559af61f524d <unavailable> + 4685

    5    libc.so.6                          0x00002b6e20c69460 __libc_start_main +
    245

    6    tmpdmcpw8at                        0x0000559af61f4ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978941
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x % 2 == 0 {\n        return\
    \ x\n    } else if x % 2 != 0 && x != y {\n        return choose_num(x: x + 1,\
    \ y: y)\n    } else {\n        return -1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12)\
    \ == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x: 5234,\
    \ y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmp47kjrz3j/tmp47kjrz3j.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b56a6517c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b56a620eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b56a620e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b56a620d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp47kjrz3j                        0x00005646783d924d <unavailable> + 4685

    5    libc.so.6                          0x00002b56a6703460 __libc_start_main +
    245

    6    tmp47kjrz3j                        0x00005646783d8ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978941
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    // YOUR CODE GOES HERE\n \
    \   var max: Int = 0;\n    if (x < y) {\n        max = y;\n    } else {\n    \
    \    max = x;\n    }\n    if (max % 2 == 0) {\n        return max;\n    } else\
    \ {\n        return -1;\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(choose_num(x:\
    \ 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpnazkif5q/tmpnazkif5q.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b638839ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6388095b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6388095988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b63880947b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnazkif5q                        0x000055aab951324d <unavailable> + 4685

    5    libc.so.6                          0x00002b638858a460 __libc_start_main +
    245

    6    tmpnazkif5q                        0x000055aab9512ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978941
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    for i\
    \ in x...y {\n        if i % 2 == 0 {\n            result = i\n        }\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(choose_num(x:\
    \ 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b1240ae6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b12407dd561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b12407dd286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b12407dd13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b12407dcbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp56w7lgfp                        0x0000557b2cde47f0 <unavailable> + 6128

    6    tmp56w7lgfp                        0x0000557b2cde4350 <unavailable> + 4944

    7    libc.so.6                          0x00002b1240cd2460 __libc_start_main +
    245

    8    tmp56w7lgfp                        0x0000557b2cde3fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978941
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    return x < y ? x + y - 1 :\
    \ -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\n\
    assert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) ==\
    \ 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x: 6,\
    \ y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmps3q9od5h/tmps3q9od5h.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abb98ffdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abb98cf4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abb98cf4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abb98cf37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps3q9od5h                        0x000055c8f38951bd <unavailable> + 4541

    5    libc.so.6                          0x00002abb991e9460 __libc_start_main +
    245

    6    tmps3q9od5h                        0x000055c8f3894e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659978941
- exit_code: 0
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x > y {\n        return\
    \ -1\n    } else if x == y {\n        if x % 2 == 0 {\n            return x\n\
    \        } else {\n            return -1\n        }\n    } else {\n        let\
    \ biggerNum = max(x, y)\n        if biggerNum % 2 == 0 {\n            return biggerNum\n\
    \        } else {\n            return biggerNum - 1\n        }\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978941
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n  return -1\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpnv9bba6x/tmpnv9bba6x.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7826b02c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b78267f9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b78267f9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b78267f87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnv9bba6x                        0x000055a0c70601bd <unavailable> + 4541

    5    libc.so.6                          0x00002b7826cee460 __libc_start_main +
    245

    6    tmpnv9bba6x                        0x000055a0c705fe69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659978941
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x % 2 == 0 {\n        return\
    \ x\n    } else if x + 1 <= y {\n        return x + 1\n    } else {\n        return\
    \ -1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y:\
    \ 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33,\
    \ y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpw9j9n939/tmpw9j9n939.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7d79689c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7d79380b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7d79380988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7d7937f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw9j9n939                        0x000055d003aa524d <unavailable> + 4685

    5    libc.so.6                          0x00002b7d79875460 __libc_start_main +
    245

    6    tmpw9j9n939                        0x000055d003aa4ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978941
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    let num = max(x, y)\n    if\
    \ num % 2 == 0 {\n        return num\n    } else {\n        return num - 1\n \
    \   }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y: 15)\
    \ == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33, y:\
    \ 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpa6mf64qy/tmpa6mf64qy.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acd9ede0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acd9ead7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acd9ead7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acd9ead67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpa6mf64qy                        0x000056178110735d <unavailable> + 4957

    5    libc.so.6                          0x00002acd9efcc460 __libc_start_main +
    245

    6    tmpa6mf64qy                        0x0000561781106f89 <unavailable> + 3977

    '
  stdout: ''
  timestamp: 1659978941
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n  return -1\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpnv9bba6x/tmpnv9bba6x.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7826b02c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b78267f9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b78267f9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b78267f87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnv9bba6x                        0x000055a0c70601bd <unavailable> + 4541

    5    libc.so.6                          0x00002b7826cee460 __libc_start_main +
    245

    6    tmpnv9bba6x                        0x000055a0c705fe69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659978941
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    let m = min(x, y)\n    let\
    \ n = max(x, y)\n    if m % 2 == 0 {\n        return m\n    } else {\n       \
    \ return m + 1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(choose_num(x:\
    \ 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpdsr77310/tmpdsr77310.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7881204c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7880efbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7880efb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7880efa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdsr77310                        0x0000559fe7be933d <unavailable> + 4925

    5    libc.so.6                          0x00002b78813f0460 __libc_start_main +
    245

    6    tmpdsr77310                        0x0000559fe7be8fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978941
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    var bigger_number = max(x,\
    \ y)\n    if bigger_number % 2 == 1 {\n        bigger_number -= 1\n    }\n   \
    \ if bigger_number < x {\n        return -1\n    }\n    return bigger_number\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpwmesryt1/tmpwmesryt1.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1a7cc83c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1a7c97ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1a7c97a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1a7c9797b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwmesryt1                        0x000055cbc19f845f <unavailable> + 5215

    5    libc.so.6                          0x00002b1a7ce6f460 __libc_start_main +
    245

    6    tmpwmesryt1                        0x000055cbc19f7f89 <unavailable> + 3977

    '
  stdout: ''
  timestamp: 1659978941
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x > y {\n        return\
    \ -1\n    }\n    if x % 2 == 0 {\n        return x\n    }\n    else {\n      \
    \  return x + 1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(choose_num(x:\
    \ 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmp2c0500fa/tmp2c0500fa.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b34715c7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b34712beb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b34712be988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b34712bd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2c0500fa                        0x00005631961b424d <unavailable> + 4685

    5    libc.so.6                          0x00002b34717b3460 __libc_start_main +
    245

    6    tmp2c0500fa                        0x00005631961b3ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978941
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    return x%2 == 0 ? x : choose_num(x:\
    \ x+1, y: y)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12,\
    \ y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmp69xmy5le/tmp69xmy5le.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1d83ce3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1d839dab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1d839da988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1d839d97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp69xmy5le                        0x00005635cd7e124d <unavailable> + 4685

    5    libc.so.6                          0x00002b1d83ecf460 __libc_start_main +
    245

    6    tmp69xmy5le                        0x00005635cd7e0ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978941
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n\tif x % 2 == 0 {\n\t\tif x <=\
    \ y {\n\t\t\treturn x\n\t\t}\n\t}\n\tif x % 2 == 1 {\n\t\tif x+1 <= y {\n\t\t\t\
    return x+1\n\t\t}\n\t}\n\treturn -1\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\n\
    assert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233)\
    \ == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10)\
    \ == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546)\
    \ == 546)"
  status: Exception
  stderr: 'tmp3q4x38zn/tmp3q4x38zn.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af4164f1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af4161e8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af4161e8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af4161e77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3q4x38zn                        0x0000556c1509124d <unavailable> + 4685

    5    libc.so.6                          0x00002af4166dd460 __libc_start_main +
    245

    6    tmp3q4x38zn                        0x0000556c15090ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978941
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    var max = 0\n    if x % 2\
    \ == 0 {\n        max = x\n    } else {\n        max = x + 1\n    }\n    if y\
    \ % 2 == 0 {\n        if max < y {\n            max = y\n        }\n    } else\
    \ {\n        if max < y - 1 {\n            max = y - 1\n        }\n    }\n   \
    \ if max < x {\n        return -1\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpohvjl5a6/tmpohvjl5a6.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d1ea91c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d1e788b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d1e788988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d1e7877b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpohvjl5a6                        0x00005562b0b0e2cd <unavailable> + 4813

    5    libc.so.6                          0x00002b6d1ec7d460 __libc_start_main +
    245

    6    tmpohvjl5a6                        0x00005562b0b0def9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978941
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x > y {\n        return\
    \ -1\n    } else if x % 2 == 0 {\n        return x\n    } else {\n        return\
    \ x + 1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12,\
    \ y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmp8_s9177r/tmp8_s9177r.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b14d7114c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b14d6e0bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b14d6e0b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b14d6e0a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8_s9177r                        0x00005603c154024d <unavailable> + 4685

    5    libc.so.6                          0x00002b14d7300460 __libc_start_main +
    245

    6    tmp8_s9177r                        0x00005603c153fef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978940
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x%2 == 0 {\n        if\
    \ x > y {\n            return -1\n        }\n        return x\n    }\n    if x+1\
    \ > y {\n        return -1\n    }\n    return x+1\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x: 13,\
    \ y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpxkhcy9zk/tmpxkhcy9zk.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab1419acc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab1416a3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab1416a3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab1416a27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxkhcy9zk                        0x000055c7b105024d <unavailable> + 4685

    5    libc.so.6                          0x00002ab141b98460 __libc_start_main +
    245

    6    tmpxkhcy9zk                        0x000055c7b104fef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978941
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    for i in x...y {\n       \
    \ if i % 2 == 0 {\n            return i\n        }\n    }\n    return -1\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmp1qxcnmkf/tmp1qxcnmkf.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5129f39c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5129c30b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5129c30988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5129c2f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1qxcnmkf                        0x00005564867ac33d <unavailable> + 4925

    5    libc.so.6                          0x00002b512a125460 __libc_start_main +
    245

    6    tmp1qxcnmkf                        0x00005564867abfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978941
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    // TODO: Please write your\
    \ code here\n    var num = 0;\n    if (x%2 == 0){\n        num = x;\n    }\n \
    \   else{\n        num = x + 1;\n    }\n    if (num > y){\n        return -1;\n\
    \    }\n    return num;\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(choose_num(x:\
    \ 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmptcb7qdp4/tmptcb7qdp4.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b04505dac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b04502d1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b04502d1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b04502d07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptcb7qdp4                        0x00005559381c324d <unavailable> + 4685

    5    libc.so.6                          0x00002b04507c6460 __libc_start_main +
    245

    6    tmptcb7qdp4                        0x00005559381c2ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978941
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x <= y && x % 2 == 0 {\n\
    \        return x\n    } else if y % 2 == 0 {\n        return y\n    } else {\n\
    \        return -1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(choose_num(x:\
    \ 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpyulbculk/tmpyulbculk.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab455d8fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab455a86b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab455a86988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab455a857b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyulbculk                        0x000055e670f1924d <unavailable> + 4685

    5    libc.so.6                          0x00002ab455f7b460 __libc_start_main +
    245

    6    tmpyulbculk                        0x000055e670f18ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978941
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    // Your code here\n    return\
    \ -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\n\
    assert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) ==\
    \ 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x: 6,\
    \ y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmp1g_m5pzb/tmp1g_m5pzb.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac3cc9dcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac3cc6d3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac3cc6d3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac3cc6d27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1g_m5pzb                        0x0000559e2ffe01bd <unavailable> + 4541

    5    libc.so.6                          0x00002ac3ccbc8460 __libc_start_main +
    245

    6    tmp1g_m5pzb                        0x0000559e2ffdfe69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659978941
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x > y {\n        return\
    \ -1\n    }\n    else if x % 2 == 0 {\n        return x\n    }\n    else {\n \
    \       return x + 1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(choose_num(x:\
    \ 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmphc5o68xl/tmphc5o68xl.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b93cbb89c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b93cb880b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b93cb880988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b93cb87f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphc5o68xl                        0x000055d7b3a4e24d <unavailable> + 4685

    5    libc.so.6                          0x00002b93cbd75460 __libc_start_main +
    245

    6    tmphc5o68xl                        0x000055d7b3a4def9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978940
- exit_code: 0
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    var i = y\n    while i >=\
    \ x {\n        if i % 2 == 0 {\n            return i\n        }\n        i -=\
    \ 1\n    }\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(choose_num(x:\
    \ 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978941
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if (x > y) {\n        return\
    \ -1\n    }\n    let num = x % 2 == 0 ? x : x + 1\n    return num > y ? -1 : num\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmp89x77s8d/tmp89x77s8d.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae7fa607c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae7fa2feb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae7fa2fe988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae7fa2fd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp89x77s8d                        0x000055a54b4ad24d <unavailable> + 4685

    5    libc.so.6                          0x00002ae7fa7f3460 __libc_start_main +
    245

    6    tmp89x77s8d                        0x000055a54b4acef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978941
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n\tif (x > y) {\n\t\treturn -1\n\
    \t}\n\tif (x % 2 == 0) {\n\t\treturn x\n\t}\n\treturn choose_num(x: x + 1, y:\
    \ y)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\n\
    assert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) ==\
    \ 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x: 6,\
    \ y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpx90a71ak/tmpx90a71ak.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b93d532dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b93d5024b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b93d5024988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b93d50237b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx90a71ak                        0x0000562805fa324d <unavailable> + 4685

    5    libc.so.6                          0x00002b93d5519460 __libc_start_main +
    245

    6    tmpx90a71ak                        0x0000562805fa2ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978941
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    // To be implemented.\n  \
    \  return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12,\
    \ y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpomnm8dwx/tmpomnm8dwx.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adc92355c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adc9204cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adc9204c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adc9204b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpomnm8dwx                        0x0000562a94c621bd <unavailable> + 4541

    5    libc.so.6                          0x00002adc92541460 __libc_start_main +
    245

    6    tmpomnm8dwx                        0x0000562a94c61e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659978941
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    if x\
    \ % 2 == 0 && y % 2 == 0 {\n        if x >= y {\n            result = x\n    \
    \    } else {\n            result = y\n        }\n    } else if x % 2 == 0 &&\
    \ y % 2 != 0 {\n        result = x\n    } else if x % 2 != 0 && y % 2 == 0 {\n\
    \        result = y\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12)\
    \ == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x: 5234,\
    \ y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpx7hfs8_q/tmpx7hfs8_q.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8c8a584c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8c8a27bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8c8a27b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8c8a27a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx7hfs8_q                        0x000055e883aa324d <unavailable> + 4685

    5    libc.so.6                          0x00002b8c8a770460 __libc_start_main +
    245

    6    tmpx7hfs8_q                        0x000055e883aa2ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978941
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n\tif x > y {\n\t\treturn -1\n\t\
    } else if x % 2 == 0 {\n\t\treturn x\n\t} else {\n\t\treturn x + 1\n\t}\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpws0dm5zo/tmpws0dm5zo.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b125aca2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b125a999b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b125a999988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b125a9987b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpws0dm5zo                        0x000055fb74c6c24d <unavailable> + 4685

    5    libc.so.6                          0x00002b125ae8e460 __libc_start_main +
    245

    6    tmpws0dm5zo                        0x000055fb74c6bef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978941
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x % 2 == 0 {\n        return\
    \ x;\n    } else if x % 2 == 1 && x + 1 <= y {\n        return x + 1;\n    } else\
    \ {\n        return -1;\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(choose_num(x:\
    \ 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpd0x8bt2k/tmpd0x8bt2k.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4e2e973c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4e2e66ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4e2e66a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4e2e6697b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd0x8bt2k                        0x000055ef9632424d <unavailable> + 4685

    5    libc.so.6                          0x00002b4e2eb5f460 __libc_start_main +
    245

    6    tmpd0x8bt2k                        0x000055ef96323ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978941
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x > y {\n        return\
    \ -1\n    }\n    if x % 2 == 0 {\n        return x\n    }\n    if y % 2 == 0 {\n\
    \        return y\n    }\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\n\
    assert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233)\
    \ == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10)\
    \ == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546)\
    \ == 546)"
  status: Exception
  stderr: 'tmpynyj3rkm/tmpynyj3rkm.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5677cacc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b56779a3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b56779a3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b56779a27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpynyj3rkm                        0x000055b0693e024d <unavailable> + 4685

    5    libc.so.6                          0x00002b5677e98460 __libc_start_main +
    245

    6    tmpynyj3rkm                        0x000055b0693dfef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978941
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x > y {\n        return\
    \ -1\n    } else if x % 2 == 0 {\n        return x\n    } else {\n        return\
    \ x + 1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12,\
    \ y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmp8_s9177r/tmp8_s9177r.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b14d7114c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b14d6e0bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b14d6e0b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b14d6e0a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8_s9177r                        0x00005603c154024d <unavailable> + 4685

    5    libc.so.6                          0x00002b14d7300460 __libc_start_main +
    245

    6    tmp8_s9177r                        0x00005603c153fef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978940
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    if (x\
    \ % 2 == 0) {\n        result = x\n    } else if (x + 1 < y) {\n        result\
    \ = x + 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\n\
    assert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233)\
    \ == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10)\
    \ == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546)\
    \ == 546)"
  status: Exception
  stderr: 'tmp8nbt9zw7/tmp8nbt9zw7.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaf27145c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaf26e3cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaf26e3c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaf26e3b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8nbt9zw7                        0x0000563bafb2024d <unavailable> + 4685

    5    libc.so.6                          0x00002aaf27331460 __libc_start_main +
    245

    6    tmp8nbt9zw7                        0x0000563bafb1fef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978941
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    // TODO: Implement choose_num\
    \ function here\n    var max = 0\n    if x%2 != 0 {\n        x = x + 1\n    }\n\
    \    if y%2 != 0 {\n        y = y - 1\n    }\n    if x > y {\n        return -1\n\
    \    }\n    else {\n        for num in x...y {\n            if num%2 == 0 {\n\
    \                max = num\n            }\n        }\n    }\n    return max\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmphmb_j082.swift:14:9: error: cannot assign to value: 'x' is a 'let'\
    \ constant\n        x = x + 1\n        ^\n/tmp/tmphmb_j082.swift:17:9: error:\
    \ cannot assign to value: 'y' is a 'let' constant\n        y = y - 1\n       \
    \ ^\n"
  stdout: ''
  timestamp: 1659978941
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x < y {\n        for z\
    \ in x...y {\n            if z % 2 == 0 {\n                return z\n        \
    \    }\n        }\n    } else {\n        for z in y...x {\n            if z %\
    \ 2 == 0 {\n                return z\n            }\n        }\n    }\n    return\
    \ -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\n\
    assert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) ==\
    \ 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x: 6,\
    \ y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpic256_47/tmpic256_47.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b57235b2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b57232a9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b57232a9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b57232a87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpic256_47                        0x000055aefefeb33d <unavailable> + 4925

    5    libc.so.6                          0x00002b572379e460 __libc_start_main +
    245

    6    tmpic256_47                        0x000055aefefeafe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978941
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    let max = max_num(a: x, b:\
    \ y)\n    let min = min_num(a: x, b: y)\n    for i in (min...max).reversed() {\n\
    \        if i % 2 == 0 {\n            return i\n        }\n    }\n    return -1\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpuamld05n.swift:11:15: error: cannot find 'max_num' in scope\n \
    \   let max = max_num(a: x, b: y)\n              ^~~~~~~\n/tmp/tmpuamld05n.swift:12:15:\
    \ error: cannot find 'min_num' in scope\n    let min = min_num(a: x, b: y)\n \
    \             ^~~~~~~\n"
  stdout: ''
  timestamp: 1659978941
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    var choose = 0\n    if x %\
    \ 2 == 0 {\n        choose = x\n    } else {\n        choose = x + 1\n    }\n\
    \    if y % 2 == 0 {\n        if choose < y {\n            return y\n        }\
    \ else {\n            return choose\n        }\n    } else {\n        if choose\
    \ < y - 1 {\n            return y - 1\n        } else {\n            return -1\n\
    \        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12,\
    \ y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmp12enx0re/tmp12enx0re.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1798887c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b179857eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b179857e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b179857d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp12enx0re                        0x00005605794e32cd <unavailable> + 4813

    5    libc.so.6                          0x00002b1798a73460 __libc_start_main +
    245

    6    tmp12enx0re                        0x00005605794e2ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978941
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n  return -1\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpnv9bba6x/tmpnv9bba6x.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7826b02c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b78267f9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b78267f9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b78267f87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnv9bba6x                        0x000055a0c70601bd <unavailable> + 4541

    5    libc.so.6                          0x00002b7826cee460 __libc_start_main +
    245

    6    tmpnv9bba6x                        0x000055a0c705fe69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659978941
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n  var maxEven = -1\n  var bigNum\
    \ = x\n  var smallNum = y\n  if bigNum < smallNum {\n    bigNum = y\n    smallNum\
    \ = x\n  }\n  if smallNum % 2 == 0 {\n    maxEven = smallNum\n  } else {\n   \
    \ smallNum -= 1\n    maxEven = smallNum\n  }\n  return maxEven\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmprbhusyg0/tmprbhusyg0.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b202a230c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2029f27b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2029f27988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2029f267b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprbhusyg0                        0x0000556dac92d24d <unavailable> + 4685

    5    libc.so.6                          0x00002b202a41c460 __libc_start_main +
    245

    6    tmprbhusyg0                        0x0000556dac92cef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978941
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    var i = x\n    while i <=\
    \ y {\n        if i % 2 == 0 {\n            return i\n        }\n        i +=\
    \ 1\n    }\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(choose_num(x:\
    \ 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmplth7adyv/tmplth7adyv.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b05a2eb9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b05a2bb0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b05a2bb0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b05a2baf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplth7adyv                        0x000055be9cb3524d <unavailable> + 4685

    5    libc.so.6                          0x00002b05a30a5460 __libc_start_main +
    245

    6    tmplth7adyv                        0x000055be9cb34ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978941
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    // Your code here.\n    return\
    \ -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\n\
    assert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) ==\
    \ 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x: 6,\
    \ y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmphwv6ucxi/tmphwv6ucxi.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0af2444c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0af213bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0af213b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0af213a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphwv6ucxi                        0x000055e1810631bd <unavailable> + 4541

    5    libc.so.6                          0x00002b0af2630460 __libc_start_main +
    245

    6    tmphwv6ucxi                        0x000055e181062e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659978941
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    var c = x\n    if (x > y)\
    \ {\n        return -1\n    }\n    while (c <= y) {\n        if (c % 2 == 0) {\n\
    \            return c\n        }\n        c += 1\n    }\n    return -1\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmputk5vqec/tmputk5vqec.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba7da8d8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba7da5cfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba7da5cf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba7da5ce7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmputk5vqec                        0x0000556bea40f24d <unavailable> + 4685

    5    libc.so.6                          0x00002ba7daac4460 __libc_start_main +
    245

    6    tmputk5vqec                        0x0000556bea40eef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978941
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    // write the code here\n \
    \   return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12,\
    \ y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpp4bdslak/tmpp4bdslak.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0b5ba92c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0b5b789b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0b5b789988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0b5b7887b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp4bdslak                        0x00005562f718b1bd <unavailable> + 4541

    5    libc.so.6                          0x00002b0b5bc7e460 __libc_start_main +
    245

    6    tmpp4bdslak                        0x00005562f718ae69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659978941
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n\tlet max_range = x > y ? x :\
    \ y\n\tlet min_range = x < y ? x : y\n\t\n\tfor num in min_range...max_range {\n\
    \t\tif num % 2 == 0 {\n\t\t\treturn num\n\t\t}\n\t}\n\treturn -1\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmp13t8hops/tmp13t8hops.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ade27addc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ade277d4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ade277d4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ade277d37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp13t8hops                        0x0000558ad592733d <unavailable> + 4925

    5    libc.so.6                          0x00002ade27cc9460 __libc_start_main +
    245

    6    tmp13t8hops                        0x0000558ad5926fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978941
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x == y {\n        if x\
    \ % 2 == 0 {\n            return x\n        } else {\n            return -1\n\
    \        }\n    } else if x > y {\n        if x % 2 == 0 {\n            return\
    \ x\n        } else {\n            return x - 1\n        }\n    } else {\n   \
    \     if y % 2 == 0 {\n            return y\n        } else {\n            return\
    \ y - 1\n        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(choose_num(x:\
    \ 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpud6cyrmg/tmpud6cyrmg.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abf79f64c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abf79c5bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abf79c5b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abf79c5a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpud6cyrmg                        0x0000560048d0d2cd <unavailable> + 4813

    5    libc.so.6                          0x00002abf7a150460 __libc_start_main +
    245

    6    tmpud6cyrmg                        0x0000560048d0cef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978940
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    let result = (x+y)/2\n   \
    \ let remainder = result % 2\n    if remainder == 0 {\n        return result\n\
    \    }\n    else if result < x {\n        return -1\n    }\n    else {\n     \
    \   return result - 1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(choose_num(x:\
    \ 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmp4fcykw0m/tmp4fcykw0m.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af611eedc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af611be4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af611be4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af611be37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4fcykw0m                        0x000055b7e6cad24d <unavailable> + 4685

    5    libc.so.6                          0x00002af6120d9460 __libc_start_main +
    245

    6    tmp4fcykw0m                        0x000055b7e6cacef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978941
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    // Read tests for more information\n\
    \    var result = x\n    if x > y {\n        return -1\n    }\n    if x == y {\n\
    \        if x % 2 == 0 {\n            return x\n        } else {\n           \
    \ return -1\n        }\n    }\n    while result <= y {\n        if result % 2\
    \ == 0 {\n            return result\n        }\n        result += 1\n    }\n \
    \   return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12,\
    \ y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmp4g18oqnj/tmp4g18oqnj.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7e2f867c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7e2f55eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7e2f55e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7e2f55d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4g18oqnj                        0x0000558a6477a24d <unavailable> + 4685

    5    libc.so.6                          0x00002b7e2fa53460 __libc_start_main +
    245

    6    tmp4g18oqnj                        0x0000558a64779ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978941
- exit_code: 0
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    var z = y\n    while z >=\
    \ x {\n        if z % 2 == 0 {\n            return z\n        }\n        z -=\
    \ 1\n    }\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(choose_num(x:\
    \ 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978941
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    return 0\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmp8zjpprfh/tmp8zjpprfh.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abaa9ca8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abaa999fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abaa999f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abaa999e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8zjpprfh                        0x0000556f512db1bd <unavailable> + 4541

    5    libc.so.6                          0x00002abaa9e94460 __libc_start_main +
    245

    6    tmp8zjpprfh                        0x0000556f512dae69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659978941
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    var num = -1\n    let diff\
    \ = x - y\n    if diff < 0 {\n        for i in y...x {\n            if i % 2 ==\
    \ 0 {\n                num = i\n            }\n        }\n    }\n    return num\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b4655917c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b465560e561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b465560e286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b465560e13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b465560dbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpl152ie7a                        0x00005638e2b2b830 <unavailable> + 6192

    6    tmpl152ie7a                        0x00005638e2b2b2d0 <unavailable> + 4816

    7    libc.so.6                          0x00002b4655b03460 __libc_start_main +
    245

    8    tmpl152ie7a                        0x00005638e2b2afe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978941
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    return -1\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpnsqdd4tj/tmpnsqdd4tj.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b16eb55bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b16eb252b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b16eb252988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b16eb2517b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnsqdd4tj                        0x00005586a53f51bd <unavailable> + 4541

    5    libc.so.6                          0x00002b16eb747460 __libc_start_main +
    245

    6    tmpnsqdd4tj                        0x00005586a53f4e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659978940
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x > y {\n        return\
    \ -1\n    } else if x % 2 == 0 {\n        return x\n    } else {\n        return\
    \ x + 1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12,\
    \ y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmp8_s9177r/tmp8_s9177r.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b14d7114c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b14d6e0bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b14d6e0b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b14d6e0a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8_s9177r                        0x00005603c154024d <unavailable> + 4685

    5    libc.so.6                          0x00002b14d7300460 __libc_start_main +
    245

    6    tmp8_s9177r                        0x00005603c153fef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978940
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    // Make sure x is less than\
    \ y\n    if x > y {\n        return -1\n    }\n    var x = x\n    while x <= y\
    \ {\n        if x % 2 == 0 {\n            return x\n        }\n        x += 1\n\
    \    }\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(choose_num(x:\
    \ 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmp1sgwncs5/tmp1sgwncs5.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5920d0cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5920a03b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5920a03988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5920a027b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1sgwncs5                        0x000055ca4dead24d <unavailable> + 4685

    5    libc.so.6                          0x00002b5920ef8460 __libc_start_main +
    245

    6    tmp1sgwncs5                        0x000055ca4deacef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978941
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x < y {\n        if x %\
    \ 2 == 0 {\n            return x\n        } else {\n            return x + 1\n\
    \        }\n    } else if x > y {\n        if y % 2 == 0 {\n            return\
    \ y\n        } else {\n            return y + 1\n        }\n    } else {\n   \
    \     if x % 2 == 0 {\n            return x\n        } else {\n            return\
    \ -1\n        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(choose_num(x:\
    \ 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpjz53rwqv/tmpjz53rwqv.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9960648c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b996033fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b996033f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b996033e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjz53rwqv                        0x000055e97f59424d <unavailable> + 4685

    5    libc.so.6                          0x00002b9960834460 __libc_start_main +
    245

    6    tmpjz53rwqv                        0x000055e97f593ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978941
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    return -1\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpnsqdd4tj/tmpnsqdd4tj.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b16eb55bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b16eb252b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b16eb252988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b16eb2517b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnsqdd4tj                        0x00005586a53f51bd <unavailable> + 4541

    5    libc.so.6                          0x00002b16eb747460 __libc_start_main +
    245

    6    tmpnsqdd4tj                        0x00005586a53f4e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659978940
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n  if x <= y {\n    if x % 2 ==\
    \ 0 {\n      return x\n    } else {\n      return choose_num(x: x + 1, y: y)\n\
    \    }\n  } else {\n    return -1\n  }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\n\
    assert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233)\
    \ == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10)\
    \ == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546)\
    \ == 546)"
  status: Exception
  stderr: 'tmpdyn0dfrx/tmpdyn0dfrx.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7c9ee25c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7c9eb1cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7c9eb1c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7c9eb1b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdyn0dfrx                        0x0000556d8a7a224d <unavailable> + 4685

    5    libc.so.6                          0x00002b7c9f011460 __libc_start_main +
    245

    6    tmpdyn0dfrx                        0x0000556d8a7a1ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978941
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    // YOUR CODE GOES HERE\n \
    \   return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12,\
    \ y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpma753is9/tmpma753is9.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae507c82c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae507979b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae507979988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae5079787b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpma753is9                        0x000055bb21c151bd <unavailable> + 4541

    5    libc.so.6                          0x00002ae507e6e460 __libc_start_main +
    245

    6    tmpma753is9                        0x000055bb21c14e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659978941
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    // Create a sequence and store\
    \ it in a variable.\n    let sequence = x...y\n    // Iterate over the sequence\
    \ and print the number.\n    for number in sequence {\n        if number % 2 ==\
    \ 0 {\n            return number\n        }\n    }\n    return -1\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmphxazm23w/tmphxazm23w.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b62d9e1fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b62d9b16b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b62d9b16988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b62d9b157b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphxazm23w                        0x00005564ffa1933d <unavailable> + 4925

    5    libc.so.6                          0x00002b62da00b460 __libc_start_main +
    245

    6    tmphxazm23w                        0x00005564ffa18fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978941
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x > y {\n        return\
    \ -1\n    }\n    let result = x % 2 == 0 ? x : x + 1\n    if result > y {\n  \
    \      return -1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12)\
    \ == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x: 5234,\
    \ y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmp1u47tn9o/tmp1u47tn9o.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6b94b34c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6b9482bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6b9482b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6b9482a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1u47tn9o                        0x00005649b19de24d <unavailable> + 4685

    5    libc.so.6                          0x00002b6b94d20460 __libc_start_main +
    245

    6    tmp1u47tn9o                        0x00005649b19ddef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978942
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x > y {\n        return\
    \ -1\n    } else if x == y {\n        if x % 2 == 0 {\n            return x\n\
    \        } else {\n            return -1\n        }\n    } else {\n        if\
    \ x % 2 == 0 {\n            return x\n        } else {\n            return choose_num(x:\
    \ x + 1, y: y)\n        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(choose_num(x:\
    \ 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpz7czhwsi/tmpz7czhwsi.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9fc01e9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9fbfee0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9fbfee0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9fbfedf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz7czhwsi                        0x0000562ac999d24d <unavailable> + 4685

    5    libc.so.6                          0x00002b9fc03d5460 __libc_start_main +
    245

    6    tmpz7czhwsi                        0x0000562ac999cef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978941
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    // TODO\n    return -1\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpi1zajzpp/tmpi1zajzpp.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0a208fbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0a205f2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0a205f2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0a205f17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi1zajzpp                        0x000055f61ffe61bd <unavailable> + 4541

    5    libc.so.6                          0x00002b0a20ae7460 __libc_start_main +
    245

    6    tmpi1zajzpp                        0x000055f61ffe5e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659978942
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    var output = 0\n    if x %\
    \ 2 == 0 {\n        output = x\n    } else {\n        output = x + 1\n    }\n\
    \    if output == y || output < y {\n        return output\n    } else {\n   \
    \     return -1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(choose_num(x:\
    \ 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpjv4xv8f4/tmpjv4xv8f4.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4b0a840c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4b0a537b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4b0a537988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4b0a5367b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjv4xv8f4                        0x0000556bd7f0924d <unavailable> + 4685

    5    libc.so.6                          0x00002b4b0aa2c460 __libc_start_main +
    245

    6    tmpjv4xv8f4                        0x0000556bd7f08ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978942
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    var biggest_even_num = -1\n\
    \    if x < y {\n        if y % 2 == 0 {\n            biggest_even_num = y\n \
    \       } else {\n            biggest_even_num = y - 1\n        }\n    } else\
    \ if x > y {\n        if x % 2 == 0 {\n            biggest_even_num = x\n    \
    \    } else {\n            biggest_even_num = x - 1\n        }\n    } else {\n\
    \        if x % 2 == 0 {\n            biggest_even_num = x\n        }\n    }\n\
    \    return biggest_even_num\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(choose_num(x:\
    \ 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmp47rapdnu/tmp47rapdnu.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abfa87b4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abfa84abb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abfa84ab988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abfa84aa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp47rapdnu                        0x0000560283ef32cd <unavailable> + 4813

    5    libc.so.6                          0x00002abfa89a0460 __libc_start_main +
    245

    6    tmp47rapdnu                        0x0000560283ef2ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978942
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x%2 == 0 {\n        return\
    \ x\n    } else if y%2 == 0 {\n        return y\n    } else {\n        return\
    \ -1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y:\
    \ 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33,\
    \ y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpxxj8ywgx/tmpxxj8ywgx.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b011cf3cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b011cc33b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b011cc33988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b011cc327b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxxj8ywgx                        0x000055b99f0b024d <unavailable> + 4685

    5    libc.so.6                          0x00002b011d128460 __libc_start_main +
    245

    6    tmpxxj8ywgx                        0x000055b99f0afef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978942
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    // TODO: Write some code to\
    \ solve this coding exercise.\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12)\
    \ == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x: 5234,\
    \ y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmp9li1h229/tmp9li1h229.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5f10285c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5f0ff7cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5f0ff7c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5f0ff7b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9li1h229                        0x00005630e79671bd <unavailable> + 4541

    5    libc.so.6                          0x00002b5f10471460 __libc_start_main +
    245

    6    tmp9li1h229                        0x00005630e7966e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659978942
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x > y {\n        return\
    \ -1\n    }\n    let xIsEven = x % 2 == 0\n    let yIsEven = y % 2 == 0\n    if\
    \ xIsEven && yIsEven {\n        return y\n    } else if !xIsEven && !yIsEven {\n\
    \        return x + 1\n    } else {\n        return xIsEven ? x : y\n    }\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpskw16ubr/tmpskw16ubr.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3dfe3c4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3dfe0bbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3dfe0bb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3dfe0ba7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpskw16ubr                        0x0000555d1ac1424d <unavailable> + 4685

    5    libc.so.6                          0x00002b3dfe5b0460 __libc_start_main +
    245

    6    tmpskw16ubr                        0x0000555d1ac13ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978942
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    return -1\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpnsqdd4tj/tmpnsqdd4tj.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b16eb55bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b16eb252b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b16eb252988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b16eb2517b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnsqdd4tj                        0x00005586a53f51bd <unavailable> + 4541

    5    libc.so.6                          0x00002b16eb747460 __libc_start_main +
    245

    6    tmpnsqdd4tj                        0x00005586a53f4e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659978940
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    var result = x\n    for i\
    \ in x...y {\n        if i % 2 == 0 && i > result {\n            result = i\n\
    \        }\n    }\n    if result % 2 == 0 {\n        return result\n    } else\
    \ {\n        return -1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(choose_num(x:\
    \ 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002ad1629cac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad1626c1561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ad1626c1286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ad1626c113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ad1626c0bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpokg9brfe                        0x000055cccc76c7ec <unavailable> + 6124

    6    tmpokg9brfe                        0x000055cccc76c350 <unavailable> + 4944

    7    libc.so.6                          0x00002ad162bb6460 __libc_start_main +
    245

    8    tmpokg9brfe                        0x000055cccc76bfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978942
- exit_code: 0
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    for i in stride(from: y, through:\
    \ x, by: -1) {\n        if (i % 2 == 0) {\n            return i\n        }\n \
    \   }\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(choose_num(x:\
    \ 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978942
- exit_code: 0
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n\t// your code here\n\tvar result:\
    \ Int = -1\n\tif(x > y){\n\t\treturn result\n\t}\n\t\n\tfor n in x...y{\n\t\t\
    if n % 2 == 0{\n\t\t\tresult = n\n\t\t}\n\t}\n\treturn result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978942
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    for i\
    \ in x...y {\n        if i % 2 == 0 {\n            result = i\n        }\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(choose_num(x:\
    \ 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b1240ae6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b12407dd561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b12407dd286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b12407dd13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b12407dcbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp56w7lgfp                        0x0000557b2cde47f0 <unavailable> + 6128

    6    tmp56w7lgfp                        0x0000557b2cde4350 <unavailable> + 4944

    7    libc.so.6                          0x00002b1240cd2460 __libc_start_main +
    245

    8    tmp56w7lgfp                        0x0000557b2cde3fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978941
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    var chosenNum = -1\n    let\
    \ range: ClosedRange<Int> = x...y\n    for num in range {\n        if num % 2\
    \ == 0 {\n            chosenNum = num\n        }\n    }\n    return chosenNum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b4110e01c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4110af8561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b4110af8286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b4110af813c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b4110af7bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp2pf2xxci                        0x000055c5170b7814 <unavailable> + 6164

    6    tmp2pf2xxci                        0x000055c5170b7350 <unavailable> + 4944

    7    libc.so.6                          0x00002b4110fed460 __libc_start_main +
    245

    8    tmp2pf2xxci                        0x000055c5170b6fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978942
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n  if y < x {\n    return -1\n\
    \  } else if y % 2 == 0 {\n    return y\n  } else {\n    return y - 1\n  }\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmp1g2wxa3y/tmp1g2wxa3y.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba38ea72c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba38e769b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba38e769988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba38e7687b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1g2wxa3y                        0x00005599bf36954d <unavailable> + 5453

    5    libc.so.6                          0x00002ba38ec5e460 __libc_start_main +
    245

    6    tmp1g2wxa3y                        0x00005599bf368ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978942
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if (x <= y) {\n        if\
    \ ((x % 2) == 0) {\n            return x\n        } else {\n            return\
    \ choose_num(x: x + 1, y: y)\n        }\n    } else {\n        return -1\n   \
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\n\
    assert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) ==\
    \ 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x: 6,\
    \ y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmp3867vad6/tmp3867vad6.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab69deb0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab69dba7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab69dba7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab69dba67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3867vad6                        0x00005627096f224d <unavailable> + 4685

    5    libc.so.6                          0x00002ab69e09c460 __libc_start_main +
    245

    6    tmp3867vad6                        0x00005627096f1ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978942
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x % 2 == 0 && y % 2 ==\
    \ 0 {\n        return y\n    } else if x % 2 == 0 && y % 2 != 0 {\n        return\
    \ x\n    } else if x % 2 != 0 && y % 2 == 0 {\n        return y\n    } else {\n\
    \        return -1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(choose_num(x:\
    \ 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmppuveoudg/tmppuveoudg.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b874c771c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b874c468b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b874c468988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b874c4677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppuveoudg                        0x00005575e537324d <unavailable> + 4685

    5    libc.so.6                          0x00002b874c95d460 __libc_start_main +
    245

    6    tmppuveoudg                        0x00005575e5372ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978940
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x % 2 == 0 && y % 2 ==\
    \ 0 {\n        if x > y {\n            return y\n        } else {\n          \
    \  return x\n        }\n    } else if x % 2 == 0 && y % 2 != 0 {\n        return\
    \ x\n    } else if x % 2 != 0 && y % 2 == 0 {\n        return y\n    } else {\n\
    \        return -1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(choose_num(x:\
    \ 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmp5rpjweqb/tmp5rpjweqb.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad02dc80c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad02d977b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad02d977988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad02d9767b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5rpjweqb                        0x0000565002aa124d <unavailable> + 4685

    5    libc.so.6                          0x00002ad02de6c460 __libc_start_main +
    245

    6    tmp5rpjweqb                        0x0000565002aa0ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978942
- exit_code: 0
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    var max = -1\n    var z =\
    \ y\n    while z >= x {\n        if z % 2 == 0 {\n            max = z\n      \
    \      break\n        }\n        z -= 1\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978942
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    // Check for inverse range\n\
    \    if (x > y) {\n        return -1\n    }\n    // For each element in the range\n\
    \    for i in stride(from: x, through: y, by: 1) {\n        // Check if it's an\
    \ even number\n        if (i % 2 == 0) {\n            return i\n        }\n  \
    \  }\n    // No even number found\n    return -1\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x: 13,\
    \ y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmplf6njinh/tmplf6njinh.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3c4617ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3c45e75b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3c45e75988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3c45e747b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplf6njinh                        0x00005650f270d47d <unavailable> + 5245

    5    libc.so.6                          0x00002b3c4636a460 __libc_start_main +
    245

    6    tmplf6njinh                        0x00005650f270d129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659978942
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if (x > y) {\n        return\
    \ -1\n    }\n    else if (x % 2 == 0) {\n        return x\n    }\n    else {\n\
    \        return choose_num(x: x + 1, y: y)\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x: 13,\
    \ y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpaohmo1pi/tmpaohmo1pi.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2bb0e04c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2bb0afbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2bb0afb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2bb0afa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpaohmo1pi                        0x000056279a48824d <unavailable> + 4685

    5    libc.so.6                          0x00002b2bb0ff0460 __libc_start_main +
    245

    6    tmpaohmo1pi                        0x000056279a487ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978942
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    let a = [x, y]\n    let b\
    \ = a.sorted()\n    if b[0] % 2 == 0 {\n        return b[0]\n    } else if b[0]\
    \ % 2 != 0 {\n        return b[1]\n    } else {\n        return -1\n    }\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmp4oebj348/tmp4oebj348.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3ea5271c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3ea4f68b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3ea4f68988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3ea4f677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4oebj348                        0x00005560876a844d <unavailable> + 5197

    5    libc.so.6                          0x00002b3ea545d460 __libc_start_main +
    245

    6    tmp4oebj348                        0x00005560876a80f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1659978942
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if y % 2 == 0 {\n        return\
    \ y\n    } else if x % 2 == 0 {\n        return x\n    } else {\n        return\
    \ -1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y:\
    \ 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33,\
    \ y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpclvfc4sp/tmpclvfc4sp.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af54a7f1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af54a4e8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af54a4e8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af54a4e77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpclvfc4sp                        0x0000564104d4e24d <unavailable> + 4685

    5    libc.so.6                          0x00002af54a9dd460 __libc_start_main +
    245

    6    tmpclvfc4sp                        0x0000564104d4def9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978942
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    return -1\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpnsqdd4tj/tmpnsqdd4tj.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b16eb55bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b16eb252b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b16eb252988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b16eb2517b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnsqdd4tj                        0x00005586a53f51bd <unavailable> + 4541

    5    libc.so.6                          0x00002b16eb747460 __libc_start_main +
    245

    6    tmpnsqdd4tj                        0x00005586a53f4e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659978940
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    let distance = abs(x - y)\n\
    \    let max = x > y ? x : y\n    if distance == 0 {\n        return x % 2 ==\
    \ 0 ? x : -1\n    }\n    for i in stride(from: distance, to: 0, by: -1) {\n  \
    \      let num = max - i\n        if num % 2 == 0 {\n            return num\n\
    \        }\n    }\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(choose_num(x:\
    \ 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpmqbut0ni/tmpmqbut0ni.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b95db4c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b95db1b9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b95db1b9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b95db1b87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmqbut0ni                        0x000056398545054d <unavailable> + 5453

    5    libc.so.6                          0x00002b95db6ae460 __libc_start_main +
    245

    6    tmpmqbut0ni                        0x00005639854501f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659978942
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    var smallest = min(x, y)\n\
    \    var biggest = max(x, y)\n    if smallest % 2 == 0 {\n        return smallest\n\
    \    } else {\n        smallest += 1\n    }\n    if smallest > biggest {\n   \
    \     return -1\n    }\n    return smallest\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12)\
    \ == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x: 5234,\
    \ y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpk5kk3jxx/tmpk5kk3jxx.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b197f050c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b197ed47b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b197ed47988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b197ed467b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk5kk3jxx                        0x0000558126fee33d <unavailable> + 4925

    5    libc.so.6                          0x00002b197f23c460 __libc_start_main +
    245

    6    tmpk5kk3jxx                        0x0000558126fedfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978942
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if (x%2 == 0 && y%2 == 0)\
    \ {\n        if (x > y) {\n            return x\n        } else {\n          \
    \  return y\n        }\n    } else if (x%2 == 0 && y%2 != 0) {\n        return\
    \ x\n    } else if (x%2 != 0 && y%2 == 0) {\n        return y\n    } else {\n\
    \        return -1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(choose_num(x:\
    \ 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmp5w2_sbin/tmp5w2_sbin.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afb53781c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afb53478b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afb53478988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afb534777b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5w2_sbin                        0x0000558f1465f24d <unavailable> + 4685

    5    libc.so.6                          0x00002afb5396d460 __libc_start_main +
    245

    6    tmp5w2_sbin                        0x0000558f1465eef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978942
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x % 2 == 0 && y % 2 ==\
    \ 0 && x <= y {\n        return y\n    } else if x % 2 == 0 && y % 2 == 0 && x\
    \ > y {\n        return x\n    } else if x % 2 == 0 && y % 2 != 0 && x <= y {\n\
    \        return x\n    } else if x % 2 != 0 && y % 2 == 0 && x <= y {\n      \
    \  return y\n    } else if x % 2 != 0 && y % 2 != 0 && x <= y {\n        return\
    \ x + 1\n    } else {\n        return -1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12)\
    \ == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x: 5234,\
    \ y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmp_fp2czfy/tmp_fp2czfy.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8da264fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8da2346b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8da2346988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8da23457b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_fp2czfy                        0x000055571340424d <unavailable> + 4685

    5    libc.so.6                          0x00002b8da283b460 __libc_start_main +
    245

    6    tmp_fp2czfy                        0x0000555713403ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978942
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if (x >= 0 && y >= 0) {\n\
    \        var i = x\n        while i <= y {\n            if (i % 2 == 0) {\n  \
    \              return i\n            }\n            i += 1\n        }\n    }\n\
    \    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12,\
    \ y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmp6ec81qmd/tmp6ec81qmd.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d51950c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d51647b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d51647988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d516467b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6ec81qmd                        0x000055cfd28a824d <unavailable> + 4685

    5    libc.so.6                          0x00002b6d51b3c460 __libc_start_main +
    245

    6    tmp6ec81qmd                        0x000055cfd28a7ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978942
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    // Check whether x and y are\
    \ positive\n    if x < 0 || y < 0 {\n        return -1\n    }\n    // Check whether\
    \ x is bigger than y\n    if x > y {\n        return -1\n    }\n    // Check whether\
    \ x or y is even\n    if x % 2 == 0 {\n        return x\n    } else if y % 2 ==\
    \ 0 {\n        return y\n    } else {\n        return -1\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpy_apbfue/tmpy_apbfue.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b220930dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2209004b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2209004988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b22090037b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy_apbfue                        0x000055e5920e124d <unavailable> + 4685

    5    libc.so.6                          0x00002b22094f9460 __libc_start_main +
    245

    6    tmpy_apbfue                        0x000055e5920e0ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978942
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n  var a = x\n  var b = y\n  if\
    \ x>y {\n    a = y\n    b = x\n  }\n  var bigEven = -1\n  for i in a...b {\n \
    \   if i%2 == 0 {\n      bigEven = i\n    }\n  }\n  return bigEven\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmp4b96hc97/tmp4b96hc97.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9c51d8bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9c51a82b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9c51a82988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9c51a817b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4b96hc97                        0x000056178811e3bd <unavailable> + 5053

    5    libc.so.6                          0x00002b9c51f77460 __libc_start_main +
    245

    6    tmp4b96hc97                        0x000056178811dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978942
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    var largestEven = -1\n   \
    \ for i in x...y {\n        if (i % 2 == 0) {\n            largestEven = i\n \
    \       }\n    }\n    return largestEven\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\n\
    assert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233)\
    \ == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10)\
    \ == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546)\
    \ == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b36c120dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b36c0f04561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b36c0f04286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b36c0f0413c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b36c0f03bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpiqi85vzd                        0x000056186e9f17f0 <unavailable> + 6128

    6    tmpiqi85vzd                        0x000056186e9f1350 <unavailable> + 4944

    7    libc.so.6                          0x00002b36c13f9460 __libc_start_main +
    245

    8    tmpiqi85vzd                        0x000056186e9f0fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978942
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x%2 != 0 {\n        x+=1\n\
    \    }\n    if y%2 != 0 {\n        y-=1\n    }\n    if x>y {\n        return -1\n\
    \    }\n    return y\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(choose_num(x:\
    \ 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpfh5wgy1z.swift:12:10: error: left side of mutating operator isn't\
    \ mutable: 'x' is a 'let' constant\n        x+=1\n        ~^\n/tmp/tmpfh5wgy1z.swift:15:10:\
    \ error: left side of mutating operator isn't mutable: 'y' is a 'let' constant\n\
    \        y-=1\n        ~^\n"
  stdout: ''
  timestamp: 1659978942
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    let num = max(x, y) % 2 ==\
    \ 0 ? max(x, y) : max(x, y) - 1\n    return num\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12)\
    \ == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x: 5234,\
    \ y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpac7covtl/tmpac7covtl.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b118f4afc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b118f1a6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b118f1a6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b118f1a57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpac7covtl                        0x000055878c7a835d <unavailable> + 4957

    5    libc.so.6                          0x00002b118f69b460 __libc_start_main +
    245

    6    tmpac7covtl                        0x000055878c7a7f89 <unavailable> + 3977

    '
  stdout: ''
  timestamp: 1659978942
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    let range = x...y\n    let\
    \ evens = range.filter{$0 % 2 == 0}\n    return evens.isEmpty ? -1 : evens.max()!\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b4665f39c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4665c30561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b4665c30286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b4665c3013c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b4665c2fbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpmr5bdwju                        0x000055864665b97b <unavailable> + 6523

    6    tmpmr5bdwju                        0x000055864665b4c0 <unavailable> + 5312

    7    libc.so.6                          0x00002b4666125460 __libc_start_main +
    245

    8    tmpmr5bdwju                        0x000055864665b159 <unavailable> + 4441

    '
  stdout: ''
  timestamp: 1659978942
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n\tvar biggest_even_int: Int =\
    \ -1\n\tfor i in x...y {\n\t\tif (i % 2 == 0) {\n\t\t\tbiggest_even_int = i\n\t\
    \t}\n\t}\n\treturn biggest_even_int\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\n\
    assert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233)\
    \ == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10)\
    \ == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546)\
    \ == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002ae43466bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae434362561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ae434362286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ae43436213c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ae434361bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpj3bji5dv                        0x0000563b9cf727f0 <unavailable> + 6128

    6    tmpj3bji5dv                        0x0000563b9cf72350 <unavailable> + 4944

    7    libc.so.6                          0x00002ae434857460 __libc_start_main +
    245

    8    tmpj3bji5dv                        0x0000563b9cf71fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978942
- exit_code: 0
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n\tvar biggestEven = -1\n\tvar\
    \ i = x\n\twhile i <= y {\n\t\tif i % 2 == 0 {\n\t\t\tbiggestEven = i\n\t\t}\n\
    \t\ti += 1\n\t}\n\treturn biggestEven\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\n\
    assert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233)\
    \ == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10)\
    \ == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546)\
    \ == 546)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978942
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    let mid = (x + y) / 2\n  \
    \  if (x % 2 != 0) {\n        if (y % 2 != 0) {\n            return -1\n     \
    \   } else {\n            return y\n        }\n    } else {\n        if (y % 2\
    \ != 0) {\n            return mid\n        } else {\n            return y\n  \
    \      }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12,\
    \ y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmp5mn_9ebq/tmp5mn_9ebq.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af145919c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af145610b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af145610988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af14560f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5mn_9ebq                        0x000055a3b958024d <unavailable> + 4685

    5    libc.so.6                          0x00002af145b05460 __libc_start_main +
    245

    6    tmp5mn_9ebq                        0x000055a3b957fef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978942
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x > y {\n        return\
    \ -1\n    }\n    if x % 2 == 0 {\n        return x\n    }\n    return choose_num(x:\
    \ x + 1, y: y)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12,\
    \ y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmphmmy4jpa/tmphmmy4jpa.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aded37d9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aded34d0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aded34d0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aded34cf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphmmy4jpa                        0x00005654f163c24d <unavailable> + 4685

    5    libc.so.6                          0x00002aded39c5460 __libc_start_main +
    245

    6    tmphmmy4jpa                        0x00005654f163bef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978942
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    var current: Int = x\n   \
    \ while current <= y {\n        if current % 2 == 0 {\n            return current\n\
    \        }\n        current += 1\n    }\n    return -1\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x: 13,\
    \ y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmp4o707nnj/tmp4o707nnj.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b15b6347c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b15b603eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b15b603e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b15b603d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4o707nnj                        0x00005581a123024d <unavailable> + 4685

    5    libc.so.6                          0x00002b15b6533460 __libc_start_main +
    245

    6    tmp4o707nnj                        0x00005581a122fef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978942
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x % 2 == 0 && y % 2 ==\
    \ 0 && x <= y {\n        return y\n    } else if x % 2 == 0 && y % 2 == 0 && x\
    \ > y {\n        return x\n    } else if x % 2 == 0 && y % 2 != 0 && x <= y {\n\
    \        return x\n    } else if x % 2 != 0 && y % 2 == 0 && x <= y {\n      \
    \  return y\n    } else if x % 2 != 0 && y % 2 != 0 && x <= y {\n        return\
    \ -1\n    } else {\n        return -1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12)\
    \ == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x: 5234,\
    \ y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpk844l28b/tmpk844l28b.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afd30816c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afd3050db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afd3050d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afd3050c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk844l28b                        0x000055ba5f5ee24d <unavailable> + 4685

    5    libc.so.6                          0x00002afd30a02460 __libc_start_main +
    245

    6    tmpk844l28b                        0x000055ba5f5edef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978942
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    // STEP 1 - write code here\
    \ to make this function pass the test below\n    return -1\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmp8fpzltms/tmp8fpzltms.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7f8aa79c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7f8a770b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7f8a770988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7f8a76f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8fpzltms                        0x000056530e6f41bd <unavailable> + 4541

    5    libc.so.6                          0x00002b7f8ac65460 __libc_start_main +
    245

    6    tmp8fpzltms                        0x000056530e6f3e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659978942
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    let min = x < y ? x : y\n\
    \    let max = x > y ? x : y\n    for i in min...max {\n        if i % 2 == 0\
    \ {\n            return i\n        }\n    }\n    return -1\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpt607swc4/tmpt607swc4.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abbbf2aac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abbbefa1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abbbefa1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abbbefa07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt607swc4                        0x00005578ac90a33d <unavailable> + 4925

    5    libc.so.6                          0x00002abbbf496460 __libc_start_main +
    245

    6    tmpt607swc4                        0x00005578ac909fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978942
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x > y {\n        return\
    \ -1\n    } else if x % 2 == 0 {\n        return x\n    } else {\n        return\
    \ x + 1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12,\
    \ y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmp8_s9177r/tmp8_s9177r.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b14d7114c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b14d6e0bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b14d6e0b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b14d6e0a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8_s9177r                        0x00005603c154024d <unavailable> + 4685

    5    libc.so.6                          0x00002b14d7300460 __libc_start_main +
    245

    6    tmp8_s9177r                        0x00005603c153fef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978940
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    //YOUR CODE HERE\n    if(x\
    \ % 2 == 0){\n        return x\n    }\n    else if(y % 2 == 0){\n        return\
    \ y\n    }\n    else{\n        return -1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12)\
    \ == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x: 5234,\
    \ y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpni0pnhyn/tmpni0pnhyn.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8697ab5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b86977acb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b86977ac988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b86977ab7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpni0pnhyn                        0x000055de9b40f24d <unavailable> + 4685

    5    libc.so.6                          0x00002b8697ca1460 __libc_start_main +
    245

    6    tmpni0pnhyn                        0x000055de9b40eef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978942
- exit_code: 0
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    // write your code here\n\
    \    if x > y {\n        return -1\n    }\n    var maxEvenNumber = 0\n    for\
    \ i in x...y {\n        if i % 2 == 0 {\n            maxEvenNumber = i\n     \
    \   }\n    }\n    if maxEvenNumber == 0 {\n        return -1\n    }\n    return\
    \ maxEvenNumber\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12,\
    \ y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978942
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    for i in x...y {\n       \
    \ if i % 2 == 0 {\n            return i\n        }\n    }\n    return -1\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmp1qxcnmkf/tmp1qxcnmkf.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5129f39c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5129c30b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5129c30988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5129c2f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1qxcnmkf                        0x00005564867ac33d <unavailable> + 4925

    5    libc.so.6                          0x00002b512a125460 __libc_start_main +
    245

    6    tmp1qxcnmkf                        0x00005564867abfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978941
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    var evenNumber = -1\n    for\
    \ num in x...y {\n        if num % 2 == 0 {\n            evenNumber = num\n  \
    \      }\n    }\n    return evenNumber\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\n\
    assert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233)\
    \ == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10)\
    \ == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546)\
    \ == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002af79124ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af790f45561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002af790f45286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002af790f4513c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002af790f44bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpwcfatejp                        0x00005578516547f0 <unavailable> + 6128

    6    tmpwcfatejp                        0x0000557851654350 <unavailable> + 4944

    7    libc.so.6                          0x00002af79143a460 __libc_start_main +
    245

    8    tmpwcfatejp                        0x0000557851653fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978942
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x > y {\n        return\
    \ -1\n    }\n    if x % 2 == 0 {\n        return x\n    }\n    if y % 2 == 0 {\n\
    \        return y\n    }\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\n\
    assert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233)\
    \ == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10)\
    \ == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546)\
    \ == 546)"
  status: Exception
  stderr: 'tmpynyj3rkm/tmpynyj3rkm.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5677cacc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b56779a3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b56779a3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b56779a27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpynyj3rkm                        0x000055b0693e024d <unavailable> + 4685

    5    libc.so.6                          0x00002b5677e98460 __libc_start_main +
    245

    6    tmpynyj3rkm                        0x000055b0693dfef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978941
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    // TODO: Implement this function\n\
    \    // This is a stub. Delete this line and add your own code below!\n    if\
    \ x <= y {\n        if y % 2 == 0 {\n            return y\n        } else {\n\
    \            return y - 1\n        }\n    } else {\n        return -1\n    }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmp36fqxcxm/tmp36fqxcxm.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b79c74f7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b79c71eeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b79c71ee988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b79c71ed7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp36fqxcxm                        0x000055b2e376954d <unavailable> + 5453

    5    libc.so.6                          0x00002b79c76e3460 __libc_start_main +
    245

    6    tmp36fqxcxm                        0x000055b2e3768ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978942
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    for i\
    \ in x...y {\n        if i % 2 == 0 {\n            result = i\n        }\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(choose_num(x:\
    \ 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b1240ae6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b12407dd561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b12407dd286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b12407dd13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b12407dcbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp56w7lgfp                        0x0000557b2cde47f0 <unavailable> + 6128

    6    tmp56w7lgfp                        0x0000557b2cde4350 <unavailable> + 4944

    7    libc.so.6                          0x00002b1240cd2460 __libc_start_main +
    245

    8    tmp56w7lgfp                        0x0000557b2cde3fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978941
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if (x > y) {\n        return\
    \ -1\n    } else if (x == y) {\n        if (x % 2 == 0) {\n            return\
    \ x\n        } else {\n            return -1\n        }\n    } else {\n      \
    \  var i = x\n        while (i <= y) {\n            if (i % 2 == 0) {\n      \
    \          return i\n            }\n            i += 1\n        }\n        return\
    \ -1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y:\
    \ 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33,\
    \ y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmp61g0o_yn/tmp61g0o_yn.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9e2e01fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9e2dd16b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9e2dd16988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9e2dd157b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp61g0o_yn                        0x000055f1d968124d <unavailable> + 4685

    5    libc.so.6                          0x00002b9e2e20b460 __libc_start_main +
    245

    6    tmp61g0o_yn                        0x000055f1d9680ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978942
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    var max = -1\n    if x % 2\
    \ == 0 {\n        max = x\n    } else {\n        max = x + 1\n    }\n    for i\
    \ in max...y {\n        if i % 2 == 0 {\n            max = i\n        }\n    }\n\
    \    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12,\
    \ y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b9071f27c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9071c1e561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b9071c1e286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b9071c1e13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b9071c1dbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpwxmobf_q                        0x0000555c5922e8c9 <unavailable> + 6345

    6    tmpwxmobf_q                        0x0000555c5922e350 <unavailable> + 4944

    7    libc.so.6                          0x00002b9072113460 __libc_start_main +
    245

    8    tmpwxmobf_q                        0x0000555c5922dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978942
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    let z = y - x + 1\n    if\
    \ z%2 == 0 {\n        return y - z/2\n    } else {\n        return -1\n    }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpv943yv4m/tmpv943yv4m.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b021cee9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b021cbe0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b021cbe0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b021cbdf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv943yv4m                        0x000055f90b6c424d <unavailable> + 4685

    5    libc.so.6                          0x00002b021d0d5460 __libc_start_main +
    245

    6    tmpv943yv4m                        0x000055f90b6c3ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978942
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x > y {\n        return\
    \ -1\n    }\n    if x % 2 == 0 {\n        return x\n    }\n    if y % 2 == 0 {\n\
    \        return y\n    }\n    if x % 2 == 1 && y % 2 == 1 {\n        return -1\n\
    \    }\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(choose_num(x:\
    \ 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmp3cqgen8n/tmp3cqgen8n.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8834932c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8834629b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8834629988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b88346287b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3cqgen8n                        0x0000563a4045424d <unavailable> + 4685

    5    libc.so.6                          0x00002b8834b1e460 __libc_start_main +
    245

    6    tmp3cqgen8n                        0x0000563a40453ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978942
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n  // INSERT YOUR CODE HERE\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: SyntaxError
  stderr: '/tmp/tmpwlndz_ef.swift:12:1: error: missing return in global function expected
    to return ''Int''

    }

    ^

    '
  stdout: ''
  timestamp: 1659978942
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    var min: Int = min(x, y)\n\
    \    var max: Int = max(x, y)\n    var result: Int = -1\n    for i in min...max\
    \ {\n        if i % 2 == 0 {\n            result = i\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y:\
    \ 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33,\
    \ y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmp8jcajpij/tmp8jcajpij.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad02d9e4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad02d6dbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad02d6db988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad02d6da7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8jcajpij                        0x0000559fbe6944ad <unavailable> + 5293

    5    libc.so.6                          0x00002ad02dbd0460 __libc_start_main +
    245

    6    tmp8jcajpij                        0x0000559fbe6940d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659978942
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x > y {\n        return\
    \ -1\n    }\n    else if x % 2 == 0 {\n        return x\n    }\n    else {\n \
    \       return x + 1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(choose_num(x:\
    \ 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmphc5o68xl/tmphc5o68xl.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b93cbb89c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b93cb880b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b93cb880988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b93cb87f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphc5o68xl                        0x000055d7b3a4e24d <unavailable> + 4685

    5    libc.so.6                          0x00002b93cbd75460 __libc_start_main +
    245

    6    tmphc5o68xl                        0x000055d7b3a4def9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978940
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    for i\
    \ in x...y {\n        if i % 2 == 0 {\n            result = i\n        }\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(choose_num(x:\
    \ 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b1240ae6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b12407dd561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b12407dd286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b12407dd13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b12407dcbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp56w7lgfp                        0x0000557b2cde47f0 <unavailable> + 6128

    6    tmp56w7lgfp                        0x0000557b2cde4350 <unavailable> + 4944

    7    libc.so.6                          0x00002b1240cd2460 __libc_start_main +
    245

    8    tmp56w7lgfp                        0x0000557b2cde3fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978941
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    return 0\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmp8zjpprfh/tmp8zjpprfh.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abaa9ca8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abaa999fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abaa999f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abaa999e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8zjpprfh                        0x0000556f512db1bd <unavailable> + 4541

    5    libc.so.6                          0x00002abaa9e94460 __libc_start_main +
    245

    6    tmp8zjpprfh                        0x0000556f512dae69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659978941
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    var num = x\n    while num\
    \ <= y {\n        if num % 2 == 0 {\n            return num\n        }\n     \
    \   num += 1\n    }\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\n\
    assert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233)\
    \ == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10)\
    \ == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546)\
    \ == 546)"
  status: Exception
  stderr: 'tmpvpynibwl/tmpvpynibwl.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5260008c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b525fcffb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b525fcff988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b525fcfe7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvpynibwl                        0x00005616ca27624d <unavailable> + 4685

    5    libc.so.6                          0x00002b52601f4460 __libc_start_main +
    245

    6    tmpvpynibwl                        0x00005616ca275ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978942
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n\t// Put your code here.\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: SyntaxError
  stderr: '/tmp/tmp7_ql75m1.swift:12:1: error: missing return in global function expected
    to return ''Int''

    }

    ^

    '
  stdout: ''
  timestamp: 1659978942
- exit_code: 0
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    // Fill in your code here\n\
    \    var kq = -1\n    if x>y || x<0 || y<0{\n        return kq\n    }\n    else{\n\
    \        for i in x...y{\n            if i%2 == 0{\n                kq = i\n \
    \           }\n        }\n    }\n    return kq\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12)\
    \ == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x: 5234,\
    \ y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978942
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x > y {\n        return\
    \ -1\n    } else if x % 2 == 0 {\n        return x\n    } else {\n        return\
    \ x + 1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12,\
    \ y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmp8_s9177r/tmp8_s9177r.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b14d7114c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b14d6e0bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b14d6e0b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b14d6e0a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8_s9177r                        0x00005603c154024d <unavailable> + 4685

    5    libc.so.6                          0x00002b14d7300460 __libc_start_main +
    245

    6    tmp8_s9177r                        0x00005603c153fef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978940
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n  var big = 0\n  if x > y {\n\
    \    big = x\n  } else {\n    big = y\n  }\n  for num in x...big {\n    if num\
    \ % 2 == 0 {\n      return num\n    }\n  }\n  return -1\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpwudne6ae/tmpwudne6ae.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b553599ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5535691b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5535691988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b55356907b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwudne6ae                        0x000055d9d0beb33d <unavailable> + 4925

    5    libc.so.6                          0x00002b5535b86460 __libc_start_main +
    245

    6    tmpwudne6ae                        0x000055d9d0beafe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978942
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n\tif x > y {\n\t\treturn -1\n\t\
    }\n\tif x % 2 == 0 {\n\t\treturn x\n\t}\n\treturn choose_num(x: x + 1, y: y)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpq9r97sy_/tmpq9r97sy_.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b404561bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4045312b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4045312988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b40453117b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpq9r97sy_                        0x000056513c1e924d <unavailable> + 4685

    5    libc.so.6                          0x00002b4045807460 __libc_start_main +
    245

    6    tmpq9r97sy_                        0x000056513c1e8ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978942
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if y <= x {\n        return\
    \ -1\n    }\n    if y % 2 == 0 {\n        return y\n    }\n    return y - 1\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpoyiqk4r5/tmpoyiqk4r5.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b084a987c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b084a67eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b084a67e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b084a67d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpoyiqk4r5                        0x000055e9fc1ed5de <unavailable> + 5598

    5    libc.so.6                          0x00002b084ab73460 __libc_start_main +
    245

    6    tmpoyiqk4r5                        0x000055e9fc1ecef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978942
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    var n = x\n    while n <=\
    \ y {\n        if n % 2 == 0 {\n            return n\n        }\n        n +=\
    \ 1\n    }\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(choose_num(x:\
    \ 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpcrknaph7/tmpcrknaph7.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad2c8d52c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad2c8a49b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad2c8a49988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad2c8a487b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcrknaph7                        0x00005631c551524d <unavailable> + 4685

    5    libc.so.6                          0x00002ad2c8f3e460 __libc_start_main +
    245

    6    tmpcrknaph7                        0x00005631c5514ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978943
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if (x >= y) {\n        return\
    \ -1\n    }\n    else if (x % 2 == 0) {\n        return x\n    }\n    else {\n\
    \        return x + 1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(choose_num(x:\
    \ 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpqt5gkah0/tmpqt5gkah0.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abb9e855c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abb9e54cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abb9e54c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abb9e54b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqt5gkah0                        0x00005557f19dc24d <unavailable> + 4685

    5    libc.so.6                          0x00002abb9ea41460 __libc_start_main +
    245

    6    tmpqt5gkah0                        0x00005557f19dbef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978942
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x > y {\n        return\
    \ -1\n    }\n    var biggestEvenNum = x\n    for i in x + 1...y {\n        if\
    \ (i % 2 == 0) && (i > biggestEvenNum) {\n            biggestEvenNum = i\n   \
    \     }\n    }\n    return biggestEvenNum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12)\
    \ == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x: 5234,\
    \ y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002ba1c8eafc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba1c8ba6561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ba1c8ba6286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ba1c8ba613c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ba1c8ba5bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmprwxjbfi0                        0x00005627d3007822 <unavailable> + 6178

    6    tmprwxjbfi0                        0x00005627d30075d0 <unavailable> + 5584

    7    libc.so.6                          0x00002ba1c909b460 __libc_start_main +
    245

    8    tmprwxjbfi0                        0x00005627d3006fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978943
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    return -1\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpnsqdd4tj/tmpnsqdd4tj.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b16eb55bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b16eb252b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b16eb252988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b16eb2517b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnsqdd4tj                        0x00005586a53f51bd <unavailable> + 4541

    5    libc.so.6                          0x00002b16eb747460 __libc_start_main +
    245

    6    tmpnsqdd4tj                        0x00005586a53f4e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659978940
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    return -1\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpnsqdd4tj/tmpnsqdd4tj.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b16eb55bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b16eb252b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b16eb252988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b16eb2517b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnsqdd4tj                        0x00005586a53f51bd <unavailable> + 4541

    5    libc.so.6                          0x00002b16eb747460 __libc_start_main +
    245

    6    tmpnsqdd4tj                        0x00005586a53f4e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659978940
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    if x%2\
    \ == 0 {\n        result = x\n    } else if x+1 <= y {\n        result = x+1\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(choose_num(x:\
    \ 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmp7g7shy5t/tmp7g7shy5t.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7caec06c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7cae8fdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7cae8fd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7cae8fc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7g7shy5t                        0x000055ae5b53724d <unavailable> + 4685

    5    libc.so.6                          0x00002b7caedf2460 __libc_start_main +
    245

    6    tmp7g7shy5t                        0x000055ae5b536ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978943
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    var number: Int\n    if (x%2\
    \ == 0) {\n        number = x\n    } else {\n        number = x+1\n    }\n   \
    \ while (number<=y) {\n        if (number%2 == 0) {\n            return number\n\
    \        }\n        number = number+1\n    }\n    return -1\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpw9j0kugn/tmpw9j0kugn.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4bdb836c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4bdb52db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4bdb52d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4bdb52c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw9j0kugn                        0x000056213eedb24d <unavailable> + 4685

    5    libc.so.6                          0x00002b4bdba22460 __libc_start_main +
    245

    6    tmpw9j0kugn                        0x000056213eedaef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978943
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x > y {\n        return\
    \ -1\n    }\n    else if x % 2 == 0 {\n        return x\n    }\n    else {\n \
    \       return x+1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(choose_num(x:\
    \ 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpftottjku/tmpftottjku.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6decae0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6dec7d7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6dec7d7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6dec7d67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpftottjku                        0x00005570539e724d <unavailable> + 4685

    5    libc.so.6                          0x00002b6decccc460 __libc_start_main +
    245

    6    tmpftottjku                        0x00005570539e6ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978943
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    for i in x...y {\n       \
    \ if i % 2 == 0 {\n            return i\n        }\n    }\n    return -1\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmp1qxcnmkf/tmp1qxcnmkf.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5129f39c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5129c30b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5129c30988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5129c2f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1qxcnmkf                        0x00005564867ac33d <unavailable> + 4925

    5    libc.so.6                          0x00002b512a125460 __libc_start_main +
    245

    6    tmp1qxcnmkf                        0x00005564867abfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978941
- exit_code: 0
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n\tvar maxEven = -1\n\t\n\tif x\
    \ > y {\n\t\treturn -1\n\t}\n\t\n\tfor i in x...y {\n\t\tif i % 2 == 0 {\n\t\t\
    \tmaxEven = i\n\t\t}\n\t}\n\t\n\treturn maxEven\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12)\
    \ == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x: 5234,\
    \ y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978943
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x == y {\n        if x\
    \ % 2 == 0 {\n            return x\n        } else {\n            return -1\n\
    \        }\n    } else if x > y {\n        return -1\n    } else {\n        var\
    \ i = x\n        while (i <= y) {\n            if i % 2 == 0 {\n             \
    \   return i\n            }\n            i += 1\n        }\n        return -1\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y: 15)\
    \ == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33, y:\
    \ 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpvf_ugr9z/tmpvf_ugr9z.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae01d26dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae01cf64b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae01cf64988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae01cf637b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvf_ugr9z                        0x000055a4ac99f24d <unavailable> + 4685

    5    libc.so.6                          0x00002ae01d459460 __libc_start_main +
    245

    6    tmpvf_ugr9z                        0x000055a4ac99eef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978943
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x > y {\n        return\
    \ -1\n    }\n    if x % 2 == 0 {\n        return x\n    }\n    return choose_num(x:\
    \ x + 1, y: y)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12,\
    \ y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmphmmy4jpa/tmphmmy4jpa.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aded37d9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aded34d0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aded34d0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aded34cf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphmmy4jpa                        0x00005654f163c24d <unavailable> + 4685

    5    libc.so.6                          0x00002aded39c5460 __libc_start_main +
    245

    6    tmphmmy4jpa                        0x00005654f163bef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978942
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n  var maxEven = -1\n\n  for i\
    \ in x...y {\n    if i % 2 == 0 {\n      maxEven = i\n    }\n  }\n\n  return maxEven\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b93794aac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b93791a1561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b93791a1286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b93791a113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b93791a0bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpqdnvnkqq                        0x0000559e57b597f0 <unavailable> + 6128

    6    tmpqdnvnkqq                        0x0000559e57b59350 <unavailable> + 4944

    7    libc.so.6                          0x00002b9379696460 __libc_start_main +
    245

    8    tmpqdnvnkqq                        0x0000559e57b58fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978943
- exit_code: 0
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    var num: Int = -1;\n    if(x\
    \ <= y) {\n        for i in x...y {\n            if(i % 2 == 0) {\n          \
    \      num = i;\n            }\n        }\n    }\n    return num;\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978943
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    // Your code here\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: SyntaxError
  stderr: '/tmp/tmpy2tnwnm6.swift:12:1: error: missing return in global function expected
    to return ''Int''

    }

    ^

    '
  stdout: ''
  timestamp: 1659978943
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    var chosen_num = -1\n    var\
    \ found = false\n    if x < y {\n        var i = x\n        while (i <= y) {\n\
    \            if (i % 2 == 0) {\n                chosen_num = i\n             \
    \   found = true\n            }\n            i += 1\n        }\n    }\n    if\
    \ !found {\n        chosen_num = -1\n    }\n    return chosen_num\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpx2xokywo/tmpx2xokywo.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b67a7bf2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b67a78e9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b67a78e9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b67a78e87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx2xokywo                        0x000055ecffd035de <unavailable> + 5598

    5    libc.so.6                          0x00002b67a7dde460 __libc_start_main +
    245

    6    tmpx2xokywo                        0x000055ecffd02ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978943
