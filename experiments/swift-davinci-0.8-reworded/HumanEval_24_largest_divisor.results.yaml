language: swift
name: HumanEval_24_largest_divisor
results:
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    for i in (1...n/2).reversed() {\n        if n % i == 0 {\n\
    \            return i\n        }\n    }\n    return 1\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7)\
    \ == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) ==\
    \ 50)\nassert(largest_divisor(n: 49) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978441
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var max_divisor = n / 2\n    var i = max_divisor\n    while\
    \ i > 1 {\n        if n % i == 0 {\n            max_divisor = i\n            break\n\
    \        }\n        i -= 1\n    }\n    return max_divisor\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmph1q27jlh/tmph1q27jlh.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b859028dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b858ff84b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b858ff84988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b858ff837b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmph1q27jlh                        0x000055faa06da2c0 <unavailable> + 4800

    5    libc.so.6                          0x00002b8590479460 __libc_start_main +
    245

    6    tmph1q27jlh                        0x000055faa06d9ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978441
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    if n <= 1 {\n        return n\n    }\n    var l = n / 2\n\
    \    while l > 1 {\n        if n % l == 0 {\n            return l\n        }\n\
    \        l -= 1\n    }\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n:\
    \ 10) == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n:\
    \ 49) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978441
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var divisor = n\n    while divisor > 0 {\n        if n %\
    \ divisor == 0 {\n            return divisor\n        }\n        divisor -= 1\n\
    \    }\n    return 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'tmp1brp6fhn/tmp1brp6fhn.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad19a7c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad19a4b9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad19a4b9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad19a4b87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1brp6fhn                        0x000056148f795245 <unavailable> + 4677

    5    libc.so.6                          0x00002ad19a9ae460 __libc_start_main +
    245

    6    tmp1brp6fhn                        0x000056148f794ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978441
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    let limit = Int(floor(sqrt(Double(n))))\n    for i in (1...limit).reversed()\
    \ {\n        if n % i == 0 {\n            return i\n        }\n    }\n    return\
    \ n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(largest_divisor(n: 3) == 1)\n\
    assert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n:\
    \ 100) == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpfyv5ubh0.swift:6:21: error: cannot find 'floor' in scope\n    let\
    \ limit = Int(floor(sqrt(Double(n))))\n                    ^~~~~\n/tmp/tmpfyv5ubh0.swift:6:27:\
    \ error: cannot find 'sqrt' in scope\n    let limit = Int(floor(sqrt(Double(n))))\n\
    \                          ^~~~\n"
  stdout: ''
  timestamp: 1659978441
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest_divisor: Int = 1\n    for index in (2...n/2).reversed()\
    \ {\n        if n % index == 0 {\n            largest_divisor = index\n      \
    \      break\n        }\n    }\n    return largest_divisor\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002ab92136bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab921062561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ab921062286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ab92106213c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ab921061bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp9pbbonc3                        0x000055cbbf169910 <unavailable> + 6416

    6    tmp9pbbonc3                        0x000055cbbf169498 <unavailable> + 5272

    7    libc.so.6                          0x00002ab921557460 __libc_start_main +
    245

    8    tmp9pbbonc3                        0x000055cbbf1691b9 <unavailable> + 4537

    '
  stdout: ''
  timestamp: 1659978441
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n  for i in (1...n/2).reversed() {\n    if n % i == 0 {\n    \
    \  return i\n    }\n  }\n  return 1\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n:\
    \ 10) == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n:\
    \ 49) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978441
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    for i in (1...n/2).reversed() {\n        if n % i == 0 {\n\
    \            return i\n        }\n    }\n    return 1\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7)\
    \ == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) ==\
    \ 50)\nassert(largest_divisor(n: 49) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978441
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = 1\n    var i = 1\n    while i <= n {\n    \
    \    if n % i == 0 {\n            largest = i\n        }\n        i += 1\n   \
    \ }\n    return largest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'tmp8cl59_2t/tmp8cl59_2t.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b054e97dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b054e674b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b054e674988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b054e6737b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8cl59_2t                        0x000055aacdd33245 <unavailable> + 4677

    5    libc.so.6                          0x00002b054eb69460 __libc_start_main +
    245

    6    tmp8cl59_2t                        0x000055aacdd32ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978441
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = 1\n    for i in 2...n/2 {\n        if n % i\
    \ == 0 {\n            largest = i\n        }\n    }\n    return largest\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002ac25a8fec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac25a5f5561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ac25a5f5286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ac25a5f513c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ac25a5f4bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpkxlxwow1                        0x000055a1eef066c9 <unavailable> + 5833

    6    tmpkxlxwow1                        0x000055a1eef062c8 <unavailable> + 4808

    7    libc.so.6                          0x00002ac25aaea460 __libc_start_main +
    245

    8    tmpkxlxwow1                        0x000055a1eef05fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978441
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    // \u0432\u0430\u0448 \u043A\u043E\u0434 \u0442\u0443\u0442\
    \n    for i in (1..<n).reversed() {\n        if n % i == 0 {\n            return\
    \ i\n        }\n    }\n    return n\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n:\
    \ 10) == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n:\
    \ 49) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978441
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    if n == 0 {\n        return 1\n    }\n    var result = 1\n\
    \    for i in 2..<n {\n        if n % i == 0 {\n            result = i\n     \
    \   }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978441
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    if n <= 1 {\n        return 0\n    }\n    var largest = 1\n\
    \    for i in 2..<n {\n        if n % i == 0 {\n            largest = i\n    \
    \    }\n    }\n    return largest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978441
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var curr = n\n    while curr > 0 {\n        if n % curr ==\
    \ 0 {\n            return curr\n        }\n        curr -= 1\n    }\n    return\
    \ 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(largest_divisor(n: 3) == 1)\n\
    assert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n:\
    \ 100) == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpo4l89ols/tmpo4l89ols.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7cc41dcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7cc3ed3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7cc3ed3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7cc3ed27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo4l89ols                        0x0000561e31911245 <unavailable> + 4677

    5    libc.so.6                          0x00002b7cc43c8460 __libc_start_main +
    245

    6    tmpo4l89ols                        0x0000561e31910ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978441
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest_divisor: Int = 1\n    for x in 2...n {\n    \
    \    if n % x == 0 {\n            largest_divisor = x\n        }\n    }\n    return\
    \ largest_divisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'tmp4fy53pmk/tmp4fy53pmk.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b390b913c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b390b60ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b390b60a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b390b6097b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4fy53pmk                        0x000055bb0fde9335 <unavailable> + 4917

    5    libc.so.6                          0x00002b390baff460 __libc_start_main +
    245

    6    tmp4fy53pmk                        0x000055bb0fde8fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978441
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    if n == 1 {\n        return 1\n    }\n    for i in (1...n-1).reversed()\
    \ {\n        if n % i == 0 {\n            return i\n        }\n    }\n    return\
    \ 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(largest_divisor(n: 3) == 1)\n\
    assert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n:\
    \ 100) == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978441
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var n = n\n    if n == 0 {\n        return 0\n    }\n   \
    \ var largest = 0\n    for i in 1...n {\n        if n % i == 0 {\n           \
    \ largest = i\n        }\n    }\n    return largest\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7)\
    \ == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) ==\
    \ 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpqiu7y1v0/tmpqiu7y1v0.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9e94995c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9e9468cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9e9468c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9e9468b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqiu7y1v0                        0x0000556f43530335 <unavailable> + 4917

    5    libc.so.6                          0x00002b9e94b81460 __libc_start_main +
    245

    6    tmpqiu7y1v0                        0x0000556f4352ffe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978441
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = 1\n    for i in 2..<n {\n        if n % i ==\
    \ 0 {\n            largest = i\n        }\n    }\n    return largest\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978441
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    return (1..<n).reversed().first { n % $0 == 0 }!\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978441
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n  var num = n\n  while (num >= 2) {\n    if (n % num == 0) {\n\
    \      return num\n    }\n    num -= 1\n  }\n  return 0\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpnwxyl5is/tmpnwxyl5is.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad7bf655c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad7bf34cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad7bf34c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad7bf34b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnwxyl5is                        0x000055e5d4fb0245 <unavailable> + 4677

    5    libc.so.6                          0x00002ad7bf841460 __libc_start_main +
    245

    6    tmpnwxyl5is                        0x000055e5d4fafef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978441
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var divisor = 2\n    while n % divisor != 0 {\n        divisor\
    \ += 1\n    }\n    return divisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'tmpdjipp2jh/tmpdjipp2jh.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaf2b0bdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaf2adb4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaf2adb4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaf2adb37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdjipp2jh                        0x000055f3879ae245 <unavailable> + 4677

    5    libc.so.6                          0x00002aaf2b2a9460 __libc_start_main +
    245

    6    tmpdjipp2jh                        0x000055f3879adef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978441
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'tmptbi0j9e_/tmptbi0j9e_.swift:22: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b95596e9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b95593e0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b95593e0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b95593df7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptbi0j9e_                        0x000055cbad7aa1b5 <unavailable> + 4533

    5    libc.so.6                          0x00002b95598d5460 __libc_start_main +
    245

    6    tmptbi0j9e_                        0x000055cbad7a9e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659978441
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    for i in (1..<n).reversed() {\n        if n % i == 0 {\n\
    \            return i\n        }\n    }\n    return 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7)\
    \ == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) ==\
    \ 50)\nassert(largest_divisor(n: 49) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978441
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = 1\n    for i in (1...Int(sqrt(Double(n)))).reversed()\
    \ {\n        if n % i == 0 {\n            largestDivisor = i\n            break\n\
    \        }\n    }\n    return largestDivisor\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7) == 1)\n\
    assert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n:\
    \ 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpq4w49qb3.swift:7:23: error: cannot find 'sqrt' in scope\n    for\
    \ i in (1...Int(sqrt(Double(n)))).reversed() {\n                      ^~~~\n"
  stdout: ''
  timestamp: 1659978441
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    for i in (1..<n).reversed() {\n        if n % i == 0 {\n\
    \            return i\n        }\n    }\n    return 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7)\
    \ == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) ==\
    \ 50)\nassert(largest_divisor(n: 49) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978441
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var divisor = n - 1\n    while n % divisor != 0 {\n     \
    \   divisor -= 1\n    }\n    return divisor\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7) == 1)\n\
    assert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n:\
    \ 49) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978441
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    if n == 1 {\n        return 0\n    }\n    for i in (1...n).reversed()\
    \ {\n        if n % i == 0 {\n            return i\n        }\n    }\n    return\
    \ 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(largest_divisor(n: 3) == 1)\n\
    assert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n:\
    \ 100) == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmp4dcakwyi/tmp4dcakwyi.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2d6a35ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2d6a055b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2d6a055988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2d6a0547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4dcakwyi                        0x000055b4b89c8505 <unavailable> + 5381

    5    libc.so.6                          0x00002b2d6a54a460 __libc_start_main +
    245

    6    tmp4dcakwyi                        0x000055b4b89c81b9 <unavailable> + 4537

    '
  stdout: ''
  timestamp: 1659978441
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest_divisor = 0\n    for i in 1...n {\n        if\
    \ n % i == 0 {\n            largest_divisor = i\n        }\n    }\n    return\
    \ largest_divisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'tmpmae9y40z/tmpmae9y40z.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5fa9f16c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5fa9c0db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5fa9c0d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5fa9c0c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmae9y40z                        0x0000558aedda7335 <unavailable> + 4917

    5    libc.so.6                          0x00002b5faa102460 __libc_start_main +
    245

    6    tmpmae9y40z                        0x0000558aedda6fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978441
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest_divisor = 0\n    var i = n - 1\n    while i >\
    \ 0 {\n        if n % i == 0 {\n            largest_divisor = i\n            break\n\
    \        }\n        i -= 1\n    }\n    return largest_divisor\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978441
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    for i in (2...n/2).reversed() {\n        if n % i == 0 {\n\
    \            return i\n        }\n    }\n    return 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7)\
    \ == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) ==\
    \ 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002acf688dbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acf685d2561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002acf685d2286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002acf685d213c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002acf685d1bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmple7orej5                        0x000055afaa1bd8ec <unavailable> + 6380

    6    tmple7orej5                        0x000055afaa1bd498 <unavailable> + 5272

    7    libc.so.6                          0x00002acf68ac7460 __libc_start_main +
    245

    8    tmple7orej5                        0x000055afaa1bd1b9 <unavailable> + 4537

    '
  stdout: ''
  timestamp: 1659978441
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    for i in (1...n-1).reversed() {\n        if n % i == 0 {\n\
    \            return i\n        }\n    }\n    return n\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7)\
    \ == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) ==\
    \ 50)\nassert(largest_divisor(n: 49) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978441
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = 1\n    var x = n / 2\n    while x >\
    \ 1 {\n        if n % x == 0 {\n            largestDivisor = x\n            break\n\
    \        }\n        x -= 1\n    }\n    return largestDivisor\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978441
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var divisor = n - 1\n    while divisor > 0 {\n        if\
    \ n % divisor == 0 {\n            return divisor\n        }\n        divisor -=\
    \ 1\n    }\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978441
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var m = n - 1\n    while n % m != 0 {\n        m -= 1\n \
    \   }\n    return m\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978441
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var divisor = 2\n    var largest_divisor = 1\n    while divisor\
    \ < n {\n        if n % divisor == 0 {\n            largest_divisor = divisor\n\
    \        }\n        divisor += 1\n    }\n    return largest_divisor\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978441
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = n - 1\n    var divisor = largest\n    while\
    \ divisor > 0 {\n        if n % divisor == 0 {\n            largest = divisor\n\
    \            break\n        }\n        divisor -= 1\n    }\n    return largest\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978441
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var divisor = n - 1\n    while divisor > 0 {\n        if\
    \ n % divisor == 0 {\n            return divisor\n        }\n        divisor -=\
    \ 1\n    }\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978441
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    if n % 2 == 0 {\n        return largest_divisor(n: n / 2)\n\
    \    }\n    return 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'tmpvpzfvbls/tmpvpzfvbls.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7379db1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7379aa8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7379aa8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7379aa77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvpzfvbls                        0x000056466bb6133b <unavailable> + 4923

    5    libc.so.6                          0x00002b7379f9d460 __libc_start_main +
    245

    6    tmpvpzfvbls                        0x000056466bb60ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978441
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    if n == 1 {\n        return 0\n    }\n    var divisor = 2\n\
    \    while divisor < n {\n        if n % divisor == 0 {\n            return n\
    \ / divisor\n        }\n        divisor += 1\n    }\n    return 0\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpmht16exw/tmpmht16exw.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7e2c12ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7e2be21b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7e2be21988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7e2be207b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmht16exw                        0x000055c54f108245 <unavailable> + 4677

    5    libc.so.6                          0x00002b7e2c316460 __libc_start_main +
    245

    6    tmpmht16exw                        0x000055c54f107ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978441
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    \n    let upperbound = Int(ceil(sqrt(Double(n))))\n    \n\
    \    if n % 2 == 0 {\n        return n / 2\n    }\n    \n    for i in (3...upperbound).reversed()\
    \ {\n        if n % i == 0 {\n            return i\n        }\n    }\n    \n \
    \   return 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: SyntaxError
  stderr: "/tmp/tmphpk4pv18.swift:7:26: error: cannot find 'ceil' in scope\n    let\
    \ upperbound = Int(ceil(sqrt(Double(n))))\n                         ^~~~\n/tmp/tmphpk4pv18.swift:7:31:\
    \ error: cannot find 'sqrt' in scope\n    let upperbound = Int(ceil(sqrt(Double(n))))\n\
    \                              ^~~~\n"
  stdout: ''
  timestamp: 1659978441
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var current_divisor = n - 1\n    while current_divisor >\
    \ 0 {\n        if n % current_divisor == 0 {\n            return current_divisor\n\
    \        }\n        current_divisor -= 1\n    }\n    return 1\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978441
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var num = 2\n    while num < n {\n        if n % num == 0\
    \ {\n            return num\n        }\n        num += 1\n    }\n    return n\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmp7q0u2n7q/tmp7q0u2n7q.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0502015c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0501d0cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0501d0c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0501d0b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7q0u2n7q                        0x000056242d5e9245 <unavailable> + 4677

    5    libc.so.6                          0x00002b0502201460 __libc_start_main +
    245

    6    tmp7q0u2n7q                        0x000056242d5e8ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978441
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    for i in (1...n).reversed() {\n        if n % i == 0 {\n\
    \            return i\n        }\n    }\n    return 1\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7)\
    \ == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) ==\
    \ 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmp4_beim_v/tmp4_beim_v.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b56500acc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b564fda3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b564fda3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b564fda27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4_beim_v                        0x000055ccb9ba6505 <unavailable> + 5381

    5    libc.so.6                          0x00002b5650298460 __libc_start_main +
    245

    6    tmp4_beim_v                        0x000055ccb9ba61b9 <unavailable> + 4537

    '
  stdout: ''
  timestamp: 1659978441
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    let last_index = Array(stride(from: 2, to: n / 2, by: 1)).count\n\
    \    let numbers = Array(stride(from: 2, to: n / 2, by: 1))\n    for n in numbers[0..<last_index]\
    \ {\n        if n % n == 0 {\n            return n\n        }\n    }\n    return\
    \ 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(largest_divisor(n: 3) == 1)\n\
    assert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n:\
    \ 100) == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmp2o29yqez/tmp2o29yqez.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9013ff6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9013cedb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9013ced988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9013cec7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2o29yqez                        0x000055f5153016e0 <unavailable> + 5856

    5    libc.so.6                          0x00002b90141e2460 __libc_start_main +
    245

    6    tmp2o29yqez                        0x000055f515301319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659978441
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    // Iterate through all the divisors of n, starting from n/2\n\
    \    // This is a very time intensive solution\n    // Searching upto n/2 only\
    \ would be more efficient\n    for i in (1...n).reversed() {\n        if n % i\
    \ == 0 {\n            return i\n        }\n    }\n    return 1\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmptq8sji_k/tmptq8sji_k.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b050aa42c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b050a739b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b050a739988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b050a7387b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptq8sji_k                        0x000056215e40a505 <unavailable> + 5381

    5    libc.so.6                          0x00002b050ac2e460 __libc_start_main +
    245

    6    tmptq8sji_k                        0x000056215e40a1b9 <unavailable> + 4537

    '
  stdout: ''
  timestamp: 1659978441
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    if n <= 1 {\n        return n\n    }\n    var x = n\n   \
    \ while true {\n        x -= 1\n        if n % x == 0 {\n            return x\n\
    \        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978441
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    for i in (2..<n).reversed() {\n        if n % i == 0 {\n\
    \            return i\n        }\n    }\n    return 1\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7)\
    \ == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) ==\
    \ 50)\nassert(largest_divisor(n: 49) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978441
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = 0\n    for i in 2..<n {\n        if n % i ==\
    \ 0 {\n            largest = i\n        }\n    }\n    return largest\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpdjdaqfyr/tmpdjdaqfyr.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9d807a3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9d8049ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9d8049a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9d804997b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdjdaqfyr                        0x000055e5c3083335 <unavailable> + 4917

    5    libc.so.6                          0x00002b9d8098f460 __libc_start_main +
    245

    6    tmpdjdaqfyr                        0x000055e5c3082fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978441
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    // Guard against 0.\n    guard n != 0 else { return 0 }\n\
    \    \n    // Initialize the range of possible factors to check.\n    var i =\
    \ 1\n    var j = n\n    \n    // Largest divisor starts as 1.\n    var largest_divisor\
    \ = 1\n    \n    // Check all factors within the range.\n    for i in stride(from:\
    \ i, to: j + 1, by: 1) {\n        if n % i == 0 {\n            largest_divisor\
    \ = i\n        }\n    }\n    \n    return largest_divisor\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpbkenrhsd/tmpbkenrhsd.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1945bd6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b19458cdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b19458cd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b19458cc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbkenrhsd                        0x000055c628659455 <unavailable> + 5205

    5    libc.so.6                          0x00002b1945dc2460 __libc_start_main +
    245

    6    tmpbkenrhsd                        0x000055c628659109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1659978441
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    \n    let root: Double = Double(n).squareRoot()\n    for\
    \ factor in (2...Int(root)).reversed() {\n        if n % factor == 0 {\n     \
    \       return factor\n        }\n    }\n    return 1\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7)\
    \ == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) ==\
    \ 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: 'error: link command failed with exit code 1 (use -v to see invocation)

    /tmp/TemporaryDirectory.8I379Q/tmp14vmcknj-1.o:tmp14vmcknj-1.o:function $s11tmp14vmcknj15largest_divisor1nS2i_tF:
    error: undefined reference to ''sqrt''

    clang-13: error: linker command failed with exit code 1 (use -v to see invocation)

    '
  stdout: ''
  timestamp: 1659978441
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var max_divisor = n-1;\n    while (n % max_divisor != 0)\
    \ {\n        max_divisor -= 1;\n    }\n    return max_divisor;\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978441
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    for index in (1...n/2).reversed() {\n        if n % index\
    \ == 0 {\n            return index\n        }\n    }\n    return 1\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978441
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = 1\n    for i in 2...n/2 {\n        if n % i\
    \ == 0 {\n            largest = i\n        }\n    }\n    return largest\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002ac25a8fec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac25a5f5561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ac25a5f5286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ac25a5f513c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ac25a5f4bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpkxlxwow1                        0x000055a1eef066c9 <unavailable> + 5833

    6    tmpkxlxwow1                        0x000055a1eef062c8 <unavailable> + 4808

    7    libc.so.6                          0x00002ac25aaea460 __libc_start_main +
    245

    8    tmpkxlxwow1                        0x000055a1eef05fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978441
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    for i in (1...n).reversed() {\n        if n % i == 0 {\n\
    \            return i\n        }\n    }\n    return 1\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7)\
    \ == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) ==\
    \ 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmp4_beim_v/tmp4_beim_v.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b56500acc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b564fda3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b564fda3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b564fda27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4_beim_v                        0x000055ccb9ba6505 <unavailable> + 5381

    5    libc.so.6                          0x00002b5650298460 __libc_start_main +
    245

    6    tmp4_beim_v                        0x000055ccb9ba61b9 <unavailable> + 4537

    '
  stdout: ''
  timestamp: 1659978441
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var i = n - 1\n    while n % i != 0 {\n        i -= 1\n \
    \   }\n    return i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978441
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var max = n\n    for i in (1...n/2).reversed() {\n      \
    \  if n % i == 0 {\n            max = i\n            break\n        }\n    }\n\
    \    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978442
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = 1\n    var i = 1\n    while (i < n)\
    \ {\n        if (n % i == 0) {\n            largestDivisor = i\n        }\n  \
    \      i += 1\n    }\n    return largestDivisor\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7) == 1)\n\
    assert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n:\
    \ 49) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978441
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var divisor = n - 1\n    while (n % divisor != 0) {\n   \
    \     divisor -= 1\n    }\n    return divisor\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7) == 1)\n\
    assert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n:\
    \ 49) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978441
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = 1\n    var d = 2\n    while d < n {\n     \
    \   if n % d == 0 {\n            largest = d\n        }\n        d += 1\n    }\n\
    \    return largest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978442
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = 0\n    for i in 2...n {\n        if n % i ==\
    \ 0 {\n            largest = i\n        }\n    }\n    return largest\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpo4bf3wgm/tmpo4bf3wgm.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b42b7dfec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b42b7af5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b42b7af5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b42b7af47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo4bf3wgm                        0x0000559f17c10335 <unavailable> + 4917

    5    libc.so.6                          0x00002b42b7fea460 __libc_start_main +
    245

    6    tmpo4bf3wgm                        0x0000559f17c0ffe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978442
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    if n % 2 == 0 {\n        return n / 2\n    }\n    var largest\
    \ = 1\n    for i in stride(from: 3, through: Int(sqrt(Double(n))), by: 2) {\n\
    \        if n % i == 0 {\n            largest = i\n        }\n    }\n    return\
    \ largest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(largest_divisor(n: 3)\
    \ == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10) ==\
    \ 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49) ==\
    \ 7)"
  status: SyntaxError
  stderr: "/tmp/tmpdhe85i12.swift:10:43: error: cannot find 'sqrt' in scope\n    for\
    \ i in stride(from: 3, through: Int(sqrt(Double(n))), by: 2) {\n             \
    \                             ^~~~\n"
  stdout: ''
  timestamp: 1659978441
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var divisor = n - 1\n    while (n % divisor != 0) {\n   \
    \     divisor -= 1\n    }\n    return divisor\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7) == 1)\n\
    assert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n:\
    \ 49) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978441
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = 1\n    for i in 1...n/2 {\n        if n % i\
    \ == 0 {\n            largest = i\n        }\n    }\n    return largest\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978442
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    if n == 0 {\n        return -1\n    }\n    var c = n\n  \
    \  while c > 0 {\n        c -= 1\n        if n % c == 0 {\n            return\
    \ c\n        }\n    }\n    return n\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n:\
    \ 10) == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n:\
    \ 49) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978442
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var divisor = n / 2\n    while n % divisor != 0 {\n     \
    \   divisor -= 1\n    }\n    return divisor\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7) == 1)\n\
    assert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n:\
    \ 49) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978442
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    // \n    return 1\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n:\
    \ 10) == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n:\
    \ 49) == 7)"
  status: Exception
  stderr: 'tmpjpsyeq1f/tmpjpsyeq1f.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b82ce190c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b82cde87b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b82cde87988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b82cde867b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjpsyeq1f                        0x00005620a69332ab <unavailable> + 4779

    5    libc.so.6                          0x00002b82ce37c460 __libc_start_main +
    245

    6    tmpjpsyeq1f                        0x00005620a6932e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659978442
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    for i in 2...n-1 {\n        if n % i == 0 {\n           \
    \ return i\n        }\n    }\n    return 1\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7) == 1)\n\
    assert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n:\
    \ 49) == 7)"
  status: Exception
  stderr: 'tmpkf2xzm7e/tmpkf2xzm7e.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b811dbbfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b811d8b6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b811d8b6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b811d8b57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkf2xzm7e                        0x00005581e27e942b <unavailable> + 5163

    5    libc.so.6                          0x00002b811ddab460 __libc_start_main +
    245

    6    tmpkf2xzm7e                        0x00005581e27e8fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978442
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    if n <= 1 {\n        return 0\n    }\n    for i in (1...n/2).reversed()\
    \ {\n        if n % i == 0 {\n            return i\n        }\n    }\n    return\
    \ 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(largest_divisor(n: 3) == 1)\n\
    assert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n:\
    \ 100) == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978442
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = 0\n    for i in 2...n/2 {\n        if n % i\
    \ == 0 {\n            largest = i\n        }\n    }\n    return largest\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b0f08cb8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0f089af561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b0f089af286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b0f089af13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b0f089aebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpk_0gslu4                        0x000055f391ba46c9 <unavailable> + 5833

    6    tmpk_0gslu4                        0x000055f391ba42c8 <unavailable> + 4808

    7    libc.so.6                          0x00002b0f08ea4460 __libc_start_main +
    245

    8    tmpk_0gslu4                        0x000055f391ba3fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978442
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n  let n_int = n\n  var i = n_int - 1\n  while i > 0 {\n    if\
    \ n_int % i == 0 {\n      return i\n    }\n    i -= 1\n  }\n  return 0\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978442
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    for i in (1...(n-1)).reversed() {\n        if n % i == 0\
    \ {\n            return i\n        }\n    }\n    return 1\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978442
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = n\n    for i in stride(from: n-1, through:\
    \ 1, by: -1) {\n        if n % i == 0 {\n            largestDivisor = i\n    \
    \        break\n        }\n    }\n    return largestDivisor\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978442
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n  var largest = 1\n  for x in 2...(n / 2) {\n    if n % x ==\
    \ 0 {\n      largest = x\n    }\n  }\n  return largest\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7)\
    \ == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) ==\
    \ 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002adafce0ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adafcb01561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002adafcb01286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002adafcb0113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002adafcb00bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp6nc8av6s                        0x000055ec90d696c9 <unavailable> + 5833

    6    tmp6nc8av6s                        0x000055ec90d692c8 <unavailable> + 4808

    7    libc.so.6                          0x00002adafcff6460 __libc_start_main +
    245

    8    tmp6nc8av6s                        0x000055ec90d68fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978442
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    for i in stride(from: n-1, through: 2, by: -1) {\n      \
    \  if n % i == 0 {\n            return i\n        }\n    }\n    return 1\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978442
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var ld = 1\n    for var i = 2; i <= n/2; i++ {\n        if\
    \ n % i == 0 {\n            ld = i\n        }\n    }\n    return ld\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpkoo4v3yh.swift:7:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for var i = 2; i <= n/2; i++ {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978441
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = 1\n    let sqrt_n = Int(Double(n).squareRoot())\n\
    \    for i in 2...sqrt_n {\n        if n % i == 0 {\n            largest = i\n\
    \        }\n    }\n    return largest\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n:\
    \ 10) == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n:\
    \ 49) == 7)"
  status: SyntaxError
  stderr: 'error: link command failed with exit code 1 (use -v to see invocation)

    /tmp/TemporaryDirectory.efmRyb/tmpo3z4abbs-1.o:tmpo3z4abbs-1.o:function $s11tmpo3z4abbs15largest_divisor1nS2i_tF:
    error: undefined reference to ''sqrt''

    clang-13: error: linker command failed with exit code 1 (use -v to see invocation)

    '
  stdout: ''
  timestamp: 1659978442
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    for i in (1...n/2).reversed() {\n        if n % i == 0 {\n\
    \            return i\n        }\n    }\n    return 1\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7)\
    \ == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) ==\
    \ 50)\nassert(largest_divisor(n: 49) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978441
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'tmptbi0j9e_/tmptbi0j9e_.swift:22: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b95596e9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b95593e0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b95593e0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b95593df7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptbi0j9e_                        0x000055cbad7aa1b5 <unavailable> + 4533

    5    libc.so.6                          0x00002b95598d5460 __libc_start_main +
    245

    6    tmptbi0j9e_                        0x000055cbad7a9e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659978441
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    guard n != 0 else { return 0 }\n    guard n != 1 else { return\
    \ 1 }\n    var i = n - 1\n    while i > 1 {\n        if n % i == 0 {\n       \
    \     return i\n        }\n        i -= 1\n    }\n    return 0\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpm0j_qcqc/tmpm0j_qcqc.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abe58431c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abe58128b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abe58128988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abe581277b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpm0j_qcqc                        0x000055e596095245 <unavailable> + 4677

    5    libc.so.6                          0x00002abe5861d460 __libc_start_main +
    245

    6    tmpm0j_qcqc                        0x000055e596094ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978442
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    if n % 2 == 0 {\n        return n / 2\n    } else {\n   \
    \     return n\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'tmpbdb2mbsw/tmpbdb2mbsw.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7ab88f3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7ab85eab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7ab85ea988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7ab85e97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbdb2mbsw                        0x000055facf87f245 <unavailable> + 4677

    5    libc.so.6                          0x00002b7ab8adf460 __libc_start_main +
    245

    6    tmpbdb2mbsw                        0x000055facf87eef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978442
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n  var divisor = 1\n  for i in 2...n-1 {\n    if n % i == 0 {\n\
    \      divisor = i\n    }\n  }\n  return divisor\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7)\
    \ == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) ==\
    \ 50)\nassert(largest_divisor(n: 49) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978442
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = 0\n    for i in 1..<n {\n        if n % i ==\
    \ 0 {\n            largest = i\n        }\n    }\n    return largest\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978442
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n  for i in (1...n/2).reversed() {\n    if n % i == 0 {\n    \
    \  return i\n    }\n  }\n  return 1\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n:\
    \ 10) == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n:\
    \ 49) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978441
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = 0\n    for i in 1..<n {\n        if n % i ==\
    \ 0 {\n            largest = i\n        }\n    }\n    return largest\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978442
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var answer = 1\n    for i in 2...n/2 {\n        if n % i\
    \ == 0 {\n            answer = i\n        }\n    }\n    return answer\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002ab4a9502c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab4a91f9561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ab4a91f9286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ab4a91f913c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ab4a91f8bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmplf44h1lu                        0x0000557192d0f6c9 <unavailable> + 5833

    6    tmplf44h1lu                        0x0000557192d0f2c8 <unavailable> + 4808

    7    libc.so.6                          0x00002ab4a96ee460 __libc_start_main +
    245

    8    tmplf44h1lu                        0x0000557192d0efe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978442
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    let count = Int(sqrt(Double(n)))\n    for i in 2...count\
    \ {\n        if n % i == 0 {\n            return n / i\n        }\n    }\n   \
    \ return 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(largest_divisor(n: 3)\
    \ == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10) ==\
    \ 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49) ==\
    \ 7)"
  status: SyntaxError
  stderr: "/tmp/tmpqx518pjl.swift:6:21: error: cannot find 'sqrt' in scope\n    let\
    \ count = Int(sqrt(Double(n)))\n                    ^~~~\n"
  stdout: ''
  timestamp: 1659978442
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    guard n > 0 else {\n        return -1\n    }\n    var d =\
    \ 2\n    while d < n {\n        if n % d == 0 {\n            return d\n      \
    \  }\n        d += 1\n    }\n    return n\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7) == 1)\n\
    assert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n:\
    \ 49) == 7)"
  status: Exception
  stderr: 'tmph1ji6vei/tmph1ji6vei.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ace74998c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ace7468fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ace7468f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ace7468e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmph1ji6vei                        0x000055a5cb1fe245 <unavailable> + 4677

    5    libc.so.6                          0x00002ace74b84460 __libc_start_main +
    245

    6    tmph1ji6vei                        0x000055a5cb1fdef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978442
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var divisor = n - 1\n    while n % divisor != 0 {\n     \
    \   divisor -= 1\n    }\n    return divisor\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7) == 1)\n\
    assert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n:\
    \ 49) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978441
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var ld = 1\n    for d in 2..<n {\n        if n % d == 0 {\n\
    \            ld = d\n        }\n    }\n    return ld\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7)\
    \ == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) ==\
    \ 50)\nassert(largest_divisor(n: 49) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978442
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    if n < 2 {\n        return 1\n    }\n    for i in (2...n/2).reversed()\
    \ {\n        if n % i == 0 {\n            return i\n        }\n    }\n    return\
    \ 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(largest_divisor(n: 3) == 1)\n\
    assert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n:\
    \ 100) == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b2b221dbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2b21ed2561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b2b21ed2286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b2b21ed213c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b2b21ed1bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp4ig12_gb                        0x0000561c80a10903 <unavailable> + 6403

    6    tmp4ig12_gb                        0x0000561c80a10498 <unavailable> + 5272

    7    libc.so.6                          0x00002b2b223c7460 __libc_start_main +
    245

    8    tmp4ig12_gb                        0x0000561c80a101b9 <unavailable> + 4537

    '
  stdout: ''
  timestamp: 1659978442
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var current_divisor = n - 1\n    while (n % current_divisor\
    \ != 0) {\n        current_divisor -= 1\n    }\n    return current_divisor\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978442
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    //Define the iterator\n    var it = n/2\n    // Loop over\
    \ the possible divisors\n    while (it > 0) {\n        // Check if it is a divisor\n\
    \        if n % it == 0 {\n            // Yay, found one\n            return it\n\
    \        }\n        // It was not, try the next smaller number\n        it -=\
    \ 1\n    }\n    // Oops, we ran out of numbers, it was not divided by any number\n\
    \    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978442
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    return (n-1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'tmpaw94q1e_/tmpaw94q1e_.swift:22: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae20306ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae202d61b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae202d61988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae202d607b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpaw94q1e_                        0x0000560b4165d1b5 <unavailable> + 4533

    5    libc.so.6                          0x00002ae203256460 __libc_start_main +
    245

    6    tmpaw94q1e_                        0x0000560b4165ce69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659978442
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var divisor = n - 1\n    while n % divisor != 0 {\n     \
    \   divisor -= 1\n    }\n    return divisor\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7) == 1)\n\
    assert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n:\
    \ 49) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978441
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    guard n > 1 else {\n        return 0\n    }\n    var divisor\
    \ = n / 2\n    while divisor > 1 {\n        if n % divisor == 0 {\n          \
    \  return divisor\n        }\n        divisor -= 1\n    }\n    return 1\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978442
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    let d = Int(sqrt(Double(n)))\n    var divisor = d\n    while\
    \ (n % divisor != 0) {\n        divisor -= 1\n    }\n    return divisor\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpvb6dqdq4.swift:6:17: error: cannot find 'sqrt' in scope\n    let\
    \ d = Int(sqrt(Double(n)))\n                ^~~~\n"
  stdout: ''
  timestamp: 1659978442
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var divisor = 2\n    while (n > divisor) {\n        if (n\
    \ % divisor == 0) {\n            return n / divisor\n        }\n        divisor\
    \ += 1\n    }\n    return 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978442
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest_divisor: Int = 0\n    for i in 2...n {\n    \
    \    if n % i == 0 {\n            largest_divisor = i\n        }\n    }\n    return\
    \ largest_divisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'tmp0uvddkbs/tmp0uvddkbs.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeb77d98c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeb77a8fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeb77a8f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeb77a8e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0uvddkbs                        0x0000563b2912f335 <unavailable> + 4917

    5    libc.so.6                          0x00002aeb77f84460 __libc_start_main +
    245

    6    tmp0uvddkbs                        0x0000563b2912efe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978442
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var divisor = n\n    while divisor > 0 {\n        if n %\
    \ divisor == 0 {\n            return divisor\n        }\n        divisor -= 1\n\
    \    }\n    return divisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'tmp9lw9xxya/tmp9lw9xxya.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b308e69bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b308e392b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b308e392988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b308e3917b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9lw9xxya                        0x000055f3f6cad245 <unavailable> + 4677

    5    libc.so.6                          0x00002b308e887460 __libc_start_main +
    245

    6    tmp9lw9xxya                        0x000055f3f6cacef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978442
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    let range = 1..<n\n    for divisor in range.reversed() {\n\
    \        if n % divisor == 0 {\n            return divisor\n        }\n    }\n\
    \    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978442
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    if n % 2 == 0 {\n        return n / 2\n    } else {\n   \
    \     return n / 3\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'tmpurp_4h8v/tmpurp_4h8v.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba10edf0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba10eae7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba10eae7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba10eae67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpurp_4h8v                        0x000055b24aab32c0 <unavailable> + 4800

    5    libc.so.6                          0x00002ba10efdc460 __libc_start_main +
    245

    6    tmpurp_4h8v                        0x000055b24aab2ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978442
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var dividend = n\n    var divisor = 2\n    while divisor\
    \ < dividend {\n        if dividend % divisor == 0 {\n            dividend = dividend\
    \ / divisor\n        } else {\n            divisor += 1\n        }\n    }\n  \
    \  return divisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'tmpwnrkqdeb/tmpwnrkqdeb.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab121d8bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab121a82b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab121a82988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab121a817b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwnrkqdeb                        0x000055f050abc245 <unavailable> + 4677

    5    libc.so.6                          0x00002ab121f77460 __libc_start_main +
    245

    6    tmpwnrkqdeb                        0x000055f050abbef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978442
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    for i in (1...n/2).reversed() {\n        if n % i == 0 {\n\
    \            return i\n        }\n    }\n    return n\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7)\
    \ == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) ==\
    \ 50)\nassert(largest_divisor(n: 49) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978442
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var result = n - 1\n    while result > 0 {\n        if n\
    \ % result == 0 {\n            return result\n        }\n        result -= 1\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978442
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    let bound = Int(sqrt(Double(n)))\n    for i in (1...bound).reversed()\
    \ {\n        if n % i == 0 {\n            return i\n        }\n    }\n    return\
    \ 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(largest_divisor(n: 3) == 1)\n\
    assert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n:\
    \ 100) == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpjdz4sh55.swift:6:21: error: cannot find 'sqrt' in scope\n    let\
    \ bound = Int(sqrt(Double(n)))\n                    ^~~~\n"
  stdout: ''
  timestamp: 1659978442
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    return 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'tmpiqtyk2w3/tmpiqtyk2w3.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab1a458bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab1a4282b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab1a4282988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab1a42817b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpiqtyk2w3                        0x000055eb769cc2ab <unavailable> + 4779

    5    libc.so.6                          0x00002ab1a4777460 __libc_start_main +
    245

    6    tmpiqtyk2w3                        0x000055eb769cbe69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659978442
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    for i in 1...n {\n        if n % i == 0 {\n            return\
    \ i\n        }\n    }\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n:\
    \ 10) == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n:\
    \ 49) == 7)"
  status: Exception
  stderr: 'tmpy2t8ox8r/tmpy2t8ox8r.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6125c48c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b612593fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b612593f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b612593e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy2t8ox8r                        0x000055faa571442b <unavailable> + 5163

    5    libc.so.6                          0x00002b6125e34460 __libc_start_main +
    245

    6    tmpy2t8ox8r                        0x000055faa5713fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978442
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    \n    var largest_divisor = 1\n    \n    for i in 1...n {\n\
    \        if n % i == 0 {\n            largest_divisor = i\n        }\n    }\n\
    \    \n    return largest_divisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'tmpmebsv9_c/tmpmebsv9_c.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9ed839ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9ed8091b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9ed8091988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9ed80907b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmebsv9_c                        0x0000562cc236a335 <unavailable> + 4917

    5    libc.so.6                          0x00002b9ed8586460 __libc_start_main +
    245

    6    tmpmebsv9_c                        0x0000562cc2369fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978442
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    for i in 2..<n {\n        if n % i == 0 {\n            return\
    \ n / i\n        }\n    }\n    return 1\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n:\
    \ 10) == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n:\
    \ 49) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978442
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var i = n-1\n    while i > 0 {\n        if n % i == 0 {\n\
    \            return i\n        }\n        i -= 1\n    }\n    return i\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978442
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    for i in (1...n/2).reversed() {\n        if n % i == 0 {\n\
    \            return i\n        }\n    }\n    return 1\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7)\
    \ == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) ==\
    \ 50)\nassert(largest_divisor(n: 49) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978441
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    \n    for i in (1...n/2).reversed() {\n        if n % i ==\
    \ 0 {\n            return i\n        }\n    }\n    \n    return n\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978442
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    for i in stride(from: n - 1, through: 1, by: -1) {\n    \
    \    if n % i == 0 {\n            return i\n        }\n    }\n    return 1\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978442
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var divisor = n - 1\n    while n % divisor != 0 {\n     \
    \   divisor -= 1\n    }\n    return divisor\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7) == 1)\n\
    assert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n:\
    \ 49) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978441
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = 0\n    for i in 1...n {\n        if n % i ==\
    \ 0 {\n            largest = i\n        }\n    }\n    return largest\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmp5angxeq7/tmp5angxeq7.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b71f9bcbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b71f98c2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b71f98c2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b71f98c17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5angxeq7                        0x000056345ffda335 <unavailable> + 4917

    5    libc.so.6                          0x00002b71f9db7460 __libc_start_main +
    245

    6    tmp5angxeq7                        0x000056345ffd9fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978442
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = 0\n    for i in 1...n/2 {\n        if\
    \ n % i == 0 {\n            largestDivisor = i\n        }\n    }\n    return largestDivisor\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978442
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    let sqrt = Int(sqrt(Double(n)))\n    var largest = 0\n  \
    \  for divisor in 1...sqrt {\n        if n % divisor == 0 {\n            largest\
    \ = divisor\n        }\n    }\n    return largest\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7)\
    \ == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) ==\
    \ 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp457wwe48.swift:6:20: error: use of local variable 'sqrt' before\
    \ its declaration\n    let sqrt = Int(sqrt(Double(n)))\n                   ^\n\
    /tmp/tmp457wwe48.swift:6:9: note: 'sqrt' declared here\n    let sqrt = Int(sqrt(Double(n)))\n\
    \        ^\n"
  stdout: ''
  timestamp: 1659978442
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var d = n\n    repeat {\n        d -= 1\n    } while n %\
    \ d != 0\n    return d\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978442
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var max_divisor = n / 2\n    while max_divisor > 0 {\n  \
    \      if n % max_divisor == 0 {\n            return max_divisor\n        }\n\
    \        max_divisor -= 1\n    }\n    return max_divisor\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978442
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    if n == 1 {\n        return 1\n    }\n    var divisor = n\
    \ / 2\n    while divisor >= 1 {\n        if n % divisor == 0 {\n            return\
    \ divisor\n        }\n        divisor -= 1\n    }\n    return 1\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978442
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = 0\n    let sqrtN = Int(sqrt(Double(n)))\n \
    \   for i in 1...sqrtN {\n        if n % i == 0 {\n            largest = i\n \
    \       }\n    }\n    return largest\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n:\
    \ 10) == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n:\
    \ 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpcldn1odr.swift:7:21: error: cannot find 'sqrt' in scope\n    let\
    \ sqrtN = Int(sqrt(Double(n)))\n                    ^~~~\n"
  stdout: ''
  timestamp: 1659978442
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    return (1...n/2).last(where: { n % $0 == 0 }) ?? 1\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978442
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = 0\n    var current = 1\n    while current <\
    \ n {\n        if n % current == 0 {\n            largest = current\n        }\n\
    \        current += 1\n    }\n    return largest\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7)\
    \ == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) ==\
    \ 50)\nassert(largest_divisor(n: 49) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978442
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    //your code goes here\n    return n\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpkg0o5kis/tmpkg0o5kis.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8ec4a99c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8ec4790b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8ec4790988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8ec478f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkg0o5kis                        0x00005560b06631b5 <unavailable> + 4533

    5    libc.so.6                          0x00002b8ec4c85460 __libc_start_main +
    245

    6    tmpkg0o5kis                        0x00005560b0662e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659978442
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var divisor = n - 1\n    while divisor > 0 {\n        if\
    \ n % divisor == 0 {\n            return divisor\n        }\n        divisor -=\
    \ 1\n    }\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978441
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    for i in (2...n - 1).reversed() {\n        if n % i == 0\
    \ {\n            return i\n        }\n    }\n    return 0\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmp5nx5859l/tmp5nx5859l.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2f8ebc2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2f8e8b9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2f8e8b9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2f8e8b87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5nx5859l                        0x00005562dea89505 <unavailable> + 5381

    5    libc.so.6                          0x00002b2f8edae460 __libc_start_main +
    245

    6    tmp5nx5859l                        0x00005562dea891b9 <unavailable> + 4537

    '
  stdout: ''
  timestamp: 1659978442
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    return largest_divisor(n: n, k: 2)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpnlxnx1sj.swift:6:37: error: extra argument 'k' in call\n    return\
    \ largest_divisor(n: n, k: 2)\n                          ~~~~~~~~~~^~\n"
  stdout: ''
  timestamp: 1659978442
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n  let sqrtn = Int(Double(n).squareRoot())\n  for i in (1...sqrtn).reversed()\
    \ {\n    if n % i == 0 {\n      return i\n    }\n  }\n  return 1\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: 'error: link command failed with exit code 1 (use -v to see invocation)

    /tmp/TemporaryDirectory.IqHRME/tmpvwjirlei-1.o:tmpvwjirlei-1.o:function $s11tmpvwjirlei15largest_divisor1nS2i_tF:
    error: undefined reference to ''sqrt''

    clang-13: error: linker command failed with exit code 1 (use -v to see invocation)

    '
  stdout: ''
  timestamp: 1659978442
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    for i in (1...n).reversed() {\n        if n % i == 0 {\n\
    \            return i\n        }\n    }\n    return 1\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7)\
    \ == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) ==\
    \ 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmp4_beim_v/tmp4_beim_v.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b56500acc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b564fda3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b564fda3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b564fda27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4_beim_v                        0x000055ccb9ba6505 <unavailable> + 5381

    5    libc.so.6                          0x00002b5650298460 __libc_start_main +
    245

    6    tmp4_beim_v                        0x000055ccb9ba61b9 <unavailable> + 4537

    '
  stdout: ''
  timestamp: 1659978441
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    return largest_divisor(n: n, i: n - 1)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp7pztrcxk.swift:6:39: error: extra argument 'i' in call\n    return\
    \ largest_divisor(n: n, i: n - 1)\n                          ~~~~~~~~~~~~^~~~\n"
  stdout: ''
  timestamp: 1659978442
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    let a = Array(2..<n)\n    var result = 0\n    for i in a\
    \ {\n        if n % i == 0 {\n            result = i\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(largest_divisor(n: 3)\
    \ == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10) ==\
    \ 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49) ==\
    \ 7)"
  status: Exception
  stderr: 'tmpnnou2coz/tmpnnou2coz.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6e18fedc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6e18ce4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6e18ce4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6e18ce37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnnou2coz                        0x0000556aa8dbc535 <unavailable> + 5429

    5    libc.so.6                          0x00002b6e191d9460 __libc_start_main +
    245

    6    tmpnnou2coz                        0x0000556aa8dbc1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659978442
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    for i in (1..<n).reversed() {\n        if n % i == 0 {\n\
    \            return i\n        }\n    }\n    return 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7)\
    \ == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) ==\
    \ 50)\nassert(largest_divisor(n: 49) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978441
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = n\n    var i = n-1\n    while i > 0 {\n   \
    \     if n % i == 0 {\n            largest = i\n            break\n        }\n\
    \        i -= 1\n    }\n    return largest\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7) == 1)\n\
    assert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n:\
    \ 49) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978442
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    if n == 0 {\n        return 0\n    } else if n == 1 {\n \
    \       return 1\n    } else {\n        for i in 2...n/2 {\n            if n %\
    \ i == 0 {\n                return i\n            }\n        }\n        return\
    \ 1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(largest_divisor(n: 3)\
    \ == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10) ==\
    \ 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49) ==\
    \ 7)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002acacce9cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acaccb93561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002acaccb93286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002acaccb9313c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002acaccb92bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp41p315jw                        0x0000558790fd86da <unavailable> + 5850

    6    tmp41p315jw                        0x0000558790fd82c8 <unavailable> + 4808

    7    libc.so.6                          0x00002acacd088460 __libc_start_main +
    245

    8    tmp41p315jw                        0x0000558790fd7fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978442
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    return Int(pow(Double(n), 0.5))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7)\
    \ == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) ==\
    \ 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp8v0f4pkl.swift:6:16: error: cannot find 'pow' in scope\n    return\
    \ Int(pow(Double(n), 0.5))\n               ^~~\n"
  stdout: ''
  timestamp: 1659978442
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    let max = Int(n / 2)\n    for i in 2...max {\n        if\
    \ n % i == 0 {\n            return i\n        }\n    }\n    return n\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b1fdc5a9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1fdc2a0561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b1fdc2a0286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b1fdc2a013c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b1fdc29fbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpnjrrjqcl                        0x000056237c3f787d <unavailable> + 6269

    6    tmpnjrrjqcl                        0x000056237c3f7408 <unavailable> + 5128

    7    libc.so.6                          0x00002b1fdc795460 __libc_start_main +
    245

    8    tmpnjrrjqcl                        0x000056237c3f7129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659978442
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    for d in 2..<n {\n        if n % d == 0 {\n            return\
    \ d\n        }\n    }\n    return 1\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n:\
    \ 10) == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n:\
    \ 49) == 7)"
  status: Exception
  stderr: 'tmp_2g1n4wl/tmp_2g1n4wl.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1bb0025c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1bafd1cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1bafd1c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1bafd1b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_2g1n4wl                        0x00005555f553742b <unavailable> + 5163

    5    libc.so.6                          0x00002b1bb0211460 __libc_start_main +
    245

    6    tmp_2g1n4wl                        0x00005555f5536fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978442
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest_divisor = n - 1\n    while n % largest_divisor\
    \ != 0 {\n        largest_divisor -= 1\n    }\n    return largest_divisor\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978442
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    for i in (1..<n).reversed() {\n        if n % i == 0 {\n\
    \            return i\n        }\n    }\n    return 1\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7)\
    \ == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) ==\
    \ 50)\nassert(largest_divisor(n: 49) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978442
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var i = n - 1\n    while i > 0 {\n        if n % i == 0 {\n\
    \            return i\n        }\n        i -= 1\n    }\n    return 0\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978442
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest_divisor = 0\n    for i in (1..<n).reversed()\
    \ {\n        if n % i == 0 {\n            largest_divisor = i\n            break\n\
    \        }\n    }\n    return largest_divisor\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7) == 1)\n\
    assert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n:\
    \ 49) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978442
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var result = 1\n    for i in 2..<n where n % i == 0 {\n \
    \       result = i\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7) == 1)\n\
    assert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n:\
    \ 49) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978442
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    for i in (2..<n).reversed() {\n        if n % i == 0 {\n\
    \            return i\n        }\n    }\n    return 1\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7)\
    \ == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) ==\
    \ 50)\nassert(largest_divisor(n: 49) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978441
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = 0\n    for i in 1..<n {\n        if n % i ==\
    \ 0 {\n            largest = i\n        }\n    }\n    return largest\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978442
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n  for i in (1..<n) {\n    if n % i == 0 {\n      return i\n \
    \   }\n  }\n  return 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'tmp0ok9s7ps/tmp0ok9s7ps.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b26e8ba6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b26e889db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b26e889d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b26e889c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0ok9s7ps                        0x000055ffaf2b442b <unavailable> + 5163

    5    libc.so.6                          0x00002b26e8d92460 __libc_start_main +
    245

    6    tmp0ok9s7ps                        0x000055ffaf2b3fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978442
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    guard n > 0 else {\n        return 0\n    }\n    var divisor\
    \ = 2\n    while divisor < n {\n        if n % divisor == 0 {\n            return\
    \ n / divisor\n        }\n        divisor += 1\n    }\n    return n\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpwuchucfz/tmpwuchucfz.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab567d08c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab5679ffb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab5679ff988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab5679fe7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwuchucfz                        0x0000563b962d4245 <unavailable> + 4677

    5    libc.so.6                          0x00002ab567ef4460 __libc_start_main +
    245

    6    tmpwuchucfz                        0x0000563b962d3ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978442
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = 0\n    for i in 1...n {\n        if n % i ==\
    \ 0 {\n            largest = i\n        }\n    }\n    return largest\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmp5angxeq7/tmp5angxeq7.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b71f9bcbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b71f98c2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b71f98c2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b71f98c17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5angxeq7                        0x000056345ffda335 <unavailable> + 4917

    5    libc.so.6                          0x00002b71f9db7460 __libc_start_main +
    245

    6    tmp5angxeq7                        0x000056345ffd9fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978442
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    for i in (1...n).reversed() {\n        if n % i == 0 {\n\
    \            return i\n        }\n    }\n    return 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7)\
    \ == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) ==\
    \ 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmp6f3ub5bc/tmp6f3ub5bc.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b94c461ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b94c4315b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b94c4315988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b94c43147b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6f3ub5bc                        0x0000562c60c0f505 <unavailable> + 5381

    5    libc.so.6                          0x00002b94c480a460 __libc_start_main +
    245

    6    tmp6f3ub5bc                        0x0000562c60c0f1b9 <unavailable> + 4537

    '
  stdout: ''
  timestamp: 1659978442
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    let max = Int(sqrt(Double(n)))\n    for i in 2...max {\n\
    \        if n % i == 0 {\n            return n / i\n        }\n    }\n    return\
    \ 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(largest_divisor(n: 3) == 1)\n\
    assert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n:\
    \ 100) == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpx0uwkd_c.swift:6:19: error: cannot find 'sqrt' in scope\n    let\
    \ max = Int(sqrt(Double(n)))\n                  ^~~~\n"
  stdout: ''
  timestamp: 1659978442
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest_divisor = 1\n    for divisor in 1..<n {\n   \
    \     if n % divisor == 0 {\n            largest_divisor = divisor\n        }\n\
    \    }\n    return largest_divisor\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n:\
    \ 10) == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n:\
    \ 49) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978443
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    for i in (1...n/2).reversed() {\n        if n % i == 0 {\n\
    \            return i\n        }\n    }\n    return 1\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7)\
    \ == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) ==\
    \ 50)\nassert(largest_divisor(n: 49) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978441
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    for x in (1..<n).reversed() {\n        if n % x == 0 {\n\
    \            return x\n        }\n    }\n    return 1\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7)\
    \ == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) ==\
    \ 50)\nassert(largest_divisor(n: 49) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978443
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    for i in 2...n-1 {\n        if n % i == 0 {\n           \
    \ return i\n        }\n    }\n    return 1\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7) == 1)\n\
    assert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n:\
    \ 49) == 7)"
  status: Exception
  stderr: 'tmpkf2xzm7e/tmpkf2xzm7e.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b811dbbfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b811d8b6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b811d8b6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b811d8b57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkf2xzm7e                        0x00005581e27e942b <unavailable> + 5163

    5    libc.so.6                          0x00002b811ddab460 __libc_start_main +
    245

    6    tmpkf2xzm7e                        0x00005581e27e8fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978442
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    for i in (1..<n).reversed() {\n        if n % i == 0 {\n\
    \            return i\n        }\n    }\n    return 1\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7)\
    \ == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) ==\
    \ 50)\nassert(largest_divisor(n: 49) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978442
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = 0\n    for i in (1...n).reversed() {\n    \
    \    if n % i == 0 {\n            largest = i\n            break\n        }\n\
    \    }\n    return largest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'tmpv1p0l_bm/tmpv1p0l_bm.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aac79d1bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aac79a12b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aac79a12988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aac79a117b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv1p0l_bm                        0x0000563ad2aa4505 <unavailable> + 5381

    5    libc.so.6                          0x00002aac79f07460 __libc_start_main +
    245

    6    tmpv1p0l_bm                        0x0000563ad2aa41b9 <unavailable> + 4537

    '
  stdout: ''
  timestamp: 1659978443
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'tmp4fh8u8t1/tmp4fh8u8t1.swift:22: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5a5391cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5a53613b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5a53613988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5a536127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4fh8u8t1                        0x00005572a26861b5 <unavailable> + 4533

    5    libc.so.6                          0x00002b5a53b08460 __libc_start_main +
    245

    6    tmp4fh8u8t1                        0x00005572a2685e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659978442
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    for i in (1...n/2).reversed() {\n        if n % i == 0 {\n\
    \            return i\n        }\n    }\n    return 1\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7)\
    \ == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) ==\
    \ 50)\nassert(largest_divisor(n: 49) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978441
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n  for i in stride(from: n - 1, through: 2, by: -1) {\n    if\
    \ n % i == 0 {\n      return i\n    }\n  }\n  return 1\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7)\
    \ == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) ==\
    \ 50)\nassert(largest_divisor(n: 49) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978442
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var divisor = n / 2\n    while n % divisor != 0 {\n     \
    \   divisor -= 1\n    }\n    return divisor\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7) == 1)\n\
    assert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n:\
    \ 49) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978442
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = n\n    for i in 2...n-1 {\n        if n % i\
    \ == 0 {\n            largest = i\n        }\n    }\n    return largest\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpwhxmtcir/tmpwhxmtcir.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b12cf329c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b12cf020b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b12cf020988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b12cf01f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwhxmtcir                        0x0000557ab6892335 <unavailable> + 4917

    5    libc.so.6                          0x00002b12cf515460 __libc_start_main +
    245

    6    tmpwhxmtcir                        0x0000557ab6891fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978443
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    for i in (2..<n).reversed() {\n        if n % i == 0 {\n\
    \            return i\n        }\n    }\n    return 1\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7)\
    \ == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) ==\
    \ 50)\nassert(largest_divisor(n: 49) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978441
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var n = n\n    var largest = 0\n    for x in 1..<n {\n  \
    \      if n % x == 0 {\n            largest = x\n        }\n    }\n    return\
    \ largest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(largest_divisor(n: 3)\
    \ == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10) ==\
    \ 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49) ==\
    \ 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978443
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = 1\n    for i in 2..<n {\n        if n % i ==\
    \ 0 {\n            largest = i\n        }\n    }\n    return largest\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978441
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var divisor = n - 1\n    while n % divisor != 0 {\n     \
    \   divisor -= 1\n    }\n    return divisor\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7) == 1)\n\
    assert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n:\
    \ 49) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978441
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    let upper_bound = Int(sqrt(Double(n)))\n    for i in (1...upper_bound).reversed()\
    \ {\n        if n % i == 0 {\n            return i\n        }\n    }\n    return\
    \ 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(largest_divisor(n: 3) == 1)\n\
    assert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n:\
    \ 100) == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpv5305di7.swift:6:27: error: cannot find 'sqrt' in scope\n    let\
    \ upper_bound = Int(sqrt(Double(n)))\n                          ^~~~\n"
  stdout: ''
  timestamp: 1659978442
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    return n / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'tmpbai05ozp/tmpbai05ozp.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae4f36abc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae4f33a2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae4f33a2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae4f33a17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbai05ozp                        0x000055d9469562c0 <unavailable> + 4800

    5    libc.so.6                          0x00002ae4f3897460 __libc_start_main +
    245

    6    tmpbai05ozp                        0x000055d946955ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978443
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    let half = n / 2\n    for i in 2...half {\n        if n %\
    \ i == 0 {\n            return i\n        }\n    }\n    return 1\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b0ddce6cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0ddcb63561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b0ddcb63286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b0ddcb6313c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b0ddcb62bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp7xrf5by1                        0x000055adc8ff26c5 <unavailable> + 5829

    6    tmp7xrf5by1                        0x000055adc8ff22c8 <unavailable> + 4808

    7    libc.so.6                          0x00002b0ddd058460 __libc_start_main +
    245

    8    tmp7xrf5by1                        0x000055adc8ff1fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978443
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = 0\n    for i in 1..<n {\n        if n % i ==\
    \ 0 {\n            largest = i\n        }\n    }\n    return largest\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978442
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    for i in (1...n).reversed() {\n        if n % i == 0 {\n\
    \            return i\n        }\n    }\n    return 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7)\
    \ == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) ==\
    \ 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmp6f3ub5bc/tmp6f3ub5bc.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b94c461ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b94c4315b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b94c4315988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b94c43147b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6f3ub5bc                        0x0000562c60c0f505 <unavailable> + 5381

    5    libc.so.6                          0x00002b94c480a460 __libc_start_main +
    245

    6    tmp6f3ub5bc                        0x0000562c60c0f1b9 <unavailable> + 4537

    '
  stdout: ''
  timestamp: 1659978442
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    if n <= 1 {\n        return n\n    }\n    for i in (1..<n).reversed()\
    \ {\n        if n % i == 0 {\n            return i\n        }\n    }\n    return\
    \ 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(largest_divisor(n: 3) == 1)\n\
    assert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n:\
    \ 100) == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978443
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var i = n - 1\n    while (i > 0) {\n        if n % i == 0\
    \ {\n            return i\n        }\n        i -= 1\n    }\n    return n\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978443
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    for i in (1..<n).reversed() {\n        if n % i == 0 {\n\
    \            return i\n        }\n    }\n    return 1\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7)\
    \ == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) ==\
    \ 50)\nassert(largest_divisor(n: 49) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978442
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    \n    if n % 2 == 0 {\n        return largest_divisor(n:\
    \ n / 2)\n    }\n    \n    var largestDivisor = 1\n    for i in stride(from: 3,\
    \ through: n / 2, by: 2) {\n        if n % i == 0 {\n            largestDivisor\
    \ = i\n        }\n    }\n    \n    return largestDivisor\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpatavg1w4/tmpatavg1w4.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adf74bd3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adf748cab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adf748ca988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adf748c97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpatavg1w4                        0x0000563682b8756b <unavailable> + 5483

    5    libc.so.6                          0x00002adf74dbf460 __libc_start_main +
    245

    6    tmpatavg1w4                        0x0000563682b87129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659978443
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = 0\n    for index in 1...n {\n      \
    \  if (n % index == 0) {\n            largestDivisor = index\n        }\n    }\n\
    \    return largestDivisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'tmp5xr5_bka/tmp5xr5_bka.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aed7f891c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aed7f588b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aed7f588988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aed7f5877b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5xr5_bka                        0x0000562791486335 <unavailable> + 4917

    5    libc.so.6                          0x00002aed7fa7d460 __libc_start_main +
    245

    6    tmp5xr5_bka                        0x0000562791485fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978443
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    for i in stride(from: n-1, through: 1, by: -1) {\n      \
    \  if n % i == 0 {\n            return i\n        }\n    }\n    return 0\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978443
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'tmp4fh8u8t1/tmp4fh8u8t1.swift:22: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5a5391cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5a53613b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5a53613988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5a536127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4fh8u8t1                        0x00005572a26861b5 <unavailable> + 4533

    5    libc.so.6                          0x00002b5a53b08460 __libc_start_main +
    245

    6    tmp4fh8u8t1                        0x00005572a2685e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659978442
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var max_divisor = 1\n    var last_possible_divisor = n\n\
    \    while max_divisor < last_possible_divisor {\n        if n % max_divisor ==\
    \ 0 {\n            last_possible_divisor = n / max_divisor\n        }\n      \
    \  max_divisor += 1\n    }\n    return max_divisor - 1\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7)\
    \ == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) ==\
    \ 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpxg3ibunt/tmpxg3ibunt.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b64ae7ffc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b64ae4f6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b64ae4f6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b64ae4f57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxg3ibunt                        0x0000560964f17245 <unavailable> + 4677

    5    libc.so.6                          0x00002b64ae9eb460 __libc_start_main +
    245

    6    tmpxg3ibunt                        0x0000560964f16ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978443
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    let limit = Int(sqrt(Double(n)))\n    for i in (1...limit).reversed()\
    \ {\n        if n % i == 0 {\n            return i\n        }\n    }\n    return\
    \ 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(largest_divisor(n: 3) == 1)\n\
    assert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n:\
    \ 100) == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpwzkzzwzn.swift:6:21: error: cannot find 'sqrt' in scope\n    let\
    \ limit = Int(sqrt(Double(n)))\n                    ^~~~\n"
  stdout: ''
  timestamp: 1659978443
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    if n < 0 {\n        return 0\n    }\n    if n == 0 {\n  \
    \      return 0\n    }\n    var largest = n\n    for i in (1...n-1).reversed()\
    \ {\n        if n % i == 0 {\n            largest = i\n            break\n   \
    \     }\n    }\n    return largest\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n:\
    \ 10) == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n:\
    \ 49) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978443
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var divisor = n - 1\n    while n % divisor != 0 {\n     \
    \   divisor -= 1\n    }\n    return divisor\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7) == 1)\n\
    assert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n:\
    \ 49) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978441
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    return Int(floor(Double(n / 2)))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7)\
    \ == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) ==\
    \ 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpdafts5gg.swift:6:16: error: cannot find 'floor' in scope\n    return\
    \ Int(floor(Double(n / 2)))\n               ^~~~~\n"
  stdout: ''
  timestamp: 1659978443
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var d = n - 1\n    while n % d != 0 {\n        d -= 1\n \
    \   }\n    return d\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978443
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    // your code here\n    let limit = Int(n/2)\n    for x in\
    \ (1...limit).reversed() {\n        if n % x == 0 {\n            return x\n  \
    \      }\n    }\n    return 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978443
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var remainder = n - 1\n    while n % remainder != 0 {\n \
    \       remainder -= 1\n    }\n    return remainder\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7)\
    \ == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) ==\
    \ 50)\nassert(largest_divisor(n: 49) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978443
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    guard n > 0 else {\n        return 0\n    }\n    var largest_divisor\
    \ = 1\n    for i in 2...n / 2 {\n        if n % i == 0 {\n            largest_divisor\
    \ = i\n        }\n    }\n    return largest_divisor\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7)\
    \ == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) ==\
    \ 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b39dab0dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b39da804561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b39da804286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b39da80413c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b39da803bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpz4lqe4vt                        0x00005622c6b776d4 <unavailable> + 5844

    6    tmpz4lqe4vt                        0x00005622c6b772c8 <unavailable> + 4808

    7    libc.so.6                          0x00002b39dacf9460 __libc_start_main +
    245

    8    tmpz4lqe4vt                        0x00005622c6b76fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978443
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    \n    var result = 0\n    \n    for i in (1...n/2).reversed()\
    \ {\n        if n % i == 0 {\n            result = i\n            break\n    \
    \    }\n    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n:\
    \ 10) == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n:\
    \ 49) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978443
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    for i in (1...n/2).reversed() {\n        if n % i == 0 {\n\
    \            return i\n        }\n    }\n    return 1\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7)\
    \ == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) ==\
    \ 50)\nassert(largest_divisor(n: 49) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978441
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    // TODO: implement this function\n    return 0\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmp4wgelbyz/tmp4wgelbyz.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8e3792dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8e37624b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8e37624988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8e376237b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4wgelbyz                        0x0000558cbc2fc1b5 <unavailable> + 4533

    5    libc.so.6                          0x00002b8e37b19460 __libc_start_main +
    245

    6    tmp4wgelbyz                        0x0000558cbc2fbe69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659978443
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    for i in (1...n).reversed() {\n        if n % i == 0 {\n\
    \            return i\n        }\n    }\n    return 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7)\
    \ == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) ==\
    \ 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmp6f3ub5bc/tmp6f3ub5bc.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b94c461ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b94c4315b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b94c4315988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b94c43147b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6f3ub5bc                        0x0000562c60c0f505 <unavailable> + 5381

    5    libc.so.6                          0x00002b94c480a460 __libc_start_main +
    245

    6    tmp6f3ub5bc                        0x0000562c60c0f1b9 <unavailable> + 4537

    '
  stdout: ''
  timestamp: 1659978442
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    for i in (1...n/2).reversed() {\n        if n % i == 0 {\n\
    \            return i\n        }\n    }\n    return 1\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7)\
    \ == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) ==\
    \ 50)\nassert(largest_divisor(n: 49) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978441
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var divisor = n - 1\n    while n % divisor != 0 {\n     \
    \   divisor -= 1\n    }\n    return divisor\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7) == 1)\n\
    assert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n:\
    \ 49) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978441
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    return Int(floor(Double(n) / 2.0))\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp7yjy7xr8.swift:6:16: error: cannot find 'floor' in scope\n    return\
    \ Int(floor(Double(n) / 2.0))\n               ^~~~~\n"
  stdout: ''
  timestamp: 1659978443
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = n / 2\n    while n % largest != 0 {\n     \
    \   largest -= 1\n    }\n    return largest\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7) == 1)\n\
    assert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n:\
    \ 49) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978443
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var biggest_divisor = n - 1\n    while n % biggest_divisor\
    \ != 0 {\n        biggest_divisor -= 1\n    }\n    return biggest_divisor\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978443
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    let range = 1...n-1\n    return range.reversed().first {\
    \ n % $0 == 0 }!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978443
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var divisor = 2\n    while divisor < n {\n        if n %\
    \ divisor == 0 {\n            break\n        }\n        divisor += 1\n    }\n\
    \    return divisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'tmps73n65jb/tmps73n65jb.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7473fa8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7473c9fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7473c9f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7473c9e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps73n65jb                        0x000055e7dad29245 <unavailable> + 4677

    5    libc.so.6                          0x00002b7474194460 __libc_start_main +
    245

    6    tmps73n65jb                        0x000055e7dad28ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978443
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    for i in stride(from: n - 1, through: 1, by: -1) {\n    \
    \    if n % i == 0 {\n            return i\n        }\n    }\n    return 1\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978442
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    // YOUR CODE HERE\n    if n == 1 {\n        return 1\n  \
    \  }\n    for i in (1...n/2).reversed() {\n        if n % i == 0 {\n         \
    \   return i\n        }\n    }\n    return 1\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7) == 1)\n\
    assert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n:\
    \ 49) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978443
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var d = 2\n    while d * d <= n {\n        if n % d == 0\
    \ {\n            return n / d\n        }\n        d += 1\n    }\n    return 1\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978443
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var result = 1\n    for i in 2...n {\n        if n % i ==\
    \ 0 {\n            result = i\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmp4nph7jhu/tmp4nph7jhu.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adbafd41c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adbafa38b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adbafa38988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adbafa377b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4nph7jhu                        0x0000564cd5edb335 <unavailable> + 4917

    5    libc.so.6                          0x00002adbaff2d460 __libc_start_main +
    245

    6    tmp4nph7jhu                        0x0000564cd5edafe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978443
