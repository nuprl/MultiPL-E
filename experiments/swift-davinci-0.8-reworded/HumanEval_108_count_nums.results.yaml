language: swift
name: HumanEval_108_count_nums
results:
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for i in arr {\n        if i < 0 {\n            i = i * -1\n        }\n \
    \       if i % 10 != 0 {\n            count += 1\n        }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(count_nums(arr: [] as [Int])\
    \ == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1,\
    \ 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5]) ==\
    \ 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpnjsa7j0o.swift:16:13: error: cannot assign to value: 'i' is a 'let'\
    \ constant\n            i = i * -1\n            ^\n"
  stdout: ''
  timestamp: 1660012698
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for num in arr {\n        var sum = 0\n        var temp = num\n        if\
    \ temp < 0 {\n            temp = temp * -1\n        }\n        while temp > 0\
    \ {\n            sum += temp % 10\n            temp /= 10\n        }\n       \
    \ if sum > 0 {\n            count += 1\n        }\n    }\n    return count\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpuf91jqfg/tmpuf91jqfg.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad2cc866c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad2cc55db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad2cc55d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad2cc55c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuf91jqfg                        0x000055912c0965a0 <unavailable> + 5536

    5    libc.so.6                          0x00002ad2cca52460 __libc_start_main +
    245

    6    tmpuf91jqfg                        0x000055912c096169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660012698
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n  return arr.reduce(0)\
    \ {\n    if $1.digits.reduce(0, +) == 0 {\n      return $0\n    }\n    return\
    \ $0 + 1\n  }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_nums(arr: []\
    \ as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpmnfqwfi9.swift:14:11: error: value of type 'Int' has no member\
    \ 'digits'\n    if $1.digits.reduce(0, +) == 0 {\n       ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012698
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    // Your code here\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: '/tmp/tmp9uyjnqsy.swift:14:1: error: missing return in global function expected
    to return ''Int''

    }

    ^

    '
  stdout: ''
  timestamp: 1660012698
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return 0\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpwnihh45r/tmpwnihh45r.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b01c4378c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b01c406fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b01c406f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b01c406e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwnihh45r                        0x000055fd08e9f485 <unavailable> + 5253

    5    libc.so.6                          0x00002b01c4564460 __libc_start_main +
    245

    6    tmpwnihh45r                        0x000055fd08e9ef69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660012698
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var result = 0\n\
    \    for num in arr {\n        if (num < 0) {\n            if (num/10 < 0) {\n\
    \                result += 1\n            }\n        } else {\n            if\
    \ (num/10 > 0) {\n                result += 1\n            }\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_nums(arr: []\
    \ as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmpgj4be9ug/tmpgj4be9ug.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7184d92c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7184a89b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7184a89988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7184a887b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgj4be9ug                        0x00005610ac091685 <unavailable> + 5765

    5    libc.so.6                          0x00002b7184f7e460 __libc_start_main +
    245

    6    tmpgj4be9ug                        0x00005610ac091169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660012698
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.reduce(0)\
    \ { acc, num in\n        return acc + (sum_digits(num: num) > 0 ? 1 : 0)\n   \
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(count_nums(arr: [] as [Int])\
    \ == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1,\
    \ 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5]) ==\
    \ 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp7a6wx5d3.swift:14:23: error: cannot find 'sum_digits' in scope\n\
    \        return acc + (sum_digits(num: num) > 0 ? 1 : 0)\n                   \
    \   ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660012698
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for num in arr {\n        var sum = 0\n        if num < 0 {\n           \
    \ sum += -num % 10\n            num /= -10\n        }\n        while num > 0 {\n\
    \            sum += num % 10\n            num /= 10\n        }\n        if sum\
    \ > 0 {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpmua0bhn4.swift:18:17: error: left side of mutating operator isn't\
    \ mutable: 'num' is a 'let' constant\n            num /= -10\n            ~~~\
    \ ^\n/tmp/tmpmua0bhn4.swift:22:17: error: left side of mutating operator isn't\
    \ mutable: 'num' is a 'let' constant\n            num /= 10\n            ~~~ ^\n"
  stdout: ''
  timestamp: 1660012698
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { num in\n        var sum = 0\n        var n = num\n        while n != 0 {\n\
    \            sum += n % 10\n            n /= 10\n        }\n        return sum\
    \ > 0\n    }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_nums(arr: []\
    \ as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmpz0e3lryi/tmpz0e3lryi.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b50ff95fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b50ff656b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b50ff656988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b50ff6557b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz0e3lryi                        0x0000558bea60c91a <unavailable> + 6426

    5    libc.so.6                          0x00002b50ffb4b460 __libc_start_main +
    245

    6    tmpz0e3lryi                        0x0000558bea60c129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660012698
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for i in arr {\n        var n = i\n        var temp = 0\n        if n < 0\
    \ {\n            n = n * -1\n        }\n        while n > 0 {\n            temp\
    \ += n % 10\n            n = n / 10\n        }\n        if temp > 0 {\n      \
    \      count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmp7hxjt7sy/tmp7hxjt7sy.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b038f861c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b038f558b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b038f558988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b038f5577b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7hxjt7sy                        0x000055c7f871c5a0 <unavailable> + 5536

    5    libc.so.6                          0x00002b038fa4d460 __libc_start_main +
    245

    6    tmp7hxjt7sy                        0x000055c7f871c169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660012698
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    let nums = arr.filter({\
    \ $0 >= 0 ? true : false })\n    return nums.filter({ getSumOfDigits($0) > 0 }).count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpz8ng41fv.swift:14:26: error: cannot find 'getSumOfDigits' in scope\n\
    \    return nums.filter({ getSumOfDigits($0) > 0 }).count\n                  \
    \       ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660012698
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n  return arr.reduce(0)\
    \ { (count, int) in\n    let num = Int(abs(int))\n    var rest = num\n    var\
    \ sum = 0\n    while rest > 0 {\n      sum += rest % 10\n      rest /= 10\n  \
    \  }\n    return count + (sum > 0 ? 1 : 0)\n  }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1,\
    \ -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpg93gen3h/tmpg93gen3h.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0b29649c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0b29340b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0b29340988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0b2933f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg93gen3h                        0x0000558529d1c6d0 <unavailable> + 5840

    5    libc.so.6                          0x00002b0b29835460 __libc_start_main +
    245

    6    tmpg93gen3h                        0x0000558529d1c299 <unavailable> + 4761

    '
  stdout: ''
  timestamp: 1660012698
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    var sum = 0\n    for num in arr {\n        sum = 0\n        if num < 0 {\n\
    \            sum = sum + num\n        } else {\n            sum = sum + num\n\
    \        }\n        while (sum > 0) {\n            sum = sum % 10\n          \
    \  sum = sum / 10\n        }\n        if sum > 0 {\n            count = count\
    \ + 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1,\
    \ -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpk04hqv66/tmpk04hqv66.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8a4757cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8a47273b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8a47273988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8a472727b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk04hqv66                        0x0000563423565685 <unavailable> + 5765

    5    libc.so.6                          0x00002b8a47768460 __libc_start_main +
    245

    6    tmpk04hqv66                        0x0000563423565169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660012698
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for i in arr {\n        if(sumOfDigits(arr: i) > 0) {\n            count\
    \ = count + 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpubirqm_v.swift:15:12: error: cannot find 'sumOfDigits' in scope\n\
    \        if(sumOfDigits(arr: i) > 0) {\n           ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660012698
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0 > 0 }.reduce(0) { $0 + $1 }.digits.reduce(0) { $0 + $1 }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpl2lxuye2.swift:13:56: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0 > 0 }.reduce(0) { $0 + $1 }.digits.reduce(0)\
    \ { $0 + $1 }\n           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012699
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for i in arr {\n        if i.abs() > 0 {\n            count += 1\n      \
    \  }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(count_nums(arr:\
    \ [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp409dvikp.swift:15:14: error: value of type 'Int' has no member\
    \ 'abs'\n        if i.abs() > 0 {\n           ~ ^~~\n"
  stdout: ''
  timestamp: 1660012698
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for n in arr {\n        if sum_digits(n: n) > 0 {\n            count += 1\n\
    \        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp37jiq5rq.swift:15:12: error: cannot find 'sum_digits' in scope\n\
    \        if sum_digits(n: n) > 0 {\n           ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660012698
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.reduce(0)\
    \ { count, num in\n        if num < 0 {\n            return count + count_digits(of:\
    \ -num)\n        } else {\n            return count + count_digits(of: num)\n\
    \        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_nums(arr: []\
    \ as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpivqzbejj.swift:15:28: error: cannot find 'count_digits' in scope\n\
    \            return count + count_digits(of: -num)\n                         \
    \  ^~~~~~~~~~~~\n/tmp/tmpivqzbejj.swift:17:28: error: cannot find 'count_digits'\
    \ in scope\n            return count + count_digits(of: num)\n               \
    \            ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660012698
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var result = 0\n\
    \    var tmp: Int\n    for i in arr {\n        tmp = 0\n        for j in i.digits\
    \ {\n            tmp += j\n        }\n        if tmp > 0 {\n            result\
    \ += 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1,\
    \ -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpn7yr26mb.swift:17:20: error: value of type 'Int' has no member\
    \ 'digits'\n        for j in i.digits {\n                 ~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012698
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ {\n        ($0 / 10).abs + $0.abs % 10 > 0\n    }.count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp_3t48kxk.swift:13:12: error: the compiler is unable to type-check\
    \ this expression in reasonable time; try breaking up the expression into distinct\
    \ sub-expressions\n    return arr.filter {\n           ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660012729
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var ans = 0\n \
    \   for num in arr {\n        var sum = 0\n        if num < 0 {\n            sum\
    \ += -num % 10\n            num = -num / 10\n        }\n        while num > 0\
    \ {\n            sum += num % 10\n            num /= 10\n        }\n        if\
    \ sum > 0 {\n            ans += 1\n        }\n    }\n    return ans\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmptls49v09.swift:18:13: error: cannot assign to value: 'num' is a\
    \ 'let' constant\n            num = -num / 10\n            ^~~\n/tmp/tmptls49v09.swift:22:17:\
    \ error: left side of mutating operator isn't mutable: 'num' is a 'let' constant\n\
    \            num /= 10\n            ~~~ ^\n"
  stdout: ''
  timestamp: 1660012698
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.reduce(0)\
    \ { sum, i in\n        var res = i\n        if i < 0 {\n            res = -res\n\
    \        }\n        var sum_digits = 0\n        while res > 0 {\n            sum_digits\
    \ += res % 10\n            res /= 10\n        }\n        return sum + (sum_digits\
    \ > 0 ? 1 : 0)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_nums(arr:\
    \ [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmpi31jazog/tmpi31jazog.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad27d802c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad27d4f9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad27d4f9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad27d4f87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi31jazog                        0x000055c6166094b0 <unavailable> + 5296

    5    libc.so.6                          0x00002ad27d9ee460 __libc_start_main +
    245

    6    tmpi31jazog                        0x000055c616609079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660012698
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var ret = 0\n \
    \   for i in arr {\n        if (i > 0) {\n            ret += count_signed_digits(num:\
    \ i)\n        } else if (i < 0) {\n            ret += 1 + count_signed_digits(num:\
    \ -i)\n        }\n    }\n    return ret\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp4m2p_xgj.swift:16:20: error: cannot find 'count_signed_digits'\
    \ in scope\n            ret += count_signed_digits(num: i)\n                 \
    \  ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp4m2p_xgj.swift:18:24: error: cannot find 'count_signed_digits'\
    \ in scope\n            ret += 1 + count_signed_digits(num: -i)\n            \
    \           ^~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660012698
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n  return 0\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpmiw_qu98/tmpmiw_qu98.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4be03a8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4be009fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4be009f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4be009e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmiw_qu98                        0x000055f28496b485 <unavailable> + 5253

    5    libc.so.6                          0x00002b4be0594460 __libc_start_main +
    245

    6    tmpmiw_qu98                        0x000055f28496af69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660012699
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { value in\n        var num = value\n        if num < 0 {\n            num =\
    \ -num\n        }\n        var sum = 0\n        while num > 0 {\n            sum\
    \ += num % 10\n            num /= 10\n        }\n        return sum > 0\n    }.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmp8fl7_i2q/tmp8fl7_i2q.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b97a9c3ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b97a9935b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b97a9935988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b97a99347b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8fl7_i2q                        0x000055c4a66ff560 <unavailable> + 5472

    5    libc.so.6                          0x00002b97a9e2a460 __libc_start_main +
    245

    6    tmp8fl7_i2q                        0x000055c4a66ff129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660012699
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return 0\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpwnihh45r/tmpwnihh45r.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b01c4378c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b01c406fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b01c406f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b01c406e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwnihh45r                        0x000055fd08e9f485 <unavailable> + 5253

    5    libc.so.6                          0x00002b01c4564460 __libc_start_main +
    245

    6    tmpwnihh45r                        0x000055fd08e9ef69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660012698
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var cnt = 0\n \
    \   for num in arr {\n        var sum = 0\n        var n = num\n        while\
    \ n != 0 {\n            sum += n % 10\n            n /= 10\n        }\n      \
    \  if sum > 0 {\n            cnt += 1\n        }\n    }\n    return cnt\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpkuhdkyi_/tmpkuhdkyi_.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0f73804c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0f734fbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0f734fb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0f734fa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkuhdkyi_                        0x0000562e3c9b595a <unavailable> + 6490

    5    libc.so.6                          0x00002b0f739f0460 __libc_start_main +
    245

    6    tmpkuhdkyi_                        0x0000562e3c9b5169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660012699
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    // YOUR CODE HERE\n\
    \    var sum = 0\n    for number in arr {\n        if number >= 0 {\n        \
    \    sum += sum_digits(num: number)\n        } else {\n            sum += sum_digits(num:\
    \ number * -1)\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpy04n7x8v.swift:17:20: error: cannot find 'sum_digits' in scope\n\
    \            sum += sum_digits(num: number)\n                   ^~~~~~~~~~\n/tmp/tmpy04n7x8v.swift:19:20:\
    \ error: cannot find 'sum_digits' in scope\n            sum += sum_digits(num:\
    \ number * -1)\n                   ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660012699
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { abs($0) == $0 ? $0 : sum_signed_digits($0) > 0 }.count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmps4zkd1ca.swift:13:46: error: cannot find 'sum_signed_digits' in\
    \ scope\n    return arr.filter { abs($0) == $0 ? $0 : sum_signed_digits($0) >\
    \ 0 }.count\n                                             ^~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660012699
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var sum = 0\n \
    \   for i in arr {\n        var v = i\n        if v < 0 {\n            v = -v\n\
    \        }\n        while v > 0 {\n            sum += v % 10\n            v /=\
    \ 10\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpdlknf_7w/tmpdlknf_7w.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8ce0003c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8cdfcfab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8cdfcfa988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8cdfcf97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdlknf_7w                        0x00005599e0c015a0 <unavailable> + 5536

    5    libc.so.6                          0x00002b8ce01ef460 __libc_start_main +
    245

    6    tmpdlknf_7w                        0x00005599e0c01169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660012699
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for i in arr {\n        var sum = 0\n        var i = i\n        if i < 0\
    \ {\n            i = -i\n        }\n        while i > 0 {\n            sum +=\
    \ i % 10\n            i /= 10\n        }\n        if sum > 0 {\n            count\
    \ += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1,\
    \ -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmp06s9usze/tmp06s9usze.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac61f55dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac61f254b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac61f254988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac61f2537b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp06s9usze                        0x00005607889925a0 <unavailable> + 5536

    5    libc.so.6                          0x00002ac61f749460 __libc_start_main +
    245

    6    tmp06s9usze                        0x0000560788992169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660012699
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n  return arr.filter({$0\
    \ > 0}).count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_nums(arr: []\
    \ as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmp9dfodgjr/tmp9dfodgjr.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac8a9bedc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac8a98e4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac8a98e4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac8a98e37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9dfodgjr                        0x000055a69dd4387a <unavailable> + 6266

    5    libc.so.6                          0x00002ac8a9dd9460 __libc_start_main +
    245

    6    tmp9dfodgjr                        0x000055a69dd43089 <unavailable> + 4233

    '
  stdout: ''
  timestamp: 1660012699
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter({abs($0)\
    \ > 0}).count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_nums(arr: []\
    \ as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmphwus3cy7/tmphwus3cy7.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b301d490c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b301d187b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b301d187988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b301d1867b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphwus3cy7                        0x000056097b2f75b0 <unavailable> + 5552

    5    libc.so.6                          0x00002b301d67c460 __libc_start_main +
    245

    6    tmphwus3cy7                        0x000056097b2f7179 <unavailable> + 4473

    '
  stdout: ''
  timestamp: 1660012699
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter({\
    \ $0 != 0 }).reduce(0, { (res, next) in\n        var next = next\n        var\
    \ s = 0\n        while next != 0 {\n            s += abs(next % 10)\n        \
    \    next /= 10\n        }\n        return res + (s > 0 ? 1 : 0)\n    })\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpratr2bsl/tmpratr2bsl.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b02458b3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b02455aab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b02455aa988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b02455a97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpratr2bsl                        0x000055ea41f2c660 <unavailable> + 5728

    5    libc.so.6                          0x00002b0245a9f460 __libc_start_main +
    245

    6    tmpratr2bsl                        0x000055ea41f2c229 <unavailable> + 4649

    '
  stdout: ''
  timestamp: 1660012699
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n\tvar count = 0\n\t\
    for n in arr {\n\t\tif n < 0 {\n\t\t\tif -n.digits.reduce(0, +) > 0 {\n\t\t\t\t\
    count += 1\n\t\t\t}\n\t\t} else {\n\t\t\tif n.digits.reduce(0, +) > 0 {\n\t\t\t\
    \tcount += 1\n\t\t\t}\n\t\t}\n\t}\n\treturn count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmprwoedu97.swift:16:10: error: value of type 'Int' has no member\
    \ 'digits'\n                        if -n.digits.reduce(0, +) > 0 {\n        \
    \                    ~ ^~~~~~\n/tmp/tmprwoedu97.swift:20:9: error: value of type\
    \ 'Int' has no member 'digits'\n                        if n.digits.reduce(0,\
    \ +) > 0 {\n                           ~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012699
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return 0\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpwnihh45r/tmpwnihh45r.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b01c4378c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b01c406fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b01c406f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b01c406e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwnihh45r                        0x000055fd08e9f485 <unavailable> + 5253

    5    libc.so.6                          0x00002b01c4564460 __libc_start_main +
    245

    6    tmpwnihh45r                        0x000055fd08e9ef69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660012698
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter({\
    \ abs($0) > 9 ? $0.digits().sum() > 0 : $0 > 0 }).count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpz7nr9nnx.swift:13:42: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter({ abs($0) > 9 ? $0.digits().sum() > 0 : $0 >\
    \ 0 }).count\n                                      ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012699
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    if arr.count ==\
    \ 0 {\n        return 0\n    }\n    var tmp = arr\n    var i = 0\n    while i\
    \ < tmp.count {\n        var sum = 0\n        for j in 0..<String(tmp[i]).count\
    \ {\n            sum += Int(String(String(tmp[i])[j]))!\n        }\n        if\
    \ sum == 0 {\n            tmp.remove(at: i)\n        } else {\n            i +=\
    \ 1\n        }\n    }\n    return tmp.count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1,\
    \ -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp3oh0l8dq.swift:21:31: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n            sum +=\
    \ Int(String(String(tmp[i])[j]))!\n                              ^~~~~~~~~~~~~~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n"
  stdout: ''
  timestamp: 1660012699
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var result = 0\n\
    \    for i in arr {\n        var copy = i\n        var sum = 0\n        if copy\
    \ < 0 {\n            copy = copy * -1\n        }\n        while copy > 0 {\n \
    \           sum += copy % 10\n            copy /= 10\n        }\n        if sum\
    \ > 0 {\n            result += 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmplb84n0wr/tmplb84n0wr.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afd8ef75c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afd8ec6cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afd8ec6c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afd8ec6b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplb84n0wr                        0x000055d0511f65a0 <unavailable> + 5536

    5    libc.so.6                          0x00002afd8f161460 __libc_start_main +
    245

    6    tmplb84n0wr                        0x000055d0511f6169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660012699
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    // your code here\n\
    \    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_nums(arr: []\
    \ as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmp_vk1mw4y/tmp_vk1mw4y.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9e46705c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9e463fcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9e463fc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9e463fb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_vk1mw4y                        0x000055b06ff25485 <unavailable> + 5253

    5    libc.so.6                          0x00002b9e468f1460 __libc_start_main +
    245

    6    tmp_vk1mw4y                        0x000055b06ff24f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660012699
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { abs($0) % 10 != 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(count_nums(arr:\
    \ [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmp2rm2lu2j/tmp2rm2lu2j.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b49e7797c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b49e748eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b49e748e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b49e748d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2rm2lu2j                        0x00005619ead65640 <unavailable> + 5696

    5    libc.so.6                          0x00002b49e7983460 __libc_start_main +
    245

    6    tmp2rm2lu2j                        0x00005619ead65209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660012699
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var r = 0\n   \
    \ for x in arr {\n        var sum = 0\n        if x < 0 {\n            sum +=\
    \ -x % 10\n            var x = -x / 10\n        } else {\n            var x =\
    \ x\n        }\n        while x > 0 {\n            sum += x % 10\n           \
    \ x /= 10\n        }\n        if sum > 0 {\n            r += 1\n        }\n  \
    \  }\n    return r\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_nums(arr: []\
    \ as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp7xj731mu.swift:24:15: error: left side of mutating operator isn't\
    \ mutable: 'x' is a 'let' constant\n            x /= 10\n            ~ ^\n"
  stdout: ''
  timestamp: 1660012699
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var res = 0\n \
    \   for i in arr {\n        if sum(digits(num: i)) > 0 {\n            res += 1\n\
    \        }\n    }\n    return res\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(count_nums(arr:\
    \ [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp3gcy38ng.swift:15:12: error: cannot find 'sum' in scope\n     \
    \   if sum(digits(num: i)) > 0 {\n           ^~~\n/tmp/tmp3gcy38ng.swift:15:16:\
    \ error: cannot find 'digits' in scope\n        if sum(digits(num: i)) > 0 {\n\
    \               ^~~~~~\n"
  stdout: ''
  timestamp: 1660012699
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ {\n        var num = $0\n        var digits = 0\n        while num != 0 {\n\
    \            digits += abs(num % 10)\n            num /= 10\n        }\n     \
    \   return digits > 0\n    }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpbqhof3rf/tmpbqhof3rf.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3dcb2f1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3dcafe8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3dcafe8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3dcafe77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbqhof3rf                        0x00005565141c2640 <unavailable> + 5696

    5    libc.so.6                          0x00002b3dcb4dd460 __libc_start_main +
    245

    6    tmpbqhof3rf                        0x00005565141c2209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660012699
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n  var sum = 0\n  for\
    \ num in arr {\n    var digits = abs(num)\n    while digits > 0 {\n      sum +=\
    \ digits % 10\n      digits /= 10\n    }\n  }\n  return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpflwy3b5s/tmpflwy3b5s.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b62e3020c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b62e2d17b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b62e2d17988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b62e2d167b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpflwy3b5s                        0x0000557a516b3690 <unavailable> + 5776

    5    libc.so.6                          0x00002b62e320c460 __libc_start_main +
    245

    6    tmpflwy3b5s                        0x0000557a516b3259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1660012699
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return 0\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpwnihh45r/tmpwnihh45r.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b01c4378c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b01c406fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b01c406f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b01c406e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwnihh45r                        0x000055fd08e9f485 <unavailable> + 5253

    5    libc.so.6                          0x00002b01c4564460 __libc_start_main +
    245

    6    tmpwnihh45r                        0x000055fd08e9ef69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660012698
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter({\
    \ sum_digits($0) > 0 }).count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(count_nums(arr:\
    \ [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpyv2ag0u8.swift:13:25: error: cannot find 'sum_digits' in scope\n\
    \    return arr.filter({ sum_digits($0) > 0 }).count\n                       \
    \ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660012699
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return 0\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpwnihh45r/tmpwnihh45r.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b01c4378c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b01c406fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b01c406f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b01c406e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwnihh45r                        0x000055fd08e9f485 <unavailable> + 5253

    5    libc.so.6                          0x00002b01c4564460 __libc_start_main +
    245

    6    tmpwnihh45r                        0x000055fd08e9ef69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660012698
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return 0\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpwnihh45r/tmpwnihh45r.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b01c4378c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b01c406fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b01c406f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b01c406e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwnihh45r                        0x000055fd08e9f485 <unavailable> + 5253

    5    libc.so.6                          0x00002b01c4564460 __libc_start_main +
    245

    6    tmpwnihh45r                        0x000055fd08e9ef69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660012698
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for elem in arr {\n        let digits = Array(String(elem)).map { Int(String($0))!\
    \ }\n        if digits.reduce(0, +) > 0 {\n            count += 1\n        }\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_nums(arr:\
    \ [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmp9qrlmfxv/tmp9qrlmfxv.swift:15: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b523ecafc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b523e9a6561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b523e9a6286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b523e9a613c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b523e9a5bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp9qrlmfxv                        0x000056073989c2f1 <unavailable> + 8945

    6    libswiftCore.so                    0x00002b523e98e820 Collection.map<A>(_:)
    + 426

    7    tmp9qrlmfxv                        0x000056073989c07a <unavailable> + 8314

    8    tmp9qrlmfxv                        0x000056073989b8e2 <unavailable> + 6370

    9    libc.so.6                          0x00002b523ee9b460 __libc_start_main +
    245

    10   tmp9qrlmfxv                        0x000056073989b529 <unavailable> + 5417

    '
  stdout: ''
  timestamp: 1660012699
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return 0\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpwnihh45r/tmpwnihh45r.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b01c4378c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b01c406fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b01c406f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b01c406e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwnihh45r                        0x000055fd08e9f485 <unavailable> + 5253

    5    libc.so.6                          0x00002b01c4564460 __libc_start_main +
    245

    6    tmpwnihh45r                        0x000055fd08e9ef69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660012698
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0 != 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_nums(arr: []\
    \ as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmpqkyzfvnz/tmpqkyzfvnz.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afbb8d1cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afbb8a13b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afbb8a13988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afbb8a127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqkyzfvnz                        0x000055ed65f0f4c0 <unavailable> + 5312

    5    libc.so.6                          0x00002afbb8f08460 __libc_start_main +
    245

    6    tmpqkyzfvnz                        0x000055ed65f0f089 <unavailable> + 4233

    '
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter({\
    \ $0 != 0 && $0.digitalRoot != 0 }).count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1,\
    \ -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp6ht3s6nv.swift:13:39: error: value of type 'Int' has no member\
    \ 'digitalRoot'\n    return arr.filter({ $0 != 0 && $0.digitalRoot != 0 }).count\n\
    \                                   ~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660012699
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for i in arr {\n        if i > 0 {\n            var iCopy = i\n         \
    \   var sumOfDigits = 0\n            while iCopy > 0 {\n                sumOfDigits\
    \ += iCopy % 10\n                iCopy /= 10\n            }\n            if sumOfDigits\
    \ > 0 {\n                count += 1\n            }\n        } else if i < 0 {\n\
    \            var iCopy = i\n            var sumOfDigits = 0\n            while\
    \ iCopy < 0 {\n                sumOfDigits += iCopy % 10\n                iCopy\
    \ /= 10\n            }\n            if sumOfDigits < 0 {\n                count\
    \ += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpaoud3hnh/tmpaoud3hnh.swift:54: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0318a4ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0318745b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0318745988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b03187447b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpaoud3hnh                        0x00005604574a55a0 <unavailable> + 5536

    5    libc.so.6                          0x00002b0318c3a460 __libc_start_main +
    245

    6    tmpaoud3hnh                        0x00005604574a5169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660012699
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var counter = 0\n\
    \    for num in arr {\n        var temp = num\n        var sum = 0\n        if\
    \ num < 0 {\n            temp = num * -1\n        }\n        while temp > 0 {\n\
    \            sum += temp % 10\n            temp /= 10\n        }\n        if sum\
    \ > 0 {\n            counter += 1\n        }\n    }\n    return counter\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpx4_hykyw/tmpx4_hykyw.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaec1e26c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaec1b1db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaec1b1d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaec1b1c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx4_hykyw                        0x000056361138b5a0 <unavailable> + 5536

    5    libc.so.6                          0x00002aaec2012460 __libc_start_main +
    245

    6    tmpx4_hykyw                        0x000056361138b169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660012699
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    arr.reduce(0) {\
    \ (res, num) in\n        return res + (abs(num) >= 10 ? 1 : 0)\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmp0r0ml86_/tmp0r0ml86_.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3fdbedec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3fdbbd5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3fdbbd5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3fdbbd47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0r0ml86_                        0x00005607393835e5 <unavailable> + 5605

    5    libc.so.6                          0x00002b3fdc0ca460 __libc_start_main +
    245

    6    tmp0r0ml86_                        0x00005607393830c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1660012699
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    if arr.count ==\
    \ 0 {\n        return 0\n    }\n    var count = 0\n    for num in arr {\n    \
    \    if num == 0 {\n            count += 1\n        } else if num > 0 {\n    \
    \        count += convertPositive(num: num)\n        } else {\n            count\
    \ += convertNegative(num: num)\n        }\n    }\n    return count\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpi_srhd_g.swift:21:22: error: cannot find 'convertPositive' in scope\n\
    \            count += convertPositive(num: num)\n                     ^~~~~~~~~~~~~~~\n\
    /tmp/tmpi_srhd_g.swift:23:22: error: cannot find 'convertNegative' in scope\n\
    \            count += convertNegative(num: num)\n                     ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660012699
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8zmkraxo.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var res = 0\n \
    \   for i in arr {\n        var i = i\n        var sum = 0\n        if i < 0 {\n\
    \            i = -i\n        }\n        while i > 0 {\n            sum += i %\
    \ 10\n            i /= 10\n        }\n        if sum > 0 {\n            res +=\
    \ 1\n        }\n    }\n    return res\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpnc82_r4v/tmpnc82_r4v.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b98875f3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b98872eab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b98872ea988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b98872e97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnc82_r4v                        0x000055a9506c85a0 <unavailable> + 5536

    5    libc.so.6                          0x00002b98877df460 __libc_start_main +
    245

    6    tmpnc82_r4v                        0x000055a9506c8169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660012699
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n  return arr.filter({$0\
    \ > 0}).reduce(0, {$0 + $1})\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(count_nums(arr:\
    \ [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmptuvrzd5n/tmptuvrzd5n.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9581227c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9580f1eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9580f1e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9580f1d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptuvrzd5n                        0x0000555f33a8f5c5 <unavailable> + 5573

    5    libc.so.6                          0x00002b9581413460 __libc_start_main +
    245

    6    tmptuvrzd5n                        0x0000555f33a8f0a9 <unavailable> + 4265

    '
  stdout: ''
  timestamp: 1660012699
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8zmkraxo.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.reduce(0)\
    \ { sum, val in\n        guard val != 0 else { return sum }\n        var value\
    \ = val\n        var count = 0\n        while value != 0 {\n            let digit\
    \ = abs(value % 10)\n            count += digit\n            value /= 10\n   \
    \     }\n        return sum + (count > 0 ? 1 : 0)\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmp8lcczjrr/tmp8lcczjrr.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abd1928dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abd18f84b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abd18f84988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abd18f837b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8lcczjrr                        0x0000562f3e29d5a0 <unavailable> + 5536

    5    libc.so.6                          0x00002abd19479460 __libc_start_main +
    245

    6    tmp8lcczjrr                        0x0000562f3e29d169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660012699
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n  var count = 0\n \
    \ for i in arr {\n    var num = i\n    var sum = 0\n    while num != 0 {\n   \
    \   sum += num % 10\n      num /= 10\n    }\n    if sum > 0 {\n      count +=\
    \ 1\n    }\n  }\n  return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(count_nums(arr:\
    \ [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmp4j2238la/tmp4j2238la.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae1463eec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae1460e5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae1460e5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae1460e47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4j2238la                        0x000056071e08295a <unavailable> + 6490

    5    libc.so.6                          0x00002ae1465da460 __libc_start_main +
    245

    6    tmp4j2238la                        0x000056071e082169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660012699
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter({\
    \ $0.digits.reduce(0, +) > 0 }).count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpdsu9ua4u.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter({ $0.digits.reduce(0, +) > 0 }).count\n    \
    \                    ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n  return 0\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpmiw_qu98/tmpmiw_qu98.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4be03a8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4be009fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4be009f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4be009e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmiw_qu98                        0x000055f28496b485 <unavailable> + 5253

    5    libc.so.6                          0x00002b4be0594460 __libc_start_main +
    245

    6    tmpmiw_qu98                        0x000055f28496af69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660012699
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n  var i = 0\n  for\
    \ num in arr {\n    if num.absum() > 0 {\n      i += 1\n    }\n  }\n  return i\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpzl1p0gw7.swift:15:12: error: value of type 'Int' has no member\
    \ 'absum'\n    if num.absum() > 0 {\n       ~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1660012699
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.reduce(0)\
    \ { (total, num) in\n        total + ((abs(num).digits.reduce(0, +) > 0) ? 1 :\
    \ 0)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(count_nums(arr: [] as\
    \ [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpi341mj4f.swift:14:28: error: value of type 'Int' has no member\
    \ 'digits'\n        total + ((abs(num).digits.reduce(0, +) > 0) ? 1 : 0)\n   \
    \               ~~~~~~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012724
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for num in arr {\n        if num == 0 {\n            continue\n        }\n\
    \        if num < 0 {\n            count += 1\n        }\n        var sum = 0\n\
    \        var temp = num\n        while temp != 0 {\n            sum += temp %\
    \ 10\n            temp /= 10\n        }\n        if sum > 0 {\n            count\
    \ += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1,\
    \ -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmp4ydbd2v_/tmp4ydbd2v_.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b80a810fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b80a7e06b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b80a7e06988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b80a7e057b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4ydbd2v_                        0x0000560a38bd95a0 <unavailable> + 5536

    5    libc.so.6                          0x00002b80a82fb460 __libc_start_main +
    245

    6    tmp4ydbd2v_                        0x0000560a38bd9169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660012699
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    // YOUR CODE HERE\n\
    \    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_nums(arr: []\
    \ as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmpwsdcuvbm/tmpwsdcuvbm.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2fcae0dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2fcab04b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2fcab04988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2fcab037b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwsdcuvbm                        0x000055cc85397485 <unavailable> + 5253

    5    libc.so.6                          0x00002b2fcaff9460 __libc_start_main +
    245

    6    tmpwsdcuvbm                        0x000055cc85396f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660012699
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    if arr.count <\
    \ 1 {\n        return 0\n    }\n    var result = 0\n    for i in arr {\n     \
    \   let sum = sum_of_digits(num: i)\n        if sum > 0 {\n            result\
    \ += 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1,\
    \ -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp_wp234_c.swift:18:19: error: cannot find 'sum_of_digits' in scope\n\
    \        let sum = sum_of_digits(num: i)\n                  ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660012699
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter{sum_digits($0)\
    \ > 0}.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_nums(arr: []\
    \ as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpxrujm635.swift:13:23: error: cannot find 'sum_digits' in scope\n\
    \    return arr.filter{sum_digits($0) > 0}.count\n                      ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660012699
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.reduce(0)\
    \ { $0 + ($1.sumDigits() > 0 ? 1 : 0) }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp7b76152u.swift:13:37: error: value of type 'Int' has no member\
    \ 'sumDigits'\n    return arr.reduce(0) { $0 + ($1.sumDigits() > 0 ? 1 : 0) }\n\
    \                                 ~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660012699
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for num in arr {\n        var positive = num\n        if positive < 0 {\n\
    \            positive = -positive\n        }\n        var sum = 0\n        while\
    \ positive > 0 {\n            sum += positive % 10\n            positive /= 10\n\
    \        }\n        if sum > 0 {\n            count += 1\n        }\n    }\n \
    \   return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_nums(arr: []\
    \ as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmpesn3hjnz/tmpesn3hjnz.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acba3d9fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acba3a96b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acba3a96988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acba3a957b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpesn3hjnz                        0x0000559a97bab5a0 <unavailable> + 5536

    5    libc.so.6                          0x00002acba3f8b460 __libc_start_main +
    245

    6    tmpesn3hjnz                        0x0000559a97bab169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660012699
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.reduce(0)\
    \ { acc, cur in\n        let s = String(cur).map { String($0) }.filter { $0 !=\
    \ \"-\" }.reduce(0) { $0 + Int($1)! }\n        return acc + (s > 0 ? 1 : 0)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(count_nums(arr: [] as [Int])\
    \ == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1,\
    \ 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5]) ==\
    \ 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmpsfqud0_8/tmpsfqud0_8.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2683f4dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2683c44b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2683c44988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2683c437b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsfqud0_8                        0x0000557be3ccc8f0 <unavailable> + 6384

    5    libc.so.6                          0x00002b2684139460 __libc_start_main +
    245

    6    tmpsfqud0_8                        0x0000557be3ccc4b9 <unavailable> + 5305

    '
  stdout: ''
  timestamp: 1660012699
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter{$0\
    \ >= 0 ? $0 % 10 > 0 : $0 % 10 < 0}.count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1,\
    \ -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmprvnxjtrk/tmprvnxjtrk.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae8ac636c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae8ac32db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae8ac32d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae8ac32c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprvnxjtrk                        0x000055bdbfd47560 <unavailable> + 5472

    5    libc.so.6                          0x00002ae8ac822460 __libc_start_main +
    245

    6    tmprvnxjtrk                        0x000055bdbfd47129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660012699
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    let isZero = arr.filter\
    \ { abs($0) % 10 == 0 }\n    return arr.count - isZero.count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpeup_8i7d/tmpeup_8i7d.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac462235c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac461f2cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac461f2c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac461f2b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeup_8i7d                        0x000055daf41cb640 <unavailable> + 5696

    5    libc.so.6                          0x00002ac462421460 __libc_start_main +
    245

    6    tmpeup_8i7d                        0x000055daf41cb209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660012699
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var result = 0\n\
    \    for number in arr {\n        if sum_of_digits(num: number) > 0 {\n      \
    \      result += 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp9pudb15t.swift:15:12: error: cannot find 'sum_of_digits' in scope\n\
    \        if sum_of_digits(num: number) > 0 {\n           ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660012699
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var total = 0\n\
    \    for num in arr {\n        if num.digits.reduce(0, +) > 0 {\n            total\
    \ += 1\n        }\n    }\n    return total\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1,\
    \ -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpnmb7dioi.swift:15:16: error: value of type 'Int' has no member\
    \ 'digits'\n        if num.digits.reduce(0, +) > 0 {\n           ~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012699
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter{abs($0)\
    \ > 9 || abs($0) < 1}.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(count_nums(arr:\
    \ [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmpk06v6i32/tmpk06v6i32.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b536e212c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b536df09b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b536df09988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b536df087b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk06v6i32                        0x0000557c12a075b0 <unavailable> + 5552

    5    libc.so.6                          0x00002b536e3fe460 __libc_start_main +
    245

    6    tmpk06v6i32                        0x0000557c12a07179 <unavailable> + 4473

    '
  stdout: ''
  timestamp: 1660012699
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.reduce(0)\
    \ { $0 + ($1 > 0 ? 1 : 0) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(count_nums(arr:\
    \ [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmpc8kzm6mk/tmpc8kzm6mk.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae9ff177c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae9fee6eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae9fee6e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae9fee6d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc8kzm6mk                        0x000056266fedf7da <unavailable> + 6106

    5    libc.so.6                          0x00002ae9ff363460 __libc_start_main +
    245

    6    tmpc8kzm6mk                        0x000056266fedefe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660012699
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var sum = 0\n \
    \   for i in arr {\n        if i > 0 {\n            var m = i\n            while\
    \ m > 0 {\n                sum += m % 10\n                m /= 10\n          \
    \  }\n        } else {\n            var m = -i\n            while m > 0 {\n  \
    \              sum -= m % 10\n                m /= 10\n            }\n       \
    \ }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_nums(arr:\
    \ [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmp_x1vx0rm/tmp_x1vx0rm.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b213d54ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b213d245b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b213d245988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b213d2447b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_x1vx0rm                        0x000055eda3c5f5a0 <unavailable> + 5536

    5    libc.so.6                          0x00002b213d73a460 __libc_start_main +
    245

    6    tmp_x1vx0rm                        0x000055eda3c5f169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660012699
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { abs($0) > 9 || $0 < -9 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpevn9zvd_/tmpevn9zvd_.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1a94c60c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1a94957b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1a94957988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1a949567b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpevn9zvd_                        0x000055b392dc9695 <unavailable> + 5781

    5    libc.so.6                          0x00002b1a94e4c460 __libc_start_main +
    245

    6    tmpevn9zvd_                        0x000055b392dc9179 <unavailable> + 4473

    '
  stdout: ''
  timestamp: 1660012699
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n  return arr.reduce(0)\
    \ { (r, n) in\n    r + (n == 0 ? 0 : n < 0 ? n.abs.sum_of_digits + 1 : n.sum_of_digits)\n\
    \  }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(count_nums(arr: [] as [Int])\
    \ == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1,\
    \ 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5]) ==\
    \ 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpq3fquqex.swift:13:10: error: the compiler is unable to type-check\
    \ this expression in reasonable time; try breaking up the expression into distinct\
    \ sub-expressions\n  return arr.reduce(0) { (r, n) in\n         ^~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013028
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return 0\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpwnihh45r/tmpwnihh45r.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b01c4378c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b01c406fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b01c406f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b01c406e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwnihh45r                        0x000055fd08e9f485 <unavailable> + 5253

    5    libc.so.6                          0x00002b01c4564460 __libc_start_main +
    245

    6    tmpwnihh45r                        0x000055fd08e9ef69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660012698
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n\treturn 0\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpfu4xk1_4/tmpfu4xk1_4.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab5d30adc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab5d2da4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab5d2da4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab5d2da37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfu4xk1_4                        0x00005581ee541485 <unavailable> + 5253

    5    libc.so.6                          0x00002ab5d3299460 __libc_start_main +
    245

    6    tmpfu4xk1_4                        0x00005581ee540f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660012699
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.reduce(0)\
    \ { $0 + ($1 < 0 ? (-1 * $1).digits.reduce(0, +) : $1.digits.reduce(0, +)) > 0\
    \ ? 1 : 0 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(count_nums(arr: [] as\
    \ [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp9ojwtzpr.swift:13:12: error: the compiler is unable to type-check\
    \ this expression in reasonable time; try breaking up the expression into distinct\
    \ sub-expressions\n    return arr.reduce(0) { $0 + ($1 < 0 ? (-1 * $1).digits.reduce(0,\
    \ +) : $1.digits.reduce(0, +)) > 0 ? 1 : 0 }\n           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660012857
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var c = 0\n   \
    \ for n in arr {\n        if n == 0 {\n            continue\n        }\n     \
    \   if n < 0 {\n            n *= -1\n        }\n        var m = n\n        while\
    \ m > 0 {\n            c += m % 10\n            m /= 10\n        }\n    }\n  \
    \  return c\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(count_nums(arr: [] as\
    \ [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmph9os36e9.swift:19:15: error: left side of mutating operator isn't\
    \ mutable: 'n' is a 'let' constant\n            n *= -1\n            ~ ^\n"
  stdout: ''
  timestamp: 1660012699
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0.digits().reduce(0, +) > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpik6nerei.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits().reduce(0, +) > 0 }.count\n   \
    \                     ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012607
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter({abs($0)\
    \ >= 10 && $0 % 10 != 0}).count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(count_nums(arr:\
    \ [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmp2xyx5_gc/tmp2xyx5_gc.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4c27873c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4c2756ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4c2756a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4c275697b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2xyx5_gc                        0x0000557c0b4cc725 <unavailable> + 5925

    5    libc.so.6                          0x00002b4c27a5f460 __libc_start_main +
    245

    6    tmp2xyx5_gc                        0x0000557c0b4cc209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660012699
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter({\
    \ s in s != 0 && s.abs().sumDigits() > 0 }).count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpszgslwfo.swift:13:42: error: value of type 'Int' has no member\
    \ 'abs'\n    return arr.filter({ s in s != 0 && s.abs().sumDigits() > 0 }).count\n\
    \                                       ~ ^~~\n"
  stdout: ''
  timestamp: 1660012699
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    let signed_digits\
    \ = arr.map({x in x.digits()}).filter({x in x.reduce(0, +) > 0})\n    return signed_digits.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpxcrg4_s9.swift:13:41: error: value of type 'Int' has no member\
    \ 'digits'\n    let signed_digits = arr.map({x in x.digits()}).filter({x in x.reduce(0,\
    \ +) > 0})\n                                      ~ ^~~~~~\n/tmp/tmpxcrg4_s9.swift:13:60:\
    \ error: unable to infer type of a closure parameter 'x' in the current context\n\
    \    let signed_digits = arr.map({x in x.digits()}).filter({x in x.reduce(0, +)\
    \ > 0})\n                                                           ^\n"
  stdout: ''
  timestamp: 1660012701
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.reduce(0)\
    \ { acc, n in acc + ((n < 0) ? n : n).digits.reduce(0, +) > 0 ? 1 : 0 }\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpe3mfi7el.swift:13:12: error: the compiler is unable to type-check\
    \ this expression in reasonable time; try breaking up the expression into distinct\
    \ sub-expressions\n    return arr.reduce(0) { acc, n in acc + ((n < 0) ? n : n).digits.reduce(0,\
    \ +) > 0 ? 1 : 0 }\n           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013299
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for num in arr {\n        var a = num\n        if num < 0 {\n           \
    \ a = -a\n        }\n        if num == 0 {\n            count += 1\n        }\
    \ else {\n            while a > 0 {\n                if a % 10 > 0 {\n       \
    \             count += 1\n                    break\n                }\n     \
    \           a /= 10\n            }\n        }\n    }\n    return count\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmp1kijlq4g/tmp1kijlq4g.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abab636dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abab6064b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abab6064988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abab60637b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1kijlq4g                        0x000055bc361d15a0 <unavailable> + 5536

    5    libc.so.6                          0x00002abab6559460 __libc_start_main +
    245

    6    tmp1kijlq4g                        0x000055bc361d1169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660012699
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return 0\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpwnihh45r/tmpwnihh45r.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b01c4378c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b01c406fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b01c406f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b01c406e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwnihh45r                        0x000055fd08e9f485 <unavailable> + 5253

    5    libc.so.6                          0x00002b01c4564460 __libc_start_main +
    245

    6    tmpwnihh45r                        0x000055fd08e9ef69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660012698
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var cnt = 0\n \
    \   for i in arr {\n        if i.digits.reduce(0, +) > 0 {\n            cnt +=\
    \ 1\n        }\n    }\n    return cnt\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmplytpoqzd.swift:15:14: error: value of type 'Int' has no member\
    \ 'digits'\n        if i.digits.reduce(0, +) > 0 {\n           ~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012699
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    let filtered =\
    \ arr.filter{$0.signedDigits().reduce(0,+) > 0}\n    return filtered.count\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp2qpwzl42.swift:13:34: error: value of type 'Int' has no member\
    \ 'signedDigits'\n    let filtered = arr.filter{$0.signedDigits().reduce(0,+)\
    \ > 0}\n                              ~~ ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660012699
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.reduce(0)\
    \ {\n        $0 + (abs($1) % 10 != 0 ? 1 : 0)\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpmeoxfmtu/tmpmeoxfmtu.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad819559c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad819250b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad819250988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad81924f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmeoxfmtu                        0x000055935a7c65a0 <unavailable> + 5536

    5    libc.so.6                          0x00002ad819745460 __libc_start_main +
    245

    6    tmpmeoxfmtu                        0x000055935a7c6169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660012699
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter({\n\
    \        let i = abs($0)\n        return i == 0 ? false : (i % 10) + i / 10 >\
    \ 0\n    }).count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_nums(arr: []\
    \ as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmphvisk06y/tmphvisk06y.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b38d8e69c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b38d8b60b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b38d8b60988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b38d8b5f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphvisk06y                        0x000056486f221640 <unavailable> + 5696

    5    libc.so.6                          0x00002b38d9055460 __libc_start_main +
    245

    6    tmphvisk06y                        0x000056486f221209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660012699
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n  return 0\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpmiw_qu98/tmpmiw_qu98.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4be03a8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4be009fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4be009f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4be009e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmiw_qu98                        0x000055f28496b485 <unavailable> + 5253

    5    libc.so.6                          0x00002b4be0594460 __libc_start_main +
    245

    6    tmpmiw_qu98                        0x000055f28496af69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660012699
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.reduce(0)\
    \ { acc, number in\n        let abs_number = abs(number)\n        let number_with_sign\
    \ = number > 0 ? abs_number : -abs_number\n        let digits = digits_of(number:\
    \ number_with_sign)\n        let number_sum = digits.reduce(0) { $0 + $1 }\n \
    \       if number_sum > 0 {\n            return acc + 1\n        } else {\n  \
    \          return acc\n        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpvhl94c5d.swift:16:22: error: cannot find 'digits_of' in scope\n\
    \        let digits = digits_of(number: number_with_sign)\n                  \
    \   ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660012699
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n\treturn arr.filter({\n\
    \t\tvar sum = 0\n\t\tvar n = $0\n\t\twhile n != 0 {\n\t\t\tsum += (n > 0 ? n :\
    \ -n) % 10\n\t\t\tn /= 10\n\t\t}\n\t\treturn sum > 0\n\t}).count\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmp4ttaolmc/tmp4ttaolmc.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b70c6a08c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b70c66ffb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b70c66ff988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b70c66fe7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4ttaolmc                        0x000055a2d902a560 <unavailable> + 5472

    5    libc.so.6                          0x00002b70c6bf4460 __libc_start_main +
    245

    6    tmp4ttaolmc                        0x000055a2d902a129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660012699
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n  let nums = arr.filter\
    \ { $0 > 0 }\n  if nums.count == 0 {\n    return 0\n  }\n  return nums.map { $0\
    \ % 10 + ($0 / 10) % 10 + ($0 / 100) % 10 + ($0 / 1000) % 10 }.filter { $0 > 0\
    \ }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(count_nums(arr: [] as\
    \ [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmpobu387na/tmpobu387na.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b478d387c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b478d07eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b478d07e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b478d07d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpobu387na                        0x000056323a3df9ba <unavailable> + 6586

    5    libc.so.6                          0x00002b478d573460 __libc_start_main +
    245

    6    tmpobu387na                        0x000056323a3df1c9 <unavailable> + 4553

    '
  stdout: ''
  timestamp: 1660012699
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.reduce(0)\
    \ { acc, num in\n        acc + (num.digits().reduce(0, +) != 0 ? 1 : 0)\n    }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmphbxz2um4.swift:14:20: error: value of type 'Int' has no member\
    \ 'digits'\n        acc + (num.digits().reduce(0, +) != 0 ? 1 : 0)\n         \
    \      ~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012710
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for i in arr {\n        var sum = 0\n        var num = i\n        if i <\
    \ 0 {\n            num = -i\n        }\n        while num > 0 {\n            sum\
    \ += num % 10\n            num /= 10\n        }\n        if sum > 0 {\n      \
    \      count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmp6cp43uhc/tmp6cp43uhc.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6e281b6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6e27eadb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6e27ead988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6e27eac7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6cp43uhc                        0x000055db651cf5a0 <unavailable> + 5536

    5    libc.so.6                          0x00002b6e283a2460 __libc_start_main +
    245

    6    tmp6cp43uhc                        0x000055db651cf169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660012699
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var result = 0\n\
    \    for i in arr {\n        var x = i\n        if i < 0 {\n            x = -x\n\
    \        }\n        var sum = 0\n        while x > 0 {\n            sum += x %\
    \ 10\n            x /= 10\n        }\n        if sum > 0 {\n            result\
    \ += 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1,\
    \ -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpfws04tpj/tmpfws04tpj.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b13a3657c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b13a334eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b13a334e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b13a334d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfws04tpj                        0x000055eeddf205a0 <unavailable> + 5536

    5    libc.so.6                          0x00002b13a3843460 __libc_start_main +
    245

    6    tmpfws04tpj                        0x000055eeddf20169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660012699
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return 0\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpwnihh45r/tmpwnihh45r.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b01c4378c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b01c406fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b01c406f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b01c406e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwnihh45r                        0x000055fd08e9f485 <unavailable> + 5253

    5    libc.so.6                          0x00002b01c4564460 __libc_start_main +
    245

    6    tmpwnihh45r                        0x000055fd08e9ef69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660012698
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter({n\
    \ in n != 0 && n != (-1 * n)}).count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpd9ljud1o/tmpd9ljud1o.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b770faa6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b770f79db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b770f79d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b770f79c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd9ljud1o                        0x0000558e5293e4c0 <unavailable> + 5312

    5    libc.so.6                          0x00002b770fc92460 __libc_start_main +
    245

    6    tmpd9ljud1o                        0x0000558e5293e089 <unavailable> + 4233

    '
  stdout: ''
  timestamp: 1660012699
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n  var count = 0\n \
    \ for num in arr {\n    if num != 0 && sum_signed_digits(num: num) > 0 {\n   \
    \   count += 1\n    }\n  }\n  return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1,\
    \ -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp08m97mru.swift:15:20: error: cannot find 'sum_signed_digits' in\
    \ scope\n    if num != 0 && sum_signed_digits(num: num) > 0 {\n              \
    \     ^~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660012699
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for num in arr {\n        if check_num(num: num) {\n            count +=\
    \ 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8hrfuo0j.swift:15:12: error: cannot find 'check_num' in scope\n\
    \        if check_num(num: num) {\n           ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660012699
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return 0\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpwnihh45r/tmpwnihh45r.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b01c4378c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b01c406fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b01c406f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b01c406e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwnihh45r                        0x000055fd08e9f485 <unavailable> + 5253

    5    libc.so.6                          0x00002b01c4564460 __libc_start_main +
    245

    6    tmpwnihh45r                        0x000055fd08e9ef69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660012698
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for i in arr {\n        var p = i\n        var sum = 0\n        while p !=\
    \ 0 {\n            sum += p % 10\n            p /= 10\n        }\n        if sum\
    \ > 0 {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpdvyfj9p4/tmpdvyfj9p4.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9959cd0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b99599c7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b99599c7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b99599c67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdvyfj9p4                        0x0000560094f2495a <unavailable> + 6490

    5    libc.so.6                          0x00002b9959ebc460 __libc_start_main +
    245

    6    tmpdvyfj9p4                        0x0000560094f24169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660012699
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0 != 0 }.filter {\n        $0.digits.map { $0.abs }.reduce(0, +) > 0\n  \
    \  }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(count_nums(arr: [] as\
    \ [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpi9uu5qoo.swift:14:12: error: value of type 'Int' has no member\
    \ 'digits'\n        $0.digits.map { $0.abs }.reduce(0, +) > 0\n        ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012702
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return 0\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpwnihh45r/tmpwnihh45r.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b01c4378c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b01c406fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b01c406f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b01c406e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwnihh45r                        0x000055fd08e9f485 <unavailable> + 5253

    5    libc.so.6                          0x00002b01c4564460 __libc_start_main +
    245

    6    tmpwnihh45r                        0x000055fd08e9ef69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660012698
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for num in arr {\n        let nums = num.digits\n        let sum = nums.reduce(0,\
    \ +)\n        if num < 0 {\n            if nums.reduce(0, +) + 1 > 0 {\n     \
    \           count += 1\n            }\n        } else {\n            if sum >\
    \ 0 {\n                count += 1\n            }\n        }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(count_nums(arr: [] as [Int])\
    \ == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1,\
    \ 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5]) ==\
    \ 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp4b2gyksw.swift:15:24: error: value of type 'Int' has no member\
    \ 'digits'\n        let nums = num.digits\n                   ~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012700
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { is_num($0) }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_nums(arr:\
    \ [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp5f00hhje.swift:13:25: error: cannot find 'is_num' in scope\n  \
    \  return arr.filter { is_num($0) }.count\n                        ^~~~~~\n"
  stdout: ''
  timestamp: 1660012699
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for num in arr {\n        var sum = 0\n        var n = num\n        if n\
    \ < 0 {\n            n = -n\n        }\n        while n > 0 {\n            sum\
    \ += n % 10\n            n /= 10\n        }\n        if sum > 0 {\n          \
    \  count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmp6juu0jis/tmp6juu0jis.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2001577c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b200126eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b200126e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b200126d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6juu0jis                        0x0000556d92e545a0 <unavailable> + 5536

    5    libc.so.6                          0x00002b2001763460 __libc_start_main +
    245

    6    tmp6juu0jis                        0x0000556d92e54169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660012555
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n  return arr.filter\
    \ { has_non_zero_digit_sum($0) }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpimnl80sy.swift:13:23: error: cannot find 'has_non_zero_digit_sum'\
    \ in scope\n  return arr.filter { has_non_zero_digit_sum($0) }.count\n       \
    \               ^~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660012699
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter({\
    \ $0.digits.reduce(0, { $0 + $1 }) > 0 }).count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1,\
    \ -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpru8wsw0o.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter({ $0.digits.reduce(0, { $0 + $1 }) > 0 }).count\n\
    \                        ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012700
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var sum = 0\n \
    \   for i in arr {\n        var k = i\n        if k < 0 {\n            k = -1\
    \ * k\n        }\n        while k > 0 {\n            sum += k % 10\n         \
    \   k /= 10\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1,\
    \ -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmprjshzzsf/tmprjshzzsf.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3153ffbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3153cf2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3153cf2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3153cf17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprjshzzsf                        0x000055e90b4ea5a0 <unavailable> + 5536

    5    libc.so.6                          0x00002b31541e7460 __libc_start_main +
    245

    6    tmprjshzzsf                        0x000055e90b4ea169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660012700
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter({\
    \ $0.abs % 9 > 0 }).count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_nums(arr:\
    \ [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmplbze7tnm.swift:13:28: error: value of type 'Int' has no member\
    \ 'abs'\n    return arr.filter({ $0.abs % 9 > 0 }).count\n                   \
    \     ~~ ^~~\n"
  stdout: ''
  timestamp: 1660012700
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.reduce(0)\
    \ { (result, element) in\n        var sumOfDigits = element.digits.reduce(0) {\
    \ $0 + $1 }\n        if element < 0 {\n            sumOfDigits *= -1\n       \
    \ }\n        return sumOfDigits > 0 ? result + 1 : result\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpbu0wez7z.swift:14:35: error: value of type 'Int' has no member\
    \ 'digits'\n        var sumOfDigits = element.digits.reduce(0) { $0 + $1 }\n \
    \                         ~~~~~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012700
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for n in arr {\n        var sum = 0\n        var current = n\n        if\
    \ current < 0 {\n            current = current * -1\n        }\n        while\
    \ current > 0 {\n            sum += current % 10\n            current = current\
    \ / 10\n        }\n        if sum > 0 {\n            count += 1\n        }\n \
    \   }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_nums(arr:\
    \ [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmpadx37soq/tmpadx37soq.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3d8da08c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3d8d6ffb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3d8d6ff988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3d8d6fe7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpadx37soq                        0x0000557eeb4ce5a0 <unavailable> + 5536

    5    libc.so.6                          0x00002b3d8dbf4460 __libc_start_main +
    245

    6    tmpadx37soq                        0x0000557eeb4ce169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660012700
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return 0\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpwnihh45r/tmpwnihh45r.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b01c4378c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b01c406fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b01c406f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b01c406e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwnihh45r                        0x000055fd08e9f485 <unavailable> + 5253

    5    libc.so.6                          0x00002b01c4564460 __libc_start_main +
    245

    6    tmpwnihh45r                        0x000055fd08e9ef69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660012698
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    arr.filter({ (num)\
    \ -> Bool in\n        if num >= 0 {\n            return sum_digits(num: num) >\
    \ 0\n        } else {\n            return sum_digits(num: num * -1) > 0\n    \
    \    }\n    }).count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_nums(arr:\
    \ [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpyswfbn1t.swift:15:20: error: cannot find 'sum_digits' in scope\n\
    \            return sum_digits(num: num) > 0\n                   ^~~~~~~~~~\n\
    /tmp/tmpyswfbn1t.swift:17:20: error: cannot find 'sum_digits' in scope\n     \
    \       return sum_digits(num: num * -1) > 0\n                   ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660012700
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ {(num: Int) -> Bool in\n        let digits = abs(num).digits()\n        return\
    \ digits.reduce(0, combine: +) > 0\n    }.count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1,\
    \ -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp1aohgm1x.swift:14:31: error: value of type 'Int' has no member\
    \ 'digits'\n        let digits = abs(num).digits()\n                     ~~~~~~~~\
    \ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012700
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter({\
    \ sum_digits($0) > 0 }).count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(count_nums(arr:\
    \ [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpyv2ag0u8.swift:13:25: error: cannot find 'sum_digits' in scope\n\
    \    return arr.filter({ sum_digits($0) > 0 }).count\n                       \
    \ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660012699
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return 0\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpwnihh45r/tmpwnihh45r.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b01c4378c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b01c406fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b01c406f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b01c406e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwnihh45r                        0x000055fd08e9f485 <unavailable> + 5253

    5    libc.so.6                          0x00002b01c4564460 __libc_start_main +
    245

    6    tmpwnihh45r                        0x000055fd08e9ef69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660012698
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.reduce(0)\
    \ { count, num in\n        if digits_sum(num: num) > 0 {\n            return count\
    \ + 1\n        }\n        return count\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1,\
    \ -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpswitxliq.swift:14:12: error: cannot find 'digits_sum' in scope\n\
    \        if digits_sum(num: num) > 0 {\n           ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660012700
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    if arr.count ==\
    \ 0 {\n        return 0\n    } else {\n        var count = 0\n        for num\
    \ in arr {\n            if sum_digits(num: num) > 0 {\n                count +=\
    \ 1\n            }\n        }\n        return count\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp9li2ocdh.swift:18:16: error: cannot find 'sum_digits' in scope\n\
    \            if sum_digits(num: num) > 0 {\n               ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660012700
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for num in arr {\n        var sum = 0\n        var n = num\n        if n\
    \ < 0 {\n            n = -n\n        }\n        while n > 0 {\n            sum\
    \ += n % 10\n            n /= 10\n        }\n        if sum > 0 {\n          \
    \  count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmp6juu0jis/tmp6juu0jis.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2001577c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b200126eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b200126e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b200126d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6juu0jis                        0x0000556d92e545a0 <unavailable> + 5536

    5    libc.so.6                          0x00002b2001763460 __libc_start_main +
    245

    6    tmp6juu0jis                        0x0000556d92e54169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660012555
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0 != 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_nums(arr: []\
    \ as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmpqkyzfvnz/tmpqkyzfvnz.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afbb8d1cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afbb8a13b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afbb8a13988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afbb8a127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqkyzfvnz                        0x000055ed65f0f4c0 <unavailable> + 5312

    5    libc.so.6                          0x00002afbb8f08460 __libc_start_main +
    245

    6    tmpqkyzfvnz                        0x000055ed65f0f089 <unavailable> + 4233

    '
  stdout: ''
  timestamp: 1660012555
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n  var count = 0\n \
    \ for num in arr {\n    var sum = 0\n    var num2 = num\n    if num < 0 {\n  \
    \    num2 = -num\n    }\n    while num2 > 0 {\n      sum += num2 % 10\n      num2\
    \ /= 10\n    }\n    if sum > 0 {\n      count += 1\n    }\n  }\n  return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpz1cri2ov/tmpz1cri2ov.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abbed5d2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abbed2c9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abbed2c9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abbed2c87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz1cri2ov                        0x000055e82c9035a0 <unavailable> + 5536

    5    libc.so.6                          0x00002abbed7be460 __libc_start_main +
    245

    6    tmpz1cri2ov                        0x000055e82c903169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660012700
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    // FIXME: Implement\
    \ this function.\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(count_nums(arr:\
    \ [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmphoccxi_c/tmphoccxi_c.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2774a97c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b277478eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b277478e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b277478d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphoccxi_c                        0x0000556084c86485 <unavailable> + 5253

    5    libc.so.6                          0x00002b2774c83460 __libc_start_main +
    245

    6    tmphoccxi_c                        0x0000556084c85f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660012700
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return 0\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpwnihh45r/tmpwnihh45r.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b01c4378c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b01c406fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b01c406f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b01c406e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwnihh45r                        0x000055fd08e9f485 <unavailable> + 5253

    5    libc.so.6                          0x00002b01c4564460 __libc_start_main +
    245

    6    tmpwnihh45r                        0x000055fd08e9ef69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660012698
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.reduce(0)\
    \ { (res, num) in\n        res + abs(num).digits.reduce(0, +) > 0 ? 1 : 0\n  \
    \  }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(count_nums(arr: [] as [Int])\
    \ == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1,\
    \ 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5]) ==\
    \ 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpfi2b6_sc.swift:14:24: error: value of type 'Int' has no member\
    \ 'digits'\n        res + abs(num).digits.reduce(0, +) > 0 ? 1 : 0\n         \
    \     ~~~~~~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012707
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    let nums = arr.map\
    \ {\n        return abs($0)\n    }.reduce(0) {\n        var total = $0\n     \
    \   var r = $1\n        while r > 0 {\n            total += r % 10\n         \
    \   r /= 10\n        }\n        return total\n    }\n    return nums\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpuo2m_uz2/tmpuo2m_uz2.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21872dbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2186fd2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2186fd2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2186fd17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuo2m_uz2                        0x0000562ccc281640 <unavailable> + 5696

    5    libc.so.6                          0x00002b21874c7460 __libc_start_main +
    245

    6    tmpuo2m_uz2                        0x0000562ccc281209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660012700
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for num in arr {\n        var countDigits = 0\n        var temp: Int\n  \
    \      if num < 0 {\n            temp = -num\n        } else {\n            temp\
    \ = num\n        }\n        while temp > 0 {\n            countDigits += temp\
    \ % 10\n            temp /= 10\n        }\n        if countDigits > 0 {\n    \
    \        count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpm6_0olxr/tmpm6_0olxr.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af401427c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af40111eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af40111e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af40111d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpm6_0olxr                        0x000055ec544fe5a0 <unavailable> + 5536

    5    libc.so.6                          0x00002af401613460 __libc_start_main +
    245

    6    tmpm6_0olxr                        0x000055ec544fe169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660012700
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    // your code here\n\
    \    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_nums(arr: []\
    \ as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmp_vk1mw4y/tmp_vk1mw4y.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9e46705c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9e463fcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9e463fc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9e463fb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_vk1mw4y                        0x000055b06ff25485 <unavailable> + 5253

    5    libc.so.6                          0x00002b9e468f1460 __libc_start_main +
    245

    6    tmp_vk1mw4y                        0x000055b06ff24f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660012699
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n  // YOUR CODE HERE\n\
    \  return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(count_nums(arr: [] as\
    \ [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmpdyy7fe4m/tmpdyy7fe4m.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b423536ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4235065b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4235065988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b42350647b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdyy7fe4m                        0x000055abacb26485 <unavailable> + 5253

    5    libc.so.6                          0x00002b423555a460 __libc_start_main +
    245

    6    tmpdyy7fe4m                        0x000055abacb25f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660012700
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n\treturn arr.reduce(0)\
    \ { $0 + ($1 != 0 && (abs($1) != $1 || $1 % 10 != 0)) ? 1 : 0 }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpkvw1q59x.swift:13:9: error: the compiler is unable to type-check\
    \ this expression in reasonable time; try breaking up the expression into distinct\
    \ sub-expressions\n        return arr.reduce(0) { $0 + ($1 != 0 && (abs($1) !=\
    \ $1 || $1 % 10 != 0)) ? 1 : 0 }\n               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013201
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    if arr.count ==\
    \ 0 {\n        return 0\n    }\n    return arr.map(abs).reduce(0, +)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpdkcdjyih/tmpdkcdjyih.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b99b0703c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b99b03fab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b99b03fa988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b99b03f97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdkcdjyih                        0x000055b1bae62610 <unavailable> + 5648

    5    libc.so.6                          0x00002b99b08ef460 __libc_start_main +
    245

    6    tmpdkcdjyih                        0x000055b1bae621d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1660012700
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter({\n\
    \        $0.abs.sum_digits() > 0\n    }).count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1,\
    \ -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8o3uehdx.swift:14:12: error: value of type 'Int' has no member\
    \ 'abs'\n        $0.abs.sum_digits() > 0\n        ~~ ^~~\n"
  stdout: ''
  timestamp: 1660012700
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var res = 0\n \
    \   for num in arr {\n        var temp = num\n        if num < 0 {\n         \
    \   temp = -temp\n        }\n        var sum = 0\n        while temp > 0 {\n \
    \           sum += temp % 10\n            temp /= 10\n        }\n        if sum\
    \ > 0 {\n            res += 1\n        }\n    }\n    return res\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmptzk8g1eh/tmptzk8g1eh.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae6081f6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae607eedb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae607eed988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae607eec7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptzk8g1eh                        0x00005597a2f095a0 <unavailable> + 5536

    5    libc.so.6                          0x00002ae6083e2460 __libc_start_main +
    245

    6    tmptzk8g1eh                        0x00005597a2f09169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660012700
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n  let count = arr.reduce(0)\
    \ { (sum, num) -> Int in\n    var digits = 0\n    var s = num < 0 ? -num : num\n\
    \    while s > 0 {\n      digits += s % 10\n      s /= 10\n    }\n    return sum\
    \ + (digits > 0 ? 1 : 0)\n  }\n  return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1,\
    \ -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmph2tbt47l/tmph2tbt47l.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad5c0e3fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad5c0b36b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad5c0b36988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad5c0b357b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmph2tbt47l                        0x0000564620b834b0 <unavailable> + 5296

    5    libc.so.6                          0x00002ad5c102b460 __libc_start_main +
    245

    6    tmph2tbt47l                        0x0000564620b83079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660012700
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ {\n        $0 != 0 && $0 != -0 && $0.signum() * $0.digits.reduce(0, +) > 0\n\
    \    }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_nums(arr: []\
    \ as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpmh5ddsvz.swift:14:49: error: value of type 'Int' has no member\
    \ 'digits'\n        $0 != 0 && $0 != -0 && $0.signum() * $0.digits.reduce(0, +)\
    \ > 0\n                                             ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012700
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter({\
    \ (num) -> Bool in\n        return sum_of_digits(num: num) > 0\n    }).count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpoohwvio4.swift:14:16: error: cannot find 'sum_of_digits' in scope\n\
    \        return sum_of_digits(num: num) > 0\n               ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660012700
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for i in arr {\n        var sum = 0\n        if i < 0 {\n            sum\
    \ += -1\n        }\n        for j in String(abs(i)) {\n            sum += Int(String(j))!\n\
    \        }\n        if sum > 0 {\n            count += 1\n        }\n    }\n \
    \   return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_nums(arr: []\
    \ as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmp3kw3c47i/tmp3kw3c47i.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abcb9011c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abcb8d08b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abcb8d08988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abcb8d077b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3kw3c47i                        0x000056459240c910 <unavailable> + 6416

    5    libc.so.6                          0x00002abcb91fd460 __libc_start_main +
    245

    6    tmp3kw3c47i                        0x000056459240c4d9 <unavailable> + 5337

    '
  stdout: ''
  timestamp: 1660012700
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var res = 0\n \
    \   for i in arr {\n        if i > 0 && i < 10 {\n            res += 1\n     \
    \   } else if i < 0 && i > -10 {\n            res += 1\n        } else {\n   \
    \         var i = i\n            var sum = 0\n            while i != 0 {\n   \
    \             sum += i % 10\n                i /= 10\n            }\n        \
    \    if sum != 0 {\n                res += 1\n            }\n        }\n    }\n\
    \    return res\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_nums(arr: []\
    \ as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmpkxj1xv8_/tmpkxj1xv8_.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae551fbfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae551cb6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae551cb6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae551cb57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkxj1xv8_                        0x0000564cb035d5a0 <unavailable> + 5536

    5    libc.so.6                          0x00002ae5521ab460 __libc_start_main +
    245

    6    tmpkxj1xv8_                        0x0000564cb035d169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660012700
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    // TODO: implement\n\
    \    var result = 0\n    for num in arr {\n        var sumOfDigits = 0\n     \
    \   if num < 0 {\n            sumOfDigits += -num % 10\n            num /= -10\n\
    \        }\n        while num > 0 {\n            sumOfDigits += num % 10\n   \
    \         num /= 10\n        }\n        if sumOfDigits > 0 {\n            result\
    \ += 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1,\
    \ -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpy6wf2eus.swift:19:17: error: left side of mutating operator isn't\
    \ mutable: 'num' is a 'let' constant\n            num /= -10\n            ~~~\
    \ ^\n/tmp/tmpy6wf2eus.swift:23:17: error: left side of mutating operator isn't\
    \ mutable: 'num' is a 'let' constant\n            num /= 10\n            ~~~ ^\n"
  stdout: ''
  timestamp: 1660012700
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    // TODO: Implement\
    \ this function\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(count_nums(arr:\
    \ [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmpas4gbivk/tmpas4gbivk.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad8d3bd8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad8d38cfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad8d38cf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad8d38ce7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpas4gbivk                        0x000055579baef485 <unavailable> + 5253

    5    libc.so.6                          0x00002ad8d3dc4460 __libc_start_main +
    245

    6    tmpas4gbivk                        0x000055579baeef69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660012700
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for num in arr {\n        if num > 0 && sum_digits(num: num) > 0 {\n    \
    \        count += 1\n        } else if num < 0 && sum_digits(num: -num) > 0 {\n\
    \            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpygmbehqf.swift:15:23: error: cannot find 'sum_digits' in scope\n\
    \        if num > 0 && sum_digits(num: num) > 0 {\n                      ^~~~~~~~~~\n\
    /tmp/tmpygmbehqf.swift:17:30: error: cannot find 'sum_digits' in scope\n     \
    \   } else if num < 0 && sum_digits(num: -num) > 0 {\n                       \
    \      ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660012700
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n\tvar count = 0\n\t\
    for num in arr {\n\t\tlet digits = signed_digits(num: num)\n\t\tvar sum = 0\n\t\
    \tfor digit in digits {\n\t\t\tsum += digit\n\t\t}\n\t\tif sum > 0 {\n\t\t\tcount\
    \ += 1\n\t\t}\n\t}\n\treturn count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp_gzixhv9.swift:15:16: error: cannot find 'signed_digits' in scope\n\
    \                let digits = signed_digits(num: num)\n                      \
    \       ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660012700
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n  var num = 0\n  for\
    \ i in arr {\n    var sum = 0\n    var temp = i\n    if i < 0 {\n      temp =\
    \ -i\n    }\n    while temp > 0 {\n      sum += temp % 10\n      temp /= 10\n\
    \    }\n    if sum > 0 {\n      num += 1\n    }\n  }\n  return num\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmp4bywzie1/tmp4bywzie1.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3357263c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3356f5ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3356f5a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3356f597b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4bywzie1                        0x0000556560db15a0 <unavailable> + 5536

    5    libc.so.6                          0x00002b335744f460 __libc_start_main +
    245

    6    tmp4bywzie1                        0x0000556560db1169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660012700
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n  return arr.reduce(0)\
    \ {\n    abs($1) % 10 + abs($1 / 10) > 0 ? $0 + 1 : $0\n  }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpc2bura3q/tmpc2bura3q.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b66dc67fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b66dc376b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b66dc376988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b66dc3757b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc2bura3q                        0x00005584c15045a0 <unavailable> + 5536

    5    libc.so.6                          0x00002b66dc86b460 __libc_start_main +
    245

    6    tmpc2bura3q                        0x00005584c1504169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660012700
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n  return arr.reduce(0)\
    \ {\n    sum, num in\n    sum + (num < 0 ? num * -1 : num)\n  }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpwiwy8dr9/tmpwiwy8dr9.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad49031dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad490014b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad490014988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad4900137b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwiwy8dr9                        0x00005620bfd5f420 <unavailable> + 5152

    5    libc.so.6                          0x00002ad490509460 __libc_start_main +
    245

    6    tmpwiwy8dr9                        0x00005620bfd5efe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660012700
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n  var count = 0\n \
    \ for num in arr {\n    if signed_digits_sum(num: num) > 0 {\n      count += 1\n\
    \    }\n  }\n  return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(count_nums(arr:\
    \ [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpli6j87i1.swift:15:8: error: cannot find 'signed_digits_sum' in\
    \ scope\n    if signed_digits_sum(num: num) > 0 {\n       ^~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660012700
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var res = 0\n \
    \   for i in arr {\n        var number = abs(i)\n        while number > 0 {\n\
    \            res += number % 10\n            number /= 10\n        }\n    }\n\
    \    return res\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_nums(arr: []\
    \ as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmpsa16feeo/tmpsa16feeo.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b620175cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6201453b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6201453988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b62014527b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsa16feeo                        0x0000562a1245c690 <unavailable> + 5776

    5    libc.so.6                          0x00002b6201948460 __libc_start_main +
    245

    6    tmpsa16feeo                        0x0000562a1245c259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1660012700
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.reduce(0)\
    \ {\n        (result, number) in\n        let absNumber = abs(number)\n      \
    \  let digitsSum = String(absNumber).reduce(0) {\n            (result, char) in\n\
    \            return result + Int(String(char))!\n        }\n        return result\
    \ + (digitsSum > 0 ? 1 : 0)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpxzv7c1_h/tmpxzv7c1_h.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2f97593c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2f9728ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2f9728a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2f972897b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxzv7c1_h                        0x000055b44f0077d0 <unavailable> + 6096

    5    libc.so.6                          0x00002b2f9777f460 __libc_start_main +
    245

    6    tmpxzv7c1_h                        0x000055b44f007399 <unavailable> + 5017

    '
  stdout: ''
  timestamp: 1660012700
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return 0\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpwnihh45r/tmpwnihh45r.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b01c4378c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b01c406fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b01c406f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b01c406e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwnihh45r                        0x000055fd08e9f485 <unavailable> + 5253

    5    libc.so.6                          0x00002b01c4564460 __libc_start_main +
    245

    6    tmpwnihh45r                        0x000055fd08e9ef69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660012698
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return 0\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpwnihh45r/tmpwnihh45r.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b01c4378c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b01c406fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b01c406f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b01c406e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwnihh45r                        0x000055fd08e9f485 <unavailable> + 5253

    5    libc.so.6                          0x00002b01c4564460 __libc_start_main +
    245

    6    tmpwnihh45r                        0x000055fd08e9ef69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660012698
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var result = 0\n\
    \    for i in arr {\n        var total = 0\n        var num = i\n        if num\
    \ < 0 {\n            num = num * -1\n        }\n        for d in 0..<String(num).count\
    \ {\n            total += (num % 10)\n            num = num / 10\n        }\n\
    \        if total > 0 {\n            result += 1\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(count_nums(arr: [] as\
    \ [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmp4ky0xdcb/tmp4ky0xdcb.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1175829c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1175520b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1175520988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b117551f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4ky0xdcb                        0x000056421dd807b0 <unavailable> + 6064

    5    libc.so.6                          0x00002b1175a15460 __libc_start_main +
    245

    6    tmp4ky0xdcb                        0x000056421dd80379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660012700
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { (num) -> Bool in\n        return signed_digits(of: num).reduce(0, +) > 0\n\
    \    }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_nums(arr: []\
    \ as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp5ads393b.swift:14:16: error: cannot find 'signed_digits' in scope\n\
    \        return signed_digits(of: num).reduce(0, +) > 0\n               ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660012700
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ {\n        _ in\n        var num = abs(_)\n        var sum = 0\n        while\
    \ num > 0 {\n            sum += num % 10\n            num /= 10\n        }\n \
    \       return sum > 0\n    }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp52m7z2dc.swift:15:23: error: '_' can only appear in a pattern or\
    \ on the left side of an assignment\n        var num = abs(_)\n              \
    \        ^\n"
  stdout: ''
  timestamp: 1660012700
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n\treturn arr.filter({\
    \ has_positive_signed_digits(num: $0) }).count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1,\
    \ -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpjnp3xfq7.swift:13:22: error: cannot find 'has_positive_signed_digits'\
    \ in scope\n        return arr.filter({ has_positive_signed_digits(num: $0) }).count\n\
    \                            ^~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660012700
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for n in arr {\n        var a = 0\n        var x = n\n        if x < 0 {\n\
    \            x = -x\n        }\n        while x > 0 {\n            a += x % 10\n\
    \            x /= 10\n        }\n        if a > 0 {\n            count += 1\n\
    \        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmppvig0kni/tmppvig0kni.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6a53061c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6a52d58b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6a52d58988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6a52d577b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppvig0kni                        0x000055f4013685a0 <unavailable> + 5536

    5    libc.so.6                          0x00002b6a5324d460 __libc_start_main +
    245

    6    tmppvig0kni                        0x000055f401368169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660012700
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for i in arr {\n        var digitSum = 0\n        if i < 0 {\n          \
    \  digitSum += i * -1\n        } else {\n            digitSum += i\n        }\n\
    \        while digitSum > 0 {\n            digitSum = digitSum / 10\n        \
    \    count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmp8vt30lhb/tmp8vt30lhb.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac1991ffc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac198ef6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac198ef6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac198ef57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8vt30lhb                        0x000055ce666445a0 <unavailable> + 5536

    5    libc.so.6                          0x00002ac1993eb460 __libc_start_main +
    245

    6    tmp8vt30lhb                        0x000055ce66644169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660012700
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for num in arr {\n        var number = num\n        if number < 0 {\n   \
    \         number = -number\n        }\n        var sum = 0\n        while number\
    \ > 0 {\n            sum += number % 10\n            number /= 10\n        }\n\
    \        if sum > 0 {\n            count += 1\n        }\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpjv0xz59u/tmpjv0xz59u.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac21f1cec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac21eec5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac21eec5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac21eec47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjv0xz59u                        0x000055faa46635a0 <unavailable> + 5536

    5    libc.so.6                          0x00002ac21f3ba460 __libc_start_main +
    245

    6    tmpjv0xz59u                        0x000055faa4663169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660012700
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var sum = 0\n \
    \   for num in arr {\n        if num < 0 {\n            sum += 1\n        }\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_nums(arr:\
    \ [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmpxoucfaf5/tmpxoucfaf5.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac8689e4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac8686dbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac8686db988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac8686da7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxoucfaf5                        0x000055ac09fce510 <unavailable> + 5392

    5    libc.so.6                          0x00002ac868bd0460 __libc_start_main +
    245

    6    tmpxoucfaf5                        0x000055ac09fce0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660012700
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0.digits().reduce(0, +) > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpik6nerei.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits().reduce(0, +) > 0 }.count\n   \
    \                     ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012607
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n\tvar sum = 0\n\tfor\
    \ i in arr {\n\t\tif i > 0 {\n\t\t\tsum += i\n\t\t} else {\n\t\t\tsum += -i\n\t\
    \t}\n\t}\n\treturn sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_nums(arr:\
    \ [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmpuimzszwl/tmpuimzszwl.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b78ff86bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b78ff562b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b78ff562988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b78ff5617b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuimzszwl                        0x000055bbd2447510 <unavailable> + 5392

    5    libc.so.6                          0x00002b78ffa57460 __libc_start_main +
    245

    6    tmpuimzszwl                        0x000055bbd24470d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660012700
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var result = 0\n\
    \    for num in arr {\n        if signed_digits_sum(num: num) > 0 {\n        \
    \    result += 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp5taldi87.swift:15:12: error: cannot find 'signed_digits_sum' in\
    \ scope\n        if signed_digits_sum(num: num) > 0 {\n           ^~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660012700
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    var signed_digits = [Int]()\n    for n in arr {\n        var x = n\n    \
    \    if x < 0 {\n            signed_digits.append(-1)\n            x = -x\n  \
    \      }\n        while x > 0 {\n            signed_digits.append(x % 10)\n  \
    \          x /= 10\n        }\n    }\n    for n in signed_digits {\n        if\
    \ n > 0 {\n            count += 1\n        }\n    }\n    return count\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmp3tlq950h/tmp3tlq950h.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2608a3fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2608736b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2608736988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b26087357b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3tlq950h                        0x00005589d658d650 <unavailable> + 5712

    5    libc.so.6                          0x00002b2608c2b460 __libc_start_main +
    245

    6    tmp3tlq950h                        0x00005589d658d219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1660012701
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n  return arr.reduce(0)\
    \ { res, num in\n    if num.description.split(separator: \"-\").joined().split(separator:\
    \ \"\").map { Int(String($0))! }.reduce(0, +) > 0 {\n      return res + 1\n  \
    \  }\n    return res\n  }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_nums(arr:\
    \ [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmpsxvhdz39/tmpsxvhdz39.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b550eec4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b550ebbbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b550ebbb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b550ebba7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsxvhdz39                        0x000055c930d8cb20 <unavailable> + 6944

    5    libc.so.6                          0x00002b550f0b0460 __libc_start_main +
    245

    6    tmpsxvhdz39                        0x000055c930d8c6e9 <unavailable> + 5865

    '
  stdout: ''
  timestamp: 1660012701
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    if arr.count ==\
    \ 0 {\n        return 0\n    }\n    var result = 0\n    for i in arr {\n     \
    \   var val = i\n        var sum = 0\n        if val < 0 {\n            val =\
    \ val * -1\n        }\n        while val != 0 {\n            sum += val % 10\n\
    \            val = val / 10\n        }\n        if sum > 0 {\n            result\
    \ += 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1,\
    \ -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmp9y43qj9_/tmp9y43qj9_.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae7bf96ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae7bf661b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae7bf661988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae7bf6607b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9y43qj9_                        0x00005607c4230600 <unavailable> + 5632

    5    libc.so.6                          0x00002ae7bfb56460 __libc_start_main +
    245

    6    tmp9y43qj9_                        0x00005607c42301c9 <unavailable> + 4553

    '
  stdout: ''
  timestamp: 1660012701
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8zmkraxo.swift:13:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012555
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.reduce(0)\
    \ { result, element in\n        return result + (abs(element) % 10 + (abs(element)\
    \ / 10))\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_nums(arr: []\
    \ as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmpqmftgy66/tmpqmftgy66.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9ff2a5fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9ff2756b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9ff2756988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9ff27557b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqmftgy66                        0x000055ac46dbd5a0 <unavailable> + 5536

    5    libc.so.6                          0x00002b9ff2c4b460 __libc_start_main +
    245

    6    tmpqmftgy66                        0x000055ac46dbd169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660012701
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for num in arr {\n        var sum = 0\n        var num2 = num\n        if\
    \ num < 0 {\n            num2 = -num\n        }\n        while num2 > 0 {\n  \
    \          sum += num2 % 10\n            num2 /= 10\n        }\n        if sum\
    \ > 0 {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpyv1urjy6/tmpyv1urjy6.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae62f137c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae62ee2eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae62ee2e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae62ee2d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyv1urjy6                        0x00005560d1dab5a0 <unavailable> + 5536

    5    libc.so.6                          0x00002ae62f323460 __libc_start_main +
    245

    6    tmpyv1urjy6                        0x00005560d1dab169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660012701
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { $0.digitsSum() > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(count_nums(arr:\
    \ [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8oi1cmj1.swift:13:28: error: value of type 'Int' has no member\
    \ 'digitsSum'\n    return arr.filter { $0.digitsSum() > 0 }.count\n          \
    \              ~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660012700
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var result = 0\n\
    \    for element in arr {\n        if element.digits.reduce(0, +) > 0 {\n    \
    \        result += 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpptj8ehfc.swift:15:20: error: value of type 'Int' has no member\
    \ 'digits'\n        if element.digits.reduce(0, +) > 0 {\n           ~~~~~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012701
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var total = 0\n\
    \    for num in arr {\n        if (num / 10 != 0) {\n            total += abs(num\
    \ % 10)\n            total += abs(num / 10)\n        } else {\n            total\
    \ += abs(num)\n        }\n    }\n    return total\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmp3oyhsz6_/tmp3oyhsz6_.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8c195e5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8c192dcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8c192dc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8c192db7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3oyhsz6_                        0x00005576b804e690 <unavailable> + 5776

    5    libc.so.6                          0x00002b8c197d1460 __libc_start_main +
    245

    6    tmp3oyhsz6_                        0x00005576b804e259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1660012701
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter({\
    \ $0 > 0 && $0 < 10}).count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(count_nums(arr:\
    \ [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmpv7l5o1r7/tmpv7l5o1r7.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2ac3ad2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2ac37c9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2ac37c9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2ac37c87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv7l5o1r7                        0x0000556e10fe7785 <unavailable> + 6021

    5    libc.so.6                          0x00002b2ac3cbe460 __libc_start_main +
    245

    6    tmpv7l5o1r7                        0x0000556e10fe7089 <unavailable> + 4233

    '
  stdout: ''
  timestamp: 1660012701
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for i in arr {\n        if i.digits.reduce(0, +) > 0 {\n            count\
    \ += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1,\
    \ -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpwqo040e4.swift:15:14: error: value of type 'Int' has no member\
    \ 'digits'\n        if i.digits.reduce(0, +) > 0 {\n           ~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012701
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.reduce(0)\
    \ {\n        x, y in\n        return x + (sum_digits(num: y) > 0 ? 1 : 0)\n  \
    \  }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(count_nums(arr: [] as [Int])\
    \ == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1,\
    \ 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5]) ==\
    \ 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp03akf4y0.swift:15:21: error: cannot find 'sum_digits' in scope\n\
    \        return x + (sum_digits(num: y) > 0 ? 1 : 0)\n                    ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660012701
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var result = 0\n\
    \    for num in arr {\n        var temp = num\n        var sum = 0\n        if\
    \ temp < 0 {\n            temp = -temp\n        }\n        while temp > 0 {\n\
    \            sum += temp % 10\n            temp /= 10\n        }\n        if sum\
    \ > 0 {\n            result += 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpxnviq21y/tmpxnviq21y.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af474b8fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af474886b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af474886988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af4748857b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxnviq21y                        0x0000562a644865a0 <unavailable> + 5536

    5    libc.so.6                          0x00002af474d7b460 __libc_start_main +
    245

    6    tmpxnviq21y                        0x0000562a64486169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660012701
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    let result = arr.filter\
    \ { i in abs(i).digits.reduce(0, +) > 0 }\n    return result.count\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpgrhqn6qj.swift:13:43: error: value of type 'Int' has no member\
    \ 'digits'\n    let result = arr.filter { i in abs(i).digits.reduce(0, +) > 0\
    \ }\n                                   ~~~~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012701
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    var sum = 0\n    for i in arr {\n        sum = 0\n        if i < 0 {\n  \
    \          sum = 0\n            for i in String(abs(i)) {\n                sum\
    \ += Int(String(i))!\n            }\n            if sum > 0 {\n              \
    \  count += 1\n            }\n        } else {\n            for i in String(i)\
    \ {\n                sum += Int(String(i))!\n            }\n            if sum\
    \ > 0 {\n                count += 1\n            }\n        }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(count_nums(arr: [] as [Int])\
    \ == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1,\
    \ 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5]) ==\
    \ 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmpnoy91c8h/tmpnoy91c8h.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5db1ad5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5db17ccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5db17cc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5db17cb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnoy91c8h                        0x0000560d53517910 <unavailable> + 6416

    5    libc.so.6                          0x00002b5db1cc1460 __libc_start_main +
    245

    6    tmpnoy91c8h                        0x0000560d535174d9 <unavailable> + 5337

    '
  stdout: ''
  timestamp: 1660012701
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter\
    \ { num in\n        return num != 0 && abs(num) == num ? num : signed_digits(num:\
    \ num).reduce(0, +) > 0\n    }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpqahd2t82.swift:14:52: error: cannot find 'signed_digits' in scope\n\
    \        return num != 0 && abs(num) == num ? num : signed_digits(num: num).reduce(0,\
    \ +) > 0\n                                                   ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660012701
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for i in arr {\n        if digit_sum(i) > 0 {\n            count += 1\n \
    \       }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp_7nzvjqp.swift:15:12: error: cannot find 'digit_sum' in scope\n\
    \        if digit_sum(i) > 0 {\n           ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660012701
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n\
    \    for i in arr {\n        let abs_i = abs(i)\n        var sum = 0\n       \
    \ var loop = abs_i\n        while loop > 0 {\n            sum += loop % 10\n \
    \           loop /= 10\n        }\n        if sum > 0 {\n            count +=\
    \ 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpkgia1sls/tmpkgia1sls.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1f0a009c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1f09d00b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1f09d00988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1f09cff7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkgia1sls                        0x0000560e74681690 <unavailable> + 5776

    5    libc.so.6                          0x00002b1f0a1f5460 __libc_start_main +
    245

    6    tmpkgia1sls                        0x0000560e74681259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1660012701
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    let sum_of_digits\
    \ = { (num: Int) -> Int in\n        var n = num\n        var s = 0\n        while\
    \ n != 0 {\n            s += abs(n % 10)\n            n /= 10\n        }\n   \
    \     return s\n    }\n    var count = 0\n    for num in arr {\n        if sum_of_digits(num)\
    \ > 0 {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmp_i7viw82/tmp_i7viw82.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abc7c86dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abc7c564b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abc7c564988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abc7c5637b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_i7viw82                        0x000055589ea18690 <unavailable> + 5776

    5    libc.so.6                          0x00002abc7ca59460 __libc_start_main +
    245

    6    tmp_i7viw82                        0x000055589ea18259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1660012701
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.reduce(0)\
    \ {\n        accum, num in\n        var sum = 0\n        var cur = num\n     \
    \   while cur != 0 {\n            sum += abs(cur % 10)\n            cur /= 10\n\
    \        }\n        return accum + (sum > 0 ? 1 : 0)\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpo3c703aa/tmpo3c703aa.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6cf2c13c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6cf290ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6cf290a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6cf29097b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo3c703aa                        0x00005571fe1ab5a0 <unavailable> + 5536

    5    libc.so.6                          0x00002b6cf2dff460 __libc_start_main +
    245

    6    tmpo3c703aa                        0x00005571fe1ab169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660012701
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter({$0\
    \ >= 0 ? true : false}).reduce(0, { (result, element) -> Int in\n        var sum\
    \ = 0\n        var n = element\n        while n > 0 {\n            sum += n %\
    \ 10\n            n /= 10\n        }\n        return result + (sum > 0 ? 1 : 0)\n\
    \    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(count_nums(arr: [] as [Int])\
    \ == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1,\
    \ 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5]) ==\
    \ 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmpsz1vs9nh/tmpsz1vs9nh.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abb60730c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abb60427b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abb60427988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abb604267b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsz1vs9nh                        0x000055f2f1e9a92a <unavailable> + 6442

    5    libc.so.6                          0x00002abb6091c460 __libc_start_main +
    245

    6    tmpsz1vs9nh                        0x000055f2f1e9a139 <unavailable> + 4409

    '
  stdout: ''
  timestamp: 1660012701
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    let result = arr.filter({\
    \ $0 != 0 }).map({\n        if $0 < 0 { return -1 }\n        return 1\n    }).reduce(0,\
    \ +)\n    return result == 0 ? 0 : arr.count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1,\
    \ -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpt61d8n_c/tmpt61d8n_c.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b31c47a5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b31c449cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b31c449c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b31c449b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt61d8n_c                        0x00005635090fd5e0 <unavailable> + 5600

    5    libc.so.6                          0x00002b31c4991460 __libc_start_main +
    245

    6    tmpt61d8n_c                        0x00005635090fd1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660012701
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.reduce(0)\
    \ { (acc, item) in\n        if sum_digits(n: item) > 0 {\n            return acc\
    \ + 1\n        }\n        return acc\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1,\
    \ -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpacggdvh9.swift:14:12: error: cannot find 'sum_digits' in scope\n\
    \        if sum_digits(n: item) > 0 {\n           ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660012701
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter{\n\
    \        $0 < 0 ? ($0 * -1).digits.reduce(0, +) > 0 : $0.digits.reduce(0, +) >\
    \ 0\n    }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_nums(arr: []\
    \ as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpryqc__hp.swift:14:57: error: value of type 'Int' has no member\
    \ 'digits'\n        $0 < 0 ? ($0 * -1).digits.reduce(0, +) > 0 : $0.digits.reduce(0,\
    \ +) > 0\n                                                     ~~ ^~~~~~\n/tmp/tmpryqc__hp.swift:14:28:\
    \ error: value of type 'Int' has no member 'digits'\n        $0 < 0 ? ($0 * -1).digits.reduce(0,\
    \ +) > 0 : $0.digits.reduce(0, +) > 0\n                 ~~~~~~~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012706
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n  return arr.filter{$0.digits.reduce(0,\
    \ +) > 0}.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_nums(arr: []\
    \ as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpgjd1kvyb.swift:13:24: error: value of type 'Int' has no member\
    \ 'digits'\n  return arr.filter{$0.digits.reduce(0, +) > 0}.count\n          \
    \          ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012701
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n  var count = 0\n \
    \ for number in arr {\n    if number > 0 {\n      count += isSumOfDigitsGreaterThanZero(number:\
    \ number)\n    } else {\n      count += isSumOfDigitsGreaterThanZero(number: -number)\n\
    \    }\n  }\n  return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(count_nums(arr:\
    \ [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpzycza6jk.swift:16:16: error: cannot find 'isSumOfDigitsGreaterThanZero'\
    \ in scope\n      count += isSumOfDigitsGreaterThanZero(number: number)\n    \
    \           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpzycza6jk.swift:18:16: error:\
    \ cannot find 'isSumOfDigitsGreaterThanZero' in scope\n      count += isSumOfDigitsGreaterThanZero(number:\
    \ -number)\n               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660012701
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.filter({\
    \ Int(String($0).reduce(0, {$0 + abs($1.wholeNumberValue!)})) > 0 }).count\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmp6mmpm6sc/tmp6mmpm6sc.swift:13: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b37e3b0ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b37e3805561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b37e3805286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b37e380513c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b37e3804bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp6mmpm6sc                        0x000056060d569165 <unavailable> + 8549

    6    libswiftCore.so                    0x00002b37e3914410 Sequence.reduce<A>(_:_:)
    + 530

    7    tmp6mmpm6sc                        0x000056060d56900e <unavailable> + 8206

    8    libswiftCore.so                    0x00002b37e38026e0 _ArrayProtocol.filter(_:)
    + 518

    9    tmp6mmpm6sc                        0x000056060d568f4d <unavailable> + 8013

    10   tmp6mmpm6sc                        0x000056060d568902 <unavailable> + 6402

    11   libc.so.6                          0x00002b37e3cfa460 __libc_start_main +
    245

    12   tmp6mmpm6sc                        0x000056060d568549 <unavailable> + 5449

    '
  stdout: ''
  timestamp: 1660012701
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return arr.reduce(0)\
    \ { acc, el in\n        return acc + (el / 10 == 0 ? 0 : 1)\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpkh3zdtg6/tmpkh3zdtg6.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae257f66c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae257c5db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae257c5d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae257c5c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkh3zdtg6                        0x000055b856da9595 <unavailable> + 5525

    5    libc.so.6                          0x00002ae258152460 __libc_start_main +
    245

    6    tmpkh3zdtg6                        0x000055b856da9079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660012701
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n\
    /// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr:\
    \ [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    return 0\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpwnihh45r/tmpwnihh45r.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b01c4378c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b01c406fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b01c406f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b01c406e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwnihh45r                        0x000055fd08e9f485 <unavailable> + 5253

    5    libc.so.6                          0x00002b01c4564460 __libc_start_main +
    245

    6    tmpwnihh45r                        0x000055fd08e9ef69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660012698
