name: HumanEval_44_change_base
language: swift
prompt: "\n/// Change numerical base of input number x to base.\n/// return string\
  \ representation after the conversion.\n/// base numbers are less than 10.\n///\
  \ >>> change_base(x: 8, base: 3)\n/// \"22\"\n/// >>> change_base(x: 8, base: 2)\n\
  /// \"1000\"\n/// >>> change_base(x: 7, base: 2)\n/// \"111\"\nfunc change_base(x:\
  \ Int, base: Int) -> String {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\n\
  assert(change_base(x: 9, base: 3) == \"100\")\nassert(change_base(x: 234, base:\
  \ 2) == \"11101010\")\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x:\
  \ 8, base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x:\
  \ 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x:\
  \ 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x:\
  \ 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")"
completions: ['    return String(x, radix: base)', "    var result = \"\"\n    var\
    \ quotient = x\n    while quotient != 0 {\n        let remainder = quotient %\
    \ base\n        result = \"\\(remainder)\" + result\n        quotient = quotient\
    \ / base\n    }\n    return result", "    var result = \"\"\n    var tmp = x\n\
    \    while tmp > 0 {\n        let remainder = tmp % base\n        result.append(String(remainder))\n\
    \        tmp /= base\n    }\n    return String(result.reversed())", "    var remaining\
    \ = x\n    var result = \"\"\n    while remaining > 0 {\n        result = String(remaining\
    \ % base) + result\n        remaining /= base\n    }\n    return result", "  \
    \  let base_characters = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"\
    7\", \"8\", \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"]\n    var result =\
    \ \"\"\n    var temp = x\n    while temp > 0 {\n        result = base_characters[temp\
    \ % base] + result\n        temp /= base\n    }\n    return result", "    let\
    \ alphabet = [\n        \"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\"\
    , \"8\", \"9\",\n        \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\"\
    , \"I\", \"J\",\n        \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\"\
    , \"S\", \"T\",\n        \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\"\n    ]\n   \
    \ var num = x\n    var res = \"\"\n    while num > 0 {\n        res = alphabet[num\
    \ % base] + res\n        num /= base\n    }\n    return res", '    return String(x,
    radix: base)', "    var x = x\n    var result = \"\"\n    while x > 0 {\n    \
    \    result = String(x % base) + result\n        x /= base\n    }\n    return\
    \ result", "    var num = x\n    var res = \"\"\n    while num > 0 {\n       \
    \ res = String(num % base) + res\n        num /= base\n    }\n    return res",
  "    var x = x\n    var answer = \"\"\n    while x != 0 {\n        answer.append(String(x\
    \ % base))\n        x /= base\n    }\n    return String(answer.reversed())", " \
    \   var n = x\n    var temp = n\n    var arr = [String]()\n    while (temp !=\
    \ 0) {\n        arr.append(String(temp % base))\n        temp = temp / base\n\
    \    }\n    let result = String(arr.reversed())\n    return result", "    var\
    \ str = \"\"\n    var x = x\n    while x > 0 {\n        let rem = x % base\n \
    \       str = String(rem) + str\n        x /= base\n    }\n    return str", " \
    \   var s = \"\"\n    var x = x\n    while x > 0 {\n        s.append(String(x\
    \ % base))\n        x /= base\n    }\n    return String(s.reversed())", '  return
    String(x, radix: base)', "    // insert code here\n    var result = String()\n\
    \    let originalNumber = x\n    let numericBase = base\n    //let y = originalNumber\
    \ / numericBase\n    var z = 0\n    var quotient = originalNumber / numericBase\n\
    \    var remainder = originalNumber % numericBase\n    print(quotient)\n    print(remainder)\n\
    \    print(originalNumber)\n    while originalNumber > numericBase {\n       \
    \ z = originalNumber % numericBase\n        result.append(String(z))\n       \
    \ remainder = originalNumber % numericBase\n        if remainder == 0 {\n    \
    \        break\n        }\n        //print(result)\n        originalNumber = (originalNumber\
    \ - z) / numericBase\n        //print(originalNumber)\n    }\n    result.append(String(originalNumber))\n\
    \    let reversed = String(result.reversed())\n    return reversed", "    if x\
    \ < base {\n        return String(x)\n    } else {\n        let new_num = x /\
    \ base\n        let last_digit = x % base\n        return change_base(x: new_num,\
    \ base: base) + String(last_digit)\n    }", "    var digits = [Int]()\n    var\
    \ temp = x\n    while temp > 0 {\n        digits.append(temp % base)\n       \
    \ temp /= base\n    }\n    var result = \"\"\n    for i in (0..<digits.count).reversed()\
    \ {\n        result += String(digits[i])\n    }\n    return result", "    var\
    \ result = \"\"\n    var a = x\n    while (a != 0) {\n        result = String(a\
    \ % base) + result\n        a /= base\n    }\n    return result", "    var x =\
    \ x\n    var result = \"\"\n    while (x != 0) {\n        result = String(x %\
    \ base) + result\n        x /= base\n    }\n    return result", "    \n    func\
    \ power(x: Int, n: Int) -> Int {\n        var p = 1\n        for _ in 0..<n {\n\
    \            p *= x\n        }\n        return p\n    }\n    \n    if base > 10\
    \ {\n        return \"Input base must be less than 10\"\n    }\n    \n    var\
    \ x = x\n    var digits = [Int]()\n    var digit_count = 0\n    while power(x:\
    \ base, n: digit_count) <= x {\n        digit_count += 1\n    }\n    while digit_count\
    \ > 0 {\n        var p = 1\n        for _ in 0..<digit_count - 1 {\n         \
    \   p *= base\n        }\n        let digit = x / p\n        digits.append(digit)\n\
    \        x -= digit * p\n        digit_count -= 1\n    }\n    let result = digits.map\
    \ { String($0) }.joined()\n    return result", "    var str = \"\"\n    var x\
    \ = x\n    while x > 0 {\n        let m = x % base\n        x /= base\n      \
    \  str = String(m) + str\n    }\n    return str", "    var result = \"\"\n   \
    \ var x = x\n    while (x > 0) {\n        let remain = x % base\n        result\
    \ = \"\\(remain)\" + result\n        x = x / base\n    }\n    return result",
  "  var result = \"\"\n  var remain = x\n  while remain > 0 {\n    result.append(String(remain\
    \ % base))\n    remain /= base\n  }\n  return String(result.reversed())", "  \
    \  assert(base < 10)\n    var res = \"\"\n    var remainder = x\n    while remainder\
    \ != 0 {\n        res.append(String(remainder % base))\n        remainder /= base\n\
    \    }\n    return String(res.reversed())", "    var result = \"\"\n    var x\
    \ = x\n    while x > 0 {\n        result.append(String(x % base))\n        x /=\
    \ base\n    }\n    return String(result.reversed())", "    var new_x = x\n   \
    \ var s = \"\"\n    while new_x > 0 {\n        let tmp = new_x % base\n      \
    \  s = \"\\(tmp)\" + s\n        new_x = new_x / base\n    }\n    return s", " \
    \   var x = x\n    var result = \"\"\n    let digits = [\"0\", \"1\", \"2\", \"\
    3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"]\n    while x > 0 {\n        result\
    \ = digits[x % base] + result\n        x /= base\n    }\n    return result", " \
    \   var x = x\n    var s = \"\"\n    while x > 0 {\n        s = String(x % base)\
    \ + s\n        x /= base\n    }\n    return s", "    var converted_number: String\
    \ = \"\"\n    var x_cp = x\n    while x_cp != 0 {\n        converted_number.append(String(x_cp\
    \ % base))\n        x_cp /= base\n    }\n    return String(converted_number.reversed())",
  "    precondition(base < 10)\n    var answer = \"\"\n    var x = x\n    while x\
    \ > 0 {\n        answer = String(x % base) + answer\n        x /= base\n    }\n\
    \    return answer", "    var x = x\n    var arr: [Int] = []\n    while x != 0\
    \ {\n        arr.append(x % base)\n        x /= base\n    }\n    let res = arr.reverse().map{String($0)}.reduce(\"\
    \", combine: +)\n    return res", "    var result = \"\"\n    var rest = x\n \
    \   while rest != 0 {\n        result = String(rest % base) + result\n       \
    \ rest = rest / base\n    }\n    return result", "    if x == 0 {\n        return\
    \ \"0\"\n    }\n    var res = \"\"\n    var n = x\n    while n > 0 {\n       \
    \ res = String(n % base) + res\n        n /= base\n    }\n    return res", " \
    \   var x = x\n    var ret: String = \"\"\n    while x > 0 {\n        let remain\
    \ = x % base\n        ret.append(String(remain))\n        x /= base\n    }\n \
    \   return String(ret.reversed())", "    var result = \"\"\n    var x = x\n  \
    \  while x != 0 {\n        let rem = x % base\n        result = String(rem) +\
    \ result\n        x /= base\n    }\n    return result", '    return String(x,
    radix: base)', "    var x = x\n    var base = base\n    var res = \"\"\n    while\
    \ x != 0 {\n        res = String(x % base) + res\n        x /= base\n    }\n \
    \   return res", "    var result = \"\"\n    var y = x\n    if x == 0 {\n    \
    \    return \"0\"\n    }\n    if base == 0 {\n        return \"ERROR\"\n    }\n\
    \    if base == 1 {\n        return String(repeating: \"1\", count: x)\n    }\n\
    \    while y > 0 {\n        result.append(String(y % base))\n        y /= base\n\
    \    }\n    return String(result.reversed())", "    var result = \"\"\n    var\
    \ rest = x\n    var b = base\n    while rest > 0 {\n        result += String(rest\
    \ % b)\n        rest /= b\n    }\n    return String(result.reversed())", "   \
    \ var queue = [Int]()\n    var curr = x\n    while curr > 0 {\n        let rem\
    \ = curr % base\n        queue.append(rem)\n        curr = curr / base\n    }\n\
    \    var result = \"\"\n    while !queue.isEmpty {\n        result += String(queue.removeLast())\n\
    \    }\n    return result", '    return "";', '  return String(x, radix: base)',
  "    var x = x\n    var string = \"\"\n    while x > 0 {\n        string = String(x\
    \ % base) + string\n        x /= base\n    }\n    return string", "    var r :\
    \ Int = x\n    var s : String = \"\"\n    while r > 0 {\n        s = \"\\(r %\
    \ base)\" + s\n        r = r / base\n    }\n    return s", "    var res = \"\"\
    \n    var x = x\n    while x > 0 {\n        res = String(x % base) + res\n   \
    \     x /= base\n    }\n    return res", "    var ret = \"\"\n    var n = x\n\
    \    var b = base\n    while n > 0 {\n        ret = String(n % b) + ret\n    \
    \    n /= b\n    }\n    return ret", "    var res = \"\"\n    var x = x\n    if\
    \ x == 0 {\n        return \"0\"\n    }\n    if x < 0 {\n        x = -x\n    }\n\
    \    while x > 0 {\n        res += String(x % base)\n        x /= base\n    }\n\
    \    return String(res.reversed())", "    var str = \"\"\n    var re = x\n   \
    \ while re > 0 {\n        str = String(re % base) + str\n        re /= base\n\
    \    }\n    return str", "    var x = x\n    var result = \"\"\n    while x >\
    \ 0 {\n        result = String(x % base) + result\n        x /= base\n    }\n\
    \    return result", "    precondition(x >= 0, \"x should be greater than 0\"\
    )\n    precondition(base > 0, \"base should be greater than 0\")\n    var res\
    \ = \"\"\n    var a = x\n    while a != 0 {\n        res = String(a % base) +\
    \ res\n        a /= base\n    }\n    return res", '    return convert(x, base:
    base)', "    if x < base {\n        return String(x)\n    } else {\n        return\
    \ change_base(x: x / base, base: base) + String(x % base)\n    }", "    if x <\
    \ 0 {\n        return \"-\" + change_base(x: -x, base: base)\n    }\n    else\
    \ if x < base {\n        return String(x)\n    }\n    else {\n        return change_base(x:\
    \ x / base, base: base) + String(x % base)\n    }", "    // your code here\n \
    \   var num = x\n    var result = \"\"\n    while num > 0 {\n        result +=\
    \ String(num % base)\n        num /= base\n    }\n    return String(result.reversed())",
  "    var num = x\n    var base_array = [Int]()\n    while num > 0 {\n        let\
    \ residual = num % base\n        base_array.append(residual)\n        num = num\
    \ / base\n    }\n    return \"\\(base_array.map{String($0)}.reversed().joined())\"",
  "  var digits = [Int]()\n  var x = x\n  while x != 0 {\n    digits.append(x % base)\n\
    \    x /= base\n  }\n  let string = digits.map { String($0) }.reversed().joined()\n\
    \  return string", "    if base > 10 {\n        return \"Not supported\"\n   \
    \ }\n    if x <= 0 {\n        return \"0\"\n    }\n    var x = x\n    var digits\
    \ = [Int]()\n    while x > 0 {\n        digits.append(x % base)\n        x /=\
    \ base\n    }\n    var result = \"\"\n    for digit in digits.reversed() {\n \
    \       result += String(digit)\n    }\n    return result", "    var s = \"\"\n\
    \    var x = x\n    while x > 0 {\n        s.append(String(x % base))\n      \
    \  x /= base\n    }\n    return String(s.reversed())", "    let int_digit = Array(\"\
    0123456789\")\n    var result = \"\"\n    var input = x\n    while input != 0\
    \ {\n        result = String(int_digit[input % base]) + result\n        input\
    \ /= base\n    }\n    return result", "    var rv = \"\"\n    var x = x\n    while\
    \ x > 0 {\n        let tmp = x % base\n        rv = String(tmp) + rv\n       \
    \ x /= base\n    }\n    return rv", "    var num = x\n    var result = \"\"\n\
    \    while num > 0 {\n        result = String(num % base) + result\n        num\
    \ /= base\n    }\n    return result", "    var result = \"\"\n    var n = x\n\
    \    while n > 0 {\n        result = String(n % base) + result\n        n /= base\n\
    \    }\n    return result", "    var result = \"\"\n    var val = x\n    while\
    \ val > 0 {\n        let r = val % base\n        result = String(r) + result\n\
    \        val = val / base\n    }\n    return result", "    var result = \"\"\n\
    \    var x = x\n    while x > 0 {\n        let digit = x % base\n        x /=\
    \ base\n        result.append(digit.description)\n    }\n    return String(result.reversed())",
  "    var result = \"\"\n    var x = x\n    while x > 0 {\n        result = String(x\
    \ % base) + result\n        x /= base\n    }\n    return result", "    var a:\
    \ [String] = []\n    if x == 0 {\n        return \"0\"\n    }\n    if x < 0 {\n\
    \        x = -x\n    }\n    while x > 0 {\n        a.append(String(x % base))\n\
    \        x /= base\n    }\n    return a.reversed().joined()", "    var ans = \"\
    \"\n    var x = x\n    while x != 0 {\n        ans += String(x % base)\n     \
    \   x /= base\n    }\n    return String(ans.reversed())", "    assert(x >= 0)\n\
    \    assert(2 <= base && base <= 9)\n    var x = x\n    var res = \"\"\n    while\
    \ x > 0 {\n        res += String(x % base)\n        x /= base\n    }\n    return\
    \ String(res.reversed())", "    assert(base < 10, \"base numbers should be less\
    \ than 10\")\n    var result = \"\"\n    var tmp = x\n    while tmp > 0 {\n  \
    \      result.append(String(tmp % base))\n        tmp /= base\n    }\n    return\
    \ String(result.reversed())", "    var x = x\n    var res = \"\"\n    while x\
    \ > 0 {\n        res += String(x % base)\n        x /= base\n    }\n    return\
    \ String(res.reversed())", "    var ans = \"\"\n    var y = x\n    while y > 0\
    \ {\n        ans = String(y % base) + ans\n        y /= base\n    }\n    return\
    \ ans", "    var buffer = [Int]()\n    var n = x\n    while n > 0 {\n        buffer.append(n\
    \ % base)\n        n /= base\n    }\n    let str = buffer.reversed().map { String($0)\
    \ }.joined()\n    return str", "    var x = x\n    var r = \"\"\n    while x >\
    \ 0 {\n        r = \"\\(x % base)\" + r\n        x /= base\n    }\n    return\
    \ r", "    var result = \"\"\n    var x = x\n    while x > 0 {\n        result\
    \ = String(x % base) + result\n        x /= base\n    }\n    return result", " \
    \   if x == 0 {\n        return \"0\"\n    }\n    var ans = \"\"\n    var tmp\
    \ = x\n    while tmp > 0 {\n        ans += String(tmp % base)\n        tmp /=\
    \ base\n    }\n    return String(ans.reversed())", "    var y = x\n    var digits\
    \ = [Int]()\n    while y > 0 {\n        digits.append(y % base)\n        y /=\
    \ base\n    }\n    var result = \"\"\n    for i in digits.indices.reversed() {\n\
    \        result += String(digits[i])\n    }\n    return result", '    return change_base(decimal_num:
    x, base: base)', "    var n = x\n    var d = n / base\n    var m = n % base\n\
    \    var res = String(m)\n    while d > 0 {\n        n = d\n        d = n / base\n\
    \        m = n % base\n        res = String(m) + res\n    }\n    return res",
  "  var x = x\n  var string = \"\"\n  while x > 0 {\n    let number = x % base\n\
    \    string = String(number) + string\n    x /= base\n  }\n  return string", " \
    \   var x = x\n    var result = \"\"\n    while x > 0 {\n        let remainder\
    \ = x % base\n        result = String(remainder) + result\n        x /= base\n\
    \    }\n    return result", "    precondition(x >= 0, \"number must be positive\"\
    )\n    precondition(base > 1, \"base must be greater than 1\")\n    precondition(base\
    \ < 10, \"base must be less than 10\")\n    var x = x\n    var res = \"\"\n  \
    \  while x != 0 {\n        res = String(x % base) + res\n        x /= base\n \
    \   }\n    return res", "    var x = x\n    var result = \"\"\n    while x > 0\
    \ {\n        result = String(x % base) + result\n        x /= base\n    }\n  \
    \  return result", "  var s = \"\"\n  var t = x\n  while t > 0 {\n    s = String(t\
    \ % base) + s\n    t /= base\n  }\n  return s", "    var s = \"\"\n    var q =\
    \ x\n    while q != 0 {\n        let r = q % base\n        s = \"\\(r)\" + s\n\
    \        q = q / base\n    }\n    return s", "    let baseStr = String(base)\n\
    \    var res = \"\"\n    var num = x\n    while num > 0 {\n        let digit =\
    \ num % base\n        res = baseStr + res\n        num /= base\n    }\n    return\
    \ res", "    let nums = [ \"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"\
    7\", \"8\", \"9\" ]\n    var res = \"\"\n    var x = x\n    while x > 0 {\n  \
    \      let remainder = x % base\n        res = nums[remainder] + res\n       \
    \ x = x / base\n    }\n    return res", "    let base_alpha = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    .characters\n    var x = x\n    var base = base\n    var output = \"\"\n    while\
    \ x != 0 {\n        let remainder = x % base\n        x = x / base\n        output\
    \ = String(base_alpha[base_alpha.startIndex.advancedBy(remainder)]) + output\n\
    \    }\n    return output", "    var number = x\n    var mod: Int\n    var ret:\
    \ String = \"\"\n    while number > 0 {\n        mod = number % base\n       \
    \ number = number / base\n        ret = String(mod) + ret\n    }\n    return ret",
  '    return change_base(x: x, base: base, digits: "0123456789ABCDEF")', "    var\
    \ str = \"\"\n    var x = x\n    while (x > 0) {\n        str = String(x % base)\
    \ + str\n        x /= base\n    }\n    return str", "    var result = \"\"\n \
    \   var remainder = x\n    while remainder != 0 {\n        result = \"\\(remainder\
    \ % base)\" + result\n        remainder /= base\n    }\n    return result", " \
    \ var result = \"\"\n  var product = x\n  while (product > 0) {\n    result =\
    \ String(product % base) + result\n    product /= base\n  }\n  return result",
  "    if x == 0 {\n        return \"0\"\n    }\n    if x == 1 {\n        return \"\
    1\"\n    }\n    if x == 2 {\n        return \"10\"\n    }\n    if x == 3 {\n \
    \       return \"11\"\n    }\n    if x == 4 {\n        return \"100\"\n    }\n\
    \    if x == 5 {\n        return \"101\"\n    }\n    if x == 6 {\n        return\
    \ \"110\"\n    }\n    if x == 7 {\n        return \"111\"\n    }\n    if x ==\
    \ 8 {\n        return \"1000\"\n    }\n    if x == 9 {\n        return \"1001\"\
    \n    }\n    if x == 10 {\n        return \"1010\"\n    }\n    if x == 11 {\n\
    \        return \"1011\"\n    }\n    if x == 12 {\n        return \"1100\"\n \
    \   }\n    if x == 13 {\n        return \"1101\"\n    }\n    if x == 14 {\n  \
    \      return \"1110\"\n    }\n    if x == 15 {\n        return \"1111\"\n   \
    \ }\n    if x == 16 {\n        return \"10000\"\n    }\n    if x == 17 {\n   \
    \     return \"10001\"\n    }\n    if x == 18 {\n        return \"10010\"\n  \
    \  }\n    if x == 19 {\n        return \"10011\"\n    }\n    if x == 20 {\n  \
    \      return \"10100\"\n    }\n    if x == 21 {\n        return \"10101\"\n \
    \   }\n    if x == 22 {\n        return \"10110\"\n    }\n    if x == 23 {\n \
    \       return \"10111\"\n    }\n    if x == 24 {\n        return \"11000\"\n\
    \    }\n    if x == 25 {\n        return \"11001\"\n    }\n    if x == 26 {\n\
    \        return \"11010\"\n    }\n    if x == 27 {\n        return \"11011\"\n\
    \    }\n    if x == 28 {\n        return \"11100\"\n    }\n    if x == 29 {\n\
    \        return \"11101\"\n    }\n    if x == 30 {\n        return \"11110\"\n",
  "    var string_representation = \"\"\n    var dividend = x\n    while dividend\
    \ > 0 {\n        let remainder = dividend % base\n        dividend = dividend\
    \ / base\n        string_representation = String(remainder) + string_representation\n\
    \    }\n    return string_representation", "    var number: Int = x\n    var remainder:\
    \ Int = 0\n    var result: String = \"\"\n    var base_string: String = \"\"\n\
    \    while (number > 0) {\n        remainder = number % base\n        number =\
    \ number / base\n        base_string = String(remainder) + base_string\n    }\n\
    \    result = base_string\n    return result", "    var x = x\n    var result\
    \ = \"\"\n    while x > 0 {\n        result = String(x % base) + result\n    \
    \    x /= base\n    }\n    return result", "    var x = x\n    var res = \"\"\n\
    \    while x != 0 {\n        res = String(x % base) + res\n        x /= base\n\
    \    }\n    return res", '    return to_base(x, base: base).description', "  \
    \  var n = x\n    var s = \"\"\n    while n != 0 {\n        s = String(n % base)\
    \ + s\n        n /= base\n    }\n    return s", "    var rem: Int\n    var str:\
    \ String = \"\"\n    while x != 0 {\n        rem = x % base\n        str = String(rem)\
    \ + str\n        x /= base\n    }\n    return str", "    var x = x\n    var str\
    \ = \"\"\n    while (x > 0) {\n        str = String(x % base) + str\n        x\
    \ /= base\n    }\n    return str", "    var tmp = x\n    var result = \"\"\n \
    \   while tmp > 0 {\n        result = String(tmp % base) + result\n        tmp\
    \ /= base\n    }\n    return result", '    return "\(x)"', "    var s = \"\"\n\
    \    var r = x\n    while r > 0 {\n        s.append(String(r % base))\n      \
    \  r /= base\n    }\n    return String(s.reversed())", "    var result = \"\"\n\
    \    var x_ = x\n    while x_ > 0 {\n        result.append(String(x_ % base))\n\
    \        x_ /= base\n    }\n    return String(result.reversed())", "    if x <\
    \ base {\n        return String(x)\n    } else {\n        return change_base(x:\
    \ x / base, base: base) + String(x % base)\n    }", "    var s = \"\"\n    var\
    \ x = x\n    while x > 0 {\n        s.append(String(x % base))\n        x /= base\n\
    \    }\n    return String(s.reversed())", "    let decimal_digit = \"0123456789\"\
    \n    var result = \"\"\n    var quotient = x\n    var remainder = 0\n    repeat\
    \ {\n        remainder = quotient % base\n        quotient = quotient / base\n\
    \        result = String(decimal_digit[remainder]) + result\n    } while quotient\
    \ > 0\n    return result", "    var num = x\n    var result = \"\"\n    while\
    \ num > 0 {\n        result = String(num % base) + result\n        num /= base\n\
    \    }\n    return result", "    var x = x\n    var result = \"\"\n    while x\
    \ > 0 {\n        result = String(x % base) + result\n        x /= base\n    }\n\
    \    return result", "  var ans = \"\"\n  var x = x\n  while x > 0 {\n    ans\
    \ = String(x % base) + ans\n    x /= base\n  }\n  return ans", "    var x = x\n\
    \    var str = \"\"\n    while x != 0 {\n        str.append(String(x % base))\n\
    \        x /= base\n    }\n    return String(str.reversed())", "    var x = x\n\
    \    var x_s = \"\"\n    while x > 0 {\n        x_s += String(x % base)\n    \
    \    x /= base\n    }\n    return String(x_s.reversed())", "    var base_list\
    \ = [Int]()\n    var x = x\n    while x > 0 {\n        base_list.append(x % base)\n\
    \        x /= base\n    }\n    var base_string = \"\"\n    for b in base_list.reversed()\
    \ {\n        base_string += String(b)\n    }\n    return base_string", "    //\
    \ your code here\n    if x == 0 {\n        return \"0\"\n    }\n    if x < 0 {\n\
    \        return \"-\" + change_base(x: x*(-1), base: base)\n    }\n    if x <\
    \ base {\n        return String(x)\n    }\n    return change_base(x: x/base, base:\
    \ base) + String(x%base)", "    var ans = \"\"\n    var x = x\n    while x > 0\
    \ {\n        ans = String(x % base) + ans\n        x /= base\n    }\n    return\
    \ ans", "    var x = x\n    var result = \"\"\n    let BASE = base\n    if x ==\
    \ 0 {\n        return \"0\"\n    }\n    while x > 0 {\n        result = String(x\
    \ % BASE) + result\n        x /= BASE\n    }\n    return result", "    if x <\
    \ base {\n        return String(x)\n    }\n    else {\n        return change_base(x:\
    \ x / base, base: base) + String(x % base)\n    }", "    var result = \"\"\n \
    \   var x = x\n    while x > 0 {\n        result.append(String(x % base))\n  \
    \      x /= base\n    }\n    return String(result.reversed())", "    var result\
    \ = \"\"\n    var tmp = x\n    while tmp > 0 {\n        result = String(tmp %\
    \ base) + result\n        tmp /= base\n    }\n    return result", "    var q =\
    \ x\n    var rem = 0\n    var ans = \"\"\n    while q > 0 {\n        rem = q %\
    \ base\n        q = q / base\n        ans = String(rem) + ans\n    }\n    return\
    \ ans", "    var result = \"\"\n    var num = x\n    while num > 0 {\n       \
    \ result = String(num % base) + result\n        num /= base\n    }\n    return\
    \ result", "  var result = \"\"\n  var temp = x\n  while temp > 0 {\n    result.append(String(temp\
    \ % base))\n    temp /= base\n  }\n  return String(result.reversed())", "    var\
    \ result = \"\"\n    var x = x\n    var base = base\n    while x != 0 {\n    \
    \    result = \"\\(x % base)\" + result\n        x /= base\n    }\n    return\
    \ result", "    var result = \"\"\n    var x_mod_base = x\n    var x_div_base\
    \ = x\n    while x_div_base > 0 {\n        x_mod_base = x_div_base % base\n  \
    \      x_div_base = x_div_base / base\n        result = String(x_mod_base) + result\n\
    \    }\n    return result", "    // your code here.\n    var res = \"\"\n    var\
    \ x = x\n    var rem = 0\n    while x > 0 {\n        rem = x % base\n        res\
    \ = \"\\(rem)\" + res\n        x = x / base\n    }\n    return res", "    let\
    \ array = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19,\
    \ 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36]\n    let\
    \ d2b = [0: \"0\", 1: \"1\", 2: \"2\", 3: \"3\", 4: \"4\", 5: \"5\", 6: \"6\"\
    , 7: \"7\", 8: \"8\", 9: \"9\", 10: \"A\", 11: \"B\", 12: \"C\", 13: \"D\", 14:\
    \ \"E\", 15: \"F\", 16: \"G\", 17: \"H\", 18: \"I\", 19: \"J\", 20: \"K\", 21:\
    \ \"L\", 22: \"M\", 23: \"N\", 24: \"O\", 25: \"P\", 26: \"Q\", 27: \"R\", 28:\
    \ \"S\", 29: \"T\", 30: \"U\", 31: \"V\", 32: \"W\", 33: \"X\", 34: \"Y\", 35:\
    \ \"Z\"]\n    var result = \"\"\n    var number = x\n    while number > 0 {\n\
    \        result += d2b[number % base]!\n        number /= base\n    }\n    return\
    \ String(result.reversed())", "    assert(base <= 10, \"base should be less than\
    \ 10\")\n    var n = x\n    var res = \"\"\n    repeat {\n        res += String(n\
    \ % base)\n        n /= base\n    } while n > 0\n    return String(res.reversed())",
  "    // Base case is when x <= 0.\n    if x <= 0 {\n        return \"\"\n    }\n\
    \    // Divide by base.\n    // append last digit.\n    return change_base(x:\
    \ x / base, base: base) + \"\\(x % base)\"", "    if x < base {\n        return\
    \ String(x)\n    } else {\n        return change_base(x: x / base, base: base)\
    \ + String(x % base)\n    }", "    var n = x\n    var nxt_base = base\n    var\
    \ nums: [Int] = []\n    while n > 0 {\n        nums.append(n % nxt_base)\n   \
    \     n /= nxt_base\n    }\n    return nums.map { $0.description }.reversed().joined()",
  "    var res = \"\"\n    var num = x\n    var i = 0\n    while num > 0 {\n     \
    \   let rem = num % base\n        res = res + String(rem)\n        num = num /\
    \ base\n        i += 1\n    }\n    return String(res.reversed())", "    var dividend\
    \ = x\n    var quotient = 0\n    var remainder = 0\n    var result = \"\"\n  \
    \  while dividend > 0 {\n        quotient = dividend / base\n        remainder\
    \ = dividend % base\n        dividend = quotient\n        result.append(String(remainder))\n\
    \    }\n    return String(result.reversed())", "    if x == 0 {\n        return\
    \ \"0\"\n    }\n    let chars = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"\
    6\", \"7\", \"8\", \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"]\n    var result\
    \ = \"\"\n    var x = x\n    while x > 0 {\n        result = String(chars[x %\
    \ base]) + result\n        x /= base\n    }\n    return result", "    var q =\
    \ x\n    var r = 0\n    var rstr = \"\"\n    while q != 0 {\n        r = q % base\n\
    \        q = q / base\n        rstr = \"\\(r)\\(rstr)\"\n    }\n    return rstr",
  "    var x = x\n    var result = \"\"\n    while x > 0 {\n        result = String(x\
    \ % base) + result\n        x /= base\n    }\n    return result", "    var value\
    \ = x\n    var result = \"\"\n    while value > 0 {\n        result.append(String(value\
    \ % base))\n        value /= base\n    }\n    return String(result.reversed())",
  "    var result = \"\"\n    var number = x\n    while number > 0 {\n        let\
    \ digit = number % base\n        result = String(digit) + result\n        number\
    \ /= base\n    }\n    return result", "  var result = \"\"\n  var x = x\n  while\
    \ x > 0 {\n    let rem = x % base\n    result = String(rem) + result\n    x /=\
    \ base\n  }\n  return result", "    var ret = \"\"\n    var x = x\n    while x\
    \ > 0 {\n        ret += String(x % base)\n        x /= base\n    }\n    return\
    \ String(ret.reversed())", "    var result = \"\"\n    var x = x\n    while x\
    \ > 0 {\n        let d = x % base\n        result = String(d) + result\n     \
    \   x /= base\n    }\n    return result", "    // TODO: - Write your code!\n \
    \   if x == 0 {\n        return \"0\"\n    }\n    var result = \"\"\n    var x\
    \ = x\n    while x > 0 {\n        result = String(x % base) + result\n       \
    \ x /= base\n    }\n    return result", "    var ans = \"\"\n    var x = x\n \
    \   while x > 0 {\n        ans = String(x % base) + ans\n        x /= base\n \
    \   }\n    return ans", '    return change_base(x: x, base: base, carry: 0)',
  "    var result = \"\"\n    var n = x\n    while n > 0 {\n        let c = n % base\n\
    \        result.append(Character(String(c)))\n        n /= base\n    }\n    return\
    \ String(result.reversed())", "  var ans = \"\"\n  var q = x\n  while q > 0 {\n\
    \    ans += String(q % base)\n    q /= base\n  }\n  return String(ans.reversed())",
  "    var n = x\n    var tmp = \"\"\n    while n != 0 {\n        tmp = String(n %\
    \ base) + tmp\n        n /= base\n    }\n    return tmp", "    // Hint: Use divide\
    \ and modulus operators\n    var ans: String = \"\"\n    var rest: Int = x\n \
    \   while rest > 0 {\n        ans = String(rest % base) + ans\n        rest =\
    \ rest / base\n    }\n    return ans", "    var result = \"\"\n    var number\
    \ = x\n    while number > 0 {\n        let remainder = number % base\n       \
    \ number = number / base\n        result = String(remainder) + result\n    }\n\
    \    return result", '    return String(x, radix: base)', "    var ans = \"\"\n\
    \    var tmp = x\n    while tmp != 0 {\n        ans = String(tmp % base) + ans\n\
    \        tmp /= base\n    }\n    return ans", "  var x = x\n  var result = \"\"\
    \n  while x > 0 {\n    result = String(x % base) + result\n    x /= base\n  }\n\
    \  return result", "    if x == 0 {\n        return \"0\"\n    }\n    if x ==\
    \ 1 {\n        return \"1\"\n    }\n    if x % base == 0 {\n        return change_base(x:\
    \ x / base, base: base) + \"0\"\n    }\n    if x % base == 1 {\n        return\
    \ change_base(x: x / base, base: base) + \"1\"\n    }\n    if x % base == 2 {\n\
    \        return change_base(x: x / base, base: base) + \"2\"\n    }\n    if x\
    \ % base == 3 {\n        return change_base(x: x / base, base: base) + \"3\"\n\
    \    }\n    if x % base == 4 {\n        return change_base(x: x / base, base:\
    \ base) + \"4\"\n    }\n    if x % base == 5 {\n        return change_base(x:\
    \ x / base, base: base) + \"5\"\n    }\n    if x % base == 6 {\n        return\
    \ change_base(x: x / base, base: base) + \"6\"\n    }\n    if x % base == 7 {\n\
    \        return change_base(x: x / base, base: base) + \"7\"\n    }\n    if x\
    \ % base == 8 {\n        return change_base(x: x / base, base: base) + \"8\"\n\
    \    }\n    if x % base == 9 {\n        return change_base(x: x / base, base:\
    \ base) + \"9\"\n    }\n    return \"\"", "    precondition(2 <= base && base\
    \ <= 9)\n    var x = x\n    var digits = [Int]()\n    while x > 0 {\n        digits.append(x\
    \ % base)\n        x /= base\n    }\n    return digits.reversed().map {String($0)}.joined()",
  "    var x = x\n    var result = \"\"\n    while x > 0 {\n        result = String(x\
    \ % base) + result\n        x /= base\n    }\n    return result", "    \n    var\
    \ res = \"\"\n    var base = base\n    var x = x\n    \n    if x == 0 {\n    \
    \    return \"0\"\n    }\n    \n    while x > 0 {\n        res = String(x % base)\
    \ + res\n        x /= base\n    }\n    \n    return res", "    var x = x\n   \
    \ var num = \"\"\n    while x > 0 {\n        num = String(x % base) + num\n  \
    \      x /= base\n    }\n    return num", '    return String(x, radix: base)',
  "    let digits = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\"\
    , \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"]\n    if x < base {\n      \
    \  return digits[x]\n    }\n    return change_base(x: x / base, base: base) +\
    \ digits[x % base]", "    var x = x\n    var result = \"\"\n    while x > 0 {\n\
    \        result.append(String(x % base))\n        x /= base\n    }\n    return\
    \ String(result.reversed())", "  if x < base {\n    return String(x)\n  }\n  return\
    \ change_base(x: x / base, base: base) + String(x % base)", "    var output =\
    \ \"\"\n    var input = x\n    while input > 0 {\n        output = String(input\
    \ % base) + output\n        input /= base\n    }\n    return output", "    var\
    \ n = x\n    var s = \"\"\n    while n > 0 {\n        s = String(n % base) + s\n\
    \        n /= base\n    }\n    return s", "    var x = x\n    var output = \"\"\
    \n    while (x > 0) {\n        output += String(x % base)\n        x /= base\n\
    \    }\n    return String(output.reversed())", "  assert(base < 10)\n  var ret\
    \ = \"\"\n  var remainder = x\n  while remainder > 0 {\n    ret = String(remainder\
    \ % base) + ret\n    remainder /= base\n  }\n  return ret", "    var x = x\n \
    \   var result = \"\"\n    while x > 0 {\n        result = String(x % base) +\
    \ result\n        x /= base\n    }\n    return result", "    var result = \"\"\
    \n    if x == 0 {\n        return \"0\"\n    }\n    var n = x\n    while n > 0\
    \ {\n        result = String(n % base) + result\n        n /= base\n    }\n  \
    \  return result", "    var x = x\n    var result = \"\"\n    while x > 0 {\n\
    \        let remainder = x % base\n        result = String(remainder) + result\n\
    \        x /= base\n    }\n    return result", "    if base <= 1 {\n        return\
    \ \"base should be more than one\"\n    }\n    var num = x\n    var result = \"\
    \"\n    var remainder = 0\n    while num != 0 {\n        remainder = num % base\n\
    \        num = num / base\n        result = String(remainder) + result\n    }\n\
    \    return result", "    precondition(base < 10)\n    if x == 0 {\n        return\
    \ \"0\"\n    }\n    var result = \"\"\n    var x = x\n    while x > 0 {\n    \
    \    result = String(x % base) + result\n        x /= base\n    }\n    return\
    \ result", "    var result = \"\"\n    var temp = x\n    while temp > 0 {\n  \
    \      result.append(String(temp % base))\n        temp /= base\n    }\n    return\
    \ String(result.reversed())", "    var x = x\n    var ans = \"\"\n    while x\
    \ > 0 {\n        ans = String(x % base) + ans\n        x /= base\n    }\n    return\
    \ ans", "    var x = x\n    var ans = \"\"\n    while x > 0 {\n        ans = String(x\
    \ % base) + ans\n        x /= base\n    }\n    return ans", "    var string_res\
    \ = \"\"\n    var residual = x\n    while (residual != 0) {\n        let mod =\
    \ residual % base\n        string_res = String(mod) + string_res\n        residual\
    \ = residual / base\n    }\n    return string_res", "    var x = x\n    var result\
    \ = \"\"\n    while x > 0 {\n        let n = x % base\n        result = String(n)\
    \ + result\n        x /= base\n    }\n    return result", "    var x = x\n   \
    \ var result = \"\"\n    while x > 0 {\n        result.append(String(x % base))\n\
    \        x /= base\n    }\n    return String(result.reversed())", "    assert(base\
    \ < 10)\n    var x = x\n    var s = \"\"\n    while x > 0 {\n        s.append(String(x\
    \ % base))\n        x /= base\n    }\n    return String(s.reversed())", "    if\
    \ x < base {\n        return String(x)\n    } else {\n        return change_base(x:\
    \ x / base, base: base) + String(x % base)\n    }", "    var remainders = [Int]()\n\
    \    var divide_result = x\n    while divide_result > 0 {\n        remainders.append(divide_result\
    \ % base)\n        divide_result /= base\n    }\n    var result = \"\"\n    for\
    \ i in remainders.reversed() {\n        result += String(i)\n    }\n    return\
    \ result", "    var x = x\n    var ret = \"\"\n    while x > 0 {\n        ret\
    \ = String(x % base) + ret\n        x /= base\n    }\n    return ret", "  var\
    \ output = \"\"\n  var number = x\n  while number > 0 {\n    let remainder = number\
    \ % base\n    output = String(remainder) + output\n    number = number / base\n\
    \  }\n  return output", "    // TODO\n    var str = \"\"\n    var n = x\n    while\
    \ n != 0 {\n        str = String(n % base) + str\n        n /= base\n    }\n \
    \   return str", "    var quotient = x\n    var remainder = 0\n    var result\
    \ = \"\"\n    while quotient > 0 {\n        remainder = quotient % base\n    \
    \    quotient = quotient / base\n        result = String(remainder) + result\n\
    \    }\n    return result", "    var base_repr = \"\"\n    var x = x\n    while\
    \ x > 0 {\n        base_repr = String(x % base) + base_repr\n        x /= base\n\
    \    }\n    return base_repr", "    var x = x\n    var s = \"\"\n    while x >\
    \ 0 {\n        s = String(x % base) + s\n        x /= base\n    }\n    return\
    \ s", '    return String(x, radix: base)', "    var num = x\n    var result =\
    \ \"\"\n    while num > 0 {\n        let mod = num % base\n        result.append(String(mod))\n\
    \        num /= base\n    }\n    return String(result.reversed())", '    return
    String(x, radix: base)', "    // TODO: Implement this function!\n    var temp_x\
    \ = x\n    var base_number = \"\"\n    while temp_x != 0 {\n        let remainder\
    \ = temp_x % base\n        temp_x = temp_x / base\n        base_number = String(remainder)\
    \ + base_number\n    }\n    return base_number", '    return String(x, radix:
    base)', "    var x = x\n    var result = \"\"\n    while x > 0 {\n        result\
    \ = String(x % base) + result\n        x /= base\n    }\n    return result", " \
    \   var x = x\n    var result = \"\"\n    while x > 0 {\n        let remainer\
    \ = x % base\n        result = \"\\(remainer)\" + result\n        x /= base\n\
    \    }\n    return result", '    return String(x, radix: base)', "    var x =\
    \ x\n    var y: String = \"\"\n    if x == 0 {\n        return \"0\"\n    }\n\
    \    while x > 0 {\n        y = String(x % base) + y\n        x /= base\n    }\n\
    \    return y", "    var ans = \"\"\n    var tmp = x\n    while tmp > 0 {\n  \
    \      ans += String(tmp % base)\n        tmp /= base\n    }\n    return String(ans.reversed())",
  "    let baseChars = [Character](\"0123456789\")\n    var n = x\n    var s = \"\"\
    \n    while n > 0 {\n        s.append(baseChars[n % base])\n        n /= base\n\
    \    }\n    return String(s.reversed())", "    assert(base > 1)\n    assert(base\
    \ < 10)\n    var ans = \"\"\n    var (q, r) = (x, 0)\n    while q > 0 {\n    \
    \    (q, r) = (q / base, q % base)\n        ans = \"\\(r)\" + ans\n    }\n   \
    \ return ans", "    var number: Int = x\n    var remainder: Int = 0\n    var base_numbers:\
    \ [Int] = []\n    while number > 0 {\n        remainder = number % base\n    \
    \    number = number / base\n        base_numbers.append(remainder)\n    }\n \
    \   return base_numbers.reversed().map{String($0)}.joined()", "    var r = x\n\
    \    var result = \"\"\n    while r > 0 {\n        result = String(r % base) +\
    \ result\n        r /= base\n    }\n    return result", "    var temp_list = [Int]()\n\
    \    var quotient = x\n    var remainder = 0\n    while quotient > 0 {\n     \
    \   remainder = quotient % base\n        quotient = quotient / base\n        temp_list.append(remainder)\n\
    \    }\n    var result = \"\"\n    for num in temp_list.reversed() {\n       \
    \ result.append(String(num))\n    }\n    return result"]
stop_tokens:
- "\n}"
