name: HumanEval_121_solution
language: swift
prompt: "\n/// Given a non-empty array of integers, return the sum of all of the odd\
  \ elements that are in even positions.\n/// Examples\n/// >>> solution(lst: [5,\
  \ 8, 7, 1])\n/// 12\n/// >>> solution(lst: [3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(lst:\
  \ [30, 13, 24, 321])\n/// 0\nfunc solution(lst: [Int]) -> Int {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(solution(lst: [5, 8, 7, 1]) == 12)\nassert(solution(lst:\
  \ [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst: [30, 13, 24, 321]) == 0)\nassert(solution(lst:\
  \ [5, 9]) == 5)\nassert(solution(lst: [2, 4, 8]) == 0)\nassert(solution(lst: [30,\
  \ 13, 23, 32]) == 23)\nassert(solution(lst: [3, 13, 2, 9]) == 3)"
completions: ["    var n = 0\n    for (i, v) in lst.enumerated() {\n        if i %\
    \ 2 == 0 && v % 2 != 0 {\n            n += v\n        }\n    }\n    return n",
  "    return lst.enumerated().reduce(0) { (result, enumerated) in\n        guard\
    \ enumerated.offset % 2 == 0 else { return result }\n        return enumerated.element\
    \ % 2 == 1 ? result + enumerated.element : result\n    }", '    return lst.enumerated().reduce(0)
    { $0 + ($1.0 % 2 == 0 ? $1.1 : 0) }', "    return lst.enumerated().reduce(0) {\n\
    \        return $0 + ($1.offset % 2 == 0 && $1.element % 2 != 0 ? $1.element :\
    \ 0)\n    }", "    var sum = 0\n    for i in stride(from: 0, to: lst.count, by:\
    \ 2) {\n        if lst[i] % 2 != 0 {\n            sum += lst[i]\n        }\n \
    \   }\n    return sum", "    var sum = 0\n    for (i, n) in lst.enumerated() {\n\
    \        if n % 2 == 1 && i % 2 == 0 {\n            sum += n\n        }\n    }\n\
    \    return sum", "    // Return the correct answer\n    return lst.enumerated().reduce(0)\
    \ { $0 + ($1.offset % 2 == 0 ? $1.element : 0) }", "  var sum = 0\n  for i in\
    \ stride(from: 0, to: lst.count, by: 2) {\n    if lst[i] % 2 != 0 {\n      sum\
    \ += lst[i]\n    }\n  }\n  return sum", "    var sum = 0\n    for (i, num) in\
    \ lst.enumerated() {\n        if i % 2 == 0 && num % 2 != 0 {\n            sum\
    \ += num\n        }\n    }\n    return sum", "    return lst.enumerated().filter({\
    \ (index, element) in\n        (index + 1) % 2 == 0 && element % 2 != 0\n    }).reduce(0,\
    \ { (result, element) in\n        result + element.element\n    })", "    return\
    \ lst.enumerated().reduce(0) {\n        $0 + ($1.0 % 2 == 0 && $1.1 % 2 != 0 ?\
    \ $1.1 : 0)\n    }", '    return 0', "    var ans = 0\n    for i in stride(from:\
    \ 0, to: lst.count, by: 2) {\n        if lst[i] % 2 != 0 {\n            ans +=\
    \ lst[i]\n        }\n    }\n    return ans", "    var sum = 0\n    for (index,\
    \ element) in lst.enumerated() {\n        if index % 2 == 0 && element % 2 !=\
    \ 0 {\n            sum += element\n        }\n    }\n    return sum", '    return
    lst.enumerated().reduce(0) { $0 + ($1.offset % 2 == 0 && $1.element % 2 != 0 ?
    $1.element : 0) }', "    var sum = 0\n    for (i, item) in lst.enumerated() {\n\
    \        if i % 2 == 0 && item % 2 != 0 {\n            sum += item\n        }\n\
    \    }\n    return sum", "  return lst.enumerated().reduce(0) {\n    (accum, current)\
    \ in\n    if current.offset % 2 == 0 && current.element % 2 != 0 {\n      return\
    \ accum + current.element\n    }\n    return accum\n  }", "    return lst.enumerated().reduce(0)\
    \ { (result, pair) in\n        return pair.offset % 2 == 0 && pair.element % 2\
    \ != 0 ? result + pair.element : result\n    }", '    return lst.enumerated().filter
    { $0.0 % 2 == 0 && $0.1 % 2 != 0 }.map { $0.1 }.reduce(0, +)', "    var result\
    \ = 0\n    for i in stride(from: 0, to: lst.count, by: 2) {\n        if lst[i]\
    \ % 2 != 0 {\n            result += lst[i]\n        }\n    }\n    return result",
  "    let x = lst.enumerated().filter { offset, value in\n        return offset %\
    \ 2 == 0 && value % 2 != 0\n    }\n    return x.reduce(0) { $0 + $1.element }",
  "    \n    return lst.enumerated().reduce(0) { $0 + ($1.offset % 2 == 0 ? $1.element\
    \ % 2 == 1 ? $1.element : 0 : 0) }", "    var result = 0\n    for (i, number)\
    \ in lst.enumerated() {\n        if i % 2 == 0 && number % 2 != 0 {\n        \
    \    result += number\n        }\n    }\n    return result", "  var total = 0\n\
    \  for i in 0..<lst.count {\n    let current = lst[i]\n    if current % 2 == 1\
    \ && i % 2 == 0 {\n      total += current\n    }\n  }\n  return total", '    return
    0', '    return lst.enumerated().filter { $0.offset % 2 == 0 && $0.element % 2
    != 0 }.reduce(0) { $0 + $1.element }', "    return lst.enumerated().reduce(0)\
    \ { result, pair in\n        return result + (pair.offset % 2 == 0 && pair.element\
    \ % 2 != 0 ? pair.element : 0)\n    }", '    return lst.enumerated().filter({
    $0.offset % 2 == 0 }).filter({ $0.element % 2 != 0 }).map({ $0.element }).reduce(0,
    +)', "    var result = 0\n    for (i, num) in lst.enumerated() {\n        if i\
    \ % 2 == 0 && num % 2 != 0 {\n            result += num\n        }\n    }\n  \
    \  return result", "    return lst.enumerated().filter { index, value in\n   \
    \     return index % 2 == 0 && value % 2 != 0\n    }.reduce(0) { $0 + $1.element\
    \ }", "    var odd = 0\n    for (i, e) in lst.enumerated() {\n        if i % 2\
    \ == 0 && e % 2 != 0 {\n            odd += e\n        }\n    }\n    return odd",
  "  var sum = 0\n  for (index, item) in lst.enumerated() {\n    if index % 2 == 0\
    \ && item % 2 != 0 {\n      sum += item\n    }\n  }\n  return sum", "  var result\
    \ = 0\n  for (index, item) in lst.enumerated() {\n    if index % 2 == 0 && item\
    \ % 2 != 0 {\n      result += item\n    }\n  }\n  return result", "    var sum\
    \ = 0\n    for (index, value) in lst.enumerated() {\n        if index % 2 == 0\
    \ && value % 2 != 0 {\n            sum += value\n        }\n    }\n    return\
    \ sum", "    var sum = 0\n    for (index, num) in lst.enumerated() {\n       \
    \ if index % 2 == 0 && num % 2 != 0 {\n            sum += num\n        }\n   \
    \ }\n    return sum", '    return lst.enumerated().filter { (i, v) in i % 2 ==
    0 && v % 2 != 0 }.reduce(0) { $0 + $1.element }', "    var sum = 0\n    for (index,\
    \ element) in lst.enumerated() {\n        if index % 2 == 0 && element % 2 !=\
    \ 0 {\n            sum += element\n        }\n    }\n    return sum", "    \n\
    \    return lst.enumerated().filter { $0.offset % 2 == 0 && $0.element % 2 !=\
    \ 0 }.map { $0.element }.reduce(0, +)", '    return lst.enumerated().filter {
    $0.offset % 2 == 0 && $0.element % 2 != 0 }.reduce(0) { $0 + $1.element }', " \
    \   var sum = 0\n    for (index, number) in lst.enumerated() {\n        if (index\
    \ % 2 == 0) && (number % 2 != 0) {\n            sum += number\n        }\n   \
    \ }\n    return sum", '  return lst.enumerated().filter { $0.offset % 2 == 0 &&
    $0.element % 2 != 0 }.map { $0.element }.reduce(0, +)', "    var sum = 0\n   \
    \ for (index, value) in lst.enumerated() {\n        if index % 2 == 0 && value\
    \ % 2 != 0 {\n            sum += value\n        }\n    }\n    return sum", " \
    \   var sum = 0\n    for (index, item) in lst.enumerated() {\n        if (index\
    \ + 1) % 2 == 0 && item % 2 != 0 {\n            sum += item\n        }\n    }\n\
    \    return sum", "    return lst.enumerated().reduce(0) { (result, element) in\n\
    \        if element.offset % 2 == 0 && element.element % 2 != 0 {\n          \
    \  return result + element.element\n        }\n        return result\n    }",
  "    \n    var sum = 0\n    \n    for (index, number) in lst.enumerated() {\n  \
    \      if index % 2 == 0 && number % 2 != 0 {\n            sum += number\n   \
    \     }\n    }\n    \n    return sum", "    var total = 0\n    for i in 0..<lst.count\
    \ {\n        if i % 2 == 0 && lst[i] % 2 != 0 {\n            total += lst[i]\n\
    \        }\n    }\n    return total", "  return lst.enumerated().reduce(0) {\n\
    \    if $1.offset % 2 == 0 {\n      return $0 + ($1.element % 2 == 1 ? $1.element\
    \ : 0)\n    }\n    return $0\n  }", '    return lst.filter { $0 % 2 == 1 }.filter
    { $0 % 2 == 0 }.reduce(0, +)', "    let result = lst.enumerated().reduce(0) {\
    \ (acc, value) in\n        if value.offset % 2 == 0 && value.element % 2 != 0\
    \ {\n            return acc + value.element\n        }\n        return acc\n \
    \   }\n    return result", "  return lst.enumerated().reduce(0) { acc, cur in\n\
    \    let (idx, num) = cur\n    return idx % 2 == 0 && num % 2 != 0 ? acc + num\
    \ : acc\n  }", "    let evenIndices = lst.enumerated().filter({ (index, element)\
    \ -> Bool in\n        return index % 2 == 0\n    }).filter({ (index, element)\
    \ -> Bool in\n        return element % 2 != 0\n    }).map({ (index, element) ->\
    \ Int in\n        return element\n    })\n    return evenIndices.reduce(0, +)",
  '    return lst.enumerated().filter({$0.offset.isMultiple(of: 2)}).filter({$0.element.isOdd}).map({$0.element}).reduce(0,
    +)', '    return lst.enumerated().reduce(0) { $0 + ($1.offset % 2 == 0 && $1.element
    % 2 != 0 ? $1.element : 0) }', "    let out = lst.enumerated().filter { $0.offset\
    \ % 2 == 0 }.filter { $0.element % 2 != 0 }.map { $0.element }.reduce(0, +)\n\
    \    return out", '  return lst.enumerated().filter { $0.offset % 2 == 0 && $0.element
    % 2 != 0 }.map { $0.element }.reduce(0, +)', "    // Write your solution here.\n\
    \    var sum: Int = 0\n    for i in 0..<lst.count {\n        if i % 2 == 0 &&\
    \ lst[i] % 2 != 0 {\n            sum += lst[i]\n        }\n    }\n    return sum",
  "    var result = 0\n    lst.enumerated().forEach { index, value in\n        if\
    \ index % 2 == 0, value % 2 != 0 {\n            result += value\n        }\n \
    \   }\n    return result", "    var result = 0\n    for i in 0..<lst.count {\n\
    \        if lst[i] % 2 != 0 && i % 2 == 0 {\n            result += lst[i]\n  \
    \      }\n    }\n    return result", "    var array = lst\n    var sum = 0\n \
    \   for index in stride(from: 1, to: array.count, by: 2) {\n        if array[index]\
    \ % 2 == 1 {\n            sum += array[index]\n        }\n    }\n    return sum",
  '    return lst.enumerated().filter({ (i, v) in i % 2 == 0 && v % 2 != 0 }).map({
    $0.element }).reduce(0, +)', "    let oddIndex = lst.indices.filter { $0 % 2 ==\
    \ 1 }\n    return oddIndex.map { lst[$0] }.reduce(0, +)", '    return 0', "  \
    \  var sum = 0\n    for (index, item) in lst.enumerated() {\n        if index\
    \ % 2 == 0 && item % 2 != 0 {\n            sum += item\n        }\n    }\n   \
    \ return sum", "    var res = 0\n    for i in 0..<lst.count {\n        if i %\
    \ 2 == 0 {\n            if lst[i] % 2 != 0 {\n                res += lst[i]\n\
    \            }\n        }\n    }\n    return res", "    let evens = lst.filter\
    \ { $0 % 2 == 0 }\n    let odds = lst.filter { $0 % 2 != 0 }\n    return evens.reversed().reduce(0,\
    \ +) + odds.reduce(0, +)", '    return lst.enumerated().filter({ $0.offset % 2
    == 0 }).map({ $0.element }).filter({ $0 % 2 != 0 }).reduce(0, +)', "    var res\
    \ = 0\n    for (index, element) in lst.enumerated() {\n        if index % 2 ==\
    \ 0 {\n            res += element\n        }\n    }\n    return res", '    return
    lst.enumerated().filter { $0.offset % 2 == 0 && $0.element % 2 != 0 }.reduce(0)
    { $0 + $1.element }', '    return lst.enumerated().filter({ (index, element) in
    index % 2 == 0 && element % 2 != 0 }).map({ $0.element }).reduce(0, +)', '    return
    lst.enumerated().filter { $0.offset % 2 == 0 && $0.element % 2 != 0 }.reduce(0)
    { $0 + $1.element }', '    return lst.enumerated().filter({ $0.offset % 2 == 0
    }).filter({ $0.element % 2 != 0 }).map({ $0.element }).reduce(0, +)', "    var\
    \ result = 0\n    for i in lst.indices where i % 2 == 0 {\n        if lst[i] %\
    \ 2 != 0 {\n            result += lst[i]\n        }\n    }\n    return result",
  '    return lst.enumerated().filter({ $0.offset % 2 == 0 }).filter({ $0.element
    % 2 != 0 }).map({ $0.element }).reduce(0, +)', "    var sum = 0\n    for i in\
    \ 0..<lst.count {\n        if i % 2 == 0 && lst[i] % 2 != 0 {\n            sum\
    \ += lst[i]\n        }\n    }\n    return sum", "    var sum = 0\n    for (index,\
    \ num) in lst.enumerated() {\n        if index % 2 == 0 && num % 2 != 0 {\n  \
    \          sum += num\n        }\n    }\n    return sum", "    let odds = lst.filter\
    \ { $0 % 2 != 0 }\n    let evens = lst.filter { $0 % 2 == 0 }\n    return odds.count\
    \ > evens.count ? odds.reduce(0, +) : evens.reduce(0, +)", "    return lst.enumerated().reduce(0)\
    \ {\n        let (index, element) = $1\n        return (index % 2 == 0 && element\
    \ % 2 != 0) ? $0 + element : $0\n    }", "    var odds = [Int]()\n    for index\
    \ in stride(from: 0, to: lst.count, by: 2) {\n        if lst[index] % 2 != 0 {\n\
    \            odds.append(lst[index])\n        }\n    }\n    return odds.reduce(0,\
    \ +)", "    var res = 0\n    for i in 0..<lst.count {\n        if i % 2 == 0 &&\
    \ lst[i] % 2 != 0 {\n            res += lst[i]\n        }\n    }\n    return res",
  "    var sum = 0\n    var index = 1\n    while index < lst.count {\n        sum\
    \ += lst[index]\n        index += 2\n    }\n    return sum", "    return lst.enumerated().reduce(0)\
    \ {\n        $0 + ($1.offset % 2 == 0 && $1.element % 2 != 0 ? $1.element : 0)\n\
    \    }", "    var sum = 0\n    for (index, number) in lst.enumerated() {\n   \
    \     if index % 2 == 0 && number % 2 != 0 {\n            sum += number\n    \
    \    }\n    }\n    return sum", "    var sum = 0\n    for i in stride(from: 0,\
    \ to: lst.count, by: 2) {\n        if lst[i] % 2 != 0 {\n            sum += lst[i]\n\
    \        }\n    }\n    return sum", '    return lst.enumerated().filter({ $0.offset
    % 2 == 0 }).filter({ $0.element % 2 != 0 }).map({ $0.element }).reduce(0, +)',
  "    var res = 0\n    for i in 0..<lst.count {\n        if i%2 == 0 && lst[i]%2\
    \ != 0 {\n            res += lst[i]\n        }\n    }\n    return res", "    var\
    \ oddSum = 0\n    for (index, element) in lst.enumerated() {\n        if index\
    \ % 2 == 0 && element % 2 != 0 {\n            oddSum += element\n        }\n \
    \   }\n    return oddSum", "    return lst.enumerated().reduce(0) {\n        return\
    \ ($0.offset % 2 == 0 && $1 % 2 != 0) ? $0.element + $1 : $0.element\n    }",
  '    return 0', "    return lst.enumerated().reduce(0) {\n        return $0 + ($1.offset\
    \ % 2 == 0 && $1.element % 2 != 0 ? $1.element : 0)\n    }", "    var sum = 0\n\
    \    for (i, num) in lst.enumerated() {\n        if i % 2 == 0 && num % 2 != 0\
    \ {\n            sum += num\n        }\n    }\n    return sum", '    return lst.enumerated().filter
    { $0.offset % 2 == 0 && $0.element % 2 != 0 }.reduce(0) { $0 + $1.element }',
  '    return lst.enumerated().filter { $0.offset % 2 == 0 && $0.element % 2 != 0
    }.reduce(0) { $0 + $1.element }', "    // put your code here\n    return 0", '    return
    lst.enumerated().filter({ $0.offset % 2 == 0 && $0.element % 2 != 0 }).map({ $0.element
    }).reduce(0, +)', "    let zipped = zip(lst.indices, lst)\n    return zipped.filter({\
    \ $0.0 % 2 == 0 }).map({ $0.1 }).filter({ $0 % 2 != 0 }).reduce(0, +)", "    var\
    \ sum = 0\n    for index in 0..<lst.count {\n        if index % 2 == 0 {\n   \
    \         if lst[index] % 2 != 0 {\n                sum += lst[index]\n      \
    \      }\n        }\n    }\n    return sum", "    var result = 0\n    for (i,\
    \ val) in lst.enumerated() {\n        if i % 2 == 0 && val % 2 != 0 {\n      \
    \      result += val\n        }\n    }\n    return result", '    return lst.enumerated().reduce(0)
    { $0 + (($1.offset % 2 == 0) ? ($1.element % 2 == 1 ? $1.element : 0) : 0) }',
  "    var oddSum = 0\n    for (index, element) in lst.enumerated() {\n        if\
    \ index % 2 == 0 {\n            if element % 2 != 0 {\n                oddSum\
    \ += element\n            }\n        }\n    }\n    return oddSum", '    return
    lst.enumerated().reduce(0) { $0 + ($1.offset.isMultiple(of: 2) && $1.element.isOdd
    ? $1.element : 0) }', "    var sum = 0\n    for (index, element) in lst.enumerated()\
    \ {\n        if index % 2 == 0 {\n            if element % 2 != 0 {\n        \
    \        sum += element\n            }\n        }\n    }\n    return sum", '    return
    0', '    return lst.enumerated().reduce(0) { acc, idx in acc + (idx.offset % 2
    == 0 ? idx.element : 0) }', "    var result = 0\n    for (index, element) in lst.enumerated()\
    \ {\n        if (index % 2 == 0) && (element % 2 != 0) {\n            result +=\
    \ element\n        }\n    }\n    return result", '    return lst.enumerated().filter({$0.offset
    % 2 == 0}).filter({$0.element % 2 != 0}).map({$0.element}).reduce(0, +)', "  \
    \  var sum = 0\n    for (i, value) in lst.enumerated() {\n        if i % 2 ==\
    \ 0 && value % 2 != 0 {\n            sum += value\n        }\n    }\n    return\
    \ sum", "    var sum = 0\n    for (index, value) in lst.enumerated() {\n     \
    \   if index % 2 == 0 && value % 2 != 0 {\n            sum += value\n        }\n\
    \    }\n    return sum", "    return lst.enumerated().reduce(0) {\n        $0\
    \ + ($1.offset % 2 == 0 && $1.element % 2 != 0 ? $1.element : 0)\n    }", "  \
    \  var sum = 0\n    for index in lst.indices where index % 2 == 0 && lst[index]\
    \ % 2 != 0 {\n        sum += lst[index]\n    }\n    return sum", '    return lst.enumerated().filter({$0.offset
    % 2 == 0}).filter({$0.element % 2 != 0}).map({$0.element}).reduce(0, +)', "  \
    \  return lst.enumerated().reduce(0) { result, element in\n        element.offset\
    \ % 2 == 0 && element.element % 2 != 0 ? result + element.element : result\n \
    \   }", "    var result = 0\n    for (index, element) in lst.enumerated() {\n\
    \        if index % 2 == 0 {\n            if element % 2 != 0 {\n            \
    \    result += element\n            }\n        }\n    }\n    return result", '    return
    lst.enumerated().filter({$0.offset % 2 == 0}).filter({$0.element % 2 != 0}).map({$0.element}).reduce(0,
    {$0 + $1})', '    return lst.enumerated().reduce(0) { $0 + ($1.offset % 2 == 0
    && $1.element % 2 != 0 ? $1.element : 0) }', '    return lst.enumerated().reduce(0)
    { $0 + ($1.offset % 2 == 0 && $1.element % 2 != 0 ? $1.element : 0) }', '    return
    lst.enumerated().filter { $0.offset % 2 == 0 && $0.element % 2 != 0 }.reduce(0)
    { $0 + $1.element }', '    return lst.enumerated().filter({$0.offset % 2 == 0}).filter({$0.element
    % 2 != 0}).map({$0.element}).reduce(0, +)', "    var sum = 0\n    for (i, n) in\
    \ lst.enumerated() {\n        if n % 2 == 1 {\n            if i % 2 == 0 {\n \
    \               sum += n\n            }\n        }\n    }\n    return sum", " \
    \   return lst.enumerated().reduce(0) {\n        if $1.offset % 2 == 0 {\n   \
    \         return $0 + ($1.element % 2 == 1 ? $1.element : 0)\n        }\n    \
    \    return $0\n    }", '    return lst.enumerated().reduce(0) { ($1.offset %
    2 == 0 && $1.element % 2 != 0) ? $0 + $1.element : $0 }', "    var sum = 0\n \
    \   for i in stride(from: 1, to: lst.count, by: 2) {\n        if lst[i] % 2 ==\
    \ 1 {\n            sum += lst[i]\n        }\n    }\n    return sum", "    var\
    \ sum = 0\n    for (index, element) in lst.enumerated() {\n        if index %\
    \ 2 == 0 && element % 2 != 0 {\n            sum += element\n        }\n    }\n\
    \    return sum", "    return lst.enumerated().reduce(0) { (result, element) in\n\
    \        let (index, value) = element\n        return index % 2 == 0 && value\
    \ % 2 != 0 ? result + value : result\n    }", "    return lst.enumerated().reduce(0)\
    \ { (acc, i) in\n        return i.offset % 2 == 0 && i.element % 2 != 0 ? acc\
    \ + i.element : acc\n    }", "    let oddNumbers = lst.enumerated().filter { $0.offset\
    \ % 2 == 0 && $0.element % 2 != 0 }\n    return oddNumbers.reduce(0) { $0 + $1.element\
    \ }", '    return zip(lst, 1..<lst.count).filter{$0.1 % 2 == 0}.reduce(0) { $0
    + ($1.0 % 2 == 1 ? $1.0 : 0) }', "    \n    let oddEven = lst.enumerated().filter\
    \ { $0.offset % 2 == 0 && $0.element % 2 != 0 }\n    let oddOdd = lst.enumerated().filter\
    \ { $0.offset % 2 != 0 && $0.element % 2 != 0 }\n    let sum = oddEven.map { $0.element\
    \ }.reduce(0, +) + oddOdd.map { $0.element }.reduce(0, +)\n    return sum", '    return
    0', "  var value = 0\n  for i in stride(from: 0, to: lst.count, by: 2) {\n   \
    \ if lst[i] % 2 != 0 {\n      value += lst[i]\n    }\n  }\n  return value", " \
    \   var sum = 0\n    for i in 0..<lst.count {\n        if lst[i] % 2 != 0 && i\
    \ % 2 == 0 {\n            sum += lst[i]\n        }\n    }\n    return sum", " \
    \   var result = 0\n    for i in stride(from: 0, to: lst.count, by: 2) {\n   \
    \     if lst[i] % 2 != 0 {\n            result += lst[i]\n        }\n    }\n \
    \   return result", "    return lst.enumerated().reduce(0) { (result, arg1) ->\
    \ Int in\n        let (i, value) = arg1\n        return (i % 2 == 0 && value %\
    \ 2 != 0) ? result + value : result\n    }", "    var sum = 0\n    for (index,\
    \ num) in lst.enumerated() {\n        if index % 2 == 0 && num % 2 != 0 {\n  \
    \          sum += num\n        }\n    }\n    return sum", "    var sum = 0\n \
    \   var idx = 0\n    while idx < lst.count {\n        if idx % 2 == 0 && lst[idx]\
    \ % 2 != 0 {\n            sum += lst[idx]\n        }\n        idx += 1\n    }\n\
    \    return sum", '    return 0', '    return 0', "  // F1: 0, F2: 1, F3: 1, F4:\
    \ 2, F5: 3, F6: 5, F7: 8, F8: 13\n  // F9: 21, F10: 34, F11: 55, F12: 89, F13:\
    \ 144, F14: 233, F15: 377\n  var oddEvenSum = 0\n  for (i, value) in lst.enumerated()\
    \ {\n    if i % 2 == 0 && value % 2 != 0 {\n      oddEvenSum += value\n    }\n\
    \  }\n  return oddEvenSum", "    let evenIndexedOdds = zip(lst.indices, lst).filter\
    \ { ($0.0 % 2 == 0) && ($0.1 % 2 != 0) }\n    return evenIndexedOdds.map { $0.1\
    \ }.reduce(0, +)", "    return lst.enumerated().reduce(0) {\n        $0 + ($1.offset\
    \ % 2 == 0 && $1.element % 2 != 0 ? $1.element : 0)\n    }", '    return lst.filter
    { $0 % 2 == 1 }.enumerated().filter { $0.offset % 2 == 0 }.map { $0.element }.reduce(0,
    +)', '    return lst.enumerated().filter({$0.offset % 2 == 0}).filter({$0.element
    % 2 != 0}).map({$0.element}).reduce(0, +)', '    return lst.enumerated().reduce(0)
    { $0 + ($1.offset % 2 == 0 && $1.element % 2 != 0 ? $1.element : 0) }', "    var\
    \ odds = [Int]()\n    for (index, number) in lst.enumerated() {\n        if index\
    \ % 2 == 0 {\n            if number % 2 != 0 {\n                odds.append(number)\n\
    \            }\n        }\n    }\n    return odds.reduce(0, +)", "    var sum\
    \ = 0\n    for i in stride(from: 1, to: lst.count, by: 2) {\n        if i % 2\
    \ == 0 {\n            sum += lst[i]\n        }\n    }\n    return sum", "    var\
    \ sum = 0\n    for (i, num) in lst.enumerated() {\n        if i % 2 == 0 && num\
    \ % 2 != 0 {\n            sum += num\n        }\n    }\n    return sum", '    return
    lst.filter { $0 % 2 == 1 }.filter { lst.firstIndex(of: $0)! % 2 == 0 }.reduce(0,
    +)', "    var oddTotal = 0\n    for (index, value) in lst.enumerated() {\n   \
    \     if index % 2 == 0 && value % 2 != 0 {\n            oddTotal += value\n \
    \       }\n    }\n    return oddTotal", '    return zip(lst, Array(0..<lst.count)).filter({$0.1
    % 2 == 0 && $0.0 % 2 != 0}).map({$0.0}).reduce(0, +)', "    var result = 0\n \
    \   for (i, v) in lst.enumerated() {\n        if i % 2 == 0 && v % 2 != 0 {\n\
    \            result += v\n        }\n    }\n    return result", "    var sum =\
    \ 0\n    for i in 0..<lst.count {\n        if lst[i] % 2 != 0 && i % 2 == 0 {\n\
    \            sum += lst[i]\n        }\n    }\n    return sum", "    var sum =\
    \ 0\n    for (i, element) in lst.enumerated() {\n        if element % 2 != 0 &&\
    \ i % 2 == 0 {\n            sum += element\n        }\n    }\n    return sum",
  '    return lst.enumerated().reduce(0) { $0 + ($1.offset % 2 == 0 && $1.element
    % 2 != 0 ? $1.element : 0) }', "    var sum = 0\n    for (index, number) in lst.enumerated()\
    \ {\n        if index % 2 == 0 && number % 2 != 0 {\n            sum += number\n\
    \        }\n    }\n    return sum", "    return lst.enumerated().reduce(0) { (result,\
    \ item) in\n        return item.offset % 2 == 0 && item.element % 2 != 0 ? result\
    \ + item.element : result\n    }", "    return lst.enumerated().reduce(0) { result,\
    \ enumeration in\n        if enumeration.offset % 2 == 0 && enumeration.element\
    \ % 2 != 0 {\n            return result + enumeration.element\n        }\n   \
    \     return result\n    }", "    var sum = 0\n    for (index, element) in lst.enumerated()\
    \ {\n        if index % 2 == 0 && element % 2 != 0 {\n            sum += element\n\
    \        }\n    }\n    return sum", "    var result = 0\n    for (index, value)\
    \ in lst.enumerated() {\n        if index % 2 == 0 {\n            if value % 2\
    \ != 0 {\n                result += value\n            }\n        }\n    }\n \
    \   return result", "    var sum = 0\n    var i = 0\n    while i < lst.count {\n\
    \        if i % 2 == 0 && lst[i] % 2 != 0 {\n            sum += lst[i]\n     \
    \   }\n        i += 1\n    }\n    return sum", '    return lst.enumerated().filter
    { $0.offset % 2 == 0 && $0.element % 2 != 0 }.reduce(0) { $0 + $1.element }',
  "    var sum = 0\n    var len = lst.count\n    var idx = 0\n    while len > 0 {\n\
    \        if lst[idx] % 2 != 0 {\n            sum += lst[idx]\n        }\n    \
    \    idx += 2\n        len -= 1\n    }\n    return sum", "    var result = 0\n\
    \    for (index, value) in lst.enumerated() {\n        if index % 2 == 0 && value\
    \ % 2 != 0 {\n            result += value\n        }\n    }\n    return result",
  '  return 0', "    var result = 0\n    for (i, num) in lst.enumerated() {\n    \
    \    if i % 2 == 0 {\n            result += num % 2 == 1 ? num : 0\n        }\n\
    \    }\n    return result", "    return lst.enumerated().reduce(0) { (result,\
    \ enumeratedItem) in\n        return enumeratedItem.offset % 2 == 0 && enumeratedItem.element\
    \ % 2 != 0 ? result + enumeratedItem.element : result\n    }", "    var sum =\
    \ 0\n    for (index, value) in lst.enumerated() {\n        if index % 2 == 0 &&\
    \ value % 2 != 0 {\n            sum += value\n        }\n    }\n    return sum",
  "    var sum = 0\n    for (index, element) in lst.enumerated() {\n        if index\
    \ % 2 == 0 {\n            if element % 2 != 0 {\n                sum += element\n\
    \            }\n        }\n    }\n    return sum", "    var result = 0\n    for\
    \ index in stride(from: 1, to: lst.count, by: 2) {\n        if index % 2 == 0\
    \ {\n            result += lst[index]\n        }\n    }\n    return result", '    return
    0', "    var total = 0\n    for (index, number) in lst.enumerated() {\n      \
    \  if index % 2 == 0 && number % 2 != 0 {\n            total += number\n     \
    \   }\n    }\n    return total", "    var sum = 0\n    for (i, num) in lst.enumerated()\
    \ {\n        if i % 2 == 0 && num % 2 != 0 {\n            sum += num\n       \
    \ }\n    }\n    return sum", "    var sum = 0\n    for index in stride(from: 0,\
    \ to: lst.count, by: 2) {\n        if lst[index] % 2 != 0 {\n            sum +=\
    \ lst[index]\n        }\n    }\n    return sum", "    let evenIndexes = lst.enumerated().filter\
    \ { index, _ in index % 2 == 0 }\n    let evenIndexedOdds = evenIndexes.filter\
    \ { _, element in element % 2 != 0 }\n    return evenIndexedOdds.reduce(0) { result,\
    \ element in result + element.1 }", "    return lst.enumerated().reduce(0) {\n\
    \        $0 + ($1.offset % 2 == 0 && $1.element % 2 != 0 ? $1.element : 0)\n \
    \   }", "    var ans = 0\n    for (i, e) in lst.enumerated() {\n        if i %\
    \ 2 == 0 && e % 2 != 0 {\n            ans += e\n        }\n    }\n    return ans",
  '  lst.enumerated().reduce(0) { $0 + ($1.offset % 2 == 0 ? $1.element : 0) }', " \
    \   return lst.enumerated().reduce(0) {\n        $0 + ($1.offset % 2 == 0 && $1.element\
    \ % 2 != 0 ? $1.element : 0)\n    }", '    return lst.enumerated().reduce(0) {
    $0 + ($1.offset % 2 == 0 && $1.element % 2 != 0 ? $1.element : 0) }', "    var\
    \ sum = 0\n    for (i, num) in lst.enumerated() {\n        if num % 2 != 0 &&\
    \ i % 2 == 0 {\n            sum += num\n        }\n    }\n    return sum", " \
    \ var total = 0\n  for (index, num) in lst.enumerated() {\n    if index % 2 ==\
    \ 0 && num % 2 != 0 {\n      total += num\n    }\n  }\n  return total", "    var\
    \ sum = 0\n    for (index, num) in lst.enumerated() {\n        if index % 2 ==\
    \ 0 && num % 2 != 0 {\n            sum += num\n        }\n    }\n    return sum",
  "    var sum = 0\n    for (index, i) in lst.enumerated() {\n        if index % 2\
    \ == 0 && i % 2 != 0 {\n            sum += i\n        }\n    }\n    return sum",
  '    return lst.enumerated().filter { $0.offset % 2 == 0 && $0.element % 2 != 0
    }.reduce(0) { $0 + $1.element }', '    return lst.enumerated().filter { $0.offset
    % 2 == 0 && $0.element % 2 != 0 }.reduce(0) { $0 + $1.element }', "    var sum\
    \ = 0\n    for i in stride(from: 1, to: lst.count, by: 2) {\n        if lst[i]\
    \ % 2 == 1 {\n            sum += lst[i]\n        }\n    }\n    return sum", '    return
    lst.enumerated().filter { $0.offset % 2 == 0 && $0.element % 2 != 0 }.reduce(0)
    { $0 + $1.element }', "    return lst.enumerated().reduce(0) {\n        $0 + ($1.offset\
    \ % 2 == 0 && $1.element % 2 != 0 ? $1.element : 0)\n    }", "    var result =\
    \ 0\n    for (index, element) in lst.enumerated() {\n        if index % 2 == 0\
    \ && element % 2 != 0 {\n            result += element\n        }\n    }\n   \
    \ return result", '    return lst.filter({ $0 % 2 == 1 }).enumerated().filter({
    $0.offset % 2 == 0 }).map({ $0.element }).reduce(0, +)', "    return lst.enumerated().reduce(0)\
    \ {\n        $0 + ($1.0 % 2 == 0 && $1.1 % 2 != 0 ? $1.1 : 0)\n    }", "    let\
    \ filtered = lst.enumerated().filter { $0.offset % 2 == 0 && $0.element % 2 !=\
    \ 0 }\n    return filtered.reduce(0) { $0 + $1.element }", "    var result = 0\n\
    \    for i in stride(from: 1, to: lst.count, by: 2) {\n        if lst[i] % 2 ==\
    \ 1 {\n            result += lst[i]\n        }\n    }\n    return result", " \
    \   var sum = 0\n    for index in lst.indices where index % 2 == 0 {\n       \
    \ let int = lst[index]\n        if int % 2 != 0 {\n            sum += int\n  \
    \      }\n    }\n    return sum", "    var counter = 0\n    lst.enumerated().forEach\
    \ { (index, value) in\n        if index % 2 == 0 && value % 2 != 0 {\n       \
    \     counter += value\n        }\n    }\n    return counter", '    return lst.enumerated().filter
    { $0.offset % 2 == 0 && $0.element % 2 != 0 }.reduce(0) { $0 + $1.element }',
  "    return lst.enumerated().reduce(0) { (sum, tuple) in\n        let (index, element)\
    \ = tuple\n        return index % 2 == 0 && element % 2 != 0 ? sum + element :\
    \ sum\n    }", "    // TODO: Write your solution here\n    var sum = 0\n    for\
    \ i in stride(from: 0, to: lst.count, by: 2) {\n        if lst[i] % 2 != 0 {\n\
    \            sum += lst[i]\n        }\n    }\n    return sum", "    var sum =\
    \ 0\n    for i in stride(from: 1, to: lst.count, by: 2) {\n        if lst[i] %\
    \ 2 == 1 {\n            sum += lst[i]\n        }\n    }\n    return sum", "  \
    \  return zip(lst, lst.indices)\n        .filter { $0.1 % 2 == 0 }\n        .filter\
    \ { $0.0 % 2 != 0 }\n        .map { $0.0 }\n        .reduce(0, +)", "    var result\
    \ = 0\n    for (index, number) in lst.enumerated() {\n        if index % 2 ==\
    \ 0 && number % 2 != 0 {\n            result += number\n        }\n    }\n   \
    \ return result", "    let odd = lst.enumerated().filter { $0.0 % 2 == 0 && $0.1\
    \ % 2 != 0 }\n    return odd.reduce(0) { $0 + $1.1 }"]
stop_tokens:
- "\n}"
