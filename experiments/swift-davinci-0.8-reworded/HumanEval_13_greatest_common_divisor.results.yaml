language: swift
name: HumanEval_13_greatest_common_divisor
results:
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   if a == 0 {\n        return b\n    }\n    if b == 0 {\n        return a\n\
    \    }\n    var a = a\n    var b = b\n    if a < b {\n        let tmp = a\n  \
    \      a = b\n        b = tmp\n    }\n    while b != 0 {\n        let tmp = b\n\
    \        b = a % b\n        a = tmp\n    }\n    return a\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(greatest_common_divisor(a: 3, b: 7) == 1)\nassert(greatest_common_divisor(a:\
    \ 10, b: 15) == 5)\nassert(greatest_common_divisor(a: 49, b: 14) == 7)\nassert(greatest_common_divisor(a:\
    \ 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979564
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   return (a % b == 0) ? b : greatest_common_divisor(a: b, b: a % b)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(greatest_common_divisor(a: 3, b: 7) == 1)\nassert(greatest_common_divisor(a:\
    \ 10, b: 15) == 5)\nassert(greatest_common_divisor(a: 49, b: 14) == 7)\nassert(greatest_common_divisor(a:\
    \ 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979564
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   return b == 0 ? a : greatest_common_divisor(a: b, b: a % b)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(greatest_common_divisor(a: 3, b: 7) == 1)\nassert(greatest_common_divisor(a:\
    \ 10, b: 15) == 5)\nassert(greatest_common_divisor(a: 49, b: 14) == 7)\nassert(greatest_common_divisor(a:\
    \ 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979564
- exit_code: 1
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   return gcd(a, b)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(greatest_common_divisor(a:\
    \ 3, b: 7) == 1)\nassert(greatest_common_divisor(a: 10, b: 15) == 5)\nassert(greatest_common_divisor(a:\
    \ 49, b: 14) == 7)\nassert(greatest_common_divisor(a: 144, b: 60) == 12)"
  status: SyntaxError
  stderr: "/tmp/tmpxlj7prti.swift:8:12: error: cannot find 'gcd' in scope\n    return\
    \ gcd(a, b)\n           ^~~\n"
  stdout: ''
  timestamp: 1659979564
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   return b == 0 ? a : greatest_common_divisor(a: b, b: a % b)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(greatest_common_divisor(a: 3, b: 7) == 1)\nassert(greatest_common_divisor(a:\
    \ 10, b: 15) == 5)\nassert(greatest_common_divisor(a: 49, b: 14) == 7)\nassert(greatest_common_divisor(a:\
    \ 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979564
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   if b == 0 {\n        return a\n    } else {\n        return greatest_common_divisor(a:\
    \ b, b: a % b)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(greatest_common_divisor(a:\
    \ 3, b: 7) == 1)\nassert(greatest_common_divisor(a: 10, b: 15) == 5)\nassert(greatest_common_divisor(a:\
    \ 49, b: 14) == 7)\nassert(greatest_common_divisor(a: 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979564
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   return b == 0 ? a : greatest_common_divisor(a: b, b: a % b)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(greatest_common_divisor(a: 3, b: 7) == 1)\nassert(greatest_common_divisor(a:\
    \ 10, b: 15) == 5)\nassert(greatest_common_divisor(a: 49, b: 14) == 7)\nassert(greatest_common_divisor(a:\
    \ 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979564
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   var c = a\n    var d = b\n    while c != d {\n        if c > d {\n       \
    \     c -= d\n        } else {\n            d -= c\n        }\n    }\n    return\
    \ c\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(greatest_common_divisor(a: 3,\
    \ b: 7) == 1)\nassert(greatest_common_divisor(a: 10, b: 15) == 5)\nassert(greatest_common_divisor(a:\
    \ 49, b: 14) == 7)\nassert(greatest_common_divisor(a: 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979564
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   if a % b == 0 {\n        return b\n    } else {\n        return greatest_common_divisor(a:\
    \ b, b: a % b)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(greatest_common_divisor(a:\
    \ 3, b: 7) == 1)\nassert(greatest_common_divisor(a: 10, b: 15) == 5)\nassert(greatest_common_divisor(a:\
    \ 49, b: 14) == 7)\nassert(greatest_common_divisor(a: 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979564
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   return a % b == 0 ? b : greatest_common_divisor(a: b, b: a % b)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(greatest_common_divisor(a: 3, b: 7) == 1)\nassert(greatest_common_divisor(a:\
    \ 10, b: 15) == 5)\nassert(greatest_common_divisor(a: 49, b: 14) == 7)\nassert(greatest_common_divisor(a:\
    \ 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979564
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   let r = a % b\n    if r != 0 {\n        return greatest_common_divisor(a:\
    \ b, b: r)\n    } else {\n        return b\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(greatest_common_divisor(a: 3, b: 7) == 1)\nassert(greatest_common_divisor(a:\
    \ 10, b: 15) == 5)\nassert(greatest_common_divisor(a: 49, b: 14) == 7)\nassert(greatest_common_divisor(a:\
    \ 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979564
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   var min = a < b ? a : b\n    var gcd = 1\n    while (min > 0) {\n        if\
    \ (a % min == 0 && b % min == 0) {\n            gcd = min\n            break\n\
    \        }\n        min -= 1\n    }\n    return gcd\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(greatest_common_divisor(a: 3, b: 7) == 1)\nassert(greatest_common_divisor(a:\
    \ 10, b: 15) == 5)\nassert(greatest_common_divisor(a: 49, b: 14) == 7)\nassert(greatest_common_divisor(a:\
    \ 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979564
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   if b == 0 {\n        return a\n    } else {\n        return greatest_common_divisor(a:\
    \ b, b: a % b)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(greatest_common_divisor(a:\
    \ 3, b: 7) == 1)\nassert(greatest_common_divisor(a: 10, b: 15) == 5)\nassert(greatest_common_divisor(a:\
    \ 49, b: 14) == 7)\nassert(greatest_common_divisor(a: 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979564
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   if b == 0 {\n        return a\n    } else {\n        return greatest_common_divisor(a:\
    \ b, b: a % b)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(greatest_common_divisor(a:\
    \ 3, b: 7) == 1)\nassert(greatest_common_divisor(a: 10, b: 15) == 5)\nassert(greatest_common_divisor(a:\
    \ 49, b: 14) == 7)\nassert(greatest_common_divisor(a: 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979564
- exit_code: 1
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   guard a > 0 && b > 0 else {\n        return 0\n    }\n    let num = a > b\
    \ ? a : b\n    let den = a > b ? b : a\n    var r = num % den\n    while r !=\
    \ 0 {\n        r = num % den\n        num = den\n        den = r\n    }\n    return\
    \ num\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(greatest_common_divisor(a:\
    \ 3, b: 7) == 1)\nassert(greatest_common_divisor(a: 10, b: 15) == 5)\nassert(greatest_common_divisor(a:\
    \ 49, b: 14) == 7)\nassert(greatest_common_divisor(a: 144, b: 60) == 12)"
  status: SyntaxError
  stderr: "/tmp/tmpy_tmk7sy.swift:16:9: error: cannot assign to value: 'num' is a\
    \ 'let' constant\n        num = den\n        ^~~\n/tmp/tmpy_tmk7sy.swift:11:5:\
    \ note: change 'let' to 'var' to make it mutable\n    let num = a > b ? a : b\n\
    \    ^~~\n    var\n/tmp/tmpy_tmk7sy.swift:17:9: error: cannot assign to value:\
    \ 'den' is a 'let' constant\n        den = r\n        ^~~\n/tmp/tmpy_tmk7sy.swift:12:5:\
    \ note: change 'let' to 'var' to make it mutable\n    let den = a > b ? b : a\n\
    \    ^~~\n    var\n"
  stdout: ''
  timestamp: 1659979564
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   return b == 0 ? a : greatest_common_divisor(a: b, b: a % b)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(greatest_common_divisor(a: 3, b: 7) == 1)\nassert(greatest_common_divisor(a:\
    \ 10, b: 15) == 5)\nassert(greatest_common_divisor(a: 49, b: 14) == 7)\nassert(greatest_common_divisor(a:\
    \ 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979564
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   if a == 0 {\n        return b\n    }\n    if b == 0 {\n        return a\n\
    \    }\n    if a == b {\n        return a\n    }\n    if a == 1 || b == 1 {\n\
    \        return 1\n    }\n    if a > b {\n        return greatest_common_divisor(a:\
    \ a-b, b: b)\n    }\n    return greatest_common_divisor(a: a, b: b-a)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(greatest_common_divisor(a: 3, b: 7) == 1)\nassert(greatest_common_divisor(a:\
    \ 10, b: 15) == 5)\nassert(greatest_common_divisor(a: 49, b: 14) == 7)\nassert(greatest_common_divisor(a:\
    \ 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979564
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   return a % b == 0 ? b : greatest_common_divisor(a: b, b: a % b)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(greatest_common_divisor(a: 3, b: 7) == 1)\nassert(greatest_common_divisor(a:\
    \ 10, b: 15) == 5)\nassert(greatest_common_divisor(a: 49, b: 14) == 7)\nassert(greatest_common_divisor(a:\
    \ 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979564
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   var (a, b) = (a, b)\n    if a < b {\n        swap(&a, &b)\n    }\n    while\
    \ a != 0 {\n        (a, b) = (b % a, a)\n    }\n    return b\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(greatest_common_divisor(a: 3, b: 7) == 1)\nassert(greatest_common_divisor(a:\
    \ 10, b: 15) == 5)\nassert(greatest_common_divisor(a: 49, b: 14) == 7)\nassert(greatest_common_divisor(a:\
    \ 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979564
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   if b == 0 {\n        return a\n    } else {\n        return greatest_common_divisor(a:\
    \ b, b: a % b)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(greatest_common_divisor(a:\
    \ 3, b: 7) == 1)\nassert(greatest_common_divisor(a: 10, b: 15) == 5)\nassert(greatest_common_divisor(a:\
    \ 49, b: 14) == 7)\nassert(greatest_common_divisor(a: 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979564
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   var a = a\n    var b = b\n    while (b != 0) {\n        (a, b) = (b, a % b)\n\
    \    }\n    return a\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(greatest_common_divisor(a:\
    \ 3, b: 7) == 1)\nassert(greatest_common_divisor(a: 10, b: 15) == 5)\nassert(greatest_common_divisor(a:\
    \ 49, b: 14) == 7)\nassert(greatest_common_divisor(a: 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979564
- exit_code: 1
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   return greatest_common_divisor(b, a % b)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(greatest_common_divisor(a: 3, b: 7) == 1)\nassert(greatest_common_divisor(a:\
    \ 10, b: 15) == 5)\nassert(greatest_common_divisor(a: 49, b: 14) == 7)\nassert(greatest_common_divisor(a:\
    \ 144, b: 60) == 12)"
  status: SyntaxError
  stderr: "/tmp/tmpkw7w1y6u.swift:8:35: error: missing argument labels 'a:b:' in call\n\
    \    return greatest_common_divisor(b, a % b)\n                              \
    \    ^\n                                   a: b: \n"
  stdout: ''
  timestamp: 1659979564
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   if a % b == 0 {\n        return b\n    } else {\n        return greatest_common_divisor(a:\
    \ b, b: a % b)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(greatest_common_divisor(a:\
    \ 3, b: 7) == 1)\nassert(greatest_common_divisor(a: 10, b: 15) == 5)\nassert(greatest_common_divisor(a:\
    \ 49, b: 14) == 7)\nassert(greatest_common_divisor(a: 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979564
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   if a == 0 {\n        return b\n    }\n    return greatest_common_divisor(a:\
    \ b % a, b: a)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(greatest_common_divisor(a:\
    \ 3, b: 7) == 1)\nassert(greatest_common_divisor(a: 10, b: 15) == 5)\nassert(greatest_common_divisor(a:\
    \ 49, b: 14) == 7)\nassert(greatest_common_divisor(a: 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979564
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   if b == 0 {\n        return a\n    } else {\n        return greatest_common_divisor(a:\
    \ b, b: a % b)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(greatest_common_divisor(a:\
    \ 3, b: 7) == 1)\nassert(greatest_common_divisor(a: 10, b: 15) == 5)\nassert(greatest_common_divisor(a:\
    \ 49, b: 14) == 7)\nassert(greatest_common_divisor(a: 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979564
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \ return b == 0 ? a : greatest_common_divisor(a: b, b: a % b)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(greatest_common_divisor(a: 3, b: 7) == 1)\nassert(greatest_common_divisor(a:\
    \ 10, b: 15) == 5)\nassert(greatest_common_divisor(a: 49, b: 14) == 7)\nassert(greatest_common_divisor(a:\
    \ 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979564
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   var _a = a, _b = b\n    while _b != 0 {\n        let c = _a % _b\n       \
    \ _a = _b\n        _b = c\n    }\n    return _a\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(greatest_common_divisor(a: 3, b: 7) == 1)\nassert(greatest_common_divisor(a:\
    \ 10, b: 15) == 5)\nassert(greatest_common_divisor(a: 49, b: 14) == 7)\nassert(greatest_common_divisor(a:\
    \ 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979564
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   // your solution here\n    if b == 0 {\n        return a\n    } else {\n \
    \       return greatest_common_divisor(a: b, b: a % b)\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(greatest_common_divisor(a: 3, b: 7) == 1)\nassert(greatest_common_divisor(a:\
    \ 10, b: 15) == 5)\nassert(greatest_common_divisor(a: 49, b: 14) == 7)\nassert(greatest_common_divisor(a:\
    \ 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979564
- exit_code: 1
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   return gcd(a, b)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(greatest_common_divisor(a:\
    \ 3, b: 7) == 1)\nassert(greatest_common_divisor(a: 10, b: 15) == 5)\nassert(greatest_common_divisor(a:\
    \ 49, b: 14) == 7)\nassert(greatest_common_divisor(a: 144, b: 60) == 12)"
  status: SyntaxError
  stderr: "/tmp/tmpxlj7prti.swift:8:12: error: cannot find 'gcd' in scope\n    return\
    \ gcd(a, b)\n           ^~~\n"
  stdout: ''
  timestamp: 1659979564
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   return a == 0 ? b : greatest_common_divisor(a: b % a, b: a)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(greatest_common_divisor(a: 3, b: 7) == 1)\nassert(greatest_common_divisor(a:\
    \ 10, b: 15) == 5)\nassert(greatest_common_divisor(a: 49, b: 14) == 7)\nassert(greatest_common_divisor(a:\
    \ 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979564
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   let r = a % b\n    if r != 0 {\n        return greatest_common_divisor(a:\
    \ b, b: r)\n    } else {\n        return b\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(greatest_common_divisor(a: 3, b: 7) == 1)\nassert(greatest_common_divisor(a:\
    \ 10, b: 15) == 5)\nassert(greatest_common_divisor(a: 49, b: 14) == 7)\nassert(greatest_common_divisor(a:\
    \ 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979564
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   // write your code here\n    var _a = a\n    var _b = b\n    while _a != _b\
    \ {\n        if _a > _b {\n            _a -= _b\n        } else {\n          \
    \  _b -= _a\n        }\n    }\n    return _a\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(greatest_common_divisor(a: 3, b: 7) == 1)\nassert(greatest_common_divisor(a:\
    \ 10, b: 15) == 5)\nassert(greatest_common_divisor(a: 49, b: 14) == 7)\nassert(greatest_common_divisor(a:\
    \ 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979564
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   return b == 0 ? a : greatest_common_divisor(a: b, b: a % b)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(greatest_common_divisor(a: 3, b: 7) == 1)\nassert(greatest_common_divisor(a:\
    \ 10, b: 15) == 5)\nassert(greatest_common_divisor(a: 49, b: 14) == 7)\nassert(greatest_common_divisor(a:\
    \ 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979564
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   if b == 0 {\n        return a\n    } else {\n        return greatest_common_divisor(a:\
    \ b, b: a % b)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(greatest_common_divisor(a:\
    \ 3, b: 7) == 1)\nassert(greatest_common_divisor(a: 10, b: 15) == 5)\nassert(greatest_common_divisor(a:\
    \ 49, b: 14) == 7)\nassert(greatest_common_divisor(a: 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979564
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   var divisor = 1\n    let bigger = a > b ? a : b\n    let smaller = a > b ?\
    \ b : a\n    for i in 1...smaller {\n        if (bigger % i == 0) && (smaller\
    \ % i == 0) {\n            divisor = i\n        }\n    }\n    return divisor\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(greatest_common_divisor(a: 3, b: 7) == 1)\nassert(greatest_common_divisor(a:\
    \ 10, b: 15) == 5)\nassert(greatest_common_divisor(a: 49, b: 14) == 7)\nassert(greatest_common_divisor(a:\
    \ 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979564
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   if a % b == 0 {\n        return b\n    } else {\n        return greatest_common_divisor(a:\
    \ b, b: a % b)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(greatest_common_divisor(a:\
    \ 3, b: 7) == 1)\nassert(greatest_common_divisor(a: 10, b: 15) == 5)\nassert(greatest_common_divisor(a:\
    \ 49, b: 14) == 7)\nassert(greatest_common_divisor(a: 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979564
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   if b == 0 {\n        return a\n    } else {\n        return greatest_common_divisor(a:\
    \ b, b: a % b)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(greatest_common_divisor(a:\
    \ 3, b: 7) == 1)\nassert(greatest_common_divisor(a: 10, b: 15) == 5)\nassert(greatest_common_divisor(a:\
    \ 49, b: 14) == 7)\nassert(greatest_common_divisor(a: 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979564
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n\t\
    var remainder = 0\n\tvar quotient = 0\n\tvar a = a\n\tvar b = b\n\t\n\twhile a\
    \ != 0 {\n\t\tremainder = b % a\n\t\tquotient = b / a\n\t\t\n\t\tif remainder\
    \ == 0 {\n\t\t\tbreak\n\t\t}\n\t\t\n\t\tb = a\n\t\ta = remainder\n\t}\n\t\n\t\
    return a\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(greatest_common_divisor(a:\
    \ 3, b: 7) == 1)\nassert(greatest_common_divisor(a: 10, b: 15) == 5)\nassert(greatest_common_divisor(a:\
    \ 49, b: 14) == 7)\nassert(greatest_common_divisor(a: 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979564
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   var numerator = max(a, b)\n    var denominator = min(a, b)\n    var remainder\
    \ = numerator % denominator\n    while remainder != 0 {\n        numerator = denominator\n\
    \        denominator = remainder\n        remainder = numerator % denominator\n\
    \    }\n    return denominator\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(greatest_common_divisor(a:\
    \ 3, b: 7) == 1)\nassert(greatest_common_divisor(a: 10, b: 15) == 5)\nassert(greatest_common_divisor(a:\
    \ 49, b: 14) == 7)\nassert(greatest_common_divisor(a: 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979564
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   if a % b == 0 {\n        return b\n    } else {\n        return greatest_common_divisor(a:\
    \ b, b: a % b)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(greatest_common_divisor(a:\
    \ 3, b: 7) == 1)\nassert(greatest_common_divisor(a: 10, b: 15) == 5)\nassert(greatest_common_divisor(a:\
    \ 49, b: 14) == 7)\nassert(greatest_common_divisor(a: 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979564
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   if b == 0 {\n        return a\n    } else {\n        return greatest_common_divisor(a:\
    \ b, b: a % b)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(greatest_common_divisor(a:\
    \ 3, b: 7) == 1)\nassert(greatest_common_divisor(a: 10, b: 15) == 5)\nassert(greatest_common_divisor(a:\
    \ 49, b: 14) == 7)\nassert(greatest_common_divisor(a: 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979564
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   var b = b\n    var a = a\n    while b != 0 {\n        let r = a % b\n    \
    \    a = b\n        b = r\n    }\n    return a\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(greatest_common_divisor(a: 3, b: 7) == 1)\nassert(greatest_common_divisor(a:\
    \ 10, b: 15) == 5)\nassert(greatest_common_divisor(a: 49, b: 14) == 7)\nassert(greatest_common_divisor(a:\
    \ 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979564
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   return b == 0 ? a : greatest_common_divisor(a: b, b: a % b)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(greatest_common_divisor(a: 3, b: 7) == 1)\nassert(greatest_common_divisor(a:\
    \ 10, b: 15) == 5)\nassert(greatest_common_divisor(a: 49, b: 14) == 7)\nassert(greatest_common_divisor(a:\
    \ 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979564
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   assert(a > 0 && b > 0, \"arguments must be positive integer\")\n    guard\
    \ a != b else { return a }\n    guard a > b else { return greatest_common_divisor(a:\
    \ b, b: a) }\n    return greatest_common_divisor(a: a - b, b: b)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(greatest_common_divisor(a: 3, b: 7) == 1)\nassert(greatest_common_divisor(a:\
    \ 10, b: 15) == 5)\nassert(greatest_common_divisor(a: 49, b: 14) == 7)\nassert(greatest_common_divisor(a:\
    \ 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979564
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   return b == 0 ? a : greatest_common_divisor(a: b, b: a % b)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(greatest_common_divisor(a: 3, b: 7) == 1)\nassert(greatest_common_divisor(a:\
    \ 10, b: 15) == 5)\nassert(greatest_common_divisor(a: 49, b: 14) == 7)\nassert(greatest_common_divisor(a:\
    \ 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979564
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   guard a != 0 else { return b }\n    guard b != 0 else { return a }\n    return\
    \ greatest_common_divisor(a: b, b: a % b)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(greatest_common_divisor(a: 3, b: 7) == 1)\nassert(greatest_common_divisor(a:\
    \ 10, b: 15) == 5)\nassert(greatest_common_divisor(a: 49, b: 14) == 7)\nassert(greatest_common_divisor(a:\
    \ 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979564
- exit_code: 1
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n\t\
    let (a, b) = normalize(a: a, b: b)\n\tlet r = a % b\n\tif r == 0 {\n\t\treturn\
    \ b\n\t} else {\n\t\treturn greatest_common_divisor(a: b, b: r)\n\t}\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(greatest_common_divisor(a: 3, b: 7) == 1)\nassert(greatest_common_divisor(a:\
    \ 10, b: 15) == 5)\nassert(greatest_common_divisor(a: 49, b: 14) == 7)\nassert(greatest_common_divisor(a:\
    \ 144, b: 60) == 12)"
  status: SyntaxError
  stderr: "/tmp/tmp_m4oh7r2.swift:8:15: error: cannot find 'normalize' in scope\n\
    \        let (a, b) = normalize(a: a, b: b)\n                     ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979564
- exit_code: 1
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   guard a != 0 && b != 0 else {\n        return 1\n    }\n    let max = max_element(a,\
    \ b)\n    let min = min_element(a, b)\n    let mod = max % min\n    guard mod\
    \ != 0 else {\n        return min\n    }\n    return greatest_common_divisor(a:\
    \ min, b: mod)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(greatest_common_divisor(a:\
    \ 3, b: 7) == 1)\nassert(greatest_common_divisor(a: 10, b: 15) == 5)\nassert(greatest_common_divisor(a:\
    \ 49, b: 14) == 7)\nassert(greatest_common_divisor(a: 144, b: 60) == 12)"
  status: SyntaxError
  stderr: "/tmp/tmp88bndqab.swift:11:15: error: cannot find 'max_element' in scope\n\
    \    let max = max_element(a, b)\n              ^~~~~~~~~~~\n/tmp/tmp88bndqab.swift:12:15:\
    \ error: cannot find 'min_element' in scope\n    let min = min_element(a, b)\n\
    \              ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979564
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   let (a, b) = abs(a) >= abs(b) ? (abs(a), abs(b)) : (abs(b), abs(a))\n    return\
    \ b == 0 ? a : greatest_common_divisor(a: b, b: a % b)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(greatest_common_divisor(a: 3, b: 7) == 1)\nassert(greatest_common_divisor(a:\
    \ 10, b: 15) == 5)\nassert(greatest_common_divisor(a: 49, b: 14) == 7)\nassert(greatest_common_divisor(a:\
    \ 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979564
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   let (min_number, max_number) = min(a, b) < max(a, b) ? (min(a, b), max(a,\
    \ b)) : (max(a, b), min(a, b))\n    let remainder = max_number % min_number\n\
    \    if remainder != 0 {\n        return greatest_common_divisor(a: min_number,\
    \ b: remainder)\n    } else {\n        return min_number\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(greatest_common_divisor(a: 3, b: 7) == 1)\nassert(greatest_common_divisor(a:\
    \ 10, b: 15) == 5)\nassert(greatest_common_divisor(a: 49, b: 14) == 7)\nassert(greatest_common_divisor(a:\
    \ 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979564
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   if b == 0 {\n        return a\n    } else {\n        return greatest_common_divisor(a:\
    \ b, b: a % b)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(greatest_common_divisor(a:\
    \ 3, b: 7) == 1)\nassert(greatest_common_divisor(a: 10, b: 15) == 5)\nassert(greatest_common_divisor(a:\
    \ 49, b: 14) == 7)\nassert(greatest_common_divisor(a: 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979564
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   if a == 0 {\n        return b\n    }\n    return greatest_common_divisor(a:\
    \ b % a, b: a)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(greatest_common_divisor(a:\
    \ 3, b: 7) == 1)\nassert(greatest_common_divisor(a: 10, b: 15) == 5)\nassert(greatest_common_divisor(a:\
    \ 49, b: 14) == 7)\nassert(greatest_common_divisor(a: 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979564
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   var a = a\n    var b = b\n    while b != 0 {\n        let r = a % b\n    \
    \    a = b\n        b = r\n    }\n    return a\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(greatest_common_divisor(a: 3, b: 7) == 1)\nassert(greatest_common_divisor(a:\
    \ 10, b: 15) == 5)\nassert(greatest_common_divisor(a: 49, b: 14) == 7)\nassert(greatest_common_divisor(a:\
    \ 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979564
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   if b == 0 {\n        return a\n    } else {\n        return greatest_common_divisor(a:\
    \ b, b: a % b)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(greatest_common_divisor(a:\
    \ 3, b: 7) == 1)\nassert(greatest_common_divisor(a: 10, b: 15) == 5)\nassert(greatest_common_divisor(a:\
    \ 49, b: 14) == 7)\nassert(greatest_common_divisor(a: 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979564
- exit_code: 1
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n\t\
    let a = abs(a)\n\tlet b = abs(b)\n\t\n\tif b == 0 {\n\t\treturn a\n\t}\n\t\n\t\
    if a == 0 {\n\t\treturn b\n\t}\n\t\n\tvar a = a\n\tvar b = b\n\t\n\twhile b !=\
    \ 0 {\n\t\tlet tmp = b\n\t\tb = a % b\n\t\ta = tmp\n\t}\n\t\n\treturn a\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(greatest_common_divisor(a: 3, b: 7) == 1)\nassert(greatest_common_divisor(a:\
    \ 10, b: 15) == 5)\nassert(greatest_common_divisor(a: 49, b: 14) == 7)\nassert(greatest_common_divisor(a:\
    \ 144, b: 60) == 12)"
  status: SyntaxError
  stderr: "/tmp/tmpc5ko2ajk.swift:19:6: error: invalid redeclaration of 'a'\n    \
    \    var a = a\n            ^\n/tmp/tmpc5ko2ajk.swift:8:6: note: 'a' previously\
    \ declared here\n        let a = abs(a)\n            ^\n/tmp/tmpc5ko2ajk.swift:20:6:\
    \ error: invalid redeclaration of 'b'\n        var b = b\n            ^\n/tmp/tmpc5ko2ajk.swift:9:6:\
    \ note: 'b' previously declared here\n        let b = abs(b)\n            ^\n"
  stdout: ''
  timestamp: 1659979564
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   var m = a, n = b\n    if m < n { swap(&m, &n) }\n    while m % n != 0 {\n\
    \        (m, n) = (n, m % n)\n    }\n    return n\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(greatest_common_divisor(a: 3, b: 7) == 1)\nassert(greatest_common_divisor(a:\
    \ 10, b: 15) == 5)\nassert(greatest_common_divisor(a: 49, b: 14) == 7)\nassert(greatest_common_divisor(a:\
    \ 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979564
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \ var a = a\n  var b = b\n  if a < b {\n    swap(&a, &b)\n  }\n  while b != 0\
    \ {\n    let c = a % b\n    a = b\n    b = c\n  }\n  return a\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(greatest_common_divisor(a: 3, b: 7) == 1)\nassert(greatest_common_divisor(a:\
    \ 10, b: 15) == 5)\nassert(greatest_common_divisor(a: 49, b: 14) == 7)\nassert(greatest_common_divisor(a:\
    \ 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979564
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \ return b == 0 ? a : greatest_common_divisor(a: b, b: a % b)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(greatest_common_divisor(a: 3, b: 7) == 1)\nassert(greatest_common_divisor(a:\
    \ 10, b: 15) == 5)\nassert(greatest_common_divisor(a: 49, b: 14) == 7)\nassert(greatest_common_divisor(a:\
    \ 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979564
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \ if a < b {\n    return greatest_common_divisor(a: b, b: a)\n  }\n  let r = a\
    \ % b\n  if r == 0 {\n    return b\n  }\n  return greatest_common_divisor(a: b,\
    \ b: r)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(greatest_common_divisor(a:\
    \ 3, b: 7) == 1)\nassert(greatest_common_divisor(a: 10, b: 15) == 5)\nassert(greatest_common_divisor(a:\
    \ 49, b: 14) == 7)\nassert(greatest_common_divisor(a: 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979564
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \ var a = a\n  var b = b\n  while b != 0 {\n    let remainder = a % b\n    a =\
    \ b\n    b = remainder\n  }\n  return a\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(greatest_common_divisor(a: 3, b: 7) == 1)\nassert(greatest_common_divisor(a:\
    \ 10, b: 15) == 5)\nassert(greatest_common_divisor(a: 49, b: 14) == 7)\nassert(greatest_common_divisor(a:\
    \ 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979564
- exit_code: 1
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \ let (a, b) = (abs(a), abs(b))\n  var ans = 0\n  if a == 0 {\n    ans = b\n \
    \ } else if b == 0 {\n    ans = a\n  } else {\n    while b != 0 {\n      let r\
    \ = a % b\n      a = b\n      b = r\n    }\n    ans = a\n  }\n  return ans\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(greatest_common_divisor(a: 3, b: 7) == 1)\nassert(greatest_common_divisor(a:\
    \ 10, b: 15) == 5)\nassert(greatest_common_divisor(a: 49, b: 14) == 7)\nassert(greatest_common_divisor(a:\
    \ 144, b: 60) == 12)"
  status: SyntaxError
  stderr: "/tmp/tmpylzdqrth.swift:17:7: error: cannot assign to value: 'a' is a 'let'\
    \ constant\n      a = b\n      ^\n/tmp/tmpylzdqrth.swift:8:3: note: change 'let'\
    \ to 'var' to make it mutable\n  let (a, b) = (abs(a), abs(b))\n  ^~~\n  var\n\
    /tmp/tmpylzdqrth.swift:18:7: error: cannot assign to value: 'b' is a 'let' constant\n\
    \      b = r\n      ^\n/tmp/tmpylzdqrth.swift:8:3: note: change 'let' to 'var'\
    \ to make it mutable\n  let (a, b) = (abs(a), abs(b))\n  ^~~\n  var\n"
  stdout: ''
  timestamp: 1659979564
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   return b == 0 ? a : greatest_common_divisor(a: b, b: a % b)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(greatest_common_divisor(a: 3, b: 7) == 1)\nassert(greatest_common_divisor(a:\
    \ 10, b: 15) == 5)\nassert(greatest_common_divisor(a: 49, b: 14) == 7)\nassert(greatest_common_divisor(a:\
    \ 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979564
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   let r = a % b\n    if r != 0 {\n        return greatest_common_divisor(a:\
    \ b, b: r)\n    } else {\n        return b\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(greatest_common_divisor(a: 3, b: 7) == 1)\nassert(greatest_common_divisor(a:\
    \ 10, b: 15) == 5)\nassert(greatest_common_divisor(a: 49, b: 14) == 7)\nassert(greatest_common_divisor(a:\
    \ 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979564
- exit_code: 1
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   let m = a, n = b\n    var rem = m % n\n    while rem != 0 {\n        m = n\n\
    \        n = rem\n        rem = m % n\n    }\n    return n\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(greatest_common_divisor(a: 3, b: 7) == 1)\nassert(greatest_common_divisor(a:\
    \ 10, b: 15) == 5)\nassert(greatest_common_divisor(a: 49, b: 14) == 7)\nassert(greatest_common_divisor(a:\
    \ 144, b: 60) == 12)"
  status: SyntaxError
  stderr: "/tmp/tmp4itocs0u.swift:11:9: error: cannot assign to value: 'm' is a 'let'\
    \ constant\n        m = n\n        ^\n/tmp/tmp4itocs0u.swift:8:5: note: change\
    \ 'let' to 'var' to make it mutable\n    let m = a, n = b\n    ^~~\n    var\n\
    /tmp/tmp4itocs0u.swift:12:9: error: cannot assign to value: 'n' is a 'let' constant\n\
    \        n = rem\n        ^\n/tmp/tmp4itocs0u.swift:8:5: note: change 'let' to\
    \ 'var' to make it mutable\n    let m = a, n = b\n    ^~~\n    var\n"
  stdout: ''
  timestamp: 1659979564
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   let r = a % b\n    return r == 0 ? b : greatest_common_divisor(a: b, b: r)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(greatest_common_divisor(a: 3, b: 7) == 1)\nassert(greatest_common_divisor(a:\
    \ 10, b: 15) == 5)\nassert(greatest_common_divisor(a: 49, b: 14) == 7)\nassert(greatest_common_divisor(a:\
    \ 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979564
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \ var a = a\n  var b = b\n  while a != 0 && b != 0 {\n    if a > b {\n      a\
    \ %= b\n    } else {\n      b %= a\n    }\n  }\n  return a + b\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(greatest_common_divisor(a: 3, b: 7) == 1)\nassert(greatest_common_divisor(a:\
    \ 10, b: 15) == 5)\nassert(greatest_common_divisor(a: 49, b: 14) == 7)\nassert(greatest_common_divisor(a:\
    \ 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979564
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   let _a = max(a, b)\n    let _b = min(a, b)\n    if _b == 0 {\n        return\
    \ _a\n    }\n    return greatest_common_divisor(a: _b, b: _a % _b)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(greatest_common_divisor(a: 3, b: 7) == 1)\nassert(greatest_common_divisor(a:\
    \ 10, b: 15) == 5)\nassert(greatest_common_divisor(a: 49, b: 14) == 7)\nassert(greatest_common_divisor(a:\
    \ 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979564
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n\t\
    return b == 0 ? a : greatest_common_divisor(a: b, b: a % b)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(greatest_common_divisor(a: 3, b: 7) == 1)\nassert(greatest_common_divisor(a:\
    \ 10, b: 15) == 5)\nassert(greatest_common_divisor(a: 49, b: 14) == 7)\nassert(greatest_common_divisor(a:\
    \ 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979564
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   if a < b {\n        return greatest_common_divisor(a: b, b: a)\n    }\n  \
    \  if b == 0 {\n        return a\n    }\n    return greatest_common_divisor(a:\
    \ b, b: a % b)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(greatest_common_divisor(a:\
    \ 3, b: 7) == 1)\nassert(greatest_common_divisor(a: 10, b: 15) == 5)\nassert(greatest_common_divisor(a:\
    \ 49, b: 14) == 7)\nassert(greatest_common_divisor(a: 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979564
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   var a = a\n    var b = b\n    while (a != 0) && (b != 0) {\n        if a >\
    \ b {\n            a %= b\n        } else {\n            b %= a\n        }\n \
    \   }\n    return a + b\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(greatest_common_divisor(a:\
    \ 3, b: 7) == 1)\nassert(greatest_common_divisor(a: 10, b: 15) == 5)\nassert(greatest_common_divisor(a:\
    \ 49, b: 14) == 7)\nassert(greatest_common_divisor(a: 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979564
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   let temp = a % b\n    if temp == 0 {\n        return b\n    } else {\n   \
    \     return greatest_common_divisor(a: b, b: temp)\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(greatest_common_divisor(a: 3, b: 7) == 1)\nassert(greatest_common_divisor(a:\
    \ 10, b: 15) == 5)\nassert(greatest_common_divisor(a: 49, b: 14) == 7)\nassert(greatest_common_divisor(a:\
    \ 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979564
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   if b == 0 {\n        return a\n    } else {\n        return greatest_common_divisor(a:\
    \ b, b: a % b)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(greatest_common_divisor(a:\
    \ 3, b: 7) == 1)\nassert(greatest_common_divisor(a: 10, b: 15) == 5)\nassert(greatest_common_divisor(a:\
    \ 49, b: 14) == 7)\nassert(greatest_common_divisor(a: 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979564
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   let (x, y) = (max(a, b), min(a, b))\n    let r = x % y\n    if r == 0 {\n\
    \        return y\n    } else {\n        return greatest_common_divisor(a: y,\
    \ b: r)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(greatest_common_divisor(a:\
    \ 3, b: 7) == 1)\nassert(greatest_common_divisor(a: 10, b: 15) == 5)\nassert(greatest_common_divisor(a:\
    \ 49, b: 14) == 7)\nassert(greatest_common_divisor(a: 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979564
- exit_code: -4
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(greatest_common_divisor(a:\
    \ 3, b: 7) == 1)\nassert(greatest_common_divisor(a: 10, b: 15) == 5)\nassert(greatest_common_divisor(a:\
    \ 49, b: 14) == 7)\nassert(greatest_common_divisor(a: 144, b: 60) == 12)"
  status: Exception
  stderr: 'tmpda_zei4f/tmpda_zei4f.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8fa64c8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8fa61bfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8fa61bf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8fa61be7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpda_zei4f                        0x0000558cec8111ba <unavailable> + 4538

    5    libc.so.6                          0x00002b8fa66b4460 __libc_start_main +
    245

    6    tmpda_zei4f                        0x0000558cec810e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979564
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   if a == 0 || b == 0 {\n        return a == 0 ? b : a\n    } else {\n     \
    \   return greatest_common_divisor(a: b, b: a % b)\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(greatest_common_divisor(a: 3, b: 7) == 1)\nassert(greatest_common_divisor(a:\
    \ 10, b: 15) == 5)\nassert(greatest_common_divisor(a: 49, b: 14) == 7)\nassert(greatest_common_divisor(a:\
    \ 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979564
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   if a < b {\n        return greatest_common_divisor(a: b, b: a)\n    }\n  \
    \  if b == 0 {\n        return a\n    }\n    return greatest_common_divisor(a:\
    \ b, b: a % b)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(greatest_common_divisor(a:\
    \ 3, b: 7) == 1)\nassert(greatest_common_divisor(a: 10, b: 15) == 5)\nassert(greatest_common_divisor(a:\
    \ 49, b: 14) == 7)\nassert(greatest_common_divisor(a: 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979564
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   var d = a, e = b\n    while e != 0 {\n        (d, e) = (e, d % e)\n    }\n\
    \    return d\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(greatest_common_divisor(a:\
    \ 3, b: 7) == 1)\nassert(greatest_common_divisor(a: 10, b: 15) == 5)\nassert(greatest_common_divisor(a:\
    \ 49, b: 14) == 7)\nassert(greatest_common_divisor(a: 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979564
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   if b == 0 {\n        return a\n    } else {\n        return greatest_common_divisor(a:\
    \ b, b: a % b)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(greatest_common_divisor(a:\
    \ 3, b: 7) == 1)\nassert(greatest_common_divisor(a: 10, b: 15) == 5)\nassert(greatest_common_divisor(a:\
    \ 49, b: 14) == 7)\nassert(greatest_common_divisor(a: 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979564
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   if b == 0 {\n        return a\n    } else {\n        return greatest_common_divisor(a:\
    \ b, b: a % b)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(greatest_common_divisor(a:\
    \ 3, b: 7) == 1)\nassert(greatest_common_divisor(a: 10, b: 15) == 5)\nassert(greatest_common_divisor(a:\
    \ 49, b: 14) == 7)\nassert(greatest_common_divisor(a: 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979564
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   let r = a % b\n    return r == 0 ? b : greatest_common_divisor(a: b, b: r)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(greatest_common_divisor(a: 3, b: 7) == 1)\nassert(greatest_common_divisor(a:\
    \ 10, b: 15) == 5)\nassert(greatest_common_divisor(a: 49, b: 14) == 7)\nassert(greatest_common_divisor(a:\
    \ 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979564
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   var a_number = a\n    var b_number = b\n    while b_number != 0 {\n      \
    \  let r = a_number % b_number\n        a_number = b_number\n        b_number\
    \ = r\n    }\n    return a_number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(greatest_common_divisor(a:\
    \ 3, b: 7) == 1)\nassert(greatest_common_divisor(a: 10, b: 15) == 5)\nassert(greatest_common_divisor(a:\
    \ 49, b: 14) == 7)\nassert(greatest_common_divisor(a: 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979564
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   if a == 0 {\n        return b\n    }\n    if b == 0 {\n        return a\n\
    \    }\n    if a > b {\n        return greatest_common_divisor(a: a % b, b: b)\n\
    \    } else {\n        return greatest_common_divisor(a: a, b: b % a)\n    }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(greatest_common_divisor(a: 3, b: 7) == 1)\nassert(greatest_common_divisor(a:\
    \ 10, b: 15) == 5)\nassert(greatest_common_divisor(a: 49, b: 14) == 7)\nassert(greatest_common_divisor(a:\
    \ 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979564
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   if a < b {\n        return greatest_common_divisor(a: b, b: a)\n    }\n  \
    \  if b == 0 {\n        return a\n    }\n    return greatest_common_divisor(a:\
    \ b, b: a % b)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(greatest_common_divisor(a:\
    \ 3, b: 7) == 1)\nassert(greatest_common_divisor(a: 10, b: 15) == 5)\nassert(greatest_common_divisor(a:\
    \ 49, b: 14) == 7)\nassert(greatest_common_divisor(a: 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979564
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   return a == 0 ? b : greatest_common_divisor(a: b % a, b: a)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(greatest_common_divisor(a: 3, b: 7) == 1)\nassert(greatest_common_divisor(a:\
    \ 10, b: 15) == 5)\nassert(greatest_common_divisor(a: 49, b: 14) == 7)\nassert(greatest_common_divisor(a:\
    \ 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979564
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n\t\
    var x = a;\n\tvar y = b;\n\twhile y != 0 {\n\t\tlet r = x % y;\n\t\tx = y;\n\t\
    \ty = r;\n\t}\n\treturn x;\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(greatest_common_divisor(a:\
    \ 3, b: 7) == 1)\nassert(greatest_common_divisor(a: 10, b: 15) == 5)\nassert(greatest_common_divisor(a:\
    \ 49, b: 14) == 7)\nassert(greatest_common_divisor(a: 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979564
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   if a % b == 0 {\n        return b\n    } else {\n        return greatest_common_divisor(a:\
    \ b, b: a % b)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(greatest_common_divisor(a:\
    \ 3, b: 7) == 1)\nassert(greatest_common_divisor(a: 10, b: 15) == 5)\nassert(greatest_common_divisor(a:\
    \ 49, b: 14) == 7)\nassert(greatest_common_divisor(a: 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979564
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   var n = 0, m = 0\n    if a > b {\n        n = a\n        m = b\n    } else\
    \ {\n        n = b\n        m = a\n    }\n    while m != 0 {\n        let n_m\
    \ = n % m\n        n = m\n        m = n_m\n    }\n    return n\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(greatest_common_divisor(a: 3, b: 7) == 1)\nassert(greatest_common_divisor(a:\
    \ 10, b: 15) == 5)\nassert(greatest_common_divisor(a: 49, b: 14) == 7)\nassert(greatest_common_divisor(a:\
    \ 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979564
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   let t = max(a, b)\n    let s = min(a, b)\n    let r = t % s\n    return r\
    \ == 0 ? s : greatest_common_divisor(a: s, b: r)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(greatest_common_divisor(a: 3, b: 7) == 1)\nassert(greatest_common_divisor(a:\
    \ 10, b: 15) == 5)\nassert(greatest_common_divisor(a: 49, b: 14) == 7)\nassert(greatest_common_divisor(a:\
    \ 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979564
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   if b == 0 {\n        return a\n    } else {\n        return greatest_common_divisor(a:\
    \ b, b: a % b)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(greatest_common_divisor(a:\
    \ 3, b: 7) == 1)\nassert(greatest_common_divisor(a: 10, b: 15) == 5)\nassert(greatest_common_divisor(a:\
    \ 49, b: 14) == 7)\nassert(greatest_common_divisor(a: 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979564
- exit_code: 1
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   return gcd(a, b)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(greatest_common_divisor(a:\
    \ 3, b: 7) == 1)\nassert(greatest_common_divisor(a: 10, b: 15) == 5)\nassert(greatest_common_divisor(a:\
    \ 49, b: 14) == 7)\nassert(greatest_common_divisor(a: 144, b: 60) == 12)"
  status: SyntaxError
  stderr: "/tmp/tmpxlj7prti.swift:8:12: error: cannot find 'gcd' in scope\n    return\
    \ gcd(a, b)\n           ^~~\n"
  stdout: ''
  timestamp: 1659979564
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   var bigger = 0\n    var smaller = 0\n    if a < b {\n        bigger = b\n\
    \        smaller = a\n    } else {\n        bigger = a\n        smaller = b\n\
    \    }\n    var remainder = bigger % smaller\n    while remainder != 0 {\n   \
    \     bigger = smaller\n        smaller = remainder\n        remainder = bigger\
    \ % smaller\n    }\n    return smaller\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(greatest_common_divisor(a: 3, b: 7) == 1)\nassert(greatest_common_divisor(a:\
    \ 10, b: 15) == 5)\nassert(greatest_common_divisor(a: 49, b: 14) == 7)\nassert(greatest_common_divisor(a:\
    \ 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979564
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   if b == 0 {\n        return a\n    } else {\n        return greatest_common_divisor(a:\
    \ b, b: a % b)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(greatest_common_divisor(a:\
    \ 3, b: 7) == 1)\nassert(greatest_common_divisor(a: 10, b: 15) == 5)\nassert(greatest_common_divisor(a:\
    \ 49, b: 14) == 7)\nassert(greatest_common_divisor(a: 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979564
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   return b == 0 ? a : greatest_common_divisor(a: b, b: a % b)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(greatest_common_divisor(a: 3, b: 7) == 1)\nassert(greatest_common_divisor(a:\
    \ 10, b: 15) == 5)\nassert(greatest_common_divisor(a: 49, b: 14) == 7)\nassert(greatest_common_divisor(a:\
    \ 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979564
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   var u = a, v = b\n    var r = 0\n    while v != 0 {\n        r = u % v\n \
    \       u = v\n        v = r\n    }\n    return u\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(greatest_common_divisor(a: 3, b: 7) == 1)\nassert(greatest_common_divisor(a:\
    \ 10, b: 15) == 5)\nassert(greatest_common_divisor(a: 49, b: 14) == 7)\nassert(greatest_common_divisor(a:\
    \ 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979564
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   var a = a\n    var b = b\n    while a != 0 && b != 0 {\n        if a > b {\n\
    \            a %= b\n        } else {\n            b %= a\n        }\n    }\n\
    \    return a + b\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(greatest_common_divisor(a:\
    \ 3, b: 7) == 1)\nassert(greatest_common_divisor(a: 10, b: 15) == 5)\nassert(greatest_common_divisor(a:\
    \ 49, b: 14) == 7)\nassert(greatest_common_divisor(a: 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979564
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   var mutA = a\n    var mutB = b\n    while mutB != 0 {\n        let tmp = mutB\n\
    \        mutB = mutA % mutB\n        mutA = tmp\n    }\n    return mutA\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(greatest_common_divisor(a: 3, b: 7) == 1)\nassert(greatest_common_divisor(a:\
    \ 10, b: 15) == 5)\nassert(greatest_common_divisor(a: 49, b: 14) == 7)\nassert(greatest_common_divisor(a:\
    \ 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979564
- exit_code: -4
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(greatest_common_divisor(a:\
    \ 3, b: 7) == 1)\nassert(greatest_common_divisor(a: 10, b: 15) == 5)\nassert(greatest_common_divisor(a:\
    \ 49, b: 14) == 7)\nassert(greatest_common_divisor(a: 144, b: 60) == 12)"
  status: Exception
  stderr: 'tmpda_zei4f/tmpda_zei4f.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8fa64c8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8fa61bfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8fa61bf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8fa61be7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpda_zei4f                        0x0000558cec8111ba <unavailable> + 4538

    5    libc.so.6                          0x00002b8fa66b4460 __libc_start_main +
    245

    6    tmpda_zei4f                        0x0000558cec810e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979564
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   var x = a\n    var y = b\n    while x != y {\n        if x > y {\n       \
    \     x -= y\n        } else {\n            y -= x\n        }\n    }\n    return\
    \ x\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(greatest_common_divisor(a: 3,\
    \ b: 7) == 1)\nassert(greatest_common_divisor(a: 10, b: 15) == 5)\nassert(greatest_common_divisor(a:\
    \ 49, b: 14) == 7)\nassert(greatest_common_divisor(a: 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979564
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   if a < b {\n        return greatest_common_divisor(a: b, b: a)\n    }\n  \
    \  if b == 0 {\n        return a\n    }\n    return greatest_common_divisor(a:\
    \ b, b: a % b)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(greatest_common_divisor(a:\
    \ 3, b: 7) == 1)\nassert(greatest_common_divisor(a: 10, b: 15) == 5)\nassert(greatest_common_divisor(a:\
    \ 49, b: 14) == 7)\nassert(greatest_common_divisor(a: 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979564
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   if a == 0 || b == 0 {\n        return max(a, b)\n    }\n    return greatest_common_divisor(a:\
    \ min(a, b), b: max(a, b) % min(a, b))\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(greatest_common_divisor(a: 3, b: 7) == 1)\nassert(greatest_common_divisor(a:\
    \ 10, b: 15) == 5)\nassert(greatest_common_divisor(a: 49, b: 14) == 7)\nassert(greatest_common_divisor(a:\
    \ 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979564
- exit_code: 1
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   var a = a\n    var b = b\n    while a % b != 0 {\n        a, b = b, a % b\n\
    \    }\n    return b\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(greatest_common_divisor(a:\
    \ 3, b: 7) == 1)\nassert(greatest_common_divisor(a: 10, b: 15) == 5)\nassert(greatest_common_divisor(a:\
    \ 49, b: 14) == 7)\nassert(greatest_common_divisor(a: 144, b: 60) == 12)"
  status: SyntaxError
  stderr: "/tmp/tmpiqln6aaq.swift:11:10: error: consecutive statements on a line must\
    \ be separated by ';'\n        a, b = b, a % b\n         ^\n         ;\n/tmp/tmpiqln6aaq.swift:11:10:\
    \ error: expected expression\n        a, b = b, a % b\n         ^\n/tmp/tmpiqln6aaq.swift:11:9:\
    \ warning: variable is unused\n        a, b = b, a % b\n        ^\n/tmp/tmpiqln6aaq.swift:8:9:\
    \ warning: variable 'a' was never mutated; consider changing to 'let' constant\n\
    \    var a = a\n    ~~~ ^\n    let\n/tmp/tmpiqln6aaq.swift:9:9: warning: variable\
    \ 'b' was never mutated; consider changing to 'let' constant\n    var b = b\n\
    \    ~~~ ^\n    let\n"
  stdout: ''
  timestamp: 1659979564
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   if b == 0 {\n        return a\n    } else {\n        return greatest_common_divisor(a:\
    \ b, b: a % b)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(greatest_common_divisor(a:\
    \ 3, b: 7) == 1)\nassert(greatest_common_divisor(a: 10, b: 15) == 5)\nassert(greatest_common_divisor(a:\
    \ 49, b: 14) == 7)\nassert(greatest_common_divisor(a: 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979564
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   if b == 0 {\n        return a\n    } else {\n        return greatest_common_divisor(a:\
    \ b, b: a % b)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(greatest_common_divisor(a:\
    \ 3, b: 7) == 1)\nassert(greatest_common_divisor(a: 10, b: 15) == 5)\nassert(greatest_common_divisor(a:\
    \ 49, b: 14) == 7)\nassert(greatest_common_divisor(a: 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979564
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   if b == 0 {\n        return a\n    } else {\n        return greatest_common_divisor(a:\
    \ b, b: a % b)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(greatest_common_divisor(a:\
    \ 3, b: 7) == 1)\nassert(greatest_common_divisor(a: 10, b: 15) == 5)\nassert(greatest_common_divisor(a:\
    \ 49, b: 14) == 7)\nassert(greatest_common_divisor(a: 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979564
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   var a = a\n    var b = b\n    while a != 0 && b != 0 {\n        if a > b {\n\
    \            a %= b\n        } else {\n            b %= a\n        }\n    }\n\
    \    return a + b\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(greatest_common_divisor(a:\
    \ 3, b: 7) == 1)\nassert(greatest_common_divisor(a: 10, b: 15) == 5)\nassert(greatest_common_divisor(a:\
    \ 49, b: 14) == 7)\nassert(greatest_common_divisor(a: 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979564
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \ var a = a\n  var b = b\n  var r = a % b\n  while r != 0 {\n    a = b\n    b\
    \ = r\n    r = a % b\n  }\n  return b\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(greatest_common_divisor(a: 3, b: 7) == 1)\nassert(greatest_common_divisor(a:\
    \ 10, b: 15) == 5)\nassert(greatest_common_divisor(a: 49, b: 14) == 7)\nassert(greatest_common_divisor(a:\
    \ 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979564
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   if b == 0 {\n        return a\n    } else {\n        return greatest_common_divisor(a:\
    \ b, b: a % b)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(greatest_common_divisor(a:\
    \ 3, b: 7) == 1)\nassert(greatest_common_divisor(a: 10, b: 15) == 5)\nassert(greatest_common_divisor(a:\
    \ 49, b: 14) == 7)\nassert(greatest_common_divisor(a: 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979564
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   var new_a = a\n    var new_b = b\n    while new_b != 0 {\n        let temp\
    \ = new_b\n        new_b = new_a % new_b\n        new_a = temp\n    }\n    return\
    \ new_a\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(greatest_common_divisor(a:\
    \ 3, b: 7) == 1)\nassert(greatest_common_divisor(a: 10, b: 15) == 5)\nassert(greatest_common_divisor(a:\
    \ 49, b: 14) == 7)\nassert(greatest_common_divisor(a: 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979564
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   // write your code here\n    var (r1, r2) = (a, b)\n    while r2 != 0 {\n\
    \        (r1, r2) = (r2, r1 % r2)\n    }\n    return r1\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(greatest_common_divisor(a: 3, b: 7) == 1)\nassert(greatest_common_divisor(a:\
    \ 10, b: 15) == 5)\nassert(greatest_common_divisor(a: 49, b: 14) == 7)\nassert(greatest_common_divisor(a:\
    \ 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979564
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   return b == 0 ? a : greatest_common_divisor(a: b, b: a % b)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(greatest_common_divisor(a: 3, b: 7) == 1)\nassert(greatest_common_divisor(a:\
    \ 10, b: 15) == 5)\nassert(greatest_common_divisor(a: 49, b: 14) == 7)\nassert(greatest_common_divisor(a:\
    \ 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979564
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   let temp = a % b\n    if temp == 0 {\n        return b\n    } else {\n   \
    \     return greatest_common_divisor(a: b, b: temp)\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(greatest_common_divisor(a: 3, b: 7) == 1)\nassert(greatest_common_divisor(a:\
    \ 10, b: 15) == 5)\nassert(greatest_common_divisor(a: 49, b: 14) == 7)\nassert(greatest_common_divisor(a:\
    \ 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979564
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   var a = a\n    var b = b\n    while b != 0 {\n        (a, b) = (b, a % b)\n\
    \    }\n    return a\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(greatest_common_divisor(a:\
    \ 3, b: 7) == 1)\nassert(greatest_common_divisor(a: 10, b: 15) == 5)\nassert(greatest_common_divisor(a:\
    \ 49, b: 14) == 7)\nassert(greatest_common_divisor(a: 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979564
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   return a == 0 ? b : greatest_common_divisor(a: b % a, b: a)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(greatest_common_divisor(a: 3, b: 7) == 1)\nassert(greatest_common_divisor(a:\
    \ 10, b: 15) == 5)\nassert(greatest_common_divisor(a: 49, b: 14) == 7)\nassert(greatest_common_divisor(a:\
    \ 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979564
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   let c = abs(a - b)\n    let remainder = abs(a % b)\n    return (remainder\
    \ == 0) ? b : greatest_common_divisor(a: b, b: remainder)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(greatest_common_divisor(a: 3, b: 7) == 1)\nassert(greatest_common_divisor(a:\
    \ 10, b: 15) == 5)\nassert(greatest_common_divisor(a: 49, b: 14) == 7)\nassert(greatest_common_divisor(a:\
    \ 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979564
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   var a = a\n    var b = b\n    while b != 0 {\n        let remainder = a %\
    \ b\n        a = b\n        b = remainder\n    }\n    return a\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(greatest_common_divisor(a: 3, b: 7) == 1)\nassert(greatest_common_divisor(a:\
    \ 10, b: 15) == 5)\nassert(greatest_common_divisor(a: 49, b: 14) == 7)\nassert(greatest_common_divisor(a:\
    \ 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979564
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   if b == 0 {\n        return a\n    } else {\n        return greatest_common_divisor(a:\
    \ b, b: a % b)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(greatest_common_divisor(a:\
    \ 3, b: 7) == 1)\nassert(greatest_common_divisor(a: 10, b: 15) == 5)\nassert(greatest_common_divisor(a:\
    \ 49, b: 14) == 7)\nassert(greatest_common_divisor(a: 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979564
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   if b == 0 {\n        return a\n    } else {\n        return greatest_common_divisor(a:\
    \ b, b: a % b)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(greatest_common_divisor(a:\
    \ 3, b: 7) == 1)\nassert(greatest_common_divisor(a: 10, b: 15) == 5)\nassert(greatest_common_divisor(a:\
    \ 49, b: 14) == 7)\nassert(greatest_common_divisor(a: 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979564
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   var max = a\n    var min = b\n    if a < b {\n        max = b\n        min\
    \ = a\n    }\n    if max % min == 0 {\n        return min\n    }\n    return greatest_common_divisor(a:\
    \ min, b: max % min)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(greatest_common_divisor(a:\
    \ 3, b: 7) == 1)\nassert(greatest_common_divisor(a: 10, b: 15) == 5)\nassert(greatest_common_divisor(a:\
    \ 49, b: 14) == 7)\nassert(greatest_common_divisor(a: 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979564
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   var (x, y) = (a, b)\n    while y != 0 {\n        (x, y) = (y, x % y)\n   \
    \ }\n    return x\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(greatest_common_divisor(a:\
    \ 3, b: 7) == 1)\nassert(greatest_common_divisor(a: 10, b: 15) == 5)\nassert(greatest_common_divisor(a:\
    \ 49, b: 14) == 7)\nassert(greatest_common_divisor(a: 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979564
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   if a == 0 {\n        return b\n    }\n    return greatest_common_divisor(a:\
    \ b % a, b: a)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(greatest_common_divisor(a:\
    \ 3, b: 7) == 1)\nassert(greatest_common_divisor(a: 10, b: 15) == 5)\nassert(greatest_common_divisor(a:\
    \ 49, b: 14) == 7)\nassert(greatest_common_divisor(a: 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979564
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   if b == 0 {\n        return a\n    } else {\n        return greatest_common_divisor(a:\
    \ b, b: a % b)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(greatest_common_divisor(a:\
    \ 3, b: 7) == 1)\nassert(greatest_common_divisor(a: 10, b: 15) == 5)\nassert(greatest_common_divisor(a:\
    \ 49, b: 14) == 7)\nassert(greatest_common_divisor(a: 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979564
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   return b == 0 ? a : greatest_common_divisor(a: b, b: a % b)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(greatest_common_divisor(a: 3, b: 7) == 1)\nassert(greatest_common_divisor(a:\
    \ 10, b: 15) == 5)\nassert(greatest_common_divisor(a: 49, b: 14) == 7)\nassert(greatest_common_divisor(a:\
    \ 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979564
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   if a == 0 {\n        return b\n    }\n    if b == 0 {\n        return a\n\
    \    }\n    if a == b {\n        return a\n    }\n    if a > b {\n        return\
    \ greatest_common_divisor(a: a - b, b: b)\n    }\n    if a < b {\n        return\
    \ greatest_common_divisor(a: a, b: b - a)\n    }\n    return 0\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(greatest_common_divisor(a: 3, b: 7) == 1)\nassert(greatest_common_divisor(a:\
    \ 10, b: 15) == 5)\nassert(greatest_common_divisor(a: 49, b: 14) == 7)\nassert(greatest_common_divisor(a:\
    \ 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979564
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \ return b == 0 ? a : greatest_common_divisor(a: b, b: a % b)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(greatest_common_divisor(a: 3, b: 7) == 1)\nassert(greatest_common_divisor(a:\
    \ 10, b: 15) == 5)\nassert(greatest_common_divisor(a: 49, b: 14) == 7)\nassert(greatest_common_divisor(a:\
    \ 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979564
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   var large = a\n    var small = b\n    if large < small {\n        (large,\
    \ small) = (small, large)\n    }\n    if small == 0 {\n        return large\n\
    \    }\n    return greatest_common_divisor(a: small, b: large % small)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(greatest_common_divisor(a: 3, b: 7) == 1)\nassert(greatest_common_divisor(a:\
    \ 10, b: 15) == 5)\nassert(greatest_common_divisor(a: 49, b: 14) == 7)\nassert(greatest_common_divisor(a:\
    \ 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979564
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   if b == 0 {\n        return a\n    } else {\n        return greatest_common_divisor(a:\
    \ b, b: a % b)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(greatest_common_divisor(a:\
    \ 3, b: 7) == 1)\nassert(greatest_common_divisor(a: 10, b: 15) == 5)\nassert(greatest_common_divisor(a:\
    \ 49, b: 14) == 7)\nassert(greatest_common_divisor(a: 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979564
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   if b == 0 {\n        return a\n    } else {\n        return greatest_common_divisor(a:\
    \ b, b: a % b)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(greatest_common_divisor(a:\
    \ 3, b: 7) == 1)\nassert(greatest_common_divisor(a: 10, b: 15) == 5)\nassert(greatest_common_divisor(a:\
    \ 49, b: 14) == 7)\nassert(greatest_common_divisor(a: 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979564
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n\t\
    if b == 0 {\n\t\treturn a\n\t} else {\n\t\treturn greatest_common_divisor(a: b,\
    \ b: a % b)\n\t}\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(greatest_common_divisor(a:\
    \ 3, b: 7) == 1)\nassert(greatest_common_divisor(a: 10, b: 15) == 5)\nassert(greatest_common_divisor(a:\
    \ 49, b: 14) == 7)\nassert(greatest_common_divisor(a: 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979565
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   var a = a\n    var b = b\n    while b != 0 {\n        (a, b) = (b, a % b)\n\
    \    }\n    return a\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(greatest_common_divisor(a:\
    \ 3, b: 7) == 1)\nassert(greatest_common_divisor(a: 10, b: 15) == 5)\nassert(greatest_common_divisor(a:\
    \ 49, b: 14) == 7)\nassert(greatest_common_divisor(a: 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979564
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   var (x, y) = (a, b)\n    while y != 0 {\n        (x, y) = (y, x % y)\n   \
    \ }\n    return x\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(greatest_common_divisor(a:\
    \ 3, b: 7) == 1)\nassert(greatest_common_divisor(a: 10, b: 15) == 5)\nassert(greatest_common_divisor(a:\
    \ 49, b: 14) == 7)\nassert(greatest_common_divisor(a: 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979564
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   if b == 0 {\n        return a\n    } else {\n        return greatest_common_divisor(a:\
    \ b, b: a % b)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(greatest_common_divisor(a:\
    \ 3, b: 7) == 1)\nassert(greatest_common_divisor(a: 10, b: 15) == 5)\nassert(greatest_common_divisor(a:\
    \ 49, b: 14) == 7)\nassert(greatest_common_divisor(a: 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979564
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   let k = min(a, b)\n    for i in stride(from: k, to: 0, by: -1) {\n       \
    \ if a % i == 0 && b % i == 0 {\n            return i\n        }\n    }\n    return\
    \ 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(greatest_common_divisor(a: 3,\
    \ b: 7) == 1)\nassert(greatest_common_divisor(a: 10, b: 15) == 5)\nassert(greatest_common_divisor(a:\
    \ 49, b: 14) == 7)\nassert(greatest_common_divisor(a: 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979565
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   if b == 0 {\n        return a\n    } else {\n        return greatest_common_divisor(a:\
    \ b, b: a % b)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(greatest_common_divisor(a:\
    \ 3, b: 7) == 1)\nassert(greatest_common_divisor(a: 10, b: 15) == 5)\nassert(greatest_common_divisor(a:\
    \ 49, b: 14) == 7)\nassert(greatest_common_divisor(a: 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979564
- exit_code: -4
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   // TODO: Implement greatest_common_divisor\n    return 0\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(greatest_common_divisor(a: 3, b: 7) == 1)\nassert(greatest_common_divisor(a:\
    \ 10, b: 15) == 5)\nassert(greatest_common_divisor(a: 49, b: 14) == 7)\nassert(greatest_common_divisor(a:\
    \ 144, b: 60) == 12)"
  status: Exception
  stderr: 'tmpacon6fm9/tmpacon6fm9.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b49fdb4dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b49fd844b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b49fd844988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b49fd8437b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpacon6fm9                        0x000055c80c3f81ba <unavailable> + 4538

    5    libc.so.6                          0x00002b49fdd39460 __libc_start_main +
    245

    6    tmpacon6fm9                        0x000055c80c3f7e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979564
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   if a % b == 0 {\n        return b\n    } else {\n        return greatest_common_divisor(a:\
    \ b, b: a % b)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(greatest_common_divisor(a:\
    \ 3, b: 7) == 1)\nassert(greatest_common_divisor(a: 10, b: 15) == 5)\nassert(greatest_common_divisor(a:\
    \ 49, b: 14) == 7)\nassert(greatest_common_divisor(a: 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979564
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   var a = a\n    var b = b\n    while a != 0 && b != 0 {\n        if a > b {\n\
    \            a %= b\n        } else {\n            b %= a\n        }\n    }\n\
    \    return a + b\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(greatest_common_divisor(a:\
    \ 3, b: 7) == 1)\nassert(greatest_common_divisor(a: 10, b: 15) == 5)\nassert(greatest_common_divisor(a:\
    \ 49, b: 14) == 7)\nassert(greatest_common_divisor(a: 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979564
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   if b == 0 {\n        return a\n    } else {\n        return greatest_common_divisor(a:\
    \ b, b: a % b)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(greatest_common_divisor(a:\
    \ 3, b: 7) == 1)\nassert(greatest_common_divisor(a: 10, b: 15) == 5)\nassert(greatest_common_divisor(a:\
    \ 49, b: 14) == 7)\nassert(greatest_common_divisor(a: 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979564
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   return b == 0 ? a : greatest_common_divisor(a: b, b: a % b)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(greatest_common_divisor(a: 3, b: 7) == 1)\nassert(greatest_common_divisor(a:\
    \ 10, b: 15) == 5)\nassert(greatest_common_divisor(a: 49, b: 14) == 7)\nassert(greatest_common_divisor(a:\
    \ 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979564
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   return b == 0 ? a : greatest_common_divisor(a: b, b: a % b)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(greatest_common_divisor(a: 3, b: 7) == 1)\nassert(greatest_common_divisor(a:\
    \ 10, b: 15) == 5)\nassert(greatest_common_divisor(a: 49, b: 14) == 7)\nassert(greatest_common_divisor(a:\
    \ 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979564
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   // TODO: Write some code to calculate the greatest common divisor of two numbers\n\
    \    var A: Int = a\n    var B: Int = b\n    while (A != B) {\n        if (A >\
    \ B) {\n            A = A - B\n        } else {\n            B = B - A\n     \
    \   }\n    }\n    return A\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(greatest_common_divisor(a:\
    \ 3, b: 7) == 1)\nassert(greatest_common_divisor(a: 10, b: 15) == 5)\nassert(greatest_common_divisor(a:\
    \ 49, b: 14) == 7)\nassert(greatest_common_divisor(a: 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979565
- exit_code: 1
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   var r = a % b\n    while r != 0 {\n        a = b\n        b = r\n        r\
    \ = a % b\n    }\n    return b\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(greatest_common_divisor(a:\
    \ 3, b: 7) == 1)\nassert(greatest_common_divisor(a: 10, b: 15) == 5)\nassert(greatest_common_divisor(a:\
    \ 49, b: 14) == 7)\nassert(greatest_common_divisor(a: 144, b: 60) == 12)"
  status: SyntaxError
  stderr: "/tmp/tmpaggvb9hf.swift:10:9: error: cannot assign to value: 'a' is a 'let'\
    \ constant\n        a = b\n        ^\n/tmp/tmpaggvb9hf.swift:11:9: error: cannot\
    \ assign to value: 'b' is a 'let' constant\n        b = r\n        ^\n"
  stdout: ''
  timestamp: 1659979564
- exit_code: 1
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   return __gcd(a, b)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(greatest_common_divisor(a:\
    \ 3, b: 7) == 1)\nassert(greatest_common_divisor(a: 10, b: 15) == 5)\nassert(greatest_common_divisor(a:\
    \ 49, b: 14) == 7)\nassert(greatest_common_divisor(a: 144, b: 60) == 12)"
  status: SyntaxError
  stderr: "/tmp/tmpz5anc6u2.swift:8:12: error: cannot find '__gcd' in scope\n    return\
    \ __gcd(a, b)\n           ^~~~~\n"
  stdout: ''
  timestamp: 1659979564
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   return b == 0 ? a : greatest_common_divisor(a: b, b: a % b)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(greatest_common_divisor(a: 3, b: 7) == 1)\nassert(greatest_common_divisor(a:\
    \ 10, b: 15) == 5)\nassert(greatest_common_divisor(a: 49, b: 14) == 7)\nassert(greatest_common_divisor(a:\
    \ 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979564
- exit_code: -4
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   // TODO: Implement GCD\n\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(greatest_common_divisor(a: 3, b: 7) == 1)\nassert(greatest_common_divisor(a:\
    \ 10, b: 15) == 5)\nassert(greatest_common_divisor(a: 49, b: 14) == 7)\nassert(greatest_common_divisor(a:\
    \ 144, b: 60) == 12)"
  status: Exception
  stderr: 'tmpr1kf_enz/tmpr1kf_enz.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae13d05ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae13cd55b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae13cd55988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae13cd547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr1kf_enz                        0x00005647fc4481ba <unavailable> + 4538

    5    libc.so.6                          0x00002ae13d24a460 __libc_start_main +
    245

    6    tmpr1kf_enz                        0x00005647fc447e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979565
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   if a == 0 {\n        return b\n    }\n    if b == 0 {\n        return a\n\
    \    }\n    var a = a\n    var b = b\n    if a < b {\n        swap(&a, &b)\n \
    \   }\n    while b != 0 {\n        let c = a % b\n        a = b\n        b = c\n\
    \    }\n    return a\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(greatest_common_divisor(a:\
    \ 3, b: 7) == 1)\nassert(greatest_common_divisor(a: 10, b: 15) == 5)\nassert(greatest_common_divisor(a:\
    \ 49, b: 14) == 7)\nassert(greatest_common_divisor(a: 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979565
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   if a == 0 || b == 0 {\n        return 0\n    } else if a % b == 0 {\n    \
    \    return b\n    } else if b % a == 0 {\n        return a\n    } else if a >\
    \ b {\n        return greatest_common_divisor(a: a % b, b: b)\n    } else {\n\
    \        return greatest_common_divisor(a: a, b: b % a)\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(greatest_common_divisor(a: 3, b: 7) == 1)\nassert(greatest_common_divisor(a:\
    \ 10, b: 15) == 5)\nassert(greatest_common_divisor(a: 49, b: 14) == 7)\nassert(greatest_common_divisor(a:\
    \ 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979565
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   var (t1, t2) = (a, b)\n    while t2 != 0 {\n        (t1, t2) = (t2, t1 % t2)\n\
    \    }\n    return t1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(greatest_common_divisor(a:\
    \ 3, b: 7) == 1)\nassert(greatest_common_divisor(a: 10, b: 15) == 5)\nassert(greatest_common_divisor(a:\
    \ 49, b: 14) == 7)\nassert(greatest_common_divisor(a: 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979565
- exit_code: -1
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   return greatest_common_divisor(a: max(a, b), b: min(a, b))\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(greatest_common_divisor(a: 3, b: 7) == 1)\nassert(greatest_common_divisor(a:\
    \ 10, b: 15) == 5)\nassert(greatest_common_divisor(a: 49, b: 14) == 7)\nassert(greatest_common_divisor(a:\
    \ 144, b: 60) == 12)"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659979570
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   if a % b == 0 {\n        return b\n    } else {\n        return greatest_common_divisor(a:\
    \ b, b: a % b)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(greatest_common_divisor(a:\
    \ 3, b: 7) == 1)\nassert(greatest_common_divisor(a: 10, b: 15) == 5)\nassert(greatest_common_divisor(a:\
    \ 49, b: 14) == 7)\nassert(greatest_common_divisor(a: 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979564
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   if a == 0 {\n        return b\n    }\n    if b == 0 {\n        return a\n\
    \    }\n    return greatest_common_divisor(a: b, b: a % b)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(greatest_common_divisor(a: 3, b: 7) == 1)\nassert(greatest_common_divisor(a:\
    \ 10, b: 15) == 5)\nassert(greatest_common_divisor(a: 49, b: 14) == 7)\nassert(greatest_common_divisor(a:\
    \ 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979565
- exit_code: 1
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   return gcd(a, b)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(greatest_common_divisor(a:\
    \ 3, b: 7) == 1)\nassert(greatest_common_divisor(a: 10, b: 15) == 5)\nassert(greatest_common_divisor(a:\
    \ 49, b: 14) == 7)\nassert(greatest_common_divisor(a: 144, b: 60) == 12)"
  status: SyntaxError
  stderr: "/tmp/tmpxlj7prti.swift:8:12: error: cannot find 'gcd' in scope\n    return\
    \ gcd(a, b)\n           ^~~\n"
  stdout: ''
  timestamp: 1659979564
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \ return b == 0 ? a : greatest_common_divisor(a: b, b: a % b)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(greatest_common_divisor(a: 3, b: 7) == 1)\nassert(greatest_common_divisor(a:\
    \ 10, b: 15) == 5)\nassert(greatest_common_divisor(a: 49, b: 14) == 7)\nassert(greatest_common_divisor(a:\
    \ 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979564
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \ guard a > 0 && b > 0 else { return 1 }\n  var a = a\n  var b = b\n  if a < b\
    \ {\n    swap(&a, &b)\n  }\n  while b != 0 {\n    let r = a % b\n    a = b\n \
    \   b = r\n  }\n  return a\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(greatest_common_divisor(a:\
    \ 3, b: 7) == 1)\nassert(greatest_common_divisor(a: 10, b: 15) == 5)\nassert(greatest_common_divisor(a:\
    \ 49, b: 14) == 7)\nassert(greatest_common_divisor(a: 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979565
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   var a = a\n    var b = b\n    while b != 0 {\n        let remainder = a %\
    \ b\n        a = b\n        b = remainder\n    }\n    return a\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(greatest_common_divisor(a: 3, b: 7) == 1)\nassert(greatest_common_divisor(a:\
    \ 10, b: 15) == 5)\nassert(greatest_common_divisor(a: 49, b: 14) == 7)\nassert(greatest_common_divisor(a:\
    \ 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979564
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   var a = a\n    var b = b\n    while b != 0 {\n        let t = b\n        b\
    \ = a % b\n        a = t\n    }\n    return a\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(greatest_common_divisor(a: 3, b: 7) == 1)\nassert(greatest_common_divisor(a:\
    \ 10, b: 15) == 5)\nassert(greatest_common_divisor(a: 49, b: 14) == 7)\nassert(greatest_common_divisor(a:\
    \ 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979565
- exit_code: 1
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   return a != 0 ? greatest_common_divisor(b % a, b: a) : b\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(greatest_common_divisor(a: 3, b: 7) == 1)\nassert(greatest_common_divisor(a:\
    \ 10, b: 15) == 5)\nassert(greatest_common_divisor(a: 49, b: 14) == 7)\nassert(greatest_common_divisor(a:\
    \ 144, b: 60) == 12)"
  status: SyntaxError
  stderr: "/tmp/tmpzg7m6xsi.swift:8:44: error: missing argument label 'a:' in call\n\
    \    return a != 0 ? greatest_common_divisor(b % a, b: a) : b\n              \
    \                             ^\n                                            a:\
    \ \n"
  stdout: ''
  timestamp: 1659979565
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   return b == 0 ? a : greatest_common_divisor(a: b, b: a % b)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(greatest_common_divisor(a: 3, b: 7) == 1)\nassert(greatest_common_divisor(a:\
    \ 10, b: 15) == 5)\nassert(greatest_common_divisor(a: 49, b: 14) == 7)\nassert(greatest_common_divisor(a:\
    \ 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979564
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   var x = a\n    var y = b\n    while x != y {\n        if x > y {\n       \
    \     x -= y\n        } else {\n            y -= x\n        }\n    }\n    return\
    \ x\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(greatest_common_divisor(a: 3,\
    \ b: 7) == 1)\nassert(greatest_common_divisor(a: 10, b: 15) == 5)\nassert(greatest_common_divisor(a:\
    \ 49, b: 14) == 7)\nassert(greatest_common_divisor(a: 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979564
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   return b == 0 ? a : greatest_common_divisor(a: b, b: a % b)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(greatest_common_divisor(a: 3, b: 7) == 1)\nassert(greatest_common_divisor(a:\
    \ 10, b: 15) == 5)\nassert(greatest_common_divisor(a: 49, b: 14) == 7)\nassert(greatest_common_divisor(a:\
    \ 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979564
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   var (a, b) = (a, b)\n    while b != 0 {\n        (a, b) = (b, a % b)\n   \
    \ }\n    return a\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(greatest_common_divisor(a:\
    \ 3, b: 7) == 1)\nassert(greatest_common_divisor(a: 10, b: 15) == 5)\nassert(greatest_common_divisor(a:\
    \ 49, b: 14) == 7)\nassert(greatest_common_divisor(a: 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979565
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   return b == 0 ? a : greatest_common_divisor(a: b, b: a % b)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(greatest_common_divisor(a: 3, b: 7) == 1)\nassert(greatest_common_divisor(a:\
    \ 10, b: 15) == 5)\nassert(greatest_common_divisor(a: 49, b: 14) == 7)\nassert(greatest_common_divisor(a:\
    \ 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979564
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   if a == 0 {\n        return b\n    }\n    if b == 0 {\n        return a\n\
    \    }\n    var c = a\n    var d = b\n    while c != d {\n        if c > d {\n\
    \            c -= d\n        } else {\n            d -= c\n        }\n    }\n\
    \    return c\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(greatest_common_divisor(a:\
    \ 3, b: 7) == 1)\nassert(greatest_common_divisor(a: 10, b: 15) == 5)\nassert(greatest_common_divisor(a:\
    \ 49, b: 14) == 7)\nassert(greatest_common_divisor(a: 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979565
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n\t\
    if a == 0 {\n\t\treturn b\n\t} else if b == 0 {\n\t\treturn a\n\t} else {\n\t\t\
    return greatest_common_divisor(a: b, b: a % b)\n\t}\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(greatest_common_divisor(a: 3, b: 7) == 1)\nassert(greatest_common_divisor(a:\
    \ 10, b: 15) == 5)\nassert(greatest_common_divisor(a: 49, b: 14) == 7)\nassert(greatest_common_divisor(a:\
    \ 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979565
- exit_code: 1
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   let gcd_rec = gcd_iter(a: a, b: b)\n    return gcd_rec\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(greatest_common_divisor(a: 3, b: 7) == 1)\nassert(greatest_common_divisor(a:\
    \ 10, b: 15) == 5)\nassert(greatest_common_divisor(a: 49, b: 14) == 7)\nassert(greatest_common_divisor(a:\
    \ 144, b: 60) == 12)"
  status: SyntaxError
  stderr: "/tmp/tmphnij7im9.swift:8:19: error: cannot find 'gcd_iter' in scope\n \
    \   let gcd_rec = gcd_iter(a: a, b: b)\n                  ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659979565
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n\t\
    if b == 0 {\n\t\treturn a\n\t} else {\n\t\treturn greatest_common_divisor(a: b,\
    \ b: a % b)\n\t}\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(greatest_common_divisor(a:\
    \ 3, b: 7) == 1)\nassert(greatest_common_divisor(a: 10, b: 15) == 5)\nassert(greatest_common_divisor(a:\
    \ 49, b: 14) == 7)\nassert(greatest_common_divisor(a: 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979565
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   var aa = a\n    var bb = b\n    while bb != 0 {\n        let rem = aa % bb\n\
    \        aa = bb\n        bb = rem\n    }\n    return aa\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(greatest_common_divisor(a: 3, b: 7) == 1)\nassert(greatest_common_divisor(a:\
    \ 10, b: 15) == 5)\nassert(greatest_common_divisor(a: 49, b: 14) == 7)\nassert(greatest_common_divisor(a:\
    \ 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979565
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   if b == 0 {\n        return a\n    } else {\n        return greatest_common_divisor(a:\
    \ b, b: a % b)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(greatest_common_divisor(a:\
    \ 3, b: 7) == 1)\nassert(greatest_common_divisor(a: 10, b: 15) == 5)\nassert(greatest_common_divisor(a:\
    \ 49, b: 14) == 7)\nassert(greatest_common_divisor(a: 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979564
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   assert(a > 0 && b > 0, \"a, b must be greater than 0\")\n    if a % b == 0\
    \ {\n        return b\n    } else {\n        return greatest_common_divisor(a:\
    \ b, b: a % b)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(greatest_common_divisor(a:\
    \ 3, b: 7) == 1)\nassert(greatest_common_divisor(a: 10, b: 15) == 5)\nassert(greatest_common_divisor(a:\
    \ 49, b: 14) == 7)\nassert(greatest_common_divisor(a: 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979565
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   if a < b {\n        return greatest_common_divisor(a: b, b: a)\n    }\n  \
    \  if b == 0 {\n        return a\n    }\n    return greatest_common_divisor(a:\
    \ b, b: a % b)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(greatest_common_divisor(a:\
    \ 3, b: 7) == 1)\nassert(greatest_common_divisor(a: 10, b: 15) == 5)\nassert(greatest_common_divisor(a:\
    \ 49, b: 14) == 7)\nassert(greatest_common_divisor(a: 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979564
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   var a = a\n    var b = b\n    while (a != 0) && (b != 0) {\n        if a >\
    \ b {\n            a %= b\n        } else {\n            b %= a\n        }\n \
    \   }\n    return a + b\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(greatest_common_divisor(a:\
    \ 3, b: 7) == 1)\nassert(greatest_common_divisor(a: 10, b: 15) == 5)\nassert(greatest_common_divisor(a:\
    \ 49, b: 14) == 7)\nassert(greatest_common_divisor(a: 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979564
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \ if a % b == 0 {\n    return b\n  } else {\n    return greatest_common_divisor(a:\
    \ b, b: a % b)\n  }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(greatest_common_divisor(a:\
    \ 3, b: 7) == 1)\nassert(greatest_common_divisor(a: 10, b: 15) == 5)\nassert(greatest_common_divisor(a:\
    \ 49, b: 14) == 7)\nassert(greatest_common_divisor(a: 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979565
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \ return a % b == 0 ? b : greatest_common_divisor(a: b, b: a % b)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(greatest_common_divisor(a: 3, b: 7) == 1)\nassert(greatest_common_divisor(a:\
    \ 10, b: 15) == 5)\nassert(greatest_common_divisor(a: 49, b: 14) == 7)\nassert(greatest_common_divisor(a:\
    \ 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979565
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   var number1 = a\n    var number2 = b\n    while number1 != number2 {\n   \
    \     if number1 > number2 {\n            number1 -= number2\n        } else {\n\
    \            number2 -= number1\n        }\n    }\n    return number1\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(greatest_common_divisor(a: 3, b: 7) == 1)\nassert(greatest_common_divisor(a:\
    \ 10, b: 15) == 5)\nassert(greatest_common_divisor(a: 49, b: 14) == 7)\nassert(greatest_common_divisor(a:\
    \ 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979565
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   guard a != 0 else { return b }\n    guard b != 0 else { return a }\n    if\
    \ (a > b) {\n        return greatest_common_divisor(a: a % b, b: b)\n    } else\
    \ {\n        return greatest_common_divisor(a: a, b: b % a)\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(greatest_common_divisor(a: 3, b: 7) == 1)\nassert(greatest_common_divisor(a:\
    \ 10, b: 15) == 5)\nassert(greatest_common_divisor(a: 49, b: 14) == 7)\nassert(greatest_common_divisor(a:\
    \ 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979565
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   if a == 0 {\n        return b\n    }\n    return greatest_common_divisor(a:\
    \ b % a, b: a)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(greatest_common_divisor(a:\
    \ 3, b: 7) == 1)\nassert(greatest_common_divisor(a: 10, b: 15) == 5)\nassert(greatest_common_divisor(a:\
    \ 49, b: 14) == 7)\nassert(greatest_common_divisor(a: 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979564
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   var a = a\n    var b = b\n    while a != 0 && b != 0 {\n        if a > b {\n\
    \            a %= b\n        } else {\n            b %= a\n        }\n    }\n\
    \    return a == 0 ? b : a\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(greatest_common_divisor(a:\
    \ 3, b: 7) == 1)\nassert(greatest_common_divisor(a: 10, b: 15) == 5)\nassert(greatest_common_divisor(a:\
    \ 49, b: 14) == 7)\nassert(greatest_common_divisor(a: 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979565
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   return b == 0 ? a : greatest_common_divisor(a: b, b: a % b)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(greatest_common_divisor(a: 3, b: 7) == 1)\nassert(greatest_common_divisor(a:\
    \ 10, b: 15) == 5)\nassert(greatest_common_divisor(a: 49, b: 14) == 7)\nassert(greatest_common_divisor(a:\
    \ 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979564
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   if b == 0 {\n        return a\n    } else {\n        return greatest_common_divisor(a:\
    \ b, b: a % b)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(greatest_common_divisor(a:\
    \ 3, b: 7) == 1)\nassert(greatest_common_divisor(a: 10, b: 15) == 5)\nassert(greatest_common_divisor(a:\
    \ 49, b: 14) == 7)\nassert(greatest_common_divisor(a: 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979564
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   if b == 0 {\n        return a\n    } else {\n        return greatest_common_divisor(a:\
    \ b, b: a % b)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(greatest_common_divisor(a:\
    \ 3, b: 7) == 1)\nassert(greatest_common_divisor(a: 10, b: 15) == 5)\nassert(greatest_common_divisor(a:\
    \ 49, b: 14) == 7)\nassert(greatest_common_divisor(a: 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979564
- exit_code: 1
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   var max = a\n    var min = b\n    if a < b {\n        max = b\n        min\
    \ = a\n    }\n    var gcd = 1\n    for var i = min; i > 0; i-- {\n        if (max\
    \ % i == 0) && (min % i == 0) {\n            gcd = i\n            break\n    \
    \    }\n    }\n    return gcd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(greatest_common_divisor(a:\
    \ 3, b: 7) == 1)\nassert(greatest_common_divisor(a: 10, b: 15) == 5)\nassert(greatest_common_divisor(a:\
    \ 49, b: 14) == 7)\nassert(greatest_common_divisor(a: 144, b: 60) == 12)"
  status: SyntaxError
  stderr: "/tmp/tmplll6n1fb.swift:15:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for var i = min; i > 0; i-- {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979565
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   let r = a % b\n    return r == 0 ? b : greatest_common_divisor(a: b, b: r)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(greatest_common_divisor(a: 3, b: 7) == 1)\nassert(greatest_common_divisor(a:\
    \ 10, b: 15) == 5)\nassert(greatest_common_divisor(a: 49, b: 14) == 7)\nassert(greatest_common_divisor(a:\
    \ 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979564
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   var max = a\n    var min = b\n    if (a < b) {\n        max = b\n        min\
    \ = a\n    }\n    while (max % min != 0) {\n        let rem = max % min\n    \
    \    max = min\n        min = rem\n    }\n    return min\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(greatest_common_divisor(a: 3, b: 7) == 1)\nassert(greatest_common_divisor(a:\
    \ 10, b: 15) == 5)\nassert(greatest_common_divisor(a: 49, b: 14) == 7)\nassert(greatest_common_divisor(a:\
    \ 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979565
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   var a = a\n    var b = b\n    while a != 0 && b != 0 {\n        if a > b {\n\
    \            a %= b\n        } else {\n            b %= a\n        }\n    }\n\
    \    return a + b\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(greatest_common_divisor(a:\
    \ 3, b: 7) == 1)\nassert(greatest_common_divisor(a: 10, b: 15) == 5)\nassert(greatest_common_divisor(a:\
    \ 49, b: 14) == 7)\nassert(greatest_common_divisor(a: 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979564
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   var a = a\n    var b = b\n    while b != 0 {\n        let temp = b\n     \
    \   b = a % b\n        a = temp\n    }\n    return a\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(greatest_common_divisor(a: 3, b: 7) == 1)\nassert(greatest_common_divisor(a:\
    \ 10, b: 15) == 5)\nassert(greatest_common_divisor(a: 49, b: 14) == 7)\nassert(greatest_common_divisor(a:\
    \ 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979565
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   return b == 0 ? a : greatest_common_divisor(a: b, b: a % b)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(greatest_common_divisor(a: 3, b: 7) == 1)\nassert(greatest_common_divisor(a:\
    \ 10, b: 15) == 5)\nassert(greatest_common_divisor(a: 49, b: 14) == 7)\nassert(greatest_common_divisor(a:\
    \ 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979564
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   return b == 0 ? a : greatest_common_divisor(a: b, b: a % b)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(greatest_common_divisor(a: 3, b: 7) == 1)\nassert(greatest_common_divisor(a:\
    \ 10, b: 15) == 5)\nassert(greatest_common_divisor(a: 49, b: 14) == 7)\nassert(greatest_common_divisor(a:\
    \ 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979564
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   var (x, y) = (a, b)\n    while y != 0 {\n        let r = x % y\n        x\
    \ = y\n        y = r\n    }\n    return x\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(greatest_common_divisor(a: 3, b: 7) == 1)\nassert(greatest_common_divisor(a:\
    \ 10, b: 15) == 5)\nassert(greatest_common_divisor(a: 49, b: 14) == 7)\nassert(greatest_common_divisor(a:\
    \ 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979565
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   guard a != 0 else { return b }\n    guard b != 0 else { return a }\n    if\
    \ a > b {\n        return greatest_common_divisor(a: a % b, b: b)\n    } else\
    \ {\n        return greatest_common_divisor(a: a, b: b % a)\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(greatest_common_divisor(a: 3, b: 7) == 1)\nassert(greatest_common_divisor(a:\
    \ 10, b: 15) == 5)\nassert(greatest_common_divisor(a: 49, b: 14) == 7)\nassert(greatest_common_divisor(a:\
    \ 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979565
- exit_code: 1
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   return gcd(x: a, y: b)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(greatest_common_divisor(a:\
    \ 3, b: 7) == 1)\nassert(greatest_common_divisor(a: 10, b: 15) == 5)\nassert(greatest_common_divisor(a:\
    \ 49, b: 14) == 7)\nassert(greatest_common_divisor(a: 144, b: 60) == 12)"
  status: SyntaxError
  stderr: "/tmp/tmprilr5287.swift:8:12: error: cannot find 'gcd' in scope\n    return\
    \ gcd(x: a, y: b)\n           ^~~\n"
  stdout: ''
  timestamp: 1659979565
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   return b == 0 ? a : greatest_common_divisor(a: b, b: a % b)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(greatest_common_divisor(a: 3, b: 7) == 1)\nassert(greatest_common_divisor(a:\
    \ 10, b: 15) == 5)\nassert(greatest_common_divisor(a: 49, b: 14) == 7)\nassert(greatest_common_divisor(a:\
    \ 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979564
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   return b == 0 ? a : greatest_common_divisor(a: b, b: a % b)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(greatest_common_divisor(a: 3, b: 7) == 1)\nassert(greatest_common_divisor(a:\
    \ 10, b: 15) == 5)\nassert(greatest_common_divisor(a: 49, b: 14) == 7)\nassert(greatest_common_divisor(a:\
    \ 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979564
- exit_code: -4
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   // Return the common divisor\n    return a\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(greatest_common_divisor(a: 3, b: 7) == 1)\nassert(greatest_common_divisor(a:\
    \ 10, b: 15) == 5)\nassert(greatest_common_divisor(a: 49, b: 14) == 7)\nassert(greatest_common_divisor(a:\
    \ 144, b: 60) == 12)"
  status: Exception
  stderr: 'tmpk2nup4wf/tmpk2nup4wf.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8a20362c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8a20059b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8a20059988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8a200587b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk2nup4wf                        0x0000560662a1b1ba <unavailable> + 4538

    5    libc.so.6                          0x00002b8a2054e460 __libc_start_main +
    245

    6    tmpk2nup4wf                        0x0000560662a1ae69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979565
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   var num1 = a\n    var num2 = b\n    while num1 != num2 {\n        if num1\
    \ > num2 {\n            num1 -= num2\n        } else {\n            num2 -= num1\n\
    \        }\n    }\n    return num1\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(greatest_common_divisor(a: 3, b: 7) == 1)\nassert(greatest_common_divisor(a:\
    \ 10, b: 15) == 5)\nassert(greatest_common_divisor(a: 49, b: 14) == 7)\nassert(greatest_common_divisor(a:\
    \ 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979565
- exit_code: 1
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   let common_divisors = common_divisors_of(a: a, b: b)\n    return common_divisors[common_divisors.count\
    \ - 1]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(greatest_common_divisor(a:\
    \ 3, b: 7) == 1)\nassert(greatest_common_divisor(a: 10, b: 15) == 5)\nassert(greatest_common_divisor(a:\
    \ 49, b: 14) == 7)\nassert(greatest_common_divisor(a: 144, b: 60) == 12)"
  status: SyntaxError
  stderr: "/tmp/tmpwaaun5lt.swift:8:27: error: cannot find 'common_divisors_of' in\
    \ scope\n    let common_divisors = common_divisors_of(a: a, b: b)\n          \
    \                ^~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979565
- exit_code: 1
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   return gcd(a, b)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(greatest_common_divisor(a:\
    \ 3, b: 7) == 1)\nassert(greatest_common_divisor(a: 10, b: 15) == 5)\nassert(greatest_common_divisor(a:\
    \ 49, b: 14) == 7)\nassert(greatest_common_divisor(a: 144, b: 60) == 12)"
  status: SyntaxError
  stderr: "/tmp/tmpxlj7prti.swift:8:12: error: cannot find 'gcd' in scope\n    return\
    \ gcd(a, b)\n           ^~~\n"
  stdout: ''
  timestamp: 1659979564
- exit_code: -4
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   let (mod, div) = a.quotientAndRemainder(dividingBy: b)\n    if mod == 0 {\n\
    \        return b\n    } else {\n        return greatest_common_divisor(a: b,\
    \ b: mod)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(greatest_common_divisor(a:\
    \ 3, b: 7) == 1)\nassert(greatest_common_divisor(a: 10, b: 15) == 5)\nassert(greatest_common_divisor(a:\
    \ 49, b: 14) == 7)\nassert(greatest_common_divisor(a: 144, b: 60) == 12)"
  status: Exception
  stderr: 'tmpz800qaav/tmpz800qaav.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b89c5a37c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b89c572eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b89c572e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b89c572d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz800qaav                        0x0000557fdcef127a <unavailable> + 4730

    5    libc.so.6                          0x00002b89c5c23460 __libc_start_main +
    245

    6    tmpz800qaav                        0x0000557fdcef0f29 <unavailable> + 3881

    '
  stdout: ''
  timestamp: 1659979565
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   if a == 0 {\n        return b\n    }\n    if b == 0 {\n        return a\n\
    \    }\n    if a == b {\n        return a\n    }\n    if a > b {\n        return\
    \ greatest_common_divisor(a: a - b, b: b)\n    }\n    if a < b {\n        return\
    \ greatest_common_divisor(a: a, b: b - a)\n    }\n    return 0\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(greatest_common_divisor(a: 3, b: 7) == 1)\nassert(greatest_common_divisor(a:\
    \ 10, b: 15) == 5)\nassert(greatest_common_divisor(a: 49, b: 14) == 7)\nassert(greatest_common_divisor(a:\
    \ 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979564
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   if a == 0 || b == 0 {\n        return a + b\n    } else {\n        return\
    \ greatest_common_divisor(a: b, b: a % b)\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(greatest_common_divisor(a: 3, b: 7) == 1)\nassert(greatest_common_divisor(a:\
    \ 10, b: 15) == 5)\nassert(greatest_common_divisor(a: 49, b: 14) == 7)\nassert(greatest_common_divisor(a:\
    \ 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979565
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   var a = a\n    var b = b\n    if a < b {\n        (a, b) = (b, a)\n    }\n\
    \    while b != 0 {\n        let r = a % b\n        a = b\n        b = r\n   \
    \ }\n    return a\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(greatest_common_divisor(a:\
    \ 3, b: 7) == 1)\nassert(greatest_common_divisor(a: 10, b: 15) == 5)\nassert(greatest_common_divisor(a:\
    \ 49, b: 14) == 7)\nassert(greatest_common_divisor(a: 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979565
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   if a == 0 {\n        return b\n    }\n    if b == 0 {\n        return a\n\
    \    }\n    return greatest_common_divisor(a: b, b: a % b)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(greatest_common_divisor(a: 3, b: 7) == 1)\nassert(greatest_common_divisor(a:\
    \ 10, b: 15) == 5)\nassert(greatest_common_divisor(a: 49, b: 14) == 7)\nassert(greatest_common_divisor(a:\
    \ 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979565
