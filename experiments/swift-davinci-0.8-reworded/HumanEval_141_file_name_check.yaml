name: HumanEval_141_file_name_check
language: swift
prompt: "\n/// Create a function which takes a string representing a file's name,\
  \ and returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
  /// A file's name is considered to be valid if and only if all the following conditions\
  \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
  \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// - The\
  \ substring before the dot should not be empty, and it starts with a letter from\
  \ \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after the\
  \ dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// >>> file_name_check(file_name:\
  \ \"example.txt\")\n/// \"Yes\"\n/// >>> file_name_check(file_name: \"1example.dll\"\
  )\n/// \"No\"\nfunc file_name_check(file_name: String) -> String {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(file_name_check(file_name: \"example.txt\"\
  ) == \"Yes\")\nassert(file_name_check(file_name: \"1example.dll\") == \"No\")\n\
  assert(file_name_check(file_name: \"s1sdf3.asd\") == \"No\")\nassert(file_name_check(file_name:\
  \ \"K.dll\") == \"Yes\")\nassert(file_name_check(file_name: \"MY16FILE3.exe\") ==\
  \ \"Yes\")\nassert(file_name_check(file_name: \"His12FILE94.exe\") == \"No\")\n\
  assert(file_name_check(file_name: \"_Y.txt\") == \"No\")\nassert(file_name_check(file_name:\
  \ \"?aREYA.exe\") == \"No\")\nassert(file_name_check(file_name: \"/this_is_valid.dll\"\
  ) == \"No\")\nassert(file_name_check(file_name: \"this_is_valid.wow\") == \"No\"\
  )\nassert(file_name_check(file_name: \"this_is_valid.txt\") == \"Yes\")\nassert(file_name_check(file_name:\
  \ \"this_is_valid.txtexe\") == \"No\")\nassert(file_name_check(file_name: \"#this2_i4s_5valid.ten\"\
  ) == \"No\")\nassert(file_name_check(file_name: \"@this1_is6_valid.exe\") == \"\
  No\")\nassert(file_name_check(file_name: \"this_is_12valid.6exe4.txt\") == \"No\"\
  )\nassert(file_name_check(file_name: \"all.exe.txt\") == \"No\")\nassert(file_name_check(file_name:\
  \ \"I563_No.exe\") == \"Yes\")\nassert(file_name_check(file_name: \"Is3youfault.txt\"\
  ) == \"Yes\")\nassert(file_name_check(file_name: \"no_one#knows.dll\") == \"Yes\"\
  )\nassert(file_name_check(file_name: \"1I563_Yes3.exe\") == \"No\")\nassert(file_name_check(file_name:\
  \ \"I563_Yes3.txtt\") == \"No\")\nassert(file_name_check(file_name: \"final..txt\"\
  ) == \"No\")\nassert(file_name_check(file_name: \"final132\") == \"No\")\nassert(file_name_check(file_name:\
  \ \"_f4indsartal132.\") == \"No\")\nassert(file_name_check(file_name: \".txt\")\
  \ == \"No\")\nassert(file_name_check(file_name: \"s.\") == \"No\")"
completions: ['    return ""', "  var digits_in_name = 0\n  var dot_in_name = false\n\
    \  var acceptable_extension = false\n  var valid_name = true\n  var name_characters_array\
    \ = Array(file_name)\n  var extension_start_index = 0\n  for i in 0...name_characters_array.count\
    \ - 1 {\n    if name_characters_array[i] == \".\" {\n      if dot_in_name {\n\
    \        valid_name = false\n        break\n      }\n      dot_in_name = true\n\
    \      extension_start_index = i + 1\n    } else if !is_valid_character(character:\
    \ name_characters_array[i]) {\n      valid_name = false\n      break\n    } else\
    \ if dot_in_name && extension_start_index == i {\n      if name_characters_array[i]\
    \ == \"t\" {\n        acceptable_extension = true\n      } else if name_characters_array[i]\
    \ == \"e\" {\n        acceptable_extension = true\n      } else if name_characters_array[i]\
    \ == \"d\" {\n        acceptable_extension = true\n      } else {\n        valid_name\
    \ = false\n        break\n      }\n    } else if is_digit(character: name_characters_array[i])\
    \ {\n      digits_in_name += 1\n    }\n  }\n  if valid_name {\n    valid_name\
    \ = acceptable_extension && digits_in_name <= 3\n  }\n  return valid_name ? \"\
    Yes\" : \"No\"", "    var cnt = 0\n    var dot_exist = false\n    for c in file_name\
    \ {\n        if c.isNumber {\n            cnt += 1\n        }\n        if c ==\
    \ \".\" {\n            dot_exist = true\n        }\n    }\n    if cnt > 3 || !dot_exist\
    \ {\n        return \"No\"\n    }\n    let split_arr = file_name.split(separator:\
    \ \".\")\n    if split_arr.count != 2 {\n        return \"No\"\n    }\n    if\
    \ split_arr[0].isEmpty || !split_arr[0].first!.isLetter {\n        return \"No\"\
    \n    }\n    if split_arr[1] != \"txt\" && split_arr[1] != \"exe\" && split_arr[1]\
    \ != \"dll\" {\n        return \"No\"\n    }\n    return \"Yes\"", "    if file_name.count\
    \ < 5 {\n        return \"No\"\n    }\n    let file_name_array = file_name.components(separatedBy:\
    \ \".\")\n    if file_name_array.count != 2 {\n        return \"No\"\n    }\n\
    \    let file_name_before_dot = file_name_array[0]\n    let file_name_after_dot\
    \ = file_name_array[1]\n    if !file_name_before_dot.isEmpty && !file_name_after_dot.isEmpty\
    \ {\n        if file_name_before_dot.count <= 3 && Int(file_name_before_dot) ==\
    \ nil {\n            if file_name_after_dot == \"txt\" || file_name_after_dot\
    \ == \"exe\" || file_name_after_dot == \"dll\" {\n                return \"Yes\"\
    \n            }\n        }\n    }\n    return \"No\"", "    let fileNameRegex\
    \ = try! NSRegularExpression(pattern: \"^[a-zA-Z]{1}[a-zA-Z0-9]{0,2}[.](txt|exe|dll)$\"\
    , options: .caseInsensitive)\n    if fileNameRegex.matches(in: file_name, options:\
    \ [], range: NSRange(location: 0, length: file_name.count)).count == 1 {\n   \
    \     return \"Yes\"\n    }\n    return \"No\"", "\tlet a = file_name.components(separatedBy:\
    \ \".\")\n\tlet b = a[0].components(separatedBy: CharacterSet.decimalDigits.inverted)\n\
    \tlet c = b.filter{$0 != \"\"}\n\tlet d = a[1]\n\tif c.count > 3 || a.count !=\
    \ 2 || a[0].isEmpty || !(a[0].first!.isLetter) || !(d == \"txt\" || d == \"exe\"\
    \ || d == \"dll\") {\n\t\treturn \"No\"\n\t}\n\treturn \"Yes\"", "    let count\
    \ = file_name.filter { \"0123456789\".contains($0) }.count\n    if count > 3 {\n\
    \        return \"No\"\n    }\n    let components = file_name.components(separatedBy:\
    \ \".\")\n    if components.count != 2 {\n        return \"No\"\n    }\n    if\
    \ !components[0].isEmpty && \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    .contains(components[0].first!) && [\"txt\", \"exe\", \"dll\"].contains(components[1])\
    \ {\n        return \"Yes\"\n    }\n    return \"No\"", "    /// implement it!\n\
    \    return \"\"", "    var file_name = file_name\n    // convert the file_name\
    \ to lowercase\n    file_name = file_name.lowercased()\n    // convert the file_name\
    \ to an array of characters\n    let file_name_chars = Array(file_name)\n    //\
    \ check the number of digits (0-9) in the file_name\n    var number_of_digits\
    \ = 0\n    for char in file_name_chars {\n        if char >= \"0\" && char <=\
    \ \"9\" {\n            number_of_digits += 1\n        }\n    }\n    if number_of_digits\
    \ > 3 {\n        return \"No\"\n    }\n    // check the number of dots in the\
    \ file_name\n    var number_of_dots = 0\n    for char in file_name_chars {\n \
    \       if char == \".\" {\n            number_of_dots += 1\n        }\n    }\n\
    \    if number_of_dots != 1 {\n        return \"No\"\n    }\n    // check the\
    \ substrings before and after the dot\n    let file_name_parts = file_name.split(separator:\
    \ \".\")\n    if file_name_parts.count != 2 {\n        return \"No\"\n    }\n\
    \    let before_the_dot = file_name_parts[0]\n    let after_the_dot = file_name_parts[1]\n\
    \    if before_the_dot.count == 0 {\n        return \"No\"\n    }\n    let before_the_dot_first_char\
    \ = before_the_dot[before_the_dot.startIndex]\n    if before_the_dot_first_char\
    \ < \"a\" || before_the_dot_first_char > \"z\" {\n        return \"No\"\n    }\n\
    \    if after_the_dot != \"txt\" && after_the_dot != \"exe\" && after_the_dot\
    \ != \"dll\" {\n        return \"No\"\n    }\n    return \"Yes\"", "    let allowed_extensions\
    \ = [\"txt\", \"exe\", \"dll\"]\n    let file_name_components = file_name.components(separatedBy:\
    \ \".\")\n    let number_of_dots = file_name.components(separatedBy: \".\").count\n\
    \    let first_substring = file_name_components[0]\n    let second_substring =\
    \ file_name_components[1]\n    let digits_in_first_substring = file_name_components[0].components(separatedBy:\
    \ CharacterSet.decimalDigits).joined()\n    let number_of_digits_in_first_substring\
    \ = digits_in_first_substring.count\n    var first_substring_is_valid = false\n\
    \    var second_substring_is_valid = false\n    var file_name_is_valid = false\n\
    \    \n    // First substring is valid if and only if it starts with a letter,\
    \ and has no digits.\n    if first_substring.first!.isLetter && number_of_digits_in_first_substring\
    \ == 0 {\n        first_substring_is_valid = true\n    }\n    \n    // Second\
    \ substring is valid if and only if it is one of the allowed extensions.\n   \
    \ if allowed_extensions.contains(second_substring) {\n        second_substring_is_valid\
    \ = true\n    }\n    \n    // File name is valid if and only if it contains one\
    \ dot, the first substring is valid,\n    // and the second substring is valid.\n\
    \    if number_of_dots == 2 && first_substring_is_valid && second_substring_is_valid\
    \ {\n        file_name_is_valid = true\n    }\n    \n    if file_name_is_valid\
    \ {\n        return \"Yes\"\n    } else {\n        return \"No\"\n    }", '    return
    file_name', "    let digits_count = file_name.filter { (ch) -> Bool in\n     \
    \   ch >= \"0\" && ch <= \"9\"\n    }.count\n    if digits_count > 3 {\n     \
    \   return \"No\"\n    }\n    let file_name_split = file_name.split(separator:\
    \ \".\", maxSplits: 1)\n    if file_name_split.count != 2 {\n        return \"\
    No\"\n    }\n    if file_name_split[0].count == 0 {\n        return \"No\"\n \
    \   }\n    let first_char = file_name_split[0][file_name_split[0].startIndex]\n\
    \    if first_char < \"a\" || first_char > \"z\" {\n        if first_char < \"\
    A\" || first_char > \"Z\" {\n            return \"No\"\n        }\n    }\n   \
    \ let extension_splits = file_name_split[1].split(separator: \".\", maxSplits:\
    \ 1)\n    if extension_splits.count != 1 {\n        return \"No\"\n    }\n   \
    \ let extension_str = String(extension_splits[0])\n    if !(extension_str == \"\
    txt\" || extension_str == \"exe\" || extension_str == \"dll\") {\n        return\
    \ \"No\"\n    }\n    return \"Yes\"", "    var validName = false\n    var i =\
    \ 0\n    var numOfDots = 0\n    var numOfNumbers = 0\n    while !validName &&\
    \ i < file_name.count {\n        if file_name[file_name.index(file_name.startIndex,\
    \ offsetBy: i)] == \".\" {\n            numOfDots += 1\n        } else if file_name[file_name.index(file_name.startIndex,\
    \ offsetBy: i)] == \"0\" || file_name[file_name.index(file_name.startIndex, offsetBy:\
    \ i)] == \"1\" || file_name[file_name.index(file_name.startIndex, offsetBy: i)]\
    \ == \"2\" || file_name[file_name.index(file_name.startIndex, offsetBy: i)] ==\
    \ \"3\" || file_name[file_name.index(file_name.startIndex, offsetBy: i)] == \"\
    4\" || file_name[file_name.index(file_name.startIndex, offsetBy: i)] == \"5\"\
    \ || file_name[file_name.index(file_name.startIndex, offsetBy: i)] == \"6\" ||\
    \ file_name[file_name.index(file_name.startIndex, offsetBy: i)] == \"7\" || file_name[file_name.index(file_name.startIndex,\
    \ offsetBy: i)] == \"8\" || file_name[file_name.index(file_name.startIndex, offsetBy:\
    \ i)] == \"9\" {\n            numOfNumbers += 1\n        }\n        if numOfDots\
    \ > 1 || numOfNumbers > 3 {\n            break\n        }\n        i += 1\n  \
    \  }\n    if numOfDots == 1 && numOfNumbers <= 3 {\n        let nameExtension\
    \ = file_name.split(separator: \".\")\n        if !nameExtension[0].isEmpty &&\
    \ (nameExtension[0][nameExtension[0].startIndex] == \"a\" || nameExtension[0][nameExtension[0].startIndex]\
    \ == \"b\" || nameExtension[0][nameExtension[0].startIndex] == \"c\" || nameExtension[0][name",
  '    return ""', "    // TODO: Implement function here.\n    return \"\"", "   \
    \ let allowed_extensions = [\"txt\", \"exe\", \"dll\"]\n    let file_name_components\
    \ = file_name.components(separatedBy: \".\")\n    if file_name_components.count\
    \ == 2 {\n        let name = file_name_components[0]\n        let ext = file_name_components[1]\n\
    \        if name.count > 0 && allowed_extensions.contains(ext) {\n           \
    \ let char = name[name.startIndex]\n            if char.isLetter {\n         \
    \       let digits = CharacterSet.decimalDigits\n                if name.count\
    \ - name.filter { !digits.contains($0.unicodeScalars.first!) }.count <= 3 {\n\
    \                    return \"Yes\"\n                }\n            }\n      \
    \  }\n    }\n    return \"No\"", "    let parts = file_name.split(separator: \"\
    .\")\n    if parts.count != 2 {\n        return \"No\"\n    }\n    let substring_before_dot\
    \ = parts[0]\n    let substring_after_dot = parts[1]\n    if substring_before_dot.count\
    \ == 0 {\n        return \"No\"\n    }\n    let first_char = substring_before_dot[substring_before_dot.startIndex]\n\
    \    if !((\"a\"...\"z\").contains(first_char) || (\"A\"...\"Z\").contains(first_char))\
    \ {\n        return \"No\"\n    }\n    if [\"txt\", \"exe\", \"dll\"].contains(substring_after_dot)\
    \ {\n        return \"Yes\"\n    }\n    return \"No\"", "    let result = file_name.characters.filter({Int(String($0))\
    \ != nil})\n    if result.count > 3 {\n        return \"No\"\n    }\n    if file_name.characters.filter({$0\
    \ == \".\"}).count != 1 {\n        return \"No\"\n    }\n    let components =\
    \ file_name.components(separatedBy: \".\")\n    if !is_string_latin(str: components[0])\
    \ {\n        return \"No\"\n    }\n    let components2 = components[1].components(separatedBy:\
    \ \".\")\n    if components2.count > 1 {\n        return \"No\"\n    }\n    let\
    \ extension_types = [\"txt\", \"exe\", \"dll\"]\n    if !extension_types.contains(components2[0])\
    \ {\n        return \"No\"\n    }\n    return \"Yes\"", "    // TODO: Complete\
    \ me!\n    return \"\"", "    let file_name_check = /^\\w+\\.(txt|exe|dll)$/\n\
    \    return file_name_check.matches(file_name) ? \"Yes\" : \"No\"", '    return
    "Yes"', "    let components = file_name.components(separatedBy: \".\")\n    if\
    \ components.count != 2 {\n        return \"No\"\n    }\n    if components[0].isEmpty\
    \ || !components[0].starts(with: \"[a-zA-Z]\") {\n        return \"No\"\n    }\n\
    \    if components[1] != \"txt\" && components[1] != \"exe\" && components[1]\
    \ != \"dll\" {\n        return \"No\"\n    }\n    if components[0].filter( { $0.isNumber\
    \ } ).count > 3 {\n        return \"No\"\n    }\n    return \"Yes\"", "    var\
    \ s = file_name\n    let allowed_extensions = [\"txt\", \"exe\", \"dll\"]\n  \
    \  let digits = Array(\"0123456789\")\n    var counter = 0\n    for c in s {\n\
    \        if digits.contains(c) {\n            counter += 1\n        }\n    }\n\
    \    if counter > 3 {\n        return \"No\"\n    }\n    s = s.replacingOccurrences(of:\
    \ \".\", with: \" \")\n    let parts = s.split(separator: \" \")\n    if allowed_extensions.contains(parts[1])\
    \ {\n        return \"Yes\"\n    }\n    return \"No\"", "    // Write your code\
    \ here.\n    return \"\"", "    var result = \"Yes\"\n    let chunks = file_name.components(separatedBy:\
    \ \".\")\n    if chunks.count != 2 {\n        result = \"No\"\n    } else {\n\
    \        let after_dot = chunks[1]\n        if !(after_dot == \"txt\" || after_dot\
    \ == \"exe\" || after_dot == \"dll\") {\n            result = \"No\"\n       \
    \ } else {\n            let before_dot = chunks[0]\n            if before_dot.count\
    \ == 0 {\n                result = \"No\"\n            } else {\n            \
    \    let first_char = before_dot[before_dot.startIndex]\n                if !(first_char\
    \ >= \"a\" && first_char <= \"z\" || first_char >= \"A\" && first_char <= \"Z\"\
    ) {\n                    result = \"No\"\n                } else {\n         \
    \           let digits = CharacterSet.decimalDigits\n                    let digit_count\
    \ = before_dot.components(separatedBy: digits).count - 1\n                   \
    \ if digit_count > 3 {\n                        result = \"No\"\n            \
    \        }\n                }\n            }\n        }\n    }\n    return result",
  "    var str = file_name\n    // Implement your solution here\n    return \"\"",
  "    let condition1 = file_name.filter { $0 >= \"0\" && $0 <= \"9\" }.count > 3\n\
    \    let condition2 = file_name.filter { $0 == \".\" }.count != 1\n    let condition3\
    \ = file_name.split(separator: \".\").first?.count == 0 || !file_name.first!.isLetter\n\
    \    let condition4 = ![\"txt\", \"exe\", \"dll\"].contains(file_name.split(separator:\
    \ \".\").last!)\n    if condition1 || condition2 || condition3 || condition4 {\n\
    \        return \"No\"\n    }\n    return \"Yes\"", "    if file_name.contains(\"\
    .\") == false || file_name.filter({$0 >= \"0\" && $0 <= \"9\"}).count > 3 || file_name.components(separatedBy:\
    \ \".\").first?.first == nil || !(file_name.components(separatedBy: \".\").first?.first!\
    \ >= \"a\" && file_name.components(separatedBy: \".\").first?.first! <= \"z\"\
    \ || file_name.components(separatedBy: \".\").first?.first! >= \"A\" && file_name.components(separatedBy:\
    \ \".\").first?.first! <= \"Z\") || !(file_name.components(separatedBy: \".\"\
    ).last == \"txt\" || file_name.components(separatedBy: \".\").last == \"exe\"\
    \ || file_name.components(separatedBy: \".\").last == \"dll\") {\n        return\
    \ \"No\"\n    }\n    return \"Yes\"", "    let regEx = #\"^[a-zA-Z][\\w]{0,256}\\\
    .(txt|exe|dll)$\"#\n    return file_name.matches(regEx) ? \"Yes\" : \"No\"", " \
    \   var num_of_digits = 0\n    var dot_position = 0\n    var first_letter_position\
    \ = 0\n    var last_letter_position = 0\n    var is_digit = true\n    var file_ext\
    \ = String()\n    var is_letter = false\n    var num_of_dots = 0\n    for char\
    \ in file_name {\n        if char.isNumber {\n            num_of_digits += 1\n\
    \        }\n        if char == \".\" {\n            dot_position = file_name.distance(from:\
    \ file_name.startIndex, to: file_name.index(of: char)!)\n            num_of_dots\
    \ += 1\n        }\n        if char.isLetter {\n            if is_letter == false\
    \ {\n                first_letter_position = file_name.distance(from: file_name.startIndex,\
    \ to: file_name.index(of: char)!)\n                is_letter = true\n        \
    \    }\n            last_letter_position = file_name.distance(from: file_name.startIndex,\
    \ to: file_name.index(of: char)!)\n        }\n    }\n    if num_of_digits > 3\
    \ || num_of_dots != 1 || first_letter_position > dot_position || dot_position\
    \ > last_letter_position {\n        return \"No\"\n    }\n    file_ext = file_name.suffix(3)\n\
    \    if file_ext != \"txt\" && file_ext != \"exe\" && file_ext != \"dll\" {\n\
    \        return \"No\"\n    }\n    return \"Yes\"", '    return ""', '    return
    "No"', '    return ""', '    return "Yes"', "    // TODO: implement this\n   \
    \ return \"\"", "    let comp = file_name.components(separatedBy: \".\")\n   \
    \ let count = comp[0].characters.count\n    if comp.count == 2 && comp[0].isAlphanumeric()\
    \ && comp[1] == \"txt\" || comp[1] == \"exe\" || comp[1] == \"dll\" && (count\
    \ < 10) && (count > 3) {\n        return \"Yes\"\n    }\n    return \"No\"", " \
    \   // write your solution here\n    var count : Int = 0\n    var cnt : Int =\
    \ 0\n    var i = 0\n    var j = 0\n    let s = file_name.components(separatedBy:\
    \ \".\")\n    if s.count != 2{\n        return \"No\"\n    }\n    else{\n    \
    \    if ((s[0].first)?.isLetter == true){\n            j = 1\n        }\n    \
    \    if s[1] == \"txt\" || s[1] == \"exe\" || s[1] == \"dll\"{\n            i\
    \ = 1\n        }\n        for ch in s[0]{\n            if ch >= \"0\" && ch <=\
    \ \"9\"{\n                count += 1\n            }\n        }\n        for ch\
    \ in s[1]{\n            if ch >= \"0\" && ch <= \"9\"{\n                cnt +=\
    \ 1\n            }\n        }\n        if count <= 3 && i == 1 && j == 1 && cnt\
    \ == 0{\n            return \"Yes\"\n        }\n        else{\n            return\
    \ \"No\"\n        }\n    }", "    guard let index = file_name.firstIndex(of: \"\
    .\") else {\n        return \"No\"\n    }\n    let before = file_name[..<index]\n\
    \    let after = file_name[index...]\n    let after_sub = String(after.dropFirst())\n\
    \    let digits = before.filter { $0.isNumber }\n    let alphabet = before.filter\
    \ { $0.isLetter }\n    guard digits.count <= 3, alphabet.count > 0, [\"txt\",\
    \ \"exe\", \"dll\"].contains(after_sub) else {\n        return \"No\"\n    }\n\
    \    return \"Yes\"", "    if file_name.count - file_name.replacingOccurrences(of:\
    \ \".\", with: \"\").count != 1 {\n        return \"No\"\n    }\n    if file_name.count\
    \ - file_name.replacingOccurrences(of: \"0\", with: \"\").count > 3 {\n      \
    \  return \"No\"\n    }\n    let separated = file_name.components(separatedBy:\
    \ \".\")\n    if separated.count != 2 {\n        return \"No\"\n    }\n    if\
    \ separated[0].count == 0 {\n        return \"No\"\n    }\n    if separated[0].count\
    \ - separated[0].replacingOccurrences(of: \"a\", with: \"\").count == 0 {\n  \
    \      return \"No\"\n    }\n    if separated[0].count - separated[0].replacingOccurrences(of:\
    \ \"b\", with: \"\").count == 0 {\n        return \"No\"\n    }\n    if separated[0].count\
    \ - separated[0].replacingOccurrences(of: \"c\", with: \"\").count == 0 {\n  \
    \      return \"No\"\n    }\n    if separated[0].count - separated[0].replacingOccurrences(of:\
    \ \"d\", with: \"\").count == 0 {\n        return \"No\"\n    }\n    if separated[0].count\
    \ - separated[0].replacingOccurrences(of: \"e\", with: \"\").count == 0 {\n  \
    \      return \"No\"\n    }\n    if separated[0].count - separated[0].replacingOccurrences(of:\
    \ \"f\", with: \"\").count == 0 {\n        return \"No\"\n    }\n    if separated[0].count\
    \ - separated[0].replacingOccurrences(of: \"g\", with: \"\").count == 0 {\n  \
    \      return \"No\"\n    }\n    if separated[0].count - separated[0].replacingOccurrences(of:\
    \ \"h\", with: \"\").count == 0 {\n        return \"No\"\n    }\n    if separated[0].count\
    \ - separated[0].replacingOccurrences(of: \"i\", with: \"\").count == 0 {\n  \
    \      return \"No\"\n    }\n    if separated[0", "    let reg_ex = \"^[a-zA-Z]{1}[\\\
    \\w\\\\s]*\\\\.[txt|exe|dll]$\"\n    let check = NSPredicate(format: \"SELF MATCHES\
    \ %@\", reg_ex)\n    return check.evaluate(with: file_name) ? \"Yes\" : \"No\"",
  '    return ""', "    guard file_name.components(separatedBy: \".\").count == 2\
    \ else { return \"No\" }\n    let file_name_parts = file_name.components(separatedBy:\
    \ \".\")\n    guard file_name_parts[0].count > 0 else { return \"No\" }\n    guard\
    \ file_name_parts[1] == \"txt\" || file_name_parts[1] == \"exe\" || file_name_parts[1]\
    \ == \"dll\" else { return \"No\" }\n    guard file_name_parts[0].rangeOfCharacter(from:\
    \ CharacterSet.decimalDigits) == nil else { return \"No\" }\n    return \"Yes\"",
  "  var valid = true\n  var count = 0\n  var has_dot = false\n  var dot_index = -1\n\
    \  var has_extension = false\n  var extension = \"\"\n  var has_prefix = false\n\
    \  var prefix = \"\"\n  for (i, c) in file_name.enumerated() {\n    if c == \"\
    .\" {\n      if has_dot {\n        valid = false\n        break\n      }\n   \
    \   has_dot = true\n      dot_index = i\n    } else if c == \"0\" || c == \"1\"\
    \ || c == \"2\" || c == \"3\" || c == \"4\" || c == \"5\" ||\n      c == \"6\"\
    \ || c == \"7\" || c == \"8\" || c == \"9\" {\n      count += 1\n      if count\
    \ > 3 {\n        valid = false\n        break\n      }\n    } else if c == \"\
    a\" || c == \"b\" || c == \"c\" || c == \"d\" || c == \"e\" || c == \"f\" ||\n\
    \      c == \"g\" || c == \"h\" || c == \"i\" || c == \"j\" || c == \"k\" || c\
    \ == \"l\" || c == \"m\" ||\n      c == \"n\" || c == \"o\" || c == \"p\" || c\
    \ == \"q\" || c == \"r\" || c == \"s\" || c == \"t\" ||\n      c == \"u\" || c\
    \ == \"v\" || c == \"w\" || c == \"x\" || c == \"y\" || c == \"z\" || c == \"\
    A\" ||\n      c == \"B\" || c == \"C\" || c == \"D\" || c == \"E\" || c == \"\
    F\" || c == \"G\" || c == \"H\" ||\n      c == \"I\" || c == \"J\" || c == \"\
    K\" || c == \"L\" || c == \"M\" || c == \"N\" || c == \"O\" ||\n      c == \"\
    P\" || c == \"Q\" || c == \"R\" || c == \"S\" || c == \"T\" || c == \"U\" || c\
    \ == \"V\" ||\n", "    let pattern = \"^[a-zA-Z]+\\\\d{0,3}\\\\.(txt|exe|dll)$\"\
    \n    return regex_match(str: file_name, pattern: pattern) ? \"Yes\" : \"No\"",
  "    // Write your code here.\n    var digits = 0\n    var digits_found = false\n\
    \    var dot_found = false\n    var letter_found = false\n    var letters = 0\n\
    \    var extension = \"\"\n    for char in file_name {\n        if let _ = Int(String(char))\
    \ {\n            digits += 1\n            digits_found = true\n        } else\
    \ if char == \".\" {\n            dot_found = true\n        } else if let _ =\
    \ UnicodeScalar(String(char)) {\n            letters += 1\n            letter_found\
    \ = true\n        }\n    }\n    extension = String(file_name.suffix(3))\n    if\
    \ digits_found && digits <= 3 && dot_found && letter_found && letters > 0 && extension\
    \ == \"txt\" || extension == \"exe\" || extension == \"dll\" {\n        return\
    \ \"Yes\"\n    } else {\n        return \"No\"\n    }", "    /// check empty string\n\
    \    if file_name.isEmpty {\n        return \"No\"\n    }\n    var digit_count\
    \ = 0, extension_count = 0\n    /// check file's name\n    var i = 0\n    while\
    \ i < file_name.count {\n        let char = file_name[file_name.index(file_name.startIndex,\
    \ offsetBy: i)]\n        /// count digits\n        if char >= \"0\" && char <=\
    \ \"9\" {\n            digit_count += 1\n        }\n        /// check extension\n\
    \        if char == \".\" {\n            extension_count += 1\n            if\
    \ i == file_name.count - 1 {\n                return \"No\"\n            }\n \
    \           let next_char = file_name[file_name.index(file_name.startIndex, offsetBy:\
    \ i + 1)]\n            if next_char == \"t\" {\n                if i + 3 >= file_name.count\
    \ {\n                    return \"No\"\n                }\n                let\
    \ next_char = file_name[file_name.index(file_name.startIndex, offsetBy: i + 2)]\n\
    \                if next_char == \"x\" {\n                    let next_char =\
    \ file_name[file_name.index(file_name.startIndex, offsetBy: i + 3)]\n        \
    \            if next_char == \"t\" {\n                        return \"Yes\"\n\
    \                    }\n                }\n            } else if next_char ==\
    \ \"e\" {\n                if i + 3 >= file_name.count {\n                   \
    \ return \"No\"\n                }\n                let next_char = file_name[file_name.index(file_name.startIndex,\
    \ offsetBy: i + 2)]\n                if next_char == \"x\" {\n               \
    \     let next_char = file_name[file_name.index(file_name.startIndex, offsetBy:\
    \ i + 3)]\n                    if next_char == \"e\" {\n                     \
    \   return \"Yes\"\n                    }\n                }\n            } else\
    \ if next_char == \"d\" {\n                if i + 3 >= file_name.count {\n   \
    \                 return \"No\"\n                }\n                let next_char\
    \ = file_name[file_name.index(file_name.startIndex,", '    return "TODO"', '  return
    ""', "    // Create a regex to check if the file's name contains more than three\
    \ digits ('0'-'9')\n    let number_regex = try! NSRegularExpression(pattern: \"\
    .*[0-9]{4,}.*\")\n    // Create a regex to check if the file's name contains exactly\
    \ one dot '.'\n    let dot_regex = try! NSRegularExpression(pattern: \".*[^.]\\\
    \\..*\")\n    // Create a regex to check if the substring before the dot is not\
    \ empty, and it starts \n    // with a letter from the latin alphapet ('a'-'Z'\
    \ and 'A'-'Z')\n    let before_dot_regex = try! NSRegularExpression(pattern: \"\
    .*[^a-zA-Z].*\")\n    // Create a regex to check if the substring after the dot\
    \ is in ['txt', 'exe', 'dll']\n    let after_dot_regex = try! NSRegularExpression(pattern:\
    \ \".*\\\\.(?!txt|exe|dll).*\")\n    // Check if the file's name is valid\n  \
    \  if (number_regex.matches(in: file_name, range: NSRange(file_name.startIndex...,\
    \ in: file_name)).count > 0) ||\n        (dot_regex.matches(in: file_name, range:\
    \ NSRange(file_name.startIndex..., in: file_name)).count != 1) ||\n        (before_dot_regex.matches(in:\
    \ file_name, range: NSRange(file_name.startIndex..., in: file_name)).count > 0)\
    \ ||\n        (after_dot_regex.matches(in: file_name, range: NSRange(file_name.startIndex...,\
    \ in: file_name)).count > 0) {\n        return \"No\"\n    }\n    return \"Yes\"",
  "    let latin_alphabet = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    \n    let allowed_extensions = [\"txt\", \"exe\", \"dll\"]\n    var digit_count\
    \ = 0\n    var dot_count = 0\n    var allowed_extension_found = false\n    let\
    \ char_array = Array(file_name)\n    for i in 0..<char_array.count {\n       \
    \ if let digit = Int(String(char_array[i])) {\n            digit_count += 1\n\
    \        }\n        if char_array[i] == \".\" {\n            dot_count += 1\n\
    \        }\n        if char_array[i] == \".\" && i != char_array.count - 1 {\n\
    \            let extension_start_index = i + 1\n            let extension_end_index\
    \ = char_array.count\n            let extension = String(char_array[extension_start_index..<extension_end_index])\n\
    \            for allowed_extension in allowed_extensions {\n                if\
    \ extension == allowed_extension {\n                    allowed_extension_found\
    \ = true\n                }\n            }\n        }\n    }\n    var contains_latin_alphabet\
    \ = false\n    if let first_char = char_array.first {\n        if latin_alphabet.contains(first_char)\
    \ {\n            contains_latin_alphabet = true\n        }\n    }\n    if digit_count\
    \ <= 3 && dot_count == 1 && allowed_extension_found && contains_latin_alphabet\
    \ {\n        return \"Yes\"\n    }\n    return \"No\"", "    // write your code\
    \ here\n    var count = 0\n    for ch in file_name {\n        if ch >= \"0\" &&\
    \ ch <= \"9\" {\n            count += 1\n        }\n    }\n    if count > 3 {\n\
    \        return \"No\"\n    }\n\n    let items = file_name.split(separator: \"\
    .\")\n    if items.count != 2 {\n        return \"No\"\n    }\n\n    if items[0].count\
    \ == 0 {\n        return \"No\"\n    }\n\n    let start = items[0].startIndex\n\
    \    let end = items[0].index(start, offsetBy: 1)\n    let range = start..<end\n\
    \    let first_char = items[0][range]\n    if !(first_char >= \"a\" && first_char\
    \ <= \"z\" || first_char >= \"A\" && first_char <= \"Z\") {\n        return \"\
    No\"\n    }\n\n    if items[1] != \"txt\" && items[1] != \"exe\" && items[1] !=\
    \ \"dll\" {\n        return \"No\"\n    }\n\n    return \"Yes\"", "    let pattern\
    \ = #\"^[a-zA-Z][\\w]{1,25}([.](txt|exe|dll))$\"#\n    guard let regex = try?\
    \ NSRegularExpression(pattern: pattern, options: []) else { return \"No\" }\n\
    \    let range = NSRange(location: 0, length: file_name.utf16.count)\n    return\
    \ regex.firstMatch(in: file_name, options: [], range: range) != nil ? \"Yes\"\
    \ : \"No\"", "    let numberOfDigits = 10\n    let dot = \".\"\n    let extensions\
    \ = [\"txt\", \"exe\", \"dll\"]\n    let minLength = 1\n    let maxLength = 3\n\
    \    var isValid = false\n    var numberOfDigitsFound = 0\n    var numberOfDotsFound\
    \ = 0\n    var numberOfExtensionFound = 0\n    let arrayFromString = Array(file_name)\n\
    \    for char in arrayFromString {\n        if numberOfDigitsFound > maxLength\
    \ {\n            break\n        }\n        if char == dot {\n            numberOfDotsFound\
    \ += 1\n        }\n        if numberOfDotsFound > 1 {\n            break\n   \
    \     }\n        if char >= \"0\" && char <= \"9\" {\n            numberOfDigitsFound\
    \ += 1\n        }\n        let stringBeforeDot = String(arrayFromString[0..<arrayFromString.firstIndex(of:\
    \ dot)!])\n        let stringAfterDot = String(arrayFromString[arrayFromString.firstIndex(of:\
    \ dot)!..<arrayFromString.count])\n        if stringBeforeDot.count < minLength\
    \ {\n            break\n        }\n        if stringBeforeDot.count > maxLength\
    \ {\n            break\n        }\n        if stringBeforeDot.first == dot {\n\
    \            break\n        }\n        for ext in extensions {\n            if\
    \ ext == stringAfterDot {\n                numberOfExtensionFound += 1\n     \
    \       }\n        }\n        if numberOfExtensionFound > 0 {\n            isValid\
    \ = true\n        }\n    }\n    if isValid {\n        return \"Yes\"\n    } else\
    \ {\n        return \"No\"\n    }", "    if file_name.rangeOfCharacter(from: CharacterSet.decimalDigits.inverted)\
    \ == nil {\n        return \"No\"\n    }\n    let dotIndex = file_name.index(of:\
    \ \".\")\n    if dotIndex == nil {\n        return \"No\"\n    }\n    if dotIndex!\
    \ == file_name.startIndex {\n        return \"No\"\n    }\n    if !CharacterSet.letters.contains(file_name[file_name.startIndex])\
    \ {\n        return \"No\"\n    }\n    let afterDot = file_name[file_name.index(after:\
    \ dotIndex!)..<file_name.endIndex]\n    if afterDot != \"txt\" && afterDot !=\
    \ \"exe\" && afterDot != \"dll\" {\n        return \"No\"\n    }\n    return \"\
    Yes\"", "    /// We do not accept filenames that are empty or consist of whitespace\
    \ only.\n    if file_name.trimmingCharacters(in: .whitespacesAndNewlines).isEmpty\
    \ {\n        return \"No\"\n    }\n    let numRegex = try! NSRegularExpression(pattern:\
    \ #\"[0-9]\"#, options: [])\n    /// Files cannot have more than three digits\
    \ ('0'-'9') in them.\n    if numRegex.numberOfMatches(in: file_name, options:\
    \ [], range: NSRange(file_name.startIndex..<file_name.endIndex, in: file_name))\
    \ > 3 {\n        return \"No\"\n    }\n    let dotRegex = try! NSRegularExpression(pattern:\
    \ #\"\\.\"#, options: [])\n    /// Files must have exactly one dot.\n    if dotRegex.numberOfMatches(in:\
    \ file_name, options: [], range: NSRange(file_name.startIndex..<file_name.endIndex,\
    \ in: file_name)) != 1 {\n        return \"No\"\n    }\n    let latinRegex = try!\
    \ NSRegularExpression(pattern: #\"[a-zA-Z]\"#, options: [])\n    /// The substring\
    \ before the dot should start with a letter from the latin alphabet ('a'-'z' and\
    \ 'A'-'Z').\n    if latinRegex.numberOfMatches(in: file_name, options: [], range:\
    \ NSRange(file_name.startIndex..<file_name.firstIndex(of: \".\")!, in: file_name))\
    \ == 0 {\n        return \"No\"\n    }\n    /// The substring after the dot should\
    \ be one of these: ['txt', 'exe', 'dll']\n    if !(file_name.suffix(3) == \"txt\"\
    \ || file_name.suffix(3) == \"exe\" || file_name.suffix(3) == \"dll\") {\n   \
    \     return \"No\"\n    }\n    return \"Yes\"", "    let file_name_arr = file_name.components(separatedBy:\
    \ \".\")\n    let file_name_first = file_name_arr[0]\n    let file_name_last =\
    \ file_name_arr[1]\n    let file_name_first_arr = Array(file_name_first)\n   \
    \ var num_count = 0\n    for char in file_name_first_arr {\n        if Int(String(char))\
    \ != nil {\n            num_count += 1\n        }\n    }\n    if num_count > 3\
    \ {\n        return \"No\"\n    }\n    if Int(String(file_name_first_arr[0]))\
    \ != nil {\n        return \"No\"\n    }\n    if file_name_last != \"txt\" &&\
    \ file_name_last != \"exe\" && file_name_last != \"dll\" {\n        return \"\
    No\"\n    }\n    return \"Yes\"", "    // Your code starts here\n    // Your code\
    \ ends here", "    if file_name.isEmpty {\n        return \"No\"\n    }\n    var\
    \ extension_name: String?\n    let parts = file_name.split(separator: \".\")\n\
    \    if parts.count != 2 {\n        return \"No\"\n    }\n    if parts[0].rangeOfCharacter(from:\
    \ CharacterSet.decimalDigits) != nil {\n        return \"No\"\n    }\n    if parts[0].count\
    \ > 3 {\n        return \"No\"\n    }\n    switch parts[1] {\n    case \"txt\"\
    :\n        extension_name = \"txt\"\n    case \"exe\":\n        extension_name\
    \ = \"exe\"\n    case \"dll\":\n        extension_name = \"dll\"\n    default:\n\
    \        extension_name = nil\n    }\n    if extension_name == nil {\n       \
    \ return \"No\"\n    }\n    return \"Yes\"", "  if (!file_name.contains(\".\"\
    )) {\n    return \"No\"\n  }\n  var dotIndex = file_name.firstIndex(of: \".\"\
    )\n  if (dotIndex == file_name.startIndex) {\n    return \"No\"\n  }\n  if (dotIndex\
    \ == file_name.index(before: file_name.endIndex)) {\n    return \"No\"\n  }\n\
    \  if (CharacterSet.letters.contains(file_name[file_name.startIndex])) {\n   \
    \ let extension = file_name[file_name.index(after: dotIndex)...]\n    if (extension\
    \ == \"txt\" || extension == \"exe\" || extension == \"dll\") {\n      let filename\
    \ = file_name[..<dotIndex]\n      if (filename.filter({ !CharacterSet.decimalDigits.contains($0.unicodeScalars.first!)\
    \ }).count > 1) {\n        return \"No\"\n      }\n      let decimalCount = filename.filter({\
    \ CharacterSet.decimalDigits.contains($0.unicodeScalars.first!) }).count\n   \
    \   if (decimalCount > 3) {\n        return \"No\"\n      }\n      return \"Yes\"\
    \n    }\n  }\n  return \"No\"", "\tlet charSet = CharacterSet(charactersIn: \"\
    abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789.\")\n\tlet fileNameCharSet\
    \ = CharacterSet(charactersIn: file_name)\n\tlet fileNameCharSetArray = Array(file_name)\n\
    \t\n\tif fileNameCharSet.isSubset(of: charSet) {\n\t\tif file_name.range(of: \"\
    .\") == nil {\n\t\t\treturn \"No\"\n\t\t}\n\t\tlet fileNameArray = file_name.components(separatedBy:\
    \ \".\")\n\t\t\n\t\tif fileNameArray.count != 2 {\n\t\t\treturn \"No\"\n\t\t}\n\
    \t\tlet fileNameSubstrArray = fileNameArray[0].components(separatedBy: CharacterSet.decimalDigits)\n\
    \t\tif fileNameSubstrArray.count > 1 || (fileNameArray[0].isEmpty) {\n\t\t\treturn\
    \ \"No\"\n\t\t}\n\t\tlet firstCharacter = fileNameCharSetArray[0]\n\t\tif !(firstCharacter\
    \ >= \"a\" && firstCharacter <= \"z\" || firstCharacter >= \"A\" && firstCharacter\
    \ <= \"Z\") {\n\t\t\treturn \"No\"\n\t\t}\n\t\tlet extensionArray = fileNameArray[1].components(separatedBy:\
    \ CharacterSet.decimalDigits)\n\t\tif extensionArray.count > 1 {\n\t\t\treturn\
    \ \"No\"\n\t\t}\n\t\tif fileNameArray[1] != \"txt\" && fileNameArray[1] != \"\
    exe\" && fileNameArray[1] != \"dll\" {\n\t\t\treturn \"No\"\n\t\t}\n\t\treturn\
    \ \"Yes\"\n\t}\n\treturn \"No\"", "    // NOTE: write your code here...\n    return\
    \ \"\"", "    let file_name_regex = #\"^[a-zA-Z]\\w*\\.(txt|exe|dll)$\"#\n   \
    \ return file_name.range(of: file_name_regex, options: .regularExpression) !=\
    \ nil ? \"Yes\" : \"No\"", "    let numberCount = file_name.filter{Int(String($0))\
    \ != nil}.count\n    if numberCount > 3 { return \"No\" }\n    let name = file_name.components(separatedBy:\
    \ \".\")\n    if name.count != 2 { return \"No\" }\n    if name[0].filter{Int(String($0))\
    \ == nil}.count == 0 { return \"No\" }\n    if !(name[1] == \"txt\" || name[1]\
    \ == \"exe\" || name[1] == \"dll\") { return \"No\" }\n    return \"Yes\"", " \
    \   // do not write beyond this line\n    return \"Yes\"", "    let pattern =\
    \ \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\\.(txt|exe|dll)$\"\n    let match = file_name.range(of:\
    \ pattern, options: .regularExpression)\n    return match != nil ? \"Yes\" : \"\
    No\"", "    // Put your solution here!\n    return \"\"", '    return ""', '    return
    "Yes"', "  if let dot_index = file_name.firstIndex(of: \".\") {\n    let prefix\
    \ = file_name[file_name.startIndex..<dot_index]\n    let suffix = file_name[file_name.index(after:\
    \ dot_index)..<file_name.endIndex]\n    let suffix_type: [Substring] = [\"txt\"\
    , \"exe\", \"dll\"]\n    if prefix.isEmpty || !prefix.first!.isLetter {\n    \
    \  return \"No\"\n    }\n    if !suffix_type.contains(suffix) {\n      return\
    \ \"No\"\n    }\n    if file_name.filter({$0.isNumber}).count > 3 {\n      return\
    \ \"No\"\n    }\n    return \"Yes\"\n  }\n  return \"No\"", "    let valid_substrings\
    \ = [\"txt\", \"exe\", \"dll\"]\n    if file_name.count > 100 {\n        return\
    \ \"No\"\n    }\n    var substring_after_dot = \"\"\n    var substring_before_dot\
    \ = \"\"\n    var dot_count = 0\n    var digit_count = 0\n    for character in\
    \ file_name {\n        if character == \".\" {\n            dot_count += 1\n \
    \       } else if character.isLetter {\n            if let upper_bound = file_name.firstIndex(of:\
    \ \".\") {\n                substring_before_dot = String(file_name[..<upper_bound])\n\
    \            }\n        } else if character.isNumber {\n            digit_count\
    \ += 1\n        }\n    }\n    if dot_count != 1 {\n        return \"No\"\n   \
    \ }\n    if let lower_bound = file_name.firstIndex(of: \".\") {\n        substring_after_dot\
    \ = String(file_name[file_name.index(after: lower_bound)...])\n    }\n    if digit_count\
    \ > 3 {\n        return \"No\"\n    }\n    if substring_before_dot.isEmpty {\n\
    \        return \"No\"\n    }\n    if valid_substrings.contains(substring_after_dot)\
    \ {\n        return \"Yes\"\n    }\n    return \"No\"", "    let valid_extensions\
    \ = [\"txt\", \"exe\", \"dll\"]\n    let parts = file_name.split(separator: \"\
    .\")\n    if parts.count != 2 {\n        return \"No\"\n    }\n    if !valid_extensions.contains(String(parts[1]))\
    \ {\n        return \"No\"\n    }\n    let first_part = String(parts[0])\n   \
    \ let first_letter = Character(first_part.first!)\n    if !first_letter.isAlpha()\
    \ {\n        return \"No\"\n    }\n    let non_digits = first_part.filter({ !$0.isNumber()\
    \ })\n    if non_digits.count > 3 {\n        return \"No\"\n    }\n    return\
    \ \"Yes\"", "\t// Enter your code here\n\tlet str = file_name.split(separator:\
    \ \".\")\n\tlet only_numbers = str[0].filter({$0 < \"0\" || $0 > \"9\"})\n\tvar\
    \ digits = 0\n\tfor i in str[0] {\n\t\tif i >= \"0\" && i <= \"9\" {\n\t\t\tdigits\
    \ += 1\n\t\t}\n\t}\n\tif only_numbers.count == 0 || digits > 3 || str.count !=\
    \ 2 || (str[1] != \"txt\" && str[1] != \"exe\" && str[1] != \"dll\") {\n\t\treturn\
    \ \"No\"\n\t}\n\telse {\n\t\treturn \"Yes\"\n\t}", "    let fileNameArr = file_name.split(separator:\
    \ \".\")\n    if fileNameArr.count != 2 {\n        return \"No\"\n    }\n    var\
    \ numCount = 0\n    for char in fileNameArr[0] {\n        if char >= \"0\" &&\
    \ char <= \"9\" {\n            numCount += 1\n        }\n    }\n    if numCount\
    \ > 3 {\n        return \"No\"\n    }\n    let suffix = fileNameArr[1]\n    if\
    \ !(suffix == \"txt\" || suffix == \"exe\" || suffix == \"dll\") {\n        return\
    \ \"No\"\n    }\n    return \"Yes\"", "    let file_name_without_extension = file_name.split(separator:\
    \ \".\")[0]\n    if file_name_without_extension.count < 1 || file_name_without_extension.count\
    \ > 10 {\n        return \"No\"\n    }\n    var digit_count = 0\n    for character\
    \ in file_name_without_extension {\n        if character >= \"0\" && character\
    \ <= \"9\" {\n            digit_count += 1\n        }\n    }\n    if digit_count\
    \ > 3 {\n        return \"No\"\n    }\n    var extension_index = file_name.index(of:\
    \ \".\")!\n    extension_index = file_name.index(after: extension_index)\n   \
    \ let extension_name = file_name[extension_index...]\n    if extension_name !=\
    \ \"txt\" && extension_name != \"exe\" && extension_name != \"dll\" {\n      \
    \  return \"No\"\n    }\n    return \"Yes\"", '  return "Yes"', '    return ""',
  "    let txt = \"txt\"\n    let exe = \"exe\"\n    let dll = \"dll\"\n    var is_valid\
    \ = false\n    var number_counter = 0\n    var dot_counter = 0\n    var first_part\
    \ = \"\"\n    var second_part = \"\"\n    for i in file_name {\n        if i >=\
    \ \"0\" && i <= \"9\" {\n            number_counter += 1\n        }\n        if\
    \ i == \".\" {\n            dot_counter += 1\n        }\n    }\n    let parts\
    \ = file_name.split(separator: \".\")\n    first_part = String(parts[0])\n   \
    \ second_part = String(parts[1])\n    if first_part.count >= 1 && number_counter\
    \ <= 3 && dot_counter == 1 && \n    (second_part == txt || second_part == exe\
    \ || second_part == dll) {\n        is_valid = true\n    }\n    if is_valid {\n\
    \        return \"Yes\"\n    } else {\n        return \"No\"\n    }", "    var\
    \ digits_number = 0\n    for c in file_name {\n        if \"0\"...\"9\" ~= c {\n\
    \            digits_number += 1\n        }\n    }\n    if digits_number > 3 {\n\
    \        return \"No\"\n    }\n    let substrings = file_name.split(separator:\
    \ \".\")\n    if substrings.count != 2 {\n        return \"No\"\n    }\n    if\
    \ substrings[0].count == 0 || \"a\"...\"z\" ~= substrings[0][substrings[0].startIndex]\
    \ || \"A\"...\"Z\" ~= substrings[0][substrings[0].startIndex] {\n        return\
    \ \"No\"\n    }\n    if substrings[1] != \"txt\" && substrings[1] != \"exe\" &&\
    \ substrings[1] != \"dll\" {\n        return \"No\"\n    }\n    return \"Yes\"",
  "    let file_name_arr = file_name.components(separatedBy: \".\")\n    let number_of_digits\
    \ = file_name.filter{$0 >= \"0\" && $0 <= \"9\"}.count\n    let first_char = file_name_arr[0].first\n\
    \    let file_extension = file_name_arr[1]\n    if number_of_digits > 3 {\n  \
    \      return \"No\"\n    }\n    if first_char != nil {\n        let is_alpha\
    \ = (first_char! >= \"a\" && first_char! <= \"z\") || (first_char! >= \"A\" &&\
    \ first_char! <= \"Z\")\n        if is_alpha == false {\n            return \"\
    No\"\n        }\n    }\n    if file_extension != \"txt\" && file_extension !=\
    \ \"exe\" && file_extension != \"dll\" {\n        return \"No\"\n    }\n    return\
    \ \"Yes\"", "    let validExtensions = [\"txt\", \"exe\", \"dll\"]\n    let validChars\
    \ = Array(\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\")\n    let digits\
    \ = Array(\"0123456789\")\n    let invalidChars = [\"-\", \"_\", \"!\", \"&\"\
    , \"@\", \"$\", \"%\", \"#\", \"^\", \"*\", \"(\", \")\", \"[\", \"]\", \"{\"\
    , \"}\", \"|\", \"\\\\\", \"/\", \"?\", \".\", \",\", \";\", \":\", \">\", \"\
    <\", \"=\", \"+\", \"~\", \"`\", \" \"]\n    let dotIndex = file_name.index(of:\
    \ \".\")!\n    let name = file_name[file_name.startIndex..<dotIndex]\n    let\
    \ ext = file_name[file_name.index(after: dotIndex)..<file_name.endIndex]\n   \
    \ if !validExtensions.contains(String(ext)) {\n        return \"No\"\n    }\n\
    \    if invalidChars.contains(where: {name.contains($0)}) {\n        return \"\
    No\"\n    }\n    if validChars.contains(name[name.startIndex]) {\n        var\
    \ counter = 0\n        for c in name {\n            if digits.contains(c) {\n\
    \                counter += 1\n            }\n        }\n        if counter >\
    \ 3 {\n            return \"No\"\n        }\n        return \"Yes\"\n    }\n \
    \   return \"No\"", "    let split = file_name.split(separator: \".\")\n    if\
    \ split.count != 2 {\n        return \"No\"\n    }\n    let suffix = split[1]\n\
    \    let prefix = split[0]\n    if !(prefix.count > 0 && prefix.count <= 10) {\n\
    \        return \"No\"\n    }\n    let prefix_chars = Array(prefix)\n    if !((prefix_chars[0]\
    \ >= \"a\" && prefix_chars[0] <= \"z\") || (prefix_chars[0] >= \"A\" && prefix_chars[0]\
    \ <= \"Z\")) {\n        return \"No\"\n    }\n    var count = 0\n    for char\
    \ in prefix_chars {\n        if char >= \"0\" && char <= \"9\" {\n           \
    \ count += 1\n        }\n    }\n    if count > 3 {\n        return \"No\"\n  \
    \  }\n    if !(suffix == \"txt\" || suffix == \"exe\" || suffix == \"dll\") {\n\
    \        return \"No\"\n    }\n    return \"Yes\"", '    return "Yes"', '    return
    "Not Implemented"', "    let numbers = [\"0\", \"1\", \"2\", \"3\", \"4\", \"\
    5\", \"6\", \"7\", \"8\", \"9\"]\n    let valid_extentions = [\"txt\", \"exe\"\
    , \"dll\"]\n    var number_of_digits = 0\n    var has_dot = false\n    var letter_found\
    \ = false\n    var string_before_dot = \"\"\n    var string_after_dot = \"\"\n\
    \    var counter = 0\n    for i in file_name {\n        if (numbers.contains(String(i)))\
    \ {\n            number_of_digits += 1\n        }\n        if (i == \".\") {\n\
    \            has_dot = true\n        }\n        if (!letter_found && (i != \"\
    .\")) {\n            string_before_dot.append(i)\n        }\n        if (has_dot\
    \ && !letter_found) {\n            letter_found = true\n        }\n        if\
    \ (letter_found && (i != \".\")) {\n            string_after_dot.append(i)\n \
    \       }\n        counter += 1\n    }\n    if (number_of_digits > 3) {\n    \
    \    return \"No\"\n    }\n    if (!has_dot) {\n        return \"No\"\n    }\n\
    \    if (string_before_dot.isEmpty) {\n        return \"No\"\n    }\n    if (!valid_extentions.contains(string_after_dot))\
    \ {\n        return \"No\"\n    }\n    return \"Yes\"", "    // Write your code\
    \ here\n    return \"\"", "    let file_name_regex = Regex(\"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\
    \\.(txt|exe|dll)$\")\n    if file_name_regex.match(file_name) {\n        return\
    \ \"Yes\"\n    }\n    return \"No\"", '    return "Yes"', "    if(file_name.rangeOfCharacter(from:\
    \ CharacterSet.decimalDigits) != nil) {\n        return \"No\"\n    }\n    else\
    \ if(file_name.count - 1 > 3) {\n        return \"No\"\n    }\n    else if(file_name.count\
    \ - 1 < 3) {\n        return \"No\"\n    }\n    else if(file_name.count - 1 ==\
    \ 3) {\n        let dotCount = file_name.components(separatedBy: \".\").count\
    \ - 1\n        if dotCount == 1 {\n            let substrings = file_name.components(separatedBy:\
    \ \".\")\n            let substring0 = substrings[0]\n            let substring1\
    \ = substrings[1]\n            let isDotInTheEnd = (file_name.last == \".\")\n\
    \            let isDotInTheStart = (file_name.first == \".\")\n            let\
    \ isEmptyString = (substring0.isEmpty)\n            let isSubstring0Valid = is_alphabet_string(alphabet_string:\
    \ substring0)\n            let isSubstring1Valid = is_alphabet_string(alphabet_string:\
    \ substring1)\n            let isSubstring1Txt = (substring1 == \"txt\")\n   \
    \         let isSubstring1Exe = (substring1 == \"exe\")\n            let isSubstring1Dll\
    \ = (substring1 == \"dll\")\n            if(isDotInTheEnd || isDotInTheStart ||\
    \ isEmptyString || !isSubstring0Valid || !isSubstring1Valid || !isSubstring1Txt\
    \ || !isSubstring1Exe || !isSubstring1Dll) {\n                return \"No\"\n\
    \            }\n            else {\n                return \"Yes\"\n         \
    \   }\n        }\n        else {\n            return \"No\"\n        }\n    }\n\
    \    else {\n        return \"No\"\n    }", '    // YOUR CODE GOES HERE', "\t\
    let file_name_regex = \"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.(txt|exe|dll)$\"\n\tif file_name.range(of:\
    \ file_name_regex, options: .regularExpression) != nil {\n\t\treturn \"Yes\"\n\
    \t}\n\treturn \"No\"", "    let regex = \"^[a-zA-Z]{1}[a-zA-Z0-9]{0,3}(.[txt|exe|dll])$\"\
    \n    if file_name.matches(regex) {\n        return \"Yes\"\n    }\n    return\
    \ \"No\"", "    // your code here\n    return \"\"", "    var digits_count = 0\n\
    \    var dot_idx = 0\n    var invalid_chars = [Character]()\n    var after_dot_valid\
    \ = false\n    var dot_found = false\n    let valid_endings = [\"txt\", \"exe\"\
    , \"dll\"]\n    let alphabet = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    \n    let digits = \"0123456789\"\n    for (idx, char) in file_name.enumerated()\
    \ {\n        if dot_found {\n            if dot_idx == idx {\n               \
    \ continue\n            }\n            for ending in valid_endings {\n       \
    \         if file_name[file_name.index(file_name.startIndex, offsetBy: dot_idx+1)..<file_name.endIndex]\
    \ == ending {\n                    after_dot_valid = true\n                }\n\
    \            }\n        }\n        if alphabet.contains(char) {\n            break\n\
    \        }\n        if idx == 0 {\n            invalid_chars.append(char)\n  \
    \      }\n        if digits.contains(char) {\n            digits_count += 1\n\
    \        }\n        if char == \".\" {\n            dot_found = true\n       \
    \     dot_idx = idx\n        }\n    }\n    return (digits_count > 3 || invalid_chars.count\
    \ > 0 || !after_dot_valid) ? \"No\" : \"Yes\"", '    return ""', "    let file_name_regex\
    \ = \"^[a-zA-Z]+[\\\\w]{0,3}\\\\.(txt|exe|dll)$\"\n    if file_name.range(of:\
    \ file_name_regex, options: .regularExpression) != nil {\n        return \"Yes\"\
    \n    }\n    return \"No\"", "    // Write your solution here\n    return \"\"",
  "    // Write your code here.\n    return \"\"", "    // TODO: Write some code to\
    \ solve this coding challenge\n    return \"\"", "    let pattern = \"^[a-zA-Z]+[0-9]{0,3}\\\
    \\.(txt|exe|dll)$\"\n    let test = NSPredicate(format: \"SELF MATCHES %@\", pattern)\n\
    \    if test.evaluate(with: file_name) {\n        return \"Yes\"\n    }\n    return\
    \ \"No\"", '    return ""', "    let nameAndExtension = file_name.split(separator:\
    \ \".\")\n    let name = nameAndExtension[0]\n    let extension = nameAndExtension[1]\n\
    \    var digitCount = 0\n    var isValid = true\n    for ch in name {\n      \
    \  if !ch.isLetter && ch != \"_\" {\n            isValid = false\n           \
    \ break\n        }\n        if ch.isNumber {\n            digitCount += 1\n  \
    \      }\n    }\n    if digitCount > 3 {\n        isValid = false\n    }\n   \
    \ if extension != \"txt\" && extension != \"exe\" && extension != \"dll\" {\n\
    \        isValid = false\n    }\n    if isValid {\n        return \"Yes\"\n  \
    \  }\n    return \"No\"", '    return "Yes"', "\tlet file_name_list = file_name.split(separator:\
    \ \".\")\n\tif file_name_list.count != 2 {\n\t\treturn \"No\"\n\t}\n\tlet file_name_word\
    \ = file_name_list[0]\n\tif !file_name_word.first!.isLetter {\n\t\treturn \"No\"\
    \n\t}\n\tlet file_format = file_name_list[1]\n\tif ![\"txt\", \"exe\", \"dll\"\
    ].contains(file_format) {\n\t\treturn \"No\"\n\t}\n\tlet num_digit = file_name_word.filter{$0.isNumber}\n\
    \tif num_digit.count > 3 {\n\t\treturn \"No\"\n\t}\n\treturn \"Yes\"", "    //\
    \ TODO: Implement file_name_check\n    var count = 0\n    var index: String.Index?\n\
    \    var count1 = 0\n    var str = \"Yes\"\n    for char in file_name {\n    \
    \    if char >= \"0\" && char <= \"9\" {\n            count += 1\n        }\n\
    \        if char == \".\" {\n            index = file_name.index(after: file_name.startIndex)\n\
    \            index = file_name.index(before: file_name.endIndex)\n           \
    \ count1 += 1\n        }\n        else if char == \".\" && count1 == 0 {\n   \
    \         index = file_name.index(after: file_name.startIndex)\n            index\
    \ = file_name.index(before: file_name.endIndex)\n            count1 += 1\n   \
    \     }\n        else if char == \".\" && count1 == 1 {\n            count1 +=\
    \ 1\n        }\n        else if char == \".\" && count1 > 1 {\n            str\
    \ = \"No\"\n        }\n    }\n    if count > 3 || count1 > 1 || file_name.count\
    \ < 5 || index == nil || count1 == 0 {\n        str = \"No\"\n    }\n    return\
    \ str", "\treturn \"\"", "    var count = 0\n    var hasDot = false\n    var preDot\
    \ = \"\"\n    var postDot = \"\"\n    for c in file_name {\n        if c == \"\
    .\" {\n            hasDot = true\n        } else if hasDot {\n            postDot.append(c)\n\
    \        } else if isdigit(c) {\n            count += 1\n        } else {\n  \
    \          preDot.append(c)\n        }\n    }\n    if count <= 3 && hasDot &&\
    \ !preDot.isEmpty && (postDot == \"txt\" || postDot == \"exe\" || postDot == \"\
    dll\") {\n        return \"Yes\"\n    }\n    return \"No\"", "    // write your\
    \ code here.\n    return \"\"", '    return ""', "    // TODO: Write your solution\
    \ here\n    return \"\"", '    return ""', "    let pattern = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\
    \\.(txt|exe|dll)$\"\n    return file_name.range(of: pattern, options: .regularExpression)\
    \ != nil ? \"Yes\" : \"No\"", "    var number_of_digits = 0\n    var dot_location\
    \ = 0\n    var number_of_dots = 0\n    var file_name_is_valid = true\n    var\
    \ file_type_is_valid = false\n    let file_types: [String] = [\"txt\", \"exe\"\
    , \"dll\"]\n    for index in 0...file_name.count-1 {\n        let char = file_name[file_name.index(file_name.startIndex,\
    \ offsetBy: index)]\n        if char.isNumber {\n            number_of_digits\
    \ += 1\n        }\n        if char == \".\" {\n            dot_location = index\n\
    \            number_of_dots += 1\n        }\n    }\n    if number_of_digits >\
    \ 3 || number_of_dots != 1 {\n        file_name_is_valid = false\n    }\n    else\
    \ {\n        let substring_before_dot = file_name[..<file_name.index(file_name.startIndex,\
    \ offsetBy: dot_location)]\n        let substring_after_dot = file_name[file_name.index(file_name.startIndex,\
    \ offsetBy: dot_location+1)...]\n        if substring_before_dot.isEmpty || !(substring_before_dot[substring_before_dot.startIndex].isLetter)\
    \ {\n            file_name_is_valid = false\n        }\n        for file_type\
    \ in file_types {\n            if String(substring_after_dot) == file_type {\n\
    \                file_type_is_valid = true\n            }\n        }\n    }\n\
    \    if file_name_is_valid && file_type_is_valid {\n        return \"Yes\"\n \
    \   }\n    else {\n        return \"No\"\n    }", "    if file_name.count < 4\
    \ {\n        return \"No\"\n    }\n    // Check that there are three digits or\
    \ less.\n    if file_name.filter({ Int(\"0\"...\"9\").contains($0) }).count >\
    \ 3 {\n        return \"No\"\n    }\n    // Check that there is only one dot.\n\
    \    if file_name.filter({ $0 == \".\" }).count != 1 {\n        return \"No\"\n\
    \    }\n    // Split into the two halves.\n    let halves = file_name.split(separator:\
    \ \".\")\n    // Check that the first half starts with a letter.\n    if !(Int(\"\
    a\"...\"z\") + Int(\"A\"...\"Z\")).contains(Int(halves[0].first!)) {\n       \
    \ return \"No\"\n    }\n    // Check that the second half is one of the three\
    \ allowed strings.\n    if ![\"txt\", \"exe\", \"dll\"].contains(String(halves[1]))\
    \ {\n        return \"No\"\n    }\n    return \"Yes\"", "    var res = \"Yes\"\
    \n    if file_name.count <= 5 {\n        res = \"No\"\n    } else {\n        var\
    \ file_name_array = file_name.map { String($0) }\n        var dot_index = 0\n\
    \        var count_digit = 0\n        var substring_after_dot = \"\"\n       \
    \ var substring_before_dot = \"\"\n        var is_valid_before_dot = false\n \
    \       var is_valid_after_dot = false\n        for (index, char) in file_name_array.enumerated()\
    \ {\n            if char == \".\" {\n                dot_index = index\n     \
    \       }\n            if char.isNumber {\n                count_digit += 1\n\
    \            }\n        }\n        substring_after_dot = String(file_name_array[dot_index\
    \ + 1...])\n        substring_before_dot = String(file_name_array[...dot_index\
    \ - 1])\n        if count_digit <= 3 && file_name_array.filter { $0 == \".\" }.count\
    \ == 1 && !substring_before_dot.isEmpty && substring_before_dot.first!.isLetter\
    \ {\n            is_valid_before_dot = true\n        }\n        if substring_after_dot\
    \ == \"txt\" || substring_after_dot == \"exe\" || substring_after_dot == \"dll\"\
    \ {\n            is_valid_after_dot = true\n        }\n        if !is_valid_before_dot\
    \ || !is_valid_after_dot {\n            res = \"No\"\n        }\n    }\n    return\
    \ res", "    let regex_first_part = \"^([a-zA-Z]+)([a-zA-Z0-9]+)\"\n    let regex_second_part\
    \ = \"((txt)|(exe)|(dll))$\"\n    let regex_full = regex_first_part + \"\\\\.\"\
    \ + regex_second_part\n    if file_name.matches(regex: regex_full) {\n       \
    \ return \"Yes\"\n    }\n    return \"No\"", "    // Your code here\n    return\
    \ \"\"", "\tfunc is_valid_file_name(_ name: String) -> Bool {\n\t\tvar alphapet_counter\
    \ = 0\n\t\tvar dot_counter = 0\n\t\tvar numbers_counter = 0\n\t\tvar file_name_splited:\
    \ [String] = []\n\t\t\n\t\tif name.isEmpty {\n\t\t\treturn false\n\t\t}\n\t\t\
    for c in name {\n\t\t\tif c == \".\" {\n\t\t\t\tdot_counter += 1\n\t\t\t} else\
    \ if c >= \"0\" && c <= \"9\" {\n\t\t\t\tnumbers_counter += 1\n\t\t\t} else if\
    \ c >= \"a\" && c <= \"z\" || c >= \"A\" && c <= \"Z\" {\n\t\t\t\talphapet_counter\
    \ += 1\n\t\t\t}\n\t\t}\n\t\tif numbers_counter > 3 || dot_counter != 1 || alphapet_counter\
    \ == 0 {\n\t\t\treturn false\n\t\t}\n\t\tfile_name_splited = name.split(separator:\
    \ \".\")\n\t\tif file_name_splited[1] != \"txt\" && file_name_splited[1] != \"\
    exe\" && file_name_splited[1] != \"dll\" {\n\t\t\treturn false\n\t\t}\n\t\treturn\
    \ true\n\t}\n\treturn is_valid_file_name(file_name) ? \"Yes\" : \"No\"", "   \
    \ // Check 1: There should not be more than three digits ('0'-'9') in the file's\
    \ name.\n    let digits = Set(\"0123456789\")\n    var number_of_digits = 0\n\
    \    for ch in file_name {\n        if digits.contains(ch) {\n            number_of_digits\
    \ += 1\n        }\n    }\n    if number_of_digits > 3 {\n        return \"No\"\
    \n    }\n    \n    // Check 2: The file's name contains exactly one dot '.'\n\
    \    let dot_index = file_name.firstIndex(of: \".\")!\n    if dot_index == file_name.startIndex\
    \ || dot_index == file_name.endIndex {\n        return \"No\"\n    }\n    \n \
    \   // Check 3: The substring before the dot should not be empty, and it starts\
    \ with a letter from the latin alphapet ('a'-'z' and 'A'-'Z').\n    let valid_substring_before_dot\
    \ = Set(\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\")\n    let substring_before_dot\
    \ = file_name[..<dot_index]\n    if valid_substring_before_dot.contains(substring_before_dot.first!)\
    \ == false {\n        return \"No\"\n    }\n    \n    // Check 4: The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    let substring_after_dot\
    \ = file_name[dot_index...]\n    if substring_after_dot == \"txt\" || substring_after_dot\
    \ == \"exe\" || substring_after_dot == \"dll\" {\n        return \"Yes\"\n   \
    \ }\n    return \"No\"", "  // Create a regular expression to validate a file's\
    \ name\n  let file_name_regex = try! NSRegularExpression(pattern: \"^[a-zA-Z][a-zA-Z0-9]{0,3}.[a-zA-Z]{3}$\"\
    )\n  // Check if a file's name validates the regular expression\n  let is_match\
    \ = file_name_regex.firstMatch(in: file_name, options: [], range: NSRange(location:\
    \ 0, length: file_name.count)) != nil\n  return is_match ? \"Yes\" : \"No\"",
  '    return ""', "\tif file_name.count < 4 {\n\t\treturn \"No\"\n\t}\n\tvar letters\
    \ = 0\n\tvar digits = 0\n\tvar correct = 0\n\tvar dot = 0\n\tfor c in file_name\
    \ {\n\t\tif c >= \"a\" && c <= \"z\" || c >= \"A\" && c <= \"Z\" {\n\t\t\tletters\
    \ += 1\n\t\t} else if c >= \"0\" && c <= \"9\" {\n\t\t\tdigits += 1\n\t\t} else\
    \ if c == \".\" {\n\t\t\tdot += 1\n\t\t}\n\t}\n\tif letters == 0 || dot != 1 ||\
    \ digits > 3 {\n\t\treturn \"No\"\n\t}\n\tif file_name.hasSuffix(\".txt\") ||\
    \ file_name.hasSuffix(\".exe\") || file_name.hasSuffix(\".dll\") {\n\t\treturn\
    \ \"Yes\"\n\t}\n\treturn \"No\"", "    if file_name.count > 20 {\n        return\
    \ \"No\"\n    }\n    let numbers = (0...9).map {String($0)}\n    var name = \"\
    \"\n    var ext = \"\"\n    var no_of_numbers = 0\n    var dot_flag = false\n\
    \    for c in file_name {\n        if let n = Int(String(c)) {\n            no_of_numbers\
    \ += 1\n            if no_of_numbers > 3 {\n                return \"No\"\n  \
    \          }\n        }\n        if c == \".\" {\n            dot_flag = true\n\
    \            continue\n        }\n        if dot_flag {\n            ext.append(c)\n\
    \        } else {\n            name.append(c)\n        }\n    }\n    if no_of_numbers\
    \ > 3 || ext != \"txt\" && ext != \"exe\" && ext != \"dll\" || name.count == 0\
    \ || !numbers.contains(name.first ?? \"\") {\n        return \"No\"\n    }\n \
    \   return \"Yes\"", "    let parts = file_name.split(separator: \".\")\n    if\
    \ parts.count != 2 {\n        return \"No\"\n    }\n    let (a, b) = (parts[0],\
    \ parts[1])\n    if a.isEmpty || !a.first!.isLetter {\n        return \"No\"\n\
    \    }\n    if a.lazy.filter({ CharacterSet.decimalDigits.contains($0.unicodeScalars.first!)\
    \ }).count > 3 {\n        return \"No\"\n    }\n    let types = [\"txt\", \"exe\"\
    , \"dll\"]\n    if !types.contains(b) {\n        return \"No\"\n    }\n    return\
    \ \"Yes\"", '    return ""', "    var counter = 0\n    let file_name_chars = Array(file_name)\n\
    \    for i in 0..<file_name_chars.count {\n        if is_digit(char: file_name_chars[i])\
    \ {\n            counter += 1\n        }\n    }\n    if (counter > 3) {\n    \
    \    return \"No\"\n    }\n    let file_name_parts = file_name.split(separator:\
    \ \".\")\n    let name = file_name_parts[0]\n    let extension = file_name_parts[1]\n\
    \    if (extension != \"txt\" && extension != \"exe\" && extension != \"dll\"\
    ) {\n        return \"No\"\n    }\n    if (name.isEmpty) {\n        return \"\
    No\"\n    }\n    let name_first_char = name[name.startIndex]\n    if (!is_letter(char:\
    \ name_first_char)) {\n        return \"No\"\n    }\n    return \"Yes\"", "  \
    \  let fileExtensions = [\"txt\", \"exe\", \"dll\"]\n    let nameAndExtension\
    \ = file_name.components(separatedBy: \".\")\n    if nameAndExtension.count !=\
    \ 2 {\n        return \"No\"\n    }\n    if fileExtensions.contains(nameAndExtension[1])\
    \ == false {\n        return \"No\"\n    }\n    var numDigits = 0\n    for character\
    \ in nameAndExtension[0] {\n        if character >= \"0\" && character <= \"9\"\
    \ {\n            numDigits += 1\n        }\n    }\n    if numDigits > 3 {\n  \
    \      return \"No\"\n    }\n    return \"Yes\"", '    return file_name', "  \
    \  var length = 0\n    for char in file_name {\n        if char.isNumber {\n \
    \           length += 1\n        }\n    }\n    if length > 3 {\n        return\
    \ \"No\"\n    }\n    let name = file_name.split(separator: \".\")\n    if name.count\
    \ != 2 {\n        return \"No\"\n    }\n    if name[0].count == 0 || !name[0].contains(where:\
    \ {$0.isLetter}) {\n        return \"No\"\n    }\n    if name[1] != \"txt\" &&\
    \ name[1] != \"exe\" && name[1] != \"dll\" {\n        return \"No\"\n    }\n \
    \   return \"Yes\"", "    var num_of_digits = 0\n    var num_of_dots = 0\n   \
    \ var extention = \"\"\n    for c in file_name {\n        if c >= \"0\" && c <=\
    \ \"9\" {\n            num_of_digits += 1\n        }\n        if c == \".\" {\n\
    \            num_of_dots += 1\n        }\n    }\n    if num_of_digits > 3 || num_of_dots\
    \ != 1 {\n        return \"No\"\n    }\n    let arr = file_name.split(separator:\
    \ \".\")\n    if arr.count != 2 {\n        return \"No\"\n    }\n    if arr[0].isEmpty\
    \ || !((arr[0][arr[0].startIndex] >= \"a\" && arr[0][arr[0].startIndex] <= \"\
    z\") || (arr[0][arr[0].startIndex] >= \"A\" && arr[0][arr[0].startIndex] <= \"\
    Z\")) {\n        return \"No\"\n    }\n    extention = String(arr[1])\n    if\
    \ extention != \"txt\" && extention != \"exe\" && extention != \"dll\" {\n   \
    \     return \"No\"\n    }\n    return \"Yes\"", "    var result = \"Yes\"\n \
    \   let dot_index = file_name.range(of: \".\")\n    let substring_before_dot =\
    \ file_name.substring(to: dot_index!.lowerBound)\n    let substring_after_dot\
    \ = file_name.substring(from: dot_index!.upperBound)\n    if !file_name.is_number_count_no_more_than(max_count:\
    \ 3) {\n        result = \"No\"\n    } else if file_name.count_of(element: \"\
    .\") != 1 {\n        result = \"No\"\n    } else if !substring_before_dot.is_start_with_letter()\
    \ {\n        result = \"No\"\n    } else if !substring_after_dot.is_one_of(elements:\
    \ [\"txt\", \"exe\", \"dll\"]) {\n        result = \"No\"\n    }\n    return result",
  "    let pattern = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\\.(txt|exe|dll)$\"\n    if file_name.isEmpty\
    \ {\n        return \"No\"\n    }\n    return file_name.matches(pattern) ? \"\
    Yes\" : \"No\"", "    if file_name.count < 5 {\n        return \"No\"\n    }\n\
    \    let name = file_name.split(separator: \".\")\n    if name.count != 2 {\n\
    \        return \"No\"\n    }\n    let name1 = name[0]\n    let name2 = name[1]\n\
    \    var count = 0\n    for i in name1 {\n        if !(i >= \"0\" && i <= \"9\"\
    ) {\n            if i >= \"a\" && i <= \"z\" {\n                count += 1\n \
    \           } else if i >= \"A\" && i <= \"Z\" {\n                count += 1\n\
    \            } else {\n                return \"No\"\n            }\n        }\n\
    \    }\n    if count == 0 {\n        return \"No\"\n    }\n    if name2 != \"\
    txt\" && name2 != \"exe\" && name2 != \"dll\" {\n        return \"No\"\n    }\n\
    \    count = 0\n    for i in name1 {\n        if i >= \"0\" && i <= \"9\" {\n\
    \            count += 1\n        }\n    }\n    if count > 3 {\n        return\
    \ \"No\"\n    }\n    return \"Yes\"", '    return ""', "    // return \"Yes\"\n\
    \    let countDot = file_name.split(separator: \".\").count - 1\n    let countDigit\
    \ = file_name.filter { $0 >= \"0\" && $0 <= \"9\" }.count\n    let countAlphabet\
    \ = file_name.filter { $0 >= \"a\" && $0 <= \"z\" || $0 >= \"A\" && $0 <= \"Z\"\
    \ }.count\n    let fileExtension = file_name.split(separator: \".\").last ?? \"\
    \"\n    if countDot == 1 && countDigit <= 3 && countAlphabet > 0 &&\n        [\"\
    txt\", \"exe\", \"dll\"].contains(String(fileExtension)) {\n        return \"\
    Yes\"\n    }\n    return \"No\"", '    return ""', "    let example = \"abc\"\n\
    \    if example == \"abc\" {\n        return \"Yes\"\n    } else {\n        return\
    \ \"No\"\n    }", '    return ""', "    let first_check = !file_name.contains(where:\
    \ { \n        !(Character(\"0\")...\"9\").contains($0) \n    }) || (file_name.filter({\
    \ \n        (Character(\"0\")...\"9\").contains($0) \n    }).count > 3)\n\n  \
    \  let second_check = (file_name.filter({ $0 == \".\" }).count == 1)\n\n    let\
    \ third_check = file_name.prefix(file_name.firstIndex(of: \".\") ?? file_name.endIndex)\n\
    \        .first.map({ Character(\"a\")...\"z\" ~= $0 || Character(\"A\")...\"\
    Z\" ~= $0 })\n        ?? false\n\n    let fourth_check = Set<String>([\"txt\"\
    , \"exe\", \"dll\"]).contains(\n        file_name.suffix(file_name.lastIndex(of:\
    \ \".\") ?? file_name.endIndex).dropFirst()\n    )\n\n    if first_check && second_check\
    \ && third_check && fourth_check {\n        return \"Yes\"\n    }\n    return\
    \ \"No\"", '    return ""', '    return "No"', '    return "No"', '    return
    ""', "    let rule1 = file_name.filter { $0 >= \"0\" && $0 <= \"9\" }.count <=\
    \ 3\n    let rule2 = file_name.filter { $0 == \".\" }.count == 1\n    let rule3\
    \ = file_name.split(separator: \".\").first?.isEmpty == false && file_name.split(separator:\
    \ \".\").first?.first!.isLetter == true\n    let rule4 = [\"txt\", \"exe\", \"\
    dll\"].contains(file_name.split(separator: \".\").last!)\n    return rule1 &&\
    \ rule2 && rule3 && rule4 ? \"Yes\" : \"No\"", "    if file_name.contains(\".\"\
    ) {\n        let fileNameArray = file_name.components(separatedBy: \".\")\n  \
    \      if fileNameArray.count == 2 {\n            let preDotSubstring = fileNameArray[0]\n\
    \            let postDotSubstring = fileNameArray[1]\n            if preDotSubstring.isAlpha\
    \ == true && postDotSubstring.isNumeric == false {\n                if postDotSubstring\
    \ == \"txt\" || postDotSubstring == \"exe\" || postDotSubstring == \"dll\" {\n\
    \                    return \"Yes\"\n                }\n            }\n      \
    \  }\n    }\n    return \"No\"", '    return ""', "    if !file_name.contains(\"\
    .\") {\n        return \"No\"\n    }\n    var valid_name = false\n    var letters_counter\
    \ = 0\n    var digits_counter = 0\n    var extention = \"\"\n    var substring\
    \ = \"\"\n    var file_name_array = Array(file_name)\n    for char in file_name_array\
    \ {\n        if char == \".\" {\n            valid_name = true\n            break\n\
    \        }\n        if char.isLetter {\n            letters_counter += 1\n   \
    \     }\n        if char.isNumber {\n            digits_counter += 1\n       \
    \ }\n    }\n    if digits_counter > 3 {\n        return \"No\"\n    }\n    if\
    \ letters_counter == 0 {\n        return \"No\"\n    }\n    if valid_name {\n\
    \        extention = String(file_name_array.suffix(3))\n        if ![\"txt\",\
    \ \"exe\", \"dll\"].contains(extention) {\n            return \"No\"\n       \
    \ }\n        substring = String(file_name_array.prefix(file_name_array.count -\
    \ 4))\n        for char in substring {\n            if char.isLetter {\n     \
    \           return \"Yes\"\n            }\n        }\n    }\n    return \"No\"",
  "    // create a regex that checks the file name is valid\n    let file_name_regex\
    \ = \"^[a-zA-Z][^0-9]*([0-9]{0,3})\\\\.[txt|exe|dll]$\"\n    // check if file\
    \ name matches the pattern\n    let file_name_result = file_name.range(of: file_name_regex,\
    \ options: .regularExpression)\n    // return the result\n    return file_name_result\
    \ != nil ? \"Yes\" : \"No\"", '    return ""', "    if file_name.count < 4 {\n\
    \        return \"No\"\n    }\n    let numbers = Set(\"0123456789\")\n    let\
    \ letters = Set(\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\")\n  \
    \  var num_count = 0\n    var letters_count = 0\n    var dot_count = 0\n    var\
    \ after_dot = \"\"\n    for char in file_name {\n        if char.isNumber {\n\
    \            num_count += 1\n        }\n        if letters.contains(char) {\n\
    \            letters_count += 1\n        }\n        if char == \".\" {\n     \
    \       dot_count += 1\n        }\n    }\n    if num_count > 3 || dot_count !=\
    \ 1 || letters_count < 1 {\n        return \"No\"\n    }\n    let file_name_split\
    \ = file_name.split(separator: \".\")\n    after_dot = String(file_name_split[1])\n\
    \    if after_dot != \"txt\" && after_dot != \"exe\" && after_dot != \"dll\" {\n\
    \        return \"No\"\n    }\n    return \"Yes\"", "    let array = file_name.split(separator:\
    \ \".\")\n    if array.count != 2 {\n        return \"No\"\n    }\n    if !array[0].isLetter\
    \ || array[0].isEmpty {\n        return \"No\"\n    }\n    if array[1] != \"txt\"\
    \ && array[1] != \"exe\" && array[1] != \"dll\" {\n        return \"No\"\n   \
    \ }\n    let numbers = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\"\
    , \"8\", \"9\"]\n    var num = 0\n    for char in array[0] {\n        if numbers.contains(String(char))\
    \ {\n            num += 1\n        }\n    }\n    if num > 3 {\n        return\
    \ \"No\"\n    }\n    return \"Yes\"", '    return ""', "    let valid_name = [\"\
    txt\", \"exe\", \"dll\"]\n    let name_parts = file_name.split(separator: \".\"\
    )\n    if name_parts.count != 2 {\n        return \"No\"\n    }\n    let ex =\
    \ name_parts[1]\n    if !valid_name.contains(ex) {\n        return \"No\"\n  \
    \  }\n    let name = name_parts[0]\n    let name_chars = Array(name)\n    if name_chars.count\
    \ > 10 {\n        return \"No\"\n    }\n    var count = 0\n    for ch in name_chars\
    \ {\n        if let _ = Int(String(ch)) {\n            count += 1\n        }\n\
    \    }\n    if count > 3 {\n        return \"No\"\n    }\n    if let _ = Int(String(name_chars[0]))\
    \ {\n        return \"No\"\n    }\n    return \"Yes\"", "    // check the length\
    \ of digits\n    let digits = file_name.filter { $0 >= \"0\" && $0 <= \"9\" }\n\
    \    if digits.count > 3 {\n        return \"No\"\n    }\n    // check the number\
    \ of dots\n    let dots = file_name.filter { $0 == \".\" }\n    if dots.count\
    \ != 1 {\n        return \"No\"\n    }\n    // check the substring before dot\
    \ and after dot\n    let splitted_file_name = file_name.split(separator: \".\"\
    )\n    guard splitted_file_name.count == 2 else {\n        return \"No\"\n   \
    \ }\n    let sub_before_dot = splitted_file_name[0]\n    let sub_after_dot = splitted_file_name[1]\n\
    \    guard !sub_before_dot.isEmpty else {\n        return \"No\"\n    }\n    guard\
    \ sub_before_dot.first! >= \"a\" && sub_before_dot.first! <= \"z\" ||\n      \
    \  sub_before_dot.first! >= \"A\" && sub_before_dot.first! <= \"Z\" else {\n \
    \       return \"No\"\n    }\n    guard sub_after_dot == \"txt\" || sub_after_dot\
    \ == \"exe\" || sub_after_dot == \"dll\" else {\n        return \"No\"\n    }\n\
    \    return \"Yes\"", "    var countDot = 0\n    var countDigit = 0\n    let isNumber\
    \ = CharacterSet.decimalDigits\n    let isValid = CharacterSet.init(charactersIn:\
    \ \"a\"...\"z\").union(CharacterSet.init(charactersIn: \"A\"...\"Z\"))\n    for\
    \ c in file_name {\n        if isNumber.contains(c.unicodeScalars.first!) {\n\
    \            countDigit += 1\n        }\n        if !isValid.contains(c.unicodeScalars.first!)\
    \ {\n            countDot += 1\n        }\n    }\n    if countDot == 1 && countDigit\
    \ <= 3 {\n        let fullNameArr = file_name.components(separatedBy: \".\")\n\
    \        if fullNameArr[0].count >= 1 && (fullNameArr[1] == \"txt\" || fullNameArr[1]\
    \ == \"exe\" || fullNameArr[1] == \"dll\") {\n            return \"Yes\"\n   \
    \     }\n    }\n    return \"No\"", "\treturn \"\"", "    // .* returns 0 or more\
    \ of any character\n    // .+ returns 1 or more of any character\n    let digits\
    \ = \"([0-9]{0,3})\"\n    let characters = \"([a-zA-Z]+)\"\n    let extention\
    \ = \"((txt)|(exe)|(dll))\"\n    let pattern = \"\\(characters)\\(digits).\\(extention)\"\
    \n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n  \
    \  let matches = regex.matches(in: file_name, options: [], range: NSRange(location:\
    \ 0, length: file_name.count))\n    return matches.count > 0 ? \"Yes\" : \"No\"",
  "    let char_set = CharacterSet(charactersIn: \"1234567890\")\n    var file_name_components\
    \ = file_name.components(separatedBy: \".\")\n    if file_name_components.count\
    \ != 2 {\n        return \"No\"\n    }\n    if file_name_components[0].rangeOfCharacter(from:\
    \ char_set) != nil || \n        file_name_components[0].count > 3 {\n        return\
    \ \"No\"\n    }\n    if (file_name_components[1] != \"txt\" && file_name_components[1]\
    \ != \"exe\" && \n        file_name_components[1] != \"dll\") {\n        return\
    \ \"No\"\n    }\n    return \"Yes\"", "    let digitsCount = file_name.components(separatedBy:\
    \ CharacterSet.decimalDigits).count - 1\n    if digitsCount > 3 {\n        return\
    \ \"No\"\n    }\n    if !file_name.contains(\".\") {\n        return \"No\"\n\
    \    }\n    let nameParts = file_name.components(separatedBy: \".\")\n    if nameParts.count\
    \ != 2 {\n        return \"No\"\n    }\n    let namePart = nameParts[0]\n    let\
    \ extensionPart = nameParts[1]\n    if namePart.count == 0 {\n        return \"\
    No\"\n    }\n    let firstLetter = namePart[namePart.startIndex]\n    if !((\"\
    a\"...\"z\").contains(firstLetter) || (\"A\"...\"Z\").contains(firstLetter)) {\n\
    \        return \"No\"\n    }\n    if !([\"txt\", \"exe\", \"dll\"].contains(extensionPart))\
    \ {\n        return \"No\"\n    }\n    return \"Yes\"", "    // TODO: implement\
    \ me!\n    return \"\"", "    let re1 = try! NSRegularExpression(pattern: \"^[a-zA-Z]\\\
    \\w{0,18}\\\\.\\\\w{1,3}$\", options: [])\n    let re2 = try! NSRegularExpression(pattern:\
    \ \"[0-9]{4,}\", options: [])\n    if (re1.firstMatch(in: file_name, options:\
    \ [], range: NSRange(location: 0, length: file_name.count)) != nil) && (re2.firstMatch(in:\
    \ file_name, options: [], range: NSRange(location: 0, length: file_name.count))\
    \ == nil) {\n        let suffix = Array(file_name)[file_name.count - 4...file_name.count\
    \ - 1]\n        if (suffix == \"exe\") || (suffix == \"txt\") || (suffix == \"\
    dll\") {\n            return \"Yes\"\n        }\n    }\n    return \"No\"", " \
    \   let file_name_pattern = \"^[a-zA-Z]+[0-9]{0,3}\\\\.(txt|exe|dll)$\"\n    if\
    \ file_name.range(of: file_name_pattern, options: .regularExpression) != nil {\n\
    \        return \"Yes\"\n    }\n    return \"No\"", "    guard file_name.count\
    \ > 0 else { return \"No\" }\n    guard !file_name.contains(\"/\") else { return\
    \ \"No\" }\n    let arr = file_name.split(separator: \".\")\n    guard arr.count\
    \ == 2 else { return \"No\" }\n    guard let regex = try? NSRegularExpression(pattern:\
    \ \"^[a-zA-Z]+$\", options: .caseInsensitive) else { return \"No\" }\n    guard\
    \ regex.firstMatch(in: String(arr[0]), options: [], range: NSRange(location: 0,\
    \ length: arr[0].count)) != nil else { return \"No\" }\n    guard regex.firstMatch(in:\
    \ String(arr[1]), options: [], range: NSRange(location: 0, length: arr[1].count))\
    \ == nil else { return \"No\" }\n    guard arr[1] == \"txt\" || arr[1] == \"exe\"\
    \ || arr[1] == \"dll\" else { return \"No\" }\n    let digits = file_name.filter\
    \ { \"0123456789\".contains($0) }\n    guard digits.count <= 3 else { return \"\
    No\" }\n    return \"Yes\"", "    var number = 0\n    var name = \"\"\n    var\
    \ ext = \"\"\n    var flag = false\n    for char in file_name {\n        if !flag\
    \ && char.isLetter {\n            name += String(char)\n        } else if char\
    \ == \".\" {\n            flag = true\n        } else if char.isNumber {\n   \
    \         number += 1\n        } else if flag {\n            ext += String(char)\n\
    \        }\n    }\n    return number > 3 || name.isEmpty || !ext.isOneOf([\"txt\"\
    , \"exe\", \"dll\"]) ? \"No\" : \"Yes\"", '    return ""', '    return "Yes"',
  "    let numbers = Set(\"0123456789\")\n    let alphabet = Set(\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    )\n    let files = Set([\"txt\", \"exe\", \"dll\"])\n    var num_digits = 0\n\
    \    var is_digit = false\n    var starts_with_alpha = false\n    var has_dot\
    \ = false\n    var is_file = false\n    var extension = \"\"\n    for i in file_name\
    \ {\n        if i.isNumber {\n            is_digit = true\n            num_digits\
    \ += 1\n        }\n        if i == \".\" {\n            has_dot = true\n     \
    \   }\n        if i.isLetter {\n            starts_with_alpha = true\n       \
    \ }\n    }\n    if has_dot {\n        extension = String(file_name.split(separator:\
    \ \".\")[1])\n        if files.contains(extension) {\n            is_file = true\n\
    \        }\n    }\n    if num_digits > 3 || !is_digit || !starts_with_alpha ||\
    \ !has_dot || !is_file {\n        return \"No\"\n    }\n    return \"Yes\"", " \
    \   // Num of digits \n    var num_digits = 0;\n    // Number of dots\n    var\
    \ num_dots = 0;\n    // Valid extensions\n    let extensions = [\"txt\", \"exe\"\
    , \"dll\"];\n    // Check if the file name is valid\n    let is_valid = file_name.contains(\"\
    .\") && file_name.count > 0;\n    // If there is at least one dot and the file\
    \ name is not empty,\n    // then we should split the string into two substrings:\n\
    \    // The first substring is before the dot, and the second substring\n    //\
    \ is after the dot.\n    // Then, we should check if the conditions listed above\
    \ are met.\n    if is_valid {\n        // Split the string into two substrings\
    \ using the dot '.' as a separator\n        let substrings = file_name.split(separator:\
    \ \".\");\n        // Keep the first substring (the one before the dot) in the\
    \ variable named first_substring\n        let first_substring = substrings[0];\n\
    \        // Keep the second substring (the one after the dot) in the variable\
    \ named second_substring\n        let second_substring = substrings[1];\n    \
    \    // Iterate over the first substring's characters (which are of type 'Character'\n\
    \        // and do the following:\n        // - Check if a character is a digit,\
    \ if so, then increment the num_digits variable by 1.\n        // - Check if a\
    \ character is a dot, if so, then increment the num_dots variable by 1.\n    \
    \    for character in first_substring {\n            if character.isNumber {\n\
    \                num_digits += 1;\n            }\n            if character ==\
    \ \".\" {\n                num_dots += 1;\n            }\n        }\n        //\
    \ If the number of digits is more than three, or the number of dots is more than\
    \ one,\n        // then the file name is not valid.\n        if num_digits > 3\
    \ || num_dots > 1 {\n            return \"No\";\n        }\n        // The first\
    \ character of the first substring should be a letter, if not, then\n        //\
    \ the file name is not valid.\n        if !first_substring.first!.isLetter", " \
    \   let pattern = \"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.(txt|exe|dll)$\"\n    let matches\
    \ = file_name.range(of: pattern, options: .regularExpression) != nil\n    return\
    \ matches ? \"Yes\" : \"No\"", "    var numDigits = 0\n    var hasDot = false\n\
    \    var ext = \"\"\n    var isValid = true\n    for char in file_name {\n   \
    \     if char.isNumber {\n            numDigits += 1\n        } else if char ==\
    \ \".\" {\n            hasDot = true\n        } else if char.isLetter {\n    \
    \        ext = String(file_name.suffix(from: file_name.lastIndex(of: \".\")!))\n\
    \        }\n        if numDigits > 3 || !hasDot || ext == \"\" || !ext.contains(\"\
    txt\") || !ext.contains(\"exe\") || !ext.contains(\"dll\") {\n            isValid\
    \ = false\n        }\n    }\n    return isValid ? \"Yes\" : \"No\"", '    return
    ""', "\tlet validExtensions = [\"txt\", \"exe\", \"dll\"]\n\tvar digits: Int =\
    \ 0\n\tvar dot: Int = 0\n\tvar extension = \"\"\n\tvar name = \"\"\n\tvar answer\
    \ = \"No\"\n\tvar index = 0\n\tlet char = Array(file_name)\n\twhile index < char.count\
    \ {\n\t\tif char[index] == \".\" {\n\t\t\tdot += 1\n\t\t\tname = String(char[0...index\
    \ - 1])\n\t\t\textension = String(char[index + 1...char.count - 1])\n\t\t}\n\t\
    \tif isdigit(char[index]) {\n\t\t\tdigits += 1\n\t\t}\n\t\tindex += 1\n\t}\n\t\
    if validExtensions.contains(extension) && digits <= 3 && dot == 1 && isalpha(char[0])\
    \ {\n\t\tanswer = \"Yes\"\n\t}\n\treturn answer", "    let regex_obj = regex_pattern(\"\
    ^[a-zA-Z][a-zA-Z0-9]{0,3}\\\\.(txt|exe|dll)$\")\n    if regex_obj.find(file_name)\
    \ {\n        return \"Yes\"\n    }\n    return \"No\"", "    if file_name.count\
    \ == 0 {\n        return \"No\"\n    }\n    var digits = 0\n    var dot = 0\n\
    \    for ch in file_name {\n        if ch >= \"0\" && ch <= \"9\" {\n        \
    \    digits += 1\n        } else if ch == \".\" {\n            dot += 1\n    \
    \    }\n    }\n    if digits > 3 || dot != 1 {\n        return \"No\"\n    }\n\
    \    var left = \"\"\n    var right = \"\"\n    var past_dot = false\n    for\
    \ ch in file_name {\n        if ch == \".\" {\n            past_dot = true\n \
    \       } else if past_dot {\n            right += String(ch)\n        } else\
    \ {\n            left += String(ch)\n        }\n    }\n    if left.count == 0\
    \ || !(left[0] >= \"a\" && left[0] <= \"z\" || left[0] >= \"A\" && left[0] <=\
    \ \"Z\") {\n        return \"No\"\n    }\n    if right != \"txt\" && right !=\
    \ \"exe\" && right != \"dll\" {\n        return \"No\"\n    }\n    return \"Yes\"",
  "    /// Write your code here\n    return \"\"", '    return ""', "    var file_name\
    \ = file_name\n    var result = true\n    let regex1 = try! NSRegularExpression(pattern:\
    \ \"\\\\d{4,}\", options: [])\n    if regex1.firstMatch(in: file_name, options:\
    \ [], range: NSRange(location: 0, length: file_name.count)) != nil {\n       \
    \ result = false\n    }\n    let regex2 = try! NSRegularExpression(pattern: \"\
    ^\\\\d\", options: [])\n    if regex2.firstMatch(in: file_name, options: [], range:\
    \ NSRange(location: 0, length: file_name.count)) != nil {\n        result = false\n\
    \    }\n    let regex3 = try! NSRegularExpression(pattern: \"\\\\.\", options:\
    \ [])\n    let count = regex3.numberOfMatches(in: file_name, options: [], range:\
    \ NSRange(location: 0, length: file_name.count))\n    if count != 1 {\n      \
    \  result = false\n    }\n    let index = file_name.firstIndex(of: \".\")!\n \
    \   let type = file_name[index...]\n    let types = [\"txt\", \"exe\", \"dll\"\
    ]\n    if !types.contains(String(type)) {\n        result = false\n    }\n   \
    \ file_name.removeSubrange(index...)\n    let regex4 = try! NSRegularExpression(pattern:\
    \ \"[a-zA-Z]+\", options: [])\n    if regex4.firstMatch(in: file_name, options:\
    \ [], range: NSRange(location: 0, length: file_name.count)) == nil {\n       \
    \ result = false\n    }\n    return result ? \"Yes\" : \"No\"", '    return "No"',
  "    let substrings = file_name.split(separator: \".\")\n    let file_name_with_no_dot\
    \ = substrings[0]\n    let file_format = substrings[1]\n    if substrings.count\
    \ != 2 {\n        return \"No\"\n    }\n    if !file_name_with_no_dot.contains(where:\
    \ {$0 >= \"a\" && $0 <= \"z\" || $0 >= \"A\" && $0 <= \"Z\"}) {\n        return\
    \ \"No\"\n    }\n    if file_name_with_no_dot.contains(where: {$0 >= \"0\" &&\
    \ $0 <= \"9\"}) {\n        let digits_number = file_name_with_no_dot.filter {$0\
    \ >= \"0\" && $0 <= \"9\"}.count\n        if digits_number > 3 {\n           \
    \ return \"No\"\n        }\n    }\n    if file_format != \"txt\" && file_format\
    \ != \"exe\" && file_format != \"dll\" {\n        return \"No\"\n    }\n    return\
    \ \"Yes\"", '    return "No"', "    // TODO: Write some code to solve this coding\
    \ problem\n    return \"\"", "    if file_name.count > 20 {\n        return \"\
    No\"\n    }\n    let components = file_name.components(separatedBy: \".\")\n \
    \   if components.count != 2 {\n        return \"No\"\n    }\n    if components[0].count\
    \ == 0 || components[1].count == 0 {\n        return \"No\"\n    }\n    let components1\
    \ = components[0].components(separatedBy: CharacterSet.decimalDigits)\n    if\
    \ components1.count != components[0].count {\n        return \"No\"\n    }\n \
    \   let components2 = components[1].components(separatedBy: CharacterSet.decimalDigits)\n\
    \    if components2.count != components[1].count {\n        return \"No\"\n  \
    \  }\n    let possible_values = [\"txt\", \"exe\", \"dll\"]\n    if !possible_values.contains(components[1])\
    \ {\n        return \"No\"\n    }\n    if !(components[0].first! >= \"a\" && components[0].first!\
    \ <= \"z\" ||\n        components[0].first! >= \"A\" && components[0].first! <=\
    \ \"Z\") {\n        return \"No\"\n    }\n    return \"Yes\"", '    return ""',
  "    let result = match!(\n        file_name,\n        (r\"\\d{1,3}\", \"No\"),\n\
    \        (r\"[a-zA-Z]*[.](txt|exe|dll)\", \"Yes\"),\n        (r\"[a-zA-Z]*\",\
    \ \"No\")\n    )\n    return result", "    var is_valid = true\n    var count_digits\
    \ = 0\n    var count_dots = 0\n    var count_after_dot = 0\n    var prefix = \"\
    \"\n    var suffix = \"\"\n    for c in file_name {\n        if count_dots > 1\
    \ {\n            is_valid = false\n            break\n        }\n        if isdigit(c)\
    \ != 0 {\n            count_digits += 1\n        }\n        if count_digits >\
    \ 3 {\n            is_valid = false\n            break\n        }\n        if\
    \ c == \".\" {\n            count_dots += 1\n        }\n        if count_dots\
    \ == 1 {\n            count_after_dot += 1\n        }\n    }\n    if count_after_dot\
    \ == 0 {\n        is_valid = false\n    }\n    let substrings = file_name.split(separator:\
    \ \".\")\n    if substrings.count == 2 {\n        prefix = String(substrings[0])\n\
    \        suffix = String(substrings[1])\n    } else {\n        is_valid = false\n\
    \    }\n    if prefix.isEmpty || !prefix.first!.isLetter {\n        is_valid =\
    \ false\n    }\n    if !suffix.isEmpty && ![\"txt\", \"exe\", \"dll\"].contains(suffix)\
    \ {\n        is_valid = false\n    }\n    return is_valid ? \"Yes\" : \"No\"",
  '  return "Yes"', "\treturn \"\"", "    // Write your code here.\n    return \"\"",
  "    let parts = file_name.split(separator: \".\")\n    let name = parts[0]\n  \
    \  let lastPart = parts[1]\n    var count = 0\n    for i in name {\n        if\
    \ i >= \"0\" && i <= \"9\" {\n            count += 1\n        }\n    }\n    if\
    \ count > 3 {\n        return \"No\"\n    }\n    if name.isEmpty || (name[name.startIndex]\
    \ < \"a\" || name[name.startIndex] > \"z\") && (name[name.startIndex] < \"A\"\
    \ || name[name.startIndex] > \"Z\") {\n        return \"No\"\n    }\n    if lastPart\
    \ != \"txt\" && lastPart != \"exe\" && lastPart != \"dll\" {\n        return \"\
    No\"\n    }\n    return \"Yes\"", "    if file_name.count <= 12,\n        let\
    \ dot_index = file_name.lastIndex(of: \".\"),\n        let file_name_start_index\
    \ = file_name.firstIndex(of: \".\"),\n        file_name[file_name_start_index..<dot_index].count\
    \ <= 7,\n        let file_name_end_index = file_name.lastIndex(of: \".\"),\n \
    \       let file_name_extension_start_index = file_name.firstIndex(of: \".\"),\n\
    \        let file_name_extension_end_index = file_name.lastIndex(of: \".\"),\n\
    \        file_name[file_name_extension_start_index..<file_name_extension_end_index].count\
    \ <= 4,\n        file_name[file_name_end_index...] == \".txt\" || file_name[file_name_end_index...]\
    \ == \".exe\" || file_name[file_name_end_index...] == \".dll\",\n        file_name.contains(\"\
    .\") {\n        return \"Yes\"\n    } else {\n        return \"No\"\n    }", " \
    \   /// TODO: Write your code here\n    return \"\"", "    let number_of_digits\
    \ = file_name.filter({$0 >= \"0\" && $0 <= \"9\"}).count\n    guard number_of_digits\
    \ <= 3 else { return \"No\" }\n    guard file_name.contains(\".\") else { return\
    \ \"No\" }\n    let comp = file_name.components(separatedBy: \".\")\n    guard\
    \ comp.count == 2 else { return \"No\" }\n    guard comp[0].contains(where: {$0\
    \ >= \"a\" && $0 <= \"z\"}) ||\n          comp[0].contains(where: {$0 >= \"A\"\
    \ && $0 <= \"Z\"}) else { return \"No\" }\n    guard comp[1] == \"txt\" || comp[1]\
    \ == \"exe\" || comp[1] == \"dll\" else { return \"No\" }\n    return \"Yes\"",
  "    let file_name_regex = #\"([A-Za-z])([A-Za-z0-9]{0,2})\\.(txt|exe|dll)\"#\n\
    \    let file_name_predicate = NSPredicate(format: \"SELF MATCHES %@\", file_name_regex)\n\
    \    return file_name_predicate.evaluate(with: file_name) ? \"Yes\" : \"No\"",
  "    let valid_ext = [\"txt\", \"exe\", \"dll\"]\n    let dot_index = file_name.firstIndex(of:\
    \ \".\")\n    let dot_index_after = file_name.index(after: dot_index!)\n    let\
    \ dot_index_before = file_name.index(before: dot_index!)\n    let dot_index_before_letter\
    \ = file_name[dot_index_before]\n    let digit_before_dot = file_name[file_name.startIndex..<dot_index!]\n\
    \    let digit_after_dot = file_name[dot_index_after..<file_name.endIndex]\n \
    \   let is_digit_before_dot = digit_before_dot.isEmpty || !digit_before_dot.contains(\"\
    0\")\n    let is_digit_after_dot = digit_after_dot.isEmpty || !digit_after_dot.contains(\"\
    0\")\n    let is_upper_dot_index_before_letter = (dot_index_before_letter == \"\
    a\" || dot_index_before_letter == \"b\" || dot_index_before_letter == \"c\" ||\
    \ dot_index_before_letter == \"d\" || dot_index_before_letter == \"e\" || dot_index_before_letter\
    \ == \"f\" || dot_index_before_letter == \"g\" || dot_index_before_letter == \"\
    h\" || dot_index_before_letter == \"i\" || dot_index_before_letter == \"j\" ||\
    \ dot_index_before_letter == \"k\" || dot_index_before_letter == \"l\" || dot_index_before_letter\
    \ == \"m\" || dot_index_before_letter == \"n\" || dot_index_before_letter == \"\
    o\" || dot_index_before_letter == \"p\" || dot_index_before_letter == \"q\" ||\
    \ dot_index_before_letter == \"r\" || dot_index_before_letter == \"s\" || dot_index_before_letter\
    \ == \"t\" || dot_index_before_letter == \"u\" || dot_index_before_letter == \"\
    v\" || dot_index_before_letter == \"w\" || dot_index_before_letter", "    let\
    \ allowed_extensions = [\"txt\", \"exe\", \"dll\"]\n    let valid_characters =\
    \ \"abcdefghijklmnopqrstuvwxyz\"\n    var digits_count = 0\n    var extension_found\
    \ = false\n    var name_found = false\n    var invalid_count = 0\n    for char\
    \ in file_name {\n        if char == \".\" {\n            if extension_found {\n\
    \                return \"No\"\n            }\n            extension_found = true\n\
    \        } else if char == \".\" {\n            if name_found {\n            \
    \    return \"No\"\n            }\n            name_found = true\n        } else\
    \ if allowed_extensions.contains(String(char)) {\n            invalid_count +=\
    \ 1\n        } else if valid_characters.contains(String(char)) {\n           \
    \ invalid_count += 1\n        }\n    }\n    if invalid_count > 3 {\n        return\
    \ \"No\"\n    }\n    return \"Yes\"", "    var has_dot = false\n    var has_ext\
    \ = false\n    var cnt_digits = 0\n    var ext = \"\"\n    for c in file_name\
    \ {\n        if c == \".\" {\n            has_dot = true\n        } else if has_dot\
    \ {\n            ext.append(c)\n            has_ext = true\n        } else if\
    \ !has_dot && c >= \"0\" && c <= \"9\" {\n            cnt_digits += 1\n      \
    \  }\n    }\n    if cnt_digits > 3 || !has_dot || !has_ext || ext.count == 0 ||\
    \ ext.count > 3 {\n        return \"No\"\n    }\n    let ext_valid = ext == \"\
    txt\" || ext == \"exe\" || ext == \"dll\"\n    let prefix_char = file_name.first!\n\
    \    let prefix_valid = prefix_char >= \"a\" && prefix_char <= \"z\" ||\n    \
    \                   prefix_char >= \"A\" && prefix_char <= \"Z\"\n    if !ext_valid\
    \ || !prefix_valid {\n        return \"No\"\n    }\n    return \"Yes\"", "   \
    \ // There should not be more than three digits ('0'-'9') in the file's name.\n\
    \    // The file's name contains exactly one dot '.'\n    // The substring before\
    \ the dot should not be empty, and it starts with a letter from \n    // the latin\
    \ alphapet ('a'-'z' and 'A'-'Z').\n    let regex = \"^([A-Za-z][A-Za-z0-9]{0,3})(\\\
    \\.[a-zA-Z]{3})$\"\n    guard let _ = file_name.range(of: regex, options: .regularExpression)\
    \ else {\n        return \"No\"\n    }\n    // The substring after the dot should\
    \ be one of these: ['txt', 'exe', 'dll']\n    let index = file_name.range(of:\
    \ \".\", options: .backwards)!.lowerBound\n    let extension_ = file_name[index...]\n\
    \    if extension_ == \".txt\" || extension_ == \".exe\" || extension_ == \".dll\"\
    \ {\n        return \"Yes\"\n    }\n    return \"No\"", '    return "Yes"', '    return
    ""', '    return ""', "\tvar file_name = file_name\n\tvar dot_indices = [Int]()\n\
    \tvar digit_count = 0\n\tfor (index, character) in file_name.enumerated() {\n\t\
    \tif let ascii_value = character.asciiValue {\n\t\t\tif ascii_value >= 48 && ascii_value\
    \ <= 57 {\n\t\t\t\tdigit_count += 1\n\t\t\t}\n\t\t\tif ascii_value == 46 {\n\t\
    \t\t\tdot_indices.append(index)\n\t\t\t}\n\t\t}\n\t}\n\tif dot_indices.count !=\
    \ 1 || digit_count > 3 {\n\t\treturn \"No\"\n\t}\n\tlet index_before_dot = file_name.index(file_name.startIndex,\
    \ offsetBy: dot_indices[0])\n\tlet index_after_dot = file_name.index(file_name.startIndex,\
    \ offsetBy: dot_indices[0] + 1)\n\tvar letters_before_dot = file_name[..<index_before_dot]\n\
    \tvar letters_after_dot = file_name[index_after_dot...]\n\tif letters_before_dot.isEmpty\
    \ {\n\t\treturn \"No\"\n\t}\n\tif let ascii_value = letters_before_dot.first?.asciiValue\
    \ {\n\t\tif !(ascii_value >= 65 && ascii_value <= 90) && !(ascii_value >= 97 &&\
    \ ascii_value <= 122) {\n\t\t\treturn \"No\"\n\t\t}\n\t}\n\tif !(letters_after_dot\
    \ == \"txt\" || letters_after_dot == \"exe\" || letters_after_dot == \"dll\")\
    \ {\n\t\treturn \"No\"\n\t}\n\treturn \"Yes\""]
stop_tokens:
- "\n}"
