name: HumanEval_103_rounded_avg
language: swift
prompt: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
  \ n and m, and your task is to compute the\n/// average of the integers from n through\
  \ m (including n and m). \n/// Round the answer to the nearest integer and convert\
  \ that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n/// >>>\
  \ rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n: 7, m:\
  \ 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"0b1111\"\
  )\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc rounded_avg(n:\
  \ Int, m: Int) -> Result<String, Int> {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"\
  ))\nassert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n:\
  \ 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997)\
  \ == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"\
  0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"\
  ))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n:\
  \ 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233)\
  \ == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\n\
  assert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5)\
  \ == .success(\"0b101\"))"
completions: ['    fatalError("TODO: implement this function")', "    let intermediate_result\
    \ = (n + m) / 2\n    let binaried_intermediate_result = intermediate_result.binaryRepresentation\n\
    \    return Result<String, Int>(catching: {\n        if n > m {\n            throw\
    \ -1\n        }\n        return \"0b\\(binaried_intermediate_result)\"\n    })",
  '    return .success("")', "  guard n <= m else { return .failure(-1) }\n  let sum\
    \ = (n+m)*(m-n+1)/2\n  let rounded = (sum+((m-n+1)%2))/2\n  return .success(\"\
    0b\\(rounded.binary)\")", "    guard n <= m else { return .failure(-1) }\n   \
    \ let avg = round((n + m) / 2)\n    return .success(\"0b\\(String(avg, radix:\
    \ 2))\")", "    guard n <= m else { return .failure(-1) }\n    return .success(String(format:\
    \ \"0b%0x\", (n+m)/2))", "    if n > m {\n        return .failure(-1)\n    } else\
    \ {\n        let sum = (n...m).reduce(0, +)\n        let average = sum / (m -\
    \ n + 1)\n        let average_binary = String(average, radix: 2)\n        return\
    \ .success(\"0b\\(average_binary)\")\n    }", '    return Result.success("")',
  "    if n > m {\n        return .failure(-1)\n    } else {\n        return .success(String(Int(ceil(Double(n\
    \ + m) / 2)), radix: 2))\n    }", "    if n > m {\n        return .failure(-1)\n\
    \    }\n    let avg = (n + m) / 2\n    return .success(\"0b\\(String(avg, radix:\
    \ 2))\")", "    guard n <= m else { return .failure(-1) }\n    let avg = (n +\
    \ m) / 2\n    return .success(\"0b\\(String(avg, radix: 2))\")", "    guard n\
    \ <= m else { return .failure(-1) }\n    let result = ((n + m) / 2).binarize()\n\
    \    return .success(result)", "    // your code here\n    if n > m {\n      \
    \  return .failure(-1)\n    }\n    let average = (n + m) / 2\n    let binary =\
    \ String(average, radix: 2)\n    return .success(\"0b\\(binary)\")", "    guard\
    \ n <= m else { return .failure(-1) }\n    let sum = (n + m) * (m - n + 1) / 2\n\
    \    let average = sum / (m - n + 1)\n    return .success(\"0b\\(String(average,\
    \ radix: 2))\")", "    // implement your solution here\n    return .failure(0)",
  '  return n > m ? .failure(-1) : .success("0b\(String(format: "%b", (n + m)/2))")',
  "    let sum = (n...m).reduce(0, +)\n    let avg = sum / (m - n + 1)\n    return\
    \ avg > m || avg < n ? .failure(-1) : .success(\"0b\\(String(avg, radix: 2))\"\
    )", "    switch (n, m) {\n    case let (n, m) where n > m:\n        return .failure(-1)\n\
    \    case let (n, m):\n        let avg = (n + m) / 2\n        let bin = String(avg,\
    \ radix: 2)\n        return .success(\"0b\\(bin)\")\n    }", "    guard n <= m\
    \ else { return .failure(-1) }\n    let sum = (n...m).reduce(0, +)\n    let rounded\
    \ = sum / (m - n + 1)\n    return .success(String(rounded, radix: 2))", "    //\
    \ find the average by adding n + m and dividing by 2\n    let avg = (n + m) /\
    \ 2\n    // convert the answer to binary and return the result\n    return Result.success(\"\
    0b\\(String(avg, radix: 2))\")", "    var result: String = \"\"\n    if n > m\
    \ {\n        return .failure(-1)\n    }\n    else {\n        let sum: Int = n\
    \ + m\n        let total: Int = m - n + 1\n        var div: Int = sum / total\n\
    \        while div > 0 {\n            result = result + \"\\(div % 2)\"\n    \
    \        div = div / 2\n        }\n        let begin: String.Index = result.startIndex\n\
    \        let end: String.Index = result.index(begin, offsetBy: result.count)\n\
    \        let range: Range<String.Index> = begin..<end\n        result = String(result[range].reversed())\n\
    \        return .success(\"0b\" + result)\n    }", "    // Add code here\n   \
    \ return .failure(0)", "    if n > m {\n        return .failure(-1)\n    }\n \
    \   let avg = (m + n) / 2\n    return .success(\"0b\\(String(avg, radix: 2))\"\
    )", "    let avg = (n + m) / 2\n    let rounded = Int(Double(avg).rounded())\n\
    \    if n > m {\n        return .failure(-1)\n    }\n    return .success(\"0b\\\
    (String(rounded, radix: 2))\")", "  var result: Result<String, Int>\n  let div\
    \ = (n + m) / 2\n  if div <= m {\n    result = .success(String(div, radix: 2))\n\
    \  } else {\n    result = .failure(-1)\n  }\n  return result", "    guard n <=\
    \ m else { return .failure(-1) }\n    let result = Int((Double(n) + Double(m))\
    \ / 2.0).binaryString\n    return .success(result)", '    // your code here',
  "    guard n <= m else { return .failure(-1) }\n    return .success(String(Int(floor(((n\
    \ + m) / 2.0) + 0.5)), radix: 2))", "    guard n <= m else { return .failure(-1)\
    \ }\n    let avg = (n + m) / 2\n    return .success(\"0b\\(String(avg, radix:\
    \ 2))\")", "    let avg = (n + m) / 2\n    if n > m {\n        return .failure(-1)\n\
    \    }\n    return .success(\"0b\\(String(avg, radix: 2))\")", '    return .success("0b11")',
  "    guard n <= m else { return .failure(-1) }\n    let answer = ((n + m) / 2).bin\n\
    \    return .success(answer)", "    \n    if (n > m) {\n        return .failure(-1)\n\
    \    }\n    \n    let avg = (n + m) / 2\n    return .success(\"0b\\(String(avg,\
    \ radix: 2))\")", "    let list = Array(n...m)\n    let average = list.reduce(0,\
    \ +) / list.count\n    if n > m {\n        return .failure(-1)\n    }\n    return\
    \ .success(String(average, radix: 2))", "    return Result<String, Int>{\n   \
    \     if n > m {\n            throw -1\n        }\n        let avg = Double(n\
    \ + m) / 2\n        let avgInt = Int(avg.rounded())\n        return \"0b\\(String(avgInt,\
    \ radix: 2))\"\n    }", "    guard n <= m else { return .failure(-1) }\n    let\
    \ average = (n + m) / 2\n    let binary = average.binary\n    return .success(\"\
    0b\\(binary)\")", "    guard n <= m else { return .failure(-1) }\n    let avg\
    \ = Int(floor(Double(n + m) / 2))\n    return .success(\"0b\\(String(avg, radix:\
    \ 2))\")", "    guard n <= m else { return .failure(-1) }\n    let average = (n\
    \ + m) / 2\n    let binary = average.binaryString\n    return .success(\"0b\\\
    (binary)\")", '    return .success("\(Int(round(Double(n + m) / 2)))")', "   \
    \ guard n <= m else { return .failure(-1) }\n    let avg = Int(Double(n + m) /\
    \ 2.0)\n    return .success(\"0b\\(String(avg, radix: 2))\")", "    if n > m {\n\
    \        return .failure(-1)\n    } else {\n        let avg = (n + m) / 2\n  \
    \      return .success(\"0b\\(String(avg, radix: 2))\")\n    }", "  if n > m {\n\
    \    return .failure(-1)\n  }\n  let sum = (n + m) * (m - n + 1) / 2\n  let result\
    \ = Int(round(Double(sum) / Double(m - n + 1)))\n  return .success(String(result,\
    \ radix: 2))", "    if n > m {\n        return .failure(-1)\n    }\n    let sum\
    \ = m + n\n    let count = (m - n) + 1\n    let average = sum / count\n    let\
    \ binaryAverage = String(average, radix: 2)\n    return .success(\"0b\\(binaryAverage)\"\
    )", "    \n    if n <= m {\n        let avg = n + m / 2\n        return .success(avg.binaryRepresentation)\n\
    \    } else {\n        return .failure(-1)\n    }\n    ", "    guard n <= m else\
    \ { return .failure(-1) }\n    let sum = n + m\n    let remainder = sum % 2\n\
    \    let avg = sum / 2\n    return .success(\"0b\\(String(avg, radix: 2))\\(remainder\
    \ == 1 ? \"1\" : \"0\")\")", "    return (n > m) ? .failure(-1) :\n        .success(String(Array(((n+m)/2).toBinary()).dropFirst()))",
  '    return Result<String, Int>.failure(-1)', "    if n > m {\n        return .failure(-1)\n\
    \    }\n    let avg = n + (m - n) / 2\n    return .success(\"0b\\(String(avg,\
    \ radix: 2))\")", "    guard n <= m else { return .failure(-1) }\n    let average\
    \ = (n + m) / 2\n    let binary = String(average, radix: 2)\n    return .success(\"\
    0b\\(binary)\")", "    guard n <= m else { return .failure(-1) }\n    let average\
    \ = Int(round(Double(n + m) / 2))\n    return .success(average.binary)", "   \
    \ let mid = (n + m) / 2\n    return m < n ? .failure(-1) : .success(String(mid,\
    \ radix: 2))", "    if n > m {\n        return .failure(-1)\n    }\n    let average\
    \ = (m + n) / 2\n    return .success(\"0b\\(String(average, radix: 2))\")", " \
    \   guard n <= m else { return .failure(-1) }\n    let avg = (n + m) / 2\n   \
    \ return .success(\"0b\\(String(avg, radix: 2))\")", "    let avg = (n + m) /\
    \ 2\n    let rounded_avg = Int(round(Double(avg)))\n    return avg <= m && avg\
    \ >= n ? .success(String(rounded_avg, radix: 2)) : .failure(-1)", "    guard n\
    \ <= m else { return .failure(-1) }\n    let average = (n + m) / 2\n    let binary\
    \ = String(average, radix: 2)\n    return .success(\"0b\\(binary)\")", "    return\
    \ Result(catching: {\n        if n > m {\n            throw -1\n        }\n  \
    \      let result = n + m\n        let bin = result.binaryString()\n        let\
    \ left = bin.startIndex\n        let right = bin.index(bin.endIndex, offsetBy:\
    \ -1)\n        let binRange = left..<right\n        return \"0b\\(bin[binRange])\"\
    \n    })", "    guard n <= m else { return .failure(-1) }\n    let average = Int(round(Double(n\
    \ + m) / 2))\n    return .success(String(average, radix: 2))", "    if n <= m\
    \ {\n        let sum = (n + m) * (m - n + 1) / 2\n        let avg = Int(round(Double(sum)\
    \ / Double(m - n + 1)))\n        return .success(String(avg, radix: 2))\n    }\
    \ else {\n        return .failure(-1)\n    }", "    guard n <= m else { return\
    \ .failure(-1) }\n    let avg = (m + n) / 2\n    return .success(\"0b\\(String(avg,\
    \ radix: 2))\")", '    return .success("0b11")', "    guard n <= m else { return\
    \ .failure(-1) }\n    let sum = (n...m).reduce(0, +)\n    let avg = Int(ceil(Double(sum)\
    \ / Double(m - n + 1)))\n    return .success(String(avg, radix: 2))", '    return
    .success("")', "    guard n <= m else { return .failure(-1) }\n    let avg = (n\
    \ + m) / 2\n    return .success(\"0b\\(String(avg, radix: 2))\")", "    guard\
    \ n <= m else { return .failure(-1) }\n    let average = Int(Float(n + m) / 2.0)\n\
    \    return .success(String(average, radix: 2))", "    let avg = (n + m) / 2\n\
    \    if avg < n {\n        return .failure(-1)\n    }\n    let bin = String(avg,\
    \ radix: 2)\n    return .success(\"0b\\(bin)\")", '    return', "    var n = n\n\
    \    var m = m\n    var sum = 0\n    if n > m {\n        return .failure(-1)\n\
    \    }\n    while n <= m {\n        sum += n\n        n += 1\n    }\n    let average\
    \ = sum / ((m-n)+1)\n    return .success(String(average, radix: 2))", '    return
    .success("0b11")', "    let avg = (n + m) / 2\n    if n > m {\n        return\
    \ .failure(-1)\n    }\n    return .success(\"0b\\(String(avg, radix: 2))\")",
  "    // Your code here\n    if (n < m) {\n        let avg = n + m/2\n        let\
    \ binary = String(avg, radix: 2)\n        return .success(\"0b\\(binary)\")\n\
    \    } else {\n        return .failure(-1)\n    }", "    let average = (m+n)/2\n\
    \    if n > m {\n        return .failure(-1)\n    }\n    return .success(\"0b\\\
    (String(average, radix: 2))\")", "    guard n <= m else { return .failure(-1)\
    \ }\n    let decimalAverage = round((Double(n) + Double(m)) / 2)\n    let binaryAverage\
    \ = String(decimalAverage, radix: 2)\n    return .success(\"0b\\(binaryAverage)\"\
    )", "    // TODO\n    let result = (n + m) / 2\n    if n > m {\n        return\
    \ .failure(-1)\n    } else {\n        return .success(\"0b\\(String(result, radix:\
    \ 2))\")\n    }", "    guard n <= m else { return .failure(-1) }\n    let avg\
    \ = (n + m) / 2\n    return .success(\"0b\\(String(avg, radix: 2))\")", "    guard\
    \ n <= m else { return .failure(-1) }\n    let sum = (n...m).reduce(0, +)\n  \
    \  let avg = (sum + ((m - n + 1) / 2)) / (m - n + 1)\n    return .success(String(avg,\
    \ radix: 2))", "    return Result {\n        let avg = (n + m) / 2\n        return\
    \ \"0b\\(String(avg, radix: 2))\"\n    }", "    guard n <= m else { return .failure(-1)\
    \ }\n    let avg = Int(Double(n + m) / 2.0)\n    return .success(\"0b\\(String(avg,\
    \ radix: 2))\")", "    let average = (m + n) / 2\n    if n > m {\n        return\
    \ .failure(-1)\n    }\n    return .success(\"0b\\(String(average, radix: 2))\"\
    )", '    return .success("")', "    guard n <= m else { return .failure(-1) }\n\
    \    let sum = (n+m)*(m-n+1)/2\n    let avg = sum/((m-n)+1)\n    return .success(\"\
    0b\\(String(avg, radix: 2))\")", "    if n > m {\n        return .failure(-1)\n\
    \    }\n    let avg = (n + m) / 2\n    return .success(\"0b\\(String(avg, radix:\
    \ 2))\")", "    if n > m {\n        return .failure(-1)\n    }\n    let avg =\
    \ (n + m) / 2\n    return .success(\"0b\\(String(avg, radix: 2))\")", "    guard\
    \ n <= m else { return .failure(-1) }\n    let average = round((n + m).toDouble()\
    \ / 2)\n    return .success(\"0b\\(average.toBinaryString())\")", "    if n >\
    \ m {\n        return .failure(-1)\n    }\n    let total = (m - n + 1) * (n +\
    \ m) / 2\n    let result =  String(total / (m - n + 1), radix: 2)\n    return\
    \ .success(\"0b\\(result)\")", "    guard n <= m else { return .failure(-1) }\n\
    \    let avg = (n + m) / 2\n    return .success(\"0b\\(String(avg, radix: 2))\"\
    )", "    return Result {\n        guard n <= m else { throw -1 }\n        let\
    \ sum = (n...m).reduce(0, +)\n        let rounded = (sum / (m - n + 1))\n    \
    \    return \"0b\\(String(rounded, radix: 2))\"\n    }", "    if n > m {\n   \
    \     return .failure(-1)\n    }\n    let avg = Int(Double(n + m) / 2.0 + 0.5)\n\
    \    return .success(\"0b\\(String(avg, radix: 2))\")", "    // your code here\n\
    \    if n > m {\n        return .failure(-1)\n    }\n    var total = 0\n    for\
    \ i in n...m {\n        total += i\n    }\n    return .success(\"0b\\(String(total\
    \ / (m - n + 1), radix: 2))\")", "    guard n <= m else { return .failure(-1)\
    \ }\n    let avg = Int(ceil(Double(n + m) / 2))\n    return .success(\"0b\\(String(avg,\
    \ radix: 2))\")", "    // Your code here\n    return .failure(0)", "  if n > m\
    \ {\n    return .failure(-1)\n  }\n  let avg = (n + m) / 2\n  return .success(\"\
    0b\\(String(avg, radix: 2))\")", "    guard n <= m else { return .failure(-1)\
    \ }\n    let rounded_average = Int(Float(n + m) / 2.0 + 0.5)\n    return .success(String(rounded_average,\
    \ radix: 2))", '    return Result.success("0b\(Int((n + m) / 2).binaryString)")',
  "    // your code here\n    return .failure(0)", "    if n > m {\n        return\
    \ .failure(-1)\n    }\n    let avg = Int(round(Double(n + m) / 2))\n    return\
    \ .success(avg.bin)", "    // your code here\n    return .failure(0)", '    return
    .success("")', "    if n > m {\n        return .failure(-1)\n    } else {\n  \
    \      let avg = (n + m) / 2\n        return .success(\"0b\\(String(avg, radix:\
    \ 2))\")\n    }", "    let avrg = (n + m) / 2\n    if n > m {\n        return\
    \ .failure(-1)\n    }\n    return .success(\"0b\\(String(avrg, radix: 2))\")",
  "    guard n <= m else { return .failure(-1) }\n    let sum = (n+m) * (m-n+1) /\
    \ 2\n    let roundedAvg = sum / (m-n+1)\n    let binary = String(roundedAvg, radix:\
    \ 2)\n    return .success(\"0b\\(binary)\")", "  let average = (n + m) / 2\n \
    \ if n > m {\n    return .failure(-1)\n  }\n  return .success(\"0b\\(String(average,\
    \ radix: 2))\")", "    if n > m {\n        return .failure(-1)\n    }\n    let\
    \ avg = (n + m) / 2\n    return .success(\"0b\\(String(avg, radix: 2))\")", " \
    \   if n > m {\n        return .failure(-1)\n    }\n    let avg = Double(n + m)\
    \ / 2\n    let roundedAvg = Int(round(avg))\n    let binary = String(roundedAvg,\
    \ radix: 2)\n    return .success(\"0b\\(binary)\")", "    switch n < m {\n   \
    \ case true:\n        let result = (n + m) / 2\n        return .success(\"0b\\\
    (String(result, radix: 2))\")\n    case false:\n        return .failure(-1)\n\
    \    }", "    guard n <= m else { return .failure(-1) }\n    let avg = Int(round(Double(n\
    \ + m) / 2))\n    return .success(String(avg, radix: 2))", "    if n > m {\n \
    \       return .failure(-1)\n    }\n    var total = 0\n    for num in n...m {\n\
    \        total += num\n    }\n    let avg = Int(round(Double(total) / Double(m\
    \ - n + 1)))\n    return .success(\"0b\\(String(avg, radix: 2))\")", "    if n\
    \ > m {\n        return .failure(-1)\n    }\n    var sum = 0\n    for i in n...m\
    \ {\n        sum += i\n    }\n    let res = sum / (m - n + 1)\n    let binary\
    \ = String(res, radix: 2)\n    return .success(\"0b\\(binary)\")", "    guard\
    \ n <= m else { return .failure(-1) }\n    let result = (n...m).reduce(0, +) /\
    \ (m - n + 1)\n    return .success(String(result, radix: 2))", "    guard n <=\
    \ m else { return .failure(-1) }\n    let average = Int(floor(Double(n + m) /\
    \ 2))\n    return .success(\"0b\\(String(average, radix: 2))\")", "    guard n\
    \ <= m else { return .failure(-1) }\n    let sum = (n...m).reduce(0, +)\n    let\
    \ average = sum / (m - n + 1)\n    return .success(String(average, radix: 2))",
  "    guard n <= m else { return .failure(-1) }\n    let average = ((n + m) / 2).binaryString\n\
    \    return .success(\"0b\\(average)\")", '    return .success("")', "    \n \
    \   guard n <= m else {\n        return .failure(-1)\n    }\n    \n    let sum\
    \ = (n...m).reduce(0, +)\n    let avg = (sum / (m - n + 1))\n    let rounded_avg\
    \ = String(avg, radix: 2)\n    \n    return .success(\"0b\\(rounded_avg)\")",
  "    switch (n, m) {\n    case let (i, j) where i > j:\n        return .failure(-1)\n\
    \    default:\n        let sum = (n...m).reduce(0, +)\n        let avg = sum /\
    \ (m - n + 1)\n        return .success(\"0b\\(String(avg, radix: 2))\")\n    }",
  "    if n > m {\n        return .failure(-1)\n    }\n    let sum = n + m\n    var\
    \ n = n\n    while n <= m {\n        n += 1\n    }\n    let average = n / 2\n\
    \    let binaryString = String(average, radix: 2)\n    return .success(\"0b\\\
    (binaryString)\")", "    guard n <= m else { return .failure(-1) }\n    let sum\
    \ = (n + m) * (m - n + 1) / 2\n    let rounded = Int(floor(Double(sum) / Double(m\
    \ - n + 1) + 0.5))\n    return .success(\"0b\\(String(rounded, radix: 2))\")",
  "    guard n <= m else { return .failure(-1) }\n    return .success(String(format:\
    \ \"0b%b\", [Int(Double(n + m) / 2.0)]))", "    guard n <= m else { return .failure(-1)\
    \ }\n    let avg = Int(n + m) / 2\n    return .success(\"0b\\(String(avg, radix:\
    \ 2))\")", "    guard n <= m else { return .failure(-1) }\n    let result = (Double(n)\
    \ + Double(m)) / 2.0\n    let roundedResult = round(result)\n    let binResult\
    \ = String(Int(roundedResult), radix: 2)\n    return .success(\"0b\\(binResult)\"\
    )", "    // Your code here.\n    let x = (m - n) / 2\n    let y = m - x\n    if\
    \ (m < n) {\n        return .failure(-1)\n    }\n    return .success(\"0b\\(y.binaryValue)\"\
    )", "    // your code here\n    if n > m {\n        return .failure(-1)\n    }\n\
    \    else {\n        var average = 0\n        for number in n...m {\n        \
    \    average += number\n        }\n        average = (average + ((m - n) / 2))\
    \ / (m - n + 1)\n        let binary = String(average, radix: 2)\n        return\
    \ .success(\"0b\\(binary)\")\n    }", "    if n > m {\n        return .failure(-1)\n\
    \    }\n    let sum = n + m\n    let val = sum / 2\n    let avg = String(val,\
    \ radix: 2)\n    return .success(\"0b\\(avg)\")", "    if n > m {\n        return\
    \ .failure(-1)\n    }\n    let avg = (n + m) / 2\n    return .success(\"0b\\(String(avg,\
    \ radix: 2))\")", "    \n    func average(_ n: Int, _ m: Int) -> Int {\n     \
    \   return Int((Double(n + m) / 2.0).rounded())\n    }\n    \n    func intToBinary(_\
    \ n: Int) -> String {\n        return String(n, radix: 2)\n    }\n    \n    guard\
    \ n <= m else { return .failure(-1) }\n    let average = average(n, m)\n    let\
    \ binary = intToBinary(average)\n    return .success(\"0b\\(binary)\")", '    return
    Result(n < m ? (n + m) / 2 : -1)', "    let sum = Int(Double(n + m) / 2)\n   \
    \ guard sum >= n else { return .failure(-1) }\n    return .success(\"0b\\(String(sum,\
    \ radix: 2))\")", "    var counter = 0\n    var sum = 0\n    for x in n...m {\n\
    \        sum += x\n        counter += 1\n    }\n    if counter == 0 {\n      \
    \  return .failure(-1)\n    }\n    let result = sum / counter\n    return .success(String(result,\
    \ radix: 2))", "    guard n <= m else { return .failure(-1) }\n    let avg = (n\
    \ + m) / 2\n    return .success(\"0b\\(String(avg, radix: 2))\")", "    if n >\
    \ m {\n        return .failure(-1)\n    }\n    let sum = (n...m).reduce(0, +)\n\
    \    let rounded_avg = Int(round(Double(sum) / Double(m - n + 1)))\n    return\
    \ .success(String(rounded_avg, radix: 2))", "    if n > m {\n        return .failure(-1)\n\
    \    }\n    let result = (n...m).reduce(0, +) / (m - n + 1)\n    return .success(String(result,\
    \ radix: 2))", "    if n > m {\n        return .failure(-1)\n    }\n    let avg\
    \ = (n...m).reduce(0, +) / (m - n + 1)\n    return .success(String(avg, radix:\
    \ 2))", '    return .success("0b11")', "    guard n <= m else { return .failure(-1)\
    \ }\n    let avg = (n + m) / 2\n    return .success(\"0b\\(String(avg, radix:\
    \ 2))\")", "    guard n <= m else { return .failure(-1) }\n    let sum = (n +\
    \ m) * (m - n + 1) / 2\n    let average = sum / (m - n + 1)\n    return .success(\"\
    0b\\(String(average, radix: 2))\")", "    let avg = (n + m) / 2\n    return avg\
    \ > m ? .failure(-1) : .success(\"0b\\(String(avg, radix: 2))\")", "    if n >\
    \ m {\n        return .failure(-1)\n    }\n    let average = (n...m).reduce(0,\
    \ +) / (m - n + 1)\n    return .success(String(average, radix: 2))", "    guard\
    \ n <= m else { return .failure(-1) }\n    let avg = (n + m) / 2\n    return .success(\"\
    0b\\(String(avg, radix: 2))\")", "    if n > m {\n        return .failure(-1)\n\
    \    }\n    let average = Int(floor(Double(n + m) / 2))\n    return .success(\"\
    0b\\(String(average, radix: 2))\")", "    guard n <= m else { return .failure(-1)\
    \ }\n    let avg = Int(round(Double(n + m) / 2))\n    return .success(String(avg,\
    \ radix: 2))", "    if n > m {\n        return .failure(-1)\n    }\n    // Write\
    \ your code below \U0001F913\n    let roundedAvarage = floor((Double(n) + Double(m))\
    \ / 2)\n    let binaryString = String(Int(roundedAvarage), radix: 2)\n    return\
    \ .success(\"0b\\(binaryString)\")", "    var sum = 0\n    for i in n...m {\n\
    \        sum += i\n    }\n    if n > m {\n        return .failure(-1)\n    }\n\
    \    else {\n        return .success(String(sum/((m-n)+1), radix: 2))\n    }",
  "    \n    // your code goes here.\n    \n    let sum = (n+m)*(m-n+1)/2\n    let\
    \ average = Int(round(Double(sum)/Double(m-n+1)))\n    let binary = String(average,\
    \ radix: 2)\n    let result = \"0b\" + binary\n    \n    if n > m {\n        return\
    \ .failure(-1)\n    } else {\n        return .success(result)\n    }", "    if\
    \ n > m {\n        return .failure(-1)\n    }\n    let sum = (n + m) * (m - n\
    \ + 1) / 2\n    let roundedAvg = sum / (m - n + 1)\n    let binary = String(roundedAvg,\
    \ radix: 2)\n    return .success(\"0b\\(binary)\")", '    return .success("0b1010")',
  "    if n > m {\n        return .failure(-1)\n    }\n    let sum = (n...m).reduce(0,\
    \ +)\n    let avg = sum / (m - n + 1)\n    let output = String(avg, radix: 2)\n\
    \    return .success(\"0b\\(output)\")", "    // TODO: Implement!\n    return\
    \ .failure(0)", "    if n <= m {\n        let avg = Double(n + m) / 2\n      \
    \  let rounded = Int(round(avg))\n        let binary = String(rounded, radix:\
    \ 2)\n        return .success(\"0b\\(binary)\")\n    } else {\n        return\
    \ .failure(-1)\n    }", "    if n > m {\n        return .failure(-1)\n    }\n\
    \    let avg = Double(n + m) / 2\n    let decimal = (avg - floor(avg)) >= 0.5\
    \ ? ceil(avg) : floor(avg)\n    return .success(\"0b\\(String(Int(decimal), radix:\
    \ 2))\")", "    if n > m {\n        return .failure(-1)\n    }\n    let average\
    \ = (n...m).reduce(0, +) / (m - n + 1)\n    return .success(String(average, radix:\
    \ 2))", '    return .success("")', "    guard n <= m else { return .failure(-1)\
    \ }\n    let sum = (n...m).reduce(0, +)\n    let avg = sum / (n - m)\n    let\
    \ avg_bin = String(avg, radix: 2)\n    return .success(\"0b\\(avg_bin)\")", '    return
    .success("0b\(Int(round(Double(n + m) / 2)).binary)")', "    guard n <= m else\
    \ { return .failure(-1) }\n    let average = String(format: \"0b%b\", (n + m)\
    \ / 2)\n    return .success(average)", "    if n > m {\n        return .failure(-1)\n\
    \    }\n    return .success(String(Int(floor((n + m) / 2)).toBinary, radix: 2))",
  "    if n > m {\n        return .failure(-1)\n    }\n    let intResult = Int(Double(n\
    \ + m) / 2)\n    return .success(String(intResult, radix: 2))", "    guard n <=\
    \ m else { return .failure(-1) }\n    let avg = n + (m - n) / 2\n    return .success(\"\
    0b\\(String(avg, radix: 2))\")", "    if n > m {\n        return .failure(-1)\n\
    \    }\n    let average = Int(Double(n + m) / 2.0)\n    return .success(\"0b\\\
    (String(average, radix: 2))\")", "    if n > m {\n        return .failure(-1)\n\
    \    }\n    return .success(\"0b\\(String(Int(round(Double(m + n) / 2)), radix:\
    \ 2))\")", "    var sum = 0\n    if n > m {\n        return .failure(-1)\n   \
    \ }\n    else {\n        for index in n...m {\n            sum += index\n    \
    \    }\n        let average = String(sum / (m - n + 1), radix: 2)\n        return\
    \ .success(\"0b\\(average)\")\n    }", "    guard n <= m else { return .failure(-1)\
    \ }\n    return .success(String(avg(n: n, m: m), radix: 2))", "    guard n <=\
    \ m else { return .failure(-1) }\n    let rounded = String(Int(round(Double(n\
    \ + m) / 2)), radix: 2)\n    return .success(\"0b\\(rounded)\")", "    guard n\
    \ <= m else { return .failure(-1) }\n    let result = (n + m) / 2\n    return\
    \ .success(\"0b\\(String(result, radix: 2))\")", "    let average = (n + m) /\
    \ 2\n    if n > m {\n        return .failure(-1)\n    }\n    return .success(\"\
    0b\\(String(average, radix: 2))\")", "    var sum = 0\n    if n <= m {\n     \
    \   for num in n...m {\n            sum += num\n        }\n        return Result.success(String(format:\
    \ \"0b%b\", sum / (m - n + 1)))\n    } else {\n        return Result.failure(-1)\n\
    \    }", '    return n > m ? .failure(-1) : .success("0b\(String(Int((n + m) /
    2), radix: 2))")', "    guard n <= m else { return .failure(-1) }\n    let avg\
    \ = round((Double(n) + Double(m)) / 2)\n    let result = String(avg, radix: 2)\n\
    \    return .success(\"0b\\(result)\")", "    guard n <= m else { return .failure(-1)\
    \ }\n    let avg = ((n + m) / 2).binaryString\n    return .success(\"0b\\(avg)\"\
    )", "    var roundedSum = 0\n    for i in n...m {\n        roundedSum += i\n \
    \   }\n    let avg = roundedSum / (m - n + 1)\n    return Result(catching: { try\
    \ avg.toBinary() })", "    // your code here\n    return .failure(0)", "    \n\
    \    guard n <= m else {\n        return .failure(-1)\n    }\n    \n    let avg:\
    \ Double = Double(n + m) / 2\n    let binary = String(Int(avg), radix: 2)\n  \
    \  \n    return .success(\"0b\\(binary)\")", "    guard n <= m else { return .failure(-1)\
    \ }\n    let sum = (n + m) * (m - n + 1) / 2\n    let avg = sum / (m - n + 1)\n\
    \    return .success(\"0b\\(String(avg, radix: 2))\")", "    guard n <= m else\
    \ { return .failure(-1) }\n    let avg = (n + m) / 2\n    return .success(\"0b\\\
    (String(avg, radix: 2))\")", "    guard n <= m else { return .failure(-1) }\n\
    \    let sum = n.addingReportingOverflow(m)\n    let avg = sum.overflow ? nil\
    \ : sum.partialValue / 2\n    guard let num = avg else { return .failure(-1) }\n\
    \    return .success(String(format: \"0b%x\", num))", "    guard n <= m else {\
    \ return .failure(-1) }\n    let sum = (n + m) * (m - n + 1) / 2\n    let avg\
    \ = sum / (m - n + 1)\n    return .success(\"0b\\(String(avg, radix: 2))\")",
  "    if n > m {\n        return .failure(-1)\n    }\n    let avg = ((m + n) / 2).binary()\n\
    \    return .success(avg)", "    guard n <= m else { return .failure(-1) }\n \
    \   let avg = Int(Double(n + m) / 2.0)\n    return .success(\"0b\\(String(avg,\
    \ radix: 2))\")", "    if n > m {\n        return .failure(-1)\n    }\n    let\
    \ avg = ((m - n) / 2) + n\n    return .success(String(avg, radix: 2))", "    guard\
    \ n <= m else { return .failure(-1) }\n    let avg = (n + m) / 2\n    return .success(\"\
    0b\\(String(avg, radix: 2))\")", "    let r = (n + m) / 2\n    if r == 0 {\n \
    \       return .success(\"0b0\")\n    }\n    var s = \"\"\n    var rr = r\n  \
    \  while rr > 0 {\n        s.append(rr % 2 == 0 ? \"0\" : \"1\")\n        rr /=\
    \ 2\n    }\n    return .success(\"0b\\(String(s.reversed()))\")", '    return
    .success("")', "    if n > m {\n        return .failure(-1)\n    }\n    let sum\
    \ = (n...m).reduce(0, +)\n    let avg = (sum / (m - n + 1))\n    return .success(String(avg,\
    \ radix: 2))", "    switch n {\n    case ...m:\n        return Result.success(String(Int((n\
    \ + m) / 2), radix: 2))\n    default:\n        return Result.failure(-1)\n   \
    \ }", "    if n > m {\n        return .failure(-1)\n    }\n    let avg = Double(n\
    \ + m) / 2\n    let roundedAvg = Int(avg.rounded())\n    let avgBinary = String(roundedAvg,\
    \ radix: 2)\n    return .success(\"0b\\(avgBinary)\")", "    var averageInt: Int\
    \ {\n        return (n + m) / 2\n    }\n    var averageBinary: String {\n    \
    \    return String(averageInt, radix: 2)\n    }\n    return (n > m) ? .failure(-1)\
    \ : .success(\"0b\\(averageBinary)\")", "    // TODO: Write some code to solve\
    \ this coding challenge\n    return .failure(0)", "    if n > m {\n        return\
    \ .failure(-1)\n    }\n    let roundedAvg = ((n + m) / 2).toBinaryString()\n \
    \   return .success(\"0b\\(roundedAvg)\")", "    \n    if (n > m) {\n        return\
    \ .failure(-1)\n    }\n    \n    var sum = 0\n    for index in n...m {\n     \
    \   sum += index\n    }\n    \n    let average = sum / (m - n + 1)\n    let binary\
    \ = String(average, radix: 2)\n    \n    return .success(\"0b\\(binary)\")", " \
    \   if n > m {\n        return .failure(-1)\n    }\n    let avg = (n + m) / 2\n\
    \    return .success(\"0b\\(String(avg, radix: 2))\")", "    if n > m {\n    \
    \    return .failure(-1)\n    }\n    return .success(String(numbers: m...n, averageFunction:\
    \ { round($0.average).binary })!)", "    if n > m {\n        return .failure(-1)\n\
    \    }\n    let avg = Double(n + m) / 2\n    let binary = String(Int(avg.rounded()),\
    \ radix: 2)\n    return .success(\"0b\\(binary)\")", '    return -1', "    switch\
    \ n {\n    case ...m:\n        return Result.success(String(format: \"0b%x\",\
    \ (n + m) / 2))\n    default:\n        return Result.failure(-1)\n    }", "  \
    \  return Result {\n        if n > m {\n            throw -1\n        }\n    \
    \    let average = (n + m) / 2\n        return \"0b\\(String(average, radix: 2))\"\
    \n    }", "    if n <= m {\n        let sum = n + m\n        let count = 2\n \
    \       let average = sum / count\n        let binary = String(average, radix:\
    \ 2)\n        return .success(\"0b\\(binary)\")\n    } else {\n        return\
    \ .failure(-1)\n    }", "    guard n <= m else { return .failure(-1) }\n    let\
    \ avg = Double(n + m) / 2\n    let rounded = Int(avg.rounded())\n    let binary\
    \ = String(rounded, radix: 2)\n    return .success(\"0b\\(binary)\")", "    guard\
    \ n <= m else { return .failure(-1) }\n    let avg = (n + m) / 2\n    return .success(\"\
    0b\\(String(avg, radix: 2))\")", '    return .success("0b11")', "    let result\
    \ = (n + m) / 2\n    if n > m {\n        return .failure(-1)\n    }\n    return\
    \ .success(String(result, radix: 2))", "    guard n <= m else { return .failure(-1)\
    \ }\n    return .success(String(format: \"0b%b\", (n + m) / 2))", "    return\
    \ Result {\n        guard n <= m else { throw -1 }\n        return String(Int(0b1\
    \ + (n + m) / 2), radix: 2)\n    }"]
stop_tokens:
- "\n}"
