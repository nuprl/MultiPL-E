name: HumanEval_155_even_odd_count
language: swift
prompt: "\n/// Given an integer. return a tuple that has the number of even and odd\
  \ digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n/// (1,\
  \ 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num: Int)\
  \ -> (Int, Int) {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num:\
  \ -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
  \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
  \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
  \ 0) == (1, 0))"
completions: ["    var number = num\n    var even = 0\n    var odd = 0\n    while\
    \ number != 0 {\n        let mod = number % 10\n        if mod % 2 == 0 {\n  \
    \          even += 1\n        } else {\n            odd += 1\n        }\n    \
    \    number /= 10\n    }\n    return (even, odd)", "    var even = 0\n    var\
    \ odd = 0\n    for i in num.abs.digits {\n        if i % 2 == 0 {\n          \
    \  even += 1\n        } else {\n            odd += 1\n        }\n    }\n    return\
    \ (even, odd)", "  var evenCount = 0\n  var oddCount = 0\n  var currentNumber\
    \ = num\n  repeat {\n    let digit = currentNumber % 10\n    if digit.isMultiple(of:\
    \ 2) {\n      evenCount += 1\n    } else {\n      oddCount += 1\n    }\n    currentNumber\
    \ /= 10\n  } while currentNumber != 0\n  return (evenCount, oddCount)", "    var\
    \ even = 0\n    var odd = 0\n    for n in String(num).map({Int(String($0))!})\
    \ {\n        if n % 2 == 0 {\n            even += 1\n        } else {\n      \
    \      odd += 1\n        }\n    }\n    return (even, odd)", "    var even = 0\n\
    \    var odd = 0\n    for i in String(num).split(separator: \" \") {\n       \
    \ if Int(i)! % 2 == 0 {\n            even += 1\n        }\n        else {\n  \
    \          odd += 1\n        }\n    }\n    return (even, odd)", "    var even:\
    \ Int = 0\n    var odd: Int = 0\n    var remainder: Int = 0\n    var num = num\n\
    \    while num != 0 {\n        remainder = num % 10\n        if remainder % 2\
    \ == 0 {\n            even += 1\n        } else {\n            odd += 1\n    \
    \    }\n        num /= 10\n    }\n    return (even, odd)", "    var evenCount\
    \ = 0\n    var oddCount = 0\n    var x = num\n\n    if num == 0 {\n        return\
    \ (1, 0)\n    }\n\n    while x != 0 {\n        if x % 2 == 0 {\n            evenCount\
    \ += 1\n        } else {\n            oddCount += 1\n        }\n        x /= 10\n\
    \    }\n\n    return (evenCount, oddCount)", "    var (even, odd) = (0, 0)\n \
    \   for digit in String(num).map({ Int(String($0))! }) {\n        if digit % 2\
    \ == 0 {\n            even += 1\n        } else {\n            odd += 1\n    \
    \    }\n    }\n    return (even, odd)", "    var evenCount = 0\n    var oddCount\
    \ = 0\n    let num = abs(num)\n    var tempNum = num\n    while tempNum > 0 {\n\
    \        let lastDigit = tempNum % 10\n        if lastDigit % 2 == 0 {\n     \
    \       evenCount += 1\n        } else {\n            oddCount += 1\n        }\n\
    \        tempNum /= 10\n    }\n    return (evenCount, oddCount)", '    return
    (0, 0)', "    var number = num\n    var odd = 0\n    var even = 0\n    while number\
    \ != 0 {\n        if number % 2 == 0 {\n            even += 1\n        } else\
    \ {\n            odd += 1\n        }\n        number /= 10\n    }\n    return\
    \ (even, odd)", "    let digits = Array(String(num)).compactMap { Int(String($0))\
    \ }\n    let even = digits.filter { $0 % 2 == 0 }.count\n    let odd = digits.filter\
    \ { $0 % 2 != 0 }.count\n    return (even, odd)", "    var even = 0\n    var odd\
    \ = 0\n    if num < 0 {\n        let str_n = String(abs(num))\n        for ch\
    \ in str_n {\n            if let digit = Int(String(ch)) {\n                if\
    \ digit % 2 == 0 {\n                    even += 1\n                } else {\n\
    \                    odd += 1\n                }\n            }\n        }\n \
    \   } else {\n        let str_n = String(num)\n        for ch in str_n {\n   \
    \         if let digit = Int(String(ch)) {\n                if digit % 2 == 0\
    \ {\n                    even += 1\n                } else {\n               \
    \     odd += 1\n                }\n            }\n        }\n    }\n    return\
    \ (even, odd)", '    return (0, 0)', "    var evenCount = 0\n    var oddCount\
    \ = 0\n    var copyOfNumber = num\n    while copyOfNumber != 0 {\n        if abs(copyOfNumber\
    \ % 10) % 2 == 0 {\n            evenCount += 1\n        } else {\n           \
    \ oddCount += 1\n        }\n        copyOfNumber /= 10\n    }\n    return (evenCount,\
    \ oddCount)", "    \n    var odd = 0\n    var even = 0\n    \n    for character\
    \ in String(num).characters {\n        let num = Int(String(character))!\n   \
    \     if num % 2 == 0 {\n            even += 1\n        } else {\n           \
    \ odd += 1\n        }\n    }\n    \n    return (even, odd)", "    let digits =\
    \ digits_of(num: num)\n    var even = 0\n    var odd = 0\n    for digit in digits\
    \ {\n        if digit % 2 == 0 {\n            even += 1\n        } else {\n  \
    \          odd += 1\n        }\n    }\n    return (even, odd)", '    return (0,
    0)', "    var even = 0\n    var odd = 0\n    if num < 0 {\n        num *= -1\n\
    \    }\n    for i in num.string {\n        let num = Int(String(i))!\n       \
    \ if num % 2 == 0 {\n            even += 1\n        } else {\n            odd\
    \ += 1\n        }\n    }\n    return (even, odd)", "  /// Fill in your code here\n\
    \  return (0, 0)", "    var evenCount = 0\n    var oddCount = 0\n    var tempNum\
    \ = num\n    while tempNum != 0 {\n        let lastDigit = tempNum % 10\n    \
    \    if lastDigit % 2 == 0 {\n            evenCount += 1\n        } else {\n \
    \           oddCount += 1\n        }\n        tempNum /= 10\n    }\n    return\
    \ (evenCount, oddCount)", "    \n    var even_count = 0\n    var odd_count = 0\n\
    \    \n    for i in String(num).characters {\n        if Int(String(i))! % 2 ==\
    \ 0 {\n            even_count += 1\n        } else {\n            odd_count +=\
    \ 1\n        }\n    }\n    \n    return (even_count, odd_count)", '    return
    (0, 0)', "    var even_cnt = 0\n    var odd_cnt = 0\n    for c in String(num)\
    \ {\n        if let c = Int(String(c)) {\n            if c % 2 == 0 {\n      \
    \          even_cnt += 1\n            } else {\n                odd_cnt += 1\n\
    \            }\n        }\n    }\n    return (even_cnt, odd_cnt)", "    var evens\
    \ = 0\n    var odds = 0\n    var absoluteNum = abs(num)\n    while absoluteNum\
    \ > 0 {\n        let currDigit = absoluteNum % 10\n        if currDigit % 2 ==\
    \ 0 {\n            evens += 1\n        } else {\n            odds += 1\n     \
    \   }\n        absoluteNum /= 10\n    }\n    return (evens, odds)", "    // var\
    \ evenCount = 0\n    // var oddCount = 0\n    // for digit in String(num).compactMap({\
    \ Int(String($0)) }) {\n    //     switch digit {\n    //     case ...0:\n   \
    \ //         oddCount += 1\n    //     default:\n    //         evenCount += 1\n\
    \    //     }\n    // }\n    // return (evenCount, oddCount)\n    return (String(num).filter({\
    \ $0.isNumber && Int($0.ascii!)! % 2 == 0 }).count, String(num).filter({ $0.isNumber\
    \ && Int($0.ascii!)! % 2 != 0 }).count)", "    let positive = abs(num)\n    var\
    \ evenCount = 0\n    var oddCount = 0\n    while positive > 0 {\n        let digit\
    \ = positive % 10\n        if digit % 2 == 0 {\n            evenCount += 1\n \
    \       } else {\n            oddCount += 1\n        }\n        positive /= 10\n\
    \    }\n    return (evenCount, oddCount)", "    // TODO: Write some code to solve\
    \ this coding challenge\n    return (0, 0)", '    fatalError("TODO: Implement
    even_odd_count")', "    // Write your code here\n    // return (0, 0)\n    var\
    \ even = 0\n    var odd = 0\n    for i in String(num).characters {\n        let\
    \ a = Int(String(i))\n        if a! % 2 == 0 {\n            even += 1\n      \
    \  } else {\n            odd += 1\n        }\n    }\n    return (even, odd)",
  "    var even_count = 0\n    var odd_count = 0\n    var num = num\n    while num\
    \ != 0 {\n        let dig = num % 10\n        if dig % 2 == 0 {\n            even_count\
    \ += 1\n        } else {\n            odd_count += 1\n        }\n        num /=\
    \ 10\n    }\n    return (even_count, odd_count)", "    var count_even = 0\n  \
    \  var count_odd = 0\n    let num = String(num)\n    for i in num {\n        if\
    \ String(i).intValue! % 2 == 0 {\n            count_even += 1\n        } else\
    \ {\n            count_odd += 1\n        }\n    }\n    return (count_even, count_odd)",
  "    var number = num\n    var evenCount = 0\n    var oddCount = 0\n    while number\
    \ != 0 {\n        let lastDigit = number % 10\n        if lastDigit % 2 == 0 {\n\
    \            evenCount += 1\n        } else {\n            oddCount += 1\n   \
    \     }\n        number /= 10\n    }\n    return (evenCount, oddCount)", "  let\
    \ num_str = String(num)\n  var even_count = 0\n  var odd_count = 0\n  for i in\
    \ num_str {\n    let i_int = Int(String(i))!\n    if i_int % 2 == 0 {\n      even_count\
    \ += 1\n    } else {\n      odd_count += 1\n    }\n  }\n  return (even_count,\
    \ odd_count)", "    let num = abs(num)\n    var numOfEven = 0\n    var numOfOdd\
    \ = 0\n    for digit in \"\\(num)\".characters {\n        if let number = Int(\"\
    \\(digit)\") {\n            if number % 2 == 0 {\n                numOfEven +=\
    \ 1\n            } else {\n                numOfOdd += 1\n            }\n    \
    \    }\n    }\n    return (numOfEven, numOfOdd)", "    if num == 0 {\n       \
    \ return (1, 0)\n    }\n    var n = num\n    var even = 0\n    var odd = 0\n \
    \   while n != 0 {\n        let lastDigit = n % 10\n        if lastDigit % 2 ==\
    \ 0 {\n            even += 1\n        } else {\n            odd += 1\n       \
    \ }\n        n /= 10\n    }\n    return (even, odd)", "    let str = String(num)\n\
    \    var even = 0\n    var odd = 0\n    for char in str {\n        let num = Int(String(char))!\n\
    \        if num % 2 == 0 {\n            even += 1\n        } else {\n        \
    \    odd += 1\n        }\n    }\n    return (even, odd)", "    var even = 0\n\
    \    var odd = 0\n    let absNum = abs(num)\n    for (index, digit) in absNum.digits.enumerated()\
    \ {\n        if index % 2 == 0 {\n            if digit % 2 == 0 {\n          \
    \      even += 1\n            } else {\n                odd += 1\n           \
    \ }\n        } else {\n            if digit % 2 == 0 {\n                odd +=\
    \ 1\n            } else {\n                even += 1\n            }\n        }\n\
    \    }\n    return (even, odd)", "    var evenCount = 0\n    var oddCount = 0\n\
    \    var number = num\n    if number < 0 {\n        number = -number\n    }\n\
    \    while number > 0 {\n        let lastDigit = number % 10\n        if lastDigit\
    \ % 2 == 0 {\n            evenCount += 1\n        } else {\n            oddCount\
    \ += 1\n        }\n        number /= 10\n    }\n    return (evenCount, oddCount)",
  "    var num = num\n    var even = 0\n    var odd = 0\n    while num != 0 {\n  \
    \      if num % 2 == 0 {\n            even += 1\n        } else {\n          \
    \  odd += 1\n        }\n        num /= 10\n    }\n    return (even, odd)", " \
    \   var num = num\n    var even = 0\n    var odd = 0\n    if num < 0 {\n     \
    \   num = -num\n    }\n    while num > 0 {\n        if num % 2 == 0 {\n      \
    \      even += 1\n        } else {\n            odd += 1\n        }\n        num\
    \ /= 10\n    }\n    return (even, odd)", "    let digit = get_digits(num: num)\n\
    \    var even_count = 0\n    var odd_count = 0\n    for i in digit {\n       \
    \ if i % 2 == 0 {\n            even_count += 1\n        } else {\n           \
    \ odd_count += 1\n        }\n    }\n    return (even_count, odd_count)", "   \
    \ var ev = 0\n    var od = 0\n    var num = num\n    if num < 0 {\n        num\
    \ = -num\n    }\n    while num > 0 {\n        if num % 2 == 0 {\n            ev\
    \ += 1\n        } else {\n            od += 1\n        }\n        num /= 10\n\
    \    }\n    return (ev, od)", "    var even_count = 0\n    var odd_count = 0\n\
    \    for char in String(num) {\n        if char.isNumber {\n            if Int(String(char))!\
    \ % 2 == 0 {\n                even_count += 1\n            } else {\n        \
    \        odd_count += 1\n            }\n        }\n    }\n    return (even_count,\
    \ odd_count)", "    var evenCount = 0\n    var oddCount = 0\n    var n = num\n\
    \    if num < 0 {\n        n = num * -1\n    }\n    while n > 0 {\n        let\
    \ digit = n % 10\n        if digit % 2 == 0 {\n            evenCount += 1\n  \
    \      } else {\n            oddCount += 1\n        }\n        n /= 10\n    }\n\
    \    return (evenCount, oddCount)", "    var copy = num\n    var odd = 0\n   \
    \ var even = 0\n    if copy < 0 {\n        copy *= -1\n    }\n    while copy >\
    \ 0 {\n        if copy % 2 == 0 {\n            even += 1\n        } else {\n \
    \           odd += 1\n        }\n        copy /= 10\n    }\n    return (even,\
    \ odd)", '    return (0, 0)', "    // your code goes here\n    return (0, 0)",
  '    return (0, 0)', "    // YOUR CODE GOES HERE\n    return (0, 0)", "    var evenCount\
    \ = 0\n    var oddCount = 0\n    var tempNum = num\n    while tempNum != 0 {\n\
    \        let temp = tempNum % 10\n        if temp % 2 == 0 {\n            evenCount\
    \ += 1\n        } else {\n            oddCount += 1\n        }\n        tempNum\
    \ /= 10\n    }\n    return (evenCount, oddCount)", "  var evens = 0\n  var odds\
    \ = 0\n  let string = String(num)\n  for char in string {\n    if char.wholeNumberValue\
    \ == nil {\n      continue\n    }\n    let value = char.wholeNumberValue!\n  \
    \  if value % 2 == 0 {\n      evens += 1\n    } else {\n      odds += 1\n    }\n\
    \  }\n  return (evens, odds)", "    var even: Int = 0\n    var odd: Int = 0\n\
    \    var tempNum = num\n    if num < 0 {\n        tempNum = tempNum * -1\n   \
    \ }\n    for _ in 1...Int(log10(Double(tempNum))) + 1 {\n        if tempNum %\
    \ 2 == 0 {\n            even += 1\n        } else {\n            odd += 1\n  \
    \      }\n        tempNum /= 10\n    }\n    return (even, odd)", "    var _evenCount\
    \ = 0\n    var _oddCount = 0\n    let _rawNum = abs(num)\n    for digit in String(_rawNum)\
    \ {\n        if (digit % 2 == 0) {\n            _evenCount += 1\n        } else\
    \ {\n            _oddCount += 1\n        }\n    }\n    return (_evenCount, _oddCount)",
  '    fatalError("Replace with your own implementation")', "    var even_count =\
    \ 0\n    var odd_count = 0\n    var str_num = String(num)\n    if num < 0 {\n\
    \        str_num.removeFirst()\n    }\n    for char in str_num {\n        if Int(String(char))!\
    \ % 2 == 0 {\n            even_count += 1\n        } else {\n            odd_count\
    \ += 1\n        }\n    }\n    return (even_count, odd_count)", "    var num =\
    \ num\n    var even = 0\n    var odd = 0\n    while num != 0 {\n        let digit\
    \ = num % 10\n        if digit % 2 == 0 {\n            even += 1\n        } else\
    \ {\n            odd += 1\n        }\n        num /= 10\n    }\n    return (even,\
    \ odd)", "    var even_count = 0\n    var odd_count = 0\n    for item in String(num)\
    \ {\n        if String(item).intValue % 2 == 0 {\n            even_count += 1\n\
    \        } else {\n            odd_count += 1\n        }\n    }\n    return (even_count,\
    \ odd_count)", "    var even_count = 0\n    var odd_count = 0\n    var num1 =\
    \ num\n    if num < 0 {\n        num1 = -num\n    }\n    while num1 > 0 {\n  \
    \      if num1 % 2 == 0 {\n            even_count += 1\n        } else {\n   \
    \         odd_count += 1\n        }\n        num1 /= 10\n    }\n    return (even_count,\
    \ odd_count)", "    // if num is less than zero, use recursion\n    // to get\
    \ the absolute value of num, then\n    // get the absolute value of the sum of\
    \ the\n    // individual digits.\n    let sum = num < 0 ? abs(num) :\n       \
    \ abs(num.to_string().reduce(0) { $0 + Int(String($1))! })\n    var even = 0\n\
    \    var odd = 0\n    // count the number of even and odd digits\n    // in the\
    \ sum\n    for i in sum.to_string() {\n        let j = Int(String(i))!\n     \
    \   if j % 2 == 0 {\n            even += 1\n        } else {\n            odd\
    \ += 1\n        }\n    }\n    return (even, odd)", "    var even_count = 0\n \
    \   var odd_count = 0\n    var input = num\n    while input != 0 {\n        let\
    \ digit = input % 10\n        if digit.isMultiple(of: 2) {\n            even_count\
    \ += 1\n        } else {\n            odd_count += 1\n        }\n        input\
    \ /= 10\n    }\n    return (even_count, odd_count)", "    let num_str = String(num)\n\
    \    var odds = 0\n    var evens = 0\n    for c in num_str {\n        if let n\
    \ = Int(String(c)) {\n            if n % 2 == 0 {\n                evens += 1\n\
    \            } else {\n                odds += 1\n            }\n        }\n \
    \   }\n    return (evens, odds)", "    var even_count = 0\n    var odd_count =\
    \ 0\n    var remainder = num\n    if remainder < 0 {\n        remainder = -remainder\n\
    \    }\n    while remainder > 0 {\n        if remainder % 2 == 0 {\n         \
    \   even_count += 1\n        } else {\n            odd_count += 1\n        }\n\
    \        remainder /= 10\n    }\n    return (even_count, odd_count)", '    return
    (0, 0)', "    var evenCount = 0\n    var oddCount = 0\n    var numString = \"\\\
    (num)\"\n    let numStringCount = numString.count\n    if numString.first == \"\
    -\" {\n        numString.removeFirst()\n    }\n    let numStringArray = Array(numString)\n\
    \    for number in numStringArray {\n        if let numberAsInt = Int(String(number))\
    \ {\n            if numberAsInt % 2 == 0 {\n                evenCount += 1\n \
    \           } else {\n                oddCount += 1\n            }\n        }\n\
    \    }\n    return (evenCount, oddCount)", "    /// Initialize even and odd count\
    \ to zero\n    var even_count = 0\n    var odd_count = 0\n    \n    /// Get the\
    \ absolute value of the number to simplify and reduce the logic\n    var num =\
    \ abs(num)\n    \n    /// Get the reminder of the number and add 1 to the counter\
    \ of even or odd\n    while num > 0 {\n        let rem = num % 10\n        if\
    \ rem % 2 == 0 {\n            even_count += 1\n        } else {\n            odd_count\
    \ += 1\n        }\n        num /= 10\n    }\n    \n    return (even_count, odd_count)",
  "    var even = 0\n    var odd = 0\n    for i in String(num) {\n        if Int(String(i))!\
    \ % 2 == 0 {\n            even += 1\n        } else {\n            odd += 1\n\
    \        }\n    }\n    return (even, odd)", '    return (0, 0)', "  let num =\
    \ abs(num)\n  var evens = 0\n  var odds = 0\n  for digit in \"\\(num)\".characters\
    \ {\n    let digit = Int(String(digit))!\n    if digit % 2 == 0 {\n      evens\
    \ += 1\n    } else {\n      odds += 1\n    }\n  }\n  return (evens, odds)", " \
    \ var newNum = num\n  var even = 0\n  var odd = 0\n  if newNum < 0 {\n    newNum\
    \ = newNum * -1\n  }\n  while newNum > 0 {\n    let digit = newNum % 10\n    if\
    \ digit % 2 == 0 {\n      even += 1\n    } else {\n      odd += 1\n    }\n   \
    \ newNum = newNum / 10\n  }\n  return (even, odd)", "    var even = 0\n    var\
    \ odd = 0\n    var num = num\n    if num < 0 {\n        num = -num\n    }\n  \
    \  for _ in 0..<num.digits {\n        if num % 2 == 0 {\n            even += 1\n\
    \        } else {\n            odd += 1\n        }\n        num /= 10\n    }\n\
    \    return (even, odd)", "    var even_count = 0\n    var odd_count = 0\n   \
    \ var number = num\n    while number != 0 {\n        let digit = number % 10\n\
    \        if digit % 2 == 0 {\n            even_count += 1\n        } else {\n\
    \            odd_count += 1\n        }\n        number /= 10\n    }\n    return\
    \ (even_count, odd_count)", '    return (0, 0)', "    var even: Int = 0\n    var\
    \ odd: Int = 0\n    for n in String(num).characters {\n        if n == \"-\" {\n\
    \            continue\n        }\n        if Int(String(n))! % 2 == 0 {\n    \
    \        even += 1\n        } else {\n            odd += 1\n        }\n    }\n\
    \    return (even, odd)", "    var even = 0\n    var odd = 0\n    var value =\
    \ num\n    while value != 0 {\n        let digit = value % 10\n        if digit\
    \ % 2 == 0 {\n            even += 1\n        } else {\n            odd += 1\n\
    \        }\n        value /= 10\n    }\n    return (even, odd)", "    let num\
    \ = abs(num)\n    var even = 0\n    var odd = 0\n    for digit in String(num)\
    \ {\n        if Int(String(digit))! % 2 == 0 {\n            even += 1\n      \
    \  } else {\n            odd += 1\n        }\n    }\n    return (even, odd)",
  "    var evens = 0\n    var odds = 0\n    var num = num\n    if num < 0 {\n    \
    \    num = -num\n    }\n    while num > 0 {\n        if num % 2 == 0 {\n     \
    \       evens += 1\n        } else {\n            odds += 1\n        }\n     \
    \   num /= 10\n    }\n    return (evens, odds)", "    var even = 0\n    var odd\
    \ = 0\n    var _num = num\n    while _num != 0 {\n        let digit = _num % 10\n\
    \        if digit.isMultiple(of: 2) {\n            even += 1\n        } else {\n\
    \            odd += 1\n        }\n        _num /= 10\n    }\n    return (even,\
    \ odd)", "    var even_count = 0\n    var odd_count = 0\n    var temp = num\n\
    \    if temp == 0 {\n        return (1, 0)\n    }\n    else if temp < 0 {\n  \
    \      temp = -temp\n    }\n    while temp > 0 {\n        let last_digit = temp\
    \ % 10\n        if last_digit % 2 == 0 {\n            even_count += 1\n      \
    \  }\n        else {\n            odd_count += 1\n        }\n        temp /= 10\n\
    \    }\n    return (even_count, odd_count)", "    var positive_num = abs(num)\n\
    \    var even_count = 0\n    var odd_count = 0\n    while positive_num > 0 {\n\
    \        let last_digit = positive_num % 10\n        if last_digit % 2 == 0 {\n\
    \            even_count += 1\n        } else {\n            odd_count += 1\n \
    \       }\n        positive_num /= 10\n    }\n    return (even_count, odd_count)",
  '    return (0, 0)', "    let arrayOfDigits = String(num).compactMap { Int(String($0))\
    \ }\n    var oddNumbers = 0\n    var evenNumbers = 0\n    for num in arrayOfDigits\
    \ {\n        if num % 2 == 0 {\n            evenNumbers += 1\n        } else {\n\
    \            oddNumbers += 1\n        }\n    }\n    return (evenNumbers, oddNumbers)",
  "    var num = num\n    var count_even = 0\n    var count_odd = 0\n    while num\
    \ != 0 {\n        let mod = num % 10\n        if mod % 2 == 0 {\n            count_even\
    \ += 1\n        } else {\n            count_odd += 1\n        }\n        num /=\
    \ 10\n    }\n    return (count_even, count_odd)", '    return (0, 0)', "    var\
    \ evenCount = 0\n    var oddCount = 0\n    let numAbs = abs(num)\n    var stringNum\
    \ = String(numAbs)\n    for digit in stringNum {\n        if Int(String(digit))!\
    \ % 2 == 0 {\n            evenCount += 1\n        } else {\n            oddCount\
    \ += 1\n        }\n    }\n    return (evenCount, oddCount)", "    var evenCount\
    \ = 0\n    var oddCount = 0\n    for char in String(num).characters {\n      \
    \  if Int(String(char))! % 2 == 0 {\n            evenCount += 1\n        } else\
    \ {\n            oddCount += 1\n        }\n    }\n    return (evenCount, oddCount)",
  "    \n    var n = num\n    var evenCount = 0\n    var oddCount = 0\n    \n    if\
    \ n < 0 {\n        n = -n\n    }\n    \n    while n > 0 {\n        if n % 2 ==\
    \ 0 {\n            evenCount += 1\n        } else {\n            oddCount += 1\n\
    \        }\n        n /= 10\n    }\n    \n    return (evenCount, oddCount)", " \
    \   let digits = digit_counter(num: num)\n    var even = 0\n    var odd = 0\n\
    \    for i in 0..<digits {\n        let tp = even_odd_calculator(num: num, position:\
    \ i)\n        if tp == 0 {\n            even += 1\n        } else {\n        \
    \    odd += 1\n        }\n    }\n    return (even, odd)", "    \n    var evenCount\
    \ = 0\n    var oddCount = 0\n    \n    let aString = String(num)\n    \n    for\
    \ character in aString {\n        if character == \"-\" {\n            continue\n\
    \        }\n        if Int(String(character))! % 2 == 0 {\n            evenCount\
    \ += 1\n        } else {\n            oddCount += 1\n        }\n    }\n    \n\
    \    return (evenCount, oddCount)", "    var even_count = 0\n    var odd_count\
    \ = 0\n    var num = num\n    while num != 0 {\n        let digit = num % 10\n\
    \        if digit % 2 == 0 {\n            even_count += 1\n        } else {\n\
    \            odd_count += 1\n        }\n        num /= 10\n    }\n    return (even_count,\
    \ odd_count)", "    var even = 0\n    var odd = 0\n    if num == 0 {\n       \
    \ even += 1\n    }\n    var tempNum = num\n    while tempNum != 0 {\n        let\
    \ remainder = tempNum % 10\n        if remainder % 2 == 0 {\n            even\
    \ += 1\n        } else {\n            odd += 1\n        }\n        tempNum /=\
    \ 10\n    }\n    return (even, odd)", "    var evenCount = 0\n    var oddCount\
    \ = 0\n    var tempNum = num\n    while tempNum != 0 {\n        let digit = tempNum\
    \ % 10\n        if digit % 2 == 0 {\n            evenCount += 1\n        } else\
    \ {\n            oddCount += 1\n        }\n        tempNum /= 10\n    }\n    return\
    \ (evenCount, oddCount)", "    var even_count = 0\n    var odd_count = 0\n   \
    \ for digit in String(num).characters {\n        if Int(String(digit))! % 2 ==\
    \ 0 {\n            even_count += 1\n        } else {\n            odd_count +=\
    \ 1\n        }\n    }\n    return (even_count, odd_count)", "    var even = 0\n\
    \    var odd = 0\n    for x in String(num).compactMap({Int(String($0))}) {\n \
    \       if x % 2 == 0 {\n            even += 1\n        } else {\n           \
    \ odd += 1\n        }\n    }\n    return (even, odd)", "    \n    var evenCount\
    \ = 0\n    var oddCount = 0\n    \n    let numCopy = abs(num)\n    \n    for digit\
    \ in numCopy.description {\n        if digit.isNumber {\n            if Int(String(digit))!\
    \ % 2 == 0 {\n                evenCount += 1\n            } else {\n         \
    \       oddCount += 1\n            }\n        }\n    }\n    \n    return (evenCount,\
    \ oddCount)", "    var even = 0\n    var odd = 0\n    var num = num\n    while\
    \ num != 0 {\n        if num % 2 == 0 {\n            even += 1\n        } else\
    \ {\n            odd += 1\n        }\n        num /= 10\n    }\n    return (even,\
    \ odd)", "    \n    func even_odd_count_helper(num: Int, even: Int, odd: Int)\
    \ -> (Int, Int) {\n        if num == 0 {\n            return (even, odd)\n   \
    \     }\n        else {\n            let digit = num % 10\n            if digit\
    \ % 2 == 0 {\n                return even_odd_count_helper(num: num / 10, even:\
    \ even + 1, odd: odd)\n            }\n            else {\n                return\
    \ even_odd_count_helper(num: num / 10, even: even, odd: odd + 1)\n           \
    \ }\n        }\n    }\n    \n    if num < 0 {\n        return even_odd_count_helper(num:\
    \ -num, even: 0, odd: 0)\n    }\n    else {\n        return even_odd_count_helper(num:\
    \ num, even: 0, odd: 0)\n    }", "    var evenCount = 0\n    var oddCount = 0\n\
    \    var num = num\n    while num != 0 {\n        let digit = num % 10\n     \
    \   if digit % 2 == 0 {\n            evenCount += 1\n        } else {\n      \
    \      oddCount += 1\n        }\n        num /= 10\n    }\n    return (evenCount,\
    \ oddCount)", '    return (0, 0)', "    var even = 0\n    var odd = 0\n    for\
    \ i in (0..<String(num).count).reversed() {\n        let digit = String(num).firstIndex(String(num).endIndex,\
    \ offsetBy: -i-1)\n        if String(num)[digit] == \"-\" {\n            continue\n\
    \        }\n        else if String(num)[digit] == \"0\" || String(num)[digit]\
    \ == \"2\" || String(num)[digit] == \"4\" || String(num)[digit] == \"6\" || String(num)[digit]\
    \ == \"8\" {\n            even += 1\n        }\n        else {\n            odd\
    \ += 1\n        }\n    }\n    return (even, odd)", '    return (0, 0)', "    let\
    \ strnum = String(num)\n    var evens = 0\n    var odds = 0\n    for digit in\
    \ strnum {\n        if digit.isNumber && digit.wholeNumberValue! % 2 == 0 {\n\
    \            evens += 1\n        } else if digit.isNumber && digit.wholeNumberValue!\
    \ % 2 != 0 {\n            odds += 1\n        }\n    }\n    return (evens, odds)",
  "    let absNum = abs(num)\n    let intArray = absNum.description.compactMap { $0.wholeNumberValue\
    \ }\n    let evens = intArray.filter { $0 % 2 == 0 }\n    let odds = intArray.filter\
    \ { $0 % 2 != 0 }\n    return (evens.count, odds.count)", "    var _num = num\n\
    \    var evenCount = 0\n    var oddCount = 0\n    while _num != 0 {\n        if\
    \ abs(_num % 10) % 2 == 0 {\n            evenCount += 1\n        } else {\n  \
    \          oddCount += 1\n        }\n        _num /= 10\n    }\n    return (evenCount,\
    \ oddCount)", '  fatalError("Implement the even_odd_count function")', "    var\
    \ even = 0\n    var odd = 0\n    let num_str = String(num)\n    for num in num_str\
    \ {\n        if Int(String(num))! % 2 == 0 {\n            even += 1\n        }\
    \ else {\n            odd += 1\n        }\n    }\n    return (even, odd)", " \
    \   let str = String(num)\n    var even = 0\n    var odd = 0\n    for char in\
    \ str {\n        let digit = Int(String(char))\n        if digit! % 2 == 0 {\n\
    \            even += 1\n        } else {\n            odd += 1\n        }\n  \
    \  }\n    return (even, odd)", "    var n = num\n    var evenCount = 0\n    var\
    \ oddCount = 0\n    while n != 0 {\n        if n % 2 == 0 {\n            evenCount\
    \ += 1\n        } else {\n            oddCount += 1\n        }\n        n /= 10\n\
    \    }\n    return (evenCount, oddCount)", "    let digits = Array(String(num).characters)\n\
    \    var odd_count = 0\n    var even_count = 0\n    for digit in digits {\n  \
    \      if (digit == \"0\" || digit == \"2\" || digit == \"4\" || digit == \"6\"\
    \ || digit == \"8\") {\n            even_count += 1\n        } else {\n      \
    \      odd_count += 1\n        }\n    }\n    return (even_count, odd_count)",
  "    let numberString = String(num)\n    var evenCount = 0\n    var oddCount = 0\n\
    \    for char in numberString {\n        if Int(String(char))! % 2 == 0 {\n  \
    \          evenCount += 1\n        } else {\n            oddCount += 1\n     \
    \   }\n    }\n    return (evenCount, oddCount)", "    var count_even = 0\n   \
    \ var count_odd = 0\n    var num = num\n    if num < 0 {\n        num = -num\n\
    \    }\n    while num > 0 {\n        if num % 2 == 0 {\n            count_even\
    \ += 1\n        } else {\n            count_odd += 1\n        }\n        num /=\
    \ 10\n    }\n    return (count_even, count_odd)", '    return (-1, -1)', "   \
    \ var num = num\n    var even = 0\n    var odd = 0\n    while num != 0 {\n   \
    \     if num % 2 == 0 {\n            even += 1\n        } else {\n           \
    \ odd += 1\n        }\n        num /= 10\n    }\n    return (even, odd)", "  var\
    \ evenCount = 0\n  var oddCount = 0\n  for c in String(num) {\n    if Int(String(c))!\
    \ % 2 == 0 {\n      evenCount += 1\n    } else {\n      oddCount += 1\n    }\n\
    \  }\n  return (evenCount, oddCount)", '    return (0, 0)', '    return (0, 0)',
  "    var evenCount = 0\n    var oddCount = 0\n    var num = num\n    if num < 0\
    \ {\n        num = -num\n    }\n    while num > 0 {\n        if num % 2 == 0 {\n\
    \            evenCount += 1\n        } else {\n            oddCount += 1\n   \
    \     }\n        num /= 10\n    }\n    return (evenCount, oddCount)", "    let\
    \ strnum = String(num)\n    var oddCount = 0\n    var evenCount = 0\n    for char\
    \ in strnum {\n        if Int(String(char))! % 2 == 0 {\n            evenCount\
    \ += 1\n        } else {\n            oddCount += 1\n        }\n    }\n    return\
    \ (evenCount, oddCount)", "    var evenCount = 0\n    var oddCount = 0\n    var\
    \ num = num\n    while num != 0 {\n        let digit = num % 10\n        if digit\
    \ % 2 == 0 {\n            evenCount += 1\n        } else {\n            oddCount\
    \ += 1\n        }\n        num /= 10\n    }\n    return (evenCount, oddCount)",
  "    var evenCount = 0\n    var oddCount = 0\n    var absNum = abs(num)\n    while\
    \ absNum > 0 {\n        let digit = absNum % 10\n        if digit % 2 == 0 {\n\
    \            evenCount += 1\n        } else {\n            oddCount += 1\n   \
    \     }\n        absNum /= 10\n    }\n    return (evenCount, oddCount)", "   \
    \ \n    // your code here\n    \n    return (0, 0)", "    var even = 0\n    var\
    \ odd = 0\n    var temp = num\n    if num < 0 {\n        temp = num * -1\n   \
    \ }\n    while temp > 0 {\n        if temp % 10 % 2 == 0 {\n            even +=\
    \ 1\n        } else {\n            odd += 1\n        }\n        temp /= 10\n \
    \   }\n    return (even, odd)", "    var evenCount = 0\n    var oddCount = 0\n\
    \    for digit in String(num).map({Int(String($0))!}) {\n        if digit % 2\
    \ == 0 {\n            evenCount += 1\n        } else {\n            oddCount +=\
    \ 1\n        }\n    }\n    return (evenCount, oddCount)", '    // your code here',
  "    let number_str = String(num)\n    var even_count = 0\n    var odd_count = 0\n\
    \    for char in number_str {\n        if String(char).contains(\"-\") {\n   \
    \         return (even_count, odd_count)\n        }\n        else if char.wholeNumberValue!\
    \ % 2 == 0 {\n            even_count += 1\n        }\n        else {\n       \
    \     odd_count += 1\n        }\n    }\n    return (even_count, odd_count)", " \
    \   var even_digits = 0\n    var odd_digits = 0\n    let sign = num < 0 ? -1 :\
    \ 1\n    var num = abs(num)\n    while num > 0 {\n        if num % 2 == 0 {\n\
    \            even_digits += 1\n        } else {\n            odd_digits += 1\n\
    \        }\n        num /= 10\n    }\n    return (even_digits, odd_digits)", " \
    \   \n    return (0, 0)", "    var even_count = 0\n    var odd_count = 0\n   \
    \ for c in num.description {\n        if c.wholeNumberValue != nil {\n       \
    \     let n = c.wholeNumberValue!\n            if n % 2 == 0 {\n             \
    \   even_count += 1\n            } else {\n                odd_count += 1\n  \
    \          }\n        }\n    }\n    return (even_count, odd_count)", "    // this\
    \ is a solution where I wanted to use a closure.\n    // Also I wanted to use\
    \ `reduce` function to get to the answer.\n    // 1. First I convert the integer\
    \ to a string (using `String`)\n    // 2. Then I convert the string to a character\
    \ array (using `String.characters`)\n    // 3. Then I use the `Array.reduce` function\
    \ to loop over the character array. I use `CharacterView.Iterator.Element` as\
    \ the iterator type and accumulator as tuple of (even, odd) integers. `Character`\
    \ type as the return type.\n    // 3. At each iteration, I convert the current\
    \ character to integer. if current int value is odd then I increase odd count\
    \ by 1 and if it is even then I increase even count by 1.\n    return String(num).characters.reduce((0,\
    \ 0)) {\n        (accumulator, current: Character) -> (Int, Int) in\n        if\
    \ Int(String(current))! % 2 == 0 {\n            return (accumulator.0 + 1, accumulator.1)\n\
    \        } else {\n            return (accumulator.0, accumulator.1 + 1)\n   \
    \     }\n    }", "    \n    var even_counter = 0\n    var odd_counter = 0\n  \
    \  \n    for digit in String(num).characters {\n        if digit % 2 == 0 {\n\
    \            even_counter += 1\n        } else {\n            odd_counter += 1\n\
    \        }\n    }\n    \n    return (even_counter, odd_counter)", "    var counter\
    \ = 0\n    var digit_count = 0\n    var even_count = 0\n    var odd_count = 0\n\
    \    var num_to_str = \"\\(num)\"\n    var num_to_str_len = num_to_str.count\n\
    \    if num_to_str.prefix(1) == \"-\" {\n        num_to_str_len -= 1\n       \
    \ counter += 1\n    }\n    for counter in counter..<num_to_str_len {\n       \
    \ digit_count = Int(String(num_to_str[counter]))!\n        if digit_count % 2\
    \ == 0 {\n            even_count += 1\n        } else {\n            odd_count\
    \ += 1\n        }\n    }\n    return (even_count, odd_count)", "  var evenCount\
    \ = 0\n  var oddCount = 0\n  var number = num\n  while number != 0 {\n    let\
    \ remain = number % 10\n    if remain % 2 == 0 {\n      evenCount += 1\n    }\
    \ else {\n      oddCount += 1\n    }\n    number /= 10\n  }\n  return (evenCount,\
    \ oddCount)", '    return (0, 0)', "    var even = 0\n    var odd = 0\n    var\
    \ num = num\n    if num < 0 {\n        num = -num\n    }\n    while num > 0 {\n\
    \        let digit = num % 10\n        if digit % 2 == 0 {\n            even +=\
    \ 1\n        } else {\n            odd += 1\n        }\n        num /= 10\n  \
    \  }\n    return (even, odd)", "    \n    var counter = 0\n    var evenCounter\
    \ = 0\n    var oddCounter = 0\n    \n    while num > 0 {\n        counter = num\
    \ % 10\n        if counter % 2 == 0 {\n            evenCounter += 1\n        }\
    \ else {\n            oddCounter += 1\n        }\n        num /= 10\n    }\n \
    \   return (evenCounter, oddCounter)", '    return (0, 0)', "    var even = 0\n\
    \    var odd = 0\n    for digit in String(num).reversed() {\n        if Int(String(digit))!\
    \ % 2 == 0 {\n            even += 1\n        } else {\n            odd += 1\n\
    \        }\n    }\n    return (even, odd)", '    return (0, 0)', "    var even_count\
    \ = 0\n    var odd_count = 0\n    for c in String(num) {\n        if (c == \"\
    -\" && num < 0) {\n            continue\n        }\n        let i = Int(String(c))\n\
    \        if (i! % 2 == 0) {\n            even_count += 1\n        } else {\n \
    \           odd_count += 1\n        }\n    }\n    return (even_count, odd_count)",
  "    var tuple: (Int, Int) = (0, 0)\n    var absNum = abs(num)\n    while absNum\
    \ > 0 {\n        if absNum % 2 == 0 {\n            tuple.0 += 1\n        } else\
    \ {\n            tuple.1 += 1\n        }\n        absNum /= 10\n    }\n    return\
    \ tuple", "    var evenCount = 0\n    var oddCount = 0\n    if num < 0 {\n   \
    \     return (evenCount, oddCount)\n    }\n    for i in String(num) {\n      \
    \  let digit = Int(String(i))!\n        if digit % 2 == 0 {\n            evenCount\
    \ += 1\n        } else {\n            oddCount += 1\n        }\n    }\n    return\
    \ (evenCount, oddCount)", "    var even = 0\n    var odd = 0\n    if num < 0 {\n\
    \        num *= -1\n    }\n    for i in String(num) {\n        if Int(String(i))!\
    \ % 2 == 0 {\n            even += 1\n        } else {\n            odd += 1\n\
    \        }\n    }\n    return (even, odd)", "    var numCopy = num\n    var evenCount\
    \ = 0\n    var oddCount = 0\n    while numCopy != 0 {\n        let digit = numCopy\
    \ % 10\n        if digit % 2 == 0 {\n            evenCount += 1\n        } else\
    \ {\n            oddCount += 1\n        }\n        numCopy /= 10\n    }\n    return\
    \ (evenCount, oddCount)", "    let str: String = String(abs(num))\n    var odd_count:\
    \ Int = 0\n    var even_count: Int = 0\n    for c in str {\n        let digit:\
    \ Int = Int(String(c))!\n        if digit % 2 == 0 {\n            even_count +=\
    \ 1\n        } else {\n            odd_count += 1\n        }\n    }\n    return\
    \ (even_count, odd_count)", "    var even = 0\n    var odd = 0\n    var num =\
    \ num\n    if num < 0 {\n        num = num * -1\n    }\n    var digit = 0\n  \
    \  while num > 0 {\n        digit = num % 10\n        if digit % 2 == 0 {\n  \
    \          even += 1\n        } else {\n            odd += 1\n        }\n    \
    \    num = num / 10\n    }\n    return (even, odd)", "    var even_count = 0\n\
    \    var odd_count = 0\n    if num < 0 {\n        num *= -1\n    }\n    let num_str\
    \ = String(num)\n    for digit in num_str {\n        if Int(String(digit))! %\
    \ 2 == 0 {\n            even_count += 1\n        } else {\n            odd_count\
    \ += 1\n        }\n    }\n    return (even_count, odd_count)", "    let arr =\
    \ String(num).map({ Int(String($0))! })\n    return (arr.filter({$0 % 2 == 0}).count,\
    \ arr.filter({$0 % 2 != 0}).count)", "    var n = num\n    var even = 0\n    var\
    \ odd = 0\n    while n != 0 {\n        if n % 2 == 0 {\n            even += 1\n\
    \        } else {\n            odd += 1\n        }\n        n /= 10\n    }\n \
    \   return (even, odd)", "    // TODO\n    return (0, 0)", "  var even = 0\n \
    \ var odd = 0\n  var n = num\n  while n != 0 {\n    if n % 2 == 0 {\n      even\
    \ += 1\n    } else {\n      odd += 1\n    }\n    n /= 10\n  }\n  return (even,\
    \ odd)", "    var evenCount = 0\n    var oddCount = 0\n    var num = num\n   \
    \ if num < 0 {\n        num = num * -1\n    }\n    for char in String(num) {\n\
    \        if Int(String(char))! % 2 == 0 {\n            evenCount += 1\n      \
    \  } else {\n            oddCount += 1\n        }\n    }\n    return (evenCount,\
    \ oddCount)", "    var evens = 0\n    var odds = 0\n    var num = num\n    if\
    \ num < 0 {\n        num = -num\n    }\n    for _ in 0..<num.digits {\n      \
    \  let digit = num % 10\n        if digit % 2 == 0 {\n            evens += 1\n\
    \        } else {\n            odds += 1\n        }\n        num /= 10\n    }\n\
    \    return (evens, odds)", "    var even_count = 0\n    var odd_count = 0\n \
    \   let num_string = String(num)\n    for char in num_string {\n        if let\
    \ number = Int(String(char)) {\n            if number % 2 == 0 {\n           \
    \     even_count += 1\n            } else {\n                odd_count += 1\n\
    \            }\n        }\n    }\n    return (even_count, odd_count)", "    let\
    \ num = num < 0 ? -num : num\n    var evenCount = 0\n    var oddCount = 0\n  \
    \  for digit in String(num) {\n        let digit = Int(String(digit))!\n     \
    \   if digit % 2 == 0 {\n            evenCount += 1\n        } else {\n      \
    \      oddCount += 1\n        }\n    }\n    return (evenCount, oddCount)", '    return
    (0, 0)', "    var evens = 0\n    var odds = 0\n    var absNum = abs(num)\n   \
    \ while absNum > 0 {\n        let digit = absNum % 10\n        if digit % 2 ==\
    \ 0 {\n            evens += 1\n        } else {\n            odds += 1\n     \
    \   }\n        absNum /= 10\n    }\n    return (evens, odds)", "    var even =\
    \ 0\n    var odd = 0\n    var n = num\n    while n != 0 {\n        let lastDigit\
    \ = n % 10\n        if lastDigit % 2 == 0 {\n            even += 1\n        }\
    \ else {\n            odd += 1\n        }\n        n /= 10\n    }\n    return\
    \ (even, odd)", "    var evenCount = 0\n    var oddCount = 0\n    if num > 0 {\n\
    \        var n = num\n        while n > 0 {\n            if n % 2 == 0 {\n   \
    \             evenCount += 1\n            } else {\n                oddCount +=\
    \ 1\n            }\n            n /= 10\n        }\n    } else {\n        var\
    \ n = num * -1\n        while n > 0 {\n            if n % 2 == 0 {\n         \
    \       evenCount += 1\n            } else {\n                oddCount += 1\n\
    \            }\n            n /= 10\n        }\n    }\n    return (evenCount,\
    \ oddCount)", '    return (0, 0)', '    return (0, 0)', "    var even_count =\
    \ 0\n    var odd_count = 0\n    var int_abs = abs(num)\n    while int_abs > 0\
    \ {\n        let digit = int_abs % 10\n        int_abs /= 10\n        if digit\
    \ % 2 == 0 {\n            even_count += 1\n        } else {\n            odd_count\
    \ += 1\n        }\n    }\n    return (even_count, odd_count)", "    let num_string\
    \ = String(num)\n    let characters = Array(num_string)\n    var even_count =\
    \ 0\n    var odd_count = 0\n    for num in characters {\n        if num % 2 ==\
    \ 0 {\n            even_count += 1\n        } else {\n            odd_count +=\
    \ 1\n        }\n    }\n    return (even_count, odd_count)", "    let num_str =\
    \ String(num)\n    var even_count = 0\n    var odd_count = 0\n    for char in\
    \ num_str {\n        if char == \"0\" || char == \"2\" || char == \"4\" || char\
    \ == \"6\" || char == \"8\" {\n            even_count += 1\n        } else {\n\
    \            odd_count += 1\n        }\n    }\n    return (even_count, odd_count)",
  "    var evenCount = 0\n    var oddCount = 0\n    var newNum = num\n    if newNum\
    \ < 0 {\n        newNum = -newNum\n    }\n    while newNum > 0 {\n        if newNum\
    \ % 2 == 0 {\n            evenCount += 1\n        } else {\n            oddCount\
    \ += 1\n        }\n        newNum /= 10\n    }\n    return (evenCount, oddCount)",
  "    var evenCount = 0\n    var oddCount = 0\n    var currentNum = num\n    while\
    \ currentNum != 0 {\n        let digit = currentNum % 10\n        if digit % 2\
    \ == 0 {\n            evenCount += 1\n        } else {\n            oddCount +=\
    \ 1\n        }\n        currentNum /= 10\n    }\n    return (evenCount, oddCount)",
  "    var odd_count = 0\n    var even_count = 0\n    var abs_num = abs(num)\n   \
    \ if abs_num == 0 {\n        return (0, 0)\n    }\n    while abs_num > 0 {\n \
    \       let digit = abs_num % 10\n        if digit % 2 == 0 {\n            even_count\
    \ += 1\n        } else {\n            odd_count += 1\n        }\n        abs_num\
    \ /= 10\n    }\n    return (even_count, odd_count)", "    var e = 0\n    var o\
    \ = 0\n    for s in String(num).characters {\n        let i = Int(String(s))!\n\
    \        if i % 2 == 0 {\n            e += 1\n        } else {\n            o\
    \ += 1\n        }\n    }\n    return (e, o)", "    let string = String(num)\n\
    \    var evenCount = 0\n    var oddCount = 0\n    for c in string {\n        let\
    \ intVal = Int(String(c))!\n        if intVal % 2 == 0 {\n            evenCount\
    \ += 1\n        } else {\n            oddCount += 1\n        }\n    }\n    return\
    \ (evenCount, oddCount)", "    let z = num.abs()\n    var even = 0\n    var odd\
    \ = 0\n    for n in z.digits() {\n        if n % 2 == 0 {\n            even +=\
    \ 1\n        } else {\n            odd += 1\n        }\n    }\n    return (even,\
    \ odd)", "    var n = num\n    var even = 0\n    var odd = 0\n    while n != 0\
    \ {\n        if n % 2 == 0 {\n            even += 1\n        } else {\n      \
    \      odd += 1\n        }\n        n /= 10\n    }\n    return (even, odd)", " \
    \   /// TODO\n    return (0, 0)", "  let digits = abs(num).digits\n  var evenCount\
    \ = 0\n  var oddCount = 0\n  for digit in digits {\n    if digit % 2 == 0 {\n\
    \      evenCount += 1\n    } else {\n      oddCount += 1\n    }\n  }\n  return\
    \ (evenCount, oddCount)", "    var even = 0\n    var odd = 0\n    var n = num\n\
    \    while n != 0 {\n        if n % 2 == 0 {\n            even += 1\n        }\
    \ else {\n            odd += 1\n        }\n        n /= 10\n    }\n    return\
    \ (even, odd)", "    var evenCount = 0\n    var oddCount = 0\n    var n = num\n\
    \    while n != 0 {\n        if (n % 10) % 2 == 0 {\n            evenCount +=\
    \ 1\n        } else {\n            oddCount += 1\n        }\n        n /= 10\n\
    \    }\n    return (evenCount, oddCount)", "    var odd_count = 0\n    var even_count\
    \ = 0\n    var num = num\n    num = abs(num)\n    while num > 0 {\n        if\
    \ num % 2 == 0 {\n            even_count += 1\n        } else {\n            odd_count\
    \ += 1\n        }\n        num /= 10\n    }\n    return (even_count, odd_count)",
  "    var even_cnt = 0\n    var odd_cnt = 0\n    var num = num\n    var digit = 0\n\
    \    while num != 0 {\n        digit = num % 10\n        if digit % 2 == 0 {\n\
    \            even_cnt += 1\n        } else {\n            odd_cnt += 1\n     \
    \   }\n        num /= 10\n    }\n    return (even_cnt, odd_cnt)", "    var even_count\
    \ = 0\n    var odd_count = 0\n    var abs_num = abs(num)\n    while abs_num >\
    \ 0 {\n        let digit = abs_num % 10\n        if digit % 2 == 0 {\n       \
    \     even_count += 1\n        } else {\n            odd_count += 1\n        }\n\
    \        abs_num /= 10\n    }\n    return (even_count, odd_count)", "    \n  \
    \  var even = 0\n    var odd = 0\n    \n    let string = \"\\(num)\"\n    \n \
    \   for char in string {\n        guard let int = Int(String(char)) else { continue\
    \ }\n        if int % 2 == 0 {\n            even += 1\n        } else {\n    \
    \        odd += 1\n        }\n    }\n    \n    return (even, odd)", "    let absNum\
    \ = abs(num)\n    let nums = absNum.digits\n    var even = 0\n    var odd = 0\n\
    \    for n in nums {\n        if n.isEven {\n            even += 1\n        }\
    \ else {\n            odd += 1\n        }\n    }\n    return (even, odd)", " \
    \   var even_count = 0\n    var odd_count = 0\n    var number = num\n    if number\
    \ < 0 {\n        number = -number\n    }\n    while number > 0 {\n        if number\
    \ % 2 == 0 {\n            even_count += 1\n        } else {\n            odd_count\
    \ += 1\n        }\n        number /= 10\n    }\n    return (even_count, odd_count)",
  "    var odd_count = 0\n    var even_count = 0\n    var num_temp = num\n    while\
    \ num_temp != 0 {\n        let digit = num_temp % 10\n        if digit % 2 ==\
    \ 0 {\n            even_count += 1\n        } else {\n            odd_count +=\
    \ 1\n        }\n        num_temp /= 10\n    }\n    return (even_count, odd_count)",
  "    // your code goes here\n    var even = 0\n    var odd = 0\n    var num = num\n\
    \    if (num < 0) {\n        num = num * -1\n    }\n    while (num > 0) {\n  \
    \      if (num % 2 == 0) {\n            even += 1\n        } else {\n        \
    \    odd += 1\n        }\n        num = num / 10\n    }\n    return (even, odd)",
  "    var odd_count = 0\n    var even_count = 0\n    var num = num\n    while num\
    \ != 0 {\n        if (num % 10) % 2 == 0 {\n            even_count += 1\n    \
    \    } else {\n            odd_count += 1\n        }\n        num /= 10\n    }\n\
    \    return (even_count, odd_count)", "    var copy = num\n    var numEven = 0\n\
    \    var numOdd = 0\n    while copy != 0 {\n        let digit = copy % 10\n  \
    \      if digit % 2 == 0 {\n            numEven += 1\n        } else {\n     \
    \       numOdd += 1\n        }\n        copy /= 10\n    }\n    return (numEven,\
    \ numOdd)", "    var n = num\n    if n < 0 {\n        n = -n\n    }\n    var digits\
    \ = [Int]()\n    var even_count = 0\n    var odd_count = 0\n    while n > 0 {\n\
    \        digits.append(n % 10)\n        n /= 10\n    }\n    for digit in digits\
    \ {\n        if digit % 2 == 0 {\n            even_count += 1\n        } else\
    \ {\n            odd_count += 1\n        }\n    }\n    return (even_count, odd_count)",
  "    var even_cnt: Int = 0\n    var odd_cnt: Int = 0\n    var n = num\n    if n\
    \ < 0 {\n        n = -n\n    }\n    while n > 0 {\n        if n % 2 == 0 {\n \
    \           even_cnt += 1\n        } else {\n            odd_cnt += 1\n      \
    \  }\n        n /= 10\n    }\n    return (even_cnt, odd_cnt)", "    var even =\
    \ 0\n    var odd = 0\n    for digit in num.abs.digits {\n        if digit % 2\
    \ == 0 {\n            even += 1\n        } else {\n            odd += 1\n    \
    \    }\n    }\n    return (even, odd)", "    var a = 0, b = 0\n    for i in String(num)\
    \ {\n        if i.wholeNumberValue! % 2 == 0 {\n            a += 1\n        }\
    \ else {\n            b += 1\n        }\n    }\n    return (a, b)", "    let totalDigits\
    \ = num.description.count\n    var evenDigits = 0\n    var oddDigits = 0\n   \
    \ var copyOfNum = num\n    if copyOfNum < 0 {\n        copyOfNum = copyOfNum *\
    \ -1\n    }\n    for i in 1...totalDigits {\n        if (copyOfNum % 10) % 2 ==\
    \ 0 {\n            evenDigits += 1\n        } else {\n            oddDigits +=\
    \ 1\n        }\n        copyOfNum = copyOfNum / 10\n    }\n    return (evenDigits,\
    \ oddDigits)", "    var (even_count, odd_count) = (0, 0)\n    var n = num\n  \
    \  while n != 0 {\n        if n % 2 == 0 {\n            even_count += 1\n    \
    \    } else {\n            odd_count += 1\n        }\n        n /= 10\n    }\n\
    \    return (even_count, odd_count)", "    var even = 0\n    var odd = 0\n   \
    \ var num = num\n    if num < 0 {\n        num = -num\n    }\n    while num >\
    \ 0 {\n        let digit = num % 10\n        if digit % 2 == 0 {\n           \
    \ even += 1\n        } else {\n            odd += 1\n        }\n        num /=\
    \ 10\n    }\n    return (even, odd)", "    var evens = 0\n    var odds = 0\n \
    \   var n = num\n    while n != 0 {\n        if n % 2 == 0 {\n            evens\
    \ += 1\n        } else {\n            odds += 1\n        }\n        n /= 10\n\
    \    }\n    return (evens, odds)", "    var oddCount = 0\n    var evenCount =\
    \ 0\n    var numString = String(num)\n    if num < 0 {\n        numString.removeFirst()\n\
    \    }\n    for i in numString {\n        if (Int(String(i)) ?? 0) % 2 == 0 {\n\
    \            evenCount += 1\n        } else {\n            oddCount += 1\n   \
    \     }\n    }\n    return (evenCount, oddCount)", "    var evenCount = 0\n  \
    \  var oddCount = 0\n    for i in String(num) {\n        if let a = Int(String(i))\
    \ {\n            if a % 2 == 0 {\n                evenCount += 1\n           \
    \ } else {\n                oddCount += 1\n            }\n        }\n    }\n \
    \   return (evenCount, oddCount)", "    \n    var even_count = 0\n    var odd_count\
    \ = 0\n    \n    for char in String(num) {\n        let digit = String(char)\n\
    \        if Int(digit)! % 2 == 0 {\n            even_count += 1\n        } else\
    \ {\n            odd_count += 1\n        }\n    }\n    \n    return (even_count,\
    \ odd_count)", "    var even_count = 0\n    var odd_count = 0\n    var num = num\n\
    \    if num < 0 {\n        num = -num\n    }\n    for i in num.description {\n\
    \        if (i.wholeNumberValue! % 2 == 0) {\n            even_count += 1\n  \
    \      } else {\n            odd_count += 1\n        }\n    }\n    return (even_count,\
    \ odd_count)", '    return (0, 0)', "    var even = 0\n    var odd = 0\n    for\
    \ i in num.description {\n        if i.wholeNumberValue! % 2 == 0 {\n        \
    \    even += 1\n        } else {\n            odd += 1\n        }\n    }\n   \
    \ return (even, odd)", "    var evenCount = 0\n    var oddCount = 0\n    for num\
    \ in String(num).characters {\n        if Int(String(num))! % 2 == 0 {\n     \
    \       evenCount += 1\n        } else {\n            oddCount += 1\n        }\n\
    \    }\n    return (evenCount, oddCount)", "    var even = 0\n    var odd = 0\n\
    \    for c in String(num) {\n        if c.isLetter { continue }\n        if Int(String(c))!\
    \ % 2 == 0 {\n            even += 1\n        } else {\n            odd += 1\n\
    \        }\n    }\n    return (even, odd)"]
stop_tokens:
- "\n}"
