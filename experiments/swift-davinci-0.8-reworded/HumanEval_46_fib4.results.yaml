language: swift
name: HumanEval_46_fib4
results:
- exit_code: 1
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    let dp = Array(repeating: 0, count: n+1)\n    dp[0] = 0\n    dp[1]\
    \ = 0\n    dp[2] = 2\n    dp[3] = 0\n    for i in 4..<dp.count {\n        dp[i]\
    \ = dp[i-1] + dp[i-2] + dp[i-3] + dp[i-4]\n    }\n    return dp[n]\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: SyntaxError
  stderr: "/tmp/tmpdj__f03w.swift:17:7: error: cannot assign through subscript: 'dp'\
    \ is a 'let' constant\n    dp[0] = 0\n    ~~^\n/tmp/tmpdj__f03w.swift:16:5: note:\
    \ change 'let' to 'var' to make it mutable\n    let dp = Array(repeating: 0, count:\
    \ n+1)\n    ^~~\n    var\n/tmp/tmpdj__f03w.swift:18:7: error: cannot assign through\
    \ subscript: 'dp' is a 'let' constant\n    dp[1] = 0\n    ~~^\n/tmp/tmpdj__f03w.swift:16:5:\
    \ note: change 'let' to 'var' to make it mutable\n    let dp = Array(repeating:\
    \ 0, count: n+1)\n    ^~~\n    var\n/tmp/tmpdj__f03w.swift:19:7: error: cannot\
    \ assign through subscript: 'dp' is a 'let' constant\n    dp[2] = 2\n    ~~^\n\
    /tmp/tmpdj__f03w.swift:16:5: note: change 'let' to 'var' to make it mutable\n\
    \    let dp = Array(repeating: 0, count: n+1)\n    ^~~\n    var\n/tmp/tmpdj__f03w.swift:20:7:\
    \ error: cannot assign through subscript: 'dp' is a 'let' constant\n    dp[3]\
    \ = 0\n    ~~^\n/tmp/tmpdj__f03w.swift:16:5: note: change 'let' to 'var' to make\
    \ it mutable\n    let dp = Array(repeating: 0, count: n+1)\n    ^~~\n    var\n\
    /tmp/tmpdj__f03w.swift:22:11: error: cannot assign through subscript: 'dp' is\
    \ a 'let' constant\n        dp[i] = dp[i-1] + dp[i-2] + dp[i-3] + dp[i-4]\n  \
    \      ~~^\n/tmp/tmpdj__f03w.swift:16:5: note: change 'let' to 'var' to make it\
    \ mutable\n    let dp = Array(repeating: 0, count: n+1)\n    ^~~\n    var\n"
  stdout: ''
  timestamp: 1660028246
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    precondition(n >= 0)\n    switch n {\n    case 0:\n        return\
    \ 0\n    case 1:\n        return 0\n    case 2:\n        return 2\n    case 3:\n\
    \        return 0\n    default:\n        var fibs = [Int](repeating: 0, count:\
    \ n)\n        fibs[0] = 0\n        fibs[1] = 0\n        fibs[2] = 2\n        fibs[3]\
    \ = 0\n        for index in 4..<n {\n            fibs[index] = fibs[index - 1]\
    \ + fibs[index - 2] + fibs[index - 3] + fibs[index - 4]\n        }\n        return\
    \ fibs[n - 1]\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fib4(n: 5)\
    \ == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n:\
    \ 12) == 386)"
  status: Exception
  stderr: 'tmpflm31gqr/tmpflm31gqr.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b25953ffc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b25950f6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b25950f6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b25950f57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpflm31gqr                        0x0000558bc8f26455 <unavailable> + 5205

    5    libc.so.6                          0x00002b25955eb460 __libc_start_main +
    245

    6    tmpflm31gqr                        0x0000558bc8f26109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660028245
- exit_code: 0
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    var arr = [0, 0, 2, 0]\n    if n <= 3 {\n        return arr[n]\n\
    \    }\n    var index = 3\n    while index < n {\n        let new = arr[0] + arr[1]\
    \ + arr[2] + arr[3]\n        arr[0] = arr[1]\n        arr[1] = arr[2]\n      \
    \  arr[2] = arr[3]\n        arr[3] = new\n        index += 1\n    }\n    return\
    \ arr[3]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n:\
    \ 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028245
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    var prev1 = 0\n    var prev2 = 0\n    var prev3 = 2\n    var prev4\
    \ = 0\n    var current = 0\n    for _ in 4..<n {\n        current = prev1 + prev2\
    \ + prev3 + prev4\n        prev1 = prev2\n        prev2 = prev3\n        prev3\
    \ = prev4\n        prev4 = current\n    }\n    return current\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmp79r8ucf2/tmp79r8ucf2.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab1d8a62c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab1d8759b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab1d8759988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab1d87587b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp79r8ucf2                        0x0000557cdd6bd335 <unavailable> + 4917

    5    libc.so.6                          0x00002ab1d8c4e460 __libc_start_main +
    245

    6    tmp79r8ucf2                        0x0000557cdd6bcfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660028245
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fib4(n: 5)\
    \ == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n:\
    \ 12) == 386)"
  status: Exception
  stderr: 'tmpekjwanh8/tmpekjwanh8.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae08c2bbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae08bfb2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae08bfb2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae08bfb17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpekjwanh8                        0x0000561dd37fb1b5 <unavailable> + 4533

    5    libc.so.6                          0x00002ae08c4a7460 __libc_start_main +
    245

    6    tmpekjwanh8                        0x0000561dd37fae69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660028245
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    for\
    \ _ in 0..<n {\n        d = a + b + c\n        a = b\n        b = c\n        c\
    \ = d\n    }\n    return d\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fib4(n: 5)\
    \ == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n:\
    \ 12) == 386)"
  status: Exception
  stderr: 'tmp5im4j77y/tmp5im4j77y.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b386378fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3863486b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3863486988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b38634857b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5im4j77y                        0x00005556a1d8a335 <unavailable> + 4917

    5    libc.so.6                          0x00002b386397b460 __libc_start_main +
    245

    6    tmp5im4j77y                        0x00005556a1d89fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660028245
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    // FIXME: Implement\n    return -1\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpkjfuyiam/tmpkjfuyiam.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7306833c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b730652ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b730652a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b73065297b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkjfuyiam                        0x000055ad681a01b5 <unavailable> + 4533

    5    libc.so.6                          0x00002b7306a1f460 __libc_start_main +
    245

    6    tmpkjfuyiam                        0x000055ad6819fe69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660028245
- exit_code: 0
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    var n0 = 0\n    var n1 = 0\n    var n2 = 2\n    var n3 = 0\n \
    \   var n4 = 0\n    if n < 4 {\n        return n-1\n    }\n    for _ in 4...n\
    \ {\n        n4 = n3 + n2 + n1 + n0\n        n0 = n1\n        n1 = n2\n      \
    \  n2 = n3\n        n3 = n4\n    }\n    return n4\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028245
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    if n < 0 {\n        return -1\n    }\n    if n == 0 {\n      \
    \  return 0\n    }\n    if n == 1 {\n        return 0\n    }\n    if n == 2 {\n\
    \        return 2\n    }\n    if n == 3 {\n        return 0\n    }\n    var twoStepsAgo\
    \ = 0\n    var oneStepAgo = 0\n    var current = 2\n    for _ in 4...n {\n   \
    \     twoStepsAgo = oneStepAgo\n        oneStepAgo = current\n        current\
    \ = twoStepsAgo + oneStepAgo + current\n    }\n    return current\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmp7_ktdmaf/tmp7_ktdmaf.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b19a8996c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b19a868db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b19a868d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b19a868c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7_ktdmaf                        0x0000557126285335 <unavailable> + 4917

    5    libc.so.6                          0x00002b19a8b82460 __libc_start_main +
    245

    6    tmp7_ktdmaf                        0x0000557126284fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660028245
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    // TODO: Your solution here\n    return 0\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpl6p5r7kv/tmpl6p5r7kv.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b31964c0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b31961b7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b31961b7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b31961b67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpl6p5r7kv                        0x00005641a21bf1b5 <unavailable> + 4533

    5    libc.so.6                          0x00002b31966ac460 __libc_start_main +
    245

    6    tmpl6p5r7kv                        0x00005641a21bee69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660028245
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    var x = 0\n    var y = 0\n    var z = 2\n    var w = 0\n    if\
    \ n < 3 {\n        return n\n    }\n    for _ in 3...n {\n        w = x + y +\
    \ z\n        x = y\n        y = z\n        z = w\n    }\n    return w\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpp0y3oob6/tmpp0y3oob6.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b63fa16fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b63f9e66b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b63f9e66988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b63f9e657b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp0y3oob6                        0x0000559e7d213335 <unavailable> + 4917

    5    libc.so.6                          0x00002b63fa35b460 __libc_start_main +
    245

    6    tmpp0y3oob6                        0x0000559e7d212fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660028245
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n  var i = 1\n  var j = 2\n  var k = 0\n  var l = 0\n  var result =\
    \ 0\n  for _ in 0..<n {\n    result = j + k + l\n    l = k\n    k = j\n    j =\
    \ result\n  }\n  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fib4(n:\
    \ 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n:\
    \ 12) == 386)"
  status: Exception
  stderr: 'tmpt8w4rjzw/tmpt8w4rjzw.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af85ef70c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af85ec67b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af85ec67988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af85ec667b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt8w4rjzw                        0x000055866879b335 <unavailable> + 4917

    5    libc.so.6                          0x00002af85f15c460 __libc_start_main +
    245

    6    tmpt8w4rjzw                        0x000055866879afe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660028245
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    guard n > 0 else { return 0 }\n    var i = 0\n    var j = 0\n\
    \    var k = 2\n    var l = 0\n    for _ in 0..<n {\n        let temp = l\n  \
    \      l = i + j + k + l\n        i = j\n        j = k\n        k = temp\n   \
    \ }\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fib4(n: 5) == 4)\n\
    assert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpdrkbqr58/tmpdrkbqr58.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad5be577c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad5be26eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad5be26e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad5be26d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdrkbqr58                        0x0000563feba69335 <unavailable> + 4917

    5    libc.so.6                          0x00002ad5be763460 __libc_start_main +
    245

    6    tmpdrkbqr58                        0x0000563feba68fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660028245
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    var previousPrevious = 0\n    var previous = 0\n    var current\
    \ = 2\n    if n == 0 {\n        return 0\n    } else if n == 1 {\n        return\
    \ 0\n    } else if n == 2 {\n        return 2\n    } else if n == 3 {\n      \
    \  return 0\n    } else {\n        for _ in 4...n {\n            let temp = current\n\
    \            current = previousPrevious + previous + current\n            previousPrevious\
    \ = previous\n            previous = temp\n        }\n        return current\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n:\
    \ 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmp40jby_o2/tmp40jby_o2.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ace98ff6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ace98cedb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ace98ced988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ace98cec7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp40jby_o2                        0x00005616823163b0 <unavailable> + 5040

    5    libc.so.6                          0x00002ace991e2460 __libc_start_main +
    245

    6    tmp40jby_o2                        0x0000561682315fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660028245
- exit_code: 0
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n      \
    \  return 0\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n\
    \        return 0\n    }\n    var f1 = 0\n    var f2 = 0\n    var f3 = 2\n   \
    \ var f4 = 0\n    var fn = 0\n    for _ in 4...n {\n        fn = f1 + f2 + f3\
    \ + f4\n        f1 = f2\n        f2 = f3\n        f3 = f4\n        f4 = fn\n \
    \   }\n    return fn\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fib4(n: 5)\
    \ == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n:\
    \ 12) == 386)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028245
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fib4(n: 5)\
    \ == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n:\
    \ 12) == 386)"
  status: Exception
  stderr: 'tmpekjwanh8/tmpekjwanh8.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae08c2bbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae08bfb2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae08bfb2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae08bfb17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpekjwanh8                        0x0000561dd37fb1b5 <unavailable> + 4533

    5    libc.so.6                          0x00002ae08c4a7460 __libc_start_main +
    245

    6    tmpekjwanh8                        0x0000561dd37fae69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660028245
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n  guard n > 3 else { return n - 1 }\n  var a = 0\n  var b = 0\n  var\
    \ c = 2\n  var d = 0\n  for _ in 4...n {\n    d = a + b + c\n    a = b\n    b\
    \ = c\n    c = d\n  }\n  return d\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fib4(n:\
    \ 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n:\
    \ 12) == 386)"
  status: Exception
  stderr: 'tmpgtgfcimr/tmpgtgfcimr.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d12a03c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d126fab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d126fa988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d126f97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgtgfcimr                        0x000055d21d7553b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b6d12bef460 __libc_start_main +
    245

    6    tmpgtgfcimr                        0x000055d21d754fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660028245
- exit_code: 0
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    var\
    \ e = 0\n    if n < 4 {\n        return [0, 0, 2, 0][n]\n    }\n    for _ in 3..<n\
    \ {\n        e = a + b + c + d\n        a = b\n        b = c\n        c = d\n\
    \        d = e\n    }\n    return e\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\n\
    assert(fib4(n: 12) == 386)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028245
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    var n1 = 0\n    var n2 = 0\n    var n3 = 2\n    var n4 = 0\n \
    \   for _ in 3...n {\n        n4 = n1 + n2 + n3\n        n1 = n2\n        n2 =\
    \ n3\n        n3 = n4\n    }\n    return n4\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) ==\
    \ 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmprz8avxrp/tmprz8avxrp.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b766e628c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b766e31fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b766e31f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b766e31e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprz8avxrp                        0x0000561551f70335 <unavailable> + 4917

    5    libc.so.6                          0x00002b766e814460 __libc_start_main +
    245

    6    tmprz8avxrp                        0x0000561551f6ffe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660028245
- exit_code: 0
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    var\
    \ e = 0\n    if n == 0 {\n        return 0\n    } else if n == 1 {\n        return\
    \ 0\n    } else if n == 2 {\n        return 2\n    } else if n == 3 {\n      \
    \  return 0\n    } else {\n        for i in 4...n {\n            e = a + b + c\
    \ + d\n            a = b\n            b = c\n            c = d\n            d\
    \ = e\n        }\n        return e\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) ==\
    \ 104)\nassert(fib4(n: 12) == 386)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028245
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n      \
    \  return 0\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n\
    \        return 0\n    }\n    var x = 0\n    var y = 0\n    var z = 2\n    var\
    \ w = 0\n    for _ in 4...n {\n        w = x + y + z\n        x = y\n        y\
    \ = z\n        z = w\n    }\n    return w\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) ==\
    \ 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmprt53vy_w/tmprt53vy_w.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad4c7b20c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad4c7817b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad4c7817988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad4c78167b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprt53vy_w                        0x000055599b7d83b0 <unavailable> + 5040

    5    libc.so.6                          0x00002ad4c7d0c460 __libc_start_main +
    245

    6    tmprt53vy_w                        0x000055599b7d7fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660028245
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n  return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fib4(n: 5)\
    \ == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n:\
    \ 12) == 386)"
  status: Exception
  stderr: 'tmp83t5zxuj/tmp83t5zxuj.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b28df0f6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b28dededb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b28deded988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b28dedec7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp83t5zxuj                        0x0000559a0d1211b5 <unavailable> + 4533

    5    libc.so.6                          0x00002b28df2e2460 __libc_start_main +
    245

    6    tmp83t5zxuj                        0x0000559a0d120e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660028245
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    return n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fib4(n: 5)\
    \ == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n:\
    \ 12) == 386)"
  status: Exception
  stderr: 'tmpqxbubzr0/tmpqxbubzr0.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1d459b6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1d456adb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1d456ad988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1d456ac7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqxbubzr0                        0x0000555ce95a91b5 <unavailable> + 4533

    5    libc.so.6                          0x00002b1d45ba2460 __libc_start_main +
    245

    6    tmpqxbubzr0                        0x0000555ce95a8e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660028245
- exit_code: 0
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n      \
    \  return 0\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n\
    \        return 0\n    }\n    var f0 = 0\n    var f1 = 0\n    var f2 = 2\n   \
    \ var f3 = 0\n    var fn = 0\n    for _ in 4...n {\n        fn = f0 + f1 + f2\
    \ + f3\n        f0 = f1\n        f1 = f2\n        f2 = f3\n        f3 = fn\n \
    \   }\n    return fn\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fib4(n: 5)\
    \ == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n:\
    \ 12) == 386)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028245
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    //MARK: - Calculate\n    var value = 0\n    var prev = 0\n   \
    \ var prevPrev = 0\n    var prevPrevPrev = 0\n    var prevPrevPrevPrev = 0\n \
    \   for i in 0..<n {\n        switch i {\n        case 0:\n            value =\
    \ 0\n        case 1:\n            value = 0\n        case 2:\n            value\
    \ = 2\n        case 3:\n            value = 0\n        default:\n            value\
    \ = prev + prevPrev + prevPrevPrev + prevPrevPrevPrev\n        }\n        prevPrevPrevPrev\
    \ = prevPrevPrev\n        prevPrevPrev = prevPrev\n        prevPrev = prev\n \
    \       prev = value\n    }\n    return value\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) ==\
    \ 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpyczo6irq/tmpyczo6irq.swift:56: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad90ea23c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad90e71ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad90e71a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad90e7197b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyczo6irq                        0x00005615ded17335 <unavailable> + 4917

    5    libc.so.6                          0x00002ad90ec0f460 __libc_start_main +
    245

    6    tmpyczo6irq                        0x00005615ded16fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660028246
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    // TODO: please implement your solution below\n    if n < 3 {\n\
    \        return n == 0 ? 0 : 2\n    }\n    var n1 = 2\n    var n2 = 0\n    var\
    \ n3 = 0\n    var n4 = 0\n    var sum = 0\n    for _ in 3...n {\n        sum =\
    \ n1 + n2 + n3 + n4\n        n4 = n3\n        n3 = n2\n        n2 = n1\n     \
    \   n1 = sum\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\n\
    assert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmp0b843qqf/tmp0b843qqf.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b386e8a9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b386e5a0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b386e5a0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b386e59f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0b843qqf                        0x0000560d6069b335 <unavailable> + 4917

    5    libc.so.6                          0x00002b386ea95460 __libc_start_main +
    245

    6    tmp0b843qqf                        0x0000560d6069afe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660028246
- exit_code: 0
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n      \
    \  return 0\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n\
    \        return 0\n    }\n    var n_1 = 0\n    var n_2 = 0\n    var n_3 = 2\n\
    \    var n_4 = 0\n    var fib = 0\n    for _ in 4...n {\n        fib = n_1 + n_2\
    \ + n_3 + n_4\n        n_1 = n_2\n        n_2 = n_3\n        n_3 = n_4\n     \
    \   n_4 = fib\n    }\n    return fib\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\n\
    assert(fib4(n: 12) == 386)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028246
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    if\
    \ n == 0 {\n        return 0\n    } else if n == 1 {\n        return 0\n    }\
    \ else if n == 2 {\n        return 2\n    } else if n == 3 {\n        return 0\n\
    \    } else {\n        for _ in 4...n {\n            d = a + b + c\n         \
    \   a = b\n            b = c\n            c = d\n        }\n        return d\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n:\
    \ 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpqnpxd2n9/tmpqnpxd2n9.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af3e223fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af3e1f36b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af3e1f36988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af3e1f357b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqnpxd2n9                        0x000056281b16a3b0 <unavailable> + 5040

    5    libc.so.6                          0x00002af3e242b460 __libc_start_main +
    245

    6    tmpqnpxd2n9                        0x000056281b169fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660028246
- exit_code: 0
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    guard n > 3 else { return n == 2 ? 2 : 0 }\n    var cache = [0,\
    \ 0, 2, 0]\n    for i in 4...n {\n        cache.append(cache[0] + cache[1] + cache[2]\
    \ + cache[3])\n        cache.removeFirst()\n    }\n    return cache.last!\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028246
- exit_code: 0
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    // Hint #1: Don't use recursion.\n    // Hint #2: Instead, use\
    \ a table to store the intermediate results and just look them up.\n    // Hint\
    \ #3: Watch out for negative numbers!\n    var val = [0, 0, 2, 0]\n    if n <=\
    \ 3 {\n        return val[n]\n    }\n    var i = 4\n    while i <= n {\n     \
    \   let newNum = val[i-1] + val[i-2] + val[i-3] + val[i-4]\n        val.append(newNum)\n\
    \        i += 1\n    }\n    return val[n]\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) ==\
    \ 104)\nassert(fib4(n: 12) == 386)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028246
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    if n < 4 {\n        return n\n    }\n    var arr = [Int](repeating:\
    \ 0, count: n+1)\n    arr[4] = 4\n    for i in 4...n {\n        arr[i] = arr[i-1]\
    \ + arr[i-2] + arr[i-3] + arr[i-4]\n    }\n    return arr[n]\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmp92o41vgp/tmp92o41vgp.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adc9a108c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adc99dffb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adc99dff988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adc99dfe7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp92o41vgp                        0x000055ffcb84a455 <unavailable> + 5205

    5    libc.so.6                          0x00002adc9a2f4460 __libc_start_main +
    245

    6    tmp92o41vgp                        0x000055ffcb84a109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660028246
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    if\
    \ n < 4 {\n        return n\n    }\n    for _ in 4...n {\n        d = a + b +\
    \ c\n        a = b\n        b = c\n        c = d\n    }\n    return d\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmp2i5p3uz3/tmp2i5p3uz3.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1ff8b43c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1ff883ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1ff883a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1ff88397b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2i5p3uz3                        0x0000558be43f03b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b1ff8d2f460 __libc_start_main +
    245

    6    tmp2i5p3uz3                        0x0000558be43effe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660028246
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    var\
    \ e = 0\n    for _ in 3...n {\n        e = a + b + c + d\n        a = b\n    \
    \    b = c\n        c = d\n        d = e\n    }\n    return e\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpan5bfzb0/tmpan5bfzb0.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b22973a4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b229709bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b229709b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b229709a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpan5bfzb0                        0x000055948a9fc335 <unavailable> + 4917

    5    libc.so.6                          0x00002b2297590460 __libc_start_main +
    245

    6    tmpan5bfzb0                        0x000055948a9fbfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660028246
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    // TODO: implement me\n    return 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpvzxw3squ/tmpvzxw3squ.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeaeae0fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeaeab06b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeaeab06988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeaeab057b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvzxw3squ                        0x000055d466c681b5 <unavailable> + 4533

    5    libc.so.6                          0x00002aeaeaffb460 __libc_start_main +
    245

    6    tmpvzxw3squ                        0x000055d466c67e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660028246
- exit_code: 0
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    var sequence = [0, 0, 2, 0]\n    if n < 4 {\n        return sequence[n]\n\
    \    }\n    for i in 4...n {\n        sequence.append(sequence[i-1] + sequence[i-2]\
    \ + sequence[i-3] + sequence[i-4])\n    }\n    return sequence[n]\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028246
- exit_code: 0
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    guard n > 3 else { return n * 2 }\n    var cache = [0,0,2,0]\n\
    \    for i in 4...n {\n        cache.append(cache[i-1] + cache[i-2] + cache[i-3]\
    \ + cache[i-4])\n    }\n    return cache[n]\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) ==\
    \ 104)\nassert(fib4(n: 12) == 386)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028246
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    var nMinusTwo = 0\n    var nMinusOne = 0\n    var nMinusThree\
    \ = 0\n    var nMinusFour = 0\n    var current = 0\n    if n == 0 {\n        return\
    \ 0\n    } else if n == 1 {\n        return 0\n    } else if n == 2 {\n      \
    \  return 2\n    } else if n == 3 {\n        return 0\n    } else {\n        for\
    \ _ in 4...n {\n            nMinusFour = nMinusThree\n            nMinusThree\
    \ = nMinusTwo\n            nMinusTwo = nMinusOne\n            nMinusOne = current\n\
    \            current = nMinusFour + nMinusThree + nMinusTwo + nMinusOne\n    \
    \    }\n        return current\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\n\
    assert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpwa85u254/tmpwa85u254.swift:54: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b618d8c5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b618d5bcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b618d5bc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b618d5bb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwa85u254                        0x00005631959a9335 <unavailable> + 4917

    5    libc.so.6                          0x00002b618dab1460 __libc_start_main +
    245

    6    tmpwa85u254                        0x00005631959a8fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660028246
- exit_code: 0
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    \n    var result = 0\n    var prev1 = 0\n    var prev2 = 0\n \
    \   var prev3 = 0\n    var prev4 = 0\n    \n    if n == 0 {\n        result =\
    \ 0\n    } else if n == 1 {\n        result = 0\n    } else if n == 2 {\n    \
    \    result = 2\n    } else if n == 3 {\n        result = 0\n    } else {\n  \
    \      result = 0\n        prev1 = 0\n        prev2 = 0\n        prev3 = 2\n \
    \       prev4 = 0\n        \n        for _ in 4...n {\n            result = prev1\
    \ + prev2 + prev3 + prev4\n            prev1 = prev2\n            prev2 = prev3\n\
    \            prev3 = prev4\n            prev4 = result\n        }\n    }\n   \
    \ \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fib4(n: 5)\
    \ == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n:\
    \ 12) == 386)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028246
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    var first = 0\n    var second = 0\n    var third = 2\n    var\
    \ fourth = 0\n    var next: Int\n    var count = 3\n    while count <= n {\n \
    \       next = first + second + third + fourth\n        first = second\n     \
    \   second = third\n        third = fourth\n        fourth = next\n        count\
    \ += 1\n    }\n    return fourth\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fib4(n:\
    \ 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n:\
    \ 12) == 386)"
  status: Exception
  stderr: 'tmpl05qgta6/tmpl05qgta6.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b78c27a1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b78c2498b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b78c2498988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b78c24977b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpl05qgta6                        0x0000557fc6d381b5 <unavailable> + 4533

    5    libc.so.6                          0x00002b78c298d460 __libc_start_main +
    245

    6    tmpl05qgta6                        0x0000557fc6d37e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660028246
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fib4(n: 5)\
    \ == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n:\
    \ 12) == 386)"
  status: Exception
  stderr: 'tmpekjwanh8/tmpekjwanh8.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae08c2bbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae08bfb2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae08bfb2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae08bfb17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpekjwanh8                        0x0000561dd37fb1b5 <unavailable> + 4533

    5    libc.so.6                          0x00002ae08c4a7460 __libc_start_main +
    245

    6    tmpekjwanh8                        0x0000561dd37fae69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660028245
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fib4(n: 5)\
    \ == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n:\
    \ 12) == 386)"
  status: Exception
  stderr: 'tmpekjwanh8/tmpekjwanh8.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae08c2bbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae08bfb2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae08bfb2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae08bfb17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpekjwanh8                        0x0000561dd37fb1b5 <unavailable> + 4533

    5    libc.so.6                          0x00002ae08c4a7460 __libc_start_main +
    245

    6    tmpekjwanh8                        0x0000561dd37fae69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660028245
- exit_code: 0
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    \n    if n == 0 {\n        return 0\n    }\n    \n    if n ==\
    \ 1 {\n        return 0\n    }\n    \n    if n == 2 {\n        return 2\n    }\n\
    \    \n    if n == 3 {\n        return 0\n    }\n    \n    var a = 0\n    var\
    \ b = 0\n    var c = 2\n    var d = 0\n    var e = 0\n    \n    for _ in 4...n\
    \ {\n        e = a + b + c + d\n        a = b\n        b = c\n        c = d\n\
    \        d = e\n    }\n    \n    return e\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) ==\
    \ 104)\nassert(fib4(n: 12) == 386)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028246
- exit_code: 0
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    if n < 0 {\n        return -1\n    }\n    if n == 0 {\n      \
    \  return 0\n    }\n    if n == 1 {\n        return 0\n    }\n    if n == 2 {\n\
    \        return 2\n    }\n    if n == 3 {\n        return 0\n    }\n    var m1\
    \ = 0\n    var m2 = 0\n    var m3 = 2\n    var m4 = 0\n    var count = 4\n   \
    \ var result = 0\n    while count <= n {\n        result = m1 + m2 + m3 + m4\n\
    \        m1 = m2\n        m2 = m3\n        m3 = m4\n        m4 = result\n    \
    \    count += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) ==\
    \ 104)\nassert(fib4(n: 12) == 386)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028246
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fib4(n: 5)\
    \ == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n:\
    \ 12) == 386)"
  status: Exception
  stderr: 'tmpekjwanh8/tmpekjwanh8.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae08c2bbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae08bfb2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae08bfb2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae08bfb17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpekjwanh8                        0x0000561dd37fb1b5 <unavailable> + 4533

    5    libc.so.6                          0x00002ae08c4a7460 __libc_start_main +
    245

    6    tmpekjwanh8                        0x0000561dd37fae69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660028245
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    var fib1 = 0\n    var fib2 = 0\n    var fib3 = 2\n    var fib4\
    \ = 0\n    if n <= 2 {\n        return n\n    }\n    for _ in 4...n {\n      \
    \  fib4 = fib1 + fib2 + fib3\n        fib1 = fib2\n        fib2 = fib3\n     \
    \   fib3 = fib4\n    }\n    return fib4\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\n\
    assert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmp5rh0wad3/tmp5rh0wad3.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2603ccac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b26039c1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b26039c1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b26039c07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5rh0wad3                        0x000055c5972bb3b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b2603eb6460 __libc_start_main +
    245

    6    tmp5rh0wad3                        0x000055c5972bafe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660028246
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    var nMinus4 = 0\n    var nMinus3 = 0\n    var nMinus2 = 2\n  \
    \  var nMinus1 = 0\n    var n = 0\n    if n == 0 {\n        return nMinus4\n \
    \   } else if n == 1 {\n        return nMinus3\n    } else if n == 2 {\n     \
    \   return nMinus2\n    } else if n == 3 {\n        return nMinus1\n    } else\
    \ {\n        for _ in 4...n {\n            n = nMinus4 + nMinus3 + nMinus2 + nMinus1\n\
    \            nMinus4 = nMinus3\n            nMinus3 = nMinus2\n            nMinus2\
    \ = nMinus1\n            nMinus1 = n\n        }\n        return n\n    }\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpl2u_69kb/tmpl2u_69kb.swift:54: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2e44b28c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2e4481fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2e4481f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2e4481e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpl2u_69kb                        0x000056500cb131b5 <unavailable> + 4533

    5    libc.so.6                          0x00002b2e44d14460 __libc_start_main +
    245

    6    tmpl2u_69kb                        0x000056500cb12e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660028246
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    if n < 0 {\n        return -1\n    }\n    if n == 0 {\n      \
    \  return 0\n    }\n    if n == 1 {\n        return 0\n    }\n    if n == 2 {\n\
    \        return 2\n    }\n    if n == 3 {\n        return 0\n    }\n    var sum\
    \ = 0\n    var arr = [Int](repeating: 0, count: n)\n    arr[0] = 0\n    arr[1]\
    \ = 0\n    arr[2] = 2\n    arr[3] = 0\n    for i in 4..<n {\n        arr[i] =\
    \ arr[i-1] + arr[i-2] + arr[i-3] + arr[i-4]\n    }\n    return arr[n-1]\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpwgsfd7sj/tmpwgsfd7sj.swift:56: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac50cb49c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac50c840b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac50c840988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac50c83f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwgsfd7sj                        0x000055a9bb295455 <unavailable> + 5205

    5    libc.so.6                          0x00002ac50cd35460 __libc_start_main +
    245

    6    tmpwgsfd7sj                        0x000055a9bb295109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660028246
- exit_code: 0
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    precondition(n >= 0)\n    var arr = [0, 0, 2, 0]\n    guard n\
    \ > 3 else { return arr[n] }\n    for i in 4...n {\n        arr[i % 4] = arr[(i-1)\
    \ % 4] + arr[(i-2) % 4] + arr[(i-3) % 4] + arr[(i-4) % 4]\n    }\n    return arr[n\
    \ % 4]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n:\
    \ 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028246
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    for\
    \ _ in 3...n {\n        d = a + b + c\n        a = b\n        b = c\n        c\
    \ = d\n    }\n    return d\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fib4(n: 5)\
    \ == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n:\
    \ 12) == 386)"
  status: Exception
  stderr: 'tmp3d_e4wk_/tmp3d_e4wk_.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aed648eac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aed645e1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aed645e1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aed645e07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3d_e4wk_                        0x000055c0efecb335 <unavailable> + 4917

    5    libc.so.6                          0x00002aed64ad6460 __libc_start_main +
    245

    6    tmp3d_e4wk_                        0x000055c0efecafe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660028246
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    let fib4s = [0, 0, 2, 0]\n    guard n > 3 else { return fib4s[n]\
    \ }\n    var i = 4\n    var a = 2\n    var b = 0\n    var c = 0\n    var d = 0\n\
    \    while i <= n {\n        d = c\n        c = b\n        b = a\n        a =\
    \ d + c + b + a\n        i += 1\n    }\n    return a\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmp49t8ke33/tmp49t8ke33.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ace60599c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ace60290b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ace60290988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ace6028f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp49t8ke33                        0x000055f5879bf315 <unavailable> + 4885

    5    libc.so.6                          0x00002ace60785460 __libc_start_main +
    245

    6    tmp49t8ke33                        0x000055f5879befc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660028246
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    if n < 0 {\n        return -1\n    }\n    if n == 0 {\n      \
    \  return 0\n    }\n    if n == 1 {\n        return 0\n    }\n    if n == 2 {\n\
    \        return 2\n    }\n    if n == 3 {\n        return 0\n    }\n    var a\
    \ = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    for _ in 4...n {\n   \
    \     d = a + b + c\n        a = b\n        b = c\n        c = d\n    }\n    return\
    \ d\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n:\
    \ 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmp2g0_x344/tmp2g0_x344.swift:58: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0e0a28ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0e09f85b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0e09f85988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0e09f847b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2g0_x344                        0x000055829e65e3b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b0e0a47a460 __libc_start_main +
    245

    6    tmp2g0_x344                        0x000055829e65dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660028246
- exit_code: 0
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    if n < 4 {\n        return [0, 0, 2, 0][n]\n    }\n    var arr\
    \ = [0, 0, 2, 0]\n    for i in 4...n {\n        arr.append(arr[i-1] + arr[i-2]\
    \ + arr[i-3] + arr[i-4])\n    }\n    return arr[n]\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028246
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    if n == 0 {\n        return 0\n    }\n    var a = 0\n    var b\
    \ = 0\n    var c = 2\n    var d = 0\n    for _ in 4...n {\n        a = b\n   \
    \     b = c\n        c = d\n        d = a + b + c\n    }\n    return d\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpe7u71j0j/tmpe7u71j0j.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af237430c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af237127b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af237127988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af2371267b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe7u71j0j                        0x000055fb8676a3b0 <unavailable> + 5040

    5    libc.so.6                          0x00002af23761c460 __libc_start_main +
    245

    6    tmpe7u71j0j                        0x000055fb86769fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660028246
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n  if n < 4 {\n    return n % 4\n  }\n\n  var last = Array(repeating:\
    \ 0, count: 4)\n  last[3] = 1\n\n  for _ in 0..<n-3 {\n    last = [last[1], last[2],\
    \ last[3], last[1] + last[2] + last[3]]\n  }\n\n  return last[3]\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmp54znbm66/tmp54znbm66.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b20b1223c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b20b0f1ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b20b0f1a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b20b0f197b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp54znbm66                        0x00005652a55e6555 <unavailable> + 5461

    5    libc.so.6                          0x00002b20b140f460 __libc_start_main +
    245

    6    tmp54znbm66                        0x00005652a55e6209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660028246
- exit_code: 0
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    var\
    \ next = 0\n    if n == 0 {\n        return 0\n    } else if n == 1 {\n      \
    \  return 0\n    } else if n == 2 {\n        return 2\n    } else if n == 3 {\n\
    \        return 0\n    } else {\n        for _ in 4...n {\n            next =\
    \ a + b + c + d\n            a = b\n            b = c\n            c = d\n   \
    \         d = next\n        }\n        return next\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028246
- exit_code: 0
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n      \
    \  return 0\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n\
    \        return 0\n    }\n    if n > 3 {\n        var fib = [0, 0, 2, 0]\n   \
    \     var i = 4\n        while i <= n {\n            let newFib = fib[0] + fib[1]\
    \ + fib[2] + fib[3]\n            fib.append(newFib)\n            fib.removeFirst()\n\
    \            i += 1\n        }\n        return fib[3]\n    }\n    return 0\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028246
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fib4(n: 5)\
    \ == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n:\
    \ 12) == 386)"
  status: Exception
  stderr: 'tmpekjwanh8/tmpekjwanh8.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae08c2bbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae08bfb2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae08bfb2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae08bfb17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpekjwanh8                        0x0000561dd37fb1b5 <unavailable> + 4533

    5    libc.so.6                          0x00002ae08c4a7460 __libc_start_main +
    245

    6    tmpekjwanh8                        0x0000561dd37fae69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660028245
- exit_code: 0
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n  if n == 0 {\n    return 0\n  } else if n == 1 {\n    return 0\n\
    \  } else if n == 2 {\n    return 2\n  } else if n == 3 {\n    return 0\n  } else\
    \ {\n    var fib4 = [0, 0, 2, 0]\n    for i in 4...n {\n      fib4.append(fib4[i-1]\
    \ + fib4[i-2] + fib4[i-3] + fib4[i-4])\n    }\n    return fib4[n]\n  }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028246
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n  var a = 0\n  var b = 0\n  var c = 2\n  var d = 0\n  if n == 0 {\n\
    \    return 0\n  } else if n == 1 {\n    return 0\n  } else if n == 2 {\n    return\
    \ 2\n  } else if n == 3 {\n    return 0\n  } else {\n    for _ in 3..<n {\n  \
    \    d = a + b + c\n      a = b\n      b = c\n      c = d\n    }\n    return d\n\
    \  }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n:\
    \ 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmps6zxllzi/tmps6zxllzi.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8694d23c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8694a1ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8694a1a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8694a197b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps6zxllzi                        0x0000556d6e1fe3b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b8694f0f460 __libc_start_main +
    245

    6    tmps6zxllzi                        0x0000556d6e1fdfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660028246
- exit_code: 1
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    \n    guard n >= 3 else {\n        return fib4Terms[n]\n    }\n\
    \    \n    var n1 = 0\n    var n2 = 0\n    var n3 = 2\n    var n4 = 0\n    var\
    \ total = 0\n    \n    for _ in 3...n {\n        total = n1 + n2 + n3 + n4\n \
    \       n1 = n2\n        n2 = n3\n        n3 = n4\n        n4 = total\n    }\n\
    \    \n    return total\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fib4(n: 5)\
    \ == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n:\
    \ 12) == 386)"
  status: SyntaxError
  stderr: "/tmp/tmpum_6khyo.swift:18:16: error: cannot find 'fib4Terms' in scope\n\
    \        return fib4Terms[n]\n               ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660028246
- exit_code: 0
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n      \
    \  return 0\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n\
    \        return 0\n    }\n    var fibs = [0, 0, 2, 0]\n    var index = 4\n   \
    \ while index <= n {\n        fibs.append(fibs[index-1] + fibs[index-2] + fibs[index-3]\
    \ + fibs[index-4])\n        index += 1\n    }\n    return fibs[n]\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028246
- exit_code: 0
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n      \
    \  return 0\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n\
    \        return 0\n    }\n    var fib4s = [0, 0, 2, 0]\n    for index in 4...n\
    \ {\n        let fibNum = fib4s[3] + fib4s[2] + fib4s[1] + fib4s[0]\n        fib4s.removeFirst()\n\
    \        fib4s.append(fibNum)\n    }\n    return fib4s[3]\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028246
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fib4(n: 5)\
    \ == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n:\
    \ 12) == 386)"
  status: Exception
  stderr: 'tmpekjwanh8/tmpekjwanh8.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae08c2bbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae08bfb2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae08bfb2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae08bfb17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpekjwanh8                        0x0000561dd37fb1b5 <unavailable> + 4533

    5    libc.so.6                          0x00002ae08c4a7460 __libc_start_main +
    245

    6    tmpekjwanh8                        0x0000561dd37fae69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660028245
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    // TODO: Please write your solution here.\n    // This is an O(n)\
    \ solution because each element only needs to be calculated once.\n    // You\
    \ can use a memo to keep track of which indices have been calculated.\n    return\
    \ -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n:\
    \ 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpjf0k7x09/tmpjf0k7x09.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac2066d7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac2063ceb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac2063ce988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac2063cd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjf0k7x09                        0x000055e5f57af1b5 <unavailable> + 4533

    5    libc.so.6                          0x00002ac2068c3460 __libc_start_main +
    245

    6    tmpjf0k7x09                        0x000055e5f57aee69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660028246
- exit_code: 0
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n      \
    \  return 0\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n\
    \        return 0\n    }\n    var n1 = 0\n    var n2 = 0\n    var n3 = 2\n   \
    \ var n4 = 0\n    var n5 = 0\n    for _ in 4...n {\n        n5 = n1 + n2 + n3\
    \ + n4\n        n1 = n2\n        n2 = n3\n        n3 = n4\n        n4 = n5\n \
    \   }\n    return n5\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fib4(n: 5)\
    \ == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n:\
    \ 12) == 386)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028246
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    let a = 0\n    let b = 0\n    let c = 2\n    let d = 0\n    if\
    \ n == 0 {\n        return a\n    } else if n == 1 {\n        return b\n    }\
    \ else if n == 2 {\n        return c\n    } else if n == 3 {\n        return d\n\
    \    } else {\n        var fourth = d\n        var third = c\n        var second\
    \ = b\n        var first = a\n        for _ in 4...n {\n            fourth = first\
    \ + second + third + fourth\n            first = second\n            second =\
    \ third\n            third = fourth\n        }\n        return fourth\n    }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpih_50p4j/tmpih_50p4j.swift:56: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abbda50ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abbda201b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abbda201988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abbda2007b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpih_50p4j                        0x000055dcb86bf335 <unavailable> + 4917

    5    libc.so.6                          0x00002abbda6f6460 __libc_start_main +
    245

    6    tmpih_50p4j                        0x000055dcb86befe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660028246
- exit_code: 1
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    let arr = [0, 0, 2, 0]\n    if n < 4 {\n        return arr[n]\n\
    \    }\n    var sum = 0\n    var i = 3\n    var j = 2\n    var k = 1\n    var\
    \ l = 0\n    while i < n {\n        sum = arr[i] + arr[j] + arr[k] + arr[l]\n\
    \        arr[l] = arr[k]\n        arr[k] = arr[j]\n        arr[j] = arr[i]\n \
    \       arr[i] = sum\n        i += 1\n        j += 1\n        k += 1\n       \
    \ l += 1\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fib4(n:\
    \ 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n:\
    \ 12) == 386)"
  status: SyntaxError
  stderr: "/tmp/tmp2g37_spf.swift:27:12: error: cannot assign through subscript: 'arr'\
    \ is a 'let' constant\n        arr[l] = arr[k]\n        ~~~^\n/tmp/tmp2g37_spf.swift:16:5:\
    \ note: change 'let' to 'var' to make it mutable\n    let arr = [0, 0, 2, 0]\n\
    \    ^~~\n    var\n/tmp/tmp2g37_spf.swift:28:12: error: cannot assign through\
    \ subscript: 'arr' is a 'let' constant\n        arr[k] = arr[j]\n        ~~~^\n\
    /tmp/tmp2g37_spf.swift:16:5: note: change 'let' to 'var' to make it mutable\n\
    \    let arr = [0, 0, 2, 0]\n    ^~~\n    var\n/tmp/tmp2g37_spf.swift:29:12: error:\
    \ cannot assign through subscript: 'arr' is a 'let' constant\n        arr[j] =\
    \ arr[i]\n        ~~~^\n/tmp/tmp2g37_spf.swift:16:5: note: change 'let' to 'var'\
    \ to make it mutable\n    let arr = [0, 0, 2, 0]\n    ^~~\n    var\n/tmp/tmp2g37_spf.swift:30:12:\
    \ error: cannot assign through subscript: 'arr' is a 'let' constant\n        arr[i]\
    \ = sum\n        ~~~^\n/tmp/tmp2g37_spf.swift:16:5: note: change 'let' to 'var'\
    \ to make it mutable\n    let arr = [0, 0, 2, 0]\n    ^~~\n    var\n"
  stdout: ''
  timestamp: 1660028246
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    var i = 2, fib1 = 0, fib2 = 2, fib3 = 0, fib4 = 2\n    if n ==\
    \ 0 {\n        return 0\n    } else if n == 1 {\n        return 0\n    } else\
    \ if n == 2 {\n        return 2\n    } else if n == 3 {\n        return 0\n  \
    \  } else {\n        while i < n {\n            fib1 = fib2\n            fib2\
    \ = fib3\n            fib3 = fib4\n            fib4 = fib1 + fib2 + fib3 + fib4\n\
    \            i += 1\n        }\n        return fib4\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpmutdpotm/tmpmutdpotm.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4e721fec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4e71ef5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4e71ef5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4e71ef47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmutdpotm                        0x000056383062c1b5 <unavailable> + 4533

    5    libc.so.6                          0x00002b4e723ea460 __libc_start_main +
    245

    6    tmpmutdpotm                        0x000056383062be69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660028246
- exit_code: 0
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    guard n > 2 else { return n }\n    var fib4 = [0, 0, 2, 0]\n \
    \   for i in 4...n {\n        fib4.append(fib4[i-1] + fib4[i-2] + fib4[i-3] +\
    \ fib4[i-4])\n    }\n    return fib4[n]\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\n\
    assert(fib4(n: 12) == 386)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028246
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    var\
    \ e = 0\n    var f = 0\n    if n < 3 {\n        return n * 2\n    }\n    for _\
    \ in 3...n {\n        f = a + b + c + d\n        a = b\n        b = c\n      \
    \  c = d\n        d = f\n    }\n    return f\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) ==\
    \ 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpx81o0ze1/tmpx81o0ze1.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ace70fd7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ace70cceb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ace70cce988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ace70ccd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx81o0ze1                        0x000055fc282e8335 <unavailable> + 4917

    5    libc.so.6                          0x00002ace711c3460 __libc_start_main +
    245

    6    tmpx81o0ze1                        0x000055fc282e7fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660028246
- exit_code: 0
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    var f4 = [0, 0, 2, 0]\n    if n <= 3 {\n        return f4[n]\n\
    \    }\n    for _ in 4...n {\n        f4.append(f4[3] + f4[2] + f4[1] + f4[0])\n\
    \        f4.removeFirst()\n    }\n    return f4[3]\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028246
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fib4(n: 5)\
    \ == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n:\
    \ 12) == 386)"
  status: Exception
  stderr: 'tmpekjwanh8/tmpekjwanh8.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae08c2bbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae08bfb2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae08bfb2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae08bfb17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpekjwanh8                        0x0000561dd37fb1b5 <unavailable> + 4533

    5    libc.so.6                          0x00002ae08c4a7460 __libc_start_main +
    245

    6    tmpekjwanh8                        0x0000561dd37fae69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660028245
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    // *********************************************\n    // Write\
    \ your code below.\n    var previous = 0\n    var previous2 = 0\n    var previous3\
    \ = 0\n    var previous4 = 0\n    var current = 0\n    if n <= 0 {\n        return\
    \ 0\n    }\n    if n == 1 {\n        return 0\n    }\n    if n == 2 {\n      \
    \  return 2\n    }\n    if n == 3 {\n        return 0\n    }\n    if n == 4 {\n\
    \        return 2\n    }\n    for i in 4..<n {\n        current = previous + previous2\
    \ + previous3 + previous4\n        previous4 = previous3\n        previous3 =\
    \ previous2\n        previous2 = previous\n        previous = current\n    }\n\
    \    return current\n    // *********************************************\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmp46aapj9k/tmp46aapj9k.swift:62: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8917248c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8916f3fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8916f3f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8916f3e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp46aapj9k                        0x000056230b71f335 <unavailable> + 4917

    5    libc.so.6                          0x00002b8917434460 __libc_start_main +
    245

    6    tmp46aapj9k                        0x000056230b71efe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660028246
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n  if n == 0 {\n    return 0\n  } else if n == 1 {\n    return 0\n\
    \  } else if n == 2 {\n    return 2\n  } else if n == 3 {\n    return 0\n  }\n\
    \  var prev1 = 0\n  var prev2 = 0\n  var prev3 = 2\n  var prev4 = 0\n  var fib4\
    \ = prev1 + prev2 + prev3 + prev4\n  for _ in 4...n {\n    prev1 = prev2\n   \
    \ prev2 = prev3\n    prev3 = prev4\n    prev4 = fib4\n    fib4 = prev1 + prev2\
    \ + prev3 + prev4\n  }\n  return fib4\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\n\
    assert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpa3wk7tit/tmpa3wk7tit.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0844360c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0844057b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0844057988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b08440567b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpa3wk7tit                        0x0000561418857335 <unavailable> + 4917

    5    libc.so.6                          0x00002b084454c460 __libc_start_main +
    245

    6    tmpa3wk7tit                        0x0000561418856fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660028246
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n      \
    \  return 0\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n\
    \        return 0\n    }\n    var nMinusOne = 2\n    var nMinusTwo = 0\n    var\
    \ nMinusThree = 0\n    var nMinusFour = 0\n    var nMinusFive = 0\n    for i in\
    \ 4..<n {\n        nMinusFive = nMinusFour\n        nMinusFour = nMinusThree\n\
    \        nMinusThree = nMinusTwo\n        nMinusTwo = nMinusOne\n        nMinusOne\
    \ = nMinusOne + nMinusTwo + nMinusThree + nMinusFour\n    }\n    return nMinusOne\
    \ + nMinusTwo + nMinusThree + nMinusFour\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\n\
    assert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpi876wbd_/tmpi876wbd_.swift:56: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae0ba1f3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae0b9eeab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae0b9eea988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae0b9ee97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi876wbd_                        0x000055a0d4c86335 <unavailable> + 4917

    5    libc.so.6                          0x00002ae0ba3df460 __libc_start_main +
    245

    6    tmpi876wbd_                        0x000055a0d4c85fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660028246
- exit_code: 0
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    if n < 2 {\n        return 0\n    }\n    if n == 2 {\n       \
    \ return 2\n    }\n    var fibArr = [0, 0, 2, 0]\n    for i in 3..<n {\n     \
    \   let temp = fibArr[3]\n        fibArr[3] = fibArr[2] + fibArr[1] + fibArr[0]\
    \ + temp\n        fibArr[0] = fibArr[1]\n        fibArr[1] = fibArr[2]\n     \
    \   fibArr[2] = temp\n    }\n    return fibArr[3]\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028246
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    var\
    \ i = 3\n    while i <= n {\n        a = b\n        b = c\n        c = d\n   \
    \     d = a + b + c\n        i += 1\n    }\n    return d\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmp4hft49yt/tmp4hft49yt.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3bf9e8cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3bf9b83b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3bf9b83988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3bf9b827b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4hft49yt                        0x00005565726c51b5 <unavailable> + 4533

    5    libc.so.6                          0x00002b3bfa078460 __libc_start_main +
    245

    6    tmp4hft49yt                        0x00005565726c4e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660028246
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    if n < 0 {\n        return -1\n    }\n    if n < 3 {\n       \
    \ return n * 2\n    }\n    if n == 3 {\n        return 0\n    }\n    var n1 =\
    \ 0\n    var n2 = 2\n    var n3 = 0\n    var n4 = 2\n    var ret = 4\n    for\
    \ _ in 3..<n {\n        ret = n1 + n2 + n3 + n4\n        n1 = n2\n        n2 =\
    \ n3\n        n3 = n4\n        n4 = ret\n    }\n    return ret\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpt9s1jop7/tmpt9s1jop7.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7b8385fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7b83556b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7b83556988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7b835557b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt9s1jop7                        0x0000556cf8a86335 <unavailable> + 4917

    5    libc.so.6                          0x00002b7b83a4b460 __libc_start_main +
    245

    6    tmpt9s1jop7                        0x0000556cf8a85fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660028246
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    var last = 0\n    var secondToLast = 0\n    var thirdToLast =\
    \ 0\n    var fourthToLast = 0\n    for i in 0...n {\n        if i == 0 {\n   \
    \         last = 0\n        } else if i == 1 {\n            secondToLast = 0\n\
    \        } else if i == 2 {\n            thirdToLast = 2\n        } else if i\
    \ == 3 {\n            fourthToLast = 0\n        } else {\n            let current\
    \ = last + secondToLast + thirdToLast + fourthToLast\n            fourthToLast\
    \ = thirdToLast\n            thirdToLast = secondToLast\n            secondToLast\
    \ = last\n            last = current\n        }\n    }\n    return last\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpwhlnwws3/tmpwhlnwws3.swift:54: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afb5cfa4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afb5cc9bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afb5cc9b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afb5cc9a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwhlnwws3                        0x00005607c8a6b3b0 <unavailable> + 5040

    5    libc.so.6                          0x00002afb5d190460 __libc_start_main +
    245

    6    tmpwhlnwws3                        0x00005607c8a6afe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660028246
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n  var f0 = 0\n  var f1 = 0\n  var f2 = 2\n  var f3 = 0\n  var sum\
    \ = f2\n  for _ in 4...n {\n    f3 = f2 + f1 + f0 + sum\n    f0 = f1\n    f1 =\
    \ f2\n    f2 = f3\n    sum += f3\n  }\n  return f3\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpyt4ts4v8/tmpyt4ts4v8.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad8a5faac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad8a5ca1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad8a5ca1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad8a5ca07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyt4ts4v8                        0x0000557e282e3335 <unavailable> + 4917

    5    libc.so.6                          0x00002ad8a6196460 __libc_start_main +
    245

    6    tmpyt4ts4v8                        0x0000557e282e2fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660028246
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fib4(n: 5)\
    \ == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n:\
    \ 12) == 386)"
  status: Exception
  stderr: 'tmpekjwanh8/tmpekjwanh8.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae08c2bbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae08bfb2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae08bfb2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae08bfb17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpekjwanh8                        0x0000561dd37fb1b5 <unavailable> + 4533

    5    libc.so.6                          0x00002ae08c4a7460 __libc_start_main +
    245

    6    tmpekjwanh8                        0x0000561dd37fae69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660028245
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n  guard n > 2 else { return n }\n  var a = 0\n  var b = 0\n  var c\
    \ = 2\n  var d = 0\n  for _ in 3...n {\n    d = a + b + c\n    a = b\n    b =\
    \ c\n    c = d\n  }\n  return d\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fib4(n:\
    \ 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n:\
    \ 12) == 386)"
  status: Exception
  stderr: 'tmppelmc1id/tmppelmc1id.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7cc358fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7cc3286b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7cc3286988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7cc32857b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppelmc1id                        0x00005620ed279335 <unavailable> + 4917

    5    libc.so.6                          0x00002b7cc377b460 __libc_start_main +
    245

    6    tmppelmc1id                        0x00005620ed278fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660028246
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    var previous = 0\n    var next = 0\n    var current = 0\n    for\
    \ i in 0..<n {\n        current = next + previous + current\n        previous\
    \ = next\n        next = current\n    }\n    return current\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmp7oy47y11/tmp7oy47y11.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b27315edc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b27312e4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b27312e4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b27312e37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7oy47y11                        0x00005615bda5d335 <unavailable> + 4917

    5    libc.so.6                          0x00002b27317d9460 __libc_start_main +
    245

    6    tmp7oy47y11                        0x00005615bda5cfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660028246
- exit_code: 0
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n      \
    \  return 0\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n\
    \        return 0\n    }\n    var dp = [Int](repeating: 0, count: n + 1)\n   \
    \ dp[0] = 0\n    dp[1] = 0\n    dp[2] = 2\n    dp[3] = 0\n    for i in 4...n {\n\
    \        dp[i] = dp[i - 1] + dp[i - 2] + dp[i - 3] + dp[i - 4]\n    }\n    return\
    \ dp[n]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n:\
    \ 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028246
- exit_code: 0
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n  var a = [0, 0, 2, 0]\n  var index = 3\n  while index < n {\n   \
    \ a.append(a[index] + a[index-1] + a[index-2] + a[index-3])\n    index += 1\n\
    \  }\n  return a[n]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fib4(n: 5) == 4)\n\
    assert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028246
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    if\
    \ n == 0 {\n        return 0\n    } else if n == 1 {\n        return 0\n    }\
    \ else if n == 2 {\n        return 2\n    } else if n == 3 {\n        return 0\n\
    \    } else {\n        for _ in 4..<n {\n            d = a + b + c\n         \
    \   a = b\n            b = c\n            c = d\n        }\n        return d\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n:\
    \ 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmp28l0ao5x/tmp28l0ao5x.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0698fe5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0698cdcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0698cdc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0698cdb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp28l0ao5x                        0x000055afaeab5335 <unavailable> + 4917

    5    libc.so.6                          0x00002b06991d1460 __libc_start_main +
    245

    6    tmp28l0ao5x                        0x000055afaeab4fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660028246
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    var n = n\n    if n < 0 {\n        return -1\n    }\n    if n\
    \ == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 0\n    }\n\
    \    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 0\n\
    \    }\n    var num_1 = 0\n    var num_2 = 2\n    var num_3 = 0\n    var num_4\
    \ = 0\n    var sum = 0\n    for _ in 4...n {\n        sum = num_1 + num_2 + num_3\
    \ + num_4\n        num_1 = num_2\n        num_2 = num_3\n        num_3 = num_4\n\
    \        num_4 = sum\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) ==\
    \ 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpi2qg8l_p/tmpi2qg8l_p.swift:61: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9c70a25c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9c7071cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9c7071c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9c7071b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi2qg8l_p                        0x000055e6c9be73b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b9c70c11460 __libc_start_main +
    245

    6    tmpi2qg8l_p                        0x000055e6c9be6fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660028246
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    if n == 0 {\n        return 0\n    }\n    var n1 = 0\n    var\
    \ n2 = 0\n    var n3 = 2\n    var n4 = 0\n    for _ in 4...n {\n        n4 = n1\
    \ + n2 + n3\n        n1 = n2\n        n2 = n3\n        n3 = n4\n    }\n    return\
    \ n4\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n:\
    \ 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpv87jmrxm/tmpv87jmrxm.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b82d6426c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b82d611db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b82d611d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b82d611c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv87jmrxm                        0x00005610de43c3b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b82d6612460 __libc_start_main +
    245

    6    tmpv87jmrxm                        0x00005610de43bfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660028246
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    return 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fib4(n: 5)\
    \ == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n:\
    \ 12) == 386)"
  status: Exception
  stderr: 'tmp6sl819ab/tmp6sl819ab.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba50ba15c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba50b70cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba50b70c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba50b70b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6sl819ab                        0x00005620c7cce1b5 <unavailable> + 4533

    5    libc.so.6                          0x00002ba50bc01460 __libc_start_main +
    245

    6    tmp6sl819ab                        0x00005620c7ccde69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660028246
- exit_code: 0
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n      \
    \  return 0\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n\
    \        return 0\n    }\n    var n2 = 0\n    var n1 = 0\n    var n3 = 2\n   \
    \ var n4 = 0\n    var result = 0\n    for i in 4...n {\n        result = n2 +\
    \ n1 + n3 + n4\n        n2 = n1\n        n1 = n3\n        n3 = n4\n        n4\
    \ = result\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\n\
    assert(fib4(n: 12) == 386)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028246
- exit_code: 0
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    var i = 0\n    var j = 0\n    var k = 2\n    var l = 0\n    var\
    \ m = 0\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return\
    \ 0\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n      \
    \  return 0\n    }\n    var index = 3\n    while index < n {\n        m = i +\
    \ j + k + l\n        i = j\n        j = k\n        k = l\n        l = m\n    \
    \    index += 1\n    }\n    return m\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\n\
    assert(fib4(n: 12) == 386)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028246
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    if n == 0 {\n        return 0\n    }\n    var zero = 0\n    var\
    \ one = 0\n    var two = 2\n    var three = 0\n    for i in 4...n {\n        let\
    \ new = one + two + three + zero\n        zero = one\n        one = two\n    \
    \    two = three\n        three = new\n    }\n    return one + two + three + zero\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmp09gushgv/tmp09gushgv.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b104a132c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1049e29b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1049e29988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1049e287b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp09gushgv                        0x0000562c21ea9335 <unavailable> + 4917

    5    libc.so.6                          0x00002b104a31e460 __libc_start_main +
    245

    6    tmp09gushgv                        0x0000562c21ea8fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660028246
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    if\
    \ n == 0 {\n        return 0\n    } else if n == 1 {\n        return 0\n    }\
    \ else if n == 2 {\n        return 2\n    } else if n == 3 {\n        return 0\n\
    \    } else {\n        for _ in 0..<n-3 {\n            d = a + b + c\n       \
    \     a = b\n            b = c\n            c = d\n        }\n        return d\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n:\
    \ 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpfpm_pps2/tmpfpm_pps2.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1ccb915c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1ccb60cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1ccb60c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1ccb60b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfpm_pps2                        0x000055e7a26c53b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b1ccbb01460 __libc_start_main +
    245

    6    tmpfpm_pps2                        0x000055e7a26c4fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660028246
- exit_code: 0
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    // YOUR CODE HERE\n    var nums = [0, 0, 2, 0]\n    if n < 4 {\n\
    \        return nums[n]\n    }\n    var i = 4\n    while i <= n {\n        let\
    \ next = nums[3] + nums[2] + nums[1] + nums[0]\n        nums[0] = nums[1]\n  \
    \      nums[1] = nums[2]\n        nums[2] = nums[3]\n        nums[3] = next\n\
    \        i += 1\n    }\n    return nums[3]\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) ==\
    \ 104)\nassert(fib4(n: 12) == 386)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028246
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fib4(n: 5)\
    \ == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n:\
    \ 12) == 386)"
  status: Exception
  stderr: 'tmpekjwanh8/tmpekjwanh8.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae08c2bbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae08bfb2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae08bfb2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae08bfb17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpekjwanh8                        0x0000561dd37fb1b5 <unavailable> + 4533

    5    libc.so.6                          0x00002ae08c4a7460 __libc_start_main +
    245

    6    tmpekjwanh8                        0x0000561dd37fae69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660028245
- exit_code: 0
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n      \
    \  return 0\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n\
    \        return 0\n    }\n    var arr = [0, 0, 2, 0]\n    for i in 4...n {\n \
    \       let val = arr[0] + arr[1] + arr[2] + arr[3]\n        arr.removeFirst()\n\
    \        arr.append(val)\n    }\n    return arr[3]\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028246
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    guard n > 2 else { return n == 0 ? 0 : n == 1 ? 0 : 2 }\n    var\
    \ result = 4\n    var lastVal0 = 0\n    var lastVal1 = 0\n    var lastVal2 = 2\n\
    \    var lastVal3 = 0\n    for _ in 4...n {\n        lastVal0 = lastVal1\n   \
    \     lastVal1 = lastVal2\n        lastVal2 = lastVal3\n        lastVal3 = result\n\
    \        result = lastVal0 + lastVal1 + lastVal2 + lastVal3\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n:\
    \ 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmp2f1i1owb/tmp2f1i1owb.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab111f04c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab111bfbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab111bfb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab111bfa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2f1i1owb                        0x000055f8c00b6335 <unavailable> + 4917

    5    libc.so.6                          0x00002ab1120f0460 __libc_start_main +
    245

    6    tmp2f1i1owb                        0x000055f8c00b5fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660028246
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    // TODO: Implement Fib4\n    return 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpg51vrack/tmpg51vrack.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aac1ba1fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aac1b716b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aac1b716988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aac1b7157b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg51vrack                        0x0000558e5b8001b5 <unavailable> + 4533

    5    libc.so.6                          0x00002aac1bc0b460 __libc_start_main +
    245

    6    tmpg51vrack                        0x0000558e5b7ffe69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660028246
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    guard n > 0 else { return 0 }\n    guard n > 1 else { return 0\
    \ }\n    guard n > 2 else { return 2 }\n    guard n > 3 else { return 0 }\n  \
    \  \n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    var i = 3\n\
    \    while i < n {\n        d = a + b + c + d\n        a = b\n        b = c\n\
    \        c = d\n        i += 1\n    }\n    return a + b + c + d\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmps8f8toth/tmps8f8toth.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad4d97f5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad4d94ecb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad4d94ec988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad4d94eb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps8f8toth                        0x0000561a69e681b5 <unavailable> + 4533

    5    libc.so.6                          0x00002ad4d99e1460 __libc_start_main +
    245

    6    tmps8f8toth                        0x0000561a69e67e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660028246
- exit_code: 0
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    var fibs = [0, 0, 2, 0]\n    for i in 4...n {\n        fibs.append(fibs[i-1]\
    \ + fibs[i-2] + fibs[i-3] + fibs[i-4])\n    }\n    return fibs[n]\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028246
- exit_code: 0
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n      \
    \  return 0\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n\
    \        return 0\n    }\n    var f1 = 0\n    var f2 = 0\n    var f3 = 2\n   \
    \ var f4 = 0\n    var result = 0\n    for i in 4...n {\n        result = f1 +\
    \ f2 + f3 + f4\n        f1 = f2\n        f2 = f3\n        f3 = f4\n        f4\
    \ = result\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\n\
    assert(fib4(n: 12) == 386)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028246
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    if n == 0 {\n        return 0\n    }\n    var fibPrevPrevPrev\
    \ = 0\n    var fibPrevPrev = 0\n    var fibPrev = 0\n    var fibCurr = 2\n   \
    \ var fibNext = 0\n    var counter = 3\n    while counter <= n {\n        fibNext\
    \ = fibCurr + fibPrev + fibPrevPrev + fibPrevPrevPrev\n        fibPrevPrevPrev\
    \ = fibPrevPrev\n        fibPrevPrev = fibPrev\n        fibPrev = fibCurr\n  \
    \      fibCurr = fibNext\n        counter += 1\n    }\n    return fibNext\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpp3vm8jpx/tmpp3vm8jpx.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acbc102ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acbc0d21b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acbc0d21988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acbc0d207b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp3vm8jpx                        0x0000557532b8c1b5 <unavailable> + 4533

    5    libc.so.6                          0x00002acbc1216460 __libc_start_main +
    245

    6    tmpp3vm8jpx                        0x0000557532b8be69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660028246
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fib4(n: 5)\
    \ == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n:\
    \ 12) == 386)"
  status: Exception
  stderr: 'tmpekjwanh8/tmpekjwanh8.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae08c2bbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae08bfb2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae08bfb2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae08bfb17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpekjwanh8                        0x0000561dd37fb1b5 <unavailable> + 4533

    5    libc.so.6                          0x00002ae08c4a7460 __libc_start_main +
    245

    6    tmpekjwanh8                        0x0000561dd37fae69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660028245
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    precondition(n >= 0)\n    // TODO: implement me!\n    return 0\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpuqo8l28p/tmpuqo8l28p.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af012db2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af012aa9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af012aa9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af012aa87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuqo8l28p                        0x00005586799431b5 <unavailable> + 4533

    5    libc.so.6                          0x00002af012f9e460 __libc_start_main +
    245

    6    tmpuqo8l28p                        0x0000558679942e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660028246
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    var\
    \ i = 2\n    while i < n {\n        d = a + b + c\n        a = b\n        b =\
    \ c\n        c = d\n        i += 1\n    }\n    return d\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpclla8z9d/tmpclla8z9d.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b09bc0b2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b09bbda9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b09bbda9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b09bbda87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpclla8z9d                        0x000055cc8a4a11b5 <unavailable> + 4533

    5    libc.so.6                          0x00002b09bc29e460 __libc_start_main +
    245

    6    tmpclla8z9d                        0x000055cc8a4a0e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660028246
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    var num1 = 0\n    var num2 = 0\n    var num3 = 2\n    var num4\
    \ = 0\n    if n == 0 {\n        return 0\n    } else if n == 1 {\n        return\
    \ 0\n    } else if n == 2 {\n        return 2\n    } else if n == 3 {\n      \
    \  return 0\n    } else {\n        for _ in 4...n {\n            num4 = num1 +\
    \ num2 + num3\n            num1 = num2\n            num2 = num3\n            num3\
    \ = num4\n        }\n        return num4\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) ==\
    \ 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmp714hjy4o/tmp714hjy4o.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba4302eec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba42ffe5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba42ffe5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba42ffe47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp714hjy4o                        0x000056135d2e73b0 <unavailable> + 5040

    5    libc.so.6                          0x00002ba4304da460 __libc_start_main +
    245

    6    tmp714hjy4o                        0x000056135d2e6fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660028247
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    guard n > 2 else { return 2 * n }\n    var n1 = 4\n    var n2\
    \ = 8\n    var n3 = 14\n    var n4 = 24\n    for _ in 4..<n {\n        (n1, n2,\
    \ n3, n4) = (n2, n3, n4, n1 + n2 + n3 + n4)\n    }\n    return n4\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmptvz0zhx5/tmptvz0zhx5.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af7d0013c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af7cfd0ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af7cfd0a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af7cfd097b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptvz0zhx5                        0x000055d3e329b335 <unavailable> + 4917

    5    libc.so.6                          0x00002af7d01ff460 __libc_start_main +
    245

    6    tmptvz0zhx5                        0x000055d3e329afe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660028247
- exit_code: 0
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    var f4 = [0, 0, 2, 0]\n    for i in 4...n {\n        f4.append(f4[i-1]\
    \ + f4[i-2] + f4[i-3] + f4[i-4])\n    }\n    return f4[n]\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028247
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fib4(n: 5)\
    \ == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n:\
    \ 12) == 386)"
  status: Exception
  stderr: 'tmpekjwanh8/tmpekjwanh8.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae08c2bbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae08bfb2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae08bfb2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae08bfb17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpekjwanh8                        0x0000561dd37fb1b5 <unavailable> + 4533

    5    libc.so.6                          0x00002ae08c4a7460 __libc_start_main +
    245

    6    tmpekjwanh8                        0x0000561dd37fae69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660028245
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    if n < 2 {\n        return 0\n    }\n    if n == 2 {\n       \
    \ return 2\n    }\n    var fn2 = 0\n    var fn1 = 0\n    var fn = 2\n    for _\
    \ in 3...n {\n        let tmp = fn + fn1 + fn2\n        fn2 = fn1\n        fn1\
    \ = fn\n        fn = tmp\n    }\n    return fn\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) ==\
    \ 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpt155k0ce/tmpt155k0ce.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af319993c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af31968ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af31968a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af3196897b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt155k0ce                        0x000055f030b6c335 <unavailable> + 4917

    5    libc.so.6                          0x00002af319b7f460 __libc_start_main +
    245

    6    tmpt155k0ce                        0x000055f030b6bfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660028247
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    if n < 0 {\n        fatalError(\"fib4() should receive a positive\
    \ number\")\n    }\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n\
    \        return 0\n    }\n    if n == 2 {\n        return 2\n    }\n    if n ==\
    \ 3 {\n        return 0\n    }\n    var num = 0\n    var num1 = 0\n    var num2\
    \ = 2\n    var num3 = 0\n    for _ in 4...n {\n        num = num1 + num2 + num3\n\
    \        num1 = num2\n        num2 = num3\n        num3 = num\n    }\n    return\
    \ num\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n:\
    \ 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmptgjkwmdq/tmptgjkwmdq.swift:58: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002add509efc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002add506e6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002add506e6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002add506e57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptgjkwmdq                        0x000055f214ba7440 <unavailable> + 5184

    5    libc.so.6                          0x00002add50bdb460 __libc_start_main +
    245

    6    tmptgjkwmdq                        0x000055f214ba7079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660028247
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n  var current = 0\n  var pre = 0\n  var pre1 = 0\n  var pre2 = 0\n\
    \  var pre3 = 0\n  for _ in 0...n {\n    current = pre + pre1 + pre2 + pre3\n\
    \    pre3 = pre2\n    pre2 = pre1\n    pre1 = pre\n    pre = current\n  }\n  return\
    \ current\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n:\
    \ 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpix4xx1rk/tmpix4xx1rk.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aed3b5f5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aed3b2ecb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aed3b2ec988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aed3b2eb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpix4xx1rk                        0x000055791c89f335 <unavailable> + 4917

    5    libc.so.6                          0x00002aed3b7e1460 __libc_start_main +
    245

    6    tmpix4xx1rk                        0x000055791c89efe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660028247
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n  // YOUR CODE HERE\n  return 0\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) ==\
    \ 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpx3sfgv7m/tmpx3sfgv7m.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0785f4bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0785c42b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0785c42988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0785c417b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx3sfgv7m                        0x000055c92103f1b5 <unavailable> + 4533

    5    libc.so.6                          0x00002b0786137460 __libc_start_main +
    245

    6    tmpx3sfgv7m                        0x000055c92103ee69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660028247
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    if n < 3 {\n        return (n == 0) ? 0 : 2\n    }\n    var nums\
    \ = [0,0,2,0]\n    for _ in 3..<n {\n        nums[3] = nums[0] + nums[1] + nums[2]\
    \ + nums[3]\n        nums[0] = nums[1]\n        nums[1] = nums[2]\n        nums[2]\
    \ = nums[3]\n    }\n    return nums[3]\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\n\
    assert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpizlye7ct/tmpizlye7ct.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af630a09c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af630700b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af630700988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af6306ff7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpizlye7ct                        0x0000555dc2c9d4e5 <unavailable> + 5349

    5    libc.so.6                          0x00002af630bf5460 __libc_start_main +
    245

    6    tmpizlye7ct                        0x0000555dc2c9d199 <unavailable> + 4505

    '
  stdout: ''
  timestamp: 1660028247
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    \n    if n == 0 {\n        return 0\n    }\n    \n    if n ==\
    \ 1 {\n        return 0\n    }\n    \n    if n == 2 {\n        return 2\n    }\n\
    \    \n    if n == 3 {\n        return 0\n    }\n    \n    var fib1 = 0\n    var\
    \ fib2 = 0\n    var fib3 = 2\n    var fib4 = 0\n    \n    for _ in 4...n {\n \
    \       fib4 = fib1 + fib2 + fib3\n        fib1 = fib2\n        fib2 = fib3\n\
    \        fib3 = fib4\n    }\n    \n    return fib4\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmp2_grs6e6/tmp2_grs6e6.swift:62: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4593058c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4592d4fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4592d4f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4592d4e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2_grs6e6                        0x0000557b95f6f3b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b4593244460 __libc_start_main +
    245

    6    tmp2_grs6e6                        0x0000557b95f6efe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660028247
- exit_code: 0
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    if n < 3 {\n        return 0\n    }\n    if n == 3 {\n       \
    \ return 2\n    }\n    var result: [Int] = [0, 0, 2, 0]\n    for i in 4...n {\n\
    \        result.append(result[i-1] + result[i-2] + result[i-3] + result[i-4])\n\
    \    }\n    return result[n]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fib4(n:\
    \ 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n:\
    \ 12) == 386)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028247
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    // TODO: Implement\n    return 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmp6r1zcny1/tmp6r1zcny1.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7d67cdcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7d679d3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7d679d3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7d679d27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6r1zcny1                        0x000055fb757c11b5 <unavailable> + 4533

    5    libc.so.6                          0x00002b7d67ec8460 __libc_start_main +
    245

    6    tmp6r1zcny1                        0x000055fb757c0e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660028247
- exit_code: 0
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    var p0 = 0\n    var p1 = 0\n    var p2 = 2\n    var p3 = 0\n \
    \   var temp = 0\n    for _ in 4...n {\n        temp = p3\n        p3 = p2 + p1\
    \ + p0 + p3\n        p0 = p1\n        p1 = p2\n        p2 = temp\n    }\n    return\
    \ p3\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n:\
    \ 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028247
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    if n < 3 {\n        return n * 2\n    }\n    if n == 3 {\n   \
    \     return 0\n    }\n    var first = 0\n    var second = 2\n    var third =\
    \ 0\n    var fourth = 2\n    var sum = second + third + fourth\n    for _ in 4...n\
    \ {\n        first = second\n        second = third\n        third = fourth\n\
    \        fourth = sum\n        sum = first + second + third + fourth\n    }\n\
    \    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fib4(n: 5) == 4)\n\
    assert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmp4u3k2nr9/tmp4u3k2nr9.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afd3e358c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afd3e04fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afd3e04f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afd3e04e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4u3k2nr9                        0x0000556fc11e9335 <unavailable> + 4917

    5    libc.so.6                          0x00002afd3e544460 __libc_start_main +
    245

    6    tmp4u3k2nr9                        0x0000556fc11e8fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660028247
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fib4(n: 5)\
    \ == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n:\
    \ 12) == 386)"
  status: Exception
  stderr: 'tmpekjwanh8/tmpekjwanh8.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae08c2bbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae08bfb2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae08bfb2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae08bfb17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpekjwanh8                        0x0000561dd37fb1b5 <unavailable> + 4533

    5    libc.so.6                          0x00002ae08c4a7460 __libc_start_main +
    245

    6    tmpekjwanh8                        0x0000561dd37fae69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660028245
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n      \
    \  return 0\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n\
    \        return 0\n    }\n    var a = 0\n    var b = 0\n    var c = 2\n    var\
    \ d = 0\n    for _ in 4...n {\n        d = a + b + c\n        a = b\n        b\
    \ = c\n        c = d\n    }\n    return d\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) ==\
    \ 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpn_1agxic/tmpn_1agxic.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaf55f08c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaf55bffb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaf55bff988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaf55bfe7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn_1agxic                        0x000055ff929143b0 <unavailable> + 5040

    5    libc.so.6                          0x00002aaf560f4460 __libc_start_main +
    245

    6    tmpn_1agxic                        0x000055ff92913fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660028247
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n  if n < 2 {\n    return 0\n  }\n  if n == 2 {\n    return 2\n  }\n\
    \  var result = 2\n  var first = 0\n  var second = 2\n  var third = 0\n  var fourth\
    \ = 0\n  for _ in 3..<n {\n    fourth = first + second + third + result\n    first\
    \ = second\n    second = third\n    third = result\n    result = fourth\n  }\n\
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fib4(n: 5) == 4)\n\
    assert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpb0nscsci/tmpb0nscsci.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afe1356cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afe13263b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afe13263988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afe132627b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb0nscsci                        0x000055bd11f2d335 <unavailable> + 4917

    5    libc.so.6                          0x00002afe13758460 __libc_start_main +
    245

    6    tmpb0nscsci                        0x000055bd11f2cfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660028247
- exit_code: 0
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    if n == 0 {\n        return 0\n    }\n    var previous1 = 0\n\
    \    var previous2 = 0\n    var previous3 = 2\n    var previous4 = 0\n    var\
    \ sum = 0\n    for _ in 4...n {\n        sum = previous1 + previous2 + previous3\
    \ + previous4\n        previous1 = previous2\n        previous2 = previous3\n\
    \        previous3 = previous4\n        previous4 = sum\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028247
- exit_code: 0
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n      \
    \  return 0\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n\
    \        return 0\n    }\n    var i: Int = 0\n    var j: Int = 0\n    var k: Int\
    \ = 2\n    var l: Int = 0\n    var m: Int = 0\n    for _ in 4...n {\n        m\
    \ = i + j + k + l\n        i = j\n        j = k\n        k = l\n        l = m\n\
    \    }\n    return m\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fib4(n: 5)\
    \ == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n:\
    \ 12) == 386)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028247
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n  if n == 0 {\n    return 0\n  }\n  var a = 0\n  var b = 0\n  var\
    \ c = 2\n  var d = 0\n  for _ in 4...n {\n    d = a + b + c\n    a = b\n    b\
    \ = c\n    c = d\n  }\n  return d\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fib4(n:\
    \ 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n:\
    \ 12) == 386)"
  status: Exception
  stderr: 'tmppp7ouwg3/tmppp7ouwg3.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad1db691c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad1db388b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad1db388988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad1db3877b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppp7ouwg3                        0x000055bc8cc863b0 <unavailable> + 5040

    5    libc.so.6                          0x00002ad1db87d460 __libc_start_main +
    245

    6    tmppp7ouwg3                        0x000055bc8cc85fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660028247
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    if n == 0 {\n        return 0\n    }\n    var array = [0, 0, 2,\
    \ 0]\n    var index = 3\n    while index < n {\n        array[3] = array[0] +\
    \ array[1] + array[2] + array[3]\n        array[0] = array[1]\n        array[1]\
    \ = array[2]\n        array[2] = array[3]\n        index += 1\n    }\n    return\
    \ array[3]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n:\
    \ 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpuf5tjm5z/tmpuf5tjm5z.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acd32cb9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acd329b0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acd329b0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acd329af7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuf5tjm5z                        0x0000565173da0365 <unavailable> + 4965

    5    libc.so.6                          0x00002acd32ea5460 __libc_start_main +
    245

    6    tmpuf5tjm5z                        0x0000565173da0019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1660028247
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    // TODO: Your solution here\n    return 0\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpl6p5r7kv/tmpl6p5r7kv.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b31964c0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b31961b7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b31961b7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b31961b67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpl6p5r7kv                        0x00005641a21bf1b5 <unavailable> + 4533

    5    libc.so.6                          0x00002b31966ac460 __libc_start_main +
    245

    6    tmpl6p5r7kv                        0x00005641a21bee69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660028245
- exit_code: 0
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n  var n1 = 0\n  var n2 = 0\n  var n3 = 2\n  var n4 = 0\n  var sum\
    \ = 0\n  for _ in 4...n {\n    sum = n1 + n2 + n3 + n4\n    n1 = n2\n    n2 =\
    \ n3\n    n3 = n4\n    n4 = sum\n  }\n  return sum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028247
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    if n < 3 {\n        return n * 2\n    } else if n == 3 {\n   \
    \     return 0\n    } else {\n        var f1 = 0\n        var f2 = 0\n       \
    \ var f3 = 2\n        var f4 = 2\n        var answer = 0\n        for _ in 4...n\
    \ {\n            answer = f1 + f2 + f3 + f4\n            f1 = f2\n           \
    \ f2 = f3\n            f3 = f4\n            f4 = answer\n        }\n        return\
    \ answer\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fib4(n: 5) == 4)\n\
    assert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpcxqlskqu/tmpcxqlskqu.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4656dedc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4656ae4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4656ae4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4656ae37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcxqlskqu                        0x000055fd8bb61335 <unavailable> + 4917

    5    libc.so.6                          0x00002b4656fd9460 __libc_start_main +
    245

    6    tmpcxqlskqu                        0x000055fd8bb60fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660028247
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fib4(n: 5)\
    \ == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n:\
    \ 12) == 386)"
  status: Exception
  stderr: 'tmpekjwanh8/tmpekjwanh8.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae08c2bbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae08bfb2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae08bfb2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae08bfb17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpekjwanh8                        0x0000561dd37fb1b5 <unavailable> + 4533

    5    libc.so.6                          0x00002ae08c4a7460 __libc_start_main +
    245

    6    tmpekjwanh8                        0x0000561dd37fae69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660028245
- exit_code: 0
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    var\
    \ e = 0\n    if n == 0 {\n        return 0\n    } else if n == 1 {\n        return\
    \ 0\n    } else if n == 2 {\n        return 2\n    } else if n == 3 {\n      \
    \  return 0\n    } else {\n        for i in 4...n {\n            e = a + b + c\
    \ + d\n            a = b\n            b = c\n            c = d\n            d\
    \ = e\n        }\n        return e\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) ==\
    \ 104)\nassert(fib4(n: 12) == 386)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028245
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    if n < 2 {\n        return 0\n    }\n    if n == 2 {\n       \
    \ return 2\n    }\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n\
    \    for _ in 3...n {\n        d = a + b + c\n        a = b\n        b = c\n \
    \       c = d\n    }\n    return d\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\n\
    assert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpqsi9x8g8/tmpqsi9x8g8.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5fd753dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5fd7234b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5fd7234988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5fd72337b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqsi9x8g8                        0x0000557ab17b7335 <unavailable> + 4917

    5    libc.so.6                          0x00002b5fd7729460 __libc_start_main +
    245

    6    tmpqsi9x8g8                        0x0000557ab17b6fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660028247
- exit_code: 0
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n  // base cases\n  if n == 0 {\n    return 0\n  } else if n == 1 {\n\
    \    return 0\n  } else if n == 2 {\n    return 2\n  } else if n == 3 {\n    return\
    \ 0\n  }\n  \n  // general cases\n  var a: Int = 0\n  var b: Int = 0\n  var c:\
    \ Int = 2\n  var d: Int = 0\n  var next: Int = 0\n  for _ in 4...n {\n    next\
    \ = a + b + c + d\n    a = b\n    b = c\n    c = d\n    d = next\n  }\n  return\
    \ next\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n:\
    \ 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028247
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n      \
    \  return 0\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n\
    \        return 0\n    }\n    var a = 0\n    var b = 0\n    var c = 2\n    var\
    \ d = 0\n    for _ in 3...n {\n        a = b\n        b = c\n        c = d\n \
    \       d = a + b + c\n    }\n    return d\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) ==\
    \ 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmp24va7mzg/tmp24va7mzg.swift:54: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b72053a6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b720509db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b720509d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b720509c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp24va7mzg                        0x000055b1edbf5335 <unavailable> + 4917

    5    libc.so.6                          0x00002b7205592460 __libc_start_main +
    245

    6    tmp24va7mzg                        0x000055b1edbf4fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660028247
- exit_code: 0
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n      \
    \  return 0\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n\
    \        return 0\n    }\n    var fib4 = [Int](repeating: 0, count: n+1)\n   \
    \ fib4[0] = 0\n    fib4[1] = 0\n    fib4[2] = 2\n    fib4[3] = 0\n    for i in\
    \ 4..<n+1 {\n        fib4[i] = fib4[i-1] + fib4[i-2] + fib4[i-3] + fib4[i-4]\n\
    \    }\n    return fib4[n]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fib4(n: 5)\
    \ == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n:\
    \ 12) == 386)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028247
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    if\
    \ n < 4 {\n        return fib4(n: n - 1)\n    }\n    for _ in 4...n {\n      \
    \  d = a + b + c\n        a = b\n        b = c\n        c = d\n    }\n    return\
    \ d\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n:\
    \ 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpf4kwj2hh/tmpf4kwj2hh.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7464c07c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b74648feb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b74648fe988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b74648fd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf4kwj2hh                        0x000056400c2903b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b7464df3460 __libc_start_main +
    245

    6    tmpf4kwj2hh                        0x000056400c28ffe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660028247
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    var\
    \ e = 0\n    for _ in 3...n {\n        e = a + b + c + d\n        a = b\n    \
    \    b = c\n        c = d\n        d = e\n    }\n    return e\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpan5bfzb0/tmpan5bfzb0.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b22973a4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b229709bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b229709b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b229709a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpan5bfzb0                        0x000055948a9fc335 <unavailable> + 4917

    5    libc.so.6                          0x00002b2297590460 __libc_start_main +
    245

    6    tmpan5bfzb0                        0x000055948a9fbfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660028246
- exit_code: 0
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    \n    if n == 0 {\n        return 0\n    }\n    \n    if n ==\
    \ 1 {\n        return 0\n    }\n    \n    if n == 2 {\n        return 2\n    }\n\
    \    \n    if n == 3 {\n        return 0\n    }\n    \n    var sum = 0\n    var\
    \ first = 0\n    var second = 0\n    var third = 2\n    var fourth = 0\n    \n\
    \    for _ in 4...n {\n        sum = first + second + third + fourth\n       \
    \ first = second\n        second = third\n        third = fourth\n        fourth\
    \ = sum\n    }\n    \n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\n\
    assert(fib4(n: 12) == 386)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028247
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n      \
    \  return 0\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n\
    \        return 0\n    }\n    var n2 = 0\n    var n1 = 0\n    var n0 = 2\n   \
    \ var n3 = 0\n    for _ in 4...n {\n        n3 = n2 + n1 + n0\n        n2 = n1\n\
    \        n1 = n0\n        n0 = n3\n    }\n    return n3\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpgtvd7z_8/tmpgtvd7z_8.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac51e983c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac51e67ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac51e67a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac51e6797b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgtvd7z_8                        0x000055c521e983b0 <unavailable> + 5040

    5    libc.so.6                          0x00002ac51eb6f460 __libc_start_main +
    245

    6    tmpgtvd7z_8                        0x000055c521e97fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660028247
- exit_code: 0
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    var f_k_minus_4 = 0\n    var f_k_minus_3 = 0\n    var f_k_minus_2\
    \ = 2\n    var f_k_minus_1 = 0\n    var f_k = 0\n    \n    if n < 4 {\n      \
    \  return n\n    }\n    \n    for i in 4...n {\n        f_k = f_k_minus_1 + f_k_minus_2\
    \ + f_k_minus_3 + f_k_minus_4\n        f_k_minus_4 = f_k_minus_3\n        f_k_minus_3\
    \ = f_k_minus_2\n        f_k_minus_2 = f_k_minus_1\n        f_k_minus_1 = f_k\n\
    \    }\n    \n    return f_k\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fib4(n:\
    \ 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n:\
    \ 12) == 386)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028247
- exit_code: 0
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    var prev = Array(repeating: 0, count: 4)\n    prev[0] = 0\n  \
    \  prev[1] = 0\n    prev[2] = 2\n    prev[3] = 0\n    guard n > 3 else { return\
    \ prev[n] }\n    for _ in 4...n {\n        let temp = prev[3]\n        prev[3]\
    \ = prev[2] + prev[1] + prev[0] + prev[3]\n        prev[0] = prev[1]\n       \
    \ prev[1] = prev[2]\n        prev[2] = temp\n    }\n    return prev[3]\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028247
- exit_code: 1
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    var\
    \ e = 0\n    if n <= 3 {\n        return fib(n: n)\n    }\n    for _ in 4...n\
    \ {\n        e = a + b + c + d\n        a = b\n        b = c\n        c = d\n\
    \        d = e\n    }\n    return e\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\n\
    assert(fib4(n: 12) == 386)"
  status: SyntaxError
  stderr: "/tmp/tmpxfqnvm1t.swift:22:16: error: cannot find 'fib' in scope\n     \
    \   return fib(n: n)\n               ^~~\n"
  stdout: ''
  timestamp: 1660028247
- exit_code: 0
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    var fib1 = 0\n    var fib2 = 0\n    var fib3 = 2\n    var fib4\
    \ = 0\n    var currentFib = 0\n    if n == 0 {\n        return 0\n    } else if\
    \ n == 1 {\n        return 0\n    } else if n == 2 {\n        return 2\n    }\
    \ else if n == 3 {\n        return 0\n    } else {\n        for _ in 4...n {\n\
    \            currentFib = fib1 + fib2 + fib3 + fib4\n            fib1 = fib2\n\
    \            fib2 = fib3\n            fib3 = fib4\n            fib4 = currentFib\n\
    \        }\n        return currentFib\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) ==\
    \ 104)\nassert(fib4(n: 12) == 386)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028247
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    \n    if n == 0 {\n        return 0\n    }\n    \n    if n ==\
    \ 1 {\n        return 0\n    }\n    \n    if n == 2 {\n        return 2\n    }\n\
    \    \n    if n == 3 {\n        return 0\n    }\n    \n    var first = 0\n   \
    \ var second = 0\n    var third = 2\n    var fourth = 0\n    var result = 0\n\
    \    \n    for _ in 3...n {\n        result = first + second + third + fourth\n\
    \        first = second\n        second = third\n        third = fourth\n    \
    \    fourth = result\n    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpwyggi506/tmpwyggi506.swift:63: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba25b196c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba25ae8db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba25ae8d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba25ae8c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwyggi506                        0x000056102f7f0335 <unavailable> + 4917

    5    libc.so.6                          0x00002ba25b382460 __libc_start_main +
    245

    6    tmpwyggi506                        0x000056102f7effe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660028247
- exit_code: 0
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    var fib4 = [0, 0, 2, 0]\n    if n <= 3 {\n        return fib4[n]\n\
    \    }\n    for i in 4...n {\n        fib4.append(fib4[i-1] + fib4[i-2] + fib4[i-3]\
    \ + fib4[i-4])\n    }\n    return fib4[n]\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) ==\
    \ 104)\nassert(fib4(n: 12) == 386)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028247
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n  if n == 0 {\n    return 0\n  }\n  if n == 1 {\n    return 0\n  }\n\
    \  if n == 2 {\n    return 2\n  }\n  if n == 3 {\n    return 0\n  }\n  if n ==\
    \ 4 {\n    return 1\n  }\n  var i = 0\n  var j = 1\n  var k = 2\n  var l = 0\n\
    \  var sum = 0\n  for _ in 5...n {\n    sum = i + j + k + l\n    i = j\n    j\
    \ = k\n    k = l\n    l = sum\n  }\n  return sum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmp9eg_yzdj/tmp9eg_yzdj.swift:59: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aca98559c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aca98250b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aca98250988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aca9824f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9eg_yzdj                        0x0000562c69fb2335 <unavailable> + 4917

    5    libc.so.6                          0x00002aca98745460 __libc_start_main +
    245

    6    tmp9eg_yzdj                        0x0000562c69fb1fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660028247
- exit_code: 0
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    var\
    \ result = 0\n    if n == 0 {\n        return 0\n    } else if n == 1 {\n    \
    \    return 0\n    } else if n == 2 {\n        return 2\n    } else if n == 3\
    \ {\n        return 0\n    } else {\n        for i in 4...n {\n            result\
    \ = a + b + c + d\n            a = b\n            b = c\n            c = d\n \
    \           d = result\n        }\n        return result\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028247
- exit_code: 0
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    var i = 0\n    var first = 0\n    var second = 0\n    var third\
    \ = 2\n    var fourth = 0\n    var next = 0\n    while i < n {\n        next =\
    \ first + second + third + fourth\n        first = second\n        second = third\n\
    \        third = fourth\n        fourth = next\n        i += 1\n    }\n    return\
    \ first\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n:\
    \ 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028247
- exit_code: 0
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n      \
    \  return 0\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n\
    \        return 0\n    }\n    var arr = [0, 0, 2, 0]\n    for i in 4..<n+1 {\n\
    \        let temp = arr[3] + arr[2] + arr[1] + arr[0]\n        arr[0] = arr[1]\n\
    \        arr[1] = arr[2]\n        arr[2] = arr[3]\n        arr[3] = temp\n   \
    \ }\n    return arr[3]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fib4(n: 5)\
    \ == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n:\
    \ 12) == 386)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028247
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    var lastFib4 = (1, 1, 2, 0)\n    for _ in 4..<n {\n        lastFib4\
    \ = (lastFib4.1, lastFib4.2, lastFib4.3, lastFib4.0 + lastFib4.1 + lastFib4.2\
    \ + lastFib4.3)\n    }\n    return lastFib4.3\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) ==\
    \ 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpodjqohyt/tmpodjqohyt.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b192b01ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b192ad11b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b192ad11988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b192ad107b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpodjqohyt                        0x00005589418c53b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b192b206460 __libc_start_main +
    245

    6    tmpodjqohyt                        0x00005589418c4fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660028247
- exit_code: 0
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n      \
    \  return 0\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n\
    \        return 0\n    }\n    var a = 0\n    var b = 0\n    var c = 2\n    var\
    \ d = 0\n    for _ in 4...n {\n        let x = a + b + c + d\n        a = b\n\
    \        b = c\n        c = d\n        d = x\n    }\n    return d\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028247
- exit_code: 0
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    \n    var fib = [0,0,2,0]\n    \n    for i in 4...n {\n      \
    \  fib.append(fib[i-1] + fib[i-2] + fib[i-3] + fib[i-4])\n    }\n    \n    return\
    \ fib[n]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n:\
    \ 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028247
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    guard n > 2 else { return n }\n    return (1...4).reduce(0) {\
    \ n, acc in\n        n + fib4(n: n-acc)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) ==\
    \ 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmp7exhz8xs/tmp7exhz8xs.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0611d76c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0611a6db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0611a6d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0611a6c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7exhz8xs                        0x000055df22f9b2f5 <unavailable> + 4853

    5    libc.so.6                          0x00002b0611f62460 __libc_start_main +
    245

    6    tmp7exhz8xs                        0x000055df22f9afa9 <unavailable> + 4009

    '
  stdout: ''
  timestamp: 1660028247
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n  let a = [0, 0, 2, 0]\n  guard n > 3 else { return a[n] }\n  var\
    \ fib4n1 = a[3]\n  var fib4n2 = a[2]\n  var fib4n3 = a[1]\n  var fib4n4 = a[0]\n\
    \  var fib4n = fib4n1 + fib4n2 + fib4n3 + fib4n4\n  for _ in 4...n {\n    fib4n1\
    \ = fib4n2\n    fib4n2 = fib4n3\n    fib4n3 = fib4n4\n    fib4n4 = fib4n\n   \
    \ fib4n = fib4n1 + fib4n2 + fib4n3 + fib4n4\n  }\n  return fib4n\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmp5t3scgjs/tmp5t3scgjs.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac77a0dac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac779dd1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac779dd1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac779dd07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5t3scgjs                        0x0000558aef235495 <unavailable> + 5269

    5    libc.so.6                          0x00002ac77a2c6460 __libc_start_main +
    245

    6    tmp5t3scgjs                        0x0000558aef235149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1660028247
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    var\
    \ k = 3\n    while k <= n {\n        d = a + b + c\n        a = b\n        b =\
    \ c\n        c = d\n        k += 1\n    }\n    return d\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpeiojom7i/tmpeiojom7i.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac959a8bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac959782b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac959782988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac9597817b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeiojom7i                        0x0000564ccfe7f1b5 <unavailable> + 4533

    5    libc.so.6                          0x00002ac959c77460 __libc_start_main +
    245

    6    tmpeiojom7i                        0x0000564ccfe7ee69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660028247
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    if n < 0 {\n        return -1\n    }\n    if n == 0 {\n      \
    \  return 0\n    }\n    if n == 1 {\n        return 0\n    }\n    if n == 2 {\n\
    \        return 2\n    }\n    if n == 3 {\n        return 0\n    }\n    var a\
    \ = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    for _ in 4...n {\n   \
    \     d = c + b + a\n        a = b\n        b = c\n        c = d\n    }\n    return\
    \ d\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n:\
    \ 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpp7u1cclf/tmpp7u1cclf.swift:58: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b594438bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5944082b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5944082988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b59440817b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp7u1cclf                        0x0000558031f573b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b5944577460 __libc_start_main +
    245

    6    tmpp7u1cclf                        0x0000558031f56fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660028247
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    guard n > 3 else { return n - 1 }\n    var f4 = [0, 0, 2, 0]\n\
    \    for _ in 4...n {\n        let last4 = f4.last!\n        f4.removeLast()\n\
    \        f4.insert(f4.reduce(0, +) + last4, at: 0)\n    }\n    return f4.reduce(0,\
    \ +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n:\
    \ 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpycvzwimg/tmpycvzwimg.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae37b6a0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae37b397b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae37b397988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae37b3967b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpycvzwimg                        0x000055ca6e665655 <unavailable> + 5717

    5    libc.so.6                          0x00002ae37b88c460 __libc_start_main +
    245

    6    tmpycvzwimg                        0x000055ca6e665309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1660028247
- exit_code: 0
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n  var first = 0\n  var second = 0\n  var third = 2\n  var fourth =\
    \ 0\n  var result = 0\n  if n == 0 {\n    return 0\n  } else if n == 1 {\n   \
    \ return 0\n  } else if n == 2 {\n    return 2\n  } else if n == 3 {\n    return\
    \ 0\n  } else {\n    for _ in 4...n {\n      result = first + second + third +\
    \ fourth\n      first = second\n      second = third\n      third = fourth\n \
    \     fourth = result\n    }\n    return result\n  }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028247
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n  if n == 0 {\n    return 0\n  }\n  if n == 1 {\n    return 0\n  }\n\
    \  if n == 2 {\n    return 2\n  }\n  if n == 3 {\n    return 0\n  }\n  var n1\
    \ = 0\n  var n2 = 0\n  var n3 = 2\n  var n4 = 0\n  var i = 4\n  while i <= n {\n\
    \    n4 = n1 + n2 + n3 + n4\n    n1 = n2\n    n2 = n3\n    n3 = n4\n    i += 1\n\
    \  }\n  return n4\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fib4(n: 5) == 4)\n\
    assert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpdk4hdh5w/tmpdk4hdh5w.swift:56: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba99a366c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba99a05db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba99a05d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba99a05c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdk4hdh5w                        0x00005654ee2f71b5 <unavailable> + 4533

    5    libc.so.6                          0x00002ba99a552460 __libc_start_main +
    245

    6    tmpdk4hdh5w                        0x00005654ee2f6e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660028247
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    var first = 0\n    var second = 0\n    var third = 2\n    var\
    \ fourth = 0\n    for _ in 3...n {\n        fourth = first + second + third\n\
    \        first = second\n        second = third\n        third = fourth\n    }\n\
    \    return fourth\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fib4(n: 5) == 4)\n\
    assert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpnvh9cj7m/tmpnvh9cj7m.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acbc2955c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acbc264cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acbc264c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acbc264b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnvh9cj7m                        0x000055dccf37c335 <unavailable> + 4917

    5    libc.so.6                          0x00002acbc2b41460 __libc_start_main +
    245

    6    tmpnvh9cj7m                        0x000055dccf37bfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660028247
- exit_code: 0
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    var n1 = 0\n    var n2 = 0\n    var n3 = 2\n    var n4 = 0\n \
    \   var n5 = 0\n    var count = 0\n    if n < 4 {\n        return n\n    }\n \
    \   while count < n - 3 {\n        n5 = n1 + n2 + n3 + n4\n        n1 = n2\n \
    \       n2 = n3\n        n3 = n4\n        n4 = n5\n        count += 1\n    }\n\
    \    return n5\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fib4(n: 5) == 4)\n\
    assert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028247
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    \n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n\
    \    \n    if n == 0 {\n        return 0\n    } else if n == 1 {\n        return\
    \ 0\n    } else if n == 2 {\n        return 2\n    } else if n == 3 {\n      \
    \  return 0\n    } else {\n        for _ in 4...n {\n            d = a + b + c\n\
    \            a = b\n            b = c\n            c = d\n        }\n        return\
    \ d\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n:\
    \ 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmplar95f4d/tmplar95f4d.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad41e738c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad41e42fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad41e42f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad41e42e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplar95f4d                        0x0000556de0e333b0 <unavailable> + 5040

    5    libc.so.6                          0x00002ad41e924460 __libc_start_main +
    245

    6    tmplar95f4d                        0x0000556de0e32fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660028247
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fib4(n: 5)\
    \ == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n:\
    \ 12) == 386)"
  status: Exception
  stderr: 'tmpekjwanh8/tmpekjwanh8.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae08c2bbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae08bfb2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae08bfb2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae08bfb17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpekjwanh8                        0x0000561dd37fb1b5 <unavailable> + 4533

    5    libc.so.6                          0x00002ae08c4a7460 __libc_start_main +
    245

    6    tmpekjwanh8                        0x0000561dd37fae69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660028245
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    for\
    \ _ in 3..<n {\n        d = a + b + c\n        a = b\n        b = c\n        c\
    \ = d\n    }\n    return d\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fib4(n: 5)\
    \ == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n:\
    \ 12) == 386)"
  status: Exception
  stderr: 'tmp9ljl27_4/tmp9ljl27_4.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad3d2e66c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad3d2b5db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad3d2b5d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad3d2b5c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9ljl27_4                        0x0000557c57c983b0 <unavailable> + 5040

    5    libc.so.6                          0x00002ad3d3052460 __libc_start_main +
    245

    6    tmp9ljl27_4                        0x0000557c57c97fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660028247
- exit_code: 0
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n  guard n > 0 else { return 0 }\n  guard n > 1 else { return 0 }\n\
    \  guard n > 2 else { return 2 }\n  guard n > 3 else { return 0 }\n  var a = 0\n\
    \  var b = 0\n  var c = 2\n  var d = 0\n  for _ in 4...n {\n    let t = a + b\
    \ + c + d\n    a = b\n    b = c\n    c = d\n    d = t\n  }\n  return d\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028247
- exit_code: 1
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    // This can be solved with an iterative solution using a for loop.\
    \  The fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4) relationship only\
    \ requires 4 terms\n    // to compute the next term of the sequence.  For example,\
    \ the 6th term of the sequence is computed as follows:\n    //\n    // fib4(6)\
    \ -> fib4(5) + fib4(4) + fib4(3) + fib4(2)\n    //          -> fib4(5) + fib4(4)\
    \ + 0      + 2\n    //          -> (fib4(4) + fib4(3) + fib4(2) + fib4(1)) + (fib4(3)\
    \ + fib4(2) + fib4(1) + fib4(0)) + (0 + 2 + 0 + 0)\n    //          -> ((fib4(3)\
    \ + fib4(2) + fib4(1) + fib4(0)) + (fib4(2) + fib4(1) + fib4(0) + 0) + (0 + 0\
    \ + 0 + 0)) + ((fib4(2) + fib4(1) + fib4(0) + 0) + (0 + 0 + 0 + 0) + (0 + 0 +\
    \ 0 + 0)) + (0 + 2 + 0 + 0)\n    //          -> (((fib4(2) + fib4(1) + fib4(0)\
    \ + 0) + (0 + 0 + 0 + 0) + (0 + 0 + 0 + 0)) + ((0 + 0 + 0 + 0) + (0 + 0 + 0 +\
    \ 0) + (0 + 0 + 0 + 0))) + (((0 + 0 + 0 + 0) + (0 + 0 + 0 + 0) + (0 + 0 + 0 +\
    \ 0)) + ((0 + 0 + 0 + 0) + (0 + 0 + 0 + 0) + (0 + 0 + 0 + 0))) + (0 + 2 + 0 +\
    \ 0)\n    //          -> 0 + 0 + 2 + 0\n    //          -> 2 + 2 + 0\n    // \
    \         -> 4 + 0\n    //          -> 4\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\n\
    assert(fib4(n: 12) == 386)"
  status: SyntaxError
  stderr: '/tmp/tmpwsq3a547.swift:28:1: error: missing return in global function expected
    to return ''Int''

    }

    ^

    '
  stdout: ''
  timestamp: 1660028247
- exit_code: 1
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    if n < 0 {\n        return -1\n    } else if n < 3 {\n       \
    \ return n == 2 ? 2 : 0\n    } else if n == 3 {\n        return 0\n    }\n   \
    \ \n    var nMinusFour = 0\n    var nMinusThree = 0\n    var nMinusTwo = 2\n \
    \   var nMinusOne = 0\n    var nth: Int\n    \n    for _ in 3...n {\n        nth\
    \ = nMinusFour + nMinusThree + nMinusTwo + nMinusOne\n        nMinusFour = nMinusThree\n\
    \        nMinusThree = nMinusTwo\n        nMinusTwo = nMinusOne\n        nMinusOne\
    \ = nth\n    }\n    \n    return nth\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\n\
    assert(fib4(n: 12) == 386)"
  status: SyntaxError
  stderr: "/tmp/tmpo_96k7tk.swift:38:12: error: variable 'nth' used before being initialized\n\
    \    return nth\n           ^\n/tmp/tmpo_96k7tk.swift:28:9: note: variable defined\
    \ here\n    var nth: Int\n        ^\n"
  stdout: ''
  timestamp: 1660028247
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    // TODO: Implement fib4\n    return 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpydg4j1s5/tmpydg4j1s5.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af4bf53fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af4bf236b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af4bf236988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af4bf2357b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpydg4j1s5                        0x000055712a58f1b5 <unavailable> + 4533

    5    libc.so.6                          0x00002af4bf72b460 __libc_start_main +
    245

    6    tmpydg4j1s5                        0x000055712a58ee69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660028247
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n  guard n > 2 else { return 2 }\n  var a = 0\n  var b = 0\n  var c\
    \ = 2\n  var d = 0\n  for _ in 3..<n {\n    d = a + b + c\n    a = b\n    b =\
    \ c\n    c = d\n  }\n  return d\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fib4(n:\
    \ 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n:\
    \ 12) == 386)"
  status: Exception
  stderr: 'tmpqek29s4y/tmpqek29s4y.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b22983fac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b22980f1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b22980f1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b22980f07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqek29s4y                        0x00005599d66173b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b22985e6460 __libc_start_main +
    245

    6    tmpqek29s4y                        0x00005599d6616fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660028247
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    var n1 = 0\n    var n2 = 0\n    var n3 = 2\n    var n4 = 0\n \
    \   if n == 0 {\n        return 0\n    } else if n == 1 {\n        return 0\n\
    \    } else if n == 2 {\n        return 2\n    } else if n == 3 {\n        return\
    \ 0\n    } else {\n        for _ in 4...n {\n            n4 = n1 + n2 + n3\n \
    \           n1 = n2\n            n2 = n3\n            n3 = n4\n        }\n   \
    \     return n4\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fib4(n: 5)\
    \ == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n:\
    \ 12) == 386)"
  status: Exception
  stderr: 'tmpfvtd83vn/tmpfvtd83vn.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8457bc7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b84578beb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b84578be988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b84578bd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfvtd83vn                        0x000055ed48ec03b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b8457db3460 __libc_start_main +
    245

    6    tmpfvtd83vn                        0x000055ed48ebffe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660028247
- exit_code: 0
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    var seq = [0, 0, 2, 0]\n    if n <= 3 {\n        return seq[n]\n\
    \    }\n    for i in 4...n {\n        seq.append(seq[0] + seq[1] + seq[2] + seq[3])\n\
    \        seq.removeFirst()\n    }\n    return seq[3]\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028247
- exit_code: 1
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    return fib4_recursive(n: n)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) ==\
    \ 104)\nassert(fib4(n: 12) == 386)"
  status: SyntaxError
  stderr: "/tmp/tmpy0h8s5oq.swift:16:12: error: cannot find 'fib4_recursive' in scope\n\
    \    return fib4_recursive(n: n)\n           ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660028247
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    if n < 0 {\n        return -1\n    }\n    if n == 0 {\n      \
    \  return 0\n    }\n    if n == 1 {\n        return 0\n    }\n    if n == 2 {\n\
    \        return 2\n    }\n    if n == 3 {\n        return 0\n    }\n    var last2\
    \ = 0\n    var last1 = 0\n    var last3 = 2\n    var last4 = 0\n    var next =\
    \ 0\n    for _ in 4...n {\n        next = last2 + last1 + last3 + last4\n    \
    \    last4 = last3\n        last3 = last2\n        last2 = last1\n        last1\
    \ = next\n    }\n    return next\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fib4(n:\
    \ 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n:\
    \ 12) == 386)"
  status: Exception
  stderr: 'tmpnq5anou6/tmpnq5anou6.swift:60: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af4aed15c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af4aea0cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af4aea0c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af4aea0b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnq5anou6                        0x000056364d9cc3b0 <unavailable> + 5040

    5    libc.so.6                          0x00002af4aef01460 __libc_start_main +
    245

    6    tmpnq5anou6                        0x000056364d9cbfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660028247
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    guard n > 3 else { return n - 2 }\n    var first = 0\n    var\
    \ second = 0\n    var third = 2\n    var fourth = 0\n    for _ in 4...n {\n  \
    \      fourth = first + second + third + fourth\n        first = second\n    \
    \    second = third\n        third = fourth\n    }\n    return fourth\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpplm_v83j/tmpplm_v83j.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adc47db5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adc47aacb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adc47aac988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adc47aab7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpplm_v83j                        0x0000561b66713335 <unavailable> + 4917

    5    libc.so.6                          0x00002adc47fa1460 __libc_start_main +
    245

    6    tmpplm_v83j                        0x0000561b66712fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660028247
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n  if n == 0 {\n    return 0\n  }\n  if n == 1 {\n    return 0\n  }\n\
    \  if n == 2 {\n    return 2\n  }\n  if n == 3 {\n    return 0\n  }\n  if n ==\
    \ 4 {\n    return 4\n  }\n  var arr = [0, 0, 2, 0, 4]\n  for i in 5...n {\n  \
    \  let last = arr.last\n    arr.removeFirst()\n    arr.append(last! + arr[0] +\
    \ arr[1] + arr[2])\n  }\n  return arr.last!\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) ==\
    \ 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpngo9ct8l/tmpngo9ct8l.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9bd1acfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9bd17c6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9bd17c6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9bd17c57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpngo9ct8l                        0x0000557a3af7d625 <unavailable> + 5669

    5    libc.so.6                          0x00002b9bd1cbb460 __libc_start_main +
    245

    6    tmpngo9ct8l                        0x0000557a3af7d2d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660028247
- exit_code: 0
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    assert(n >= 0)\n    if n == 0 {\n        return 0\n    }\n   \
    \ if n == 1 {\n        return 0\n    }\n    if n == 2 {\n        return 2\n  \
    \  }\n    if n == 3 {\n        return 0\n    }\n    var n0 = 0\n    var n1 = 0\n\
    \    var n2 = 2\n    var n3 = 0\n    var nN = 0\n    for _ in 4...n {\n      \
    \  nN = n0 + n1 + n2 + n3\n        n0 = n1\n        n1 = n2\n        n2 = n3\n\
    \        n3 = nN\n    }\n    return nN\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\n\
    assert(fib4(n: 12) == 386)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028247
- exit_code: 0
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    var\
    \ temp = 0\n    if n == 0 {\n        return 0\n    } else if n == 1 {\n      \
    \  return 0\n    } else if n == 2 {\n        return 2\n    } else if n == 3 {\n\
    \        return 0\n    } else {\n        for _ in 4...n {\n            temp =\
    \ d\n            d = a + b + c + d\n            a = b\n            b = c\n   \
    \         c = temp\n        }\n        return d\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028247
- exit_code: 1
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    guard n > 3 else { return fib(n: n) }\n    var fn_1 = 0, fn_2\
    \ = 0, fn_3 = 2, fn_4 = 0\n    for _ in 4...n {\n        fn_4 = fn_1 + fn_2 +\
    \ fn_3 + fn_4\n        fn_1 = fn_2\n        fn_2 = fn_3\n        fn_3 = fn_4\n\
    \    }\n    return fn_4\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fib4(n: 5)\
    \ == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n:\
    \ 12) == 386)"
  status: SyntaxError
  stderr: "/tmp/tmp32kcjijz.swift:16:31: error: cannot find 'fib' in scope\n    guard\
    \ n > 3 else { return fib(n: n) }\n                              ^~~\n"
  stdout: ''
  timestamp: 1660028247
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fib4(n: 5)\
    \ == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n:\
    \ 12) == 386)"
  status: Exception
  stderr: 'tmpekjwanh8/tmpekjwanh8.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae08c2bbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae08bfb2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae08bfb2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae08bfb17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpekjwanh8                        0x0000561dd37fb1b5 <unavailable> + 4533

    5    libc.so.6                          0x00002ae08c4a7460 __libc_start_main +
    245

    6    tmpekjwanh8                        0x0000561dd37fae69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660028245
- exit_code: 0
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    if n == 0 {\n        return 0\n    }\n    var fibs: [Int] = [0,\
    \ 0, 2, 0]\n    var i = 3\n    while i < n {\n        let fib4 = fibs[0] + fibs[1]\
    \ + fibs[2] + fibs[3]\n        fibs[0] = fibs[1]\n        fibs[1] = fibs[2]\n\
    \        fibs[2] = fibs[3]\n        fibs[3] = fib4\n        i += 1\n    }\n  \
    \  return fibs[3]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fib4(n: 5) == 4)\n\
    assert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028247
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    assert(n >= 0)\n    if n < 3 {\n        return n\n    }\n    var\
    \ a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    for _ in 3...n {\n \
    \       d = a + b + c\n        a = b\n        b = c\n        c = d\n    }\n  \
    \  return d\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n:\
    \ 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpr_yri513/tmpr_yri513.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba24d6f6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba24d3edb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba24d3ed988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba24d3ec7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr_yri513                        0x000055b2fabd0335 <unavailable> + 4917

    5    libc.so.6                          0x00002ba24d8e2460 __libc_start_main +
    245

    6    tmpr_yri513                        0x000055b2fabcffe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660028247
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    guard n > 3 else { return n + 1 }\n    return fib4(n: n - 1) +\
    \ fib4(n: n - 2) + fib4(n: n - 3) + fib4(n: n - 4)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpjq07gb7o/tmpjq07gb7o.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acb3685cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acb36553b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acb36553988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acb365527b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjq07gb7o                        0x0000561136a4f1b5 <unavailable> + 4533

    5    libc.so.6                          0x00002acb36a48460 __libc_start_main +
    245

    6    tmpjq07gb7o                        0x0000561136a4ee69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660028247
- exit_code: 0
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n      \
    \  return 0\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n\
    \        return 0\n    }\n    var f0 = 0\n    var f1 = 0\n    var f2 = 2\n   \
    \ var f3 = 0\n    var f4 = 0\n    for _ in 4...n {\n        f4 = f3 + f2 + f1\
    \ + f0\n        f0 = f1\n        f1 = f2\n        f2 = f3\n        f3 = f4\n \
    \   }\n    return f4\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fib4(n: 5)\
    \ == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n:\
    \ 12) == 386)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028247
- exit_code: 0
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    \n    var nums = [0, 0, 2, 0]\n    \n    for _ in 4...n {\n  \
    \      let a = nums[0]\n        let b = nums[1]\n        let c = nums[2]\n   \
    \     let d = nums[3]\n        \n        nums = [b, c, d, a + b + c + d]\n   \
    \ }\n    \n    return nums[3]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fib4(n:\
    \ 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n:\
    \ 12) == 386)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028247
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    return 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fib4(n: 5)\
    \ == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n:\
    \ 12) == 386)"
  status: Exception
  stderr: 'tmp6sl819ab/tmp6sl819ab.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba50ba15c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba50b70cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba50b70c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba50b70b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6sl819ab                        0x00005620c7cce1b5 <unavailable> + 4533

    5    libc.so.6                          0x00002ba50bc01460 __libc_start_main +
    245

    6    tmp6sl819ab                        0x00005620c7ccde69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660028246
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    if n == 0 {\n        return 0\n    }\n    var x0 = 0\n    var\
    \ x1 = 0\n    var x2 = 2\n    var x3 = 0\n    for _ in 3...n {\n        let x4\
    \ = x0 + x1 + x2 + x3\n        x0 = x1\n        x1 = x2\n        x2 = x3\n   \
    \     x3 = x4\n    }\n    return x3\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\n\
    assert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmp8bb3r30t/tmp8bb3r30t.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b453b8f3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b453b5eab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b453b5ea988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b453b5e97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8bb3r30t                        0x0000556a95088335 <unavailable> + 4917

    5    libc.so.6                          0x00002b453badf460 __libc_start_main +
    245

    6    tmp8bb3r30t                        0x0000556a95087fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660028247
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fib4(n: 5)\
    \ == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n:\
    \ 12) == 386)"
  status: Exception
  stderr: 'tmpohj11naf/tmpohj11naf.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3c68ccec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3c689c5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3c689c5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3c689c47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpohj11naf                        0x00005647ce6861b5 <unavailable> + 4533

    5    libc.so.6                          0x00002b3c68eba460 __libc_start_main +
    245

    6    tmpohj11naf                        0x00005647ce685e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660028247
- exit_code: 0
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    guard n > 0 else { return 0 }\n    guard n > 1 else { return 0\
    \ }\n    guard n > 2 else { return 2 }\n    guard n > 3 else { return 0 }\n  \
    \  \n    var values = [0, 0, 2, 0]\n    for i in 4...n {\n        let newValue\
    \ = values[0] + values[1] + values[2] + values[3]\n        values[0] = values[1]\n\
    \        values[1] = values[2]\n        values[2] = values[3]\n        values[3]\
    \ = newValue\n    }\n    return values[3]\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) ==\
    \ 104)\nassert(fib4(n: 12) == 386)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028248
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    var result = 0\n    var fib = 0\n    var fib2 = 0\n    var fib3\
    \ = 0\n    var fib4 = 0\n    if n < 2 {\n        return 0\n    } else if n ==\
    \ 2 {\n        return 2\n    } else {\n        for i in 3...n {\n            result\
    \ = fib + fib2 + fib3 + fib4\n            fib4 = fib3\n            fib3 = fib2\n\
    \            fib2 = fib\n            fib = result\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n:\
    \ 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpx6pv0h0b/tmpx6pv0h0b.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6245e78c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6245b6fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6245b6f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6245b6e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx6pv0h0b                        0x0000559beb727335 <unavailable> + 4917

    5    libc.so.6                          0x00002b6246064460 __libc_start_main +
    245

    6    tmpx6pv0h0b                        0x0000559beb726fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660028248
- exit_code: 1
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    var x = 0\n    var y = 0\n    var z = 2\n    var w = 0\n    if\
    \ n < 4 {\n        return fib4_helper(n: n)\n    }\n    for _ in 4...n {\n   \
    \     w = x + y + z\n        x = y\n        y = z\n        z = w\n    }\n    return\
    \ w\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n:\
    \ 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: SyntaxError
  stderr: "/tmp/tmp21barmxw.swift:21:16: error: cannot find 'fib4_helper' in scope\n\
    \        return fib4_helper(n: n)\n               ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660028247
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fib4(n: 5)\
    \ == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n:\
    \ 12) == 386)"
  status: Exception
  stderr: 'tmpekjwanh8/tmpekjwanh8.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae08c2bbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae08bfb2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae08bfb2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae08bfb17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpekjwanh8                        0x0000561dd37fb1b5 <unavailable> + 4533

    5    libc.so.6                          0x00002ae08c4a7460 __libc_start_main +
    245

    6    tmpekjwanh8                        0x0000561dd37fae69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660028245
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n  guard n > 2 else { return n == 2 ? 2 : 0 }\n  var a = 0\n  var b\
    \ = 0\n  var c = 2\n  var d = 0\n  for _ in 3...n {\n    d = a + b + c\n    a\
    \ = b\n    b = c\n    c = d\n  }\n  return d\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) ==\
    \ 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpm4er77qx/tmpm4er77qx.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad1d8f59c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad1d8c50b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad1d8c50988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad1d8c4f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpm4er77qx                        0x0000556b58c62335 <unavailable> + 4917

    5    libc.so.6                          0x00002ad1d9145460 __libc_start_main +
    245

    6    tmpm4er77qx                        0x0000556b58c61fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660028248
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    // TODO: Implement me!\n    return 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpod8oz1og/tmpod8oz1og.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aac6cab6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aac6c7adb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aac6c7ad988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aac6c7ac7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpod8oz1og                        0x000055b90b7601b5 <unavailable> + 4533

    5    libc.so.6                          0x00002aac6cca2460 __libc_start_main +
    245

    6    tmpod8oz1og                        0x000055b90b75fe69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660028248
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fib4(n: 5)\
    \ == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n:\
    \ 12) == 386)"
  status: Exception
  stderr: 'tmpekjwanh8/tmpekjwanh8.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae08c2bbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae08bfb2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae08bfb2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae08bfb17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpekjwanh8                        0x0000561dd37fb1b5 <unavailable> + 4533

    5    libc.so.6                          0x00002ae08c4a7460 __libc_start_main +
    245

    6    tmpekjwanh8                        0x0000561dd37fae69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660028245
- exit_code: 0
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    var temp = [0, 0, 2, 0]\n    for i in 4...n {\n        let a =\
    \ temp[0]\n        let b = temp[1]\n        let c = temp[2]\n        let d = temp[3]\n\
    \        temp[0] = b\n        temp[1] = c\n        temp[2] = d\n        temp[3]\
    \ = a + b + c + d\n    }\n    return temp[3]\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) ==\
    \ 104)\nassert(fib4(n: 12) == 386)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028248
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    // your code here\n    return -1\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmp43nedni3/tmp43nedni3.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b07308d2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b07305c9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b07305c9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b07305c87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp43nedni3                        0x000056154362d1b5 <unavailable> + 4533

    5    libc.so.6                          0x00002b0730abe460 __libc_start_main +
    245

    6    tmp43nedni3                        0x000056154362ce69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660028248
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    if n < 2 {\n        return 0\n    }\n    if n == 2 {\n       \
    \ return 2\n    }\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n\
    \    for _ in 3...n {\n        d = a + b + c\n        a = b\n        b = c\n \
    \       c = d\n    }\n    return d\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\n\
    assert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpqsi9x8g8/tmpqsi9x8g8.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5fd753dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5fd7234b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5fd7234988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5fd72337b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqsi9x8g8                        0x0000557ab17b7335 <unavailable> + 4917

    5    libc.so.6                          0x00002b5fd7729460 __libc_start_main +
    245

    6    tmpqsi9x8g8                        0x0000557ab17b6fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660028247
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    var\
    \ n = n\n    while n > 0 {\n        a = b\n        b = c\n        c = d\n    \
    \    d = a + b + c\n        n -= 1\n    }\n    return d\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpcrtgs8d0/tmpcrtgs8d0.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7b08932c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7b08629b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7b08629988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7b086287b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcrtgs8d0                        0x0000559e67ee81b5 <unavailable> + 4533

    5    libc.so.6                          0x00002b7b08b1e460 __libc_start_main +
    245

    6    tmpcrtgs8d0                        0x0000559e67ee7e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660028248
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    var memo = [0, 0, 2, 0]\n    if n <= 3 {\n        return memo[n]\n\
    \    }\n    var nMinus1 = 3\n    var nMinus2 = 2\n    var nMinus3 = 0\n    var\
    \ nMinus4 = 0\n    for i in 4...n {\n        nMinus4 = nMinus3\n        nMinus3\
    \ = nMinus2\n        nMinus2 = nMinus1\n        nMinus1 = memo[i-1]\n        memo.append(nMinus1\
    \ + nMinus2 + nMinus3 + nMinus4)\n    }\n    return memo[n]\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpk05nc5qf/tmpk05nc5qf.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4294dfac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4294af1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4294af1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4294af07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk05nc5qf                        0x0000561e899f94f5 <unavailable> + 5365

    5    libc.so.6                          0x00002b4294fe6460 __libc_start_main +
    245

    6    tmpk05nc5qf                        0x0000561e899f91a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660028248
- exit_code: 0
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    var result = 0\n    if n <= 2 {\n        result = 2\n    } else\
    \ if n <= 3 {\n        result = 0\n    } else {\n        var number0 = 0\n   \
    \     var number1 = 0\n        var number2 = 2\n        var number3 = 0\n    \
    \    for _ in 4...n {\n            result = number0 + number1 + number2 + number3\n\
    \            number0 = number1\n            number1 = number2\n            number2\
    \ = number3\n            number3 = result\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028248
