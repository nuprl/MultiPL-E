language: swift
name: HumanEval_114_minSubArraySum
results:
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var minSum = nums[0]\n    var sum = 0\n    for num in nums\
    \ {\n        sum += num\n        if sum < minSum {\n            minSum = sum\n\
    \        }\n        if sum > 0 {\n            sum = 0\n        }\n    }\n    return\
    \ minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014078
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    guard nums.count > 0 else { return 0 }\n    var minSum\
    \ = Int.max\n    var currentSum = 0\n    for i in 0..<nums.count {\n        currentSum\
    \ += nums[i]\n        minSum = min(minSum, currentSum)\n        if currentSum\
    \ > 0 {\n            currentSum = 0\n        }\n    }\n    return minSum\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\n\
    assert(minSubArraySum(nums: [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums: [-9999999999999999])\
    \ == -9999999999999999)\nassert(minSubArraySum(nums: [0, 10, 20, 1000000]) ==\
    \ 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums: [10, 11, 13,\
    \ 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1, 0, -2]) == -33)\n\
    assert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums: [7]) ==\
    \ 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014078
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var sum = 0\n    var minSum = Int.max\n    for num in nums\
    \ {\n        sum += num\n        minSum = min(minSum, sum)\n        if sum > 0\
    \ {\n            sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014078
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    guard nums.count > 0 else { return 0 }\n    var currentMin\
    \ = nums[0]\n    var sum = 0\n    var temp = 0\n    for num in nums {\n      \
    \  sum += num\n        temp = min(sum, temp + num)\n        currentMin = min(currentMin,\
    \ temp)\n    }\n    return currentMin\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmp0kkhzhbx/tmp0kkhzhbx.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ada764dac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ada761d1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ada761d1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ada761d07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0kkhzhbx                        0x00005571b85235ca <unavailable> + 5578

    5    libc.so.6                          0x00002ada766c6460 __libc_start_main +
    245

    6    tmp0kkhzhbx                        0x00005571b8523219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1660014078
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var sum = 0\n    var min = Int.max\n    for num in nums\
    \ {\n        sum += num\n        if sum < min {\n            min = sum\n     \
    \   }\n        if sum > 0 {\n            sum = 0\n        }\n    }\n    return\
    \ min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums: [2,\
    \ 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums: [-9999999999999999])\
    \ == -9999999999999999)\nassert(minSubArraySum(nums: [0, 10, 20, 1000000]) ==\
    \ 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums: [10, 11, 13,\
    \ 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1, 0, -2]) == -33)\n\
    assert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums: [7]) ==\
    \ 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014078
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var minSum = Int.max\n    var currentSum = 0\n    for num\
    \ in nums {\n        currentSum += num\n        minSum = min(minSum, currentSum)\n\
    \        currentSum = min(currentSum, 0)\n    }\n    return minSum\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\n\
    assert(minSubArraySum(nums: [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums: [-9999999999999999])\
    \ == -9999999999999999)\nassert(minSubArraySum(nums: [0, 10, 20, 1000000]) ==\
    \ 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums: [10, 11, 13,\
    \ 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1, 0, -2]) == -33)\n\
    assert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums: [7]) ==\
    \ 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014078
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var result = Int.max\n    var total = 0\n    var left =\
    \ 0\n    for (right, num) in nums.enumerated() {\n        total += num\n     \
    \   while total >= 0 {\n            result = min(result, total)\n            total\
    \ -= nums[left]\n            left += 1\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\n\
    assert(minSubArraySum(nums: [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums: [-9999999999999999])\
    \ == -9999999999999999)\nassert(minSubArraySum(nums: [0, 10, 20, 1000000]) ==\
    \ 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums: [10, 11, 13,\
    \ 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1, 0, -2]) == -33)\n\
    assert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums: [7]) ==\
    \ 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b10323d9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b10320d0561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b10320d0286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b10320d013c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b10320cfbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b1031ecfe83 <unavailable> + 188035

    6    tmpdkm_tb6b                        0x0000556a4c3641dc <unavailable> + 8668

    7    tmpdkm_tb6b                        0x0000556a4c36359c <unavailable> + 5532

    8    libc.so.6                          0x00002b10325c5460 __libc_start_main +
    245

    9    tmpdkm_tb6b                        0x0000556a4c363269 <unavailable> + 4713

    '
  stdout: ''
  timestamp: 1660014078
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var min: Int = Int.max\n    var sum: Int = 0\n    for i\
    \ in 0..<nums.count {\n        sum += nums[i]\n        if sum < min {\n      \
    \      min = sum\n        }\n        if sum > 0 {\n            sum = 0\n     \
    \   }\n    }\n    return min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014078
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var sum = 0\n    var min = Int.max\n    for num in nums\
    \ {\n        sum += num\n        if sum < min {\n            min = sum\n     \
    \   }\n        if sum > 0 {\n            sum = 0\n        }\n    }\n    return\
    \ min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums: [2,\
    \ 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums: [-9999999999999999])\
    \ == -9999999999999999)\nassert(minSubArraySum(nums: [0, 10, 20, 1000000]) ==\
    \ 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums: [10, 11, 13,\
    \ 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1, 0, -2]) == -33)\n\
    assert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums: [7]) ==\
    \ 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014078
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var sum = 0\n    var minSum = Int.max\n    var i = 0\n\
    \    var j = 0\n    while j < nums.count {\n        sum += nums[j]\n        if\
    \ sum < minSum {\n            minSum = sum\n        }\n        if sum > 0 {\n\
    \            sum = 0\n            i = j + 1\n        }\n        j += 1\n    }\n\
    \    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014078
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var minSum = nums[0]\n    var sum = 0\n    for i in 0..<nums.count\
    \ {\n        sum += nums[i]\n        if sum < minSum {\n            minSum = sum\n\
    \        }\n        if sum > 0 {\n            sum = 0\n        }\n    }\n    return\
    \ minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014078
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    guard !nums.isEmpty else { return 0 }\n    var currSum\
    \ = 0\n    var minSum = nums[0]\n    for num in nums {\n        currSum += num\n\
    \        minSum = min(minSum, currSum)\n        currSum = min(currSum, 0)\n  \
    \  }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014078
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var sum = 0\n    var minSum = Int.max\n    var i = 0\n\
    \    while i < nums.count {\n        if sum < 0 {\n            sum = 0\n     \
    \   }\n        sum += nums[i]\n        minSum = min(minSum, sum)\n        i +=\
    \ 1\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmp7q9vglyr/tmp7q9vglyr.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6f24bc8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6f248bfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6f248bf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6f248be7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7q9vglyr                        0x000055a3250d745a <unavailable> + 5210

    5    libc.so.6                          0x00002b6f24db4460 __libc_start_main +
    245

    6    tmp7q9vglyr                        0x000055a3250d70a9 <unavailable> + 4265

    '
  stdout: ''
  timestamp: 1660014078
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var minSum = Int.max\n    var sum = 0\n    for i in 0..<nums.count\
    \ {\n        sum += nums[i]\n        minSum = min(minSum, sum)\n        if sum\
    \ > 0 {\n            sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\n\
    assert(minSubArraySum(nums: [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums: [-9999999999999999])\
    \ == -9999999999999999)\nassert(minSubArraySum(nums: [0, 10, 20, 1000000]) ==\
    \ 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums: [10, 11, 13,\
    \ 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1, 0, -2]) == -33)\n\
    assert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums: [7]) ==\
    \ 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013946
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    guard nums.count > 0 else { return 0 }\n    var minSum\
    \ = nums[0]\n    var currentSum = nums[0]\n    for num in nums[1...] {\n     \
    \   currentSum = min(currentSum + num, num)\n        minSum = min(minSum, currentSum)\n\
    \    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014078
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    guard nums.count > 0 else { return 0 }\n    var curr =\
    \ nums[0]\n    var minSum = nums[0]\n    for i in 1..<nums.count {\n        curr\
    \ = max(nums[i], curr + nums[i])\n        minSum = min(minSum, curr)\n    }\n\
    \    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpp6to_vg4/tmpp6to_vg4.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9182b0cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9182803b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9182803988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b91828027b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp6to_vg4                        0x000056370d51363a <unavailable> + 5690

    5    libc.so.6                          0x00002b9182cf8460 __libc_start_main +
    245

    6    tmpp6to_vg4                        0x000056370d513289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660014078
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n  guard nums.count > 0 else { return 0 }\n  guard nums.count\
    \ > 1 else { return nums[0] }\n  var minSum = nums[0]\n  var currSum = nums[0]\n\
    \  for i in 1..<nums.count {\n    currSum = min(nums[i], currSum + nums[i])\n\
    \    minSum = min(minSum, currSum)\n  }\n  return minSum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014078
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    guard !nums.isEmpty else { return 0 }\n    var minSum =\
    \ nums[0]\n    var currentSum = 0\n    for i in 0..<nums.count {\n        currentSum\
    \ += nums[i]\n        if currentSum < minSum {\n            minSum = currentSum\n\
    \        }\n        if currentSum > 0 {\n            currentSum = 0\n        }\n\
    \    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014078
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var minSum = Int.max\n    var currentSum = 0\n    for num\
    \ in nums {\n        currentSum += num\n        minSum = min(minSum, currentSum)\n\
    \        currentSum = max(currentSum, 0)\n    }\n    return minSum\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\n\
    assert(minSubArraySum(nums: [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums: [-9999999999999999])\
    \ == -9999999999999999)\nassert(minSubArraySum(nums: [0, 10, 20, 1000000]) ==\
    \ 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums: [10, 11, 13,\
    \ 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1, 0, -2]) == -33)\n\
    assert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums: [7]) ==\
    \ 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpd_fcyijs/tmpd_fcyijs.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b59a0bbec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b59a08b5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b59a08b5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b59a08b47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd_fcyijs                        0x000056454fb3057a <unavailable> + 5498

    5    libc.so.6                          0x00002b59a0daa460 __libc_start_main +
    245

    6    tmpd_fcyijs                        0x000056454fb301c9 <unavailable> + 4553

    '
  stdout: ''
  timestamp: 1660013945
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    guard !nums.isEmpty else { return 0 }\n    var sum = nums[0]\n\
    \    var minSum = sum\n    for i in 1..<nums.count {\n        sum = min(nums[i],\
    \ sum + nums[i])\n        minSum = min(minSum, sum)\n    }\n    return minSum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\n\
    assert(minSubArraySum(nums: [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums: [-9999999999999999])\
    \ == -9999999999999999)\nassert(minSubArraySum(nums: [0, 10, 20, 1000000]) ==\
    \ 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums: [10, 11, 13,\
    \ 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1, 0, -2]) == -33)\n\
    assert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums: [7]) ==\
    \ 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014078
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var minSum = Int.max\n    var currSum = 0\n    for num\
    \ in nums {\n        currSum += num\n        minSum = min(minSum, currSum)\n \
    \       currSum = max(currSum, 0)\n    }\n    return minSum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpsfgf07oi/tmpsfgf07oi.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b58d97f8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b58d94efb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b58d94ef988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b58d94ee7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsfgf07oi                        0x0000558b629c357a <unavailable> + 5498

    5    libc.so.6                          0x00002b58d99e4460 __libc_start_main +
    245

    6    tmpsfgf07oi                        0x0000558b629c31c9 <unavailable> + 4553

    '
  stdout: ''
  timestamp: 1660013945
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var min_sum = Int.max\n    var sum = 0\n    for (i, v)\
    \ in nums.enumerated() {\n        sum += v\n        if i != 0 {\n            min_sum\
    \ = min(min_sum, sum)\n        }\n    }\n    return min_sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmp3mafxlic/tmp3mafxlic.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab357b36c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab35782db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab35782d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab35782c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3mafxlic                        0x000055b77dbff5ca <unavailable> + 5578

    5    libc.so.6                          0x00002ab357d22460 __libc_start_main +
    245

    6    tmp3mafxlic                        0x000055b77dbff219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1660014078
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums\
    \ {\n        sum += num\n        minSum = min(minSum, sum)\n        if sum > 0\
    \ {\n            sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013945
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var minSum = Int.max\n    var currSum = 0\n    var startIndex\
    \ = 0\n    for (index, num) in nums.enumerated() {\n        currSum += num\n \
    \       while startIndex <= index && currSum > 0 {\n            currSum -= nums[startIndex]\n\
    \            startIndex += 1\n        }\n        minSum = min(minSum, currSum)\n\
    \    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpq10dtj89/tmpq10dtj89.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7d16e27c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7d16b1eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7d16b1e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7d16b1d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpq10dtj89                        0x00005571efc3661a <unavailable> + 5658

    5    libc.so.6                          0x00002b7d17013460 __libc_start_main +
    245

    6    tmpq10dtj89                        0x00005571efc36269 <unavailable> + 4713

    '
  stdout: ''
  timestamp: 1660014078
- exit_code: 1
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    guard nums.count > 0 else { return 0 }\n    guard nums.count\
    \ > 1 else { return nums[0] }\n    var minimum = Int.max\n    var current = 0\n\
    \    var maxNegative = nums[0]\n    for num in nums {\n        current += num\n\
    \        maximum = max(maximum, current)\n        if current < 0 {\n         \
    \   current = 0\n        }\n        maxNegative = max(maxNegative, num)\n    }\n\
    \    return maximum == 0 ? maxNegative : maximum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmp5hx_fdzr.swift:17:9: error: cannot find 'maximum' in scope\n  \
    \      maximum = max(maximum, current)\n        ^~~~~~~\n/tmp/tmp5hx_fdzr.swift:17:23:\
    \ error: cannot find 'maximum' in scope\n        maximum = max(maximum, current)\n\
    \                      ^~~~~~~\n/tmp/tmp5hx_fdzr.swift:23:12: error: cannot find\
    \ 'maximum' in scope\n    return maximum == 0 ? maxNegative : maximum\n      \
    \     ^~~~~~~\n/tmp/tmp5hx_fdzr.swift:23:41: error: cannot find 'maximum' in scope\n\
    \    return maximum == 0 ? maxNegative : maximum\n                           \
    \             ^~~~~~~\n"
  stdout: ''
  timestamp: 1660014078
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    // Implement your solution here\n    var minSum = Int.max\n\
    \    var currSum = 0\n    for num in nums {\n        currSum += num\n        minSum\
    \ = min(minSum, currSum)\n        currSum = max(currSum, 0)\n    }\n    return\
    \ minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmptno6q2i4/tmptno6q2i4.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4fd793cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4fd7633b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4fd7633988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4fd76327b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptno6q2i4                        0x0000558550a0c57a <unavailable> + 5498

    5    libc.so.6                          0x00002b4fd7b28460 __libc_start_main +
    245

    6    tmptno6q2i4                        0x0000558550a0c1c9 <unavailable> + 4553

    '
  stdout: ''
  timestamp: 1660014078
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    guard nums.count > 0 else { return 0 }\n    var currentSum\
    \ = 0\n    var minimumSum = Int.max\n    for num in nums {\n        currentSum\
    \ += num\n        minimumSum = min(minimumSum, currentSum)\n        currentSum\
    \ = max(currentSum, 0)\n    }\n    return minimumSum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmps2qgv97f/tmps2qgv97f.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2c7d102c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2c7cdf9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2c7cdf9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2c7cdf87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps2qgv97f                        0x000055ef36e085ca <unavailable> + 5578

    5    libc.so.6                          0x00002b2c7d2ee460 __libc_start_main +
    245

    6    tmps2qgv97f                        0x000055ef36e08219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1660014078
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var minSum = Int.max\n    var currentSum = 0\n    for num\
    \ in nums {\n        currentSum += num\n        minSum = min(minSum, currentSum)\n\
    \        currentSum = max(currentSum, 0)\n    }\n    return minSum\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\n\
    assert(minSubArraySum(nums: [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums: [-9999999999999999])\
    \ == -9999999999999999)\nassert(minSubArraySum(nums: [0, 10, 20, 1000000]) ==\
    \ 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums: [10, 11, 13,\
    \ 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1, 0, -2]) == -33)\n\
    assert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums: [7]) ==\
    \ 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpd_fcyijs/tmpd_fcyijs.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b59a0bbec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b59a08b5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b59a08b5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b59a08b47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd_fcyijs                        0x000056454fb3057a <unavailable> + 5498

    5    libc.so.6                          0x00002b59a0daa460 __libc_start_main +
    245

    6    tmpd_fcyijs                        0x000056454fb301c9 <unavailable> + 4553

    '
  stdout: ''
  timestamp: 1660013945
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    guard !nums.isEmpty else { return 0 }\n    var currentMinSum\
    \ = Int.max\n    var currentSum = 0\n    for num in nums {\n        currentSum\
    \ += num\n        currentMinSum = min(currentMinSum, currentSum)\n        currentSum\
    \ = max(currentSum, 0)\n    }\n    return currentMinSum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpj7oecy8v/tmpj7oecy8v.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b27fb8b2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b27fb5a9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b27fb5a9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b27fb5a87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj7oecy8v                        0x00005558b9d005ca <unavailable> + 5578

    5    libc.so.6                          0x00002b27fba9e460 __libc_start_main +
    245

    6    tmpj7oecy8v                        0x00005558b9d00219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1660014078
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var min = Int.max\n    var sum = 0\n    for i in 0..<nums.count\
    \ {\n        sum += nums[i]\n        if sum < min {\n            min = sum\n \
    \       }\n        if sum > 0 {\n            sum = 0\n        }\n    }\n    return\
    \ min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums: [2,\
    \ 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums: [-9999999999999999])\
    \ == -9999999999999999)\nassert(minSubArraySum(nums: [0, 10, 20, 1000000]) ==\
    \ 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums: [10, 11, 13,\
    \ 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1, 0, -2]) == -33)\n\
    assert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums: [7]) ==\
    \ 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014078
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var minSum = Int.max\n    var sum = 0\n    for i in 0..<nums.count\
    \ {\n        sum += nums[i]\n        minSum = min(minSum, sum)\n        if sum\
    \ > 0 {\n            sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\n\
    assert(minSubArraySum(nums: [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums: [-9999999999999999])\
    \ == -9999999999999999)\nassert(minSubArraySum(nums: [0, 10, 20, 1000000]) ==\
    \ 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums: [10, 11, 13,\
    \ 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1, 0, -2]) == -33)\n\
    assert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums: [7]) ==\
    \ 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013946
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var minSubArraySum = Int.max\n    var currentMin = 0\n\
    \    for num in nums {\n        currentMin = min(currentMin + num, num)\n    \
    \    minSubArraySum = min(minSubArraySum, currentMin)\n    }\n    return minSubArraySum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\n\
    assert(minSubArraySum(nums: [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums: [-9999999999999999])\
    \ == -9999999999999999)\nassert(minSubArraySum(nums: [0, 10, 20, 1000000]) ==\
    \ 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums: [10, 11, 13,\
    \ 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1, 0, -2]) == -33)\n\
    assert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums: [7]) ==\
    \ 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014078
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var currentSum = 0\n    var minSum = Int.max\n    for num\
    \ in nums {\n        currentSum += num\n        minSum = min(minSum, currentSum)\n\
    \        if currentSum > 0 {\n            currentSum = 0\n        }\n    }\n \
    \   return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014078
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    // edge case\n    guard nums.count > 0 else { return 0\
    \ }\n    \n    // initialize the minimal sum to be the first element\n    var\
    \ minSum = nums[0]\n    // initialize the sum of subarray from the beginning to\
    \ be the first element\n    var currentSum = nums[0]\n    \n    // for loop to\
    \ go through each element in the array\n    for i in 1..<nums.count {\n      \
    \  // for each element, compare the current sum with the min sum, and assign minSum\
    \ to be the smaller value\n        minSum = min(minSum, currentSum)\n        //\
    \ after comparing the current sum with the min sum, if the current sum is negative,\n\
    \        // just replace it by the current element, otherwise, add the current\
    \ element to the sum\n        currentSum = max(currentSum + nums[i], nums[i])\n\
    \    }\n    \n    // after the for loop, compare the last current sum with the\
    \ min sum\n    // and return the smaller one\n    return min(minSum, currentSum)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\n\
    assert(minSubArraySum(nums: [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums: [-9999999999999999])\
    \ == -9999999999999999)\nassert(minSubArraySum(nums: [0, 10, 20, 1000000]) ==\
    \ 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums: [10, 11, 13,\
    \ 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1, 0, -2]) == -33)\n\
    assert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums: [7]) ==\
    \ 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpgaxoxt31/tmpgaxoxt31.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4f45600c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4f452f7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4f452f7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4f452f67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgaxoxt31                        0x000055953469763a <unavailable> + 5690

    5    libc.so.6                          0x00002b4f457ec460 __libc_start_main +
    245

    6    tmpgaxoxt31                        0x0000559534697289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660014078
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var start = 0\n    var end = 0\n    var minSum = Int.max\n\
    \    var currSum = 0\n    \n    while end < nums.count {\n        currSum += nums[end]\n\
    \        while currSum > 0 {\n            minSum = min(minSum, currSum)\n    \
    \        currSum -= nums[start]\n            start += 1\n        }\n        end\
    \ += 1\n    }\n    \n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpjkqt1nl1/tmpjkqt1nl1.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae931325c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae93101cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae93101c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae93101b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjkqt1nl1                        0x0000559b95af151f <unavailable> + 5407

    5    libc.so.6                          0x00002ae931511460 __libc_start_main +
    245

    6    tmpjkqt1nl1                        0x0000559b95af10a9 <unavailable> + 4265

    '
  stdout: ''
  timestamp: 1660014078
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    guard nums.count > 0 else { return 0 }\n    let firstSum\
    \ = nums.first!\n    guard nums.count > 1 else { return firstSum }\n    var curSum\
    \ = firstSum\n    var minSum = curSum\n    for index in 1..<nums.count {\n   \
    \     curSum = min(nums[index], curSum + nums[index])\n        minSum = min(minSum,\
    \ curSum)\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014078
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    guard nums.count > 0 else { return 0 }\n    var minSum\
    \ = Int.max\n    var sum = 0\n    for i in 0..<nums.count {\n        sum += nums[i]\n\
    \        minSum = min(minSum, sum)\n        if sum > 0 {\n            sum = 0\n\
    \        }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014078
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    // TODO: implement\n    return 0\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpexwnr_6m/tmpexwnr_6m.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b11606dac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b11603d1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b11603d1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b11603d07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpexwnr_6m                        0x000055b4077f431a <unavailable> + 4890

    5    libc.so.6                          0x00002b11608c6460 __libc_start_main +
    245

    6    tmpexwnr_6m                        0x000055b4077f3f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660014078
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    guard nums.count > 0 else { return 0 }\n    var globalMin\
    \ = Int.max\n    var localMin = 0\n    for i in 0..<nums.count {\n        localMin\
    \ = min(nums[i], localMin + nums[i])\n        globalMin = min(globalMin, localMin)\n\
    \    }\n    return globalMin\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014078
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var currentMinimum = Int.max\n    var currentSum = 0\n\
    \    for number in nums {\n        currentSum += number\n        if currentSum\
    \ < currentMinimum {\n            currentMinimum = currentSum\n        }\n   \
    \     if currentSum > 0 {\n            currentSum = 0\n        }\n    }\n    return\
    \ currentMinimum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014078
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var currSum = 0\n    var minSum = Int.max\n    for num\
    \ in nums {\n        currSum += num\n        minSum = min(minSum, currSum)\n \
    \       currSum = max(currSum, 0)\n    }\n    return minSum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmps50bmzuq/tmps50bmzuq.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9259702c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b92593f9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b92593f9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b92593f87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps50bmzuq                        0x00005617b3f0257a <unavailable> + 5498

    5    libc.so.6                          0x00002b92598ee460 __libc_start_main +
    245

    6    tmps50bmzuq                        0x00005617b3f021c9 <unavailable> + 4553

    '
  stdout: ''
  timestamp: 1660014079
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var minSum = Int.max\n    var currentSum = 0\n    for num\
    \ in nums {\n        currentSum += num\n        minSum = min(minSum, currentSum)\n\
    \        currentSum = max(currentSum, 0)\n    }\n    return minSum\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\n\
    assert(minSubArraySum(nums: [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums: [-9999999999999999])\
    \ == -9999999999999999)\nassert(minSubArraySum(nums: [0, 10, 20, 1000000]) ==\
    \ 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums: [10, 11, 13,\
    \ 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1, 0, -2]) == -33)\n\
    assert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums: [7]) ==\
    \ 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpd_fcyijs/tmpd_fcyijs.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b59a0bbec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b59a08b5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b59a08b5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b59a08b47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd_fcyijs                        0x000056454fb3057a <unavailable> + 5498

    5    libc.so.6                          0x00002b59a0daa460 __libc_start_main +
    245

    6    tmpd_fcyijs                        0x000056454fb301c9 <unavailable> + 4553

    '
  stdout: ''
  timestamp: 1660013945
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var minSum = nums[0]\n    var currentSum = nums[0]\n  \
    \  for index in 1..<nums.count {\n        currentSum = min(nums[index], currentSum\
    \ + nums[index])\n        minSum = min(minSum, currentSum)\n    }\n    return\
    \ minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014078
- exit_code: 1
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var min = nums[0]\n    var current = nums[0]\n    for i\
    \ in 1..<nums.count {\n        current = min(current + nums[i], nums[i])\n   \
    \     min = min(min, current)\n    }\n    return min\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpx77wwrle.swift:13:19: error: cannot call value of non-function\
    \ type 'Int'\n        current = min(current + nums[i], nums[i])\n            \
    \      ^\n/tmp/tmpx77wwrle.swift:14:15: error: cannot call value of non-function\
    \ type 'Int'\n        min = min(min, current)\n              ^\n"
  stdout: ''
  timestamp: 1660014078
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var minSum = nums[0]\n    var currentSum = nums[0]\n  \
    \  for i in 1..<nums.count {\n        currentSum = min(nums[i], currentSum + nums[i])\n\
    \        minSum = min(minSum, currentSum)\n    }\n    return minSum\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\n\
    assert(minSubArraySum(nums: [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums: [-9999999999999999])\
    \ == -9999999999999999)\nassert(minSubArraySum(nums: [0, 10, 20, 1000000]) ==\
    \ 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums: [10, 11, 13,\
    \ 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1, 0, -2]) == -33)\n\
    assert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums: [7]) ==\
    \ 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013945
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n  var minimumSum = Int.max\n  var sum = 0\n  for num in nums\
    \ {\n    sum += num\n    minimumSum = min(minimumSum, sum)\n    if sum > 0 {\n\
    \      sum = 0\n    }\n  }\n  return minimumSum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014079
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var minSum = nums[0]\n    var currentSum = 0\n    for i\
    \ in 0..<nums.count {\n        currentSum += nums[i]\n        if currentSum <\
    \ minSum {\n            minSum = currentSum\n        }\n        if currentSum\
    \ > 0 {\n            currentSum = 0\n        }\n    }\n    return minSum\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\n\
    assert(minSubArraySum(nums: [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums: [-9999999999999999])\
    \ == -9999999999999999)\nassert(minSubArraySum(nums: [0, 10, 20, 1000000]) ==\
    \ 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums: [10, 11, 13,\
    \ 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1, 0, -2]) == -33)\n\
    assert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums: [7]) ==\
    \ 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014078
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var (ans, currentSum) = (Int.max, 0)\n    for num in nums\
    \ {\n        currentSum += num\n        ans = min(ans, currentSum)\n        currentSum\
    \ = max(currentSum, 0)\n    }\n    return ans\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmphq0599ee/tmphq0599ee.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b39074d3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b39071cab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b39071ca988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b39071c97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphq0599ee                        0x0000556e7797457a <unavailable> + 5498

    5    libc.so.6                          0x00002b39076bf460 __libc_start_main +
    245

    6    tmphq0599ee                        0x0000556e779741c9 <unavailable> + 4553

    '
  stdout: ''
  timestamp: 1660014079
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n  var minSum = Int.max\n  var sum = 0\n  for num in nums {\n\
    \    sum += num\n    minSum = min(minSum, sum)\n    if sum > 0 {\n      sum =\
    \ 0\n    }\n  }\n  return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014079
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var sum = 0\n    var minSum = Int.max\n    for num in nums\
    \ {\n        sum += num\n        minSum = min(minSum, sum)\n        if sum > 0\
    \ {\n            sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014078
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var minSum = Int.max\n    var sum = 0\n    var min = Int.max\n\
    \    for num in nums {\n        sum += num\n        min = min < num ? min : num\n\
    \        if sum < minSum {\n            minSum = sum\n        }\n        if sum\
    \ > 0 {\n            sum = 0\n        }\n    }\n    return minSum == Int.max ?\
    \ min : minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014079
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var minSum = Int.max\n    var currSum = 0\n    for i in\
    \ 0..<nums.count {\n        currSum += nums[i]\n        if currSum < minSum {\n\
    \            minSum = currSum\n        }\n        if currSum > 0 {\n         \
    \   currSum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014079
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var total = 0\n    var minTotal = Int.max\n    for num\
    \ in nums {\n        total += num\n        minTotal = min(total, minTotal)\n \
    \       if total > 0 {\n            total = 0\n        }\n    }\n    return minTotal\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\n\
    assert(minSubArraySum(nums: [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums: [-9999999999999999])\
    \ == -9999999999999999)\nassert(minSubArraySum(nums: [0, 10, 20, 1000000]) ==\
    \ 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums: [10, 11, 13,\
    \ 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1, 0, -2]) == -33)\n\
    assert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums: [7]) ==\
    \ 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014079
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var min = Int.max\n    var sum = 0\n    var left = 0\n\
    \    for (right, num) in nums.enumerated() {\n        sum += num\n        if sum\
    \ < min {\n            min = sum\n        }\n        if sum > 0 {\n          \
    \  sum = 0\n            left = right + 1\n        }\n    }\n    return min\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\n\
    assert(minSubArraySum(nums: [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums: [-9999999999999999])\
    \ == -9999999999999999)\nassert(minSubArraySum(nums: [0, 10, 20, 1000000]) ==\
    \ 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums: [10, 11, 13,\
    \ 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1, 0, -2]) == -33)\n\
    assert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums: [7]) ==\
    \ 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014079
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var minSum = Int.max\n    var currentSum = 0\n    for num\
    \ in nums {\n        currentSum += num\n        minSum = min(minSum, currentSum)\n\
    \        currentSum = min(currentSum, 0)\n    }\n    return minSum\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\n\
    assert(minSubArraySum(nums: [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums: [-9999999999999999])\
    \ == -9999999999999999)\nassert(minSubArraySum(nums: [0, 10, 20, 1000000]) ==\
    \ 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums: [10, 11, 13,\
    \ 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1, 0, -2]) == -33)\n\
    assert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums: [7]) ==\
    \ 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014078
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    // Guard: Check for empty array\n    guard !nums.isEmpty\
    \ else { return 0 }\n    \n    // 1. Initialize variables\n    var subarraySum\
    \ = 0\n    var minSum = Int.max\n    \n    // 2. Iterate through the array to\
    \ find minSum\n    for i in 0..<nums.count {\n        // 2.a. add current element\
    \ to subarraySum\n        subarraySum += nums[i]\n        \n        // 2.b. If\
    \ subarraySum is smaller than minSum\n        //      Update minSum to subarraySum\n\
    \        if subarraySum < minSum {\n            minSum = subarraySum\n       \
    \ }\n        \n        // 2.c. If subarraySum is greater than 0\n        //  \
    \    Reset subarraySum to 0\n        if subarraySum > 0 {\n            subarraySum\
    \ = 0\n        }\n    }\n    \n    // 3. Return minimum sum of the subarray\n\
    \    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014079
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    // brute force: is O(n^2) time complexity, O(1) space\n\
    \    // var minSum = Int.max\n    // for i in 0..<nums.count {\n    //     var\
    \ currentSum = 0\n    //     for j in i..<nums.count {\n    //         currentSum\
    \ += nums[j]\n    //         if currentSum < minSum {\n    //             minSum\
    \ = currentSum\n    //         }\n    //     }\n    // }\n    // return minSum\n\
    \    \n    // kadane's algo: is O(n) time complexity, O(1) space\n    var minSum\
    \ = Int.max\n    var currentSum = 0\n    for i in 0..<nums.count {\n        currentSum\
    \ += nums[i]\n        if currentSum < minSum {\n            minSum = currentSum\n\
    \        }\n        if currentSum > 0 {\n            currentSum = 0\n        }\n\
    \    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014079
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n  var minSum = Int.max\n  var currentSum = 0\n  for num in\
    \ nums {\n    currentSum += num\n    minSum = min(minSum, currentSum)\n    currentSum\
    \ = max(currentSum, 0)\n  }\n  return minSum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpm5r7hdlr/tmpm5r7hdlr.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b06b0120c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b06afe17b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b06afe17988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b06afe167b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpm5r7hdlr                        0x000056496034757a <unavailable> + 5498

    5    libc.so.6                          0x00002b06b030c460 __libc_start_main +
    245

    6    tmpm5r7hdlr                        0x00005649603471c9 <unavailable> + 4553

    '
  stdout: ''
  timestamp: 1660014079
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    guard !nums.isEmpty else { return 0 }\n    var minSum =\
    \ Int.max\n    var currentSum = 0\n    for num in nums {\n        currentSum +=\
    \ num\n        minSum = min(minSum, currentSum)\n        currentSum = currentSum\
    \ < 0 ? 0 : currentSum\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmp629d3i3b/tmp629d3i3b.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b18ff58ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b18ff281b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b18ff281988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b18ff2807b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp629d3i3b                        0x00005626e45ef57a <unavailable> + 5498

    5    libc.so.6                          0x00002b18ff776460 __libc_start_main +
    245

    6    tmp629d3i3b                        0x00005626e45ef1c9 <unavailable> + 4553

    '
  stdout: ''
  timestamp: 1660014079
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var min = Int.max\n    var sum = 0\n    for num in nums\
    \ {\n        sum += num\n        if sum < min {\n            min = sum\n     \
    \   }\n        if sum > 0 {\n            sum = 0\n        }\n    }\n    return\
    \ min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums: [2,\
    \ 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums: [-9999999999999999])\
    \ == -9999999999999999)\nassert(minSubArraySum(nums: [0, 10, 20, 1000000]) ==\
    \ 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums: [10, 11, 13,\
    \ 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1, 0, -2]) == -33)\n\
    assert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums: [7]) ==\
    \ 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014079
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    guard nums.count > 0 else { return 0 }\n    var minSum\
    \ = nums[0]\n    var localSum = nums[0]\n    for i in 1..<nums.count {\n     \
    \   localSum = max(nums[i], localSum + nums[i])\n        minSum = min(minSum,\
    \ localSum)\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmp58lqenhy/tmp58lqenhy.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8a20456c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8a2014db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8a2014d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8a2014c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp58lqenhy                        0x000055d6dc84e63a <unavailable> + 5690

    5    libc.so.6                          0x00002b8a20642460 __libc_start_main +
    245

    6    tmp58lqenhy                        0x000055d6dc84e289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660014079
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    guard !nums.isEmpty else { return 0 }\n    var globalMinSum\
    \ = Int.max\n    var localMinSum = 0\n    for num in nums {\n        localMinSum\
    \ = min(localMinSum + num, num)\n        globalMinSum = min(globalMinSum, localMinSum)\n\
    \    }\n    return globalMinSum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014079
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    let sorted = nums.sorted()\n    var min = sorted[0]\n \
    \   var sum = 0\n    for num in sorted {\n        sum += num\n        if sum <\
    \ min {\n            min = sum\n        }\n    }\n    return min\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\n\
    assert(minSubArraySum(nums: [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums: [-9999999999999999])\
    \ == -9999999999999999)\nassert(minSubArraySum(nums: [0, 10, 20, 1000000]) ==\
    \ 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums: [10, 11, 13,\
    \ 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1, 0, -2]) == -33)\n\
    assert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums: [7]) ==\
    \ 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpajgjc8l8/tmpajgjc8l8.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b419e52dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b419e224b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b419e224988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b419e2237b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpajgjc8l8                        0x0000562670b06724 <unavailable> + 5924

    5    libc.so.6                          0x00002b419e719460 __libc_start_main +
    245

    6    tmpajgjc8l8                        0x0000562670b061d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1660014079
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var min = nums[0]\n    var sum = nums[0]\n    for i in\
    \ 1..<nums.count {\n        if sum > 0 {\n            sum = nums[i]\n        }\
    \ else {\n            sum += nums[i]\n        }\n        min = min < sum ? min\
    \ : sum\n    }\n    return min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014079
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var min = Int.max\n    var current = 0\n    for num in\
    \ nums {\n        current += num\n        if current < min {\n            min\
    \ = current\n        }\n        if current > 0 {\n            current = 0\n  \
    \      }\n    }\n    return min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014079
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var minSum = Int.max\n    var currentSum = 0\n    for num\
    \ in nums {\n        currentSum += num\n        minSum = min(minSum, currentSum)\n\
    \        currentSum = min(currentSum, 0)\n    }\n    return minSum\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\n\
    assert(minSubArraySum(nums: [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums: [-9999999999999999])\
    \ == -9999999999999999)\nassert(minSubArraySum(nums: [0, 10, 20, 1000000]) ==\
    \ 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums: [10, 11, 13,\
    \ 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1, 0, -2]) == -33)\n\
    assert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums: [7]) ==\
    \ 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014078
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums\
    \ {\n        sum += num\n        minSum = min(minSum, sum)\n        if sum > 0\
    \ {\n            sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013945
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums\
    \ {\n        sum += num\n        minSum = min(minSum, sum)\n        if sum > 0\
    \ {\n            sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013945
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var localMax = nums[0]\n    var result = nums[0]\n    for\
    \ i in 1..<nums.count {\n        localMax = max(nums[i], localMax + nums[i])\n\
    \        result = min(result, localMax)\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\n\
    assert(minSubArraySum(nums: [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums: [-9999999999999999])\
    \ == -9999999999999999)\nassert(minSubArraySum(nums: [0, 10, 20, 1000000]) ==\
    \ 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums: [10, 11, 13,\
    \ 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1, 0, -2]) == -33)\n\
    assert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums: [7]) ==\
    \ 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmp2oofw2to/tmp2oofw2to.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab7889a5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab78869cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab78869c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab78869b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2oofw2to                        0x000055c756dcb63a <unavailable> + 5690

    5    libc.so.6                          0x00002ab788b91460 __libc_start_main +
    245

    6    tmp2oofw2to                        0x000055c756dcb289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660014079
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    if nums.count == 0 { return 0 }\n    var minSum = Int.max\n\
    \    var currSum = 0\n    for i in 0..<nums.count {\n        currSum += nums[i]\n\
    \        minSum = min(minSum, currSum)\n        if currSum > 0 {\n           \
    \ currSum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014079
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    guard nums.count > 0 else { return 0 }\n    guard nums.count\
    \ > 1 else { return nums[0] }\n    var minSum = nums[0]\n    var currentSum =\
    \ nums[0]\n    for num in nums[1...] {\n        currentSum = min(currentSum +\
    \ num, num)\n        minSum = min(minSum, currentSum)\n    }\n    return minSum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\n\
    assert(minSubArraySum(nums: [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums: [-9999999999999999])\
    \ == -9999999999999999)\nassert(minSubArraySum(nums: [0, 10, 20, 1000000]) ==\
    \ 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums: [10, 11, 13,\
    \ 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1, 0, -2]) == -33)\n\
    assert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums: [7]) ==\
    \ 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014079
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var minimumSum = Int.max\n    var currentSum = 0\n    for\
    \ num in nums {\n        currentSum += num\n        minimumSum = min(minimumSum,\
    \ currentSum)\n        currentSum = max(currentSum, 0)\n    }\n    return minimumSum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\n\
    assert(minSubArraySum(nums: [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums: [-9999999999999999])\
    \ == -9999999999999999)\nassert(minSubArraySum(nums: [0, 10, 20, 1000000]) ==\
    \ 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums: [10, 11, 13,\
    \ 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1, 0, -2]) == -33)\n\
    assert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums: [7]) ==\
    \ 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmp0c3w_9uy/tmp0c3w_9uy.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b31548edc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b31545e4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b31545e4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b31545e37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0c3w_9uy                        0x00005594dfd4b57a <unavailable> + 5498

    5    libc.so.6                          0x00002b3154ad9460 __libc_start_main +
    245

    6    tmp0c3w_9uy                        0x00005594dfd4b1c9 <unavailable> + 4553

    '
  stdout: ''
  timestamp: 1660014079
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    // NOTE: the `nums` is the given array with at least one\
    \ positive integer.\n    var minSum = nums[0]\n    var sum = 0\n    for num in\
    \ nums {\n        if sum < 0 {\n            sum = 0\n        }\n        sum +=\
    \ num\n        minSum = min(minSum, sum)\n    }\n    return minSum\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\n\
    assert(minSubArraySum(nums: [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums: [-9999999999999999])\
    \ == -9999999999999999)\nassert(minSubArraySum(nums: [0, 10, 20, 1000000]) ==\
    \ 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums: [10, 11, 13,\
    \ 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1, 0, -2]) == -33)\n\
    assert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums: [7]) ==\
    \ 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmp4i9ixwv5/tmp4i9ixwv5.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac29035fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac290056b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac290056988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac2900557b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4i9ixwv5                        0x0000563b2679257a <unavailable> + 5498

    5    libc.so.6                          0x00002ac29054b460 __libc_start_main +
    245

    6    tmp4i9ixwv5                        0x0000563b267921c9 <unavailable> + 4553

    '
  stdout: ''
  timestamp: 1660014079
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var minValue = Int.max\n    var currValue = 0\n    for\
    \ num in nums {\n        currValue += num\n        minValue = min(minValue, currValue)\n\
    \        currValue = max(currValue, 0)\n    }\n    return minValue\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\n\
    assert(minSubArraySum(nums: [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums: [-9999999999999999])\
    \ == -9999999999999999)\nassert(minSubArraySum(nums: [0, 10, 20, 1000000]) ==\
    \ 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums: [10, 11, 13,\
    \ 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1, 0, -2]) == -33)\n\
    assert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums: [7]) ==\
    \ 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmp0o5xissr/tmp0o5xissr.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b24a09cfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b24a06c6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b24a06c6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b24a06c57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0o5xissr                        0x000055900245d57a <unavailable> + 5498

    5    libc.so.6                          0x00002b24a0bbb460 __libc_start_main +
    245

    6    tmp0o5xissr                        0x000055900245d1c9 <unavailable> + 4553

    '
  stdout: ''
  timestamp: 1660014079
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var min = Int.max\n    var sum = 0\n    for num in nums\
    \ {\n        sum += num\n        if sum < min {\n            min = sum\n     \
    \   }\n        if sum > 0 {\n            sum = 0\n        }\n    }\n    return\
    \ min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums: [2,\
    \ 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums: [-9999999999999999])\
    \ == -9999999999999999)\nassert(minSubArraySum(nums: [0, 10, 20, 1000000]) ==\
    \ 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums: [10, 11, 13,\
    \ 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1, 0, -2]) == -33)\n\
    assert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums: [7]) ==\
    \ 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014079
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var minSum = Int.max\n    var sum = 0\n    var left = 0\n\
    \    for right in 0..<nums.count {\n        sum += nums[right]\n        while\
    \ sum >= 0 {\n            minSum = min(minSum, sum)\n            sum -= nums[left]\n\
    \            left += 1\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b7d5f607c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7d5f2fe561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b7d5f2fe286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b7d5f2fe13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b7d5f2fdbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b7d5f0fde83 <unavailable> + 188035

    6    tmp9405myfk                        0x0000556e633ef1a0 <unavailable> + 8608

    7    tmp9405myfk                        0x0000556e633ee56c <unavailable> + 5484

    8    libc.so.6                          0x00002b7d5f7f3460 __libc_start_main +
    245

    9    tmp9405myfk                        0x0000556e633ee239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1660014079
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    // 1. If the array is empty, then return 0.\n    guard\
    \ !nums.isEmpty else { return 0 }\n    // 2. Iterate through the array from the\
    \ start and keep summing elements in a subarray\n    // that is contiguous.\n\
    \    var minSum = nums[0]\n    var currentSum = 0\n    for num in nums {\n   \
    \     currentSum += num\n        minSum = min(minSum, currentSum)\n        if\
    \ currentSum > 0 {\n            currentSum = 0\n        }\n    }\n    return minSum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\n\
    assert(minSubArraySum(nums: [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums: [-9999999999999999])\
    \ == -9999999999999999)\nassert(minSubArraySum(nums: [0, 10, 20, 1000000]) ==\
    \ 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums: [10, 11, 13,\
    \ 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1, 0, -2]) == -33)\n\
    assert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums: [7]) ==\
    \ 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014079
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var currentSum = 0\n    var minSum = Int.max\n    var i\
    \ = 0\n    while i < nums.count {\n        currentSum += nums[i]\n        if currentSum\
    \ < minSum {\n            minSum = currentSum\n        }\n        if currentSum\
    \ > 0 {\n            currentSum = 0\n        }\n        i += 1\n    }\n    return\
    \ minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014079
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var min = Int.max\n    var sum = 0\n    for num in nums\
    \ {\n        sum += num\n        if sum < min {\n            min = sum\n     \
    \   }\n        if sum > 0 {\n            sum = 0\n        }\n    }\n    return\
    \ min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums: [2,\
    \ 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums: [-9999999999999999])\
    \ == -9999999999999999)\nassert(minSubArraySum(nums: [0, 10, 20, 1000000]) ==\
    \ 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums: [10, 11, 13,\
    \ 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1, 0, -2]) == -33)\n\
    assert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums: [7]) ==\
    \ 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014079
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var min = Int.max\n    var sum = 0\n    var start = 0\n\
    \    var end = 0\n    while end < nums.count {\n        sum += nums[end]\n   \
    \     end += 1\n        while sum >= 0 {\n            min = min < sum ? min :\
    \ sum\n            sum -= nums[start]\n            start += 1\n        }\n   \
    \ }\n    return min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ae0d4b57c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae0d484e561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ae0d484e286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ae0d484e13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ae0d484dbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ae0d464de83 <unavailable> + 188035

    6    tmpld884xf1                        0x000055979a7d5e9a <unavailable> + 7834

    7    tmpld884xf1                        0x000055979a7d534c <unavailable> + 4940

    8    libc.so.6                          0x00002ae0d4d43460 __libc_start_main +
    245

    9    tmpld884xf1                        0x000055979a7d5019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1660014079
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    guard nums.count > 0 else { return 0 }\n    guard nums.count\
    \ > 1 else { return nums[0] }\n    var result = nums[0]\n    var previous = nums[0]\n\
    \    for i in 1..<nums.count {\n        previous = min(previous + nums[i], nums[i])\n\
    \        result = min(result, previous)\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\n\
    assert(minSubArraySum(nums: [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums: [-9999999999999999])\
    \ == -9999999999999999)\nassert(minSubArraySum(nums: [0, 10, 20, 1000000]) ==\
    \ 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums: [10, 11, 13,\
    \ 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1, 0, -2]) == -33)\n\
    assert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums: [7]) ==\
    \ 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014079
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    if nums.count == 0 { return 0 }\n    var minSum = nums[0]\n\
    \    var currentSum = nums[0]\n    for index in 1..<nums.count {\n        if currentSum\
    \ < 0 {\n            currentSum = nums[index]\n        } else {\n            currentSum\
    \ += nums[index]\n        }\n        minSum = min(minSum, currentSum)\n    }\n\
    \    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmp7rvuj45q/tmp7rvuj45q.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad720c89c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad720980b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad720980988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad72097f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7rvuj45q                        0x000056374da065ea <unavailable> + 5610

    5    libc.so.6                          0x00002ad720e75460 __libc_start_main +
    245

    6    tmp7rvuj45q                        0x000056374da06239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1660014079
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    if nums.count == 0 { return 0 }\n    let n = nums.count\n\
    \    var minSum = Int.max\n    var globalSum = 0\n    var start = 0\n    for i\
    \ in 0..<n {\n        globalSum += nums[i]\n        if globalSum < minSum {\n\
    \            minSum = globalSum\n        }\n        if globalSum > 0 {\n     \
    \       globalSum = 0\n            start = i + 1\n        }\n    }\n    return\
    \ minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014079
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    // TODO: Implement it\n    return 0\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmp_4hpw_6d/tmp_4hpw_6d.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002addc6e44c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002addc6b3bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002addc6b3b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002addc6b3a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_4hpw_6d                        0x000055c3e3cb531a <unavailable> + 4890

    5    libc.so.6                          0x00002addc7030460 __libc_start_main +
    245

    6    tmp_4hpw_6d                        0x000055c3e3cb4f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660014079
- exit_code: 1
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    // TODO: - Test cases\n    var current = nums[0]\n    var\
    \ min = nums[0]\n    for i in 1..<nums.count {\n        current = min(nums[i],\
    \ current + nums[i])\n        min = min(current, min)\n    }\n    return min\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\n\
    assert(minSubArraySum(nums: [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums: [-9999999999999999])\
    \ == -9999999999999999)\nassert(minSubArraySum(nums: [0, 10, 20, 1000000]) ==\
    \ 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums: [10, 11, 13,\
    \ 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1, 0, -2]) == -33)\n\
    assert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums: [7]) ==\
    \ 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpc8nx1_cx.swift:14:19: error: cannot call value of non-function\
    \ type 'Int'\n        current = min(nums[i], current + nums[i])\n            \
    \      ^\n/tmp/tmpc8nx1_cx.swift:15:15: error: cannot call value of non-function\
    \ type 'Int'\n        min = min(current, min)\n              ^\n"
  stdout: ''
  timestamp: 1660014079
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    guard !nums.isEmpty else { return 0 }\n    var result =\
    \ nums[0]\n    var sum = 0\n    for n in nums {\n        sum += n\n        result\
    \ = min(result, sum)\n        if sum > 0 {\n            sum = 0\n        }\n \
    \   }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014079
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    // TODO: - Fill this in.\n    return 0\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpd7oaqtci/tmpd7oaqtci.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b946d688c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b946d37fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b946d37f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b946d37e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd7oaqtci                        0x000055ccbee0a31a <unavailable> + 4890

    5    libc.so.6                          0x00002b946d874460 __libc_start_main +
    245

    6    tmpd7oaqtci                        0x000055ccbee09f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660014079
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var sum = 0\n    var minSum = Int.max\n    for num in nums\
    \ {\n        sum += num\n        minSum = min(minSum, sum)\n        if sum > 0\
    \ {\n            sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014078
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var low = 0\n    var high = 0\n    var total = nums[0]\n\
    \    var min = total\n    while high < nums.count {\n        if total < 0 {\n\
    \            low = high\n            total = 0\n        }\n        total += nums[high]\n\
    \        min = min > total ? total : min\n        high += 1\n    }\n    return\
    \ min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums: [2,\
    \ 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums: [-9999999999999999])\
    \ == -9999999999999999)\nassert(minSubArraySum(nums: [0, 10, 20, 1000000]) ==\
    \ 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums: [10, 11, 13,\
    \ 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1, 0, -2]) == -33)\n\
    assert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums: [7]) ==\
    \ 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmp250tam48/tmp250tam48.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aecc7401c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aecc70f8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aecc70f8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aecc70f77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp250tam48                        0x000055af73fb53ca <unavailable> + 5066

    5    libc.so.6                          0x00002aecc75ed460 __libc_start_main +
    245

    6    tmp250tam48                        0x000055af73fb5019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1660014079
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    guard !nums.isEmpty else { return 0 }\n    var sum = 0\n\
    \    var minSum = Int.max\n    for num in nums {\n        sum += num\n       \
    \ minSum = min(minSum, sum)\n        if sum > 0 {\n            sum = 0\n     \
    \   }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014079
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var min = Int.max\n    var sum = 0\n    var i = 0, j =\
    \ 0\n    while j < nums.count {\n        sum += nums[j]\n        if sum < min\
    \ {\n            min = sum\n        }\n        if sum > 0 {\n            sum =\
    \ 0\n            i = j + 1\n        }\n        j += 1\n    }\n    return min\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\n\
    assert(minSubArraySum(nums: [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums: [-9999999999999999])\
    \ == -9999999999999999)\nassert(minSubArraySum(nums: [0, 10, 20, 1000000]) ==\
    \ 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums: [10, 11, 13,\
    \ 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1, 0, -2]) == -33)\n\
    assert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums: [7]) ==\
    \ 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014079
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var currentSum = 0\n    var minSum = Int.max\n    for num\
    \ in nums {\n        currentSum += num\n        minSum = min(minSum, currentSum)\n\
    \        if currentSum > 0 {\n            currentSum = 0\n        }\n    }\n \
    \   return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014078
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var minSum = Int.max\n    var currentSum = 0\n    for num\
    \ in nums {\n        currentSum += num\n        minSum = min(minSum, currentSum)\n\
    \        currentSum = max(currentSum, 0)\n    }\n    return minSum\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\n\
    assert(minSubArraySum(nums: [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums: [-9999999999999999])\
    \ == -9999999999999999)\nassert(minSubArraySum(nums: [0, 10, 20, 1000000]) ==\
    \ 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums: [10, 11, 13,\
    \ 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1, 0, -2]) == -33)\n\
    assert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums: [7]) ==\
    \ 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpd_fcyijs/tmpd_fcyijs.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b59a0bbec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b59a08b5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b59a08b5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b59a08b47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd_fcyijs                        0x000056454fb3057a <unavailable> + 5498

    5    libc.so.6                          0x00002b59a0daa460 __libc_start_main +
    245

    6    tmpd_fcyijs                        0x000056454fb301c9 <unavailable> + 4553

    '
  stdout: ''
  timestamp: 1660013945
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    guard !nums.isEmpty else { return 0 }\n    var minSum =\
    \ Int.max\n    var currSum = 0\n    for num in nums {\n        currSum += num\n\
    \        minSum = min(minSum, currSum)\n        currSum = max(currSum, 0)\n  \
    \  }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpzdq92z80/tmpzdq92z80.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afda8dfbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afda8af2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afda8af2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afda8af17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzdq92z80                        0x0000560e5e9f95ca <unavailable> + 5578

    5    libc.so.6                          0x00002afda8fe7460 __libc_start_main +
    245

    6    tmpzdq92z80                        0x0000560e5e9f9219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1660014079
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var minimum = Int.max\n    var sum = 0\n    var i = 0\n\
    \    var j = 0\n    while j < nums.count {\n        sum += nums[j]\n        while\
    \ sum >= 0 {\n            minimum = min(minimum, sum)\n            sum -= nums[i]\n\
    \            i += 1\n        }\n        j += 1\n    }\n    return minimum\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\n\
    assert(minSubArraySum(nums: [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums: [-9999999999999999])\
    \ == -9999999999999999)\nassert(minSubArraySum(nums: [0, 10, 20, 1000000]) ==\
    \ 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums: [10, 11, 13,\
    \ 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1, 0, -2]) == -33)\n\
    assert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums: [7]) ==\
    \ 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ae3b1cc9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae3b19c0561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ae3b19c0286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ae3b19c013c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ae3b19bfbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ae3b17bfe83 <unavailable> + 188035

    6    tmpsyuoodwq                        0x00005620ee4cbf25 <unavailable> + 7973

    7    tmpsyuoodwq                        0x00005620ee4cb3dc <unavailable> + 5084

    8    libc.so.6                          0x00002ae3b1eb5460 __libc_start_main +
    245

    9    tmpsyuoodwq                        0x00005620ee4cb0a9 <unavailable> + 4265

    '
  stdout: ''
  timestamp: 1660014079
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    guard nums.count > 0 else { return -1 }\n    var start\
    \ = 0\n    var currentMin = Int.max\n    var currentSum = 0\n    for (index, num)\
    \ in nums.enumerated() {\n        currentSum += num\n        if currentSum < currentMin\
    \ {\n            currentMin = currentSum\n            start = index\n        }\n\
    \        while currentSum > 0 {\n            currentSum -= nums[start]\n     \
    \       start += 1\n            if currentSum < currentMin {\n               \
    \ currentMin = currentSum\n            }\n        }\n    }\n    return currentMin\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\n\
    assert(minSubArraySum(nums: [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums: [-9999999999999999])\
    \ == -9999999999999999)\nassert(minSubArraySum(nums: [0, 10, 20, 1000000]) ==\
    \ 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums: [10, 11, 13,\
    \ 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1, 0, -2]) == -33)\n\
    assert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums: [7]) ==\
    \ 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmp3_ds018f/tmp3_ds018f.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adaa2263c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adaa1f5ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adaa1f5a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adaa1f597b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3_ds018f                        0x000055bc064ee5ea <unavailable> + 5610

    5    libc.so.6                          0x00002adaa244f460 __libc_start_main +
    245

    6    tmp3_ds018f                        0x000055bc064ee239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1660014079
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    let n = nums.count\n    if n == 0 { return 0 }\n    var\
    \ minSum = nums[0]\n    var sum = 0\n    for i in 0..<n {\n        sum += nums[i]\n\
    \        minSum = min(minSum, sum)\n        if sum > 0 {\n            sum = 0\n\
    \        }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014079
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    let nums = nums.map { $0 }\n    var minSum = Int.max\n\
    \    var currentSum = 0\n    for i in 0..<nums.count {\n        for j in i..<nums.count\
    \ {\n            currentSum += nums[j]\n            if currentSum < minSum {\n\
    \                minSum = currentSum\n            }\n        }\n        currentSum\
    \ = 0\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014079
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var minSum = Int.max\n    var sum = 0\n    for i in 0..<nums.count\
    \ {\n        sum += nums[i]\n        minSum = min(minSum, sum)\n        if sum\
    \ > 0 {\n            sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\n\
    assert(minSubArraySum(nums: [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums: [-9999999999999999])\
    \ == -9999999999999999)\nassert(minSubArraySum(nums: [0, 10, 20, 1000000]) ==\
    \ 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums: [10, 11, 13,\
    \ 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1, 0, -2]) == -33)\n\
    assert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums: [7]) ==\
    \ 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013946
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    let length = nums.count\n    var result = Int.max\n   \
    \ var sum = 0\n    var left = 0\n    for right in 0..<length {\n        sum +=\
    \ nums[right]\n        while sum >= 0 {\n            result = min(result, sum)\n\
    \            sum -= nums[left]\n            left += 1\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b0760d0cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0760a03561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b0760a03286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b0760a0313c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b0760a02bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b0760802e83 <unavailable> + 188035

    6    tmpabxz9ygu                        0x00005598860dd1ba <unavailable> + 8634

    7    tmpabxz9ygu                        0x00005598860dc56c <unavailable> + 5484

    8    libc.so.6                          0x00002b0760ef8460 __libc_start_main +
    245

    9    tmpabxz9ygu                        0x00005598860dc239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1660014079
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var minSum = Int.max\n    var tempSum = 0\n    for num\
    \ in nums {\n        tempSum += num\n        if tempSum < minSum {\n         \
    \   minSum = tempSum\n        }\n        if tempSum > 0 {\n            tempSum\
    \ = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014079
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var minSum = Int.max\n    var sum = 0\n    var minStart\
    \ = 0\n    var minEnd = 0\n    var start = 0\n    for end in 0 ..< nums.count\
    \ {\n        sum += nums[end]\n        if sum < minSum {\n            minSum =\
    \ sum\n            minStart = start\n            minEnd = end\n        }\n   \
    \     if sum > 0 {\n            sum = 0\n            start = end + 1\n       \
    \ }\n    }\n    print(\"\\(minStart) \\(minEnd)\")\n    return minSum\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\n\
    assert(minSubArraySum(nums: [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums: [-9999999999999999])\
    \ == -9999999999999999)\nassert(minSubArraySum(nums: [0, 10, 20, 1000000]) ==\
    \ 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums: [10, 11, 13,\
    \ 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1, 0, -2]) == -33)\n\
    assert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums: [7]) ==\
    \ 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: '3 3

    0 2

    0 4

    0 0

    0 0

    0 2

    1 3

    4 4

    1 1

    0 0

    0 0

    1 1

    '
  timestamp: 1660014080
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums\
    \ {\n        sum += num\n        minSum = min(minSum, sum)\n        if sum > 0\
    \ {\n            sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013945
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums\
    \ {\n        sum += num\n        minSum = min(minSum, sum)\n        if sum > 0\
    \ {\n            sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013945
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    if nums.count == 0 { return 0 }\n    var start = 0\n  \
    \  var end = 0\n    var minSum = Int.max\n    var sum = 0\n    while end < nums.count\
    \ {\n        sum += nums[end]\n        end += 1\n        while sum >= 0 {\n  \
    \          minSum = min(minSum, sum)\n            sum -= nums[start]\n       \
    \     start += 1\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b3a492ffc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3a48ff6561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b3a48ff6286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b3a48ff613c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b3a48ff5bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b3a48df5e83 <unavailable> + 188035

    6    tmpnu9tz1uw                        0x0000555f75f2bf59 <unavailable> + 8025

    7    tmpnu9tz1uw                        0x0000555f75f2b3dc <unavailable> + 5084

    8    libc.so.6                          0x00002b3a494eb460 __libc_start_main +
    245

    9    tmpnu9tz1uw                        0x0000555f75f2b0a9 <unavailable> + 4265

    '
  stdout: ''
  timestamp: 1660014079
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var res = Int.max\n    var sum = 0\n    var left = 0\n\
    \    for i in 0..<nums.count {\n        sum += nums[i]\n        res = min(res,\
    \ sum - left)\n        left = min(left, sum)\n    }\n    return res\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\n\
    assert(minSubArraySum(nums: [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums: [-9999999999999999])\
    \ == -9999999999999999)\nassert(minSubArraySum(nums: [0, 10, 20, 1000000]) ==\
    \ 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums: [10, 11, 13,\
    \ 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1, 0, -2]) == -33)\n\
    assert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums: [7]) ==\
    \ 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpk94974yh/tmpk94974yh.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b00588fdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b00585f4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b00585f4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b00585f37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk94974yh                        0x000055e9147d45ea <unavailable> + 5610

    5    libc.so.6                          0x00002b0058ae9460 __libc_start_main +
    245

    6    tmpk94974yh                        0x000055e9147d4239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1660014079
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var minimum = Int.max\n    var sum = 0\n    for num in\
    \ nums {\n        sum += num\n        minimum = min(minimum, sum)\n        if\
    \ sum > 0 {\n            sum = 0\n        }\n    }\n    return minimum\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\n\
    assert(minSubArraySum(nums: [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums: [-9999999999999999])\
    \ == -9999999999999999)\nassert(minSubArraySum(nums: [0, 10, 20, 1000000]) ==\
    \ 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums: [10, 11, 13,\
    \ 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1, 0, -2]) == -33)\n\
    assert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums: [7]) ==\
    \ 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014080
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    guard nums.count > 0 else { return 0 }\n    var i = 0\n\
    \    var j = 0\n    var minSum = Int.max\n    var total = 0\n    while j < nums.count\
    \ {\n        total += nums[j]\n        while total < 0 {\n            minSum =\
    \ min(minSum, total)\n            total -= nums[i]\n            i += 1\n     \
    \   }\n        j += 1\n    }\n    return minSum == Int.max ? 0 : minSum\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\n\
    assert(minSubArraySum(nums: [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums: [-9999999999999999])\
    \ == -9999999999999999)\nassert(minSubArraySum(nums: [0, 10, 20, 1000000]) ==\
    \ 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums: [10, 11, 13,\
    \ 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1, 0, -2]) == -33)\n\
    assert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums: [7]) ==\
    \ 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpkwh1aabf/tmpkwh1aabf.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aad56ec6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aad56bbdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aad56bbd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aad56bbc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkwh1aabf                        0x0000557ff45f045a <unavailable> + 5210

    5    libc.so.6                          0x00002aad570b2460 __libc_start_main +
    245

    6    tmpkwh1aabf                        0x0000557ff45f00a9 <unavailable> + 4265

    '
  stdout: ''
  timestamp: 1660014079
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n  guard nums.count > 0 else { return 0 }\n  var minSum = Int.max\n\
    \  var currentSum = 0\n  for num in nums {\n    currentSum += num\n    minSum\
    \ = min(minSum, currentSum)\n    currentSum = max(currentSum, 0)\n  }\n  return\
    \ minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpiqbcuxsa/tmpiqbcuxsa.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae191733c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae19142ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae19142a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae1914297b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpiqbcuxsa                        0x0000560dbbea15ca <unavailable> + 5578

    5    libc.so.6                          0x00002ae19191f460 __libc_start_main +
    245

    6    tmpiqbcuxsa                        0x0000560dbbea1219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1660014079
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    // write your code in Swift 3.0 (Linux)\n    guard nums.count\
    \ > 0 else { return 0 }\n    var min = nums[0]\n    var sum = nums[0]\n    for\
    \ i in 1..<nums.count {\n        sum = nums[i] > sum + nums[i] ? nums[i] : sum\
    \ + nums[i]\n        min = min > sum ? sum : min\n    }\n    return min\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\n\
    assert(minSubArraySum(nums: [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums: [-9999999999999999])\
    \ == -9999999999999999)\nassert(minSubArraySum(nums: [0, 10, 20, 1000000]) ==\
    \ 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums: [10, 11, 13,\
    \ 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1, 0, -2]) == -33)\n\
    assert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums: [7]) ==\
    \ 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpyim2bkgw/tmpyim2bkgw.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b757d5aec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b757d2a5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b757d2a5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b757d2a47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyim2bkgw                        0x000055cf610c455a <unavailable> + 5466

    5    libc.so.6                          0x00002b757d79a460 __libc_start_main +
    245

    6    tmpyim2bkgw                        0x000055cf610c41a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660014079
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    guard nums.count > 0 else { return 0 }\n    var minSum\
    \ = Int.max\n    var sum = 0\n    for n in nums {\n        sum += n\n        minSum\
    \ = min(minSum, sum)\n        if sum > 0 {\n            sum = 0\n        }\n \
    \   }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014080
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var minSum = Int.max\n    var tempSum = 0\n    for num\
    \ in nums {\n        tempSum += num\n        if tempSum < minSum {\n         \
    \   minSum = tempSum\n        }\n        if tempSum > 0 {\n            tempSum\
    \ = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014079
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    let n = nums.count\n    if n == 0 { return 0 }\n    var\
    \ result = Int.max\n    var sum = 0\n    for num in nums {\n        sum += num\n\
    \        result = min(result, sum)\n        if sum > 0 {\n            sum = 0\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014080
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    let n = nums.count\n    var left = 0\n    var sum = 0\n\
    \    var ans = Int.max\n    for right in 0..<n {\n        sum += nums[right]\n\
    \        while sum >= 0 {\n            ans = min(ans, sum)\n            sum -=\
    \ nums[left]\n            left += 1\n        }\n    }\n    return ans\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\n\
    assert(minSubArraySum(nums: [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums: [-9999999999999999])\
    \ == -9999999999999999)\nassert(minSubArraySum(nums: [0, 10, 20, 1000000]) ==\
    \ 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums: [10, 11, 13,\
    \ 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1, 0, -2]) == -33)\n\
    assert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums: [7]) ==\
    \ 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b7a19eefc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7a19be6561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b7a19be6286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b7a19be613c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b7a19be5bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b7a199e5e83 <unavailable> + 188035

    6    tmpqp0zbj2l                        0x0000562da9d2b1ba <unavailable> + 8634

    7    tmpqp0zbj2l                        0x0000562da9d2a56c <unavailable> + 5484

    8    libc.so.6                          0x00002b7a1a0db460 __libc_start_main +
    245

    9    tmpqp0zbj2l                        0x0000562da9d2a239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1660014080
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    guard !nums.isEmpty else { return 0 }\n    var maxSoFar\
    \ = Int.max\n    var currMax = 0\n    for num in nums {\n        currMax = max(currMax\
    \ + num, num)\n        maxSoFar = min(maxSoFar, currMax)\n    }\n    return maxSoFar\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\n\
    assert(minSubArraySum(nums: [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums: [-9999999999999999])\
    \ == -9999999999999999)\nassert(minSubArraySum(nums: [0, 10, 20, 1000000]) ==\
    \ 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums: [10, 11, 13,\
    \ 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1, 0, -2]) == -33)\n\
    assert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums: [7]) ==\
    \ 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpwuqnr8dc/tmpwuqnr8dc.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af57b5dec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af57b2d5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af57b2d5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af57b2d47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwuqnr8dc                        0x000055f435a375ca <unavailable> + 5578

    5    libc.so.6                          0x00002af57b7ca460 __libc_start_main +
    245

    6    tmpwuqnr8dc                        0x000055f435a37219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1660014080
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    let size = nums.count\n    var result = Int.max\n    var\
    \ sum = 0\n    var left = 0\n    for i in 0..<size {\n        sum += nums[i]\n\
    \        while sum >= 0 {\n            result = min(result, sum)\n           \
    \ sum -= nums[left]\n            left += 1\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\n\
    assert(minSubArraySum(nums: [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums: [-9999999999999999])\
    \ == -9999999999999999)\nassert(minSubArraySum(nums: [0, 10, 20, 1000000]) ==\
    \ 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums: [10, 11, 13,\
    \ 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1, 0, -2]) == -33)\n\
    assert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums: [7]) ==\
    \ 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b037ed2cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b037ea23561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b037ea23286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b037ea2313c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b037ea22bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b037e822e83 <unavailable> + 188035

    6    tmpjuzakmxk                        0x00005642a882b1ba <unavailable> + 8634

    7    tmpjuzakmxk                        0x00005642a882a56c <unavailable> + 5484

    8    libc.so.6                          0x00002b037ef18460 __libc_start_main +
    245

    9    tmpjuzakmxk                        0x00005642a882a239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1660014080
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    // TODO: Write some code to solve this coding challenge\n\
    \    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpgos8160t/tmpgos8160t.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8a795d1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8a792c8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8a792c8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8a792c77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgos8160t                        0x000055b21146b31a <unavailable> + 4890

    5    libc.so.6                          0x00002b8a797bd460 __libc_start_main +
    245

    6    tmpgos8160t                        0x000055b21146af69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660014080
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n  if nums.count == 0 { return 0 }\n  var minSoFar = nums[0]\n\
    \  var current = nums[0]\n  for num in nums[1...] {\n    current = min(current\
    \ + num, num)\n    minSoFar = min(minSoFar, current)\n  }\n  return minSoFar\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\n\
    assert(minSubArraySum(nums: [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums: [-9999999999999999])\
    \ == -9999999999999999)\nassert(minSubArraySum(nums: [0, 10, 20, 1000000]) ==\
    \ 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums: [10, 11, 13,\
    \ 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1, 0, -2]) == -33)\n\
    assert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums: [7]) ==\
    \ 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014080
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var minSum = Int.max\n    var currentSum = 0\n    for num\
    \ in nums {\n        currentSum += num\n        minSum = min(minSum, currentSum)\n\
    \        currentSum = min(currentSum, 0)\n    }\n    return minSum\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\n\
    assert(minSubArraySum(nums: [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums: [-9999999999999999])\
    \ == -9999999999999999)\nassert(minSubArraySum(nums: [0, 10, 20, 1000000]) ==\
    \ 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums: [10, 11, 13,\
    \ 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1, 0, -2]) == -33)\n\
    assert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums: [7]) ==\
    \ 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014078
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    guard nums.count > 0 else { return 0 }\n    var localMin\
    \ = nums[0]\n    var globalMin = nums[0]\n    for i in 1..<nums.count {\n    \
    \    localMin = max(nums[i], localMin + nums[i])\n        globalMin = min(localMin,\
    \ globalMin)\n    }\n    return globalMin\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpbng40oyt/tmpbng40oyt.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b29a3957c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b29a364eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b29a364e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b29a364d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbng40oyt                        0x000055be5acbf63a <unavailable> + 5690

    5    libc.so.6                          0x00002b29a3b43460 __libc_start_main +
    245

    6    tmpbng40oyt                        0x000055be5acbf289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660014080
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    // TODO: Implement\n    fatalError(\"TODO: Implement\"\
    )\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\n\
    assert(minSubArraySum(nums: [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums: [-9999999999999999])\
    \ == -9999999999999999)\nassert(minSubArraySum(nums: [0, 10, 20, 1000000]) ==\
    \ 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums: [10, 11, 13,\
    \ 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1, 0, -2]) == -33)\n\
    assert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums: [7]) ==\
    \ 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpt7m8zr_t/tmpt7m8zr_t.swift:11: Fatal error: TODO: Implement

    Current stack trace:

    0    libswiftCore.so                    0x00002b5f30f65c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5f30c5cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5f30c5c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5f30c5b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt7m8zr_t                        0x000055ec75774dcc <unavailable> + 7628

    5    tmpt7m8zr_t                        0x000055ec7577432c <unavailable> + 4908

    6    libc.so.6                          0x00002b5f31151460 __libc_start_main +
    245

    7    tmpt7m8zr_t                        0x000055ec75773ff9 <unavailable> + 4089

    '
  stdout: ''
  timestamp: 1660014080
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var min = Int.max\n    var sum = 0\n    for num in nums\
    \ {\n        sum += num\n        if sum < min {\n            min = sum\n     \
    \   }\n        if sum > 0 {\n            sum = 0\n        }\n    }\n    return\
    \ min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums: [2,\
    \ 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums: [-9999999999999999])\
    \ == -9999999999999999)\nassert(minSubArraySum(nums: [0, 10, 20, 1000000]) ==\
    \ 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums: [10, 11, 13,\
    \ 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1, 0, -2]) == -33)\n\
    assert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums: [7]) ==\
    \ 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014079
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    guard nums.count > 0 else { return 0 }\n    var min = nums[0]\n\
    \    var sum = 0\n    for num in nums {\n        sum += num\n        if sum <\
    \ min {\n            min = sum\n        }\n        if sum > 0 {\n            sum\
    \ = 0\n        }\n    }\n    return min\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014080
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    let n = nums.count\n    var minSum = Int.max\n    var sum\
    \ = 0\n    var left = 0\n    for i in 0..<n {\n        sum += nums[i]\n      \
    \  minSum = min(minSum, sum - left)\n        left = min(left, sum)\n    }\n  \
    \  return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpe5bgiy7t/tmpe5bgiy7t.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b36827fbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b36824f2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b36824f2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b36824f17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe5bgiy7t                        0x0000560dd31915ea <unavailable> + 5610

    5    libc.so.6                          0x00002b36829e7460 __libc_start_main +
    245

    6    tmpe5bgiy7t                        0x0000560dd3191239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1660014080
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var min = Int.max\n    var sum = 0\n    for i in 0..<nums.count\
    \ {\n        sum += nums[i]\n        if min > sum {\n            min = sum\n \
    \       }\n        if sum > 0 {\n            sum = 0\n        }\n    }\n    return\
    \ min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums: [2,\
    \ 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums: [-9999999999999999])\
    \ == -9999999999999999)\nassert(minSubArraySum(nums: [0, 10, 20, 1000000]) ==\
    \ 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums: [10, 11, 13,\
    \ 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1, 0, -2]) == -33)\n\
    assert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums: [7]) ==\
    \ 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014080
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var minSum = nums[0]\n    var sum = 0\n    for num in nums\
    \ {\n        sum += num\n        if sum < minSum {\n            minSum = sum\n\
    \        }\n        if sum > 0 {\n            sum = 0\n        }\n    }\n    return\
    \ minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014078
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var minSubArraySum = Int.max\n    var sum = 0\n    for\
    \ num in nums {\n        sum += num\n        minSubArraySum = min(minSubArraySum,\
    \ sum)\n        if sum > 0 {\n            sum = 0\n        }\n    }\n    return\
    \ minSubArraySum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014080
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    guard nums.count > 0 else { return 0 }\n    var minSum\
    \ = Int.max\n    var sum = 0\n    for num in nums {\n        sum += num\n    \
    \    minSum = min(minSum, sum)\n        if sum > 0 {\n            sum = 0\n  \
    \      }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013945
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    // TODO: Implement me!\n    return 0\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpon_q4vmq/tmpon_q4vmq.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b34a994dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b34a9644b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b34a9644988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b34a96437b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpon_q4vmq                        0x000055ccfc6d831a <unavailable> + 4890

    5    libc.so.6                          0x00002b34a9b39460 __libc_start_main +
    245

    6    tmpon_q4vmq                        0x000055ccfc6d7f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660014080
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var minSum = Int.max\n    var currentSum = 0\n    for num\
    \ in nums {\n        currentSum += num\n        minSum = min(minSum, currentSum)\n\
    \        currentSum = max(currentSum, 0)\n    }\n    return minSum\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\n\
    assert(minSubArraySum(nums: [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums: [-9999999999999999])\
    \ == -9999999999999999)\nassert(minSubArraySum(nums: [0, 10, 20, 1000000]) ==\
    \ 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums: [10, 11, 13,\
    \ 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1, 0, -2]) == -33)\n\
    assert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums: [7]) ==\
    \ 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpd_fcyijs/tmpd_fcyijs.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b59a0bbec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b59a08b5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b59a08b5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b59a08b47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd_fcyijs                        0x000056454fb3057a <unavailable> + 5498

    5    libc.so.6                          0x00002b59a0daa460 __libc_start_main +
    245

    6    tmpd_fcyijs                        0x000056454fb301c9 <unavailable> + 4553

    '
  stdout: ''
  timestamp: 1660013945
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    guard nums.count > 0 else { return 0 }\n    guard nums.count\
    \ > 1 else { return nums[0] }\n    var minValue = nums[0]\n    var sumValue =\
    \ nums[0]\n    for i in 1..<nums.count {\n        let num = nums[i]\n        if\
    \ num < minValue {\n            minValue = num\n        }\n        if sumValue\
    \ < 0 {\n            sumValue = num\n        } else {\n            sumValue +=\
    \ num\n        }\n        if sumValue < minValue {\n            minValue = sumValue\n\
    \        }\n    }\n    return minValue\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpai9a9rx0/tmpai9a9rx0.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2d0246ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2d02165b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2d02165988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2d021647b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpai9a9rx0                        0x000055a7b0bb761f <unavailable> + 5663

    5    libc.so.6                          0x00002b2d0265a460 __libc_start_main +
    245

    6    tmpai9a9rx0                        0x000055a7b0bb71a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660014080
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var minSum = Int.max\n    var sum = 0\n    for i in 0..<nums.count\
    \ {\n        sum += nums[i]\n        minSum = min(minSum, sum)\n        if sum\
    \ > 0 {\n            sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\n\
    assert(minSubArraySum(nums: [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums: [-9999999999999999])\
    \ == -9999999999999999)\nassert(minSubArraySum(nums: [0, 10, 20, 1000000]) ==\
    \ 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums: [10, 11, 13,\
    \ 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1, 0, -2]) == -33)\n\
    assert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums: [7]) ==\
    \ 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013946
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var minSum = Int.max\n    var sum = 0\n    var j = 0\n\
    \    for i in 0..<nums.count {\n        sum += nums[i]\n        while sum >= 0\
    \ {\n            minSum = min(minSum, sum)\n            sum -= nums[j]\n     \
    \       j += 1\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ad3b6972c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad3b6669561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ad3b6669286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ad3b666913c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ad3b6668bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ad3b6468e83 <unavailable> + 188035

    6    tmpjecoqa1n                        0x0000555cc4dfb1a0 <unavailable> + 8608

    7    tmpjecoqa1n                        0x0000555cc4dfa56c <unavailable> + 5484

    8    libc.so.6                          0x00002ad3b6b5e460 __libc_start_main +
    245

    9    tmpjecoqa1n                        0x0000555cc4dfa239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1660014080
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    guard nums.count > 0 else { return 0 }\n    var minSum\
    \ = Int.max\n    var currentSum = 0\n    for num in nums {\n        currentSum\
    \ += num\n        minSum = min(minSum, currentSum)\n        currentSum = max(currentSum,\
    \ 0)\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmp2r0u8dvi/tmp2r0u8dvi.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af6ca750c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af6ca447b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af6ca447988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af6ca4467b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2r0u8dvi                        0x00005628100d55ca <unavailable> + 5578

    5    libc.so.6                          0x00002af6ca93c460 __libc_start_main +
    245

    6    tmp2r0u8dvi                        0x00005628100d5219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1660014080
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    guard !nums.isEmpty else { return 0 }\n    guard nums.count\
    \ > 1 else { return nums[0] }\n    var minSum = nums[0]\n    var sum = nums[0]\n\
    \    for i in 1..<nums.count {\n        sum = Swift.min(nums[i], sum + nums[i])\n\
    \        minSum = Swift.min(minSum, sum)\n    }\n    return minSum\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\n\
    assert(minSubArraySum(nums: [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums: [-9999999999999999])\
    \ == -9999999999999999)\nassert(minSubArraySum(nums: [0, 10, 20, 1000000]) ==\
    \ 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums: [10, 11, 13,\
    \ 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1, 0, -2]) == -33)\n\
    assert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums: [7]) ==\
    \ 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014080
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    guard !nums.isEmpty else { return 0 }\n    var _sum = 0\n\
    \    var _min = Int.max\n    for num in nums {\n        _sum += num\n        _min\
    \ = min(_min, _sum)\n        _sum = min(_sum, 0)\n    }\n    return _min\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\n\
    assert(minSubArraySum(nums: [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums: [-9999999999999999])\
    \ == -9999999999999999)\nassert(minSubArraySum(nums: [0, 10, 20, 1000000]) ==\
    \ 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums: [10, 11, 13,\
    \ 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1, 0, -2]) == -33)\n\
    assert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums: [7]) ==\
    \ 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014080
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    guard !nums.isEmpty else { return 0 }\n    var minSum =\
    \ nums[0]\n    var sum = 0\n    for value in nums {\n        sum += value\n  \
    \      minSum = min(minSum, sum)\n        if sum > 0 {\n            sum = 0\n\
    \        }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014080
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    guard !nums.isEmpty else { return 0 }\n    var result =\
    \ nums[0]\n    var prev = nums[0]\n    for i in 1..<nums.count {\n        if prev\
    \ > 0 {\n            prev += nums[i]\n        } else {\n            prev = nums[i]\n\
    \        }\n        result = min(result, prev)\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\n\
    assert(minSubArraySum(nums: [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums: [-9999999999999999])\
    \ == -9999999999999999)\nassert(minSubArraySum(nums: [0, 10, 20, 1000000]) ==\
    \ 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums: [10, 11, 13,\
    \ 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1, 0, -2]) == -33)\n\
    assert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums: [7]) ==\
    \ 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpwube501o/tmpwube501o.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af642590c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af642287b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af642287988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af6422867b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwube501o                        0x000055d33762c67a <unavailable> + 5754

    5    libc.so.6                          0x00002af64277c460 __libc_start_main +
    245

    6    tmpwube501o                        0x000055d33762c2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014080
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var minSum = Int.max\n    var currSum = 0\n    for num\
    \ in nums {\n        currSum += num\n        minSum = min(minSum, currSum)\n \
    \       currSum = max(currSum, 0)\n    }\n    return minSum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpsfgf07oi/tmpsfgf07oi.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b58d97f8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b58d94efb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b58d94ef988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b58d94ee7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsfgf07oi                        0x0000558b629c357a <unavailable> + 5498

    5    libc.so.6                          0x00002b58d99e4460 __libc_start_main +
    245

    6    tmpsfgf07oi                        0x0000558b629c31c9 <unavailable> + 4553

    '
  stdout: ''
  timestamp: 1660013945
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums\
    \ {\n        sum += num\n        minSum = min(minSum, sum)\n        if sum > 0\
    \ {\n            sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013945
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var minSum = Int.max\n    var sum = 0\n    for i in 0..<nums.count\
    \ {\n        sum += nums[i]\n        minSum = min(minSum, sum)\n        if sum\
    \ < 0 {\n            sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\n\
    assert(minSubArraySum(nums: [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums: [-9999999999999999])\
    \ == -9999999999999999)\nassert(minSubArraySum(nums: [0, 10, 20, 1000000]) ==\
    \ 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums: [10, 11, 13,\
    \ 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1, 0, -2]) == -33)\n\
    assert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums: [7]) ==\
    \ 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpk1xr20j3/tmpk1xr20j3.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0500371c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0500068b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0500068988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b05000677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk1xr20j3                        0x000055b19d6835ea <unavailable> + 5610

    5    libc.so.6                          0x00002b050055d460 __libc_start_main +
    245

    6    tmpk1xr20j3                        0x000055b19d683239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1660014012
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var minSum = nums[0]\n    var sum = 0\n    for num in nums\
    \ {\n        sum += num\n        if sum < minSum {\n            minSum = sum\n\
    \        }\n        if sum > 0 {\n            sum = 0\n        }\n    }\n    return\
    \ minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014078
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var minSum = Int.max\n    var minStart = 0\n    var minEnd\
    \ = 0\n    var currentSum = 0\n    var start = 0\n    var end = 0\n    for i in\
    \ 0..<nums.count {\n        currentSum += nums[i]\n        end = i\n        if\
    \ currentSum < minSum {\n            minSum = currentSum\n            minStart\
    \ = start\n            minEnd = end\n        }\n        if currentSum > 0 {\n\
    \            currentSum = 0\n            start = i + 1\n        }\n    }\n   \
    \ print(\"\\(minStart) \\(minEnd)\")\n    return minSum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: '3 3

    0 2

    0 4

    0 0

    0 0

    0 2

    1 3

    4 4

    1 1

    0 0

    0 0

    1 1

    '
  timestamp: 1660014080
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var subArray = nums\n    var result = 0\n    var temp =\
    \ 0\n    for i in 0..<subArray.count {\n        temp += subArray[i]\n        if\
    \ temp < result {\n            result = temp\n        }\n        if temp > 0 {\n\
    \            temp = 0\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpz_le5c0z/tmpz_le5c0z.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8aecb5dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8aec854b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8aec854988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8aec8537b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz_le5c0z                        0x000055d68d50f55a <unavailable> + 5466

    5    libc.so.6                          0x00002b8aecd49460 __libc_start_main +
    245

    6    tmpz_le5c0z                        0x000055d68d50f1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660014080
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var minimum = nums[0]\n    var previous = nums[0]\n   \
    \ var result = nums[0]\n    for i in 1..<nums.count {\n        let current = nums[i]\n\
    \        previous = min(current, previous + current)\n        minimum = min(minimum,\
    \ previous)\n        result = min(result, current)\n    }\n    return min(minimum,\
    \ result)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014080
- exit_code: 1
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    // Write your code here.\n    var minSoFar = Int.max\n\
    \    var currentMin = 0\n    \n    for num in nums {\n        currentMin = Math.min(currentMin\
    \ + num, num)\n        minSoFar = Math.min(minSoFar, currentMin)\n    }\n    \n\
    \    return minSoFar\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmprrlg1bm7.swift:15:22: error: cannot find 'Math' in scope\n    \
    \    currentMin = Math.min(currentMin + num, num)\n                     ^~~~\n\
    /tmp/tmprrlg1bm7.swift:16:20: error: cannot find 'Math' in scope\n        minSoFar\
    \ = Math.min(minSoFar, currentMin)\n                   ^~~~\n"
  stdout: ''
  timestamp: 1660014080
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var minSum = Int.max\n    var currSum = 0\n    var beg\
    \ = 0\n    var end = 0\n    while end < nums.count {\n        currSum += nums[end]\n\
    \        while currSum >= 0 {\n            minSum = min(minSum, currSum)\n   \
    \         currSum -= nums[beg]\n            beg += 1\n        }\n        end +=\
    \ 1\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ad45383dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad453534561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ad453534286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ad45353413c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ad453533bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ad453333e83 <unavailable> + 188035

    6    tmporkrdada                        0x0000561934c1af25 <unavailable> + 7973

    7    tmporkrdada                        0x0000561934c1a3dc <unavailable> + 5084

    8    libc.so.6                          0x00002ad453a29460 __libc_start_main +
    245

    9    tmporkrdada                        0x0000561934c1a0a9 <unavailable> + 4265

    '
  stdout: ''
  timestamp: 1660014080
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    let len = nums.count\n    var min = Int.max\n    var sum\
    \ = 0\n    for i in 0..<len {\n        sum += nums[i]\n        min = min < sum\
    \ ? min : sum\n        if sum < 0 {\n            sum = 0\n        }\n    }\n \
    \   return min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpxnbq11sg/tmpxnbq11sg.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af1fa2edc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af1f9fe4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af1f9fe4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af1f9fe37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxnbq11sg                        0x000055f00782c55a <unavailable> + 5466

    5    libc.so.6                          0x00002af1fa4d9460 __libc_start_main +
    245

    6    tmpxnbq11sg                        0x000055f00782c1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660014080
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var minSum = nums[0]\n    var currentSum = nums[0]\n  \
    \  for i in 1..<nums.count {\n        currentSum = min(nums[i], currentSum + nums[i])\n\
    \        minSum = min(minSum, currentSum)\n    }\n    return minSum\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\n\
    assert(minSubArraySum(nums: [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums: [-9999999999999999])\
    \ == -9999999999999999)\nassert(minSubArraySum(nums: [0, 10, 20, 1000000]) ==\
    \ 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums: [10, 11, 13,\
    \ 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1, 0, -2]) == -33)\n\
    assert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums: [7]) ==\
    \ 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013945
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var result = Int.max\n    var sum = 0\n    var start =\
    \ 0\n    var end = 0\n    while end < nums.count {\n        sum += nums[end]\n\
    \        while sum >= 0 {\n            result = min(result, sum)\n           \
    \ sum -= nums[start]\n            start += 1\n        }\n        end += 1\n  \
    \  }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b19446c7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b19443be561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b19443be286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b19443be13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b19443bdbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b19441bde83 <unavailable> + 188035

    6    tmpwccujfq8                        0x000055d1a1cb8f25 <unavailable> + 7973

    7    tmpwccujfq8                        0x000055d1a1cb83dc <unavailable> + 5084

    8    libc.so.6                          0x00002b19448b3460 __libc_start_main +
    245

    9    tmpwccujfq8                        0x000055d1a1cb80a9 <unavailable> + 4265

    '
  stdout: ''
  timestamp: 1660014080
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var minSum = Int.max\n    var currentSum = 0\n    for item\
    \ in nums {\n        currentSum += item\n        if minSum > currentSum {\n  \
    \          minSum = currentSum\n        }\n        if currentSum > 0 {\n     \
    \       currentSum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014080
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var res = Int.max\n    var sum = 0\n    for i in 0..<nums.count\
    \ {\n        if sum < 0 {\n            sum = 0\n        }\n        sum += nums[i]\n\
    \        res = min(res, sum)\n    }\n    return res\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmp9k7pk6rs/tmp9k7pk6rs.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8c79dfec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8c79af5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8c79af5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8c79af47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9k7pk6rs                        0x00005649b1e1a5ea <unavailable> + 5610

    5    libc.so.6                          0x00002b8c79fea460 __libc_start_main +
    245

    6    tmp9k7pk6rs                        0x00005649b1e1a239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1660014080
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var minSum = nums[0]\n    var sum = 0\n    for n in nums\
    \ {\n        sum += n\n        if sum < minSum {\n            minSum = sum\n \
    \       }\n        if sum > 0 {\n            sum = 0\n        }\n    }\n    return\
    \ minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014080
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var minSum = Int.max\n    var tempSum = 0\n    for num\
    \ in nums {\n        tempSum += num\n        if tempSum < minSum {\n         \
    \   minSum = tempSum\n        }\n        if tempSum > 0 {\n            tempSum\
    \ = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014079
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var ans = nums[0]\n    var sum = 0\n    for num in nums\
    \ {\n        if sum > 0 {\n            sum += num\n        } else {\n        \
    \    sum = num\n        }\n        ans = min(ans, sum)\n    }\n    return ans\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\n\
    assert(minSubArraySum(nums: [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums: [-9999999999999999])\
    \ == -9999999999999999)\nassert(minSubArraySum(nums: [0, 10, 20, 1000000]) ==\
    \ 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums: [10, 11, 13,\
    \ 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1, 0, -2]) == -33)\n\
    assert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums: [7]) ==\
    \ 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpyofc704k/tmpyofc704k.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8bcdbd6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8bcd8cdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8bcd8cd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8bcd8cc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyofc704k                        0x00005603d120457a <unavailable> + 5498

    5    libc.so.6                          0x00002b8bcddc2460 __libc_start_main +
    245

    6    tmpyofc704k                        0x00005603d12041c9 <unavailable> + 4553

    '
  stdout: ''
  timestamp: 1660014080
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var minSum = Int.max\n    var sum = 0\n    for i in 0..<nums.count\
    \ {\n        sum += nums[i]\n        minSum = min(minSum, sum)\n        if sum\
    \ > 0 {\n            sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\n\
    assert(minSubArraySum(nums: [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums: [-9999999999999999])\
    \ == -9999999999999999)\nassert(minSubArraySum(nums: [0, 10, 20, 1000000]) ==\
    \ 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums: [10, 11, 13,\
    \ 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1, 0, -2]) == -33)\n\
    assert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums: [7]) ==\
    \ 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013946
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var minSum = Int.max\n    var subSum = 0\n    for num in\
    \ nums {\n        subSum += num\n        minSum = min(minSum, subSum)\n      \
    \  if subSum > 0 {\n            subSum = 0\n        }\n    }\n    return minSum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\n\
    assert(minSubArraySum(nums: [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums: [-9999999999999999])\
    \ == -9999999999999999)\nassert(minSubArraySum(nums: [0, 10, 20, 1000000]) ==\
    \ 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums: [10, 11, 13,\
    \ 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1, 0, -2]) == -33)\n\
    assert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums: [7]) ==\
    \ 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014080
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var minSum = Int.max\n    var sum = 0\n    var left = 0\n\
    \    for right in 0..<nums.count {\n        sum += nums[right]\n        while\
    \ sum >= 0 {\n            minSum = min(minSum, sum)\n            sum -= nums[left]\n\
    \            left += 1\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b7d5f607c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7d5f2fe561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b7d5f2fe286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b7d5f2fe13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b7d5f2fdbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b7d5f0fde83 <unavailable> + 188035

    6    tmp9405myfk                        0x0000556e633ef1a0 <unavailable> + 8608

    7    tmp9405myfk                        0x0000556e633ee56c <unavailable> + 5484

    8    libc.so.6                          0x00002b7d5f7f3460 __libc_start_main +
    245

    9    tmp9405myfk                        0x0000556e633ee239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1660014079
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    guard !nums.isEmpty else { return 0 }\n    var currentMax\
    \ = Int.max\n    var currentSum = 0\n    for num in nums {\n        currentSum\
    \ += num\n        currentMax = min(currentMax, currentSum)\n        currentSum\
    \ = max(currentSum, 0)\n    }\n    return currentMax\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpo35oo__a/tmpo35oo__a.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3e55408c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3e550ffb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3e550ff988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3e550fe7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo35oo__a                        0x00005587081685ca <unavailable> + 5578

    5    libc.so.6                          0x00002b3e555f4460 __libc_start_main +
    245

    6    tmpo35oo__a                        0x0000558708168219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1660014080
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    guard nums.count > 0 else { return 0 }\n    var arr = nums\n\
    \    var minVal = nums[0]\n    var sumVal = nums[0]\n    for i in 1..<nums.count\
    \ {\n        arr[i] = min(arr[i], arr[i] + arr[i - 1])\n        minVal = min(minVal,\
    \ arr[i])\n        sumVal += arr[i]\n    }\n    return minVal\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014080
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var minSoFar = Int.max\n    var minEndingHere = 0\n   \
    \ for num in nums {\n        minEndingHere = min(num, minEndingHere + num)\n \
    \       minSoFar = min(minSoFar, minEndingHere)\n    }\n    return minSoFar\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\n\
    assert(minSubArraySum(nums: [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums: [-9999999999999999])\
    \ == -9999999999999999)\nassert(minSubArraySum(nums: [0, 10, 20, 1000000]) ==\
    \ 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums: [10, 11, 13,\
    \ 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1, 0, -2]) == -33)\n\
    assert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums: [7]) ==\
    \ 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014080
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var minSum = Int.max\n    var currentSum = 0\n    for number\
    \ in nums {\n        currentSum += number\n        if currentSum < minSum {\n\
    \            minSum = currentSum\n        }\n        if currentSum > 0 {\n   \
    \         currentSum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014080
- exit_code: 1
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var sum = nums[0]\n    var min = sum\n    for i in 1..<nums.count\
    \ {\n        sum = min(nums[i], sum + nums[i])\n        min = min(min, sum)\n\
    \    }\n    return min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmphkis_xum.swift:13:15: error: cannot call value of non-function\
    \ type 'Int'\n        sum = min(nums[i], sum + nums[i])\n              ^\n/tmp/tmphkis_xum.swift:14:15:\
    \ error: cannot call value of non-function type 'Int'\n        min = min(min,\
    \ sum)\n              ^\n"
  stdout: ''
  timestamp: 1660014080
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    guard !nums.isEmpty else { return 0 }\n    var minSum =\
    \ Int.max\n    var sum = 0\n    for num in nums {\n        sum += num\n      \
    \  minSum = min(minSum, sum)\n        if sum > 0 {\n            sum = 0\n    \
    \    }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013945
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var min = Int.max\n    var sum = 0\n    for i in 0..<nums.count\
    \ {\n        sum += nums[i]\n        if sum < min {\n            min = sum\n \
    \       }\n        if sum > 0 {\n            sum = 0\n        }\n    }\n    return\
    \ min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums: [2,\
    \ 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums: [-9999999999999999])\
    \ == -9999999999999999)\nassert(minSubArraySum(nums: [0, 10, 20, 1000000]) ==\
    \ 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums: [10, 11, 13,\
    \ 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1, 0, -2]) == -33)\n\
    assert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums: [7]) ==\
    \ 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014078
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var minSum = Int.max\n    var currSum = 0\n    var start\
    \ = 0\n    for (index, num) in nums.enumerated() {\n        currSum += num\n \
    \       while currSum > minSum {\n            currSum -= nums[start]\n       \
    \     start += 1\n        }\n        minSum = min(minSum, currSum)\n    }\n  \
    \  return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpeon08gpq/tmpeon08gpq.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6f7d05cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6f7cd53b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6f7cd53988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6f7cd527b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeon08gpq                        0x000055ed51fdb61a <unavailable> + 5658

    5    libc.so.6                          0x00002b6f7d248460 __libc_start_main +
    245

    6    tmpeon08gpq                        0x000055ed51fdb269 <unavailable> + 4713

    '
  stdout: ''
  timestamp: 1660014080
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums\
    \ {\n        sum += num\n        minSum = min(minSum, sum)\n        if sum > 0\
    \ {\n            sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013945
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var min = Int.max\n    var sum = 0\n    var i = 0\n   \
    \ while i < nums.count {\n        sum += nums[i]\n        if sum < min {\n   \
    \         min = sum\n        }\n        if sum > 0 {\n            sum = 0\n  \
    \      }\n        i += 1\n    }\n    return min\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014080
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    guard nums.count > 0 else { return 0 }\n    var minSum\
    \ = Int.max\n    var sum = 0\n    for num in nums {\n        sum += num\n    \
    \    minSum = min(minSum, sum)\n        if sum > 0 {\n            sum = 0\n  \
    \      }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013945
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var minimum = Int.max\n    var sum = 0\n    for num in\
    \ nums {\n        sum += num\n        minimum = Swift.min(minimum, sum)\n    \
    \    if sum < 0 {\n            sum = 0\n        }\n    }\n    return minimum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\n\
    assert(minSubArraySum(nums: [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums: [-9999999999999999])\
    \ == -9999999999999999)\nassert(minSubArraySum(nums: [0, 10, 20, 1000000]) ==\
    \ 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums: [10, 11, 13,\
    \ 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1, 0, -2]) == -33)\n\
    assert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums: [7]) ==\
    \ 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpncov_wmg/tmpncov_wmg.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba731bd5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba7318ccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba7318cc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba7318cb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpncov_wmg                        0x0000564a090ee51a <unavailable> + 5402

    5    libc.so.6                          0x00002ba731dc1460 __libc_start_main +
    245

    6    tmpncov_wmg                        0x0000564a090ee169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660014080
- exit_code: 1
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n  // Edge case.\n  guard nums.count > 0 else { return 0 }\n\
    \  // Divide and conquer: We're going to use a dynamic programming approach, using\n\
    \  // a \"memo\" array to track the minimum sum of sub-arrays ending at each index\n\
    \  // in the input array.\n  var memo = [Int](repeating: 0, count: nums.count)\n\
    \  memo[0] = nums[0]\n  var min = memo[0]\n  // For each index in the array (i.e.\
    \ element), check if the sub-array sum\n  // starting from the previous element\
    \ is less than the current element. If so,\n  // use it. Otherwise, use the current\
    \ element.\n  for i in 1..<nums.count {\n    memo[i] = min(memo[i - 1], 0) + nums[i]\n\
    \    min = min(min, memo[i])\n  }\n  return min\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpy0rcyiou.swift:22:15: error: cannot call value of non-function\
    \ type 'Int'\n    memo[i] = min(memo[i - 1], 0) + nums[i]\n              ^\n/tmp/tmpy0rcyiou.swift:23:11:\
    \ error: cannot call value of non-function type 'Int'\n    min = min(min, memo[i])\n\
    \          ^\n"
  stdout: ''
  timestamp: 1660014080
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var result = Int.max\n    var sum = 0\n    for num in nums\
    \ {\n        sum += num\n        result = min(result, sum)\n        if sum > 0\
    \ {\n            sum = 0\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014080
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    guard nums.count > 0 else { return 0 }\n    var minSoFar\
    \ = nums[0]\n    var minEndingHere = nums[0]\n    for index in 1..<nums.count\
    \ {\n        minEndingHere = min(nums[index], minEndingHere + nums[index])\n \
    \       minSoFar = min(minSoFar, minEndingHere)\n    }\n    return minSoFar\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\n\
    assert(minSubArraySum(nums: [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums: [-9999999999999999])\
    \ == -9999999999999999)\nassert(minSubArraySum(nums: [0, 10, 20, 1000000]) ==\
    \ 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums: [10, 11, 13,\
    \ 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1, 0, -2]) == -33)\n\
    assert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums: [7]) ==\
    \ 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014080
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums\
    \ {\n        sum += num\n        minSum = min(minSum, sum)\n        if sum > 0\
    \ {\n            sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013945
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    guard nums.count > 0 else { return 0 }\n    var total =\
    \ 0\n    var sum = Int.max\n    for n in nums {\n        total += n\n        sum\
    \ = min(total, sum)\n        total = max(total, 0)\n    }\n    return sum\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\n\
    assert(minSubArraySum(nums: [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums: [-9999999999999999])\
    \ == -9999999999999999)\nassert(minSubArraySum(nums: [0, 10, 20, 1000000]) ==\
    \ 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums: [10, 11, 13,\
    \ 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1, 0, -2]) == -33)\n\
    assert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums: [7]) ==\
    \ 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpgg1cmcsy/tmpgg1cmcsy.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b66e8764c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b66e845bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b66e845b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b66e845a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgg1cmcsy                        0x0000564907d375ca <unavailable> + 5578

    5    libc.so.6                          0x00002b66e8950460 __libc_start_main +
    245

    6    tmpgg1cmcsy                        0x0000564907d37219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1660014080
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var currentMin = nums[0]\n    var maxTillIndex = nums[0]\n\
    \    for i in 1..<nums.count {\n        maxTillIndex = max(nums[i], maxTillIndex\
    \ + nums[i])\n        currentMin = min(currentMin, maxTillIndex)\n    }\n    return\
    \ currentMin\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpix7n_acy/tmpix7n_acy.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b93bb975c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b93bb66cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b93bb66c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b93bb66b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpix7n_acy                        0x000056126d6e163a <unavailable> + 5690

    5    libc.so.6                          0x00002b93bbb61460 __libc_start_main +
    245

    6    tmpix7n_acy                        0x000056126d6e1289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660014080
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var end = 0\n    var start = 0\n    var sum = 0\n    var\
    \ minSum = Int.max\n    \n    for i in 0..<nums.count {\n        sum += nums[i]\n\
    \        end += 1\n        \n        while sum >= 0 {\n            minSum = min(minSum,\
    \ sum)\n            sum -= nums[start]\n            start += 1\n        }\n  \
    \  }\n    \n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002acee3ba5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acee389c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002acee389c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002acee389c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002acee389bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002acee369be83 <unavailable> + 188035

    6    tmp2l2pz5qe                        0x00005600086cf1e2 <unavailable> + 8674

    7    tmp2l2pz5qe                        0x00005600086ce56c <unavailable> + 5484

    8    libc.so.6                          0x00002acee3d91460 __libc_start_main +
    245

    9    tmp2l2pz5qe                        0x00005600086ce239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1660014080
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var min = Int.max\n    var sum = 0\n    for num in nums\
    \ {\n        sum += num\n        if sum < min {\n            min = sum\n     \
    \   }\n        if sum > 0 {\n            sum = 0\n        }\n    }\n    return\
    \ min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums: [2,\
    \ 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums: [-9999999999999999])\
    \ == -9999999999999999)\nassert(minSubArraySum(nums: [0, 10, 20, 1000000]) ==\
    \ 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums: [10, 11, 13,\
    \ 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1, 0, -2]) == -33)\n\
    assert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums: [7]) ==\
    \ 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014079
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    guard nums.count > 0 else { return 0 }\n    var minSum\
    \ = nums[0]\n    var currSum = 0\n    for val in nums {\n        currSum += val\n\
    \        minSum = min(minSum, currSum)\n        currSum = max(currSum, 0)\n  \
    \  }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpr1kipwg0/tmpr1kipwg0.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3f3ab93c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3f3a88ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3f3a88a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3f3a8897b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr1kipwg0                        0x000056469aef461a <unavailable> + 5658

    5    libc.so.6                          0x00002b3f3ad7f460 __libc_start_main +
    245

    6    tmpr1kipwg0                        0x000056469aef4269 <unavailable> + 4713

    '
  stdout: ''
  timestamp: 1660014080
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    guard nums.count > 0 else { return 0 }\n    var minSum\
    \ = Int.max\n    var tmpSum = 0\n    for num in nums {\n        tmpSum += num\n\
    \        minSum = min(minSum, tmpSum)\n        tmpSum = max(tmpSum, 0)\n    }\n\
    \    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpskgeuw2_/tmpskgeuw2_.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6c33472c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6c33169b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6c33169988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6c331687b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpskgeuw2_                        0x00005568982025ca <unavailable> + 5578

    5    libc.so.6                          0x00002b6c3365e460 __libc_start_main +
    245

    6    tmpskgeuw2_                        0x0000556898202219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1660014080
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var min = Int.max\n    var sum = 0\n    var start = 0\n\
    \    var end = 0\n    while end < nums.count {\n        sum += nums[end]\n   \
    \     end += 1\n        while sum >= 0 {\n            min = min < sum ? min :\
    \ sum\n            sum -= nums[start]\n            start += 1\n        }\n   \
    \ }\n    return min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ae0d4b57c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae0d484e561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ae0d484e286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ae0d484e13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ae0d484dbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ae0d464de83 <unavailable> + 188035

    6    tmpld884xf1                        0x000055979a7d5e9a <unavailable> + 7834

    7    tmpld884xf1                        0x000055979a7d534c <unavailable> + 4940

    8    libc.so.6                          0x00002ae0d4d43460 __libc_start_main +
    245

    9    tmpld884xf1                        0x000055979a7d5019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1660014079
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    guard nums.count > 0 else { return 0 }\n    var minSum\
    \ = nums[0]\n    var tempSum = nums[0]\n    for i in 1..<nums.count {\n      \
    \  tempSum = tempSum + nums[i]\n        if nums[i] < tempSum {\n            tempSum\
    \ = nums[i]\n        }\n        if tempSum < minSum {\n            minSum = tempSum\n\
    \        }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014080
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var minSum = Int.max\n    var sum = 0\n    var minStartIndex\
    \ = 0\n    var minEndIndex = 0\n    var currentStartIndex = 0\n    for (i, num)\
    \ in nums.enumerated() {\n        sum += num\n        if sum < minSum {\n    \
    \        minSum = sum\n            minStartIndex = currentStartIndex\n       \
    \     minEndIndex = i\n        }\n        if sum > 0 {\n            sum = 0\n\
    \            currentStartIndex = i + 1\n        }\n    }\n    return minSum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\n\
    assert(minSubArraySum(nums: [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums: [-9999999999999999])\
    \ == -9999999999999999)\nassert(minSubArraySum(nums: [0, 10, 20, 1000000]) ==\
    \ 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums: [10, 11, 13,\
    \ 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1, 0, -2]) == -33)\n\
    assert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums: [7]) ==\
    \ 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014080
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    guard nums.count > 0 else { return 0 }\n    var minSum\
    \ = Int.max\n    var currentSum = 0\n    for num in nums {\n        currentSum\
    \ += num\n        minSum = min(minSum, currentSum)\n        currentSum = max(currentSum,\
    \ 0)\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmp2r0u8dvi/tmp2r0u8dvi.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af6ca750c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af6ca447b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af6ca447988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af6ca4467b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2r0u8dvi                        0x00005628100d55ca <unavailable> + 5578

    5    libc.so.6                          0x00002af6ca93c460 __libc_start_main +
    245

    6    tmp2r0u8dvi                        0x00005628100d5219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1660014080
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var min: Int = 0\n    var index = 0\n    var sum = 0\n\
    \    while index < nums.count {\n        sum += nums[index]\n        if sum <\
    \ min {\n            min = sum\n        }\n        index += 1\n    }\n    return\
    \ min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums: [2,\
    \ 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums: [-9999999999999999])\
    \ == -9999999999999999)\nassert(minSubArraySum(nums: [0, 10, 20, 1000000]) ==\
    \ 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums: [10, 11, 13,\
    \ 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1, 0, -2]) == -33)\n\
    assert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums: [7]) ==\
    \ 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpr_nhit05/tmpr_nhit05.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aae7ca76c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aae7c76db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aae7c76d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aae7c76c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr_nhit05                        0x000056539b01b3ca <unavailable> + 5066

    5    libc.so.6                          0x00002aae7cc62460 __libc_start_main +
    245

    6    tmpr_nhit05                        0x000056539b01b019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1660014080
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var currentSum = 0\n    var minSum = Int.max\n    for num\
    \ in nums {\n        currentSum += num\n        minSum = min(minSum, currentSum)\n\
    \        if currentSum > 0 {\n            currentSum = 0\n        }\n    }\n \
    \   return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014078
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var minimum = Int.max\n    var current = 0\n    for num\
    \ in nums {\n        current += num\n        if current < minimum {\n        \
    \    minimum = current\n        }\n        if current > 0 {\n            current\
    \ = 0\n        }\n    }\n    return minimum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014080
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums\
    \ {\n        sum += num\n        minSum = min(minSum, sum)\n        if sum > 0\
    \ {\n            sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013945
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    if nums.count == 0 { return 0 }\n    var result = nums[0]\n\
    \    var sum = 0\n    for num in nums {\n        sum += num\n        result =\
    \ min(result, sum)\n        if sum > 0 {\n            sum = 0\n        }\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014080
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    guard nums.count > 0 else { return -1 }\n    var minSum\
    \ = Int.max\n    var sum = 0\n    var j = 0\n    for i in 0..<nums.count {\n \
    \       while j < nums.count && sum < 0 {\n            sum += nums[j]\n      \
    \      j += 1\n        }\n        minSum = min(minSum, sum)\n        sum -= nums[i]\n\
    \    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmp33hb0lzv/tmp33hb0lzv.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b98838a9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b98835a0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b98835a0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b988359f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp33hb0lzv                        0x0000564705e745ea <unavailable> + 5610

    5    libc.so.6                          0x00002b9883a95460 __libc_start_main +
    245

    6    tmp33hb0lzv                        0x0000564705e74239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1660014081
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    if nums.count == 0 { return 0 }\n    var minSum = nums[0]\n\
    \    var currSum = 0\n    for num in nums {\n        currSum += num\n        minSum\
    \ = min(minSum, currSum)\n        currSum = max(currSum, 0)\n    }\n    return\
    \ minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpwj2jjl3g/tmpwj2jjl3g.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3686f9fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3686c96b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3686c96988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3686c957b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwj2jjl3g                        0x00005652dd21861a <unavailable> + 5658

    5    libc.so.6                          0x00002b368718b460 __libc_start_main +
    245

    6    tmpwj2jjl3g                        0x00005652dd218269 <unavailable> + 4713

    '
  stdout: ''
  timestamp: 1660014080
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    guard nums.count > 0 else { return 0 }\n    var result\
    \ = nums[0]\n    var currentSum = 0\n    for num in nums {\n        currentSum\
    \ += num\n        result = min(result, currentSum)\n        if currentSum > 0\
    \ {\n            currentSum = 0\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\n\
    assert(minSubArraySum(nums: [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums: [-9999999999999999])\
    \ == -9999999999999999)\nassert(minSubArraySum(nums: [0, 10, 20, 1000000]) ==\
    \ 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums: [10, 11, 13,\
    \ 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1, 0, -2]) == -33)\n\
    assert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums: [7]) ==\
    \ 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014080
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var minSum = Int.max\n    var currSum = 0\n    for num\
    \ in nums {\n        currSum += num\n        minSum = min(minSum, currSum)\n \
    \       currSum = max(currSum, 0)\n    }\n    return minSum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpsfgf07oi/tmpsfgf07oi.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b58d97f8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b58d94efb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b58d94ef988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b58d94ee7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsfgf07oi                        0x0000558b629c357a <unavailable> + 5498

    5    libc.so.6                          0x00002b58d99e4460 __libc_start_main +
    245

    6    tmpsfgf07oi                        0x0000558b629c31c9 <unavailable> + 4553

    '
  stdout: ''
  timestamp: 1660013945
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var minSum = nums[0]\n    var currSum = 0\n    for num\
    \ in nums {\n        currSum += num\n        if currSum < minSum {\n         \
    \   minSum = currSum\n        }\n        if currSum > 0 {\n            currSum\
    \ = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014081
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var currentMin = Int.max\n    var currentSum = 0\n    for\
    \ num in nums {\n        currentSum += num\n        currentMin = min(currentMin,\
    \ currentSum)\n        currentSum = max(currentSum, 0)\n    }\n    return currentMin\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\n\
    assert(minSubArraySum(nums: [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums: [-9999999999999999])\
    \ == -9999999999999999)\nassert(minSubArraySum(nums: [0, 10, 20, 1000000]) ==\
    \ 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums: [10, 11, 13,\
    \ 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1, 0, -2]) == -33)\n\
    assert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums: [7]) ==\
    \ 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmparpkcz79/tmparpkcz79.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b29190dec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2918dd5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2918dd5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2918dd47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmparpkcz79                        0x0000555f0697757a <unavailable> + 5498

    5    libc.so.6                          0x00002b29192ca460 __libc_start_main +
    245

    6    tmparpkcz79                        0x0000555f069771c9 <unavailable> + 4553

    '
  stdout: ''
  timestamp: 1660014081
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var minSum = Int.max\n    var sum = 0\n    for n in nums\
    \ {\n        sum += n\n        minSum = min(minSum, sum)\n        if sum > 0 {\n\
    \            sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014081
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    guard nums.count > 0 else { return 0 }\n    var currentSum\
    \ = 0\n    var minSum = Int.max\n    for num in nums {\n        currentSum +=\
    \ num\n        minSum = min(minSum, currentSum)\n        currentSum = max(currentSum,\
    \ 0)\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmp1tsmgqpu/tmp1tsmgqpu.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab06c8c5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab06c5bcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab06c5bc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab06c5bb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1tsmgqpu                        0x000056049c0a65ca <unavailable> + 5578

    5    libc.so.6                          0x00002ab06cab1460 __libc_start_main +
    245

    6    tmp1tsmgqpu                        0x000056049c0a6219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1660014081
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    guard nums.count > 0 else { return 0 }\n    var minSum\
    \ = nums[0]\n    var sum = 0\n    for num in nums {\n        sum += num\n    \
    \    minSum = min(minSum, sum)\n        if sum > 0 {\n            sum = 0\n  \
    \      }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014012
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var minSum = Int.max\n    var currentSum = 0\n    for num\
    \ in nums {\n        currentSum += num\n        minSum = min(minSum, currentSum)\n\
    \        currentSum = max(currentSum, 0)\n    }\n    return minSum\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\n\
    assert(minSubArraySum(nums: [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums: [-9999999999999999])\
    \ == -9999999999999999)\nassert(minSubArraySum(nums: [0, 10, 20, 1000000]) ==\
    \ 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums: [10, 11, 13,\
    \ 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1, 0, -2]) == -33)\n\
    assert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums: [7]) ==\
    \ 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpd_fcyijs/tmpd_fcyijs.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b59a0bbec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b59a08b5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b59a08b5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b59a08b47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd_fcyijs                        0x000056454fb3057a <unavailable> + 5498

    5    libc.so.6                          0x00002b59a0daa460 __libc_start_main +
    245

    6    tmpd_fcyijs                        0x000056454fb301c9 <unavailable> + 4553

    '
  stdout: ''
  timestamp: 1660013945
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var minSum = Int.max\n    var minTemp = 0\n    for num\
    \ in nums {\n        minTemp += num\n        if minTemp < minSum {\n         \
    \   minSum = minTemp\n        }\n        if minTemp > 0 {\n            minTemp\
    \ = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014081
