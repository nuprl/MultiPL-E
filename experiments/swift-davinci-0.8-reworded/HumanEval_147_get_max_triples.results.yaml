language: swift
name: HumanEval_147_get_max_triples
results:
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = [Int]()\n    for i in 1...n {\n        a.append(i * i\
    \ - i + 1)\n    }\n    var result = 0\n    for i in 0..<a.count {\n        for\
    \ j in (i + 1)..<a.count {\n            for k in (j + 1)..<a.count {\n       \
    \         if a[i] + a[j] + a[k] % 3 == 0 {\n                    result += 1\n\
    \                }\n            }\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'tmpaz1kjm5a/tmpaz1kjm5a.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af854f68c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af854c5fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af854c5f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af854c5e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpaz1kjm5a                        0x00005615d0bcd5d5 <unavailable> + 5589

    5    libc.so.6                          0x00002af855154460 __libc_start_main +
    245

    6    tmpaz1kjm5a                        0x00005615d0bcd289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660009244
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = 1\n    var b = 3\n    var c = 7\n    var count = 0\n \
    \   for _ in 1...n - 2 {\n        count += a + b + c == 3 * (c / 3) ? 1 : 0\n\
    \        a = b\n        b = c\n        c += 2\n    }\n    return count\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'tmpbt979ap3/tmpbt979ap3.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af727bb7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af7278aeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af7278ae988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af7278ad7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbt979ap3                        0x00005646ee825335 <unavailable> + 4917

    5    libc.so.6                          0x00002af727da3460 __libc_start_main +
    245

    6    tmpbt979ap3                        0x00005646ee824fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660009244
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var result = 0\n    for i in 1..<n {\n        for j in i + 1..<n\
    \ {\n            for k in j + 1..<n {\n                if (i * i - i + 1 + j *\
    \ j - j + 1 + k * k - k + 1) % 3 == 0 {\n                    result += 1\n   \
    \             }\n            }\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'tmp2puq841y/tmp2puq841y.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b059d2c3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b059cfbab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b059cfba988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b059cfb97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2puq841y                        0x00005561cb5d63b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b059d4af460 __libc_start_main +
    245

    6    tmp2puq841y                        0x00005561cb5d5fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660009244
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var maxTriples = 0\n    for i in 1..<n {\n        for j in (i\
    \ + 1)..<n {\n            for k in (j + 1)..<n {\n                let indexVal\
    \ = a[i] + a[j] + a[k]\n                if indexVal % 3 == 0 {\n             \
    \       maxTriples += 1\n                }\n            }\n        }\n    }\n\
    \    return maxTriples\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmp6wfes9mv.swift:17:32: error: cannot find 'a' in scope\n       \
    \         let indexVal = a[i] + a[j] + a[k]\n                               ^\n\
    /tmp/tmp6wfes9mv.swift:17:39: error: cannot find 'a' in scope\n              \
    \  let indexVal = a[i] + a[j] + a[k]\n                                      ^\n\
    /tmp/tmp6wfes9mv.swift:17:46: error: cannot find 'a' in scope\n              \
    \  let indexVal = a[i] + a[j] + a[k]\n                                       \
    \      ^\n"
  stdout: ''
  timestamp: 1660009244
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    guard n > 3 else { return 0 }\n    var result = 0\n    for i in\
    \ 1..<n-1 {\n        let iVal = i * i - i + 1\n        for j in i+1..<n {\n  \
    \          let jVal = j * j - j + 1\n            for k in j+1..<n+1 {\n      \
    \          let kVal = k * k - k + 1\n                if (iVal + jVal + kVal) %\
    \ 3 == 0 {\n                    result += 1\n                }\n            }\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009244
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var count = 0\n    var array = [Int]()\n    for i in 1...n {\n\
    \        array.append(i * i - i + 1)\n    }\n    for i in 0..<array.count {\n\
    \        for j in i+1..<array.count {\n            for k in j+1..<array.count\
    \ {\n                if (array[i] + array[j] + array[k]) % 3 == 0 {\n        \
    \            count += 1\n                }\n            }\n        }\n    }\n\
    \    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009244
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n\tif n < 3 {\n\t\treturn 0\n\t}\n\tvar result = 0\n\tfor i in 0..<n\
    \ {\n\t\tfor j in (i + 1)..<n {\n\t\t\tfor k in (j + 1)..<n {\n\t\t\t\tif i +\
    \ j + k % 3 == 0 {\n\t\t\t\t\tresult += 1\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\
    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'tmpunk5ijus/tmpunk5ijus.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac62e448c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac62e13fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac62e13f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac62e13e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpunk5ijus                        0x000055e0cd2f8335 <unavailable> + 4917

    5    libc.so.6                          0x00002ac62e634460 __libc_start_main +
    245

    6    tmpunk5ijus                        0x000055e0cd2f7fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660009244
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    let a = (1...n).map { $0 * $0 - $0 + 1 }\n    var result = 0\n\
    \    for i in 0..<a.count - 2 {\n        for j in i + 1..<a.count - 1 {\n    \
    \        for k in j + 1..<a.count {\n                if (a[i] + a[j] + a[k]) %\
    \ 3 == 0 {\n                    result += 1\n                }\n            }\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009244
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var temp = [Int](repeating: 0, count: n)\n    var cnt = 0\n  \
    \  var i = 1\n    while i <= n {\n        temp[i - 1] = i * i - i + 1\n      \
    \  i += 1\n    }\n    for i in 0..<n {\n        for j in i + 1..<n {\n       \
    \     for k in j + 1..<n {\n                if (temp[i] + temp[j] + temp[k]) %\
    \ 3 == 0 {\n                    cnt += 1\n                }\n            }\n \
    \       }\n    }\n    return cnt\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009244
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    if n < 3 {\n        return 0\n    }\n    var arr = [Int]()\n \
    \   for i in 1...n {\n        arr.append(i * i - i + 1)\n    }\n    var ans =\
    \ 0\n    for i in 0..<n - 2 {\n        for j in i + 1..<n - 1 {\n            for\
    \ k in j + 1..<n {\n                if (arr[i] + arr[j] + arr[k]) % 3 == 0 {\n\
    \                    ans += 1\n                }\n            }\n        }\n \
    \   }\n    return ans\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009244
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var res = 0\n    var a = Array(repeating: 0, count: n)\n    for\
    \ i in 1...n {\n        a[i - 1] = i * i - i + 1\n    }\n    for i in 0..<n -\
    \ 2 {\n        for j in i + 1..<n - 1 {\n            for k in j + 1..<n {\n  \
    \              if (a[i] + a[j] + a[k]) % 3 == 0 {\n                    res +=\
    \ 1\n                }\n            }\n        }\n    }\n    return res\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009244
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var pairs = 0\n    for i in 0..<n-1 {\n        for j in (i+1)..<n\
    \ {\n            for k in (j+1)..<n {\n                if ((n*n-n+1+i*i-i+1+j*j-j+1+k*k-k+1)\
    \ % 3 == 0) {\n                    pairs += 1\n                }\n           \
    \ }\n        }\n    }\n    return pairs\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'tmplhq56fhj/tmplhq56fhj.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b852bb5fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b852b856b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b852b856988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b852b8557b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplhq56fhj                        0x000055ce7f0e2335 <unavailable> + 4917

    5    libc.so.6                          0x00002b852bd4b460 __libc_start_main +
    245

    6    tmplhq56fhj                        0x000055ce7f0e1fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660009244
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    // Write your code here\n    var count = 0\n    for i in 1..<n\
    \ {\n        for j in i+1..<n {\n            for k in j+1..<n {\n            \
    \    if (i*i - i + 1 + j*j - j + 1 + k*k - k + 1) % 3 == 0 {\n               \
    \     count += 1\n                }\n            }\n        }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(get_max_triples(n: 5) ==\
    \ 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10) == 36)\n\
    assert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'tmpu8an_f9p/tmpu8an_f9p.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b389964bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3899342b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3899342988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b38993417b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu8an_f9p                        0x0000558ba4daf3b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b3899837460 __libc_start_main +
    245

    6    tmpu8an_f9p                        0x0000558ba4daefe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660009244
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    let a = get_array(n: n)\n    var result = 0\n    for i in 0...n-3\
    \ {\n        for j in i+1...n-2 {\n            for k in j+1...n-1 {\n        \
    \        if (a[i] + a[j] + a[k]) % 3 == 0 {\n                    result += 1\n\
    \                }\n            }\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpawlbdk73.swift:13:13: error: cannot find 'get_array' in scope\n\
    \    let a = get_array(n: n)\n            ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009244
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    let a = (1...n).map { $0 * $0 - $0 + 1 }\n    var out = 0\n  \
    \  for i in 0..<n - 2 {\n        for j in i + 1..<n - 1 {\n            for k in\
    \ j + 1..<n {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n          \
    \          out += 1\n                }\n            }\n        }\n    }\n    return\
    \ out\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(get_max_triples(n: 5) ==\
    \ 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10) == 36)\n\
    assert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009244
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var triples = 0\n    for i in 1...n {\n        for j in (i + 1)...n\
    \ {\n            for k in (j + 1)...n {\n                let elems = [i * i -\
    \ i + 1, j * j - j + 1, k * k - k + 1]\n                if elems.reduce(0, +)\
    \ % 3 == 0 {\n                    triples += 1\n                }\n          \
    \  }\n        }\n    }\n    return triples\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\n\
    assert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002add5f751c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002add5f448561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002add5f448286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002add5f44813c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002add5f447bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp1oi5frcf                        0x000055e5edad5a17 <unavailable> + 6679

    6    tmp1oi5frcf                        0x000055e5edad5448 <unavailable> + 5192

    7    libc.so.6                          0x00002add5f93d460 __libc_start_main +
    245

    8    tmp1oi5frcf                        0x000055e5edad5169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660009244
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var count = 0\n    for i in 1..<n {\n        for j in (i + 1)..<n\
    \ {\n            for k in (j + 1)..<n {\n                if(get_sum(a: i, b: j,\
    \ c: k) % 3 == 0) {\n                    count += 1\n                }\n     \
    \       }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\n\
    assert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpnu_52ag4.swift:17:20: error: cannot find 'get_sum' in scope\n \
    \               if(get_sum(a: i, b: j, c: k) % 3 == 0) {\n                   ^~~~~~~\n"
  stdout: ''
  timestamp: 1660009244
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var count = 0\n    for i in 1..<n-1 {\n        for j in i+1..<n\
    \ {\n            for k in j+1..<n+1 {\n                if (i*i - i + 1 + j*j -\
    \ j + 1 + k*k - k + 1) % 3 == 0 {\n                    count += 1\n          \
    \      }\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009244
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var total = 0\n    for i in 1..<n {\n        for j in (i + 1)..<n\
    \ {\n            for k in (j + 1)..<n {\n                if (a[i] + a[j] + a[k])\
    \ % 3 == 0 {\n                    total += 1\n                }\n            }\n\
    \        }\n    }\n    return total\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpaf_nslf5.swift:17:21: error: cannot find 'a' in scope\n       \
    \         if (a[i] + a[j] + a[k]) % 3 == 0 {\n                    ^\n/tmp/tmpaf_nslf5.swift:17:28:\
    \ error: cannot find 'a' in scope\n                if (a[i] + a[j] + a[k]) % 3\
    \ == 0 {\n                           ^\n/tmp/tmpaf_nslf5.swift:17:35: error: cannot\
    \ find 'a' in scope\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n    \
    \                              ^\n"
  stdout: ''
  timestamp: 1660009244
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    let list = (1...n).map({$0 * $0 - $0 + 1})\n    var result = 0\n\
    \    for i in 0..<list.count {\n        for j in i+1..<list.count {\n        \
    \    for k in j+1..<list.count {\n                if list[i] + list[j] + list[k]\
    \ % 3 == 0 {\n                    result += 1\n                }\n           \
    \ }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'tmprd3l9frw/tmprd3l9frw.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acc8a0bfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acc89db6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acc89db6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acc89db57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprd3l9frw                        0x0000557dca880515 <unavailable> + 5397

    5    libc.so.6                          0x00002acc8a2ab460 __libc_start_main +
    245

    6    tmprd3l9frw                        0x0000557dca8801c9 <unavailable> + 4553

    '
  stdout: ''
  timestamp: 1660009244
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var dp: [Int] = Array(repeating: 0, count: n)\n    dp[0] = 1\n\
    \    for i in 1..<n {\n        dp[i] = dp[i - 1] + ((2 * i + 1) / 3)\n    }\n\
    \    return dp[n - 1]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'tmp_a8surdb/tmp_a8surdb.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b07aaffdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b07aacf4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b07aacf4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b07aacf37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_a8surdb                        0x000055dfdfd92455 <unavailable> + 5205

    5    libc.so.6                          0x00002b07ab1e9460 __libc_start_main +
    245

    6    tmp_a8surdb                        0x000055dfdfd92109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660009244
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var counter = 0\n    var a = [Int]()\n    for i in 1...n {\n \
    \       a.append(i * i - i + 1)\n    }\n    for i in 0..<n {\n        for j in\
    \ i+1..<n {\n            for k in j+1..<n {\n                if a[i] + a[j] +\
    \ a[k] % 3 == 0 {\n                    counter += 1\n                }\n     \
    \       }\n        }\n    }\n    return counter\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\n\
    assert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'tmpdf7w5lx7/tmpdf7w5lx7.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b92e3545c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b92e323cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b92e323c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b92e323b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdf7w5lx7                        0x000055f69b00f535 <unavailable> + 5429

    5    libc.so.6                          0x00002b92e3731460 __libc_start_main +
    245

    6    tmpdf7w5lx7                        0x000055f69b00f1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1660009244
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var triples = 0\n    var sum = 0\n    var a = Array(1...n)\n \
    \   for i in 0..<a.count {\n        a[i] = a[i] * a[i] - a[i] + 1\n    }\n   \
    \ for i in 0..<a.count {\n        for j in i + 1..<a.count {\n            for\
    \ k in j + 1..<a.count {\n                sum = a[i] + a[j] + a[k]\n         \
    \       if sum % 3 == 0 {\n                    triples += 1\n                }\n\
    \            }\n        }\n    }\n    return triples\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6)\
    \ == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009244
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'tmpkl1umqu9/tmpkl1umqu9.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b73cbd63c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b73cba5ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b73cba5a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b73cba597b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkl1umqu9                        0x00005620479411b5 <unavailable> + 4533

    5    libc.so.6                          0x00002b73cbf4f460 __libc_start_main +
    245

    6    tmpkl1umqu9                        0x0000562047940e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660009245
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var tripleCount = 0\n    var a = [Int]()\n    for i in 1...n {\n\
    \        a.append(i * i - i + 1)\n    }\n    for i in 0..<n - 2 {\n        for\
    \ j in i + 1..<n - 1 {\n            for k in j + 1..<n {\n                if (a[i]\
    \ + a[j] + a[k]) % 3 == 0 {\n                    tripleCount += 1\n          \
    \      }\n            }\n        }\n    }\n    return tripleCount\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009245
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    if n < 3 {\n        return 0\n    }\n    var a: [Int] = []\n \
    \   for i in 1...n {\n        a.append(i * i - i + 1)\n    }\n    var count =\
    \ 0\n    for i in 0..<a.count - 2 {\n        for j in i + 1..<a.count - 1 {\n\
    \            for k in j + 1..<a.count {\n                if (a[i] + a[j] + a[k])\
    \ % 3 == 0 {\n                    count += 1\n                }\n            }\n\
    \        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009245
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'tmpkl1umqu9/tmpkl1umqu9.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b73cbd63c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b73cba5ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b73cba5a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b73cba597b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkl1umqu9                        0x00005620479411b5 <unavailable> + 4533

    5    libc.so.6                          0x00002b73cbf4f460 __libc_start_main +
    245

    6    tmpkl1umqu9                        0x0000562047940e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660009245
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    // When n == 1, there are no triples.\n    guard n > 1 else {\
    \ return 0 }\n    // When n == 2, there are no triples.\n    guard n > 2 else\
    \ { return 0 }\n    // When n == 3, there is one triple.\n    guard n > 3 else\
    \ { return 1 }\n    // If n > 3, then the triple is (a[1], a[n-1], a[n])\n   \
    \ return 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(get_max_triples(n: 5)\
    \ == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10) ==\
    \ 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'tmpd5ihwm45/tmpd5ihwm45.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3a87652c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3a87349b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3a87349988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3a873487b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd5ihwm45                        0x000055c3b5c32230 <unavailable> + 4656

    5    libc.so.6                          0x00002b3a8783e460 __libc_start_main +
    245

    6    tmpd5ihwm45                        0x000055c3b5c31e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660009245
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var output = 0\n    for index in 1..<n-1 {\n        let current\
    \ = index * index - index + 1\n        if current % 3 == 0 {\n            output\
    \ += 1\n        }\n    }\n    return output\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\n\
    assert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'tmp794nva9x/tmp794nva9x.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aec70d28c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aec70a1fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aec70a1f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aec70a1e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp794nva9x                        0x000055c13819d3b0 <unavailable> + 5040

    5    libc.so.6                          0x00002aec70f14460 __libc_start_main +
    245

    6    tmp794nva9x                        0x000055c13819cfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660009245
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var result = 0\n    for i in 1...n {\n        for j in (i + 1)...n\
    \ {\n            for k in (j + 1)...n {\n                if isMultiple(lhs: a[i]\
    \ + a[j] + a[k], 3) {\n                    result += 1\n                }\n  \
    \          }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6)\
    \ == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpgw5qz96n.swift:17:20: error: cannot find 'isMultiple' in scope\n\
    \                if isMultiple(lhs: a[i] + a[j] + a[k], 3) {\n               \
    \    ^~~~~~~~~~\n/tmp/tmpgw5qz96n.swift:17:36: error: cannot find 'a' in scope\n\
    \                if isMultiple(lhs: a[i] + a[j] + a[k], 3) {\n               \
    \                    ^\n/tmp/tmpgw5qz96n.swift:17:43: error: cannot find 'a' in\
    \ scope\n                if isMultiple(lhs: a[i] + a[j] + a[k], 3) {\n       \
    \                                   ^\n/tmp/tmpgw5qz96n.swift:17:50: error: cannot\
    \ find 'a' in scope\n                if isMultiple(lhs: a[i] + a[j] + a[k], 3)\
    \ {\n                                                 ^\n"
  stdout: ''
  timestamp: 1660009245
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var result = 0\n    for i in 1..<n-1 {\n        for j in i+1..<n\
    \ {\n            for k in j+1..<n+1 {\n                let a = (i * i - i + 1)\n\
    \                let b = (j * j - j + 1)\n                let c = (k * k - k +\
    \ 1)\n                if (a + b + c) % 3 == 0 {\n                    result +=\
    \ 1\n                }\n            }\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009245
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    let array = (1...n).map { $0 * $0 - $0 + 1 }\n    var counter\
    \ = 0\n    for i in 0..<n {\n        for j in (i + 1)..<n {\n            for k\
    \ in (j + 1)..<n {\n                if array[i] + array[j] + array[k] % 3 == 0\
    \ {\n                    counter += 1\n                }\n            }\n    \
    \    }\n    }\n    return counter\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'tmp_7elu1hn/tmp_7elu1hn.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b07e5addc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b07e57d4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b07e57d4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b07e57d37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_7elu1hn                        0x0000555d7e7cd4c5 <unavailable> + 5317

    5    libc.so.6                          0x00002b07e5cc9460 __libc_start_main +
    245

    6    tmp_7elu1hn                        0x0000555d7e7cd179 <unavailable> + 4473

    '
  stdout: ''
  timestamp: 1660009245
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var triples = 0\n    var a = [Int]()\n    for i in 1...n {\n \
    \       a.append(i * i - i + 1)\n    }\n    for i in 0..<n - 2 {\n        for\
    \ j in i + 1..<n - 1 {\n            for k in j + 1..<n {\n                if (a[i]\
    \ + a[j] + a[k]) % 3 == 0 {\n                    triples += 1\n              \
    \  }\n            }\n        }\n    }\n    return triples\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009245
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    return (1...n)\n        .map { i in i * i - i + 1 }\n        .filter\
    \ { $0 % 3 == 0 }\n        .reduce(0) { acc, cur in\n            acc + (0..<cur).filter\
    \ { (cur + $0) % 3 == 0 }.count\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'tmpl6nv7cb2/tmpl6nv7cb2.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b36d3589c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b36d3280b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b36d3280988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b36d327f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpl6nv7cb2                        0x000055ecb6cec5c5 <unavailable> + 5573

    5    libc.so.6                          0x00002b36d3775460 __libc_start_main +
    245

    6    tmpl6nv7cb2                        0x000055ecb6cec279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1660009246
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var result = 0\n    for i in 1..<n {\n        for j in (i + 1)..<n\
    \ {\n            if a[i] + a[j] > a[n] {\n                break\n            }\n\
    \            if a[i] + a[j] % 3 == 0 {\n                result += 1\n        \
    \    }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\n\
    assert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmp9on7v1_5.swift:16:16: error: cannot find 'a' in scope\n       \
    \     if a[i] + a[j] > a[n] {\n               ^\n/tmp/tmp9on7v1_5.swift:16:23:\
    \ error: cannot find 'a' in scope\n            if a[i] + a[j] > a[n] {\n     \
    \                 ^\n/tmp/tmp9on7v1_5.swift:16:30: error: cannot find 'a' in scope\n\
    \            if a[i] + a[j] > a[n] {\n                             ^\n/tmp/tmp9on7v1_5.swift:19:16:\
    \ error: cannot find 'a' in scope\n            if a[i] + a[j] % 3 == 0 {\n   \
    \            ^\n/tmp/tmp9on7v1_5.swift:19:23: error: cannot find 'a' in scope\n\
    \            if a[i] + a[j] % 3 == 0 {\n                      ^\n"
  stdout: ''
  timestamp: 1660009245
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    let nums = (1...n).map({ $0 * $0 - $0 + 1 })\n    var count =\
    \ 0\n    for i in 0..<n - 2 {\n        for j in i + 1..<n - 1 {\n            for\
    \ k in j + 1..<n {\n                if (nums[i] + nums[j] + nums[k]) % 3 == 0\
    \ {\n                    count += 1\n                }\n            }\n      \
    \  }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009245
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    return [1, 1, 2, 3, 3, 4, 5, 5, 6, 7, 7, 8, 9, 9, 10, 11, 11,\
    \ 12, 13, 13, 14, 15, 15, 16, 17, 17, 18, 19, 19, 20, 21, 21, 22, 23, 23, 24,\
    \ 25, 25, 26, 27, 27, 28, 29, 29, 30, 31, 31, 32, 33, 33, 34, 35, 35, 36, 37,\
    \ 37, 38, 39, 39, 40, 41, 41, 42, 43, 43, 44, 45, 45, 46, 47, 47, 48, 49, 49,\
    \ 50, 51, 51, 52, 53, 53, 54, 55, 55, 56, 57, 57, 58, 59, 59, 60, 61, 61, 62,\
    \ 63, 63, 64, 65, 65, 66, 67, 67, 68, 69, 69, 70, 71, 71, 72, 73, 73, 74, 75,\
    \ 75, 76, 77, 77, 78, 79, 79, 80, 81, 81, 82, 83, 83, 84, 85, 85, 86, 87, 87,\
    \ 88, 89, 89, 90, 91, 91, 92, 93, 93, 94, 95, 95, 96, 97, 97, 98, 99, 99, 100,\
    \ 101, 101, 102, 103, 103, 104, 105, 105, 106, 107, 107, 108, 109, 109, 110, 111,\
    \ 111, 112, 113, 113, 114, 115, 115, 116, 117, 117, 118, 119, 119, 120, 121, 121,\
    \ 122, 123, 123, 124, 125, 125, 126, 127, 127, 128, 129, 129, 130, 131, 131, 132,\
    \ 133, 133, 134, 135, 135, 136, 137, 137, 138, 139, 139, 140, 141, 141, 142, 143,\
    \ 143, 144, 145, 145, 146, 147, 147, 148, 149, 149, 150, 151, 151, 152, 153, 153,\
    \ 154, 155, 155, 156, 157, 157, 158, 159, 159, 160, 161, 161, 162, 163, 163, 164,\
    \ 165, 165, 166, 167, 167, 168, 169, 169,\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\n\
    assert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpek1190gt.swift:14:1: error: expected expression in container literal\n\
    }\n^\n/tmp/tmpek1190gt.swift:13:12: error: cannot convert return expression of\
    \ type '[Int]' to return type 'Int'\n    return [1, 1, 2, 3, 3, 4, 5, 5, 6, 7,\
    \ 7, 8, 9, 9, 10, 11, 11, 12, 13, 13, 14, 15, 15, 16, 17, 17, 18, 19, 19, 20,\
    \ 21, 21, 22, 23, 23, 24, 25, 25, 26, 27, 27, 28, 29, 29, 30, 31, 31, 32, 33,\
    \ 33, 34, 35, 35, 36, 37, 37, 38, 39, 39, 40, 41, 41, 42, 43, 43, 44, 45, 45,\
    \ 46, 47, 47, 48, 49, 49, 50, 51, 51, 52, 53, 53, 54, 55, 55, 56, 57, 57, 58,\
    \ 59, 59, 60, 61, 61, 62, 63, 63, 64, 65, 65, 66, 67, 67, 68, 69, 69, 70, 71,\
    \ 71, 72, 73, 73, 74, 75, 75, 76, 77, 77, 78, 79, 79, 80, 81, 81, 82, 83, 83,\
    \ 84, 85, 85, 86, 87, 87, 88, 89, 89, 90, 91, 91, 92, 93, 93, 94, 95, 95, 96,\
    \ 97, 97, 98, 99, 99, 100, 101, 101, 102, 103, 103, 104, 105, 105, 106, 107, 107,\
    \ 108, 109, 109, 110, 111, 111, 112, 113, 113, 114, 115, 115, 116, 117, 117, 118,\
    \ 119, 119, 120, 121, 121, 122, 123, 123, 124, 125, 125, 126, 127, 127, 128, 129,\
    \ 129, 130, 131, 131, 132, 133, 133, 134, 135, 135, 136, 137, 137, 138, 139, 139,\
    \ 140, 141, 141, 142, 143, 143, 144, 145, 145, 146, 147, 147, 148, 149, 149, 150,\
    \ 151, 151, 152, 153, 153, 154, 155, 155, 156, 157, 157, 158, 159, 159, 160, 161,\
    \ 161, 162, 163, 163, 164, 165, 165, 166, 167, 167, 168, 169, 169,\n         \
    \  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
  stdout: ''
  timestamp: 1660009245
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var t = 0\n    var count = 0\n    var a = Array(1...n)\n    var\
    \ arr = a.map { $0 * $0 - $0 + 1 }\n    var sums = Array(repeating: 0, count:\
    \ arr.count)\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n\
    \            sums[j] = arr[i] + arr[j]\n        }\n        for k in 0..<sums.count\
    \ {\n            if (sums[k] % 3 == 0) {\n                t += 1\n           \
    \ }\n        }\n    }\n    return t\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'tmp2cu91zjj/tmp2cu91zjj.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b08e3921c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b08e3618b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b08e3618988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b08e36177b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2cu91zjj                        0x0000564d377cb6d5 <unavailable> + 5845

    5    libc.so.6                          0x00002b08e3b0d460 __libc_start_main +
    245

    6    tmp2cu91zjj                        0x0000564d377cb389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1660009245
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    if n < 3 {\n        return 0\n    }\n\n    let is_multiple_of_3\
    \ = { (x: Int) -> Bool in\n        x % 3 == 0\n    }\n\n    var triples: [Int]\
    \ = []\n    for i in 1...n {\n        for j in i+1...n {\n            for k in\
    \ j+1...n {\n                let a_i = i * i - i + 1\n                let a_j\
    \ = j * j - j + 1\n                let a_k = k * k - k + 1\n                if\
    \ is_multiple_of_3(a_i + a_j + a_k) {\n                    triples.append([a_i,\
    \ a_j, a_k])\n                }\n            }\n        }\n    }\n\n    return\
    \ triples.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmp28kgusz_.swift:29:29: error: no exact matches in call to instance\
    \ method 'append'\n                    triples.append([a_i, a_j, a_k])\n     \
    \                       ^\nSwift.Array:7:37: note: incorrect labels for candidate\
    \ (have: '(_:)', expected: '(contentsOf:)')\n    @inlinable public mutating func\
    \ append<S>(contentsOf newElements: __owned S) where Element == S.Element, S :\
    \ Sequence\n                                    ^\nSwift.RangeReplaceableCollection:5:37:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(contentsOf:)')\n\
    \    @inlinable public mutating func append<S>(contentsOf newElements: __owned\
    \ S) where S : Sequence, Self.Element == S.Element\n                         \
    \           ^\n"
  stdout: ''
  timestamp: 1660009245
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var triples = 0\n    var a = [Int]()\n    for i in 1...n {\n \
    \       a.append(i * i - i + 1)\n    }\n    for i in 0..<a.count {\n        for\
    \ j in i+1..<a.count {\n            for k in j+1..<a.count {\n               \
    \ if a[i] + a[j] + a[k] % 3 == 0 {\n                    triples += 1\n       \
    \         }\n            }\n        }\n    }\n    return triples\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'tmpom3htz8h/tmpom3htz8h.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b74f1414c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b74f110bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b74f110b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b74f110a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpom3htz8h                        0x00005576b61545d5 <unavailable> + 5589

    5    libc.so.6                          0x00002b74f1600460 __libc_start_main +
    245

    6    tmpom3htz8h                        0x00005576b6154289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660009245
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var result = 0\n    var i = 1\n    while i < n {\n        var\
    \ j = i + 1\n        while j < n {\n            var k = j + 1\n            while\
    \ k < n {\n                let a_i = i * i - i + 1\n                let a_j =\
    \ j * j - j + 1\n                let a_k = k * k - k + 1\n                if (a_i\
    \ + a_j + a_k) % 3 == 0 {\n                    result += 1\n                }\n\
    \                k += 1\n            }\n            j += 1\n        }\n      \
    \  i += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'tmpiwio54xn/tmpiwio54xn.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8207427c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b820711eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b820711e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b820711d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpiwio54xn                        0x0000561a4c3482c0 <unavailable> + 4800

    5    libc.so.6                          0x00002b8207613460 __libc_start_main +
    245

    6    tmpiwio54xn                        0x0000561a4c347ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1660009245
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var res = 0\n    var table = Array(repeating: 0, count: 3)\n \
    \   for x in 1...n {\n        let x_val = x * x - x + 1\n        table[x_val %\
    \ 3] += 1\n    }\n    res += (table[0] * (table[0] - 1) * (table[0] - 2)) / 6\n\
    \    res += (table[1] * (table[1] - 1) * (table[2])) / 2\n    res += (table[2]\
    \ * (table[2] - 1) * (table[1])) / 2\n    return res\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6)\
    \ == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'tmpm9iyur30/tmpm9iyur30.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9bed5c0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9bed2b7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9bed2b7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9bed2b67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpm9iyur30                        0x00005573da91c455 <unavailable> + 5205

    5    libc.so.6                          0x00002b9bed7ac460 __libc_start_main +
    245

    6    tmpm9iyur30                        0x00005573da91c109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660009245
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = [Int]()\n    for i in 1...n {\n        a.append(i * i\
    \ - i + 1)\n    }\n    var counter = 0\n    for i in 0..<n - 2 {\n        for\
    \ j in i + 1..<n - 1 {\n            for k in j + 1..<n {\n                if (a[i]\
    \ + a[j] + a[k]) % 3 == 0 {\n                    counter += 1\n              \
    \  }\n            }\n        }\n    }\n    return counter\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009245
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    if n < 3 {\n        return 0\n    }\n    var a = [Int]()\n   \
    \ for i in 1...n {\n        a.append(i * i - i + 1)\n    }\n    var result = 0\n\
    \    for i in 0..<(n - 2) {\n        for j in (i + 1)..<(n - 1) {\n          \
    \  if (a[i] + a[j]) % 3 == 0 {\n                for k in (j + 1)..<n {\n     \
    \               if (a[i] + a[j] + a[k]) % 3 == 0 {\n                        result\
    \ += 1\n                    }\n                }\n            }\n        }\n \
    \   }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'tmpysntpm1k/tmpysntpm1k.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9745379c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9745070b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9745070988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b974506f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpysntpm1k                        0x000055e167ce5535 <unavailable> + 5429

    5    libc.so.6                          0x00002b9745565460 __libc_start_main +
    245

    6    tmpysntpm1k                        0x000055e167ce51e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1660009245
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    // =============================================================\n\
    \    // Implement your code below.\n    // Return the number of triples.\n   \
    \ // =============================================================\n    var result\
    \ = 0\n    for i in 1..<n {\n        let ai = i * i - i + 1\n        if ai % 3\
    \ == 0 {\n            for j in i + 1..<n {\n                let aj = j * j - j\
    \ + 1\n                if (ai + aj) % 3 == 0 {\n                    result +=\
    \ n - j\n                }\n            }\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'tmpuugfrkn2/tmpuugfrkn2.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7046139c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7045e30b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7045e30988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7045e2f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuugfrkn2                        0x0000563fe83da335 <unavailable> + 4917

    5    libc.so.6                          0x00002b7046325460 __libc_start_main +
    245

    6    tmpuugfrkn2                        0x0000563fe83d9fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660009245
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var count = 0\n    for i in 1..<n-1 {\n        for j in i+1..<n\
    \ {\n            for k in j+1..<n+1 {\n                if (i*i - i + 1 + j*j -\
    \ j + 1 + k*k - k + 1) % 3 == 0 {\n                    count += 1\n          \
    \      }\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009244
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = [Int]()\n    for i in 1...n {\n        a.append(i * i\
    \ - i + 1)\n    }\n    var sum = 0\n    for i in 0..<a.count {\n        for j\
    \ in i + 1..<a.count {\n            for k in j + 1..<a.count {\n             \
    \   if (a[i] + a[j] + a[k]) % 3 == 0 {\n                    sum += 1\n       \
    \         }\n            }\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009245
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    // Write your code here\n    var array = [Int]()\n    var count\
    \ = 0\n    for i in 1...n {\n        let item = i * i - i + 1\n        array.append(item)\n\
    \    }\n    for i in 0..<n {\n        for j in (i + 1)..<n {\n            for\
    \ k in (j + 1)..<n {\n                if array[i] + array[j] + array[k] % 3 ==\
    \ 0 {\n                    count += 1\n                }\n            }\n    \
    \    }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'tmp59vjhv0j/tmp59vjhv0j.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b492d3f3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b492d0eab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b492d0ea988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b492d0e97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp59vjhv0j                        0x000055d4fd369535 <unavailable> + 5429

    5    libc.so.6                          0x00002b492d5df460 __libc_start_main +
    245

    6    tmp59vjhv0j                        0x000055d4fd3691e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1660009245
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n\treturn get_max_triples_recursion(n: n, i: 1, counter: 0)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpmziw5b_c.swift:13:9: error: cannot find 'get_max_triples_recursion'\
    \ in scope\n        return get_max_triples_recursion(n: n, i: 1, counter: 0)\n\
    \               ^~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009245
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var count = 0\n    for i in 1..<n {\n        for j in (i + 1)..<n\
    \ {\n            for k in (j + 1)..<n {\n                if (i * i - i + 1 + j\
    \ * j - j + 1 + k * k - k + 1) % 3 == 0 {\n                    count += 1\n  \
    \              }\n            }\n        }\n    }\n    return count\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'tmp4lhbsszl/tmp4lhbsszl.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af20054dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af200244b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af200244988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af2002437b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4lhbsszl                        0x000055b524ec43b0 <unavailable> + 5040

    5    libc.so.6                          0x00002af200739460 __libc_start_main +
    245

    6    tmp4lhbsszl                        0x000055b524ec3fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660009245
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    if n < 3 {\n        return 0\n    }\n    var a = [Int]()\n   \
    \ for i in 1...n {\n        a.append(i * i - i + 1)\n    }\n    var maxTriples\
    \ = 0\n    for i in 0..<a.count - 2 {\n        for j in i + 1..<a.count - 1 {\n\
    \            if (a[i] + a[j]) % 3 == 0 {\n                maxTriples += 1\n  \
    \          }\n        }\n    }\n    return maxTriples\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6)\
    \ == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'tmpet46g522/tmpet46g522.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b08a6412c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b08a6109b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b08a6109988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b08a61087b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpet46g522                        0x0000563c2e9bf5d5 <unavailable> + 5589

    5    libc.so.6                          0x00002b08a65fe460 __libc_start_main +
    245

    6    tmpet46g522                        0x0000563c2e9bf289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660009245
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var ans = 0\n    for i in 0..<n-2 {\n        for j in i+1..<n-1\
    \ {\n            if ((i+1)*(i+1) + (j+1)*(j+1) - 2*(i+1)*(j+1) + 1) % 3 == 0 {\n\
    \                ans += 1\n            }\n        }\n    }\n    return ans\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'tmpsy71wndb/tmpsy71wndb.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1728a18c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b172870fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b172870f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b172870e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsy71wndb                        0x0000557c76500335 <unavailable> + 4917

    5    libc.so.6                          0x00002b1728c04460 __libc_start_main +
    245

    6    tmpsy71wndb                        0x0000557c764fffe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660009245
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var m = 0\n    for i in 1..<n-1 {\n        let a = i * i - i +\
    \ 1\n        if a % 3 == 0 {\n            m += 1\n        }\n    }\n    return\
    \ m\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(get_max_triples(n: 5) == 1)\n\
    assert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n:\
    \ 100) == 53361)"
  status: Exception
  stderr: 'tmpa_z0vqf4/tmpa_z0vqf4.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab5e6a60c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab5e6757b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab5e6757988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab5e67567b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpa_z0vqf4                        0x00005618ccca73b0 <unavailable> + 5040

    5    libc.so.6                          0x00002ab5e6c4c460 __libc_start_main +
    245

    6    tmpa_z0vqf4                        0x00005618ccca6fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660009245
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = [Int]()\n    var valid_triples = 0\n    for i in 1...n\
    \ {\n        a.append(i * i - i + 1)\n    }\n    for i in 0..<n - 2 {\n      \
    \  for j in i + 1..<n - 1 {\n            for k in j + 1..<n {\n              \
    \  if (a[i] + a[j] + a[k]) % 3 == 0 {\n                    valid_triples += 1\n\
    \                }\n            }\n        }\n    }\n    return valid_triples\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009245
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var result = 0\n    var a = [Int]()\n    for i in 1...n {\n  \
    \      a.append(i * i - i + 1)\n    }\n    for i in 0..<a.count - 2 {\n      \
    \  for j in i + 1..<a.count - 1 {\n            for k in j + 1..<a.count {\n  \
    \              if (a[i] + a[j] + a[k]) % 3 == 0 {\n                    result\
    \ += 1\n                }\n            }\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009245
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var result = 0\n    var numbers = [Int]()\n    for i in 1...n\
    \ {\n        numbers.append(i * i - i + 1)\n    }\n    for i in 0..<numbers.count\
    \ - 2 {\n        for j in i + 1..<numbers.count - 1 {\n            for k in j\
    \ + 1..<numbers.count {\n                if (numbers[i] + numbers[j] + numbers[k])\
    \ % 3 == 0 {\n                    result += 1\n                }\n           \
    \ }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009245
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var sum = 0\n    var count = 0\n    for i in 1..<n {\n       \
    \ sum += i * i - i + 1\n        if sum % 3 == 0 {\n            count += 1\n  \
    \      }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'tmp798nevms/tmp798nevms.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac26e41ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac26e111b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac26e111988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac26e1107b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp798nevms                        0x000055e1ac6d13b0 <unavailable> + 5040

    5    libc.so.6                          0x00002ac26e606460 __libc_start_main +
    245

    6    tmp798nevms                        0x000055e1ac6d0fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660009245
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var count = 0\n    var a = Array(1...n)\n    var i = 0\n    while\
    \ i < a.count {\n        a[i] = a[i] * a[i] - a[i] + 1\n        i += 1\n    }\n\
    \    i = 0\n    while i < a.count - 2 {\n        var j = i + 1\n        while\
    \ j < a.count - 1 {\n            var k = j + 1\n            while k < a.count\
    \ {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n                    count\
    \ += 1\n                }\n                k += 1\n            }\n           \
    \ j += 1\n        }\n        i += 1\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009245
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var tripleCount = 0\n    var range = 1...n\n    range.forEach\
    \ { i in\n        let a = i * i - i + 1\n        if a % 3 == 0 {\n           \
    \ tripleCount += 1\n        }\n    }\n    return tripleCount\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'tmpz4wdel16/tmpz4wdel16.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b43b7be9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b43b78e0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b43b78e0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b43b78df7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz4wdel16                        0x000055d2ffccd375 <unavailable> + 4981

    5    libc.so.6                          0x00002b43b7dd5460 __libc_start_main +
    245

    6    tmpz4wdel16                        0x000055d2ffccd029 <unavailable> + 4137

    '
  stdout: ''
  timestamp: 1660009245
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var result = 0\n    var base = Array(repeating: 0, count: n +\
    \ 1)\n    for i in 1...n {\n        base[i] = i * i - i + 1\n    }\n    for i\
    \ in 1..<n - 1 {\n        for j in i + 1..<n {\n            for k in j + 1...n\
    \ {\n                if base[i] + base[j] + base[k] % 3 == 0 {\n             \
    \       result += 1\n                }\n            }\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(get_max_triples(n: 5)\
    \ == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10) ==\
    \ 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'tmpkhkneugn/tmpkhkneugn.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b85fb35ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b85fb051b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b85fb051988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b85fb0507b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkhkneugn                        0x000055d837e96545 <unavailable> + 5445

    5    libc.so.6                          0x00002b85fb546460 __libc_start_main +
    245

    6    tmpkhkneugn                        0x000055d837e961f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1660009245
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var count = 0\n    let array = (1...n).map { $0 * $0 - $0 + 1\
    \ }\n    for i in 0..<array.count - 2 {\n        for j in i + 1..<array.count\
    \ - 1 {\n            for k in j + 1..<array.count {\n                if array[i]\
    \ + array[j] + array[k] % 3 == 0 {\n                    count += 1\n         \
    \       }\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'tmp1d_3so7z/tmp1d_3so7z.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9fd1c07c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9fd18feb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9fd18fe988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9fd18fd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1d_3so7z                        0x00005620a5913515 <unavailable> + 5397

    5    libc.so.6                          0x00002b9fd1df3460 __libc_start_main +
    245

    6    tmp1d_3so7z                        0x00005620a59131c9 <unavailable> + 4553

    '
  stdout: ''
  timestamp: 1660009245
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var triples = 0\n    for index in 1...n {\n        let number\
    \ = (index * index) - index + 1\n        triples += number % 3 == 0 ? 1 : 0\n\
    \    }\n    return triples\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'tmp1l5zgiz6/tmp1l5zgiz6.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad838e91c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad838b88b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad838b88988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad838b877b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1l5zgiz6                        0x00005585d8e73335 <unavailable> + 4917

    5    libc.so.6                          0x00002ad83907d460 __libc_start_main +
    245

    6    tmp1l5zgiz6                        0x00005585d8e72fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660009245
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    return get_max_triples(n: n, i: 1, j: 2, k: 3, count: 0)\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmp94gd0022.swift:13:27: error: extra arguments at positions #2, #3,\
    \ #4, #5 in call\n    return get_max_triples(n: n, i: 1, j: 2, k: 3, count: 0)\n\
    \                          ^\n/tmp/tmp94gd0022.swift:12:6: note: 'get_max_triples(n:)'\
    \ declared here\nfunc get_max_triples(n: Int) -> Int {\n     ^\n"
  stdout: ''
  timestamp: 1660009245
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    let a = (1...n).map { i in i * i - i + 1 }\n    var result = 0\n\
    \    for i in 0..<a.count {\n        for j in (i + 1)..<a.count {\n          \
    \  for k in (j + 1)..<a.count {\n                if (a[i] + a[j] + a[k]) % 3 ==\
    \ 0 {\n                    result += 1\n                }\n            }\n   \
    \     }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009245
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var sum = 0\n    for i in 1..<n {\n        for j in i..<n {\n\
    \            for k in j..<n {\n                if sum_is_multiple_of_3(i: i, j:\
    \ j, k: k) {\n                    sum += 1\n                }\n            }\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmp7xxowbxv.swift:17:20: error: cannot find 'sum_is_multiple_of_3'\
    \ in scope\n                if sum_is_multiple_of_3(i: i, j: j, k: k) {\n    \
    \               ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009245
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    // Check the input\n    guard n > 0 else { return 0 }\n    guard\
    \ n > 2 else { return 0 }\n    \n    // Function that returns what is required\n\
    \    func triple(n: Int) -> Int {\n        return n * n - n + 1\n    }\n    \n\
    \    // Create and populate the array.\n    var arr = [Int]()\n    for idx in\
    \ 1...n {\n        arr.append(triple(n: idx))\n    }\n    \n    // Init the counter.\n\
    \    var cnt = 0\n    \n    // Loop through the array\n    for idx in 0..<arr.count\
    \ {\n        for idx2 in idx + 1..<arr.count {\n            for idx3 in idx2 +\
    \ 1..<arr.count {\n                // Check for the condition and increment counter\n\
    \                let tmp = arr[idx] + arr[idx2] + arr[idx3]\n                if\
    \ tmp % 3 == 0 {\n                    cnt += 1\n                }\n          \
    \  }\n        }\n    }\n    \n    return cnt\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\n\
    assert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009245
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'tmpkl1umqu9/tmpkl1umqu9.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b73cbd63c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b73cba5ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b73cba5a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b73cba597b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkl1umqu9                        0x00005620479411b5 <unavailable> + 4533

    5    libc.so.6                          0x00002b73cbf4f460 __libc_start_main +
    245

    6    tmpkl1umqu9                        0x0000562047940e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660009245
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    guard n > 2 else { return 0 }\n    var result = 0\n    for i in\
    \ 1...n - 2 {\n        for j in i + 1...n - 1 {\n            for k in j + 1...n\
    \ {\n                if (i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 ==\
    \ 0 {\n                    result += 1\n                }\n            }\n   \
    \     }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009245
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = [Int]()\n    var counter = 0\n    var j = 0\n    var k\
    \ = 0\n    a.append(1)\n    for i in 1...n-1 {\n        a.append(i*i - i + 1)\n\
    \    }\n    for i in 1...n-2 {\n        j = i + 1\n        while j < n {\n   \
    \         k = j + 1\n            while k < n {\n                if (a[i] + a[j]\
    \ + a[k]) % 3 == 0 {\n                    counter += 1\n                }\n  \
    \              k += 1\n            }\n            j += 1\n        }\n    }\n \
    \   return counter\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'tmpo7mh08yw/tmpo7mh08yw.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b65e3189c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b65e2e80b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b65e2e80988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b65e2e7f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo7mh08yw                        0x00005639b92db4c0 <unavailable> + 5312

    5    libc.so.6                          0x00002b65e3375460 __libc_start_main +
    245

    6    tmpo7mh08yw                        0x00005639b92db0f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660009245
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var sum = 0\n    for i in 1...n {\n        for j in (i + 1)...n\
    \ {\n            for k in (j + 1)...n {\n                if (i * i - i + 1 + j\
    \ * j - j + 1 + k * k - k + 1) % 3 == 0 {\n                    sum += 1\n    \
    \            }\n            }\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b5f6306bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5f62d62561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b5f62d62286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b5f62d6213c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b5f62d61bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpv00kpvbl                        0x000055da6ae1885b <unavailable> + 6235

    6    tmpv00kpvbl                        0x000055da6ae182c8 <unavailable> + 4808

    7    libc.so.6                          0x00002b5f63257460 __libc_start_main +
    245

    8    tmpv00kpvbl                        0x000055da6ae17fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660009245
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var triples: Int = 0\n    var a: [Int] = []\n    for i in 1...n\
    \ {\n        a.append(i * i - i + 1)\n    }\n    for i in 0..<n {\n        for\
    \ j in i+1..<n {\n            for k in j+1..<n {\n                if (a[i] + a[j]\
    \ + a[k]) % 3 == 0 {\n                    triples += 1\n                }\n  \
    \          }\n        }\n    }\n    return triples\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6)\
    \ == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009245
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var res = 0\n    var a = [Int]()\n    for i in 1...n {\n     \
    \   a.append(i * i - i + 1)\n    }\n    for i in 0..<n {\n        for j in i +\
    \ 1..<n {\n            for k in j + 1..<n {\n                if (a[i] + a[j] +\
    \ a[k]) % 3 == 0 {\n                    res += 1\n                }\n        \
    \    }\n        }\n    }\n    return res\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009245
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var sum: Int = 0\n    for i in 1..<n {\n        for j in (i +\
    \ 1)..<n {\n            for k in (j + 1)..<n {\n                if ((i * i - i\
    \ + 1) + (j * j - j + 1) + (k * k - k + 1)) % 3 == 0 {\n                    sum\
    \ += 1\n                }\n            }\n        }\n    }\n    return sum\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'tmp59d3fytt/tmp59d3fytt.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2639872c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2639569b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2639569988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b26395687b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp59d3fytt                        0x0000564378bfd3b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b2639a5e460 __libc_start_main +
    245

    6    tmp59d3fytt                        0x0000564378bfcfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660009245
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var arr = [Int]()\n    for i in 1...n {\n        arr.append(i\
    \ * i - i + 1)\n    }\n    var count = 0\n    for i in 0..<arr.count - 2 {\n \
    \       for j in i + 1..<arr.count - 1 {\n            for k in j + 1..<arr.count\
    \ {\n                if arr[i] + arr[j] + arr[k] % 3 == 0 {\n                \
    \    count += 1\n                }\n            }\n        }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(get_max_triples(n: 5) ==\
    \ 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10) == 36)\n\
    assert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'tmp9trh_u_6/tmp9trh_u_6.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b540784ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5407541b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5407541988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b54075407b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9trh_u_6                        0x000055769a8515d5 <unavailable> + 5589

    5    libc.so.6                          0x00002b5407a36460 __libc_start_main +
    245

    6    tmp9trh_u_6                        0x000055769a851289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660009245
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var count = 0\n    for i in 1...n {\n        for j in i+1...n\
    \ {\n            for k in j+1...n {\n                if a(i) + a(j) + a(k) % 3\
    \ == 0 {\n                    count += 1\n                }\n            }\n \
    \       }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpkdlbgcvu.swift:17:20: error: cannot find 'a' in scope\n       \
    \         if a(i) + a(j) + a(k) % 3 == 0 {\n                   ^\n/tmp/tmpkdlbgcvu.swift:17:27:\
    \ error: cannot find 'a' in scope\n                if a(i) + a(j) + a(k) % 3 ==\
    \ 0 {\n                          ^\n/tmp/tmpkdlbgcvu.swift:17:34: error: cannot\
    \ find 'a' in scope\n                if a(i) + a(j) + a(k) % 3 == 0 {\n      \
    \                           ^\n"
  stdout: ''
  timestamp: 1660009245
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var count = 0\n    let array = (1...n).map { (i: Int) -> Int in\n\
    \        return i * i - i + 1\n    }\n    print(array)\n    for i in 1..<n {\n\
    \        for j in i + 1..<n {\n            if (array[i] + array[j]) % 3 == 0 {\n\
    \                for k in j + 1..<n {\n                    if (array[i] + array[j]\
    \ + array[k]) % 3 == 0 {\n                        count += 1\n               \
    \     }\n                }\n            }\n        }\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'tmpwbqo0uhb/tmpwbqo0uhb.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea0c50bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea0c202b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea0c202988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea0c2017b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwbqo0uhb                        0x000056023e97a705 <unavailable> + 5893

    5    libc.so.6                          0x00002aea0c6f7460 __libc_start_main +
    245

    6    tmpwbqo0uhb                        0x000056023e97a3b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660009245
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var triples = 0\n    for i in 1..<n {\n        for j in (i + 1)..<n\
    \ {\n            for k in (j + 1)..<n {\n                let a = i * i - i + 1\n\
    \                let b = j * j - j + 1\n                let c = k * k - k + 1\n\
    \                if (a + b + c) % 3 == 0 {\n                    triples += 1\n\
    \                }\n            }\n        }\n    }\n    return triples\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'tmpyjnk0rr2/tmpyjnk0rr2.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab8b532ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab8b5021b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab8b5021988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab8b50207b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyjnk0rr2                        0x000055d8c295d3b0 <unavailable> + 5040

    5    libc.so.6                          0x00002ab8b5516460 __libc_start_main +
    245

    6    tmpyjnk0rr2                        0x000055d8c295cfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660009245
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    let a = (1...n).map { $0 * $0 - $0 + 1 }\n    return (0..<a.count).flatMap\
    \ { i in\n        (i + 1..<a.count).map { j in\n            (j + 1..<a.count).filter\
    \ { k in\n                a[i] + a[j] + a[k] % 3 == 0\n            }.count\n \
    \       }\n    }.reduce(0, +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'tmpdseon49d/tmpdseon49d.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afb7f5e0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afb7f2d7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afb7f2d7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afb7f2d67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdseon49d                        0x00005569678f2665 <unavailable> + 5733

    5    libc.so.6                          0x00002afb7f7cc460 __libc_start_main +
    245

    6    tmpdseon49d                        0x00005569678f2319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660009257
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = [Int]()\n    for i in 1...n {\n        a.append(i * i\
    \ - i + 1)\n    }\n    var m = 0\n    for i in 0..<n {\n        for j in i+1..<n\
    \ {\n            for k in j+1..<n {\n                if (a[i] + a[j] + a[k]) %\
    \ 3 == 0 {\n                    m += 1\n                }\n            }\n   \
    \     }\n    }\n    return m\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009245
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    let a = Array(stride(from: 1, to: n + 1, by: 1)).map { $0 * $0\
    \ - $0 + 1 }\n    return a.enumerated().reduce(0) { (result, elem) in\n      \
    \  let (i, elem1) = elem\n        return result + a[i + 1..<n].enumerated().reduce(0)\
    \ { (res, elem) in\n            let (j, elem2) = elem\n            return res\
    \ + a[j + i + 2..<n].enumerated().reduce(0) { (r, e) in\n                let (k,\
    \ _) = e\n                return r + (elem1 + elem2 + a[j + i + k + 3] % 3 ==\
    \ 0 ? 1 : 0)\n            }\n        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\n\
    assert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002abf340adc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abf33da4561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abf33da4286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abf33da413c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abf33da3bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002abf33ba3e83 <unavailable> + 188035

    6    tmp4xmtfbdl                        0x0000555aa3c2e555 <unavailable> + 9557

    7    tmp4xmtfbdl                        0x0000555aa3c2ee66 <unavailable> + 11878

    8    libswiftCore.so                    0x00002abf33eb3410 Sequence.reduce<A>(_:_:)
    + 530

    9    tmp4xmtfbdl                        0x0000555aa3c2e2da <unavailable> + 8922

    10   tmp4xmtfbdl                        0x0000555aa3c2edbc <unavailable> + 11708

    11   libswiftCore.so                    0x00002abf33eb3410 Sequence.reduce<A>(_:_:)
    + 530

    12   tmp4xmtfbdl                        0x0000555aa3c2def8 <unavailable> + 7928

    13   tmp4xmtfbdl                        0x0000555aa3c2ec34 <unavailable> + 11316

    14   libswiftCore.so                    0x00002abf33eb3410 Sequence.reduce<A>(_:_:)
    + 530

    15   tmp4xmtfbdl                        0x0000555aa3c2db76 <unavailable> + 7030

    16   tmp4xmtfbdl                        0x0000555aa3c2d748 <unavailable> + 5960

    17   libc.so.6                          0x00002abf34299460 __libc_start_main +
    245

    18   tmp4xmtfbdl                        0x0000555aa3c2d469 <unavailable> + 5225

    '
  stdout: ''
  timestamp: 1660009246
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array(repeating: 0, count: n)\n    for i in 1...n {\n\
    \        a[i - 1] = i * i - i + 1\n    }\n    var count = 0\n    for i in 0..<n\
    \ - 2 {\n        for j in i + 1..<n - 1 {\n            for k in j + 1..<n {\n\
    \                if (a[i] + a[j] + a[k]) % 3 == 0 {\n                    count\
    \ += 1\n                }\n            }\n        }\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009245
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    if n < 3 {\n        return 0\n    }\n\n    // Initialize an array\
    \ of length n with initial values of \n    // [1, 3, 7, 13, 21, ... ]\n    var\
    \ a = [Int](repeating: 0, count: n)\n    for i in 0..<n {\n        a[i] = i *\
    \ i - i + 1\n    }\n\n    var count = 0\n    for i in 0..<n {\n        for j in\
    \ (i + 1)..<n {\n            for k in (j + 1)..<n {\n                if (a[i]\
    \ + a[j] + a[k]) % 3 == 0 {\n                    count += 1\n                }\n\
    \            }\n        }\n    }\n\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6)\
    \ == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'tmpr1us42jv/tmpr1us42jv.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3e217acc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3e214a3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3e214a3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3e214a27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr1us42jv                        0x000055c17f5da455 <unavailable> + 5205

    5    libc.so.6                          0x00002b3e21998460 __libc_start_main +
    245

    6    tmpr1us42jv                        0x000055c17f5da109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660009245
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var result = 0\n    let divider = 3\n    var sum = 0\n    var\
    \ i = 1\n    while i < n - 1 {\n        let a1 = i * i - i + 1\n        sum +=\
    \ a1\n        var j = i + 1\n        while j < n {\n            let a2 = j * j\
    \ - j + 1\n            sum += a2\n            var k = j + 1\n            while\
    \ k < n + 1 {\n                let a3 = k * k - k + 1\n                sum +=\
    \ a3\n                if sum % divider == 0 {\n                    result += 1\n\
    \                }\n                sum -= a3\n                k += 1\n      \
    \      }\n            sum -= a2\n            j += 1\n        }\n        sum -=\
    \ a1\n        i += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\n\
    assert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009245
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'tmpkl1umqu9/tmpkl1umqu9.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b73cbd63c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b73cba5ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b73cba5a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b73cba597b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkl1umqu9                        0x00005620479411b5 <unavailable> + 4533

    5    libc.so.6                          0x00002b73cbf4f460 __libc_start_main +
    245

    6    tmpkl1umqu9                        0x0000562047940e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660009245
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = [Int]()\n    var count = 0\n    for i in 1 ... n {\n \
    \       a.append(i * i - i + 1)\n    }\n    for i in 0 ..< a.count - 2 {\n   \
    \     for j in i + 1 ..< a.count - 1 {\n            for k in j + 1 ..< a.count\
    \ {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n                    count\
    \ += 1\n                }\n            }\n        }\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009245
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n\tvar sum = 0\n\tvar arr = [Int]()\n\tfor i in 1...n {\n\t\tarr.append(i\
    \ * i - i + 1)\n\t}\n\tfor i in 0..<arr.count - 2 {\n\t\tfor j in i + 1..<arr.count\
    \ - 1 {\n\t\t\tfor k in j + 1..<arr.count {\n\t\t\t\tif (arr[i] + arr[j] + arr[k])\
    \ % 3 == 0 {\n\t\t\t\t\tsum += 1\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009245
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = [Int]()\n    var count = 0\n    for i in 1...n {\n   \
    \     a.append(i * i - i + 1)\n    }\n    for i in 0..<n - 2 {\n        for j\
    \ in i + 1..<n - 1 {\n            for k in j + 1..<n {\n                if (a[i]\
    \ + a[j] + a[k]) % 3 == 0 {\n                    count += 1\n                }\n\
    \            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6)\
    \ == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009245
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var array = Array(repeating: 0, count: n)\n    var result = 0\n\
    \    for i in 0..<n {\n        array[i] = i * i - i + 1\n    }\n    for i in 0..<n\
    \ {\n        for j in i+1..<n {\n            for k in j+1..<n {\n            \
    \    if (array[i] + array[j] + array[k]) % 3 == 0 {\n                    result\
    \ += 1\n                }\n            }\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'tmpns7my8fy/tmpns7my8fy.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b050b872c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b050b569b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b050b569988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b050b5687b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpns7my8fy                        0x000055a8590c4455 <unavailable> + 5205

    5    libc.so.6                          0x00002b050ba5e460 __libc_start_main +
    245

    6    tmpns7my8fy                        0x000055a8590c4109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660009245
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var cnt = 0\n    var sum = 0\n    var k = 1\n    for i in 0..<n\
    \ {\n        sum += i * i - i + 1\n        while sum > 3 && k < i {\n        \
    \    sum -= k * k - k + 1\n            k += 1\n        }\n        if sum == 3\
    \ {\n            cnt += k\n        }\n    }\n    return cnt\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'tmpyea03qay/tmpyea03qay.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b08531c6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0852ebdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0852ebd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0852ebc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyea03qay                        0x0000561ffd9db335 <unavailable> + 4917

    5    libc.so.6                          0x00002b08533b2460 __libc_start_main +
    245

    6    tmpyea03qay                        0x0000561ffd9dafe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660009245
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var count = 0\n    var number = [Int]()\n    for i in 1...n {\n\
    \        number.append(i * i - i + 1)\n    }\n    for i in 0..<n - 2 {\n     \
    \   for j in i + 1..<n - 1 {\n            for k in j + 1..<n {\n             \
    \   if (number[i] + number[j] + number[k]) % 3 == 0 {\n                    count\
    \ += 1\n                }\n            }\n        }\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009245
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var result = 0\n    var a = [Int]()\n    for i in 1...n {\n  \
    \      a.append(i * i - i + 1)\n    }\n    for i in 0..<n {\n        for j in\
    \ (i + 1)..<n {\n            for k in (j + 1)..<n {\n                if (a[i]\
    \ + a[j] + a[k]) % 3 == 0 {\n                    result += 1\n               \
    \ }\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009246
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    return n < 3 ? 0 : n - 2\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'tmpyz5q3dim/tmpyz5q3dim.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acdac950c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acdac647b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acdac647988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acdac6467b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyz5q3dim                        0x000055b9524a31b5 <unavailable> + 4533

    5    libc.so.6                          0x00002acdacb3c460 __libc_start_main +
    245

    6    tmpyz5q3dim                        0x000055b9524a2e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660009245
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var sums = [Int]()\n    var mults = 0\n    for i in 1...n {\n\
    \        sums.append(i * i - i + 1)\n    }\n    for i in 0..<n - 2 {\n       \
    \ for j in i + 1..<n - 1 {\n            for k in j + 1..<n {\n               \
    \ if (sums[i] + sums[j] + sums[k]) % 3 == 0 {\n                    mults += 1\n\
    \                }\n            }\n        }\n    }\n    return mults\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009246
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = [Int]()\n    var count = 0\n    for i in 1...n {\n   \
    \     a.append(i * i - i + 1)\n    }\n    for i in 0..<a.count {\n        for\
    \ j in (i + 1)..<a.count {\n            for k in (j + 1)..<a.count {\n       \
    \         if (a[i] + a[j] + a[k]) % 3 == 0 {\n                    count += 1\n\
    \                }\n            }\n        }\n    }\n    return count\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009246
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    let array = (1...n).map { $0 * $0 - $0 + 1 }\n    var count =\
    \ 0\n    for i in 0..<n {\n        for j in i+1..<n {\n            for k in j+1..<n\
    \ {\n                if array[i] + array[j] + array[k] % 3 == 0 {\n          \
    \          count += 1\n                }\n            }\n        }\n    }\n  \
    \  return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'tmpdvdqtmoe/tmpdvdqtmoe.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8a4887fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8a48576b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8a48576988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8a485757b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdvdqtmoe                        0x0000562b943fc4c5 <unavailable> + 5317

    5    libc.so.6                          0x00002b8a48a6b460 __libc_start_main +
    245

    6    tmpdvdqtmoe                        0x0000562b943fc179 <unavailable> + 4473

    '
  stdout: ''
  timestamp: 1660009246
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var triples = 0\n    for i in 1..<n {\n        for j in (i + 1)..<n\
    \ {\n            for k in (j + 1)..<n {\n                let sum = i * i - i +\
    \ 1 + j * j - j + 1 + k * k - k + 1\n                if sum % 3 == 0 {\n     \
    \               triples += 1\n                }\n            }\n        }\n  \
    \  }\n    return triples\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'tmp6j7opz7g/tmp6j7opz7g.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba197962c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba197659b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba197659988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba1976587b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6j7opz7g                        0x0000562d24fe83b0 <unavailable> + 5040

    5    libc.so.6                          0x00002ba197b4e460 __libc_start_main +
    245

    6    tmp6j7opz7g                        0x0000562d24fe7fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660009246
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = [Int]()\n    for i in 1...n {\n        a.append(i * i\
    \ - i + 1)\n    }\n    var count = 0\n    for i in 0..<n {\n        for j in i+1..<n\
    \ {\n            for k in j+1..<n {\n                if (a[i] + a[j] + a[k]) %\
    \ 3 == 0 {\n                    count += 1\n                }\n            }\n\
    \        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009246
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'tmpkl1umqu9/tmpkl1umqu9.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b73cbd63c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b73cba5ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b73cba5a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b73cba597b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkl1umqu9                        0x00005620479411b5 <unavailable> + 4533

    5    libc.so.6                          0x00002b73cbf4f460 __libc_start_main +
    245

    6    tmpkl1umqu9                        0x0000562047940e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660009245
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n\tlet a = Array(1...n).map { $0 * $0 - $0 + 1 }\n\tvar count = 0\n\
    \tfor i in 0..<n - 2 {\n\t\tfor j in i + 1..<n - 1 {\n\t\t\tfor k in j + 1..<n\
    \ {\n\t\t\t\tif (a[i] + a[j] + a[k]) % 3 == 0 {\n\t\t\t\t\tcount += 1\n\t\t\t\t\
    }\n\t\t\t}\n\t\t}\n\t}\n\treturn count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009246
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var count = 0\n    var a = Array(repeating: 0, count: n)\n   \
    \ for i in 1..<n {\n        a[i] = i * i - i + 1\n    }\n    for i in 0..<n -\
    \ 2 {\n        for j in i + 1..<n - 1 {\n            for k in j + 1..<n {\n  \
    \              if (a[i] + a[j] + a[k]) % 3 == 0 {\n                    count +=\
    \ 1\n                }\n            }\n        }\n    }\n    return count\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'tmp1_5yarob/tmp1_5yarob.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad99324fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad992f46b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad992f46988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad992f457b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1_5yarob                        0x00005654a3a3c4d0 <unavailable> + 5328

    5    libc.so.6                          0x00002ad99343b460 __libc_start_main +
    245

    6    tmp1_5yarob                        0x00005654a3a3c109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660009246
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var total = 0\n    var a = [Int]()\n    for i in 1...n {\n   \
    \     a.append(i * i - i + 1)\n    }\n    for i in 0..<n - 2 {\n        for j\
    \ in i + 1..<n - 1 {\n            for k in j + 1..<n {\n                if (a[i]\
    \ + a[j] + a[k]) % 3 == 0 {\n                    total += 1\n                }\n\
    \            }\n        }\n    }\n    return total\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6)\
    \ == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009246
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var count = 0\n    for i in 1..<n {\n        for j in (i + 1)..<n\
    \ {\n            for k in (j + 1)..<n {\n                if ((i * i - i + 1) +\
    \ (j * j - j + 1) + (k * k - k + 1)) % 3 == 0 {\n                    count +=\
    \ 1\n                }\n            }\n        }\n    }\n    return count\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'tmpr5lv8fuf/tmpr5lv8fuf.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b25bd8f7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b25bd5eeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b25bd5ee988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b25bd5ed7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr5lv8fuf                        0x0000555d4e31a3b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b25bdae3460 __libc_start_main +
    245

    6    tmpr5lv8fuf                        0x0000555d4e319fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660009246
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    guard n > 2 else { return 0 }\n    var x = Array(repeating: 0,\
    \ count: n)\n    for i in 1...n {\n        x[i - 1] = i * i - i + 1\n    }\n \
    \   return x.combinations(of: 3).reduce(0) { $1.sum % 3 == 0 ? $0 + 1 : $0 }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmp5mu_h62k.swift:18:14: error: value of type '[Int]' has no member\
    \ 'combinations'\n    return x.combinations(of: 3).reduce(0) { $1.sum % 3 == 0\
    \ ? $0 + 1 : $0 }\n           ~ ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009248
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = [Int]()\n    for i in 1...n {\n        a.append(i * i\
    \ - i + 1)\n    }\n    var triples = 0\n    for i in 0..<n - 2 {\n        for\
    \ j in i + 1..<n - 1 {\n            for k in j + 1..<n {\n                if (a[i]\
    \ + a[j] + a[k]) % 3 == 0 {\n                    triples += 1\n              \
    \  }\n            }\n        }\n    }\n    return triples\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009246
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    let array = (1...n).map { i in i * i - i + 1 }\n    return array.enumerated().reduce(0)\
    \ { result, element in\n        let (index, value) = element\n        let temp\
    \ = array[index + 1...]\n        return result + temp.reduce(0) { result, element\
    \ in\n            let temp = array[index + 2...]\n            return result +\
    \ temp.reduce(0) { result, element in\n                if (value + element + element)\
    \ % 3 == 0 {\n                    return result + 1\n                }\n     \
    \           return result\n            }\n        }\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpjbesibv2.swift:16:35: error: cannot convert value of type 'PartialRangeFrom<Int>'\
    \ to expected argument type 'Int'\n        let temp = array[index + 1...]\n  \
    \                                ^\n"
  stdout: ''
  timestamp: 1660009246
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    let a = Array(1 ... n).map({i in i * i - i + 1})\n    var count\
    \ = 0\n    for i in 0 ..< a.count - 2 {\n        for j in i + 1 ..< a.count -\
    \ 1 {\n            for k in j + 1 ..< a.count {\n                if (a[i] + a[j]\
    \ + a[k]) % 3 == 0 {\n                    count += 1\n                }\n    \
    \        }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\n\
    assert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009246
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    guard n > 3 else { return 0 }\n    var a = [Int]()\n    for i\
    \ in 1...n {\n        a.append(i * i - i + 1)\n    }\n    var ans = 0\n    for\
    \ i in 0..<n - 2 {\n        for j in i + 1..<n - 1 {\n            for k in j +\
    \ 1..<n {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n              \
    \      ans += 1\n                }\n            }\n        }\n    }\n    return\
    \ ans\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(get_max_triples(n: 5) ==\
    \ 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10) == 36)\n\
    assert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009246
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var count = 0\n    for i in 1..<n {\n        for j in i+1..<n\
    \ {\n            for k in j+1..<n {\n                if ((i*i - i + 1) + (j*j\
    \ - j + 1) + (k*k - k + 1)) % 3 == 0 {\n                    count += 1\n     \
    \           }\n            }\n        }\n    }\n    return count\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'tmpy7itqet4/tmpy7itqet4.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af3d9461c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af3d9158b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af3d9158988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af3d91577b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy7itqet4                        0x00005616eec5e3b0 <unavailable> + 5040

    5    libc.so.6                          0x00002af3d964d460 __libc_start_main +
    245

    6    tmpy7itqet4                        0x00005616eec5dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660009246
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    if n < 3 {\n        return 0\n    }\n    var a = [Int]()\n   \
    \ var count = 0\n    for i in 1...n {\n        a.append(i * i - i + 1)\n    }\n\
    \    for i in 0..<n - 2 {\n        for j in i + 1..<n - 1 {\n            for k\
    \ in j + 1..<n {\n                if a[i] + a[j] + a[k] % 3 == 0 {\n         \
    \           count += 1\n                }\n            }\n        }\n    }\n \
    \   return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'tmpsthtwqq2/tmpsthtwqq2.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002baa4cf74c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002baa4cc6bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002baa4cc6b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002baa4cc6a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsthtwqq2                        0x000055ada42b3535 <unavailable> + 5429

    5    libc.so.6                          0x00002baa4d160460 __libc_start_main +
    245

    6    tmpsthtwqq2                        0x000055ada42b31e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1660009246
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    let a = (1...n).map { $0 * $0 - $0 + 1 }\n    var count = 0\n\
    \    for i in 0..<n {\n        for j in (i + 1)..<n {\n            for k in (j\
    \ + 1)..<n {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n           \
    \         count += 1\n                }\n            }\n        }\n    }\n   \
    \ return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009246
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var count = 0\n    var array = [Int]()\n    for i in 1...n {\n\
    \        array.append(i * i - i + 1)\n    }\n    for i in 0..<array.count {\n\
    \        for j in i+1..<array.count {\n            for k in j+1..<array.count\
    \ {\n                if (array[i] + array[j] + array[k]) % 3 == 0 {\n        \
    \            count += 1\n                }\n            }\n        }\n    }\n\
    \    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009244
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    // Write your code here\n    return 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6)\
    \ == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'tmp3js4y0sn/tmp3js4y0sn.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b76110cac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7610dc1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7610dc1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7610dc07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3js4y0sn                        0x000055feab4bc1b5 <unavailable> + 4533

    5    libc.so.6                          0x00002b76112b6460 __libc_start_main +
    245

    6    tmp3js4y0sn                        0x000055feab4bbe69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660009246
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n\tvar triples = 0\n\tvar a = [Int]()\n\tfor i in 1...n {\n\t\ta.append(i\
    \ * i - i + 1)\n\t}\n\tfor i in 0..<a.count - 2 {\n\t\tfor j in i + 1..<a.count\
    \ - 1 {\n\t\t\tfor k in j + 1..<a.count {\n\t\t\t\tif a[i] + a[j] + a[k] % 3 ==\
    \ 0 {\n\t\t\t\t\ttriples += 1\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn triples\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'tmpwgj7ii_d/tmpwgj7ii_d.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae755255c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae754f4cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae754f4c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae754f4b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwgj7ii_d                        0x000056229f9f25d5 <unavailable> + 5589

    5    libc.so.6                          0x00002ae755441460 __libc_start_main +
    245

    6    tmpwgj7ii_d                        0x000056229f9f2289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660009246
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array(repeating: 0, count: n)\n    for i in 1..<n {\n\
    \        a[i] = i * i - i + 1\n    }\n    var ans = 0\n    for i in 0..<n {\n\
    \        for j in i + 1..<n {\n            for k in j + 1..<n {\n            \
    \    if a[i] + a[j] + a[k] % 3 == 0 {\n                    ans += 1\n        \
    \        }\n            }\n        }\n    }\n    return ans\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'tmp7p4vmrjn/tmp7p4vmrjn.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b48824c8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b48821bfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b48821bf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b48821be7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7p4vmrjn                        0x000056202eaf4455 <unavailable> + 5205

    5    libc.so.6                          0x00002b48826b4460 __libc_start_main +
    245

    6    tmp7p4vmrjn                        0x000056202eaf4109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660009246
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var triples: Int = 0\n    var a: [Int] = []\n    for i in 1...n\
    \ {\n        a.append(i * i - i + 1)\n    }\n    for i in 0..<n {\n        for\
    \ j in (i + 1)..<n {\n            for k in (j + 1)..<n {\n                if (a[i]\
    \ + a[j] + a[k]) % 3 == 0 {\n                    triples += 1\n              \
    \  }\n            }\n        }\n    }\n    return triples\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009246
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    let a = (1...n).map { $0 * $0 - $0 + 1 }\n    var sum = 0\n  \
    \  for i in 0..<n {\n        for j in (i + 1)..<n {\n            for k in (j +\
    \ 1)..<n {\n                if a[i] + a[j] + a[k] % 3 == 0 {\n               \
    \     sum += 1\n                }\n            }\n        }\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(get_max_triples(n: 5) ==\
    \ 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10) == 36)\n\
    assert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'tmpw335p6a0/tmpw335p6a0.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b97cd278c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b97ccf6fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b97ccf6f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b97ccf6e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw335p6a0                        0x00005608b5c874c5 <unavailable> + 5317

    5    libc.so.6                          0x00002b97cd464460 __libc_start_main +
    245

    6    tmpw335p6a0                        0x00005608b5c87179 <unavailable> + 4473

    '
  stdout: ''
  timestamp: 1660009246
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'tmpkl1umqu9/tmpkl1umqu9.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b73cbd63c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b73cba5ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b73cba5a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b73cba597b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkl1umqu9                        0x00005620479411b5 <unavailable> + 4533

    5    libc.so.6                          0x00002b73cbf4f460 __libc_start_main +
    245

    6    tmpkl1umqu9                        0x0000562047940e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660009245
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = [Int]()\n    var counter = 0\n    for i in 1...n {\n \
    \       a.append(i * i - i + 1)\n    }\n    for i in 0..<a.count - 2 {\n     \
    \   for j in i + 1..<a.count - 1 {\n            for k in j + 1..<a.count {\n \
    \               if a[i] + a[j] + a[k] % 3 == 0 {\n                    counter\
    \ += 1\n                }\n            }\n        }\n    }\n    return counter\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'tmp2pmh92bm/tmp2pmh92bm.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b407f8f1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b407f5e8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b407f5e8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b407f5e77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2pmh92bm                        0x0000558c0f10e5d5 <unavailable> + 5589

    5    libc.so.6                          0x00002b407fadd460 __libc_start_main +
    245

    6    tmp2pmh92bm                        0x0000558c0f10e289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660009246
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var res = 0\n    var arr = Array(repeating: 0, count: n)\n   \
    \ for i in 0..<n {\n        arr[i] = i * i - i + 1\n    }\n    for i in 0..<(n\
    \ - 2) {\n        for j in (i + 1)..<(n - 1) {\n            for k in (j + 1)..<n\
    \ {\n                if (arr[i] + arr[j] + arr[k]) % 3 == 0 {\n              \
    \      res += 1\n                }\n            }\n        }\n    }\n    return\
    \ res\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(get_max_triples(n: 5) ==\
    \ 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10) == 36)\n\
    assert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'tmp1crgrtsj/tmp1crgrtsj.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b207bfe5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b207bcdcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b207bcdc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b207bcdb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1crgrtsj                        0x0000564292998455 <unavailable> + 5205

    5    libc.so.6                          0x00002b207c1d1460 __libc_start_main +
    245

    6    tmp1crgrtsj                        0x0000564292998109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660009246
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = [Int]()\n    for i in 1...n {\n        a.append(i * i\
    \ - i + 1)\n    }\n    return get_max_triples(a: a)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6)\
    \ == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpfpe3hu_4.swift:17:27: error: incorrect argument label in call (have\
    \ 'a:', expected 'n:')\n    return get_max_triples(a: a)\n                   \
    \       ^~\n                           n\n/tmp/tmpfpe3hu_4.swift:17:31: error:\
    \ cannot convert value of type '[Int]' to expected argument type 'Int'\n    return\
    \ get_max_triples(a: a)\n                              ^\n"
  stdout: ''
  timestamp: 1660009246
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    if n < 3 {\n        return 0\n    }\n    let a: [Int] = Array(1...n).map\
    \ { i in i * i - i + 1 }\n    var result = 0\n    for i in 0..<n-2 {\n       \
    \ for j in i+1..<n-1 {\n            for k in j+1..<n {\n                if (a[i]\
    \ + a[j] + a[k]) % 3 == 0 {\n                    result += 1\n               \
    \ }\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009246
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var numberOfValidTriples = 0\n    var array = [Int]()\n    for\
    \ i in 1...n {\n        array.append(i * i - i + 1)\n    }\n    for i in 0..<n\
    \ {\n        for j in (i + 1)..<n {\n            for k in (j + 1)..<n {\n    \
    \            if array[i] + array[j] + array[k] % 3 == 0 {\n                  \
    \  numberOfValidTriples += 1\n                }\n            }\n        }\n  \
    \  }\n    return numberOfValidTriples\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'tmpswalakul/tmpswalakul.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b050994fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0509646b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0509646988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b05096457b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpswalakul                        0x000055e621c45535 <unavailable> + 5429

    5    libc.so.6                          0x00002b0509b3b460 __libc_start_main +
    245

    6    tmpswalakul                        0x000055e621c451e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1660009246
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var sum = 0\n    for i in 1..<n-1 {\n        let a = i * i - i\
    \ + 1\n        for j in i+1..<n {\n            let b = j * j - j + 1\n       \
    \     if (a + b) % 3 == 0 {\n                sum += n - j\n            }\n   \
    \     }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'tmp131p5vd3/tmp131p5vd3.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad341578c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad34126fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad34126f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad34126e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp131p5vd3                        0x0000562243982335 <unavailable> + 4917

    5    libc.so.6                          0x00002ad341764460 __libc_start_main +
    245

    6    tmp131p5vd3                        0x0000562243981fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660009246
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var answer = 0\n    var a = [Int]()\n    for i in 1...n {\n  \
    \      a.append(i * i - i + 1)\n    }\n    for i in 0..<n {\n        for j in\
    \ (i + 1)..<n {\n            for k in (j + 1)..<n {\n                if (a[i]\
    \ + a[j] + a[k]) % 3 == 0 {\n                    answer += 1\n               \
    \ }\n            }\n        }\n    }\n    return answer\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009246
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    let a = stride(from: 1, to: n + 1, by: 1).map { $0 * $0 - $0 +\
    \ 1 }\n    return a.filter { $0 % 3 == 0 }.count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6)\
    \ == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'tmps40w7mdt/tmps40w7mdt.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abbc74ccc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abbc71c3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abbc71c3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abbc71c27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps40w7mdt                        0x00005644615b5555 <unavailable> + 5461

    5    libc.so.6                          0x00002abbc76b8460 __libc_start_main +
    245

    6    tmps40w7mdt                        0x00005644615b5209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660009246
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var i: Int = 1\n    var j: Int = 2\n    var k: Int = 3\n    var\
    \ result: Int = 0\n    while i < n - 2 {\n        while j < n - 1 {\n        \
    \    while k < n {\n                if a(i) + a(j) + a(k) % 3 == 0 {\n       \
    \             result += 1\n                }\n                k += 1\n       \
    \     }\n            j += 1\n        }\n        i += 1\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpw3_7uyio.swift:20:20: error: cannot find 'a' in scope\n       \
    \         if a(i) + a(j) + a(k) % 3 == 0 {\n                   ^\n/tmp/tmpw3_7uyio.swift:20:27:\
    \ error: cannot find 'a' in scope\n                if a(i) + a(j) + a(k) % 3 ==\
    \ 0 {\n                          ^\n/tmp/tmpw3_7uyio.swift:20:34: error: cannot\
    \ find 'a' in scope\n                if a(i) + a(j) + a(k) % 3 == 0 {\n      \
    \                           ^\n"
  stdout: ''
  timestamp: 1660009246
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var tripleCount = 0\n    var tripleArray = [Int]()\n    // Fill\
    \ the array with the required values\n    for i in 1...n {\n        tripleArray.append(i\
    \ * i - i + 1)\n    }\n    // Loop through all possible combinations of the array,\n\
    \    // and if the sum of the three numbers is a multiple of 3,\n    // increment\
    \ the count.\n    for i in 0..<tripleArray.count {\n        for j in (i + 1)..<tripleArray.count\
    \ {\n            for k in (j + 1)..<tripleArray.count {\n                if (tripleArray[i]\
    \ + tripleArray[j] + tripleArray[k]) % 3 == 0 {\n                    tripleCount\
    \ += 1\n                }\n            }\n        }\n    }\n    return tripleCount\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009246
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n\tvar a = 1\n\tvar b = 3\n\tvar c = 7\n\tvar result = 0\n\tvar i =\
    \ 2\n\twhile i < n {\n\t\tif (a + b + c) % 3 == 0 {\n\t\t\tresult += 1\n\t\t}\n\
    \t\ta = b\n\t\tb = c\n\t\tc = i * i - i + 1\n\t\ti += 1\n\t}\n\treturn result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'tmpvsdvdljs/tmpvsdvdljs.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba865100c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba864df7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba864df7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba864df67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvsdvdljs                        0x000055aca91ff245 <unavailable> + 4677

    5    libc.so.6                          0x00002ba8652ec460 __libc_start_main +
    245

    6    tmpvsdvdljs                        0x000055aca91feef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1660009246
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    guard n > 2 else { return 0 }\n    var res = 0\n    for i in 1...n\
    \ - 2 {\n        for j in i + 1...n - 1 {\n            for k in j + 1...n {\n\
    \                if (i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0 {\n\
    \                    res += 1\n                }\n            }\n        }\n \
    \   }\n    return res\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009246
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = [Int]()\n    for i in 1...n {\n        a.append(i * i\
    \ - i + 1)\n    }\n    return a.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'tmpl7ujo1qt/tmpl7ujo1qt.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b55e48bcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b55e45b3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b55e45b3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b55e45b27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpl7ujo1qt                        0x00005575e8ffa495 <unavailable> + 5269

    5    libc.so.6                          0x00002b55e4aa8460 __libc_start_main +
    245

    6    tmpl7ujo1qt                        0x00005575e8ffa149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1660009246
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    guard n > 2 else { return 0 }\n    var result = 0\n    for i in\
    \ 1..<n-1 {\n        for j in i+1..<n {\n            for k in j+1..<n+1 {\n  \
    \              if (i + j + k) % 3 == 0 {\n                    result += 1\n  \
    \              }\n            }\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'tmpbjjablwc/tmpbjjablwc.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002add0b7e7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002add0b4deb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002add0b4de988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002add0b4dd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbjjablwc                        0x000056211ee51335 <unavailable> + 4917

    5    libc.so.6                          0x00002add0b9d3460 __libc_start_main +
    245

    6    tmpbjjablwc                        0x000056211ee50fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660009246
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var triples = 0\n    var memo = [Int:Int]()\n    var a = Array(repeating:\
    \ 0, count: n)\n    for i in 1...n {\n        let res = i * i - i + 1\n      \
    \  a[i - 1] = res\n        if memo[res] != nil {\n            memo[res]! += 1\n\
    \        } else {\n            memo[res] = 1\n        }\n    }\n    for i in 0..<n\
    \ - 2 {\n        for j in i + 1..<n - 1 {\n            let current = a[i] + a[j]\n\
    \            if current % 3 == 0 {\n                if memo[current] != nil {\n\
    \                    triples += memo[current]!\n                }\n          \
    \  }\n        }\n    }\n    return triples\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\n\
    assert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'tmpmfkdh50r/tmpmfkdh50r.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8594f10c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8594c07b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8594c07988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8594c067b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmfkdh50r                        0x0000562b30c086b5 <unavailable> + 5813

    5    libc.so.6                          0x00002b85950fc460 __libc_start_main +
    245

    6    tmpmfkdh50r                        0x0000562b30c08369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660009246
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n\tvar answer = 0\n\tvar count = 1\n\tvar array = [Int]()\n\tvar num\
    \ = 0\n\twhile (num < n) {\n\t\tarray.append(count * count - count + 1)\n\t\t\
    count += 1\n\t\tnum += 1\n\t}\n\t\n\tfor i in 0..<n {\n\t\tfor j in i+1..<n {\n\
    \t\t\tfor k in j+1..<n {\n\t\t\t\tif (array[i] + array[j] + array[k]) % 3 == 0\
    \ {\n\t\t\t\t\tanswer += 1\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn answer\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009246
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    if n < 3 {\n        return 0\n    }\n    var a = [Int]()\n   \
    \ for i in 1...n {\n        a.append(i * i - i + 1)\n    }\n    var result = 0\n\
    \    for i in 0..<n - 2 {\n        for j in i + 1..<n - 1 {\n            for k\
    \ in j + 1..<n {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n       \
    \             result += 1\n                }\n            }\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009246
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = [Int]()\n    var result = 0\n    for i in 1...n {\n  \
    \      a.append(i * i - i + 1)\n    }\n    for i in 0..<n - 2 {\n        for j\
    \ in i + 1..<n - 1 {\n            for k in j + 1..<n {\n                if a[i]\
    \ + a[j] + a[k] % 3 == 0 {\n                    result += 1\n                }\n\
    \            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6)\
    \ == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'tmp7lfuvl17/tmp7lfuvl17.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b99fb946c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b99fb63db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b99fb63d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b99fb63c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7lfuvl17                        0x000055587efd7535 <unavailable> + 5429

    5    libc.so.6                          0x00002b99fbb32460 __libc_start_main +
    245

    6    tmp7lfuvl17                        0x000055587efd71e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1660009246
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var result = 0\n    for i in 1..<n-1 {\n        for j in i+1..<n\
    \ {\n            for k in j+1..<n+1 {\n                if (i*i-i+1 + j*j-j+1 +\
    \ k*k-k+1) % 3 == 0 {\n                    result += 1\n                }\n  \
    \          }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6)\
    \ == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009246
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n\tvar res = 0\n\tfor i in 0 ..< n - 2 {\n\t\tfor j in i + 1 ..< n\
    \ - 1 {\n\t\t\tfor k in j + 1 ..< n {\n\t\t\t\tlet a = [i, j, k].map { $0 * $0\
    \ - $0 + 1 }\n\t\t\t\tif a.reduce(0, +) % 3 == 0 {\n\t\t\t\t\tres += 1\n\t\t\t\
    \t}\n\t\t\t}\n\t\t}\n\t}\n\treturn res\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'tmpyzyb935y/tmpyzyb935y.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aafde04ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aafddd41b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aafddd41988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aafddd407b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyzyb935y                        0x0000559ef683e565 <unavailable> + 5477

    5    libc.so.6                          0x00002aafde236460 __libc_start_main +
    245

    6    tmpyzyb935y                        0x0000559ef683e219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1660009246
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var result = 0\n    var i = 1\n    while i < n - 1 {\n       \
    \ var current = i * i - i + 1\n        var j = i + 1\n        while j < n {\n\
    \            var sum = current\n            var k = j + 1\n            while k\
    \ <= n {\n                sum += j * j - j + 1\n                if k < n {\n \
    \                   sum += k * k - k + 1\n                }\n                if\
    \ sum % 3 == 0 {\n                    result += 1\n                }\n       \
    \         k += 1\n            }\n            j += 1\n        }\n        i += 1\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'tmpddsvmno5/tmpddsvmno5.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b662de00c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b662daf7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b662daf7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b662daf67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpddsvmno5                        0x000055c60434f245 <unavailable> + 4677

    5    libc.so.6                          0x00002b662dfec460 __libc_start_main +
    245

    6    tmpddsvmno5                        0x000055c60434eef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1660009246
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = [Int]()\n    var counter = 0\n    for i in 1...n {\n \
    \       a.append(i * i - i + 1)\n    }\n    for i in 0..<n - 2 {\n        for\
    \ j in i + 1..<n - 1 {\n            for k in j + 1..<n {\n                if a[i]\
    \ + a[j] + a[k] % 3 == 0 {\n                    counter += 1\n               \
    \ }\n            }\n        }\n    }\n    return counter\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'tmpogx1om5n/tmpogx1om5n.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba0a7abac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba0a77b1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba0a77b1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba0a77b07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpogx1om5n                        0x0000563452a03535 <unavailable> + 5429

    5    libc.so.6                          0x00002ba0a7ca6460 __libc_start_main +
    245

    6    tmpogx1om5n                        0x0000563452a031e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1660009246
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var triples = 0\n    for i in 1..<n-1 {\n        for j in i+1..<n\
    \ {\n            for k in j+1..<n+1 {\n                if ((i * i - i + 1) + (j\
    \ * j - j + 1) + (k * k - k + 1)) % 3 == 0 {\n                    triples += 1\n\
    \                }\n            }\n        }\n    }\n    return triples\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009246
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var sum = 0\n    for i in 1...n {\n        for j in (i + 1)...n\
    \ {\n            for k in (j + 1)...n {\n                if (is_multiple_of_3(i\
    \ * i - i + 1 + j * j - j + 1 + k * k - k + 1)) {\n                    sum +=\
    \ 1\n                }\n            }\n        }\n    }\n    return sum\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpk5d2bil5.swift:17:21: error: cannot find 'is_multiple_of_3' in\
    \ scope\n                if (is_multiple_of_3(i * i - i + 1 + j * j - j + 1 +\
    \ k * k - k + 1)) {\n                    ^~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009246
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n\tvar count = 0\n\tlet arr = Array<Int>(1...n)\n\tfor i in 0..<n {\n\
    \t\tfor j in (i + 1)..<n {\n\t\t\tfor k in (j + 1)..<n {\n\t\t\t\tif (arr[i] +\
    \ arr[j] + arr[k]) % 3 == 0 {\n\t\t\t\t\tcount += 1\n\t\t\t\t}\n\t\t\t}\n\t\t\
    }\n\t}\n\treturn count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'tmp161dy78c/tmp161dy78c.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac82f6d4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac82f3cbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac82f3cb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac82f3ca7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp161dy78c                        0x00005613280ff4c5 <unavailable> + 5317

    5    libc.so.6                          0x00002ac82f8c0460 __libc_start_main +
    245

    6    tmp161dy78c                        0x00005613280ff179 <unavailable> + 4473

    '
  stdout: ''
  timestamp: 1660009246
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n\tvar result = 0\n\t\n\treturn result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6)\
    \ == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'tmp16nqspuf/tmp16nqspuf.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adf29c8bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adf29982b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adf29982988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adf299817b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp16nqspuf                        0x000055989d02b1b5 <unavailable> + 4533

    5    libc.so.6                          0x00002adf29e77460 __libc_start_main +
    245

    6    tmp16nqspuf                        0x000055989d02ae69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660009246
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n\tvar result = 0\n\tvar a = Array(1...n)\n\tfor i in 1..<n {\n\t\t\
    a[i] = a[i] * a[i] - a[i] + 1\n\t}\n\tfor i in 0..<n {\n\t\tfor j in (i + 1)..<n\
    \ {\n\t\t\tfor k in (j + 1)..<n {\n\t\t\t\tif (a[i] + a[j] + a[k]) % 3 == 0 {\n\
    \t\t\t\t\tresult += 1\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009247
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var res = 0\n    var a = Array(repeating: 0, count: n)\n    for\
    \ i in 1...n {\n        a[i - 1] = i * i - i + 1\n    }\n    for i in 0..<(n -\
    \ 2) {\n        for j in (i + 1)..<(n - 1) {\n            for k in (j + 1)..<n\
    \ {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n                    res\
    \ += 1\n                }\n            }\n        }\n    }\n    return res\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009247
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    return n.factorial()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmptmijdnz_.swift:13:14: error: value of type 'Int' has no member\
    \ 'factorial'\n    return n.factorial()\n           ~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009246
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var result = 0\n    for i in 1..<n {\n        for j in (i + 1)..<n\
    \ {\n            for k in (j + 1)..<n {\n                let value = get_value(index:\
    \ i) + get_value(index: j) + get_value(index: k)\n                if value % 3\
    \ == 0 {\n                    result += 1\n                }\n            }\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpbxt2sx30.swift:17:29: error: cannot find 'get_value' in scope\n\
    \                let value = get_value(index: i) + get_value(index: j) + get_value(index:\
    \ k)\n                            ^~~~~~~~~\n/tmp/tmpbxt2sx30.swift:17:51: error:\
    \ cannot find 'get_value' in scope\n                let value = get_value(index:\
    \ i) + get_value(index: j) + get_value(index: k)\n                           \
    \                       ^~~~~~~~~\n/tmp/tmpbxt2sx30.swift:17:73: error: cannot\
    \ find 'get_value' in scope\n                let value = get_value(index: i) +\
    \ get_value(index: j) + get_value(index: k)\n                                \
    \                                        ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009246
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n\tvar maxTriples = 0\n\tvar sum = 0\n\tvar i = 1\n\tvar j = 2\n\t\
    var k = 3\n\twhile k <= n {\n\t\tsum = a(i) + a(j) + a(k)\n\t\tif sum % 3 == 0\
    \ {\n\t\t\tmaxTriples += 1\n\t\t}\n\t\ti += 1\n\t\tj += 1\n\t\tk += 1\n\t}\n\t\
    return maxTriples\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmp47trcluw.swift:19:9: error: cannot find 'a' in scope\n        \
    \        sum = a(i) + a(j) + a(k)\n                      ^\n/tmp/tmp47trcluw.swift:19:16:\
    \ error: cannot find 'a' in scope\n                sum = a(i) + a(j) + a(k)\n\
    \                             ^\n/tmp/tmp47trcluw.swift:19:23: error: cannot find\
    \ 'a' in scope\n                sum = a(i) + a(j) + a(k)\n                   \
    \                 ^\n"
  stdout: ''
  timestamp: 1660009246
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n\tvar count = 0\n\tfor i in 1..<n {\n\t\tlet n1 = i * i - i + 1\n\t\
    \tfor j in (i + 1)..<n {\n\t\t\tlet n2 = j * j - j + 1\n\t\t\tfor k in (j + 1)..<n\
    \ {\n\t\t\t\tlet n3 = k * k - k + 1\n\t\t\t\tif (n1 + n2 + n3) % 3 == 0 {\n\t\t\
    \t\t\tcount += 1\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn count\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'tmpcczuft2m/tmpcczuft2m.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac33bd6dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac33ba64b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac33ba64988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac33ba637b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcczuft2m                        0x0000561931c6a3b0 <unavailable> + 5040

    5    libc.so.6                          0x00002ac33bf59460 __libc_start_main +
    245

    6    tmpcczuft2m                        0x0000561931c69fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660009246
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var triples = 0\n    for i in 1..<n {\n        let ai = i * i\
    \ - i + 1\n        for j in (i + 1)..<n {\n            let aj = j * j - j + 1\n\
    \            for k in (j + 1)..<n {\n                let ak = k * k - k + 1\n\
    \                if (ai + aj + ak) % 3 == 0 {\n                    triples +=\
    \ 1\n                }\n            }\n        }\n    }\n    return triples\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'tmp7gbxqrk8/tmp7gbxqrk8.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b31d355dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b31d3254b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b31d3254988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b31d32537b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7gbxqrk8                        0x000055f1f14fa3b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b31d3749460 __libc_start_main +
    245

    6    tmp7gbxqrk8                        0x000055f1f14f9fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660009247
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n\tvar a = Array(repeating: 0, count: n)\n\tfor i in 1...n {\n\t\t\
    a[i - 1] = i * i - i + 1\n\t}\n\tvar count = 0\n\tfor i in 0..<n - 2 {\n\t\tfor\
    \ j in i + 1..<n - 1 {\n\t\t\tfor k in j + 1..<n {\n\t\t\t\tif a[i] + a[j] + a[k]\
    \ % 3 == 0 {\n\t\t\t\t\tcount += 1\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'tmp1zmirniw/tmp1zmirniw.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b067c911c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b067c608b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b067c608988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b067c6077b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1zmirniw                        0x0000562117a94545 <unavailable> + 5445

    5    libc.so.6                          0x00002b067cafd460 __libc_start_main +
    245

    6    tmp1zmirniw                        0x0000562117a941f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1660009247
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n\tguard n > 2 else { return 0 }\n\t\n\tvar result = 0\n\t\n\tfor i\
    \ in 0..<n {\n\t\tfor j in (i + 1)..<n {\n\t\t\tfor k in (j + 1)..<n {\n\t\t\t\
    \tlet ai = i * i - i + 1\n\t\t\t\tlet aj = j * j - j + 1\n\t\t\t\tlet ak = k *\
    \ k - k + 1\n\t\t\t\tif (ai + aj + ak) % 3 == 0 {\n\t\t\t\t\tresult += 1\n\t\t\
    \t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\n\
    assert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'tmppjx92pod/tmppjx92pod.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6e81c1bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6e81912b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6e81912988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6e819117b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppjx92pod                        0x0000561ce6cd1335 <unavailable> + 4917

    5    libc.so.6                          0x00002b6e81e07460 __libc_start_main +
    245

    6    tmppjx92pod                        0x0000561ce6cd0fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660009247
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    let arr = Array(1...n).map { $0 * $0 - $0 + 1 }\n    var count\
    \ = 0\n    for (i, a) in arr.enumerated() {\n        for (j, b) in arr.enumerated()\
    \ {\n            for (k, c) in arr.enumerated() {\n                if i < j &&\
    \ j < k && a + b + c % 3 == 0 {\n                    count += 1\n            \
    \    }\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'tmpv9oe7zlq/tmpv9oe7zlq.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4df9707c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4df93feb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4df93fe988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4df93fd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv9oe7zlq                        0x000056285142c635 <unavailable> + 5685

    5    libc.so.6                          0x00002b4df98f3460 __libc_start_main +
    245

    6    tmpv9oe7zlq                        0x000056285142c2e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1660009247
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    let arr = (1...n).map { $0 * $0 - $0 + 1 }\n    var count = 0\n\
    \    for i in 0..<arr.count - 2 {\n        for j in i + 1..<arr.count - 1 {\n\
    \            for k in j + 1..<arr.count {\n                if (arr[i] + arr[j]\
    \ + arr[k]) % 3 == 0 {\n                    count += 1\n                }\n  \
    \          }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6)\
    \ == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009247
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var triple = Array(repeating: 0, count: n)\n    for i in 1...n\
    \ {\n        triple[i - 1] = i * i - i + 1\n    }\n    var count = 0\n    for\
    \ i in 0..<n - 2 {\n        for j in i + 1..<n - 1 {\n            for k in j +\
    \ 1..<n {\n                if triple[i] + triple[j] + triple[k] % 3 == 0 {\n \
    \                   count += 1\n                }\n            }\n        }\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'tmpsr8f_kv8/tmpsr8f_kv8.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b261fdbcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b261fab3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b261fab3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b261fab27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsr8f_kv8                        0x000055bc530b4545 <unavailable> + 5445

    5    libc.so.6                          0x00002b261ffa8460 __libc_start_main +
    245

    6    tmpsr8f_kv8                        0x000055bc530b41f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1660009247
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var result = 0\n    for i in 1..<n {\n        for j in (i + 1)..<n\
    \ {\n            for k in (j + 1)..<n {\n                if (i * i - i + 1 + j\
    \ * j - j + 1 + k * k - k + 1) % 3 == 0 {\n                    result += 1\n \
    \               }\n            }\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'tmp2jm0ny2_/tmp2jm0ny2_.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b72e12d3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b72e0fcab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b72e0fca988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b72e0fc97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2jm0ny2_                        0x00005632f5ac73b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b72e14bf460 __libc_start_main +
    245

    6    tmp2jm0ny2_                        0x00005632f5ac6fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660009247
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = Array(repeating: 0, count: n)\n    var count = 0\n   \
    \ for i in 0..<n {\n        a[i] = i * i - i + 1\n        if i > 1 && a[i] % 3\
    \ == 0 {\n            count += 1\n        }\n    }\n    return count\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'tmpn396no8d/tmpn396no8d.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2a03b86c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2a0387db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2a0387d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2a0387c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn396no8d                        0x000055b03250b4d0 <unavailable> + 5328

    5    libc.so.6                          0x00002b2a03d72460 __libc_start_main +
    245

    6    tmpn396no8d                        0x000055b03250b109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660009247
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var result = 0\n    var i = 1\n    var j = i + 1\n    var k =\
    \ j + 1\n    while i < n - 2 {\n        j = i + 1\n        while j < n - 1 {\n\
    \            k = j + 1\n            while k < n {\n                if (i * i -\
    \ i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0 {\n                    result\
    \ += 1\n                }\n                k += 1\n            }\n           \
    \ j += 1\n        }\n        i += 1\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'tmp5ysqfydk/tmp5ysqfydk.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b54394c6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b54391bdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b54391bd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b54391bc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5ysqfydk                        0x000055a1fda242c0 <unavailable> + 4800

    5    libc.so.6                          0x00002b54396b2460 __libc_start_main +
    245

    6    tmp5ysqfydk                        0x000055a1fda23ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1660009247
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = [Int]()\n    for i in 1...n {\n        a.append(i * i\
    \ - i + 1)\n    }\n    var result = 0\n    for i in 0..<a.count - 2 {\n      \
    \  for j in i + 1..<a.count - 1 {\n            for k in j + 1..<a.count {\n  \
    \              if (a[i] + a[j] + a[k]) % 3 == 0 {\n                    result\
    \ += 1\n                }\n            }\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009247
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var count = 0\n    for i in 1...n-2 {\n        for j in i+1...n-1\
    \ {\n            for k in j+1...n {\n                if (a(i) + a(j) + a(k)) %\
    \ 3 == 0 {\n                    count += 1\n                }\n            }\n\
    \        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmps87xusql.swift:17:21: error: cannot find 'a' in scope\n       \
    \         if (a(i) + a(j) + a(k)) % 3 == 0 {\n                    ^\n/tmp/tmps87xusql.swift:17:28:\
    \ error: cannot find 'a' in scope\n                if (a(i) + a(j) + a(k)) % 3\
    \ == 0 {\n                           ^\n/tmp/tmps87xusql.swift:17:35: error: cannot\
    \ find 'a' in scope\n                if (a(i) + a(j) + a(k)) % 3 == 0 {\n    \
    \                              ^\n"
  stdout: ''
  timestamp: 1660009247
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var result = 0\n    for i in 1...n {\n        for j in i + 1...n\
    \ {\n            for k in j + 1...n {\n                if (i * i - i + 1 + j *\
    \ j - j + 1 + k * k - k + 1) % 3 == 0 {\n                    result += 1\n   \
    \             }\n            }\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b75362d0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7535fc7561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b7535fc7286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b7535fc713c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b7535fc6bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp1xqxfa7z                        0x0000562ffd3b185b <unavailable> + 6235

    6    tmp1xqxfa7z                        0x0000562ffd3b12c8 <unavailable> + 4808

    7    libc.so.6                          0x00002b75364bc460 __libc_start_main +
    245

    8    tmp1xqxfa7z                        0x0000562ffd3b0fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660009247
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    // This is your job. :)\n    var triple = 0\n    for i in 1..<n\
    \ {\n        for j in (i+1)..<n {\n            for k in (j+1)..<n {\n        \
    \        let check = (i*i - i + 1) + (j*j - j + 1) + (k*k - k + 1)\n         \
    \       if check % 3 == 0 {\n                    triple += 1\n               \
    \ }\n            }\n        }\n    }\n    return triple\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'tmpmm3ypr5r/tmpmm3ypr5r.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3c0d59fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3c0d296b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3c0d296988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3c0d2957b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmm3ypr5r                        0x0000563fc77193b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b3c0d78b460 __libc_start_main +
    245

    6    tmpmm3ypr5r                        0x0000563fc7718fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660009247
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var triples = 0\n    for i in 1..<n-1 {\n        for j in i+1..<n\
    \ {\n            for k in j+1..<n+1 {\n                if (a(i) + a(j) + a(k))\
    \ % 3 == 0 {\n                    triples += 1\n                }\n          \
    \  }\n        }\n    }\n    return triples\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\n\
    assert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmp5xbkg7cw.swift:17:21: error: cannot find 'a' in scope\n       \
    \         if (a(i) + a(j) + a(k)) % 3 == 0 {\n                    ^\n/tmp/tmp5xbkg7cw.swift:17:28:\
    \ error: cannot find 'a' in scope\n                if (a(i) + a(j) + a(k)) % 3\
    \ == 0 {\n                           ^\n/tmp/tmp5xbkg7cw.swift:17:35: error: cannot\
    \ find 'a' in scope\n                if (a(i) + a(j) + a(k)) % 3 == 0 {\n    \
    \                              ^\n"
  stdout: ''
  timestamp: 1660009247
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'tmpkl1umqu9/tmpkl1umqu9.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b73cbd63c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b73cba5ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b73cba5a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b73cba597b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkl1umqu9                        0x00005620479411b5 <unavailable> + 4533

    5    libc.so.6                          0x00002b73cbf4f460 __libc_start_main +
    245

    6    tmpkl1umqu9                        0x0000562047940e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660009245
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var sum: Int = 0\n    for i in 1..<n-1 {\n        for j in i+1..<n\
    \ {\n            for k in j+1..<n+1 {\n                if (i*i - i + 1 + j*j -\
    \ j + 1 + k*k - k + 1) % 3 == 0 {\n                    sum += 1\n            \
    \    }\n            }\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009247
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    guard n > 0 else { return 0 }\n    var a = [Int]()\n    for i\
    \ in 1...n {\n        a.append(i * i - i + 1)\n    }\n    var count = 0\n    for\
    \ i in 0..<n {\n        for j in i + 1..<n {\n            for k in j + 1..<n {\n\
    \                if (a[i] + a[j] + a[k]) % 3 == 0 {\n                    count\
    \ += 1\n                }\n            }\n        }\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009247
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var res = 0\n    var a = [Int]()\n    for i in 1...n {\n     \
    \   a.append(i * i - i + 1)\n    }\n    for i in 0..<n - 2 {\n        for j in\
    \ i + 1..<n - 1 {\n            for k in j + 1..<n {\n                if a[i] +\
    \ a[j] + a[k] % 3 == 0 {\n                    res += 1\n                }\n  \
    \          }\n        }\n    }\n    return res\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\n\
    assert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'tmpnnredi3r/tmpnnredi3r.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b849416bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8493e62b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8493e62988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8493e617b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnnredi3r                        0x000056097b584535 <unavailable> + 5429

    5    libc.so.6                          0x00002b8494357460 __libc_start_main +
    245

    6    tmpnnredi3r                        0x000056097b5841e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1660009247
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n\treturn 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'tmpa3ljr02d/tmpa3ljr02d.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae5b0b32c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae5b0829b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae5b0829988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae5b08287b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpa3ljr02d                        0x000055b9196db1b5 <unavailable> + 4533

    5    libc.so.6                          0x00002ae5b0d1e460 __libc_start_main +
    245

    6    tmpa3ljr02d                        0x000055b9196dae69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660009247
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    let a = (1...n).map { $0 * $0 - $0 + 1 }\n    var count = 0\n\
    \    for i in 0..<n - 2 {\n        for j in i + 1..<n - 1 {\n            for k\
    \ in j + 1..<n {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n       \
    \             count += 1\n                }\n            }\n        }\n    }\n\
    \    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009247
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'tmpkl1umqu9/tmpkl1umqu9.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b73cbd63c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b73cba5ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b73cba5a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b73cba597b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkl1umqu9                        0x00005620479411b5 <unavailable> + 4533

    5    libc.so.6                          0x00002b73cbf4f460 __libc_start_main +
    245

    6    tmpkl1umqu9                        0x0000562047940e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660009245
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var counter = 0\n    var a = Array(repeating: 0, count: n)\n \
    \   for i in 1...n {\n        a[i - 1] = i * i - i + 1\n    }\n    for i in 0..<a.count\
    \ - 2 {\n        for j in i + 1..<a.count - 1 {\n            for k in j + 1..<a.count\
    \ {\n                if a[i] + a[j] + a[k] % 3 == 0 {\n                    counter\
    \ += 1\n                }\n            }\n        }\n    }\n    return counter\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'tmpumlo7ekb/tmpumlo7ekb.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2f8d3cbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2f8d0c2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2f8d0c2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2f8d0c17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpumlo7ekb                        0x000055984505e5e5 <unavailable> + 5605

    5    libc.so.6                          0x00002b2f8d5b7460 __libc_start_main +
    245

    6    tmpumlo7ekb                        0x000055984505e299 <unavailable> + 4761

    '
  stdout: ''
  timestamp: 1660009247
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    let a = Array(1...n).map { $0 * $0 - $0 + 1 }\n    var count =\
    \ 0\n    for (i, _) in a.enumerated() {\n        for (j, _) in a.enumerated()\
    \ {\n            if i < j {\n                for (k, _) in a.enumerated() {\n\
    \                    if j < k {\n                        let sum = a[i] + a[j]\
    \ + a[k]\n                        if sum % 3 == 0 {\n                        \
    \    count += 1\n                        }\n                    }\n          \
    \      }\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009247
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    guard n > 0 else { return 0 }\n    let a: [Int] = (1...n).map\
    \ { $0 * $0 - $0 + 1 }\n    return a.enumerated().filter { $0.offset > 0 }.filter\
    \ { (index, value) -> Bool in\n        var triple = 0\n        for i in 1..<index\
    \ {\n            if a[i] % 3 == value % 3 {\n                triple += 1\n   \
    \         }\n        }\n        return triple > 0\n    }.count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'tmp2emlv294/tmp2emlv294.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0725cfbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b07259f2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b07259f2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b07259f17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2emlv294                        0x000056158dd71755 <unavailable> + 5973

    5    libc.so.6                          0x00002b0725ee7460 __libc_start_main +
    245

    6    tmp2emlv294                        0x000056158dd71409 <unavailable> + 5129

    '
  stdout: ''
  timestamp: 1660009247
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = [Int]()\n    var n = n\n    while n > 0 {\n        a.append(n\
    \ * n - n + 1)\n        n -= 1\n    }\n    return a.filter { $0 % 3 == 0 }.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'tmp1ytip6i8/tmp1ytip6i8.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af48b538c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af48b22fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af48b22f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af48b22e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1ytip6i8                        0x000056457b48e465 <unavailable> + 5221

    5    libc.so.6                          0x00002af48b724460 __libc_start_main +
    245

    6    tmp1ytip6i8                        0x000056457b48e119 <unavailable> + 4377

    '
  stdout: ''
  timestamp: 1660009247
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    // 1 \u2264 n \u2264 100,000\n    guard n > 1, n <= 100_000 else\
    \ { return 0 }\n    // Print \"1\" for (1, 3, 7)\n    var trilpes: Int = 0\n \
    \   for i in 1..<n {\n        for j in (i + 1)..<n {\n            for k in (j\
    \ + 1)..<n {\n                if isTriple(a: i, b: j, c: k) {\n              \
    \      trilpes += 1\n                }\n            }\n        }\n    }\n    return\
    \ trilpes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(get_max_triples(n: 5)\
    \ == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10) ==\
    \ 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpki3ktm1c.swift:20:20: error: cannot find 'isTriple' in scope\n\
    \                if isTriple(a: i, b: j, c: k) {\n                   ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660009247
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var sum = 0\n    var idx = 0\n    var triples = 0\n    var arr\
    \ = [Int]()\n    for _ in 1...n {\n        idx += 1\n        sum = idx * idx -\
    \ idx + 1\n        arr.append(sum)\n    }\n    for i in 0..<n-2 {\n        for\
    \ j in i+1..<n-1 {\n            for k in j+1..<n {\n                if (arr[i]\
    \ + arr[j] + arr[k]) % 3 == 0 {\n                    triples += 1\n          \
    \      }\n            }\n        }\n    }\n    return triples\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009247
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = [Int]()\n    for i in 1...n {\n        a.append(i * i\
    \ - i + 1)\n    }\n    var count = 0\n    for i in 0..<a.count {\n        for\
    \ j in i+1..<a.count {\n            for k in j+1..<a.count {\n               \
    \ if a[i] + a[j] + a[k] % 3 == 0 {\n                    count += 1\n         \
    \       }\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'tmp9ya_bj7q/tmp9ya_bj7q.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b755349cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7553193b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7553193988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b75531927b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9ya_bj7q                        0x0000558964daa5d5 <unavailable> + 5589

    5    libc.so.6                          0x00002b7553688460 __libc_start_main +
    245

    6    tmp9ya_bj7q                        0x0000558964daa289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660009247
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    let input = Array(1...n)\n    var result = Array<Array<Int>>()\n\
    \    for i in input {\n        for j in input[i..<input.count] {\n           \
    \ for k in input[j..<input.count] {\n                if (i + j + k) % 3 == 0 {\n\
    \                    let arr = [i, j, k]\n                    result.append(arr)\n\
    \                }\n            }\n        }\n    }\n    return result.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'tmppppbsv9_/tmppppbsv9_.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3073318c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b307300fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b307300f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b307300e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppppbsv9_                        0x000055a1b61057d5 <unavailable> + 6101

    5    libc.so.6                          0x00002b3073504460 __libc_start_main +
    245

    6    tmppppbsv9_                        0x000055a1b6105489 <unavailable> + 5257

    '
  stdout: ''
  timestamp: 1660009247
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n\tguard n > 2 else { return 0 }\n\tvar a = [Int](repeating: 0, count:\
    \ n)\n\tfor i in 1 ... n {\n\t\ta[i - 1] = i * i - i + 1\n\t}\n\tvar count = 0\n\
    \tfor i in 0 ..< n - 2 {\n\t\tfor j in i + 1 ..< n - 1 {\n\t\t\tfor k in j + 1\
    \ ..< n {\n\t\t\t\tif (a[i] + a[j] + a[k]) % 3 == 0 {\n\t\t\t\t\tcount += 1\n\t\
    \t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\n\
    assert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009247
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    // Write your code here\n    let array = [Int](1...n).map {$0\
    \ * $0 - $0 + 1}\n    var count = 0\n    for i in 0..<array.count - 2 {\n    \
    \    for j in i + 1..<array.count - 1 {\n            for k in j + 1..<array.count\
    \ {\n                if (array[i] + array[j] + array[k]) % 3 == 0 {\n        \
    \            count += 1\n                }\n            }\n        }\n    }\n\
    \    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009247
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var count = 0\n    for i in 1..<n {\n        for j in (i + 1)..<n\
    \ {\n            for k in (j + 1)..<n {\n                if (a[i] + a[j] + a[k])\
    \ % 3 == 0 {\n                    count += 1\n                }\n            }\n\
    \        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmps5tqjz_h.swift:17:21: error: cannot find 'a' in scope\n       \
    \         if (a[i] + a[j] + a[k]) % 3 == 0 {\n                    ^\n/tmp/tmps5tqjz_h.swift:17:28:\
    \ error: cannot find 'a' in scope\n                if (a[i] + a[j] + a[k]) % 3\
    \ == 0 {\n                           ^\n/tmp/tmps5tqjz_h.swift:17:35: error: cannot\
    \ find 'a' in scope\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n    \
    \                              ^\n"
  stdout: ''
  timestamp: 1660009247
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = [Int]()\n    for i in 1...n {\n        a.append(i * i\
    \ - i + 1)\n    }\n    var count = 0\n    for i in 0..<n - 2 {\n        for j\
    \ in i + 1..<n - 1 {\n            for k in j + 1..<n {\n                if (a[i]\
    \ + a[j] + a[k]) % 3 == 0 {\n                    count += 1\n                }\n\
    \            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6)\
    \ == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009247
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n\tvar count = 0\n\tvar a = [Int]()\n\tfor i in 1...n {\n\t\ta.append(i\
    \ * i - i + 1)\n\t}\n\tfor i in 0..<n - 2 {\n\t\tfor j in i + 1..<n - 1 {\n\t\t\
    \tfor k in j + 1..<n {\n\t\t\t\tif (a[i] + a[j] + a[k]) % 3 == 0 {\n\t\t\t\t\t\
    count += 1\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009247
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var triples = 0\n    var a = Array(1...n)\n    a = a.map { $0\
    \ * $0 - $0 + 1 }\n    for i in 0..<a.count {\n        for j in i+1..<a.count\
    \ {\n            for k in j+1..<a.count {\n                if a[i] + a[j] + a[k]\
    \ % 3 == 0 {\n                    triples += 1\n                }\n          \
    \  }\n        }\n    }\n    return triples\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\n\
    assert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'tmpxszjph1j/tmpxszjph1j.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac59c9ccc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac59c6c3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac59c6c3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac59c6c27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxszjph1j                        0x00005632b3e54615 <unavailable> + 5653

    5    libc.so.6                          0x00002ac59cbb8460 __libc_start_main +
    245

    6    tmpxszjph1j                        0x00005632b3e542c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660009247
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var res = 0\n    for i in 0..<n {\n        for j in (i + 1)..<n\
    \ {\n            for k in (j + 1)..<n {\n                if (i + 1) * (i + 1)\
    \ - (i + 1) + 1 + (j + 1) * (j + 1) - (j + 1) + 1 + (k + 1) * (k + 1) - (k + 1)\
    \ + 1 % 3 == 0 {\n                    res += 1\n                }\n          \
    \  }\n        }\n    }\n    return res\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'tmpes_fib5x/tmpes_fib5x.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abd3052ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abd30221b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abd30221988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abd302207b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpes_fib5x                        0x00005612f6e9a335 <unavailable> + 4917

    5    libc.so.6                          0x00002abd30716460 __libc_start_main +
    245

    6    tmpes_fib5x                        0x00005612f6e99fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660009247
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var count = 0\n    var arr = [Int]()\n    for i in 1...n {\n \
    \       arr.append(i * i - i + 1)\n    }\n    for i in 0..<arr.count {\n     \
    \   for j in i + 1..<arr.count {\n            for k in j + 1..<arr.count {\n \
    \               if (arr[i] + arr[j] + arr[k]) % 3 == 0 {\n                   \
    \ count += 1\n                }\n            }\n        }\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009247
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var count = 0\n    var sum = 0\n    var value = 0\n    for i in\
    \ 1...n {\n        value = i * i - i + 1\n        sum += value\n        if sum\
    \ % 3 == 0 {\n            count += 1\n        }\n    }\n    return count\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'tmpwjgghtjm/tmpwjgghtjm.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2e3a99ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2e3a695b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2e3a695988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2e3a6947b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwjgghtjm                        0x000055f420521335 <unavailable> + 4917

    5    libc.so.6                          0x00002b2e3ab8a460 __libc_start_main +
    245

    6    tmpwjgghtjm                        0x000055f420520fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660009247
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var counter = 0\n    for i in 1..<n-1 {\n        for j in i+1..<n\
    \ {\n            for k in j+1..<n+1 {\n                if ((i * i - i + 1) + (j\
    \ * j - j + 1) + (k * k - k + 1)) % 3 == 0 {\n                    counter += 1\n\
    \                }\n            }\n        }\n    }\n    return counter\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009247
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n\tvar a = Array(1...n)\n\tlet b = Array(a.map({ $0 * $0 - $0 + 1 }))\n\
    \tvar result = 0\n\tfor i in 0..<b.count - 2 {\n\t\tfor j in i + 1..<b.count -\
    \ 1 {\n\t\t\tfor k in j + 1..<b.count {\n\t\t\t\tif b[i] + b[j] + b[k] % 3 ==\
    \ 0 {\n\t\t\t\t\tresult += 1\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'tmpegc09i2b/tmpegc09i2b.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af000de7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af000adeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af000ade988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af000add7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpegc09i2b                        0x000055a7949f7615 <unavailable> + 5653

    5    libc.so.6                          0x00002af000fd3460 __libc_start_main +
    245

    6    tmpegc09i2b                        0x000055a7949f72c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660009247
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'tmpkl1umqu9/tmpkl1umqu9.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b73cbd63c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b73cba5ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b73cba5a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b73cba597b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkl1umqu9                        0x00005620479411b5 <unavailable> + 4533

    5    libc.so.6                          0x00002b73cbf4f460 __libc_start_main +
    245

    6    tmpkl1umqu9                        0x0000562047940e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660009245
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var result = 0\n    let numbers = get_squares(n: n)\n    let indices\
    \ = get_indices(n: n)\n    for i in indices {\n        for j in i+1..<n {\n  \
    \          if numbers[i] + numbers[j] > 3 * n {\n                break\n     \
    \       }\n            for k in j+1..<n {\n                if numbers[i] + numbers[j]\
    \ + numbers[k] % 3 == 0 {\n                    result += 1\n                }\n\
    \            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6)\
    \ == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmp4vwjv17b.swift:14:19: error: cannot find 'get_squares' in scope\n\
    \    let numbers = get_squares(n: n)\n                  ^~~~~~~~~~~\n/tmp/tmp4vwjv17b.swift:15:19:\
    \ error: cannot find 'get_indices' in scope\n    let indices = get_indices(n:\
    \ n)\n                  ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009247
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var max_triples = 0\n    var a = Array(repeating: 0, count: n)\n\
    \    for i in 1...n {\n        a[i - 1] = i * i - i + 1\n    }\n    for i in 0..<n\
    \ - 2 {\n        for j in i + 1..<n - 1 {\n            for k in j + 1..<n {\n\
    \                if (a[i] + a[j] + a[k]) % 3 == 0 {\n                    max_triples\
    \ += 1\n                }\n            }\n        }\n    }\n    return max_triples\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009247
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'tmpkl1umqu9/tmpkl1umqu9.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b73cbd63c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b73cba5ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b73cba5a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b73cba597b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkl1umqu9                        0x00005620479411b5 <unavailable> + 4533

    5    libc.so.6                          0x00002b73cbf4f460 __libc_start_main +
    245

    6    tmpkl1umqu9                        0x0000562047940e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660009245
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var totalTriples = 0\n    var array = [Int]()\n    for i in 1...n\
    \ {\n        array.append(i * i - i + 1)\n    }\n    for i in 0..<array.count\
    \ {\n        for j in (i + 1)..<array.count {\n            for k in (j + 1)..<array.count\
    \ {\n                if (array[i] + array[j] + array[k]) % 3 == 0 {\n        \
    \            totalTriples += 1\n                }\n            }\n        }\n\
    \    }\n    return totalTriples\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009247
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = [Int]()\n    var result = 0\n    var remainder = [Int]()\n\
    \    remainder.append(0)\n    remainder.append(0)\n    remainder.append(0)\n \
    \   for index in 1...n {\n        a.append(index * index - index + 1)\n      \
    \  let element = a[index - 1]\n        remainder[element % 3] += 1\n    }\n  \
    \  result += remainder[0] * (remainder[0] - 1) * (remainder[0] - 2) / 6\n    result\
    \ += remainder[1] * (remainder[1] - 1) * (remainder[2] - 2) / 6\n    result +=\
    \ remainder[2] * (remainder[2] - 1) * (remainder[1] - 2) / 6\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'tmp427mwcdf/tmp427mwcdf.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afab715ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afab6e55b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afab6e55988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afab6e547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp427mwcdf                        0x0000560b34b29495 <unavailable> + 5269

    5    libc.so.6                          0x00002afab734a460 __libc_start_main +
    245

    6    tmp427mwcdf                        0x0000560b34b29149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1660009247
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var idx = 0\n    var count = 0\n    var arr = [Int]()\n    while\
    \ idx < n {\n        arr.append(idx * idx - idx + 1)\n        idx += 1\n    }\n\
    \    for i in 0..<n - 2 {\n        for j in i + 1..<n - 1 {\n            for k\
    \ in j + 1..<n {\n                if (arr[i] + arr[j] + arr[k]) % 3 == 0 {\n \
    \                   count += 1\n                }\n            }\n        }\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'tmpik1038kl/tmpik1038kl.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0894f1bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0894c12b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0894c12988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0894c117b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpik1038kl                        0x0000560239988445 <unavailable> + 5189

    5    libc.so.6                          0x00002b0895107460 __libc_start_main +
    245

    6    tmpik1038kl                        0x00005602399880f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660009247
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var result = 0\n    for i in 1..<n-1 {\n        var ai = i * i\
    \ - i + 1\n        if ai % 3 == 0 {\n            continue\n        }\n       \
    \ for j in i+1..<n {\n            var aj = j * j - j + 1\n            if (ai +\
    \ aj) % 3 == 0 {\n                continue\n            }\n            for k in\
    \ j+1..<n {\n                var ak = k * k - k + 1\n                if (ai +\
    \ aj + ak) % 3 == 0 {\n                    result += 1\n                }\n  \
    \          }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6)\
    \ == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'tmpl1nzs4q_/tmpl1nzs4q_.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad917628c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad91731fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad91731f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad91731e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpl1nzs4q_                        0x000055d063e043b0 <unavailable> + 5040

    5    libc.so.6                          0x00002ad917814460 __libc_start_main +
    245

    6    tmpl1nzs4q_                        0x000055d063e03fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660009247
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    var a = [Int]()\n    for i in 1...n {\n        a.append(i * i\
    \ - i + 1)\n    }\n    var counter = 0\n    for i in 0..<n - 2 {\n        for\
    \ j in i + 1..<n - 1 {\n            for k in j + 1..<n {\n                if a[i]\
    \ + a[j] + a[k] % 3 == 0 {\n                    counter += 1\n               \
    \ }\n            }\n        }\n    }\n    return counter\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'tmpmcnsi767/tmpmcnsi767.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b09afd22c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b09afa19b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b09afa19988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b09afa187b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmcnsi767                        0x000056180f24a535 <unavailable> + 5429

    5    libc.so.6                          0x00002b09aff0e460 __libc_start_main +
    245

    6    tmpmcnsi767                        0x000056180f24a1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1660009247
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    let a = Array(1...n).map { $0 * $0 - $0 + 1 }\n    var sum = 0\n\
    \    for i in 0..<a.count {\n        for j in (i + 1)..<a.count {\n          \
    \  if a[i] + a[j] % 3 == 0 {\n                for k in (j + 1)..<a.count {\n \
    \                   if a[i] + a[j] + a[k] % 3 == 0 {\n                       \
    \ sum += 1\n                    }\n                }\n            }\n        }\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'tmpd826te8_/tmpd826te8_.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b519fbb9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b519f8b0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b519f8b0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b519f8af7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd826te8_                        0x000055f9e16795c5 <unavailable> + 5573

    5    libc.so.6                          0x00002b519fda5460 __libc_start_main +
    245

    6    tmpd826te8_                        0x000055f9e1679279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1660009247
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13,\
    \ 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int)\
    \ -> Int {\n    let array = (1...n).map({ $0 * $0 - $0 + 1 })\n    var count =\
    \ 0\n    for i in 0..<array.count - 2 {\n        for j in i + 1..<array.count\
    \ - 1 {\n            if (array[i] + array[j]) % 3 == 0 {\n                for\
    \ k in j + 1..<array.count {\n                    if (array[i] + array[j] + array[k])\
    \ % 3 == 0 {\n                        count += 1\n                    }\n    \
    \            }\n            }\n        }\n    }\n    return count\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'tmphp7g7gz5/tmphp7g7gz5.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b429f58bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b429f282b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b429f282988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b429f2817b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphp7g7gz5                        0x00005638d0ddc515 <unavailable> + 5397

    5    libc.so.6                          0x00002b429f777460 __libc_start_main +
    245

    6    tmphp7g7gz5                        0x00005638d0ddc1c9 <unavailable> + 4553

    '
  stdout: ''
  timestamp: 1660009247
