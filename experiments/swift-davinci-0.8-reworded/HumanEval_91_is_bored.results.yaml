language: swift
name: HumanEval_91_is_bored
results:
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    let sentences = S.characters.split(separator: \".\", maxSplits:\
    \ Int.max, omittingEmptySubsequences: false)\n    return sentences.filter { $0.characters.first\
    \ == \"I\" }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_bored(S: \"Hello\
    \ world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp_ah6_73d.swift:11:23: error: 'characters' is unavailable: Please\
    \ use String directly\n    let sentences = S.characters.split(separator: \".\"\
    , maxSplits: Int.max, omittingEmptySubsequences: false)\n                    \
    \  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n\
    \    public var characters: String { get set }\n               ^\n/tmp/tmp_ah6_73d.swift:12:34:\
    \ error: 'characters' is unavailable: Please use Substring directly\n    return\
    \ sentences.filter { $0.characters.first == \"I\" }.count\n                  \
    \               ^~~~~~~~~~\nSwift.Substring:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: Substring { get set }\n           \
    \    ^\n"
  stdout: ''
  timestamp: 1659978488
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    return S.components(separatedBy: \"I\").count - 1\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S:\
    \ \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpbpn_igbt.swift:11:14: error: value of type 'String' has no member\
    \ 'components'\n    return S.components(separatedBy: \"I\").count - 1\n      \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978488
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    // your code here\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"Is the\
    \ sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: Exception
  stderr: 'tmpgxyufxcj/tmpgxyufxcj.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab116adac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab1167d1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab1167d1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab1167d07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgxyufxcj                        0x0000556027c353b2 <unavailable> + 5042

    5    libc.so.6                          0x00002ab116cc6460 __libc_start_main +
    245

    6    tmpgxyufxcj                        0x0000556027c34ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659978488
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    var count = 0\n    for i in S.split(separator: \" \") {\n    \
    \    if i.lowercased() == \"i\" {\n            count += 1\n        }\n    }\n\
    \    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_bored(S: \"Hello\
    \ world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: Exception
  stderr: 'tmp15stvxrg/tmp15stvxrg.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1cdb6fac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1cdb3f1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1cdb3f1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1cdb3f07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp15stvxrg                        0x000055e6cd1c49f8 <unavailable> + 6648

    5    libc.so.6                          0x00002b1cdb8e6460 __libc_start_main +
    245

    6    tmp15stvxrg                        0x000055e6cd1c42f9 <unavailable> + 4857

    '
  stdout: ''
  timestamp: 1659978489
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    return S.components(separatedBy: \".?!\".characters).filter {\
    \ $0.hasPrefix(\"I\") }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpjeec2p4d.swift:11:14: error: value of type 'String' has no member\
    \ 'components'\n    return S.components(separatedBy: \".?!\".characters).filter\
    \ { $0.hasPrefix(\"I\") }.count\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978488
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    let sentences = S.components(separatedBy: \".\")\n    var boredoms\
    \ = 0\n    for sentence in sentences {\n        if sentence.hasPrefix(\"I\") {\n\
    \            boredoms += 1\n        }\n    }\n    return boredoms\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S:\
    \ \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp318_83_6.swift:11:23: error: value of type 'String' has no member\
    \ 'components'\n    let sentences = S.components(separatedBy: \".\")\n       \
    \             ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978488
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    // Write your code here.\n    var boredoms = 0\n    let boredomsString\
    \ = S.split(separator: \" \")\n    boredomsString.forEach {\n        if $0 ==\
    \ \"I\" {\n            boredoms += 1\n        }\n    }\n    return boredoms\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S:\
    \ \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: Exception
  stderr: 'tmp_oxd5_e0/tmp_oxd5_e0.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2d9789bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2d97592b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2d97592988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2d975917b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_oxd5_e0                        0x00005628b41e3958 <unavailable> + 6488

    5    libc.so.6                          0x00002b2d97a87460 __libc_start_main +
    245

    6    tmp_oxd5_e0                        0x00005628b41e3259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659978489
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    return S.components(separatedBy: \".!?\").filter({$0.hasPrefix(\"\
    I\")}).count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_bored(S: \"Hello\
    \ world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpczvjrfy2.swift:11:14: error: value of type 'String' has no member\
    \ 'components'\n    return S.components(separatedBy: \".!?\").filter({$0.hasPrefix(\"\
    I\")}).count\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978488
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    // TODO: Implement this function\n    return 0\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S:\
    \ \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: Exception
  stderr: 'tmpkooyau4h/tmpkooyau4h.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af11a067c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af119d5eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af119d5e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af119d5d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkooyau4h                        0x0000561223cc93b2 <unavailable> + 5042

    5    libc.so.6                          0x00002af11a253460 __libc_start_main +
    245

    6    tmpkooyau4h                        0x0000561223cc8ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659978488
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    return S.components(separatedBy: \".\").filter { $0.hasPrefix(\"\
    I\") }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_bored(S: \"Hello\
    \ world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpdzgtc6m9.swift:11:14: error: value of type 'String' has no member\
    \ 'components'\n    return S.components(separatedBy: \".\").filter { $0.hasPrefix(\"\
    I\") }.count\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978488
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    let s_arr = S.components(separatedBy: \".\")\n    let q_arr =\
    \ S.components(separatedBy: \"?\")\n    let i_arr = S.components(separatedBy:\
    \ \"!\")\n    let h_arr = s_arr + q_arr + i_arr\n    var bored: Int = 0\n    for\
    \ str in h_arr {\n        if str.hasPrefix(\"I\") {\n            bored += 1\n\
    \        }\n    }\n    return bored\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\"\
    ) == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\"\
    ) == 0)\nassert(is_bored(S: \"I feel good today. I will be productive. will kill\
    \ It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpjyv_x7hq.swift:11:19: error: value of type 'String' has no member\
    \ 'components'\n    let s_arr = S.components(separatedBy: \".\")\n           \
    \     ~ ^~~~~~~~~~\n/tmp/tmpjyv_x7hq.swift:12:19: error: value of type 'String'\
    \ has no member 'components'\n    let q_arr = S.components(separatedBy: \"?\"\
    )\n                ~ ^~~~~~~~~~\n/tmp/tmpjyv_x7hq.swift:13:19: error: value of\
    \ type 'String' has no member 'components'\n    let i_arr = S.components(separatedBy:\
    \ \"!\")\n                ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978488
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    return S.split(separator: \" \").filter({ $0.prefix(1) == \"I\"\
    \ }).count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(is_bored(S: \"Hello\
    \ world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: Exception
  stderr: 'tmpcfvu4tvp/tmpcfvu4tvp.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afd5918bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afd58e82b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afd58e82988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afd58e817b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcfvu4tvp                        0x0000555a0508377b <unavailable> + 6011

    5    libc.so.6                          0x00002afd59377460 __libc_start_main +
    245

    6    tmpcfvu4tvp                        0x0000555a05083359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1659978489
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n  return S.components(separatedBy: \".!?\").filter({ $0.first == \"\
    I\" }).count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_bored(S: \"Hello\
    \ world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp6b4xmiup.swift:11:12: error: value of type 'String' has no member\
    \ 'components'\n  return S.components(separatedBy: \".!?\").filter({ $0.first\
    \ == \"I\" }).count\n         ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978488
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    return S.split(separator: \".\")\n        .map { $0.trimmingCharacters(in:\
    \ .whitespaces) }\n        .filter { $0.hasPrefix(\"I\") && !$0.isEmpty }\n  \
    \      .count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_bored(S: \"Hello\
    \ world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpx8wexs6i.swift:12:19: error: reference to member 'trimmingCharacters'\
    \ cannot be resolved without a contextual type\n        .map { $0.trimmingCharacters(in:\
    \ .whitespaces) }\n                  ^\n/tmp/tmpx8wexs6i.swift:13:17: error: unable\
    \ to infer type of a closure parameter '$0' in the current context\n        .filter\
    \ { $0.hasPrefix(\"I\") && !$0.isEmpty }\n                ^\n/tmp/tmpx8wexs6i.swift:12:43:\
    \ error: cannot infer contextual base in reference to member 'whitespaces'\n \
    \       .map { $0.trimmingCharacters(in: .whitespaces) }\n                   \
    \                      ~^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978488
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    return S.components(separatedBy: \".!?\").filter({ $0.hasPrefix(\"\
    I\") }).count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_bored(S: \"Hello\
    \ world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpo5qfkkcf.swift:11:14: error: value of type 'String' has no member\
    \ 'components'\n    return S.components(separatedBy: \".!?\").filter({ $0.hasPrefix(\"\
    I\") }).count\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978488
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: Exception
  stderr: 'tmpblupsx62/tmpblupsx62.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8568fb4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8568cabb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8568cab988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8568caa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpblupsx62                        0x00005562b024d3b2 <unavailable> + 5042

    5    libc.so.6                          0x00002b85691a0460 __libc_start_main +
    245

    6    tmpblupsx62                        0x00005562b024cee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659978488
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: Exception
  stderr: 'tmpblupsx62/tmpblupsx62.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8568fb4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8568cabb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8568cab988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8568caa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpblupsx62                        0x00005562b024d3b2 <unavailable> + 5042

    5    libc.so.6                          0x00002b85691a0460 __libc_start_main +
    245

    6    tmpblupsx62                        0x00005562b024cee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659978488
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    let isI = { c in c == \"I\" }\n    let isS = { c in c == \" \"\
    \ }\n    var boredoms = 0\n    for char in S.characters {\n        switch char\
    \ {\n        case isI:\n            boredoms += 1\n        case isS:\n       \
    \     break\n        default:\n            boredoms = 0\n        }\n    }\n  \
    \  return boredoms\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_bored(S: \"Hello\
    \ world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpu322e9cu.swift:14:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in S.characters {\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpu322e9cu.swift:16:14:\
    \ error: expression pattern of type '(String) -> Bool' cannot match values of\
    \ type 'Character'\n        case isI:\n             ^~~\n/tmp/tmpu322e9cu.swift:18:14:\
    \ error: expression pattern of type '(String) -> Bool' cannot match values of\
    \ type 'Character'\n        case isS:\n             ^~~\n"
  stdout: ''
  timestamp: 1659978488
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    var boredoms = 0\n    for sentence in S.components(separatedBy:\
    \ \"!\") {\n        for sentence in sentence.components(separatedBy: \"?\") {\n\
    \            for sentence in sentence.components(separatedBy: \".\") {\n     \
    \           if sentence.hasPrefix(\"I\") {\n                    boredoms += 1\n\
    \                }\n            }\n        }\n    }\n    return boredoms\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S:\
    \ \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpwwvyf9gm.swift:12:23: error: value of type 'String' has no member\
    \ 'components'\n    for sentence in S.components(separatedBy: \"!\") {\n     \
    \               ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978488
- exit_code: 0
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    let words = S.split(separator: \" \")\n    var boredoms = 0\n\
    \    for i in 0..<words.count {\n        if words[i] == \"I\" && (i == 0 || words[i\
    \ - 1].contains(\".\")) {\n            boredoms += 1\n        }\n    }\n    return\
    \ boredoms\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(is_bored(S: \"Hello\
    \ world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978489
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    let sentences = S.components(separatedBy: CharacterSet(charactersIn:\
    \ \"?!.\"))\n    var boredoms = 0\n    for sentence in sentences {\n        if\
    \ sentence.hasPrefix(\"I\") {\n            boredoms += 1\n        }\n    }\n \
    \   return boredoms\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_bored(S: \"Hello\
    \ world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpxyx89phe.swift:11:47: error: cannot find 'CharacterSet' in scope\n\
    \    let sentences = S.components(separatedBy: CharacterSet(charactersIn: \"?!.\"\
    ))\n                                              ^~~~~~~~~~~~\n/tmp/tmpxyx89phe.swift:11:23:\
    \ error: value of type 'String' has no member 'components'\n    let sentences\
    \ = S.components(separatedBy: CharacterSet(charactersIn: \"?!.\"))\n         \
    \           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978488
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    // we use \"I\" to detect boredoms\n    let boredom: Character\
    \ = \"I\"\n    // we use '.', '?' or '!' to delimit sentences\n    let delimiter:\
    \ [Character] = [\".\", \"?\", \"!\"]\n    // we use space to count words in a\
    \ sentence\n    let space: Character = \" \"\n    // we use lowercase to convert\
    \ the input string S\n    let lowercaseS = S.lowercased()\n    // String.Index\
    \ stores a character position in a string\n    // String.startIndex is the position\
    \ of the first character\n    // String.endIndex is the position after the last\
    \ character\n    var index: String.Index = lowercaseS.startIndex\n    // the number\
    \ of boredoms\n    var boredoms: Int = 0\n    // a flag for the previous space\
    \ character\n    var prevIsSpace: Bool = true\n    // a flag for current processed\
    \ char\n    var isSpace: Bool = false\n    // a flag for processing the next word\n\
    \    var nextWord: Bool = false\n    // a flag for processing the I character\n\
    \    var isI: Bool = false\n    // a flag for the delimiter\n    var delimiterFlag:\
    \ Bool = false\n    // iterate through the lowercase string S\n    while index\
    \ < lowercaseS.endIndex {\n        let char = lowercaseS[index]\n        // check\
    \ if the char is space\n        isSpace = (char == space)\n        // if the char\
    \ is space and the previous char is not space\n        if isSpace && !prevIsSpace\
    \ {\n            // process the next word\n            nextWord = true\n     \
    \   }\n        // if the char is not space and the previous char is space\n  \
    \      if !isSpace && prevIsSpace {\n            // check if there is a previous\
    \ delimiter\n            if delimiterFlag {\n                // reset the delimiter\
    \ flag\n                delimiterFlag = false\n                // set the I flag\
    \ to false\n                isI = false\n            }\n            // if the\
    \ next word should be processed\n            if nextWord {\n                //\
    \ reset the next word flag\n                nextWord = false\n               \
    \ // check if the current char is an I\n                isI = (char == boredom)\n\
    \            }\n        }\n        // if the char is\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"\
    Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmprv5bsbmp.swift:83:59: error: expected '}' at end of brace statement\n\
    assert(is_bored(S: \"You and I are going for a walk\") == 0)\n               \
    \                                           ^\n/tmp/tmprv5bsbmp.swift:10:33: note:\
    \ to match this opening '{'\nfunc is_bored(S: String) -> Int {\n             \
    \                   ^\n/tmp/tmprv5bsbmp.swift:66:6: error: operator functions\
    \ can only be declared at global or in type scope\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n     ^\n/tmp/tmprv5bsbmp.swift:14:9: warning:\
    \ immutable value 'delimiter' was never used; consider replacing with '_' or removing\
    \ it\n    let delimiter: [Character] = [\".\", \"?\", \"!\"]\n        ^~~~~~~~~\n\
    \        _\n/tmp/tmprv5bsbmp.swift:22:9: warning: variable 'index' was never mutated;\
    \ consider changing to 'let' constant\n    var index: String.Index = lowercaseS.startIndex\n\
    \    ~~~ ^\n    let\n/tmp/tmprv5bsbmp.swift:24:9: warning: variable 'boredoms'\
    \ was never used; consider replacing with '_' or removing it\n    var boredoms:\
    \ Int = 0\n        ^~~~~~~~\n        _\n/tmp/tmprv5bsbmp.swift:26:9: warning:\
    \ variable 'prevIsSpace' was never mutated; consider changing to 'let' constant\n\
    \    var prevIsSpace: Bool = true\n    ~~~ ^\n    let\n/tmp/tmprv5bsbmp.swift:32:9:\
    \ warning: variable 'isI' was written to, but never read\n    var isI: Bool =\
    \ false\n        ^\n"
  stdout: ''
  timestamp: 1659978488
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    var boredoms = 0\n    let sentences = S.components(separatedBy:\
    \ [\".\", \"?\", \"!\"])\n    for sentence in sentences {\n        if sentence.components(separatedBy:\
    \ \" \").first == \"I\" {\n            boredoms += 1\n        }\n    }\n    return\
    \ boredoms\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(is_bored(S: \"Hello\
    \ world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpy4r6mpd5.swift:12:23: error: value of type 'String' has no member\
    \ 'components'\n    let sentences = S.components(separatedBy: [\".\", \"?\", \"\
    !\"])\n                    ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978488
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    var result = 0\n    let components = S.split(separator: \".\"\
    ).map(String.init)\n    for item in components {\n        if item.contains(\"\
    I\") {\n            result += 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S:\
    \ \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: Exception
  stderr: 'tmpffb2y5fb/tmpffb2y5fb.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0928709c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0928400b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0928400988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b09283ff7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpffb2y5fb                        0x000055ed9d77f81b <unavailable> + 6171

    5    libc.so.6                          0x00002b09288f5460 __libc_start_main +
    245

    6    tmpffb2y5fb                        0x000055ed9d77f3f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1659978489
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    let sentences = split(S) { \"!?.\".contains($0) }\n    let boredoms\
    \ = sentences.filter {\n        $0.hasPrefix(\"I\")\n    }\n    return boredoms.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S:\
    \ \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpasrz__wk.swift:11:21: error: cannot find 'split' in scope\n   \
    \ let sentences = split(S) { \"!?.\".contains($0) }\n                    ^~~~~\n"
  stdout: ''
  timestamp: 1659978489
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    let splitted = S.components(separatedBy: CharacterSet(charactersIn:\
    \ \"?!.\"))\n    var boredoms = 0\n    for comp in splitted {\n        if comp.hasPrefix(\"\
    I\") {\n            boredoms += 1\n        }\n    }\n    return boredoms\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S:\
    \ \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp5e8wmvxs.swift:11:46: error: cannot find 'CharacterSet' in scope\n\
    \    let splitted = S.components(separatedBy: CharacterSet(charactersIn: \"?!.\"\
    ))\n                                             ^~~~~~~~~~~~\n/tmp/tmp5e8wmvxs.swift:11:22:\
    \ error: value of type 'String' has no member 'components'\n    let splitted =\
    \ S.components(separatedBy: CharacterSet(charactersIn: \"?!.\"))\n           \
    \        ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978489
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    let sentences = S.components(separatedBy: \".\")\n    let boredoms\
    \ = sentences.filter { $0.hasPrefix(\"I\") }\n    return boredoms.count\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S:\
    \ \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp_9fgbzy1.swift:11:23: error: value of type 'String' has no member\
    \ 'components'\n    let sentences = S.components(separatedBy: \".\")\n       \
    \             ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978489
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    let elements = S.split(separator: \" \")\n    var counter = 0\n\
    \    for element in elements {\n        if element.starts(with: \"I\") {\n   \
    \         counter += 1\n        }\n    }\n    return counter\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S:\
    \ \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: Exception
  stderr: 'tmpsm05_fdz/tmpsm05_fdz.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad91a6c9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad91a3c0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad91a3c0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad91a3bf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsm05_fdz                        0x000056299228e7eb <unavailable> + 6123

    5    libc.so.6                          0x00002ad91a8b5460 __libc_start_main +
    245

    6    tmpsm05_fdz                        0x000056299228e3c9 <unavailable> + 5065

    '
  stdout: ''
  timestamp: 1659978489
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    let I = \"I\"\n    let delims = [\".\", \"?\", \"!\"]\n    let\
    \ words = S.components(separatedBy: \" \")\n    var count = 0\n    var num_words\
    \ = 0\n    for word in words {\n        if delims.contains(word) {\n         \
    \   if num_words == 1 && words[0] == I {\n                count += 1\n       \
    \     }\n            num_words = 0\n        } else {\n            num_words +=\
    \ 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\"\
    ) == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\"\
    ) == 0)\nassert(is_bored(S: \"I feel good today. I will be productive. will kill\
    \ It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp4igsninj.swift:13:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = S.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978489
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n  var boredoms = 0\n  let separated = S.components(separatedBy: [\"\
    .\", \"?\", \"!\"])\n  for sentence in separated {\n    if sentence.lowercased().hasPrefix(\"\
    i\") {\n      boredoms += 1\n    }\n  }\n  return boredoms\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S:\
    \ \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpiap1ph1h.swift:12:21: error: value of type 'String' has no member\
    \ 'components'\n  let separated = S.components(separatedBy: [\".\", \"?\", \"\
    !\"])\n                  ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978489
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    let S_split = S.components(separatedBy: \".\")\n    var boredoms\
    \ = 0\n    for sentence in S_split {\n        let words = sentence.components(separatedBy:\
    \ \" \")\n        if words[0] == \"I\" {\n            boredoms += 1\n        }\n\
    \    }\n    return boredoms\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp61p0pgi2.swift:11:21: error: value of type 'String' has no member\
    \ 'components'\n    let S_split = S.components(separatedBy: \".\")\n         \
    \         ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978489
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    var count = 0\n    let words = S.components(separatedBy: \" \"\
    )\n    for w in words {\n        if w == \"I\" {\n            count += 1\n   \
    \     }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpkn0yrzo2.swift:12:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = S.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978489
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n  let strArr = S.components(separatedBy: [\".\", \"?\", \"!\"])\n\
    \  let boredoms = strArr.filter { $0.hasPrefix(\"I\") }\n  return boredoms.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S:\
    \ \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpla45g53w.swift:11:18: error: value of type 'String' has no member\
    \ 'components'\n  let strArr = S.components(separatedBy: [\".\", \"?\", \"!\"\
    ])\n               ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978489
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    let sentences = S.replacingOccurrences(of: \"!\", with: \".\"\
    ).replacingOccurrences(of: \"?\", with: \".\").components(separatedBy: \".\")\n\
    \    var boredoms = 0\n    for sentence in sentences {\n        if sentence.count\
    \ > 0 {\n            let firstWord = sentence.components(separatedBy: \" \")[0]\n\
    \            if firstWord == \"I\" {\n                boredoms += 1\n        \
    \    }\n        }\n    }\n    return boredoms\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"Is the\
    \ sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpk4wn0475.swift:11:23: error: value of type 'String' has no member\
    \ 'replacingOccurrences'\n    let sentences = S.replacingOccurrences(of: \"!\"\
    , with: \".\").replacingOccurrences(of: \"?\", with: \".\").components(separatedBy:\
    \ \".\")\n                    ~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978489
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n  return S.lowercased().split(separator: \".\").map {\n    $0.split(separator:\
    \ \"?\").map {\n      $0.split(separator: \"!\").map {\n        $0.split(separator:\
    \ \" \").map {\n          $0.contains(\"i\") ? 1 : 0\n        }.reduce(0, +)\n\
    \      }.reduce(0, +)\n    }.reduce(0, +)\n  }.reduce(0, +)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S:\
    \ \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpxcio_57k.swift:11:10: error: the compiler is unable to type-check\
    \ this expression in reasonable time; try breaking up the expression into distinct\
    \ sub-expressions\n  return S.lowercased().split(separator: \".\").map {\n   \
    \      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978523
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    let sentence = S.characters.split(separator: \".\")\n    var count\
    \ = 0\n    for s in sentence {\n        if s.first == \"I\" {\n            count\
    \ += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"Is the\
    \ sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpyvk1gkgo.swift:11:22: error: 'characters' is unavailable: Please\
    \ use String directly\n    let sentence = S.characters.split(separator: \".\"\
    )\n                     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was\
    \ obsoleted in Swift 5.0\n    public var characters: String { get set }\n    \
    \           ^\n"
  stdout: ''
  timestamp: 1659978489
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n  return S.split(separator: \" \").filter({ $0.lowercased() == \"\
    i\" }).count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_bored(S: \"Hello\
    \ world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: Exception
  stderr: 'tmp61i6yslb/tmp61i6yslb.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7a95855c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7a9554cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7a9554c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7a9554b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp61i6yslb                        0x00005604d4566988 <unavailable> + 6536

    5    libc.so.6                          0x00002b7a95a41460 __libc_start_main +
    245

    6    tmp61i6yslb                        0x00005604d4566289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1659978489
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n  let lowerS = S.lowercased()\n  let sentences = lowerS.components(separatedBy:\
    \ [\".\", \"?\", \"!\"])\n  var boredoms = 0\n  for sentence in sentences {\n\
    \    let words = sentence.components(separatedBy: \" \")\n    for word in words\
    \ {\n      if word == \"i\" {\n        boredoms += 1\n        break\n      }\n\
    \    }\n  }\n  return boredoms\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp8l2n1hxb.swift:12:26: error: value of type 'String' has no member\
    \ 'components'\n  let sentences = lowerS.components(separatedBy: [\".\", \"?\"\
    , \"!\"])\n                  ~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978489
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n  return S.split(separator: \" \").filter({$0.starts(with: \"I\")}).count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S:\
    \ \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: Exception
  stderr: 'tmpkbgnejq1/tmpkbgnejq1.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad708556c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad70824db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad70824d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad70824c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkbgnejq1                        0x000055a6e41ef6fb <unavailable> + 5883

    5    libc.so.6                          0x00002ad708742460 __libc_start_main +
    245

    6    tmpkbgnejq1                        0x000055a6e41ef2d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1659978489
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    var boredoms = 0\n    var sentence = \"\"\n    for char in S {\n\
    \        if char == \".\" || char == \"?\" || char == \"!\" {\n            sentence\
    \ = sentence.trimmingCharacters(in: .whitespacesAndNewlines)\n            if sentence.range(of:\
    \ \"I\") != nil {\n                boredoms += 1\n            }\n            sentence\
    \ = \"\"\n        } else {\n            sentence += String(char)\n        }\n\
    \    }\n    sentence = sentence.trimmingCharacters(in: .whitespacesAndNewlines)\n\
    \    if sentence.range(of: \"I\") != nil {\n        boredoms += 1\n    }\n   \
    \ return boredoms\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_bored(S: \"Hello\
    \ world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpb86d2kfv.swift:15:33: error: value of type 'String' has no member\
    \ 'trimmingCharacters'\n            sentence = sentence.trimmingCharacters(in:\
    \ .whitespacesAndNewlines)\n                       ~~~~~~~~ ^~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpb86d2kfv.swift:15:57: error: cannot infer contextual base in reference\
    \ to member 'whitespacesAndNewlines'\n            sentence = sentence.trimmingCharacters(in:\
    \ .whitespacesAndNewlines)\n                                                 \
    \      ~^~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpb86d2kfv.swift:16:25: error: value of\
    \ type 'String' has no member 'range'\n            if sentence.range(of: \"I\"\
    ) != nil {\n               ~~~~~~~~ ^~~~~\n/tmp/tmpb86d2kfv.swift:24:25: error:\
    \ value of type 'String' has no member 'trimmingCharacters'\n    sentence = sentence.trimmingCharacters(in:\
    \ .whitespacesAndNewlines)\n               ~~~~~~~~ ^~~~~~~~~~~~~~~~~~\n/tmp/tmpb86d2kfv.swift:24:49:\
    \ error: cannot infer contextual base in reference to member 'whitespacesAndNewlines'\n\
    \    sentence = sentence.trimmingCharacters(in: .whitespacesAndNewlines)\n   \
    \                                            ~^~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpb86d2kfv.swift:25:17:\
    \ error: value of type 'String' has no member 'range'\n    if sentence.range(of:\
    \ \"I\") != nil {\n       ~~~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659978489
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    let delimiters = CharacterSet(charactersIn: \".!?\")\n    let\
    \ sentences = S.components(separatedBy: delimiters)\n    return sentences.filter({\
    \ $0.hasPrefix(\"I\") }).count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpf8psap90.swift:11:22: error: cannot find 'CharacterSet' in scope\n\
    \    let delimiters = CharacterSet(charactersIn: \".!?\")\n                  \
    \   ^~~~~~~~~~~~\n/tmp/tmpf8psap90.swift:12:23: error: value of type 'String'\
    \ has no member 'components'\n    let sentences = S.components(separatedBy: delimiters)\n\
    \                    ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978489
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    let words = S.split(separator: \" \")\n    return words.filter\
    \ { $0 == \"I\" }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: Exception
  stderr: 'tmp1j3ko8ru/tmp1j3ko8ru.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b066c991c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b066c688b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b066c688988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b066c6877b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1j3ko8ru                        0x000055d5063dfa08 <unavailable> + 6664

    5    libc.so.6                          0x00002b066cb7d460 __libc_start_main +
    245

    6    tmp1j3ko8ru                        0x000055d5063df309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1659978489
- exit_code: 0
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    return S.split(separator: \".\").reduce(0) {\n        return $0\
    \ + ($1.split(separator: \" \").first == \"I\" ? 1 : 0)\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S:\
    \ \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978489
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    let sentences = S.split(separator: \".\", omittingEmptySubsequences:\
    \ true)\n    let boredoms = sentences.filter { (sentence) -> Bool in\n       \
    \ return sentence.hasPrefix(\"I\")\n    }\n    return boredoms.count\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S:\
    \ \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: Exception
  stderr: 'tmp89h62wqu/tmp89h62wqu.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b323d21fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b323cf16b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b323cf16988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b323cf157b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp89h62wqu                        0x000055e19e20472b <unavailable> + 5931

    5    libc.so.6                          0x00002b323d40b460 __libc_start_main +
    245

    6    tmp89h62wqu                        0x000055e19e204309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1659978489
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    let sentences = S.split(separator: \".\").map(String.init)\n \
    \       + S.split(separator: \"?\").map(String.init)\n        + S.split(separator:\
    \ \"!\").map(String.init)\n    return sentences.filter { $0.trimmingCharacters(in:\
    \ .whitespacesAndNewlines).hasPrefix(\"I\") }.count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"\
    Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpk22c17fy.swift:11:21: error: the compiler is unable to type-check\
    \ this expression in reasonable time; try breaking up the expression into distinct\
    \ sub-expressions\n    let sentences = S.split(separator: \".\").map(String.init)\n\
    \                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpk22c17fy.swift:14:58:\
    \ error: cannot infer contextual base in reference to member 'whitespacesAndNewlines'\n\
    \    return sentences.filter { $0.trimmingCharacters(in: .whitespacesAndNewlines).hasPrefix(\"\
    I\") }.count\n                                                        ~^~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978511
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    var count = 0\n    let components = S.components(separatedBy:\
    \ \".\")\n    for component in components {\n        let subcomponents = component.components(separatedBy:\
    \ \"?\")\n        for subcomponent in subcomponents {\n            let subsubcomponents\
    \ = subcomponent.components(separatedBy: \"!\")\n            for subsubcomponent\
    \ in subsubcomponents {\n                if subsubcomponent.characters.first ==\
    \ \"I\" {\n                    count += 1\n                }\n            }\n\
    \        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\"\
    ) == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\"\
    ) == 0)\nassert(is_bored(S: \"I feel good today. I will be productive. will kill\
    \ It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpec4ksyj8.swift:12:24: error: value of type 'String' has no member\
    \ 'components'\n    let components = S.components(separatedBy: \".\")\n      \
    \               ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978489
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    var boredoms = 0\n    let sentences = S.components(separatedBy:\
    \ \".\")\n    sentences.forEach { sentence in\n        let words = sentence.components(separatedBy:\
    \ \" \")\n        if let first = words.first {\n            if first == \"I\"\
    \ {\n                boredoms += 1\n            }\n        }\n    }\n    return\
    \ boredoms\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(is_bored(S: \"Hello\
    \ world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpoxyf8d7p.swift:12:23: error: value of type 'String' has no member\
    \ 'components'\n    let sentences = S.components(separatedBy: \".\")\n       \
    \             ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978489
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    var count = 0\n    let sentences = S.components(separatedBy: \"\
    .\")\n    let sentences2 = S.components(separatedBy: \"?\")\n    let sentences3\
    \ = S.components(separatedBy: \"!\")\n    var sentences4 = [String]()\n    sentences4\
    \ += sentences\n    sentences4 += sentences2\n    sentences4 += sentences3\n \
    \   for sentence in sentences4 {\n        if sentence.starts(with: \"I\") {\n\
    \            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S:\
    \ \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp0_80js3t.swift:12:23: error: value of type 'String' has no member\
    \ 'components'\n    let sentences = S.components(separatedBy: \".\")\n       \
    \             ~ ^~~~~~~~~~\n/tmp/tmp0_80js3t.swift:13:24: error: value of type\
    \ 'String' has no member 'components'\n    let sentences2 = S.components(separatedBy:\
    \ \"?\")\n                     ~ ^~~~~~~~~~\n/tmp/tmp0_80js3t.swift:14:24: error:\
    \ value of type 'String' has no member 'components'\n    let sentences3 = S.components(separatedBy:\
    \ \"!\")\n                     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978489
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    var num = 0\n    let punctuations = NSCharacterSet.punctuationCharacters\n\
    \    let components = S.componentsSeparatedByCharactersInSet(punctuations)\n \
    \   for i in components {\n        let words = i.componentsSeparatedByString(\"\
    \ \")\n        if words[0] == \"I\" {\n            num += 1\n        }\n    }\n\
    \    return num\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_bored(S: \"Hello\
    \ world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpz495fo_d.swift:12:24: error: cannot find 'NSCharacterSet' in scope\n\
    \    let punctuations = NSCharacterSet.punctuationCharacters\n               \
    \        ^~~~~~~~~~~~~~\n/tmp/tmpz495fo_d.swift:13:24: error: value of type 'String'\
    \ has no member 'componentsSeparatedByCharactersInSet'\n    let components = S.componentsSeparatedByCharactersInSet(punctuations)\n\
    \                     ~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978489
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    let words = S.components(separatedBy: [\" \", \".\", \"?\", \"\
    !\"])\n    let boredoms = words.filter { $0 == \"I\" }.count\n    return boredoms\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S:\
    \ \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpwoo7fpdu.swift:11:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = S.components(separatedBy: [\" \", \".\", \"?\"\
    , \"!\"])\n                ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978489
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    let sentences = S.components(separatedBy: \".\")\n    var count\
    \ = 0\n    for sentence in sentences {\n        if sentence.hasPrefix(\"I\") {\n\
    \            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S:\
    \ \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpyzhze2r2.swift:11:23: error: value of type 'String' has no member\
    \ 'components'\n    let sentences = S.components(separatedBy: \".\")\n       \
    \             ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978489
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    return S.split(separator: \".\").filter { $0.trimmingCharacters(in:\
    \ .whitespacesAndNewlines).first == \"I\" }.count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"\
    Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpfx7hakcr.swift:11:48: error: reference to member 'trimmingCharacters'\
    \ cannot be resolved without a contextual type\n    return S.split(separator:\
    \ \".\").filter { $0.trimmingCharacters(in: .whitespacesAndNewlines).first ==\
    \ \"I\" }.count\n                                               ^\n/tmp/tmpfx7hakcr.swift:11:72:\
    \ error: cannot infer contextual base in reference to member 'whitespacesAndNewlines'\n\
    \    return S.split(separator: \".\").filter { $0.trimmingCharacters(in: .whitespacesAndNewlines).first\
    \ == \"I\" }.count\n                                                         \
    \             ~^~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978489
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    var count = 0\n    let arr = S.components(separatedBy: [\".\"\
    , \"?\", \"!\"])\n    for item in arr {\n        if item.hasPrefix(\"I\") {\n\
    \            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S:\
    \ \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpk2s83_o4.swift:12:17: error: value of type 'String' has no member\
    \ 'components'\n    let arr = S.components(separatedBy: [\".\", \"?\", \"!\"])\n\
    \              ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978489
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n  // Create an array of sentences by breaking the input string\n \
    \ // around punctuation, then filter for those that start with \"I\"\n  return\
    \ S.components(separatedBy: CharacterSet(charactersIn: \".?!\"))\n    .filter\
    \ { $0.hasPrefix(\"I\") }\n    .count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\"\
    ) == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\"\
    ) == 0)\nassert(is_bored(S: \"I feel good today. I will be productive. will kill\
    \ It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp4gqwupms.swift:13:36: error: cannot find 'CharacterSet' in scope\n\
    \  return S.components(separatedBy: CharacterSet(charactersIn: \".?!\"))\n   \
    \                                ^~~~~~~~~~~~\n/tmp/tmp4gqwupms.swift:13:12: error:\
    \ value of type 'String' has no member 'components'\n  return S.components(separatedBy:\
    \ CharacterSet(charactersIn: \".?!\"))\n         ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978489
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    var count = 0\n    var word = \"\"\n    for char in S {\n    \
    \    if char == \" \" {\n            continue\n        }\n        if char == \"\
    !\" || char == \".\" || char == \"?\" {\n            if word == \"I\" {\n    \
    \            count += 1\n            }\n            word = \"\"\n        } else\
    \ {\n            word += String(char)\n        }\n    }\n    return count\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S:\
    \ \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: Exception
  stderr: 'tmpe8zuhc6u/tmpe8zuhc6u.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2bb445bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2bb4152b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2bb4152988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2bb41517b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe8zuhc6u                        0x000055597c2ba662 <unavailable> + 5730

    5    libc.so.6                          0x00002b2bb4647460 __libc_start_main +
    245

    6    tmpe8zuhc6u                        0x000055597c2ba199 <unavailable> + 4505

    '
  stdout: ''
  timestamp: 1659978489
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    let arr = S.split(separator: \" \")\n    let sarr = S.split(separator:\
    \ \"!\")\n    var index = 0\n    for a in arr {\n        if a == \"I\" {\n   \
    \         return 1\n        }\n    }\n    for a in sarr {\n        for a in a.split(separator:\
    \ \"?\") {\n            for a in a.split(separator: \".\") {\n               \
    \ if a.split(separator: \" \")[0] == \"I\" {\n                    index += 1\n\
    \                }\n            }\n        }\n    }\n    return index\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S:\
    \ \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: Exception
  stderr: 'tmppnt7i40m/tmppnt7i40m.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0a7b7b4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0a7b4abb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0a7b4ab988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0a7b4aa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppnt7i40m                        0x00005610d9361a6e <unavailable> + 6766

    5    libc.so.6                          0x00002b0a7b9a0460 __libc_start_main +
    245

    6    tmppnt7i40m                        0x00005610d9361439 <unavailable> + 5177

    '
  stdout: ''
  timestamp: 1659978489
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n  return S.components(separatedBy: CharacterSet(charactersIn: \"?!.\"\
    ))\n    .filter { $0.starts(with: \"I\") }\n    .count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"\
    Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpk9gj2haj.swift:11:36: error: cannot find 'CharacterSet' in scope\n\
    \  return S.components(separatedBy: CharacterSet(charactersIn: \"?!.\"))\n   \
    \                                ^~~~~~~~~~~~\n/tmp/tmpk9gj2haj.swift:11:12: error:\
    \ value of type 'String' has no member 'components'\n  return S.components(separatedBy:\
    \ CharacterSet(charactersIn: \"?!.\"))\n         ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978489
- exit_code: 0
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    let sentences = S.split(separator: \".\")\n    var boredoms =\
    \ 0\n    for sentence in sentences {\n        let words = sentence.split(separator:\
    \ \" \")\n        if words.first == \"I\" {\n            boredoms += 1\n     \
    \   }\n    }\n    return boredoms\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978489
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    let sentences = split_sentences(S: S)\n    var boredoms = 0\n\
    \    for sentence in sentences {\n        if sentence.starts(with: \"I\") {\n\
    \            boredoms += 1\n        }\n    }\n    return boredoms\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S:\
    \ \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp5xweihcf.swift:11:21: error: cannot find 'split_sentences' in scope\n\
    \    let sentences = split_sentences(S: S)\n                    ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978489
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    let sentences = S.components(separatedBy: \".\")\n    return sentences.reduce(0)\
    \ { $0 + ($1.hasPrefix(\"I\") ? 1 : 0) }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\"\
    ) == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\"\
    ) == 0)\nassert(is_bored(S: \"I feel good today. I will be productive. will kill\
    \ It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpvet7c8aa.swift:11:23: error: value of type 'String' has no member\
    \ 'components'\n    let sentences = S.components(separatedBy: \".\")\n       \
    \             ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978489
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    var boredoms = 0\n    let words = S.components(separatedBy: CharacterSet(charactersIn:\
    \ \"!?.\"))\n    for word in words {\n        if word.hasPrefix(\"I\") {\n   \
    \         boredoms += 1\n        }\n    }\n    return boredoms\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S:\
    \ \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp6qjri0p_.swift:12:43: error: cannot find 'CharacterSet' in scope\n\
    \    let words = S.components(separatedBy: CharacterSet(charactersIn: \"!?.\"\
    ))\n                                          ^~~~~~~~~~~~\n/tmp/tmp6qjri0p_.swift:12:19:\
    \ error: value of type 'String' has no member 'components'\n    let words = S.components(separatedBy:\
    \ CharacterSet(charactersIn: \"!?.\"))\n                ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978489
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    var count = 0\n    let parts = S.split(separator: \" \")\n   \
    \ for part in parts {\n        if part.hasPrefix(\"I\") {\n            count +=\
    \ 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\"\
    ) == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\"\
    ) == 0)\nassert(is_bored(S: \"I feel good today. I will be productive. will kill\
    \ It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\") == 0)"
  status: Exception
  stderr: 'tmpyeu3rpmh/tmpyeu3rpmh.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abfa1bbbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abfa18b2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abfa18b2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abfa18b17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyeu3rpmh                        0x0000555c71ade7cb <unavailable> + 6091

    5    libc.so.6                          0x00002abfa1da7460 __libc_start_main +
    245

    6    tmpyeu3rpmh                        0x0000555c71ade3a9 <unavailable> + 5033

    '
  stdout: ''
  timestamp: 1659978489
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    var boredoms = 0\n    let characters = S.characters\n    var str\
    \ = \"\"\n    for s in characters {\n        if s == \".\" || s == \"?\" || s\
    \ == \"!\" {\n            if str == \"I\" {\n                boredoms += 1\n \
    \           }\n            str = \"\"\n        } else {\n            str += String(s)\n\
    \        }\n    }\n    return boredoms\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\"\
    ) == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\"\
    ) == 0)\nassert(is_bored(S: \"I feel good today. I will be productive. will kill\
    \ It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp3kgqm91k.swift:12:24: error: 'characters' is unavailable: Please\
    \ use String directly\n    let characters = S.characters\n                   \
    \    ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659978489
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: Exception
  stderr: 'tmpblupsx62/tmpblupsx62.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8568fb4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8568cabb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8568cab988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8568caa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpblupsx62                        0x00005562b024d3b2 <unavailable> + 5042

    5    libc.so.6                          0x00002b85691a0460 __libc_start_main +
    245

    6    tmpblupsx62                        0x00005562b024cee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659978488
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    return S.lowercased().components(separatedBy: [\".\", \"?\", \"\
    !\"]).filter({ $0.hasPrefix(\"i\") }).count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"Is the\
    \ sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpgjke5jr2.swift:11:27: error: value of type 'String' has no member\
    \ 'components'\n    return S.lowercased().components(separatedBy: [\".\", \"?\"\
    , \"!\"]).filter({ $0.hasPrefix(\"i\") }).count\n           ~~~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978489
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    return S.split(separator: \".\").filter { $0.starts(with: \"I\"\
    ) }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(is_bored(S: \"Hello\
    \ world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: Exception
  stderr: 'tmpx8x0_q4p/tmpx8x0_q4p.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeef2279c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeef1f70b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeef1f70988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeef1f6f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx8x0_q4p                        0x00005585a87ac6fb <unavailable> + 5883

    5    libc.so.6                          0x00002aeef2465460 __libc_start_main +
    245

    6    tmpx8x0_q4p                        0x00005585a87ac2d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1659978489
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    let split = S.components(separatedBy: \".\")\n    var boredoms\
    \ = 0\n    for sentence in split {\n        boredoms += sentence.starts(with:\
    \ \"I\") ? 1 : 0\n    }\n    return boredoms\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"Is the\
    \ sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpiv6tb7d5.swift:11:19: error: value of type 'String' has no member\
    \ 'components'\n    let split = S.components(separatedBy: \".\")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978489
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    let inputArray = S.components(separatedBy: \".\")\n    var boredCount\
    \ = 0\n    for part in inputArray {\n        var wordArray = part.components(separatedBy:\
    \ \" \")\n        if wordArray[0] == \"I\" {\n            boredCount += 1\n  \
    \      }\n    }\n    return boredCount\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\"\
    ) == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\"\
    ) == 0)\nassert(is_bored(S: \"I feel good today. I will be productive. will kill\
    \ It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpxnt9ifg4.swift:11:24: error: value of type 'String' has no member\
    \ 'components'\n    let inputArray = S.components(separatedBy: \".\")\n      \
    \               ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978489
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n  return S.components(separatedBy: \".\")\n    .map { $0.components(separatedBy:\
    \ \"?\") }\n    .joined()\n    .map { $0.components(separatedBy: \"!\") }\n  \
    \  .joined()\n    .filter { $0.components(separatedBy: \" \")[0] == \"I\" }\n\
    \    .count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(is_bored(S: \"Hello\
    \ world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpdbxljdb9.swift:11:12: error: value of type 'String' has no member\
    \ 'components'\n  return S.components(separatedBy: \".\")\n         ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978489
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n  return S.components(separatedBy: [\".\", \"?\", \"!\"]).reduce(0)\
    \ { (result, element) in\n    var s = element.trimmingCharacters(in: .whitespaces)\n\
    \    if s.hasPrefix(\"I\") {\n      s = s.substring(from: s.index(s.startIndex,\
    \ offsetBy: 1))\n      if s.isEmpty || s.trimmingCharacters(in: .whitespaces).isEmpty\
    \ {\n        return result + 1\n      }\n    }\n    return result\n  }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S:\
    \ \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp3nml1fz2.swift:11:12: error: value of type 'String' has no member\
    \ 'components'\n  return S.components(separatedBy: [\".\", \"?\", \"!\"]).reduce(0)\
    \ { (result, element) in\n         ~ ^~~~~~~~~~\n/tmp/tmp3nml1fz2.swift:12:45:\
    \ error: cannot infer contextual base in reference to member 'whitespaces'\n \
    \   var s = element.trimmingCharacters(in: .whitespaces)\n                   \
    \                        ~^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978489
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    let split = S.components(separatedBy: \".?!\")\n    var counter\
    \ = 0\n    for string in split {\n        let test = string.components(separatedBy:\
    \ \" \")\n        if test[0] == \"I\" {\n            counter += 1\n        }\n\
    \    }\n    return counter\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpitv3a1yo.swift:11:19: error: value of type 'String' has no member\
    \ 'components'\n    let split = S.components(separatedBy: \".?!\")\n         \
    \       ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978489
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    var ret = 0\n    let sentences = S.components(separatedBy: \"\
    .?!\")\n    for sentence in sentences {\n        let words = sentence.components(separatedBy:\
    \ \" \")\n        if words.first == \"I\" {\n            ret += 1\n        }\n\
    \    }\n    return ret\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpe5x0n9gi.swift:12:23: error: value of type 'String' has no member\
    \ 'components'\n    let sentences = S.components(separatedBy: \".?!\")\n     \
    \               ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978489
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    return S.split(separator: \".\").count + S.split(separator: \"\
    ?\").count + S.split(separator: \"!\").count - S.split(separator: \" \").count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S:\
    \ \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: Exception
  stderr: 'tmpux4vyjl5/tmpux4vyjl5.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b611a01cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6119d13b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6119d13988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6119d127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpux4vyjl5                        0x000055741341c494 <unavailable> + 5268

    5    libc.so.6                          0x00002b611a208460 __libc_start_main +
    245

    6    tmpux4vyjl5                        0x000055741341c119 <unavailable> + 4377

    '
  stdout: ''
  timestamp: 1659978489
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    var boredoms: Int = 0\n    let words = S.lowercased().split {\
    \ $0 == \" \" || $0 == \".\" || $0 == \"?\" || $0 == \"!\" }\n    for word in\
    \ words {\n        if word == \"i\" {\n            boredoms += 1\n        }\n\
    \    }\n    return boredoms\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: Exception
  stderr: 'tmphi9nico9/tmphi9nico9.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba23514ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba234e45b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba234e45988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba234e447b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphi9nico9                        0x000055bdc611bb18 <unavailable> + 6936

    5    libc.so.6                          0x00002ba23533a460 __libc_start_main +
    245

    6    tmphi9nico9                        0x000055bdc611b419 <unavailable> + 5145

    '
  stdout: ''
  timestamp: 1659978489
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    let components = S.components(separatedBy: [\".\", \"?\", \"!\"\
    ])\n    return components.filter { (str) -> Bool in\n        let words = str.components(separatedBy:\
    \ \" \")\n        return words.count > 0 && words[0] == \"I\"\n    }.count\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S:\
    \ \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpz4a72rlb.swift:11:24: error: value of type 'String' has no member\
    \ 'components'\n    let components = S.components(separatedBy: [\".\", \"?\",\
    \ \"!\"])\n                     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978489
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: Exception
  stderr: 'tmpu_h86z27/tmpu_h86z27.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b93e1d4bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b93e1a42b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b93e1a42988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b93e1a417b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu_h86z27                        0x00005596cea15264 <unavailable> + 4708

    5    libc.so.6                          0x00002b93e1f37460 __libc_start_main +
    245

    6    tmpu_h86z27                        0x00005596cea14ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659978489
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    let sepSet = CharacterSet(charactersIn: \"?!.\")\n    let parts\
    \ = S.split(separator: \" \")\n    let isBored = parts.filter { String($0).uppercased()\
    \ == \"I\" }\n    return isBored.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\"\
    ) == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\"\
    ) == 0)\nassert(is_bored(S: \"I feel good today. I will be productive. will kill\
    \ It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp7bzc07cx.swift:11:18: error: cannot find 'CharacterSet' in scope\n\
    \    let sepSet = CharacterSet(charactersIn: \"?!.\")\n                 ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978489
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    let boredoms = S.components(separatedBy: \".\")\n    .map { $0.trimmingCharacters(in:\
    \ .whitespacesAndNewlines) }\n    .filter { $0.hasPrefix(\"I\") }\n    return\
    \ boredoms.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_bored(S: \"Hello\
    \ world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpnsrd9kg6.swift:11:22: error: value of type 'String' has no member\
    \ 'components'\n    let boredoms = S.components(separatedBy: \".\")\n        \
    \           ~ ^~~~~~~~~~\n/tmp/tmpnsrd9kg6.swift:12:39: error: cannot infer contextual\
    \ base in reference to member 'whitespacesAndNewlines'\n    .map { $0.trimmingCharacters(in:\
    \ .whitespacesAndNewlines) }\n                                     ~^~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978489
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    let delimiters = CharacterSet(charactersIn: \"!.\")\n    let sentences\
    \ = S.components(separatedBy: delimiters)\n    var boredoms = 0\n    for sentence\
    \ in sentences {\n        if sentence.hasPrefix(\"I\") {\n            boredoms\
    \ += 1\n        }\n    }\n    return boredoms\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"Is the\
    \ sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp5ni_07a1.swift:11:22: error: cannot find 'CharacterSet' in scope\n\
    \    let delimiters = CharacterSet(charactersIn: \"!.\")\n                   \
    \  ^~~~~~~~~~~~\n/tmp/tmp5ni_07a1.swift:12:23: error: value of type 'String' has\
    \ no member 'components'\n    let sentences = S.components(separatedBy: delimiters)\n\
    \                    ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978489
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    return S.components(separatedBy: \".?!\").filter { $0.trimmingCharacters(in:\
    \ .whitespaces).hasPrefix(\"I\") }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\"\
    ) == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\"\
    ) == 0)\nassert(is_bored(S: \"I feel good today. I will be productive. will kill\
    \ It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpup392jfz.swift:11:14: error: value of type 'String' has no member\
    \ 'components'\n    return S.components(separatedBy: \".?!\").filter { $0.trimmingCharacters(in:\
    \ .whitespaces).hasPrefix(\"I\") }.count\n           ~ ^~~~~~~~~~\n/tmp/tmpup392jfz.swift:11:81:\
    \ error: cannot infer contextual base in reference to member 'whitespaces'\n \
    \   return S.components(separatedBy: \".?!\").filter { $0.trimmingCharacters(in:\
    \ .whitespaces).hasPrefix(\"I\") }.count\n                                   \
    \                                            ~^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978489
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    var cnt = 0\n\n    for (idx, char) in S.characters.enumerated()\
    \ {\n        if char == \"I\" {\n            if idx == 0 {\n                cnt\
    \ += 1\n            } else {\n                let prev = S.characters[S.characters.index(S.startIndex,\
    \ offsetBy: idx - 1)]\n                if prev == \" \" {\n                  \
    \  cnt += 1\n                }\n            }\n        }\n    }\n\n    return\
    \ cnt\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_bored(S: \"Hello world\"\
    ) == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"\
    I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S: \"\
    I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmplshyh5xk.swift:13:26: error: 'characters' is unavailable: Please\
    \ use String directly\n    for (idx, char) in S.characters.enumerated() {\n  \
    \                       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was\
    \ obsoleted in Swift 5.0\n    public var characters: String { get set }\n    \
    \           ^\n/tmp/tmplshyh5xk.swift:18:30: error: 'characters' is unavailable:\
    \ Please use String directly\n                let prev = S.characters[S.characters.index(S.startIndex,\
    \ offsetBy: idx - 1)]\n                             ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmplshyh5xk.swift:18:43: error: 'characters'\
    \ is unavailable: Please use String directly\n                let prev = S.characters[S.characters.index(S.startIndex,\
    \ offsetBy: idx - 1)]\n                                          ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659978489
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    let delimiters = [\".\", \"?\", \"!\"]\n    let sentences = S.split(separator:\
    \ \" \")\n    var boredoms = 0\n    for sentence in sentences {\n        if delimiters.contains(String(sentence))\
    \ {\n            boredoms += 1\n        }\n    }\n    return boredoms\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S:\
    \ \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: Exception
  stderr: 'tmpq36p043o/tmpq36p043o.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba318aafc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba3187a6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba3187a6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba3187a57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpq36p043o                        0x00005559e37f1a7e <unavailable> + 6782

    5    libc.so.6                          0x00002ba318c9b460 __libc_start_main +
    245

    6    tmpq36p043o                        0x00005559e37f1449 <unavailable> + 5193

    '
  stdout: ''
  timestamp: 1659978489
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    var sentence = \"\"\n    for c in S.characters {\n        if c\
    \ == \".\" || c == \"?\" || c == \"!\" {\n            sentence = sentence.lowercaseString\n\
    \            if sentence.hasPrefix(\"i\") {\n                return 1\n      \
    \      }\n            sentence = \"\"\n        } else {\n            sentence.append(c)\n\
    \        }\n    }\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp6xohhzdt.swift:12:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in S.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp6xohhzdt.swift:14:33:\
    \ error: value of type 'String' has no member 'lowercaseString'\n            sentence\
    \ = sentence.lowercaseString\n                       ~~~~~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978489
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    let words = S.split(separator: \" \")\n    var cnt = 0\n    for\
    \ i in 0..<words.count {\n        if words[i] == \"I\" {\n            cnt += 1\n\
    \        }\n    }\n    return cnt\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: Exception
  stderr: 'tmp1r18xytu/tmp1r18xytu.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad0357b1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad0354a8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad0354a8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad0354a77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1r18xytu                        0x0000558645082ac8 <unavailable> + 6856

    5    libc.so.6                          0x00002ad03599d460 __libc_start_main +
    245

    6    tmp1r18xytu                        0x00005586450823c9 <unavailable> + 5065

    '
  stdout: ''
  timestamp: 1659978489
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    let boredom_count = S.components(separatedBy: \".\")\n       \
    \ .flatMap({ $0.components(separatedBy: \"?\") })\n        .flatMap({ $0.components(separatedBy:\
    \ \"!\") })\n        .filter({ $0.hasPrefix(\"I\") })\n        .count\n    return\
    \ boredom_count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_bored(S: \"Hello\
    \ world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpvb5llfci.swift:11:27: error: value of type 'String' has no member\
    \ 'components'\n    let boredom_count = S.components(separatedBy: \".\")\n   \
    \                     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978489
- exit_code: 0
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    var result = 0\n    let arr = S.split(separator: \".\")\n    for\
    \ words in arr {\n        let wordArr = words.split(separator: \" \")\n      \
    \  if wordArr[0] == \"I\" {\n            result += 1\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(is_bored(S: \"Hello\
    \ world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978489
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n\tlet components = S.components(separatedBy: \".!?\")\n\tlet bored\
    \ = components.filter { $0.hasPrefix(\"I\") }\n\treturn bored.count\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S:\
    \ \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp9d4d5lly.swift:11:21: error: value of type 'String' has no member\
    \ 'components'\n        let components = S.components(separatedBy: \".!?\")\n\
    \                         ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978489
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    var S = S.lowercased()\n    var cnt = 0\n    var toks = S.components(separatedBy:\
    \ \".\")\n    for tok in toks {\n        var toks2 = tok.components(separatedBy:\
    \ \"?\")\n        for tok2 in toks2 {\n            var toks3 = tok2.components(separatedBy:\
    \ \"!\")\n            for tok3 in toks3 {\n                var toks4 = tok3.components(separatedBy:\
    \ \" \")\n                if toks4.count >= 2 && toks4[0] == \"i\" {\n       \
    \             cnt += 1\n                }\n            }\n        }\n    }\n \
    \   return cnt\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_bored(S: \"Hello\
    \ world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp5_2i6ufu.swift:13:18: error: value of type 'String' has no member\
    \ 'components'\n    var toks = S.components(separatedBy: \".\")\n            \
    \   ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978489
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    let sentences = S.split(separator: \".\").map(String.init)\n \
    \   return sentences.filter({ $0.starts(with: \"I\") }).count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S:\
    \ \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: Exception
  stderr: 'tmpy6ta7hb1/tmpy6ta7hb1.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9a8b2fec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9a8aff5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9a8aff5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9a8aff47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy6ta7hb1                        0x000055fcec5d182b <unavailable> + 6187

    5    libc.so.6                          0x00002b9a8b4ea460 __libc_start_main +
    245

    6    tmpy6ta7hb1                        0x000055fcec5d1409 <unavailable> + 5129

    '
  stdout: ''
  timestamp: 1659978489
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    let count = S.components(separatedBy: \".?!\").filter {\n    \
    \    $0.trimmingCharacters(in: .whitespaces).split(separator: \" \").first ==\
    \ \"I\"\n    }.count\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\"\
    ) == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\"\
    ) == 0)\nassert(is_bored(S: \"I feel good today. I will be productive. will kill\
    \ It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpwwtrrq2k.swift:11:19: error: value of type 'String' has no member\
    \ 'components'\n    let count = S.components(separatedBy: \".?!\").filter {\n\
    \                ~ ^~~~~~~~~~\n/tmp/tmpwwtrrq2k.swift:12:36: error: cannot infer\
    \ contextual base in reference to member 'whitespaces'\n        $0.trimmingCharacters(in:\
    \ .whitespaces).split(separator: \" \").first == \"I\"\n                     \
    \             ~^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978489
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    return S.components(separatedBy: \"I\").count - 1\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S:\
    \ \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpbpn_igbt.swift:11:14: error: value of type 'String' has no member\
    \ 'components'\n    return S.components(separatedBy: \"I\").count - 1\n      \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978488
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    let all_sentences = S.components(separatedBy: \".\")\n    var\
    \ boredoms = 0\n    for sentence in all_sentences {\n        let first_word =\
    \ sentence.components(separatedBy: \" \").first\n        if first_word == \"I\"\
    \ {\n            boredoms += 1\n        }\n    }\n    return boredoms\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S:\
    \ \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmprkx47q8a.swift:11:27: error: value of type 'String' has no member\
    \ 'components'\n    let all_sentences = S.components(separatedBy: \".\")\n   \
    \                     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978489
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    let components = S.components(separatedBy: \".?!\")\n    var b\
    \ = 0\n    for c in components {\n        if c.hasPrefix(\"I\") {\n          \
    \  b += 1\n        }\n    }\n    return b\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"Is the\
    \ sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpc989d3jz.swift:11:24: error: value of type 'String' has no member\
    \ 'components'\n    let components = S.components(separatedBy: \".?!\")\n    \
    \                 ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978489
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    let sentences = S.components(separatedBy: \".?!\")\n    return\
    \ sentences.filter({$0.trimmingCharacters(in: .whitespacesAndNewlines).hasPrefix(\"\
    I\")}).count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_bored(S: \"Hello\
    \ world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpdijn2i37.swift:11:23: error: value of type 'String' has no member\
    \ 'components'\n    let sentences = S.components(separatedBy: \".?!\")\n     \
    \               ~ ^~~~~~~~~~\n/tmp/tmpdijn2i37.swift:12:57: error: cannot infer\
    \ contextual base in reference to member 'whitespacesAndNewlines'\n    return\
    \ sentences.filter({$0.trimmingCharacters(in: .whitespacesAndNewlines).hasPrefix(\"\
    I\")}).count\n                                                       ~^~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978489
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    let boredoms = S.components(separatedBy: [\".\", \"?\", \"!\"\
    ]).filter({ $0.hasPrefix(\"I\") })\n    return boredoms.count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S:\
    \ \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpyue19ylt.swift:11:22: error: value of type 'String' has no member\
    \ 'components'\n    let boredoms = S.components(separatedBy: [\".\", \"?\", \"\
    !\"]).filter({ $0.hasPrefix(\"I\") })\n                   ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978489
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    let delimiters = CharacterSet(charactersIn: \".!?\")\n    let\
    \ sentences = S.components(separatedBy: delimiters)\n    return sentences.filter\
    \ { $0.hasPrefix(\"I\") }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp8r8f_ev4.swift:11:22: error: cannot find 'CharacterSet' in scope\n\
    \    let delimiters = CharacterSet(charactersIn: \".!?\")\n                  \
    \   ^~~~~~~~~~~~\n/tmp/tmp8r8f_ev4.swift:12:23: error: value of type 'String'\
    \ has no member 'components'\n    let sentences = S.components(separatedBy: delimiters)\n\
    \                    ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978489
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    return S.split { $0 == \".\" || $0 == \"?\" || $0 == \"!\" }\n\
    \        .reduce(0) { $0 + ($1.hasPrefix(\"I\") ? 1 : 0) }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S:\
    \ \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: Exception
  stderr: 'tmp3wy7f1ed/tmp3wy7f1ed.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b397c781c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b397c478b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b397c478988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b397c4777b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3wy7f1ed                        0x0000562f67f566ab <unavailable> + 5803

    5    libc.so.6                          0x00002b397c96d460 __libc_start_main +
    245

    6    tmp3wy7f1ed                        0x0000562f67f56289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1659978489
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    let split = S.split(separator: \" \")\n    var count = 0\n   \
    \ for x in split {\n        if x == \"I\" {\n            count += 1\n        }\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: Exception
  stderr: 'tmp8o8ntg8m/tmp8o8ntg8m.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae9314a8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae93119fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae93119f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae93119e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8o8ntg8m                        0x00005650b7097aa8 <unavailable> + 6824

    5    libc.so.6                          0x00002ae931694460 __libc_start_main +
    245

    6    tmp8o8ntg8m                        0x00005650b70973a9 <unavailable> + 5033

    '
  stdout: ''
  timestamp: 1659978489
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    let delimiters = CharacterSet(charactersIn: \".?!\")\n    var\
    \ boredoms = 0\n    for sentence in S.components(separatedBy: delimiters) {\n\
    \        if sentence.hasPrefix(\"I\") {\n            boredoms += 1\n        }\n\
    \    }\n    return boredoms\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp0213f2m1.swift:11:22: error: cannot find 'CharacterSet' in scope\n\
    \    let delimiters = CharacterSet(charactersIn: \".?!\")\n                  \
    \   ^~~~~~~~~~~~\n/tmp/tmp0213f2m1.swift:13:23: error: value of type 'String'\
    \ has no member 'components'\n    for sentence in S.components(separatedBy: delimiters)\
    \ {\n                    ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978489
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    var boredoms = 0\n    var temp = \"\"\n    var s = S.characters.split{$0\
    \ == \".\" || $0 == \"?\" || $0 == \"!\"}.map(String.init)\n    if s.count ==\
    \ 1 {\n        temp = s[0]\n        if temp.lowercaseString.rangeOfString(\"I\"\
    ) != nil {\n            boredoms += 1\n        }\n    } else {\n        for i\
    \ in 0...s.count-1 {\n            temp = s[i]\n            if temp.lowercaseString.rangeOfString(\"\
    I\") != nil {\n                boredoms += 1\n            }\n        }\n    }\n\
    \    return boredoms\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp1uw7nofb.swift:13:15: error: 'characters' is unavailable: Please\
    \ use String directly\n    var s = S.characters.split{$0 == \".\" || $0 == \"\
    ?\" || $0 == \"!\"}.map(String.init)\n              ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmp1uw7nofb.swift:16:17: error: value of\
    \ type 'String' has no member 'lowercaseString'\n        if temp.lowercaseString.rangeOfString(\"\
    I\") != nil {\n           ~~~~ ^~~~~~~~~~~~~~~\n/tmp/tmp1uw7nofb.swift:22:21:\
    \ error: value of type 'String' has no member 'lowercaseString'\n            if\
    \ temp.lowercaseString.rangeOfString(\"I\") != nil {\n               ~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978489
- exit_code: 0
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    var boredom = 0\n    let s = S.split(separator: \".\")\n    for\
    \ string in s {\n        var str = string.split(separator: \" \")\n        if\
    \ str[0] == \"I\" {\n            boredom += 1\n        }\n    }\n    return boredom\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S:\
    \ \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978489
- exit_code: 0
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    var boredoms = 0\n    var sentences = S.split(separator: \".\"\
    )\n    for sentence in sentences {\n        var words = sentence.split(separator:\
    \ \" \")\n        if words[0] == \"I\" {\n            boredoms += 1\n        }\n\
    \    }\n    return boredoms\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978489
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    return S.components(separatedBy: \".?!\").filter { $0.hasPrefix(\"\
    I\") }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_bored(S: \"Hello\
    \ world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpj82a067l.swift:11:14: error: value of type 'String' has no member\
    \ 'components'\n    return S.components(separatedBy: \".?!\").filter { $0.hasPrefix(\"\
    I\") }.count\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978489
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    return S.components(separatedBy: \".!?\").filter { $0.hasPrefix(\"\
    I\") }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_bored(S: \"Hello\
    \ world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpg16cqbx6.swift:11:14: error: value of type 'String' has no member\
    \ 'components'\n    return S.components(separatedBy: \".!?\").filter { $0.hasPrefix(\"\
    I\") }.count\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978489
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n  let s = S.replacingOccurrences(of: \"\\\\.\", with: \".\", options:\
    \ .regularExpression)\n  return s.components(separatedBy: \".\")\n    .map({ $0.trimmingCharacters(in:\
    \ .whitespaces) })\n    .map({ $0.components(separatedBy: \" \") })\n    .filter({\
    \ $0.count > 0 && $0[0] == \"I\" })\n    .count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"Is the\
    \ sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmppgd322wj.swift:11:13: error: value of type 'String' has no member\
    \ 'replacingOccurrences'\n  let s = S.replacingOccurrences(of: \"\\\\.\", with:\
    \ \".\", options: .regularExpression)\n          ~ ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmppgd322wj.swift:11:66:\
    \ error: cannot infer contextual base in reference to member 'regularExpression'\n\
    \  let s = S.replacingOccurrences(of: \"\\\\.\", with: \".\", options: .regularExpression)\n\
    \                                                                ~^~~~~~~~~~~~~~~~~\n\
    /tmp/tmppgd322wj.swift:13:39: error: cannot infer contextual base in reference\
    \ to member 'whitespaces'\n    .map({ $0.trimmingCharacters(in: .whitespaces)\
    \ })\n                                     ~^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978496
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    var boredoms: Int = 0\n    let sentences = S.components(separatedBy:\
    \ [\".\", \"?\", \"!\"])\n    for sentence in sentences {\n        if sentence.hasPrefix(\"\
    I\") {\n            boredoms += 1\n        }\n    }\n    return boredoms\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S:\
    \ \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpc_a1q3dx.swift:12:23: error: value of type 'String' has no member\
    \ 'components'\n    let sentences = S.components(separatedBy: [\".\", \"?\", \"\
    !\"])\n                    ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978489
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    var count = 0\n    var ar = S.components(separatedBy: [\".\",\
    \ \"?\", \"!\"])\n    for i in ar {\n        if (i.hasPrefix(\"I\")) {\n     \
    \       count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"\
    Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp4ggat9e6.swift:12:16: error: value of type 'String' has no member\
    \ 'components'\n    var ar = S.components(separatedBy: [\".\", \"?\", \"!\"])\n\
    \             ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978489
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    // Convert string to all lower case\n    let lowercase = S.lowercased()\n\
    \    // Get sentences separated by \". \", \"? \", \"! \"\n    let sentences =\
    \ lowercase.components(separatedBy: \". \")\n    var count = 0\n    for sentence\
    \ in sentences {\n        // If the sentence begins with \"i\" then add one to\
    \ count\n        if sentence.hasPrefix(\"i\") {\n            count += 1\n    \
    \    }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpu36xr10y.swift:14:31: error: value of type 'String' has no member\
    \ 'components'\n    let sentences = lowercase.components(separatedBy: \". \")\n\
    \                    ~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978489
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    return S.components(separatedBy: \"I\").count - 1\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S:\
    \ \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpbpn_igbt.swift:11:14: error: value of type 'String' has no member\
    \ 'components'\n    return S.components(separatedBy: \"I\").count - 1\n      \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978488
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    let startWord = \"I\"\n    let delimiter = \"!?.\"\n    let words\
    \ = S.components(separatedBy: CharacterSet(charactersIn: delimiter))\n    var\
    \ nboredoms = 0\n    for word in words {\n        if word.trimmingCharacters(in:\
    \ .whitespacesAndNewlines).hasPrefix(startWord) {\n            nboredoms += 1\n\
    \        }\n    }\n    return nboredoms\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\"\
    ) == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\"\
    ) == 0)\nassert(is_bored(S: \"I feel good today. I will be productive. will kill\
    \ It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmppt9vqxsf.swift:13:43: error: cannot find 'CharacterSet' in scope\n\
    \    let words = S.components(separatedBy: CharacterSet(charactersIn: delimiter))\n\
    \                                          ^~~~~~~~~~~~\n/tmp/tmppt9vqxsf.swift:13:19:\
    \ error: value of type 'String' has no member 'components'\n    let words = S.components(separatedBy:\
    \ CharacterSet(charactersIn: delimiter))\n                ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978489
- exit_code: 0
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    var count = 0\n    let sentences = S.split { $0 == \".\" || $0\
    \ == \"?\" || $0 == \"!\" }\n    for sentence in sentences {\n        let words\
    \ = sentence.split { $0 == \" \" }\n        if words.first.map({ $0 == \"I\" })\
    \ ?? false {\n            count += 1\n        }\n    }\n    return count\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S:\
    \ \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978490
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    let sentences = S.components(separatedBy: [\".\", \"?\", \"!\"\
    ])\n    return sentences.filter({$0.hasPrefix(\"I\")}).count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S:\
    \ \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpmrn7g223.swift:11:23: error: value of type 'String' has no member\
    \ 'components'\n    let sentences = S.components(separatedBy: [\".\", \"?\", \"\
    !\"])\n                    ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978489
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    return S.components(separatedBy: \".\").filter({$0.hasPrefix(\"\
    I\")}).count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_bored(S: \"Hello\
    \ world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpy1lfk17p.swift:11:14: error: value of type 'String' has no member\
    \ 'components'\n    return S.components(separatedBy: \".\").filter({$0.hasPrefix(\"\
    I\")}).count\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978489
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    var ret = 0\n    var words = S.split(separator: \" \")\n    for\
    \ word in words {\n        if word == \"I\" {\n            ret += 1\n        }\n\
    \    }\n    return ret\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: Exception
  stderr: 'tmpblwqs9pe/tmpblwqs9pe.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aec199d8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aec196cfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aec196cf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aec196ce7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpblwqs9pe                        0x000055d36f023aa8 <unavailable> + 6824

    5    libc.so.6                          0x00002aec19bc4460 __libc_start_main +
    245

    6    tmpblwqs9pe                        0x000055d36f0233a9 <unavailable> + 5033

    '
  stdout: ''
  timestamp: 1659978490
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    let arr = S.split(separator: \".\")\n    var bored = 0\n    for\
    \ i in arr {\n        if i.hasPrefix(\"I\") {\n            bored += 1\n      \
    \  }\n    }\n    return bored\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: Exception
  stderr: 'tmp3zb5efe1/tmp3zb5efe1.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab739646c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab73933db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab73933d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab73933c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3zb5efe1                        0x00005572565c37cb <unavailable> + 6091

    5    libc.so.6                          0x00002ab739832460 __libc_start_main +
    245

    6    tmp3zb5efe1                        0x00005572565c33a9 <unavailable> + 5033

    '
  stdout: ''
  timestamp: 1659978490
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n  return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: Exception
  stderr: 'tmpz3u4qvjn/tmpz3u4qvjn.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b81a43e9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b81a40e0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b81a40e0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b81a40df7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz3u4qvjn                        0x000055cda9f5b3b2 <unavailable> + 5042

    5    libc.so.6                          0x00002b81a45d5460 __libc_start_main +
    245

    6    tmpz3u4qvjn                        0x000055cda9f5aee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659978490
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    let sentences = S.components(separatedBy: \".!?\")\n    var boredoms\
    \ = 0\n    for sentence in sentences {\n        let words = sentence.split(separator:\
    \ \" \")\n        if words.count > 0 && words[0] == \"I\" {\n            boredoms\
    \ += 1\n        }\n    }\n    return boredoms\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"Is the\
    \ sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpkwhw_fjy.swift:11:23: error: value of type 'String' has no member\
    \ 'components'\n    let sentences = S.components(separatedBy: \".!?\")\n     \
    \               ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978489
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    var words = S.components(separatedBy: CharacterSet(charactersIn:\
    \ \"?!.\"))\n    return words.filter({$0.hasPrefix(\"I\")}).count\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S:\
    \ \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpzgnkjggt.swift:11:43: error: cannot find 'CharacterSet' in scope\n\
    \    var words = S.components(separatedBy: CharacterSet(charactersIn: \"?!.\"\
    ))\n                                          ^~~~~~~~~~~~\n/tmp/tmpzgnkjggt.swift:11:19:\
    \ error: value of type 'String' has no member 'components'\n    var words = S.components(separatedBy:\
    \ CharacterSet(charactersIn: \"?!.\"))\n                ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978489
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    // Split the string by sentences, delimited by '.', '?' or '!'\n\
    \    let sentences = S.split(separator: \".\", maxSplits: .max, omittingEmptySubsequences:\
    \ true)\n    // Filter the array of sentences\n    let boredSentences = sentences.filter({\
    \ $0.first == \"I\" })\n    // Return the number of sentences that were filtered\n\
    \    return boredSentences.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: Exception
  stderr: 'tmp2c20x8ta/tmp2c20x8ta.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aedac47ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aedac175b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aedac175988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aedac1747b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2c20x8ta                        0x0000561c8be3473b <unavailable> + 5947

    5    libc.so.6                          0x00002aedac66a460 __libc_start_main +
    245

    6    tmp2c20x8ta                        0x0000561c8be34319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659978490
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: Exception
  stderr: 'tmpblupsx62/tmpblupsx62.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8568fb4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8568cabb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8568cab988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8568caa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpblupsx62                        0x00005562b024d3b2 <unavailable> + 5042

    5    libc.so.6                          0x00002b85691a0460 __libc_start_main +
    245

    6    tmpblupsx62                        0x00005562b024cee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659978488
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: Exception
  stderr: 'tmpblupsx62/tmpblupsx62.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8568fb4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8568cabb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8568cab988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8568caa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpblupsx62                        0x00005562b024d3b2 <unavailable> + 5042

    5    libc.so.6                          0x00002b85691a0460 __libc_start_main +
    245

    6    tmpblupsx62                        0x00005562b024cee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659978488
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: Exception
  stderr: 'tmpblupsx62/tmpblupsx62.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8568fb4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8568cabb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8568cab988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8568caa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpblupsx62                        0x00005562b024d3b2 <unavailable> + 5042

    5    libc.so.6                          0x00002b85691a0460 __libc_start_main +
    245

    6    tmpblupsx62                        0x00005562b024cee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659978488
- exit_code: 0
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n\treturn S.split(separator: \".\", omittingEmptySubsequences: true).filter\
    \ {$0.split(separator: \" \").first == \"I\"}.count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"\
    Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978490
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    let delimiters = CharacterSet(charactersIn: \".!?\")\n    let\
    \ words = S.components(separatedBy: delimiters)\n    var boredoms = 0\n    for\
    \ word in words {\n        let trimmedWord = word.trimmingCharacters(in: .whitespaces)\n\
    \        if trimmedWord.hasPrefix(\"I\") {\n            boredoms += 1\n      \
    \  }\n    }\n    return boredoms\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpc3tn78p4.swift:11:22: error: cannot find 'CharacterSet' in scope\n\
    \    let delimiters = CharacterSet(charactersIn: \".!?\")\n                  \
    \   ^~~~~~~~~~~~\n/tmp/tmpc3tn78p4.swift:12:19: error: value of type 'String'\
    \ has no member 'components'\n    let words = S.components(separatedBy: delimiters)\n\
    \                ~ ^~~~~~~~~~\n/tmp/tmpc3tn78p4.swift:15:56: error: cannot infer\
    \ contextual base in reference to member 'whitespaces'\n        let trimmedWord\
    \ = word.trimmingCharacters(in: .whitespaces)\n                              \
    \                        ~^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978489
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    let arr_str = S.split(separator: \".\").map{String($0)}.filter{$0\
    \ != \"\"}\n    let result = arr_str.reduce(0, { (acc, str) -> Int in\n      \
    \  return acc + (str.first == \"I\" ? 1 : 0)\n    })\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S:\
    \ \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: Exception
  stderr: 'tmpvgfan6eu/tmpvgfan6eu.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab163e84c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab163b7bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab163b7b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab163b7a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvgfan6eu                        0x000055dc3aca383b <unavailable> + 6203

    5    libc.so.6                          0x00002ab164070460 __libc_start_main +
    245

    6    tmpvgfan6eu                        0x000055dc3aca3419 <unavailable> + 5145

    '
  stdout: ''
  timestamp: 1659978490
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    return S.components(separatedBy: \".?!\").reduce(0) {\n      \
    \  $0 + ($1.hasPrefix(\"I\") ? 1 : 0)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"Is the\
    \ sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpmb7l440v.swift:11:14: error: value of type 'String' has no member\
    \ 'components'\n    return S.components(separatedBy: \".?!\").reduce(0) {\n  \
    \         ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978490
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    let split = S.characters.split(separator: \".\")\n    var count\
    \ = 0\n    for s in split {\n        if String(s.prefix(2)) == \"I \" {\n    \
    \        count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S:\
    \ \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpy1l3v14p.swift:11:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    let split = S.characters.split(separator: \".\")\n\
    \                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1659978490
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n  var boredoms = 0\n  let sentenceSeparators = NSCharacterSet(charactersInString:\
    \ \"!?.\")\n  let sentences = S.componentsSeparatedByCharactersInSet(sentenceSeparators)\n\
    \  for sentence in sentences {\n    if sentence.characters.first == \"I\" {\n\
    \      boredoms += 1\n    }\n  }\n  return boredoms\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"\
    Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp68h1y1ze.swift:12:28: error: cannot find 'NSCharacterSet' in scope\n\
    \  let sentenceSeparators = NSCharacterSet(charactersInString: \"!?.\")\n    \
    \                       ^~~~~~~~~~~~~~\n/tmp/tmp68h1y1ze.swift:13:21: error: value\
    \ of type 'String' has no member 'componentsSeparatedByCharactersInSet'\n  let\
    \ sentences = S.componentsSeparatedByCharactersInSet(sentenceSeparators)\n   \
    \               ~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978490
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    let words = S.split(separator: \" \")\n    var count = 0\n   \
    \ for word in words {\n        if word == \"I\" {\n            count += 1\n  \
    \      }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: Exception
  stderr: 'tmpz1t_23s2/tmpz1t_23s2.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af79c480c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af79c177b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af79c177988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af79c1767b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz1t_23s2                        0x00005596e0026aa8 <unavailable> + 6824

    5    libc.so.6                          0x00002af79c66c460 __libc_start_main +
    245

    6    tmpz1t_23s2                        0x00005596e00263a9 <unavailable> + 5033

    '
  stdout: ''
  timestamp: 1659978490
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    let splitted = S.split(separator: \" \")\n    var idx = 0\n  \
    \  var count = 0\n    while idx < splitted.count {\n        if splitted[idx] ==\
    \ \"I\" {\n            count += 1\n        }\n        idx += 1\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_bored(S: \"Hello world\"\
    ) == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"\
    I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S: \"\
    I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: Exception
  stderr: 'tmp6qq52ep6/tmp6qq52ep6.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab94ef36c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab94ec2db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab94ec2d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab94ec2c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6qq52ep6                        0x0000557dc7fbf938 <unavailable> + 6456

    5    libc.so.6                          0x00002ab94f122460 __libc_start_main +
    245

    6    tmp6qq52ep6                        0x0000557dc7fbf239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659978490
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n\tvar boredoms = 0\n\tvar matched = false\n\tfor (_, r) in S.utf8.enumerated()\
    \ {\n\t\tlet u = UnicodeScalar(r)\n\t\tif u == \".\" || u == \"?\" || u == \"\
    !\" {\n\t\t\tmatched = false\n\t\t} else if u == \"I\" && !matched {\n\t\t\tboredoms\
    \ += 1\n\t\t\tmatched = true\n\t\t}\n\t}\n\treturn boredoms\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S:\
    \ \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: Exception
  stderr: 'tmp1hcp8uwz/tmp1hcp8uwz.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae2bdbe3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae2bd8dab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae2bd8da988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae2bd8d97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1hcp8uwz                        0x00005614139a071b <unavailable> + 5915

    5    libc.so.6                          0x00002ae2bddcf460 __libc_start_main +
    245

    6    tmp1hcp8uwz                        0x00005614139a02f9 <unavailable> + 4857

    '
  stdout: ''
  timestamp: 1659978490
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    if S.contains(\"I\") {\n        return 1\n    }\n    return 0\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S:\
    \ \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: Exception
  stderr: 'tmpmhs6cr55/tmpmhs6cr55.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea3d1cfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea3cec6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea3cec6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea3cec57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmhs6cr55                        0x000055f4043f14cb <unavailable> + 5323

    5    libc.so.6                          0x00002aea3d3bb460 __libc_start_main +
    245

    6    tmpmhs6cr55                        0x000055f4043f10a9 <unavailable> + 4265

    '
  stdout: ''
  timestamp: 1659978490
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n  return S.characters.split(separator: \".\").reduce(0) {\n    if\
    \ $1.first == \"I\" {\n      return $0 + 1\n    }\n    return $0\n  }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S:\
    \ \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp41mxxozl.swift:11:12: error: 'characters' is unavailable: Please\
    \ use String directly\n  return S.characters.split(separator: \".\").reduce(0)\
    \ {\n           ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1659978490
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    let s = S.split(separator: \".\", omittingEmptySubsequences: true)\n\
    \    return s.reduce(0) { (result, x) -> Int in\n        var rs = result\n   \
    \     if x.prefix(1) == \"I\" {\n            rs += 1\n        }\n        return\
    \ rs\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(is_bored(S: \"Hello\
    \ world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: Exception
  stderr: 'tmpfrd0pjaw/tmpfrd0pjaw.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba1a63f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba1a60ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba1a60eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba1a60ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfrd0pjaw                        0x000055fb62cd272b <unavailable> + 5931

    5    libc.so.6                          0x00002ba1a65e0460 __libc_start_main +
    245

    6    tmpfrd0pjaw                        0x000055fb62cd2309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1659978490
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    let words = S.split(separator: \" \")\n    let filtered = words.filter\
    \ { $0.lowercased() == \"i\" }\n    let count = filtered.count\n    if count >\
    \ 0 {\n        return count\n    }\n    return 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"\
    Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: Exception
  stderr: 'tmp2mtmzp8j/tmp2mtmzp8j.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7d0e8c8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7d0e5bfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7d0e5bf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7d0e5be7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2mtmzp8j                        0x000055d2327ef9d8 <unavailable> + 6616

    5    libc.so.6                          0x00002b7d0eab4460 __libc_start_main +
    245

    6    tmp2mtmzp8j                        0x000055d2327ef2d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1659978490
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    let sentences = S.split(separator: \".\").map({ String($0) }).filter({\
    \ $0.count > 0 })\n    let boredoms = sentences.filter({ $0.hasPrefix(\"I\") })\n\
    \    return boredoms.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: Exception
  stderr: 'tmpr1ib6ev5/tmpr1ib6ev5.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0e6c127c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0e6be1eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0e6be1e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0e6be1d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr1ib6ev5                        0x000056049d06480b <unavailable> + 6155

    5    libc.so.6                          0x00002b0e6c313460 __libc_start_main +
    245

    6    tmpr1ib6ev5                        0x000056049d0643e9 <unavailable> + 5097

    '
  stdout: ''
  timestamp: 1659978490
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    var boredoms = 0\n    let delimiters = NSCharacterSet(charactersInString:\
    \ \"!.? \")\n    let capital_I = NSCharacterSet(charactersInString: \"I\")\n \
    \   let words = S.componentsSeparatedByCharactersInSet(delimiters)\n    for word\
    \ in words {\n        if word.uppercaseString.hasPrefix(\"I\") {\n           \
    \ boredoms += 1\n        }\n    }\n    return boredoms\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"\
    Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpc6tt435z.swift:12:22: error: cannot find 'NSCharacterSet' in scope\n\
    \    let delimiters = NSCharacterSet(charactersInString: \"!.? \")\n         \
    \            ^~~~~~~~~~~~~~\n/tmp/tmpc6tt435z.swift:13:21: error: cannot find\
    \ 'NSCharacterSet' in scope\n    let capital_I = NSCharacterSet(charactersInString:\
    \ \"I\")\n                    ^~~~~~~~~~~~~~\n/tmp/tmpc6tt435z.swift:14:19: error:\
    \ value of type 'String' has no member 'componentsSeparatedByCharactersInSet'\n\
    \    let words = S.componentsSeparatedByCharactersInSet(delimiters)\n        \
    \        ~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978490
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    let components = S.components(separatedBy: \".?!\")\n    return\
    \ components.filter { $0.hasPrefix(\"I\") }.count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"\
    Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpaybyh992.swift:11:24: error: value of type 'String' has no member\
    \ 'components'\n    let components = S.components(separatedBy: \".?!\")\n    \
    \                 ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978490
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    let array = S.split(separator: \" \")\n    var count = 0\n   \
    \ for word in array {\n        if word == \"I\" {\n            count += 1\n  \
    \      }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: Exception
  stderr: 'tmpydz5u0ve/tmpydz5u0ve.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b90a52f6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b90a4fedb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b90a4fed988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b90a4fec7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpydz5u0ve                        0x000055ed21a08aa8 <unavailable> + 6824

    5    libc.so.6                          0x00002b90a54e2460 __libc_start_main +
    245

    6    tmpydz5u0ve                        0x000055ed21a083a9 <unavailable> + 5033

    '
  stdout: ''
  timestamp: 1659978490
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    return S.lowercased().components(separatedBy: \".?!\").filter({\n\
    \        $0.starts(with: \"i\")\n    }).count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"Is the\
    \ sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp9b2u6g26.swift:11:27: error: value of type 'String' has no member\
    \ 'components'\n    return S.lowercased().components(separatedBy: \".?!\").filter({\n\
    \           ~~~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978490
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    return S.split(separator: \" \").filter({ $0.starts(with: \"I\"\
    ) }).count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(is_bored(S: \"Hello\
    \ world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: Exception
  stderr: 'tmppfwsd1sd/tmppfwsd1sd.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b35386bbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b35383b2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b35383b2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b35383b17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppfwsd1sd                        0x0000561fe39f46fb <unavailable> + 5883

    5    libc.so.6                          0x00002b35388a7460 __libc_start_main +
    245

    6    tmppfwsd1sd                        0x0000561fe39f42d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1659978490
- exit_code: 0
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    var words = S.split(separator: \" \")\n    var count = 0\n   \
    \ var sentenceStart = true\n    for word in words {\n        if sentenceStart\
    \ && word == \"I\" {\n            count += 1\n        }\n        sentenceStart\
    \ = word.last == \".\" || word.last == \"?\" || word.last == \"!\"\n    }\n  \
    \  return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_bored(S: \"Hello\
    \ world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978490
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: Exception
  stderr: 'tmpu_h86z27/tmpu_h86z27.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b93e1d4bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b93e1a42b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b93e1a42988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b93e1a417b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu_h86z27                        0x00005596cea15264 <unavailable> + 4708

    5    libc.so.6                          0x00002b93e1f37460 __libc_start_main +
    245

    6    tmpu_h86z27                        0x00005596cea14ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659978489
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    if S.isEmpty {\n        return 0\n    }\n    var boredoms = 0\n\
    \    var words = S.components(separatedBy: \" \")\n    var inQuotes = false\n\
    \    var inBoredom = false\n    var previousWord = \"\"\n    for word in words\
    \ {\n        if word.first == \"\\\"\" {\n            inQuotes = !inQuotes\n \
    \       }\n        if previousWord == \"I\" && word.first == \"\\\"\" {\n    \
    \        inBoredom = true\n        }\n        if word.first == \".\" || word.first\
    \ == \"?\" || word.first == \"!\" {\n            if !inQuotes && inBoredom {\n\
    \                boredoms += 1\n            }\n            inBoredom = false\n\
    \        }\n        previousWord = word\n    }\n    return boredoms\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S:\
    \ \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp_xnsyvfv.swift:15:19: error: value of type 'String' has no member\
    \ 'components'\n    var words = S.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978490
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n  return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: Exception
  stderr: 'tmpz3u4qvjn/tmpz3u4qvjn.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b81a43e9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b81a40e0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b81a40e0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b81a40df7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz3u4qvjn                        0x000055cda9f5b3b2 <unavailable> + 5042

    5    libc.so.6                          0x00002b81a45d5460 __libc_start_main +
    245

    6    tmpz3u4qvjn                        0x000055cda9f5aee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659978490
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    var sentences = S.components(separatedBy: \".\")\n    sentences.append(contentsOf:\
    \ S.components(separatedBy: \"?\"))\n    sentences.append(contentsOf: S.components(separatedBy:\
    \ \"!\"))\n    return sentences.filter { $0.trimmingCharacters(in: .whitespacesAndNewlines).hasPrefix(\"\
    I\") }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_bored(S: \"Hello\
    \ world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmptzwr2y4k.swift:11:23: error: value of type 'String' has no member\
    \ 'components'\n    var sentences = S.components(separatedBy: \".\")\n       \
    \             ~ ^~~~~~~~~~\n/tmp/tmptzwr2y4k.swift:12:36: error: value of type\
    \ 'String' has no member 'components'\n    sentences.append(contentsOf: S.components(separatedBy:\
    \ \"?\"))\n                                 ~ ^~~~~~~~~~\n/tmp/tmptzwr2y4k.swift:13:36:\
    \ error: value of type 'String' has no member 'components'\n    sentences.append(contentsOf:\
    \ S.components(separatedBy: \"!\"))\n                                 ~ ^~~~~~~~~~\n\
    /tmp/tmptzwr2y4k.swift:14:58: error: cannot infer contextual base in reference\
    \ to member 'whitespacesAndNewlines'\n    return sentences.filter { $0.trimmingCharacters(in:\
    \ .whitespacesAndNewlines).hasPrefix(\"I\") }.count\n                        \
    \                                ~^~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978490
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    let sentences = S.split(separator: \".\").map(String.init)\n \
    \   return sentences.filter({ $0.hasPrefix(\"I\") }).count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S:\
    \ \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: Exception
  stderr: 'tmpd5ka37dr/tmpd5ka37dr.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002accf93efc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002accf90e6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002accf90e6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002accf90e57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd5ka37dr                        0x000055ac038a57bb <unavailable> + 6075

    5    libc.so.6                          0x00002accf95db460 __libc_start_main +
    245

    6    tmpd5ka37dr                        0x000055ac038a5399 <unavailable> + 5017

    '
  stdout: ''
  timestamp: 1659978490
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    var boredoms = 0\n    var wordList = S.components(separatedBy:\
    \ \" \")\n    for word in wordList {\n        if word.characters.first == \"I\"\
    \ {\n            boredoms += 1\n        }\n    }\n    return boredoms\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S:\
    \ \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpaiflt5vk.swift:12:22: error: value of type 'String' has no member\
    \ 'components'\n    var wordList = S.components(separatedBy: \" \")\n        \
    \           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978490
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    return S.components(separatedBy: \" \").filter { $0 == \"I\" }.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S:\
    \ \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp154xy7fl.swift:11:14: error: value of type 'String' has no member\
    \ 'components'\n    return S.components(separatedBy: \" \").filter { $0 == \"\
    I\" }.count\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978490
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    let s = S.lowercased()\n    let pattern = \"\\\\bI\\\\b\"\n  \
    \  let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    let\
    \ matches = regex.matches(in: s, options: [], range: NSRange(location: 0, length:\
    \ s.count))\n    return matches.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\"\
    ) == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\"\
    ) == 0)\nassert(is_bored(S: \"I feel good today. I will be productive. will kill\
    \ It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpxpi78vdw.swift:13:22: error: cannot find 'NSRegularExpression'\
    \ in scope\n    let regex = try! NSRegularExpression(pattern: pattern, options:\
    \ [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpxpi78vdw.swift:14:60:\
    \ error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: s,\
    \ options: [], range: NSRange(location: 0, length: s.count))\n               \
    \                                            ^~~~~~~\n"
  stdout: ''
  timestamp: 1659978490
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n  return S.split(separator: \".\").reduce(0) {\n    $0 + ($1.hasPrefix(\"\
    I\") ? 1 : 0)\n  }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_bored(S: \"Hello\
    \ world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: Exception
  stderr: 'tmpx57if96u/tmpx57if96u.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afc4c6fac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afc4c3f1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afc4c3f1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afc4c3f07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx57if96u                        0x000055beecf7568b <unavailable> + 5771

    5    libc.so.6                          0x00002afc4c8e6460 __libc_start_main +
    245

    6    tmpx57if96u                        0x000055beecf75269 <unavailable> + 4713

    '
  stdout: ''
  timestamp: 1659978490
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    var boredoms = 0\n    for sentence in S.components(separatedBy:\
    \ [\".\", \"?\", \"!\"]) {\n        if sentence.count > 0 && sentence.hasPrefix(\"\
    I\") {\n            boredoms += 1\n        }\n    }\n    return boredoms\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S:\
    \ \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmplzpoms8t.swift:12:23: error: value of type 'String' has no member\
    \ 'components'\n    for sentence in S.components(separatedBy: [\".\", \"?\", \"\
    !\"]) {\n                    ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978490
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    var boredoms = 0\n    let boredoms_regex = Regex(\"^I\\s\")\n\
    \    for sentence in S.split(separator: \".\") {\n        if boredoms_regex.matches(sentence)\
    \ {\n            boredoms += 1\n        }\n    }\n    return boredoms\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S:\
    \ \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpj8a5ajlf.swift:12:36: error: invalid escape sequence in literal\n\
    \    let boredoms_regex = Regex(\"^I\\s\")\n                                 \
    \  ^\n/tmp/tmpj8a5ajlf.swift:12:38: error: missing argument for parameter #1 in\
    \ call\n    let boredoms_regex = Regex(\"^I\\s\")\n                          \
    \           ^\n                                     <#String#>\n_StringProcessing.Regex:3:12:\
    \ note: 'init(_:)' declared here\n    public init(_ pattern: String) throws\n\
    \           ^\n"
  stdout: ''
  timestamp: 1659978490
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    var boredoms = 0\n    let sentences = split(S) {$0 == \".\" ||\
    \ $0 == \"?\" || $0 == \"!\"}\n    for sentence in sentences {\n        if sentence.hasPrefix(\"\
    I\") {\n            boredoms++\n        }\n    }\n    return boredoms\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S:\
    \ \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmphhxxyu9j.swift:12:21: error: cannot find 'split' in scope\n   \
    \ let sentences = split(S) {$0 == \".\" || $0 == \"?\" || $0 == \"!\"}\n     \
    \               ^~~~~\n"
  stdout: ''
  timestamp: 1659978497
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    let sentences = S.components(separatedBy: [\".\", \"?\", \"!\"\
    ])\n    return sentences.filter { $0.hasPrefix(\"I\") }.count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S:\
    \ \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpnlh274o_.swift:11:23: error: value of type 'String' has no member\
    \ 'components'\n    let sentences = S.components(separatedBy: [\".\", \"?\", \"\
    !\"])\n                    ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978490
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    let boredoms = S.components(separatedBy: \".\")\n        .map\
    \ { $0.trimmingCharacters(in: .whitespacesAndNewlines) }\n        .filter { $0.hasPrefix(\"\
    I\") }\n    \n    return boredoms.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\"\
    ) == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\"\
    ) == 0)\nassert(is_bored(S: \"I feel good today. I will be productive. will kill\
    \ It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpyeuxtyr2.swift:11:22: error: value of type 'String' has no member\
    \ 'components'\n    let boredoms = S.components(separatedBy: \".\")\n        \
    \           ~ ^~~~~~~~~~\n/tmp/tmpyeuxtyr2.swift:12:43: error: cannot infer contextual\
    \ base in reference to member 'whitespacesAndNewlines'\n        .map { $0.trimmingCharacters(in:\
    \ .whitespacesAndNewlines) }\n                                         ~^~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978490
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    let sentences = split_sentences(S: S)\n    var boredoms = 0\n\
    \    for sentence in sentences {\n        if sentence.is_bored() {\n         \
    \   boredoms += 1\n        }\n    }\n    return boredoms\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S:\
    \ \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpc6pty1o7.swift:11:21: error: cannot find 'split_sentences' in scope\n\
    \    let sentences = split_sentences(S: S)\n                    ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978490
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    let sentences = S.components(separatedBy: [\".\", \"?\", \"!\"\
    ])\n    var boredoms = 0\n    for sentence in sentences {\n        if sentence.characters.first\
    \ == \"I\" {\n            boredoms += 1\n        }\n    }\n    return boredoms\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S:\
    \ \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmphi8y5691.swift:11:23: error: value of type 'String' has no member\
    \ 'components'\n    let sentences = S.components(separatedBy: [\".\", \"?\", \"\
    !\"])\n                    ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978490
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: Exception
  stderr: 'tmpblupsx62/tmpblupsx62.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8568fb4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8568cabb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8568cab988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8568caa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpblupsx62                        0x00005562b024d3b2 <unavailable> + 5042

    5    libc.so.6                          0x00002b85691a0460 __libc_start_main +
    245

    6    tmpblupsx62                        0x00005562b024cee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659978488
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    if S.isEmpty {\n        return 0\n    }\n    let sentences = S.components(separatedBy:\
    \ [\".\", \"?\", \"!\"])\n    var boredomCount = 0\n    for sentence in sentences\
    \ {\n        if sentence.hasPrefix(\"I\") {\n            boredomCount += 1\n \
    \       }\n    }\n    return boredomCount\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"Is the\
    \ sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpt5bxf354.swift:14:23: error: value of type 'String' has no member\
    \ 'components'\n    let sentences = S.components(separatedBy: [\".\", \"?\", \"\
    !\"])\n                    ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978490
- exit_code: 0
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    var words = S.split(separator: \" \")\n    var bored = 0\n   \
    \ for (index, word) in words.enumerated() {\n        if word == \"I\" {\n    \
    \        if index == 0 {\n                bored += 1\n            } else {\n \
    \               let sentence = words[0..<index].joined(separator: \" \")\n   \
    \             let punctuation = sentence.suffix(1)\n                if punctuation\
    \ == \".\" || punctuation == \"?\" || punctuation == \"!\" {\n               \
    \     bored += 1\n                }\n            }\n        }\n    }\n    return\
    \ bored\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_bored(S: \"Hello world\"\
    ) == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"\
    I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S: \"\
    I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978490
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    let sentencePattern = \"(^I\\\\b)\"\n    var sentenceIndex: [String.Index]\
    \ = []\n    var count = 0\n    let pattern = try! NSRegularExpression(pattern:\
    \ sentencePattern, options: .caseInsensitive)\n    if let results = pattern.firstMatch(in:\
    \ S, options: [], range: NSRange(location: 0, length: S.count)) {\n        count\
    \ += 1\n        sentenceIndex.append(S.index(S.startIndex, offsetBy: results.range.location))\n\
    \    }\n    //    print(sentenceIndex)\n    let stringArray = S.components(separatedBy:\
    \ \".\")\n    var l = stringArray.count\n    //    print(stringArray)\n    while\
    \ l != 0 {\n        l -= 1\n        let str = stringArray[l]\n        if let results\
    \ = pattern.firstMatch(in: str, options: [], range: NSRange(location: 0, length:\
    \ str.count)) {\n            count += 1\n            sentenceIndex.append(S.index(S.startIndex,\
    \ offsetBy: results.range.location))\n        }\n    }\n    //    print(sentenceIndex)\n\
    \    for item in sentenceIndex {\n        if let index = S.firstIndex(of: \"?\"\
    ) {\n            if item > index {\n                count -= 1\n            }\n\
    \        }\n        if let index = S.firstIndex(of: \"!\") {\n            if item\
    \ > index {\n                count -= 1\n            }\n        }\n    }\n   \
    \ return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_bored(S: \"Hello\
    \ world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpfjlsmgvn.swift:14:24: error: cannot find 'NSRegularExpression'\
    \ in scope\n    let pattern = try! NSRegularExpression(pattern: sentencePattern,\
    \ options: .caseInsensitive)\n                       ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpfjlsmgvn.swift:14:80:\
    \ error: cannot infer contextual base in reference to member 'caseInsensitive'\n\
    \    let pattern = try! NSRegularExpression(pattern: sentencePattern, options:\
    \ .caseInsensitive)\n                                                        \
    \                      ~^~~~~~~~~~~~~~~\n/tmp/tmpfjlsmgvn.swift:15:68: error:\
    \ cannot find 'NSRange' in scope\n    if let results = pattern.firstMatch(in:\
    \ S, options: [], range: NSRange(location: 0, length: S.count)) {\n          \
    \                                                         ^~~~~~~\n/tmp/tmpfjlsmgvn.swift:20:25:\
    \ error: value of type 'String' has no member 'components'\n    let stringArray\
    \ = S.components(separatedBy: \".\")\n                      ~ ^~~~~~~~~~\n/tmp/tmpfjlsmgvn.swift:26:74:\
    \ error: cannot find 'NSRange' in scope\n        if let results = pattern.firstMatch(in:\
    \ str, options: [], range: NSRange(location: 0, length: str.count)) {\n      \
    \                                                                   ^~~~~~~\n"
  stdout: ''
  timestamp: 1659978490
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    let sArray = S.components(separatedBy: [\".\", \"?\", \"!\"])\n\
    \    var boredomCount = 0\n    for i in sArray {\n        if i.hasPrefix(\"I\"\
    ) {\n            boredomCount += 1\n        }\n    }\n    return boredomCount\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S:\
    \ \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpcbco1_nd.swift:11:20: error: value of type 'String' has no member\
    \ 'components'\n    let sArray = S.components(separatedBy: [\".\", \"?\", \"!\"\
    ])\n                 ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978490
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    let sentenceArray = S.components(separatedBy: [\".\", \"?\", \"\
    !\"])\n    var isBored = 0\n    for sentence in sentenceArray {\n        let words\
    \ = sentence.components(separatedBy: \" \")\n        if words.count > 0 {\n  \
    \          if words[0] == \"I\" {\n                isBored += 1\n            }\n\
    \        }\n    }\n    return isBored\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\"\
    ) == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\"\
    ) == 0)\nassert(is_bored(S: \"I feel good today. I will be productive. will kill\
    \ It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmptw08fy3u.swift:11:27: error: value of type 'String' has no member\
    \ 'components'\n    let sentenceArray = S.components(separatedBy: [\".\", \"?\"\
    , \"!\"])\n                        ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978490
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    let sentences = S.split(separator: \".\").joined(separator: \"\
    .\").split(separator: \"?\").joined(separator: \"?\").split(separator: \"!\").joined(separator:\
    \ \"!\").split(separator: \".\")\n    var boredoms = 0\n    for sentence in sentences\
    \ {\n        if sentence.starts(with: \"I\") {\n            boredoms += 1\n  \
    \      }\n    }\n    return boredoms\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\"\
    ) == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\"\
    ) == 0)\nassert(is_bored(S: \"I feel good today. I will be productive. will kill\
    \ It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\") == 0)"
  status: Exception
  stderr: 'tmp51f4ib10/tmp51f4ib10.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af282a13c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af28270ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af28270a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af2827097b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp51f4ib10                        0x0000560785b4888b <unavailable> + 6283

    5    libc.so.6                          0x00002af282bff460 __libc_start_main +
    245

    6    tmp51f4ib10                        0x0000560785b48469 <unavailable> + 5225

    '
  stdout: ''
  timestamp: 1659978490
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    return S.split(separator: \" \").filter({ $0.first == \"I\" }).count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S:\
    \ \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: Exception
  stderr: 'tmp40y30eiv/tmp40y30eiv.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b45f49aec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b45f46a5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b45f46a5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b45f46a47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp40y30eiv                        0x000055754b3346eb <unavailable> + 5867

    5    libc.so.6                          0x00002b45f4b9a460 __libc_start_main +
    245

    6    tmp40y30eiv                        0x000055754b3342c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1659978490
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    return S.components(separatedBy: \".\").filter {\n        $0.components(separatedBy:\
    \ \" \").first == \"I\"\n    }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\"\
    ) == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\"\
    ) == 0)\nassert(is_bored(S: \"I feel good today. I will be productive. will kill\
    \ It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpe70cwuml.swift:11:14: error: value of type 'String' has no member\
    \ 'components'\n    return S.components(separatedBy: \".\").filter {\n       \
    \    ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978490
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n  var words = S.split(separator: \" \")\n  var boredoms = 0\n  for\
    \ word in words {\n    if word == \"I\" {\n      boredoms += 1\n    }\n  }\n \
    \ return boredoms\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_bored(S: \"Hello\
    \ world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: Exception
  stderr: 'tmpe8ucsfwd/tmpe8ucsfwd.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afee1c32c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afee1929b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afee1929988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afee19287b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe8ucsfwd                        0x000055767dfd3aa8 <unavailable> + 6824

    5    libc.so.6                          0x00002afee1e1e460 __libc_start_main +
    245

    6    tmpe8ucsfwd                        0x000055767dfd33a9 <unavailable> + 5033

    '
  stdout: ''
  timestamp: 1659978490
- exit_code: 0
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    return S.split(separator: \"!\").reduce(0) { acc, el in\n    \
    \    acc + el.split(separator: \".\").reduce(0) { acc, el in\n            acc\
    \ + el.split(separator: \"?\").reduce(0) { acc, el in\n                acc + (el.split(separator:\
    \ \" \").first == \"I\" ? 1 : 0)\n            }\n        }\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S:\
    \ \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978490
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    let dict = [\"I\": true]\n    var boredoms = 0\n    var preceding\
    \ = \"\"\n    for char in S {\n        let key = String(char)\n        if dict[key]\
    \ != nil {\n            if preceding == \" \" {\n                boredoms += 1\n\
    \            }\n        }\n        if key == \" \" {\n            preceding =\
    \ key\n        } else {\n            preceding = \"\"\n        }\n    }\n    return\
    \ boredoms\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(is_bored(S: \"Hello\
    \ world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: Exception
  stderr: 'tmpl3bugfhn/tmpl3bugfhn.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae7100bac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae70fdb1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae70fdb1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae70fdb07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpl3bugfhn                        0x000055989bd0e9b8 <unavailable> + 6584

    5    libc.so.6                          0x00002ae7102a6460 __libc_start_main +
    245

    6    tmpl3bugfhn                        0x000055989bd0e2b9 <unavailable> + 4793

    '
  stdout: ''
  timestamp: 1659978490
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    return S.components(separatedBy: \"I\").count - 1\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S:\
    \ \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpbpn_igbt.swift:11:14: error: value of type 'String' has no member\
    \ 'components'\n    return S.components(separatedBy: \"I\").count - 1\n      \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978488
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    return S.components(separatedBy: [\".\", \"?\", \"!\"]).reduce(0)\
    \ {\n        if $1.hasPrefix(\"I\") {\n            return $0 + 1\n        }\n\
    \        return $0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpcfu69_o5.swift:11:14: error: value of type 'String' has no member\
    \ 'components'\n    return S.components(separatedBy: [\".\", \"?\", \"!\"]).reduce(0)\
    \ {\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978490
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    return 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: Exception
  stderr: 'tmpmli_l4xf/tmpmli_l4xf.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af7bae3ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af7bab35b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af7bab35988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af7bab347b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmli_l4xf                        0x00005607ea768264 <unavailable> + 4708

    5    libc.so.6                          0x00002af7bb02a460 __libc_start_main +
    245

    6    tmpmli_l4xf                        0x00005607ea767ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659978490
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    let sentences = S.components(separatedBy: \".\")\n    var boredoms\
    \ = 0\n    for sentence in sentences {\n        let words = sentence.components(separatedBy:\
    \ \" \")\n        if words.count > 0 && words[0] == \"I\" {\n            boredoms\
    \ += 1\n        }\n    }\n    return boredoms\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"Is the\
    \ sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpfb28s05e.swift:11:23: error: value of type 'String' has no member\
    \ 'components'\n    let sentences = S.components(separatedBy: \".\")\n       \
    \             ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978490
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    let components = S.components(separatedBy: [\".\", \"?\", \"!\"\
    ])\n    return components.filter({ $0.starts(with: \"I\") }).count\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S:\
    \ \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp75glbekh.swift:11:24: error: value of type 'String' has no member\
    \ 'components'\n    let components = S.components(separatedBy: [\".\", \"?\",\
    \ \"!\"])\n                     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978490
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n\t\n\tvar count = 0\n\tlet end = S.count\n\tvar start = 0\n\t\n\t\
    while start < end {\n\t\tlet startI = S.index(S.startIndex, offsetBy: start)\n\
    \t\tlet endI = S.index(S.startIndex, offsetBy: start+1)\n\t\tlet c = S[startI..<endI]\n\
    \t\t\n\t\tif c == \".\" || c == \"?\" || c == \"!\" {\n\t\t\tstart += 1\n\t\t\t\
    continue\n\t\t}\n\t\t\n\t\tif c == \"I\" {\n\t\t\tcount += 1\n\t\t}\n\t\t\n\t\t\
    start += 1\n\t}\n\t\n\treturn count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\"\
    ) == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\"\
    ) == 0)\nassert(is_bored(S: \"I feel good today. I will be productive. will kill\
    \ It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\") == 0)"
  status: Exception
  stderr: 'tmpkyq_x9cr/tmpkyq_x9cr.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b26332cbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2632fc2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2632fc2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2632fc17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkyq_x9cr                        0x000055b927c4b65b <unavailable> + 5723

    5    libc.so.6                          0x00002b26334b7460 __libc_start_main +
    245

    6    tmpkyq_x9cr                        0x000055b927c4b239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659978490
- exit_code: 0
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    let s = S.split(separator: \".\")\n    \n    var count = 0\n \
    \   for sentence in s {\n        let s2 = sentence.split(separator: \" \")\n \
    \       if s2[0] == \"I\" {\n            count += 1\n        }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_bored(S: \"Hello world\"\
    ) == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"\
    I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S: \"\
    I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978490
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n  let delimiters = CharacterSet(charactersIn: \".?!\")\n  var numBoredoms\
    \ = 0\n  let sentences = S.components(separatedBy: delimiters)\n  for sentence\
    \ in sentences {\n    if sentence.trimmingCharacters(in: .whitespaces).lowercased().hasPrefix(\"\
    i\") {\n      numBoredoms += 1\n    }\n  }\n  return numBoredoms\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S:\
    \ \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpzt7vldu5.swift:11:20: error: cannot find 'CharacterSet' in scope\n\
    \  let delimiters = CharacterSet(charactersIn: \".?!\")\n                   ^~~~~~~~~~~~\n\
    /tmp/tmpzt7vldu5.swift:13:21: error: value of type 'String' has no member 'components'\n\
    \  let sentences = S.components(separatedBy: delimiters)\n                  ~\
    \ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978490
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    var count = 0\n    var add = false\n    let arr = S.map { String($0)\
    \ }\n    for i in 0..<arr.count {\n        if add == true {\n            if arr[i]\
    \ == \".\" || arr[i] == \"?\" || arr[i] == \"!\" {\n                add = false\n\
    \            }\n        } else {\n            if arr[i] == \"I\" {\n         \
    \       count += 1\n                add = true\n            }\n        }\n   \
    \ }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: Exception
  stderr: 'tmp5a2c955b/tmp5a2c955b.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7a70f96c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7a70c8db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7a70c8d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7a70c8c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5a2c955b                        0x000055a99251a71b <unavailable> + 5915

    5    libc.so.6                          0x00002b7a71182460 __libc_start_main +
    245

    6    tmp5a2c955b                        0x000055a99251a2f9 <unavailable> + 4857

    '
  stdout: ''
  timestamp: 1659978490
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    return S.components(separatedBy: \".!?\").filter {\n        $0.first\
    \ == \"I\"\n    }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpt5kq3get.swift:11:14: error: value of type 'String' has no member\
    \ 'components'\n    return S.components(separatedBy: \".!?\").filter {\n     \
    \      ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978490
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    var boredoms = 0\n    let sentences = S.characters.split { $0\
    \ == \".\" || $0 == \"?\" || $0 == \"!\" }\n        .map(String.init)\n    for\
    \ sentence in sentences {\n        let words = sentence.characters.split { $0\
    \ == \" \" }.map(String.init)\n        if words.count > 0 && words[0] == \"I\"\
    \ {\n            boredoms += 1\n        }\n    }\n    return boredoms\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S:\
    \ \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpxhk0spm7.swift:12:23: error: 'characters' is unavailable: Please\
    \ use String directly\n    let sentences = S.characters.split { $0 == \".\" ||\
    \ $0 == \"?\" || $0 == \"!\" }\n                      ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmpxhk0spm7.swift:15:30: error: 'characters'\
    \ is unavailable: Please use String directly\n        let words = sentence.characters.split\
    \ { $0 == \" \" }.map(String.init)\n                             ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659978490
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    return S.components(separatedBy: [\".\", \"?\", \"!\"]).filter({\
    \ $0.hasPrefix(\"I\") }).count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpvjybwk4b.swift:11:14: error: value of type 'String' has no member\
    \ 'components'\n    return S.components(separatedBy: [\".\", \"?\", \"!\"]).filter({\
    \ $0.hasPrefix(\"I\") }).count\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978490
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    let sep = CharacterSet(charactersIn: \"?.!\")\n    let components\
    \ = S.components(separatedBy: sep)\n    var count = 0\n    for str in components\
    \ {\n        let tmp = str.trimmingCharacters(in: .whitespaces)\n        if tmp.hasPrefix(\"\
    I\") {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S:\
    \ \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmptk1qq7qu.swift:11:15: error: cannot find 'CharacterSet' in scope\n\
    \    let sep = CharacterSet(charactersIn: \"?.!\")\n              ^~~~~~~~~~~~\n\
    /tmp/tmptk1qq7qu.swift:12:24: error: value of type 'String' has no member 'components'\n\
    \    let components = S.components(separatedBy: sep)\n                     ~ ^~~~~~~~~~\n\
    /tmp/tmptk1qq7qu.swift:15:47: error: cannot infer contextual base in reference\
    \ to member 'whitespaces'\n        let tmp = str.trimmingCharacters(in: .whitespaces)\n\
    \                                             ~^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978490
- exit_code: 0
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    return S.split(separator: \".\").filter {\n        $0.split(separator:\
    \ \" \").first == \"I\"\n    }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\"\
    ) == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\"\
    ) == 0)\nassert(is_bored(S: \"I feel good today. I will be productive. will kill\
    \ It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\") == 0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978490
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    let count = S.components(separatedBy: [\".\", \"?\", \"!\"]).reduce(0)\
    \ {\n        $0 + ($1.trimmingCharacters(in: .whitespaces).hasPrefix(\"I\") ?\
    \ 1 : 0)\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp7tia6u0z.swift:11:19: error: value of type 'String' has no member\
    \ 'components'\n    let count = S.components(separatedBy: [\".\", \"?\", \"!\"\
    ]).reduce(0) {\n                ~ ^~~~~~~~~~\n/tmp/tmp7tia6u0z.swift:12:42: error:\
    \ cannot infer contextual base in reference to member 'whitespaces'\n        $0\
    \ + ($1.trimmingCharacters(in: .whitespaces).hasPrefix(\"I\") ? 1 : 0)\n     \
    \                                   ~^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978490
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    let sentences = S.replacingOccurrences(of: \"!\", with: \".\"\
    ).replacingOccurrences(of: \"?\", with: \".\").components(separatedBy: \".\")\n\
    \    return sentences.filter { $0.trimmingCharacters(in: .whitespaces).hasPrefix(\"\
    I\") }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_bored(S: \"Hello\
    \ world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpwg_1nuyj.swift:11:23: error: value of type 'String' has no member\
    \ 'replacingOccurrences'\n    let sentences = S.replacingOccurrences(of: \"!\"\
    , with: \".\").replacingOccurrences(of: \"?\", with: \".\").components(separatedBy:\
    \ \".\")\n                    ~ ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpwg_1nuyj.swift:12:58:\
    \ error: cannot infer contextual base in reference to member 'whitespaces'\n \
    \   return sentences.filter { $0.trimmingCharacters(in: .whitespaces).hasPrefix(\"\
    I\") }.count\n                                                        ~^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978490
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    return S.components(separatedBy: \".\").reduce(0) { $0 + ($1.hasPrefix(\"\
    I\") ? 1 : 0) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_bored(S: \"Hello\
    \ world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp218avwx0.swift:11:14: error: value of type 'String' has no member\
    \ 'components'\n    return S.components(separatedBy: \".\").reduce(0) { $0 + ($1.hasPrefix(\"\
    I\") ? 1 : 0) }\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978490
- exit_code: 0
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    var boredoms = 0\n    let sentences = S.split { $0 == \".\" ||\
    \ $0 == \"?\" || $0 == \"!\" }\n    for sentence in sentences {\n        let words\
    \ = sentence.split { $0 == \" \" }\n        if words.first == \"I\" {\n      \
    \      boredoms += 1\n        }\n    }\n    return boredoms\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S:\
    \ \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978490
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: Exception
  stderr: 'tmpblupsx62/tmpblupsx62.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8568fb4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8568cabb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8568cab988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8568caa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpblupsx62                        0x00005562b024d3b2 <unavailable> + 5042

    5    libc.so.6                          0x00002b85691a0460 __libc_start_main +
    245

    6    tmpblupsx62                        0x00005562b024cee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659978488
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n\tvar boredoms = 0\n\tlet delimiters = NSCharacterSet(charactersInString:\
    \ \"?!.\")\n\tlet stringComponents = S.componentsSeparatedByCharactersInSet(delimiters)\n\
    \tfor stringComponent in stringComponents {\n\t\tlet newString = stringComponent.stringByTrimmingCharactersInSet(\n\
    \t\t\tNSCharacterSet.whitespaceAndNewlineCharacterSet())\n\t\tif newString.characters.count\
    \ > 0 {\n\t\t\tlet index = newString.startIndex.advancedBy(1)\n\t\t\tif newString.substringToIndex(index)\
    \ == \"I\" {\n\t\t\t\tboredoms += 1\n\t\t\t}\n\t\t}\n\t}\n\treturn boredoms\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S:\
    \ \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpalvcwxl2.swift:12:19: error: cannot find 'NSCharacterSet' in scope\n\
    \        let delimiters = NSCharacterSet(charactersInString: \"?!.\")\n      \
    \                   ^~~~~~~~~~~~~~\n/tmp/tmpalvcwxl2.swift:13:27: error: value\
    \ of type 'String' has no member 'componentsSeparatedByCharactersInSet'\n    \
    \    let stringComponents = S.componentsSeparatedByCharactersInSet(delimiters)\n\
    \                               ~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpalvcwxl2.swift:16:4:\
    \ error: cannot find 'NSCharacterSet' in scope\n                        NSCharacterSet.whitespaceAndNewlineCharacterSet())\n\
    \                        ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978490
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    var res = 0\n    let sentences = S.split(separator: \".\")\n \
    \   for sentence in sentences {\n        if sentence.prefix(2) == \"I \" {\n \
    \           res += 1\n        }\n    }\n    return res\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"\
    Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: Exception
  stderr: 'tmpszybt78d/tmpszybt78d.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3b5c1a5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3b5be9cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3b5be9c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3b5be9b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpszybt78d                        0x00005586a7430a7e <unavailable> + 6782

    5    libc.so.6                          0x00002b3b5c391460 __libc_start_main +
    245

    6    tmpszybt78d                        0x00005586a7430449 <unavailable> + 5193

    '
  stdout: ''
  timestamp: 1659978490
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    let sentences = S.components(separatedBy: \".!?\")\n    return\
    \ sentences.filter({ $0.hasPrefix(\"I\") }).count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"\
    Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp9azece_v.swift:11:23: error: value of type 'String' has no member\
    \ 'components'\n    let sentences = S.components(separatedBy: \".!?\")\n     \
    \               ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978490
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    let words = S.components(separatedBy: \" \")\n    var count =\
    \ 0\n    for i in 0..<words.count - 1 {\n        if words[i] == \"I\" {\n    \
    \        count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S:\
    \ \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp3gcjcv_0.swift:11:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = S.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978490
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    return S.components(separatedBy: \".\").filter {$0.trimmingCharacters(in:\
    \ .whitespacesAndNewlines).hasPrefix(\"I\")}.count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"\
    Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpt79ux_2e.swift:11:14: error: value of type 'String' has no member\
    \ 'components'\n    return S.components(separatedBy: \".\").filter {$0.trimmingCharacters(in:\
    \ .whitespacesAndNewlines).hasPrefix(\"I\")}.count\n           ~ ^~~~~~~~~~\n\
    /tmp/tmpt79ux_2e.swift:11:78: error: cannot infer contextual base in reference\
    \ to member 'whitespacesAndNewlines'\n    return S.components(separatedBy: \"\
    .\").filter {$0.trimmingCharacters(in: .whitespacesAndNewlines).hasPrefix(\"I\"\
    )}.count\n                                                                   \
    \         ~^~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978490
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    return S.split(separator: \".\").map { $0.trimmingCharacters(in:\
    \ .whitespaces) }.reduce(0) { $0 + ($1.hasPrefix(\"I\") ? 1 : 0) }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S:\
    \ \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpn8uymbw2.swift:11:45: error: reference to member 'trimmingCharacters'\
    \ cannot be resolved without a contextual type\n    return S.split(separator:\
    \ \".\").map { $0.trimmingCharacters(in: .whitespaces) }.reduce(0) { $0 + ($1.hasPrefix(\"\
    I\") ? 1 : 0) }\n                                            ^\n/tmp/tmpn8uymbw2.swift:11:94:\
    \ error: unable to infer type of a closure parameter '$1' in the current context\n\
    \    return S.split(separator: \".\").map { $0.trimmingCharacters(in: .whitespaces)\
    \ }.reduce(0) { $0 + ($1.hasPrefix(\"I\") ? 1 : 0) }\n                       \
    \                                                                      ^\n/tmp/tmpn8uymbw2.swift:11:69:\
    \ error: cannot infer contextual base in reference to member 'whitespaces'\n \
    \   return S.split(separator: \".\").map { $0.trimmingCharacters(in: .whitespaces)\
    \ }.reduce(0) { $0 + ($1.hasPrefix(\"I\") ? 1 : 0) }\n                       \
    \                                            ~^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978491
- exit_code: 0
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    let sentences = S.split(separator: \".\")\n    var boredoms =\
    \ 0\n    for sentence in sentences {\n        let words = sentence.split(separator:\
    \ \" \")\n        if words.count == 0 {\n            continue\n        }\n   \
    \     if words[0] == \"I\" {\n            boredoms += 1\n        }\n    }\n  \
    \  return boredoms\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_bored(S: \"Hello\
    \ world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978490
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    var counter = 0\n    let words = S.split(separator: \" \")\n \
    \   for word in words {\n        if (word.lowercased() == \"i\") {\n         \
    \   counter += 1\n        }\n    }\n    return counter\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"\
    Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: Exception
  stderr: 'tmpk3u_xwep/tmpk3u_xwep.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b49c3752c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b49c3449b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b49c3449988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b49c34487b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk3u_xwep                        0x000056044056ba48 <unavailable> + 6728

    5    libc.so.6                          0x00002b49c393e460 __libc_start_main +
    245

    6    tmpk3u_xwep                        0x000056044056b349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1659978490
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    var boredoms = 0\n    var sentences = S.components(separatedBy:\
    \ [\".\", \"?\", \"!\"])\n    sentences = sentences.filter {$0 != \"\"}\n    for\
    \ sentence in sentences {\n        let sentence_words = sentence.components(separatedBy:\
    \ \" \")\n        if sentence_words[0] == \"I\" {\n            boredoms += 1\n\
    \        }\n    }\n    return boredoms\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\"\
    ) == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\"\
    ) == 0)\nassert(is_bored(S: \"I feel good today. I will be productive. will kill\
    \ It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpp6m35s0c.swift:12:23: error: value of type 'String' has no member\
    \ 'components'\n    var sentences = S.components(separatedBy: [\".\", \"?\", \"\
    !\"])\n                    ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978490
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    return S.components(separatedBy: \".\").count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S:\
    \ \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp4_7t9thb.swift:11:14: error: value of type 'String' has no member\
    \ 'components'\n    return S.components(separatedBy: \".\").count\n          \
    \ ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978490
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue.\
    \ The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String)\
    \ -> Int {\n    let words = S.components(separatedBy: \" \")\n    var count =\
    \ 0\n    for word in words {\n        if word == \"I\" {\n            count +=\
    \ 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\"\
    ) == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\"\
    ) == 0)\nassert(is_bored(S: \"I feel good today. I will be productive. will kill\
    \ It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpiyzd3ina.swift:11:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = S.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978490
