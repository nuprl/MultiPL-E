language: swift
name: HumanEval_22_filter_integers
results:
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.flatMap { (element) -> Int? in\n        if let element = element as?\
    \ Int {\n            return element\n        }\n        return nil\n    }\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009059
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009059
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009059
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.flatMap { (elem) -> Int? in\n        if let int = elem as? Int {\n  \
    \          return int\n        }\n        return nil\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as\
    \ [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009059
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009059
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result = [Int]()\n    for value in values {\n        if let v = value as? Int\
    \ {\n            result.append(v)\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009059
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap {\n        if let i = $0 as? Int {\n            return i\n\
    \        }\n        return nil\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009059
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.filter { value in\n        guard let _ = value as? Int else {\n     \
    \       return false\n        }\n        return true\n    }.map { value in\n \
    \       return value as! Int\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009059
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009059
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap {\n        if let i = $0 as? Int {\n            return i\n\
    \        }\n        return nil\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009059
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap { v in\n        if let v = v as? Int {\n            return\
    \ v\n        }\n        return nil\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009059
- exit_code: -4
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ Array(Set(values.compactMap { (value) -> Int? in\n        if let int_value =\
    \ value as? Int {\n            return int_value\n        }\n        if let double_value\
    \ = value as? Double {\n            return Int(double_value)\n        }\n    \
    \    return nil\n    }))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: Exception
  stderr: 'tmpx6o1q1x9/tmpx6o1q1x9.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b04da072c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b04d9d69b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b04d9d69988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b04d9d687b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx6o1q1x9                        0x000055adcb1d2d1b <unavailable> + 7451

    5    libc.so.6                          0x00002b04da25e460 __libc_start_main +
    245

    6    tmpx6o1q1x9                        0x000055adcb1d2629 <unavailable> + 5673

    '
  stdout: ''
  timestamp: 1660009059
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result = [Int]()\n    for value in values {\n        if value is Int {\n   \
    \         result.append(value as! Int)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009059
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    let\
    \ integers = values.compactMap { $0 as? Int }\n    return integers\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009059
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.filter({$0 is Int}).map({$0 as! Int})\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009059
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009059
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.filter { (value) -> Bool in\n        if value is Int {\n            return\
    \ true\n        }\n        return false\n    } as! [Int]\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as\
    \ [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009059
- exit_code: 1
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n  return\
    \ filter_array(values: values) {\n    return is_integer(value: $0)\n  }\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp0cnu_pz_.swift:8:10: error: cannot find 'filter_array' in scope\n\
    \  return filter_array(values: values) {\n         ^~~~~~~~~~~~\n/tmp/tmp0cnu_pz_.swift:9:12:\
    \ error: cannot find 'is_integer' in scope\n    return is_integer(value: $0)\n\
    \           ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009058
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap { v in\n        if let v = v as? Int {\n            return\
    \ v\n        }\n        return nil\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009059
- exit_code: -4
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.filter { (item) -> Bool in\n        return type(of: item) == type(of:\
    \ Int(1))\n    }.map { (item) -> Int in\n        return item as! Int\n    }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: Exception
  stderr: 'tmp2lox_g6d/tmp2lox_g6d.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b718da39c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b718d730b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b718d730988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b718d72f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2lox_g6d                        0x0000562f6b865cbb <unavailable> + 7355

    5    libc.so.6                          0x00002b718dc25460 __libc_start_main +
    245

    6    tmp2lox_g6d                        0x0000562f6b8655c9 <unavailable> + 5577

    '
  stdout: ''
  timestamp: 1660009059
- exit_code: 1
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ filter_any(values: values) { $0 is Int }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpohr56kpd.swift:8:12: error: cannot find 'filter_any' in scope\n\
    \    return filter_any(values: values) { $0 is Int }\n           ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009058
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ ret = [Int]()\n    for value in values {\n        if let i = value as? Int {\n\
    \            ret.append(i)\n        }\n    }\n    return ret\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as\
    \ [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009059
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap {\n        switch $0 {\n        case let v as Int:\n     \
    \       return v\n        default:\n            return nil\n        }\n    }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009059
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009059
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.filter {\n        $0 is Int\n    }.map {\n        $0 as! Int\n    }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009059
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.flatMap {\n        if let intValue = $0 as? Int {\n            return\
    \ intValue\n        }\n        return nil\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\n\
    assert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable],\
    \ 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3,\
    \ 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009059
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.filter {\n        if let value = $0 as? Int {\n            return true\n\
    \        }\n        return false\n    } as! [Int]\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\n\
    assert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable],\
    \ 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3,\
    \ 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009059
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result = [Int]()\n    for item in values {\n        if let v = item as? Int\
    \ {\n            result.append(v)\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009059
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.filter {\n        $0 is Int\n    }.map {\n        $0 as! Int\n    }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009059
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap { Int(\"\\($0)\") }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009059
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap({ $0 as? Int })\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009059
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009059
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap { value in\n        if let number = value as? Int {\n    \
    \        return number\n        }\n        return nil\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as\
    \ [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009059
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ ints: [Int] = []\n    for v in values {\n        if let n = v as? Int {\n  \
    \          ints.append(n)\n        }\n    }\n    return ints\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as\
    \ [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009059
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap {\n        if let as_int = $0 as? Int {\n            return\
    \ as_int\n        }\n        return nil\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009059
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.filter { $0 is Int }.map { $0 as! Int }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\n\
    assert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable],\
    \ 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3,\
    \ 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009059
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.filter { $0 is Int }.map { $0 as! Int }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\n\
    assert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable],\
    \ 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3,\
    \ 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009059
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap {\n        if let val = $0 as? Int {\n            return val\n\
    \        }\n        return nil\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009059
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ retval = [Int]()\n    for value in values {\n        if let v = value as? Int\
    \ {\n            retval.append(v)\n        }\n    }\n    return retval\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009059
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ integers = [Int]()\n    for value in values {\n        if let integer = value\
    \ as? Int {\n            integers.append(integer)\n        }\n    }\n    return\
    \ integers\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009059
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap { (value) -> Int? in\n        if let intValue = value as?\
    \ Int {\n            return intValue\n        }\n        return nil\n    }\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009059
- exit_code: 1
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ filter_values(values: values, filter: {$0 is Int}) as! [Int]\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as\
    \ [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp3og13lwq.swift:8:12: error: cannot find 'filter_values' in scope\n\
    \    return filter_values(values: values, filter: {$0 is Int}) as! [Int]\n   \
    \        ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009059
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.filter {\n        return $0 is Int\n    }.map {\n        return $0 as!\
    \ Int\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009059
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009059
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009059
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap { value in\n        if let integer = value as? Int {\n   \
    \         return integer\n        }\n        return nil\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as\
    \ [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009059
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.flatMap { $0 as? Int }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009059
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap { (value) -> Int? in\n        if let intValue = value as?\
    \ Int {\n            return intValue\n        }\n        return nil\n    }\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009059
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result = [Int]()\n    for value in values {\n        if let int = value as?\
    \ Int {\n            result.append(int)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009059
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result = [Int]()\n    for value in values {\n        if let intValue = value\
    \ as? Int {\n            result.append(intValue)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009059
- exit_code: 1
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ filter_values(values: values, filter: { $0 is Int })\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\n\
    assert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable],\
    \ 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3,\
    \ 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp6tqonzvp.swift:8:12: error: cannot find 'filter_values' in scope\n\
    \    return filter_values(values: values, filter: { $0 is Int })\n           ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009059
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009059
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009059
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.filter { $0 is Int }.map { $0 as! Int }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\n\
    assert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable],\
    \ 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3,\
    \ 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009059
- exit_code: 1
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ filter_any(values: values) { $0 is Int } as! [Int]\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\n\
    assert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable],\
    \ 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3,\
    \ 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpn7trnyq1.swift:8:12: error: cannot find 'filter_any' in scope\n\
    \    return filter_any(values: values) { $0 is Int } as! [Int]\n           ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009059
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009059
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap { value in\n        if let int = value as? Int {\n       \
    \     return int\n        }\n        return nil\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\n\
    assert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable],\
    \ 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3,\
    \ 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009059
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009059
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.filter {\n        if let i = $0 as? Int {\n            return true\n\
    \        }\n        return false\n    } as! [Int]\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\n\
    assert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable],\
    \ 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3,\
    \ 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009059
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.filter {\n        $0 is Int\n    } as! [Int]\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\n\
    assert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable],\
    \ 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3,\
    \ 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009059
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result = [Int]()\n    for value in values {\n        if let v = value as? Int\
    \ {\n            result.append(v)\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009059
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009059
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap {\n        if let value = $0 as? Int {\n            return\
    \ value\n        }\n        return nil\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009059
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.filter { $0 is Int }.map { $0 as! Int }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\n\
    assert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable],\
    \ 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3,\
    \ 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009059
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009059
- exit_code: 1
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ filter_values(values: values, filter: { $0 is Int })\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\n\
    assert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable],\
    \ 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3,\
    \ 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp6tqonzvp.swift:8:12: error: cannot find 'filter_values' in scope\n\
    \    return filter_values(values: values, filter: { $0 is Int })\n           ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009059
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap { v in\n        if let integer = v as? Int {\n           \
    \ return integer\n        }\n        return nil\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\n\
    assert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable],\
    \ 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3,\
    \ 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009059
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result = [Int]()\n    for item in values {\n        if let int_value = item\
    \ as? Int {\n            result.append(int_value)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009059
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap { value in\n        if let n = value as? Int {\n         \
    \   return n\n        }\n        return nil\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\n\
    assert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable],\
    \ 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3,\
    \ 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009059
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009059
- exit_code: 1
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ filter_array(values: values) { value in\n        return value is Int\n    }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp2hkve9_6.swift:8:12: error: cannot find 'filter_array' in scope\n\
    \    return filter_array(values: values) { value in\n           ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009059
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009059
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.filter { value in\n        if let value = value as? Int {\n         \
    \   return true\n        }\n        return false\n    } as! [Int]\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009059
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n  return\
    \ values.compactMap {\n    $0 as? Int\n  }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009059
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap { (element) -> Int? in\n        switch element {\n       \
    \ case let element as Int:\n            return element\n        default:\n   \
    \         return nil\n        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009059
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.filter { ($0 as? Int) != nil }.map { $0 as! Int }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as\
    \ [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009059
- exit_code: 1
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ filter_where(values: values) {\n        return $0 is Int\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp4qleeij2.swift:8:12: error: cannot find 'filter_where' in scope\n\
    \    return filter_where(values: values) {\n           ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009059
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ values_int = [Int]()\n    for value in values {\n        if let num = value\
    \ as? Int {\n            values_int.append(num)\n        }\n    }\n    return\
    \ values_int\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009059
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.filter {\n        if let n = $0 as? Int {\n            return true\n\
    \        }\n        return false\n    }.map { $0 as! Int }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as\
    \ [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009059
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result = [Int]()\n    for element in values {\n        if let value = element\
    \ as? Int {\n            result.append(value)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009059
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap {\n        if let int_value = $0 as? Int {\n            return\
    \ int_value\n        }\n        return nil\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\n\
    assert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable],\
    \ 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3,\
    \ 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009059
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result = [Int]()\n    for value in values {\n        if let i = value as? Int\
    \ {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009059
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009059
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ int_values = [Int]()\n    for value in values {\n        if let int_value =\
    \ value as? Int {\n            int_values.append(int_value)\n        }\n    }\n\
    \    return int_values\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009059
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009059
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009059
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n  return\
    \ values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009059
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap {\n        if let n = $0 as? Int {\n            return n\n\
    \        }\n        return nil\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009059
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ filteredValues = [Int]()\n    for value in values {\n        if value is Int\
    \ {\n            filteredValues.append(value as! Int)\n        }\n    }\n    return\
    \ filteredValues\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009059
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.filter {\n        $0 is Int\n    }.map {\n        $0 as! Int\n    }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009059
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap({ element in\n        if let value = element as? Int {\n \
    \           return value\n        }\n        return nil\n    })\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as\
    \ [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009059
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ ints: [Int] = []\n    for value in values {\n        if let int = value as?\
    \ Int {\n            ints.append(int)\n        }\n    }\n    return ints\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009059
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ integers: [Int] = []\n    for value in values {\n        if let integer = value\
    \ as? Int {\n            integers.append(integer)\n        }\n    }\n    return\
    \ integers\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009059
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009059
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.filter{ $0 is Int }.map{ $0 as! Int }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009059
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap { (val) -> Int? in\n        guard let int = val as? Int else\
    \ { return nil }\n        return int\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009059
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.filter { $0 is Int }.map { $0 as! Int }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\n\
    assert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable],\
    \ 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3,\
    \ 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009059
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result = [Int]()\n    for value in values {\n        if let i = value as? Int\
    \ {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009059
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009059
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.filter({\n        if let v = $0 as? Int {\n            return true\n\
    \        }\n        return false\n    }).map({\n        if let v = $0 as? Int\
    \ {\n            return v\n        }\n        return 0\n    })\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as\
    \ [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009059
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n  return\
    \ values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009059
- exit_code: 1
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ filter_numbers(values: values).map { $0.intValue }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\n\
    assert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable],\
    \ 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3,\
    \ 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp6xomq4cy.swift:8:12: error: cannot find 'filter_numbers' in scope\n\
    \    return filter_numbers(values: values).map { $0.intValue }\n           ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009059
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap({ $0 as? Int })\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009059
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ filtered: [Int] = []\n    for value in values {\n        if case let int as\
    \ Int = value {\n            filtered.append(int)\n        }\n    }\n    return\
    \ filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009059
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result = [Int]()\n    for value in values {\n        if value is Int {\n   \
    \         result.append(value as! Int)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009059
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result = [Int]()\n    for value in values {\n        switch value {\n      \
    \  case let i as Int:\n            result.append(i)\n        default:\n      \
    \      break\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\n\
    assert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable],\
    \ 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3,\
    \ 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009059
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009059
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009059
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap { value in\n        if let integer = value as? Int {\n   \
    \         return integer\n        } else {\n            return nil\n        }\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009059
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.filter({$0 is Int}).map({$0 as! Int})\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009059
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result = [Int]()\n    for item in values {\n        if let it = item as? Int\
    \ {\n            result.append(it)\n        }\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009059
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap { (value) -> Int? in\n        return value as? Int\n    }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009059
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap {\n        if let int = $0 as? Int {\n            return int\n\
    \        }\n        return nil\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009059
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap { element in\n        if let value = element as? Int {\n \
    \           return value\n        }\n        return nil\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as\
    \ [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009059
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009059
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ ints: [Int] = []\n    for value in values {\n        if let int_value = value\
    \ as? Int {\n            ints.append(int_value)\n        }\n    }\n    return\
    \ ints\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009059
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.filter({ (value) -> Bool in\n        if let i = value as? Int {\n   \
    \         return true\n        }\n        return false\n    }).map({ (value) ->\
    \ Int in\n        return value as! Int\n    })\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009060
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap { value in\n        if let int_value = value as? Int {\n \
    \           return int_value\n        }\n        return nil\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009060
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result = [Int]()\n    for value in values {\n        if let value_int = value\
    \ as? Int {\n            result.append(value_int)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009060
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result = [Int]()\n    for value in values {\n        if let intValue = value\
    \ as? Int {\n            result.append(intValue)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009059
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap({ (value) -> Int? in\n        if let int = value as? Int {\n\
    \            return int\n        }\n        return nil\n    })\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as\
    \ [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009060
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n  return\
    \ values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009059
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.filter { $0 is Int }.map { $0 as! Int }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\n\
    assert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable],\
    \ 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3,\
    \ 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009059
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result = [Int]()\n    for element in values {\n        if let value = element\
    \ as? Int {\n            result.append(value)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009059
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.filter({ element in\n        if let int = element as? Int {\n       \
    \     return true\n        }\n        return false\n    }).map({ element in\n\
    \        return element as! Int\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009060
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.filter({ value in\n        return value is Int\n    }).map({ value in\n\
    \        return value as! Int\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009060
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.flatMap { $0 as? Int }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009059
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.filter { $0 is Int }.map { $0 as! Int }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\n\
    assert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable],\
    \ 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3,\
    \ 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009059
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009059
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap {$0 as? Int}\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009060
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009059
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.filter {\n        $0 is Int\n    }.map {\n        $0 as! Int\n    }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009059
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ array = [Int]()\n    for value in values {\n        if let number = value as?\
    \ Int {\n            array.append(number)\n        }\n    }\n    return array\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009060
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result = [Int]()\n    for value in values {\n        if let value = value as?\
    \ Int {\n            result.append(value)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009060
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ integers: [Int] = []\n    for any in values {\n        if let integer = any\
    \ as? Int {\n            integers.append(integer)\n        }\n    }\n    return\
    \ integers\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009060
- exit_code: 1
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ filter_by_class(values: values, clazz: Int.self)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\n\
    assert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable],\
    \ 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3,\
    \ 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: SyntaxError
  stderr: "/tmp/tmprhcriaey.swift:8:12: error: cannot find 'filter_by_class' in scope\n\
    \    return filter_by_class(values: values, clazz: Int.self)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009059
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009059
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.flatMap { value in\n        if let integer = value as? Int {\n      \
    \      return integer\n        }\n        return nil\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as\
    \ [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009060
- exit_code: 1
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ filter_integers(values: values as [Any])\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpw3memmh0.swift:8:43: error: cannot convert value of type '[Any]'\
    \ to expected argument type '[AnyHashable]'\n    return filter_integers(values:\
    \ values as [Any])\n                                          ^\n/tmp/tmpw3memmh0.swift:8:43:\
    \ note: arguments to generic parameter 'Element' ('Any' and 'AnyHashable') are\
    \ expected to be equal\n    return filter_integers(values: values as [Any])\n\
    \                                          ^\n"
  stdout: ''
  timestamp: 1660009059
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.filter({ value in\n        value is Int\n    }).map({ value in\n    \
    \    value as! Int\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009060
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.filter {\n        if let value = $0 as? Int {\n            return true\n\
    \        }\n        return false\n    } as! [Int]\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\n\
    assert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable],\
    \ 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3,\
    \ 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009059
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result = [Int]()\n    for value in values {\n        if let number = value as?\
    \ Int {\n            result.append(number)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009060
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result = [Int]()\n    for value in values {\n        if value is Int {\n   \
    \         result.append(value as! Int)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009059
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n  var filtered:\
    \ [Int] = []\n  for value in values {\n    if let v = value as? Int {\n      filtered.append(v)\n\
    \    }\n  }\n  return filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009060
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.filter { $0 is Int }.map { $0 as! Int }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\n\
    assert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable],\
    \ 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3,\
    \ 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009059
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result = [Int]()\n    for value in values {\n        if let int = value as?\
    \ Int {\n            result.append(int)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009059
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.filter { (item) -> Bool in\n        if let _ = item as? Int {\n     \
    \       return true\n        }\n        return false\n    } as! [Int]\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009060
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009059
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009059
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result = [Int]()\n    for value in values {\n        if let i = value as? Int\
    \ {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009059
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009059
- exit_code: 1
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ filter_values(values: values, filter: { $0 is Int })\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\n\
    assert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable],\
    \ 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3,\
    \ 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp6tqonzvp.swift:8:12: error: cannot find 'filter_values' in scope\n\
    \    return filter_values(values: values, filter: { $0 is Int })\n           ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009059
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009059
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009059
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n  return\
    \ values.filter { item in\n    item is Int\n  }.map { item in\n    item as! Int\n\
    \  }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(filter_integers(values: [] as\
    \ [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable\
    \ : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009060
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009059
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.filter {\n        if let intValue = $0 as? Int {\n            return\
    \ true\n        }\n        return false\n    }.map {\n        $0 as! Int\n   \
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(filter_integers(values: [] as\
    \ [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable\
    \ : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009060
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n  return\
    \ values.compactMap { item in\n    if let number = item as? Int {\n      return\
    \ number\n    }\n    return nil\n  }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009060
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009059
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.filter {\n        if let v = $0 as? Int {\n            return true\n\
    \        }\n        return false\n    } as! [Int]\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\n\
    assert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable],\
    \ 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3,\
    \ 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009060
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ ints: [Int] = []\n    for value in values {\n        if value is Int {\n   \
    \         ints.append(value as! Int)\n        }\n    }\n    return ints\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009060
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ integers: [Int] = []\n    for value in values {\n        if let int = value\
    \ as? Int {\n            integers.append(int)\n        }\n    }\n    return integers\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009060
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009059
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.filter { $0 is Int }.map { $0 as! Int }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\n\
    assert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable],\
    \ 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3,\
    \ 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009059
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap { (item) -> Int? in\n        guard let int = item as? Int\
    \ else { return nil }\n        return int\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\n\
    assert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable],\
    \ 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3,\
    \ 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009060
- exit_code: 1
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ filter_values(values: values, filter: { value in\n        return is_integer(value:\
    \ value)\n    }) as! [Int]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp_bvpqgkj.swift:8:12: error: cannot find 'filter_values' in scope\n\
    \    return filter_values(values: values, filter: { value in\n           ^~~~~~~~~~~~~\n\
    /tmp/tmp_bvpqgkj.swift:9:16: error: cannot find 'is_integer' in scope\n      \
    \  return is_integer(value: value)\n               ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009060
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap { value in\n        if let i = value as? Int {\n         \
    \   return i\n        }\n        return nil\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\n\
    assert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable],\
    \ 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3,\
    \ 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009060
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ filtered: [Int] = []\n    for value in values {\n        if let int = value\
    \ as? Int {\n            filtered.append(int)\n        }\n    }\n    return filtered\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009060
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.filter { value in\n        return value is Int\n    }.map { value in\n\
    \        return value as! Int\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009060
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009059
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result = [Int]()\n    for value in values {\n        if let value = value as?\
    \ Int {\n            result.append(value)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009060
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.filter({ $0 is Int }) as! [Int]\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009060
- exit_code: 1
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ filter_ints(values: values)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpq5ohwds6.swift:8:12: error: cannot find 'filter_ints' in scope\n\
    \    return filter_ints(values: values)\n           ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009060
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.flatMap { $0 as? Int }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009059
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009059
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009059
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    let\
    \ integers = values.filter { $0 is Int }\n    return integers.map { $0 as! Int\
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(filter_integers(values: [] as\
    \ [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable\
    \ : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009060
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009059
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap {\n        if let v = $0 as? Int {\n            return v\n\
    \        }\n        return nil\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009060
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009059
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result = [Int]()\n    for val in values {\n        switch val {\n        case\
    \ let val as Int:\n            result.append(val)\n        default:\n        \
    \    break\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009060
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap {\n        switch $0 {\n        case let a as Int:\n     \
    \       return a\n        default:\n            return nil\n        }\n    }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009060
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009059
- exit_code: 1
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ filtered_values = [Int]()\n    for value in values {\n        if let integer\
    \ = cast_int(value: value) {\n            filtered_values.append(integer)\n  \
    \      }\n    }\n    return filtered_values\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpba6wt54f.swift:10:26: error: cannot find 'cast_int' in scope\n\
    \        if let integer = cast_int(value: value) {\n                         ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660009060
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009059
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap({ $0 as? Int })\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009059
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.filter({value in\n        if let value = value as? Int {\n          \
    \  return true\n        }\n        return false\n    }) as! [Int]\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009060
- exit_code: 1
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ filter_values(values: values, filter: { value in\n        if let int = value\
    \ as? Int {\n            return [int]\n        }\n        return []\n    })\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpnzpprs31.swift:8:12: error: cannot find 'filter_values' in scope\n\
    \    return filter_values(values: values, filter: { value in\n           ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009060
- exit_code: 1
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ filter_integers(values: values as [Any])\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpw3memmh0.swift:8:43: error: cannot convert value of type '[Any]'\
    \ to expected argument type '[AnyHashable]'\n    return filter_integers(values:\
    \ values as [Any])\n                                          ^\n/tmp/tmpw3memmh0.swift:8:43:\
    \ note: arguments to generic parameter 'Element' ('Any' and 'AnyHashable') are\
    \ expected to be equal\n    return filter_integers(values: values as [Any])\n\
    \                                          ^\n"
  stdout: ''
  timestamp: 1660009059
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009059
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.filter {\n        $0 is Int\n    }.map {\n        $0 as! Int\n    }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009059
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result = [Int]()\n    for value in values {\n        if value is Int {\n   \
    \         result.append(value as! Int)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009059
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    let\
    \ filtered = values.filter({$0 is Int})\n    let result = filtered.map { $0 as!\
    \ Int }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009060
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.filter {$0 is Int}.map {$0 as! Int}\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009060
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009059
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap { (item) -> Int? in\n        if let integer = item as? Int\
    \ {\n            return integer\n        }\n        return nil\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009060
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009059
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap({\n        guard let integer = $0 as? Int else { return nil\
    \ }\n        return integer\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009060
- exit_code: 1
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ filter_values(values: values, filter: { value in\n        return value is Int\n\
    \    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpwv99ms0w.swift:8:12: error: cannot find 'filter_values' in scope\n\
    \    return filter_values(values: values, filter: { value in\n           ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009060
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009059
