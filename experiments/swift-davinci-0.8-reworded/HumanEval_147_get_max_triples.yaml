name: HumanEval_147_get_max_triples
language: swift
prompt: "\n/// You are given a positive integer n. You have to create an integer array\
  \ a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
  \ i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where i <\
  \ j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n/// >>>\
  \ get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n///\
  \ The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
  \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
  \ == 53361)"
completions: ["    var a = [Int]()\n    for i in 1...n {\n        a.append(i * i -\
    \ i + 1)\n    }\n    var result = 0\n    for i in 0..<a.count {\n        for j\
    \ in (i + 1)..<a.count {\n            for k in (j + 1)..<a.count {\n         \
    \       if a[i] + a[j] + a[k] % 3 == 0 {\n                    result += 1\n  \
    \              }\n            }\n        }\n    }\n    return result", "    var\
    \ a = 1\n    var b = 3\n    var c = 7\n    var count = 0\n    for _ in 1...n -\
    \ 2 {\n        count += a + b + c == 3 * (c / 3) ? 1 : 0\n        a = b\n    \
    \    b = c\n        c += 2\n    }\n    return count", "    var result = 0\n  \
    \  for i in 1..<n {\n        for j in i + 1..<n {\n            for k in j + 1..<n\
    \ {\n                if (i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 ==\
    \ 0 {\n                    result += 1\n                }\n            }\n   \
    \     }\n    }\n    return result", "    var maxTriples = 0\n    for i in 1..<n\
    \ {\n        for j in (i + 1)..<n {\n            for k in (j + 1)..<n {\n    \
    \            let indexVal = a[i] + a[j] + a[k]\n                if indexVal %\
    \ 3 == 0 {\n                    maxTriples += 1\n                }\n         \
    \   }\n        }\n    }\n    return maxTriples", "    guard n > 3 else { return\
    \ 0 }\n    var result = 0\n    for i in 1..<n-1 {\n        let iVal = i * i -\
    \ i + 1\n        for j in i+1..<n {\n            let jVal = j * j - j + 1\n  \
    \          for k in j+1..<n+1 {\n                let kVal = k * k - k + 1\n  \
    \              if (iVal + jVal + kVal) % 3 == 0 {\n                    result\
    \ += 1\n                }\n            }\n        }\n    }\n    return result",
  "    var count = 0\n    var array = [Int]()\n    for i in 1...n {\n        array.append(i\
    \ * i - i + 1)\n    }\n    for i in 0..<array.count {\n        for j in i+1..<array.count\
    \ {\n            for k in j+1..<array.count {\n                if (array[i] +\
    \ array[j] + array[k]) % 3 == 0 {\n                    count += 1\n          \
    \      }\n            }\n        }\n    }\n    return count", "\tif n < 3 {\n\t\
    \treturn 0\n\t}\n\tvar result = 0\n\tfor i in 0..<n {\n\t\tfor j in (i + 1)..<n\
    \ {\n\t\t\tfor k in (j + 1)..<n {\n\t\t\t\tif i + j + k % 3 == 0 {\n\t\t\t\t\t\
    result += 1\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn result", "    let a = (1...n).map\
    \ { $0 * $0 - $0 + 1 }\n    var result = 0\n    for i in 0..<a.count - 2 {\n \
    \       for j in i + 1..<a.count - 1 {\n            for k in j + 1..<a.count {\n\
    \                if (a[i] + a[j] + a[k]) % 3 == 0 {\n                    result\
    \ += 1\n                }\n            }\n        }\n    }\n    return result",
  "    var temp = [Int](repeating: 0, count: n)\n    var cnt = 0\n    var i = 1\n\
    \    while i <= n {\n        temp[i - 1] = i * i - i + 1\n        i += 1\n   \
    \ }\n    for i in 0..<n {\n        for j in i + 1..<n {\n            for k in\
    \ j + 1..<n {\n                if (temp[i] + temp[j] + temp[k]) % 3 == 0 {\n \
    \                   cnt += 1\n                }\n            }\n        }\n  \
    \  }\n    return cnt", "    if n < 3 {\n        return 0\n    }\n    var arr =\
    \ [Int]()\n    for i in 1...n {\n        arr.append(i * i - i + 1)\n    }\n  \
    \  var ans = 0\n    for i in 0..<n - 2 {\n        for j in i + 1..<n - 1 {\n \
    \           for k in j + 1..<n {\n                if (arr[i] + arr[j] + arr[k])\
    \ % 3 == 0 {\n                    ans += 1\n                }\n            }\n\
    \        }\n    }\n    return ans", "    var res = 0\n    var a = Array(repeating:\
    \ 0, count: n)\n    for i in 1...n {\n        a[i - 1] = i * i - i + 1\n    }\n\
    \    for i in 0..<n - 2 {\n        for j in i + 1..<n - 1 {\n            for k\
    \ in j + 1..<n {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n       \
    \             res += 1\n                }\n            }\n        }\n    }\n \
    \   return res", "    var pairs = 0\n    for i in 0..<n-1 {\n        for j in\
    \ (i+1)..<n {\n            for k in (j+1)..<n {\n                if ((n*n-n+1+i*i-i+1+j*j-j+1+k*k-k+1)\
    \ % 3 == 0) {\n                    pairs += 1\n                }\n           \
    \ }\n        }\n    }\n    return pairs", "    // Write your code here\n    var\
    \ count = 0\n    for i in 1..<n {\n        for j in i+1..<n {\n            for\
    \ k in j+1..<n {\n                if (i*i - i + 1 + j*j - j + 1 + k*k - k + 1)\
    \ % 3 == 0 {\n                    count += 1\n                }\n            }\n\
    \        }\n    }\n    return count", "    let a = get_array(n: n)\n    var result\
    \ = 0\n    for i in 0...n-3 {\n        for j in i+1...n-2 {\n            for k\
    \ in j+1...n-1 {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n       \
    \             result += 1\n                }\n            }\n        }\n    }\n\
    \    return result", "    let a = (1...n).map { $0 * $0 - $0 + 1 }\n    var out\
    \ = 0\n    for i in 0..<n - 2 {\n        for j in i + 1..<n - 1 {\n          \
    \  for k in j + 1..<n {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n\
    \                    out += 1\n                }\n            }\n        }\n \
    \   }\n    return out", "    var triples = 0\n    for i in 1...n {\n        for\
    \ j in (i + 1)...n {\n            for k in (j + 1)...n {\n                let\
    \ elems = [i * i - i + 1, j * j - j + 1, k * k - k + 1]\n                if elems.reduce(0,\
    \ +) % 3 == 0 {\n                    triples += 1\n                }\n       \
    \     }\n        }\n    }\n    return triples", "    var count = 0\n    for i\
    \ in 1..<n {\n        for j in (i + 1)..<n {\n            for k in (j + 1)..<n\
    \ {\n                if(get_sum(a: i, b: j, c: k) % 3 == 0) {\n              \
    \      count += 1\n                }\n            }\n        }\n    }\n    return\
    \ count", "    var count = 0\n    for i in 1..<n-1 {\n        for j in i+1..<n\
    \ {\n            for k in j+1..<n+1 {\n                if (i*i - i + 1 + j*j -\
    \ j + 1 + k*k - k + 1) % 3 == 0 {\n                    count += 1\n          \
    \      }\n            }\n        }\n    }\n    return count", "    var total =\
    \ 0\n    for i in 1..<n {\n        for j in (i + 1)..<n {\n            for k in\
    \ (j + 1)..<n {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n        \
    \            total += 1\n                }\n            }\n        }\n    }\n\
    \    return total", "    let list = (1...n).map({$0 * $0 - $0 + 1})\n    var result\
    \ = 0\n    for i in 0..<list.count {\n        for j in i+1..<list.count {\n  \
    \          for k in j+1..<list.count {\n                if list[i] + list[j] +\
    \ list[k] % 3 == 0 {\n                    result += 1\n                }\n   \
    \         }\n        }\n    }\n    return result", "    var dp: [Int] = Array(repeating:\
    \ 0, count: n)\n    dp[0] = 1\n    for i in 1..<n {\n        dp[i] = dp[i - 1]\
    \ + ((2 * i + 1) / 3)\n    }\n    return dp[n - 1]", "    var counter = 0\n  \
    \  var a = [Int]()\n    for i in 1...n {\n        a.append(i * i - i + 1)\n  \
    \  }\n    for i in 0..<n {\n        for j in i+1..<n {\n            for k in j+1..<n\
    \ {\n                if a[i] + a[j] + a[k] % 3 == 0 {\n                    counter\
    \ += 1\n                }\n            }\n        }\n    }\n    return counter",
  "    var triples = 0\n    var sum = 0\n    var a = Array(1...n)\n    for i in 0..<a.count\
    \ {\n        a[i] = a[i] * a[i] - a[i] + 1\n    }\n    for i in 0..<a.count {\n\
    \        for j in i + 1..<a.count {\n            for k in j + 1..<a.count {\n\
    \                sum = a[i] + a[j] + a[k]\n                if sum % 3 == 0 {\n\
    \                    triples += 1\n                }\n            }\n        }\n\
    \    }\n    return triples", '    return 0', "    var tripleCount = 0\n    var\
    \ a = [Int]()\n    for i in 1...n {\n        a.append(i * i - i + 1)\n    }\n\
    \    for i in 0..<n - 2 {\n        for j in i + 1..<n - 1 {\n            for k\
    \ in j + 1..<n {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n       \
    \             tripleCount += 1\n                }\n            }\n        }\n\
    \    }\n    return tripleCount", "    if n < 3 {\n        return 0\n    }\n  \
    \  var a: [Int] = []\n    for i in 1...n {\n        a.append(i * i - i + 1)\n\
    \    }\n    var count = 0\n    for i in 0..<a.count - 2 {\n        for j in i\
    \ + 1..<a.count - 1 {\n            for k in j + 1..<a.count {\n              \
    \  if (a[i] + a[j] + a[k]) % 3 == 0 {\n                    count += 1\n      \
    \          }\n            }\n        }\n    }\n    return count", '    return
    0', "    // When n == 1, there are no triples.\n    guard n > 1 else { return\
    \ 0 }\n    // When n == 2, there are no triples.\n    guard n > 2 else { return\
    \ 0 }\n    // When n == 3, there is one triple.\n    guard n > 3 else { return\
    \ 1 }\n    // If n > 3, then the triple is (a[1], a[n-1], a[n])\n    return 1",
  "    var output = 0\n    for index in 1..<n-1 {\n        let current = index * index\
    \ - index + 1\n        if current % 3 == 0 {\n            output += 1\n      \
    \  }\n    }\n    return output", "    var result = 0\n    for i in 1...n {\n \
    \       for j in (i + 1)...n {\n            for k in (j + 1)...n {\n         \
    \       if isMultiple(lhs: a[i] + a[j] + a[k], 3) {\n                    result\
    \ += 1\n                }\n            }\n        }\n    }\n    return result",
  "    var result = 0\n    for i in 1..<n-1 {\n        for j in i+1..<n {\n      \
    \      for k in j+1..<n+1 {\n                let a = (i * i - i + 1)\n       \
    \         let b = (j * j - j + 1)\n                let c = (k * k - k + 1)\n \
    \               if (a + b + c) % 3 == 0 {\n                    result += 1\n \
    \               }\n            }\n        }\n    }\n    return result", "    let\
    \ array = (1...n).map { $0 * $0 - $0 + 1 }\n    var counter = 0\n    for i in\
    \ 0..<n {\n        for j in (i + 1)..<n {\n            for k in (j + 1)..<n {\n\
    \                if array[i] + array[j] + array[k] % 3 == 0 {\n              \
    \      counter += 1\n                }\n            }\n        }\n    }\n    return\
    \ counter", "    var triples = 0\n    var a = [Int]()\n    for i in 1...n {\n\
    \        a.append(i * i - i + 1)\n    }\n    for i in 0..<n - 2 {\n        for\
    \ j in i + 1..<n - 1 {\n            for k in j + 1..<n {\n                if (a[i]\
    \ + a[j] + a[k]) % 3 == 0 {\n                    triples += 1\n              \
    \  }\n            }\n        }\n    }\n    return triples", "    return (1...n)\n\
    \        .map { i in i * i - i + 1 }\n        .filter { $0 % 3 == 0 }\n      \
    \  .reduce(0) { acc, cur in\n            acc + (0..<cur).filter { (cur + $0) %\
    \ 3 == 0 }.count\n    }", "    var result = 0\n    for i in 1..<n {\n        for\
    \ j in (i + 1)..<n {\n            if a[i] + a[j] > a[n] {\n                break\n\
    \            }\n            if a[i] + a[j] % 3 == 0 {\n                result\
    \ += 1\n            }\n        }\n    }\n    return result", "    let nums = (1...n).map({\
    \ $0 * $0 - $0 + 1 })\n    var count = 0\n    for i in 0..<n - 2 {\n        for\
    \ j in i + 1..<n - 1 {\n            for k in j + 1..<n {\n                if (nums[i]\
    \ + nums[j] + nums[k]) % 3 == 0 {\n                    count += 1\n          \
    \      }\n            }\n        }\n    }\n    return count", '    return [1,
    1, 2, 3, 3, 4, 5, 5, 6, 7, 7, 8, 9, 9, 10, 11, 11, 12, 13, 13, 14, 15, 15, 16,
    17, 17, 18, 19, 19, 20, 21, 21, 22, 23, 23, 24, 25, 25, 26, 27, 27, 28, 29, 29,
    30, 31, 31, 32, 33, 33, 34, 35, 35, 36, 37, 37, 38, 39, 39, 40, 41, 41, 42, 43,
    43, 44, 45, 45, 46, 47, 47, 48, 49, 49, 50, 51, 51, 52, 53, 53, 54, 55, 55, 56,
    57, 57, 58, 59, 59, 60, 61, 61, 62, 63, 63, 64, 65, 65, 66, 67, 67, 68, 69, 69,
    70, 71, 71, 72, 73, 73, 74, 75, 75, 76, 77, 77, 78, 79, 79, 80, 81, 81, 82, 83,
    83, 84, 85, 85, 86, 87, 87, 88, 89, 89, 90, 91, 91, 92, 93, 93, 94, 95, 95, 96,
    97, 97, 98, 99, 99, 100, 101, 101, 102, 103, 103, 104, 105, 105, 106, 107, 107,
    108, 109, 109, 110, 111, 111, 112, 113, 113, 114, 115, 115, 116, 117, 117, 118,
    119, 119, 120, 121, 121, 122, 123, 123, 124, 125, 125, 126, 127, 127, 128, 129,
    129, 130, 131, 131, 132, 133, 133, 134, 135, 135, 136, 137, 137, 138, 139, 139,
    140, 141, 141, 142, 143, 143, 144, 145, 145, 146, 147, 147, 148, 149, 149, 150,
    151, 151, 152, 153, 153, 154, 155, 155, 156, 157, 157, 158, 159, 159, 160, 161,
    161, 162, 163, 163, 164, 165, 165, 166, 167, 167, 168, 169, 169,', "    var t\
    \ = 0\n    var count = 0\n    var a = Array(1...n)\n    var arr = a.map { $0 *\
    \ $0 - $0 + 1 }\n    var sums = Array(repeating: 0, count: arr.count)\n    for\
    \ i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            sums[j]\
    \ = arr[i] + arr[j]\n        }\n        for k in 0..<sums.count {\n          \
    \  if (sums[k] % 3 == 0) {\n                t += 1\n            }\n        }\n\
    \    }\n    return t", "    if n < 3 {\n        return 0\n    }\n\n    let is_multiple_of_3\
    \ = { (x: Int) -> Bool in\n        x % 3 == 0\n    }\n\n    var triples: [Int]\
    \ = []\n    for i in 1...n {\n        for j in i+1...n {\n            for k in\
    \ j+1...n {\n                let a_i = i * i - i + 1\n                let a_j\
    \ = j * j - j + 1\n                let a_k = k * k - k + 1\n                if\
    \ is_multiple_of_3(a_i + a_j + a_k) {\n                    triples.append([a_i,\
    \ a_j, a_k])\n                }\n            }\n        }\n    }\n\n    return\
    \ triples.count", "    var triples = 0\n    var a = [Int]()\n    for i in 1...n\
    \ {\n        a.append(i * i - i + 1)\n    }\n    for i in 0..<a.count {\n    \
    \    for j in i+1..<a.count {\n            for k in j+1..<a.count {\n        \
    \        if a[i] + a[j] + a[k] % 3 == 0 {\n                    triples += 1\n\
    \                }\n            }\n        }\n    }\n    return triples", "  \
    \  var result = 0\n    var i = 1\n    while i < n {\n        var j = i + 1\n \
    \       while j < n {\n            var k = j + 1\n            while k < n {\n\
    \                let a_i = i * i - i + 1\n                let a_j = j * j - j\
    \ + 1\n                let a_k = k * k - k + 1\n                if (a_i + a_j\
    \ + a_k) % 3 == 0 {\n                    result += 1\n                }\n    \
    \            k += 1\n            }\n            j += 1\n        }\n        i +=\
    \ 1\n    }\n    return result", "    var res = 0\n    var table = Array(repeating:\
    \ 0, count: 3)\n    for x in 1...n {\n        let x_val = x * x - x + 1\n    \
    \    table[x_val % 3] += 1\n    }\n    res += (table[0] * (table[0] - 1) * (table[0]\
    \ - 2)) / 6\n    res += (table[1] * (table[1] - 1) * (table[2])) / 2\n    res\
    \ += (table[2] * (table[2] - 1) * (table[1])) / 2\n    return res", "    var a\
    \ = [Int]()\n    for i in 1...n {\n        a.append(i * i - i + 1)\n    }\n  \
    \  var counter = 0\n    for i in 0..<n - 2 {\n        for j in i + 1..<n - 1 {\n\
    \            for k in j + 1..<n {\n                if (a[i] + a[j] + a[k]) % 3\
    \ == 0 {\n                    counter += 1\n                }\n            }\n\
    \        }\n    }\n    return counter", "    if n < 3 {\n        return 0\n  \
    \  }\n    var a = [Int]()\n    for i in 1...n {\n        a.append(i * i - i +\
    \ 1)\n    }\n    var result = 0\n    for i in 0..<(n - 2) {\n        for j in\
    \ (i + 1)..<(n - 1) {\n            if (a[i] + a[j]) % 3 == 0 {\n             \
    \   for k in (j + 1)..<n {\n                    if (a[i] + a[j] + a[k]) % 3 ==\
    \ 0 {\n                        result += 1\n                    }\n          \
    \      }\n            }\n        }\n    }\n    return result", "    // =============================================================\n\
    \    // Implement your code below.\n    // Return the number of triples.\n   \
    \ // =============================================================\n    var result\
    \ = 0\n    for i in 1..<n {\n        let ai = i * i - i + 1\n        if ai % 3\
    \ == 0 {\n            for j in i + 1..<n {\n                let aj = j * j - j\
    \ + 1\n                if (ai + aj) % 3 == 0 {\n                    result +=\
    \ n - j\n                }\n            }\n        }\n    }\n    return result",
  "    var count = 0\n    for i in 1..<n-1 {\n        for j in i+1..<n {\n       \
    \     for k in j+1..<n+1 {\n                if (i*i - i + 1 + j*j - j + 1 + k*k\
    \ - k + 1) % 3 == 0 {\n                    count += 1\n                }\n   \
    \         }\n        }\n    }\n    return count", "    var a = [Int]()\n    for\
    \ i in 1...n {\n        a.append(i * i - i + 1)\n    }\n    var sum = 0\n    for\
    \ i in 0..<a.count {\n        for j in i + 1..<a.count {\n            for k in\
    \ j + 1..<a.count {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n    \
    \                sum += 1\n                }\n            }\n        }\n    }\n\
    \    return sum", "    // Write your code here\n    var array = [Int]()\n    var\
    \ count = 0\n    for i in 1...n {\n        let item = i * i - i + 1\n        array.append(item)\n\
    \    }\n    for i in 0..<n {\n        for j in (i + 1)..<n {\n            for\
    \ k in (j + 1)..<n {\n                if array[i] + array[j] + array[k] % 3 ==\
    \ 0 {\n                    count += 1\n                }\n            }\n    \
    \    }\n    }\n    return count", "\treturn get_max_triples_recursion(n: n, i:\
    \ 1, counter: 0)", "    var count = 0\n    for i in 1..<n {\n        for j in\
    \ (i + 1)..<n {\n            for k in (j + 1)..<n {\n                if (i * i\
    \ - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0 {\n                    count\
    \ += 1\n                }\n            }\n        }\n    }\n    return count",
  "    if n < 3 {\n        return 0\n    }\n    var a = [Int]()\n    for i in 1...n\
    \ {\n        a.append(i * i - i + 1)\n    }\n    var maxTriples = 0\n    for i\
    \ in 0..<a.count - 2 {\n        for j in i + 1..<a.count - 1 {\n            if\
    \ (a[i] + a[j]) % 3 == 0 {\n                maxTriples += 1\n            }\n \
    \       }\n    }\n    return maxTriples", "    var ans = 0\n    for i in 0..<n-2\
    \ {\n        for j in i+1..<n-1 {\n            if ((i+1)*(i+1) + (j+1)*(j+1) -\
    \ 2*(i+1)*(j+1) + 1) % 3 == 0 {\n                ans += 1\n            }\n   \
    \     }\n    }\n    return ans", "    var m = 0\n    for i in 1..<n-1 {\n    \
    \    let a = i * i - i + 1\n        if a % 3 == 0 {\n            m += 1\n    \
    \    }\n    }\n    return m", "    var a = [Int]()\n    var valid_triples = 0\n\
    \    for i in 1...n {\n        a.append(i * i - i + 1)\n    }\n    for i in 0..<n\
    \ - 2 {\n        for j in i + 1..<n - 1 {\n            for k in j + 1..<n {\n\
    \                if (a[i] + a[j] + a[k]) % 3 == 0 {\n                    valid_triples\
    \ += 1\n                }\n            }\n        }\n    }\n    return valid_triples",
  "    var result = 0\n    var a = [Int]()\n    for i in 1...n {\n        a.append(i\
    \ * i - i + 1)\n    }\n    for i in 0..<a.count - 2 {\n        for j in i + 1..<a.count\
    \ - 1 {\n            for k in j + 1..<a.count {\n                if (a[i] + a[j]\
    \ + a[k]) % 3 == 0 {\n                    result += 1\n                }\n   \
    \         }\n        }\n    }\n    return result", "    var result = 0\n    var\
    \ numbers = [Int]()\n    for i in 1...n {\n        numbers.append(i * i - i +\
    \ 1)\n    }\n    for i in 0..<numbers.count - 2 {\n        for j in i + 1..<numbers.count\
    \ - 1 {\n            for k in j + 1..<numbers.count {\n                if (numbers[i]\
    \ + numbers[j] + numbers[k]) % 3 == 0 {\n                    result += 1\n   \
    \             }\n            }\n        }\n    }\n    return result", "    var\
    \ sum = 0\n    var count = 0\n    for i in 1..<n {\n        sum += i * i - i +\
    \ 1\n        if sum % 3 == 0 {\n            count += 1\n        }\n    }\n   \
    \ return count", "    var count = 0\n    var a = Array(1...n)\n    var i = 0\n\
    \    while i < a.count {\n        a[i] = a[i] * a[i] - a[i] + 1\n        i +=\
    \ 1\n    }\n    i = 0\n    while i < a.count - 2 {\n        var j = i + 1\n  \
    \      while j < a.count - 1 {\n            var k = j + 1\n            while k\
    \ < a.count {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n          \
    \          count += 1\n                }\n                k += 1\n           \
    \ }\n            j += 1\n        }\n        i += 1\n    }\n    return count",
  "    var tripleCount = 0\n    var range = 1...n\n    range.forEach { i in\n    \
    \    let a = i * i - i + 1\n        if a % 3 == 0 {\n            tripleCount +=\
    \ 1\n        }\n    }\n    return tripleCount", "    var result = 0\n    var base\
    \ = Array(repeating: 0, count: n + 1)\n    for i in 1...n {\n        base[i] =\
    \ i * i - i + 1\n    }\n    for i in 1..<n - 1 {\n        for j in i + 1..<n {\n\
    \            for k in j + 1...n {\n                if base[i] + base[j] + base[k]\
    \ % 3 == 0 {\n                    result += 1\n                }\n           \
    \ }\n        }\n    }\n    return result", "    var count = 0\n    let array =\
    \ (1...n).map { $0 * $0 - $0 + 1 }\n    for i in 0..<array.count - 2 {\n     \
    \   for j in i + 1..<array.count - 1 {\n            for k in j + 1..<array.count\
    \ {\n                if array[i] + array[j] + array[k] % 3 == 0 {\n          \
    \          count += 1\n                }\n            }\n        }\n    }\n  \
    \  return count", "    var triples = 0\n    for index in 1...n {\n        let\
    \ number = (index * index) - index + 1\n        triples += number % 3 == 0 ? 1\
    \ : 0\n    }\n    return triples", '    return get_max_triples(n: n, i: 1, j:
    2, k: 3, count: 0)', "    let a = (1...n).map { i in i * i - i + 1 }\n    var\
    \ result = 0\n    for i in 0..<a.count {\n        for j in (i + 1)..<a.count {\n\
    \            for k in (j + 1)..<a.count {\n                if (a[i] + a[j] + a[k])\
    \ % 3 == 0 {\n                    result += 1\n                }\n           \
    \ }\n        }\n    }\n    return result", "    var sum = 0\n    for i in 1..<n\
    \ {\n        for j in i..<n {\n            for k in j..<n {\n                if\
    \ sum_is_multiple_of_3(i: i, j: j, k: k) {\n                    sum += 1\n   \
    \             }\n            }\n        }\n    }\n    return sum", "    // Check\
    \ the input\n    guard n > 0 else { return 0 }\n    guard n > 2 else { return\
    \ 0 }\n    \n    // Function that returns what is required\n    func triple(n:\
    \ Int) -> Int {\n        return n * n - n + 1\n    }\n    \n    // Create and\
    \ populate the array.\n    var arr = [Int]()\n    for idx in 1...n {\n       \
    \ arr.append(triple(n: idx))\n    }\n    \n    // Init the counter.\n    var cnt\
    \ = 0\n    \n    // Loop through the array\n    for idx in 0..<arr.count {\n \
    \       for idx2 in idx + 1..<arr.count {\n            for idx3 in idx2 + 1..<arr.count\
    \ {\n                // Check for the condition and increment counter\n      \
    \          let tmp = arr[idx] + arr[idx2] + arr[idx3]\n                if tmp\
    \ % 3 == 0 {\n                    cnt += 1\n                }\n            }\n\
    \        }\n    }\n    \n    return cnt", '    return 0', "    guard n > 2 else\
    \ { return 0 }\n    var result = 0\n    for i in 1...n - 2 {\n        for j in\
    \ i + 1...n - 1 {\n            for k in j + 1...n {\n                if (i * i\
    \ - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0 {\n                    result\
    \ += 1\n                }\n            }\n        }\n    }\n    return result",
  "    var a = [Int]()\n    var counter = 0\n    var j = 0\n    var k = 0\n    a.append(1)\n\
    \    for i in 1...n-1 {\n        a.append(i*i - i + 1)\n    }\n    for i in 1...n-2\
    \ {\n        j = i + 1\n        while j < n {\n            k = j + 1\n       \
    \     while k < n {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n    \
    \                counter += 1\n                }\n                k += 1\n   \
    \         }\n            j += 1\n        }\n    }\n    return counter", "    var\
    \ sum = 0\n    for i in 1...n {\n        for j in (i + 1)...n {\n            for\
    \ k in (j + 1)...n {\n                if (i * i - i + 1 + j * j - j + 1 + k *\
    \ k - k + 1) % 3 == 0 {\n                    sum += 1\n                }\n   \
    \         }\n        }\n    }\n    return sum", "    var triples: Int = 0\n  \
    \  var a: [Int] = []\n    for i in 1...n {\n        a.append(i * i - i + 1)\n\
    \    }\n    for i in 0..<n {\n        for j in i+1..<n {\n            for k in\
    \ j+1..<n {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n            \
    \        triples += 1\n                }\n            }\n        }\n    }\n  \
    \  return triples", "    var res = 0\n    var a = [Int]()\n    for i in 1...n\
    \ {\n        a.append(i * i - i + 1)\n    }\n    for i in 0..<n {\n        for\
    \ j in i + 1..<n {\n            for k in j + 1..<n {\n                if (a[i]\
    \ + a[j] + a[k]) % 3 == 0 {\n                    res += 1\n                }\n\
    \            }\n        }\n    }\n    return res", "    var sum: Int = 0\n   \
    \ for i in 1..<n {\n        for j in (i + 1)..<n {\n            for k in (j +\
    \ 1)..<n {\n                if ((i * i - i + 1) + (j * j - j + 1) + (k * k - k\
    \ + 1)) % 3 == 0 {\n                    sum += 1\n                }\n        \
    \    }\n        }\n    }\n    return sum", "    var arr = [Int]()\n    for i in\
    \ 1...n {\n        arr.append(i * i - i + 1)\n    }\n    var count = 0\n    for\
    \ i in 0..<arr.count - 2 {\n        for j in i + 1..<arr.count - 1 {\n       \
    \     for k in j + 1..<arr.count {\n                if arr[i] + arr[j] + arr[k]\
    \ % 3 == 0 {\n                    count += 1\n                }\n            }\n\
    \        }\n    }\n    return count", "    var count = 0\n    for i in 1...n {\n\
    \        for j in i+1...n {\n            for k in j+1...n {\n                if\
    \ a(i) + a(j) + a(k) % 3 == 0 {\n                    count += 1\n            \
    \    }\n            }\n        }\n    }\n    return count", "    var count = 0\n\
    \    let array = (1...n).map { (i: Int) -> Int in\n        return i * i - i +\
    \ 1\n    }\n    print(array)\n    for i in 1..<n {\n        for j in i + 1..<n\
    \ {\n            if (array[i] + array[j]) % 3 == 0 {\n                for k in\
    \ j + 1..<n {\n                    if (array[i] + array[j] + array[k]) % 3 ==\
    \ 0 {\n                        count += 1\n                    }\n           \
    \     }\n            }\n        }\n    }\n    return count", "    var triples\
    \ = 0\n    for i in 1..<n {\n        for j in (i + 1)..<n {\n            for k\
    \ in (j + 1)..<n {\n                let a = i * i - i + 1\n                let\
    \ b = j * j - j + 1\n                let c = k * k - k + 1\n                if\
    \ (a + b + c) % 3 == 0 {\n                    triples += 1\n                }\n\
    \            }\n        }\n    }\n    return triples", "    let a = (1...n).map\
    \ { $0 * $0 - $0 + 1 }\n    return (0..<a.count).flatMap { i in\n        (i +\
    \ 1..<a.count).map { j in\n            (j + 1..<a.count).filter { k in\n     \
    \           a[i] + a[j] + a[k] % 3 == 0\n            }.count\n        }\n    }.reduce(0,\
    \ +)", "    var a = [Int]()\n    for i in 1...n {\n        a.append(i * i - i\
    \ + 1)\n    }\n    var m = 0\n    for i in 0..<n {\n        for j in i+1..<n {\n\
    \            for k in j+1..<n {\n                if (a[i] + a[j] + a[k]) % 3 ==\
    \ 0 {\n                    m += 1\n                }\n            }\n        }\n\
    \    }\n    return m", "    let a = Array(stride(from: 1, to: n + 1, by: 1)).map\
    \ { $0 * $0 - $0 + 1 }\n    return a.enumerated().reduce(0) { (result, elem) in\n\
    \        let (i, elem1) = elem\n        return result + a[i + 1..<n].enumerated().reduce(0)\
    \ { (res, elem) in\n            let (j, elem2) = elem\n            return res\
    \ + a[j + i + 2..<n].enumerated().reduce(0) { (r, e) in\n                let (k,\
    \ _) = e\n                return r + (elem1 + elem2 + a[j + i + k + 3] % 3 ==\
    \ 0 ? 1 : 0)\n            }\n        }\n    }", "    var a = Array(repeating:\
    \ 0, count: n)\n    for i in 1...n {\n        a[i - 1] = i * i - i + 1\n    }\n\
    \    var count = 0\n    for i in 0..<n - 2 {\n        for j in i + 1..<n - 1 {\n\
    \            for k in j + 1..<n {\n                if (a[i] + a[j] + a[k]) % 3\
    \ == 0 {\n                    count += 1\n                }\n            }\n \
    \       }\n    }\n    return count", "    if n < 3 {\n        return 0\n    }\n\
    \n    // Initialize an array of length n with initial values of \n    // [1, 3,\
    \ 7, 13, 21, ... ]\n    var a = [Int](repeating: 0, count: n)\n    for i in 0..<n\
    \ {\n        a[i] = i * i - i + 1\n    }\n\n    var count = 0\n    for i in 0..<n\
    \ {\n        for j in (i + 1)..<n {\n            for k in (j + 1)..<n {\n    \
    \            if (a[i] + a[j] + a[k]) % 3 == 0 {\n                    count +=\
    \ 1\n                }\n            }\n        }\n    }\n\n    return count",
  "    var result = 0\n    let divider = 3\n    var sum = 0\n    var i = 1\n    while\
    \ i < n - 1 {\n        let a1 = i * i - i + 1\n        sum += a1\n        var\
    \ j = i + 1\n        while j < n {\n            let a2 = j * j - j + 1\n     \
    \       sum += a2\n            var k = j + 1\n            while k < n + 1 {\n\
    \                let a3 = k * k - k + 1\n                sum += a3\n         \
    \       if sum % divider == 0 {\n                    result += 1\n           \
    \     }\n                sum -= a3\n                k += 1\n            }\n  \
    \          sum -= a2\n            j += 1\n        }\n        sum -= a1\n     \
    \   i += 1\n    }\n    return result", '    return 0', "    var a = [Int]()\n\
    \    var count = 0\n    for i in 1 ... n {\n        a.append(i * i - i + 1)\n\
    \    }\n    for i in 0 ..< a.count - 2 {\n        for j in i + 1 ..< a.count -\
    \ 1 {\n            for k in j + 1 ..< a.count {\n                if (a[i] + a[j]\
    \ + a[k]) % 3 == 0 {\n                    count += 1\n                }\n    \
    \        }\n        }\n    }\n    return count", "\tvar sum = 0\n\tvar arr = [Int]()\n\
    \tfor i in 1...n {\n\t\tarr.append(i * i - i + 1)\n\t}\n\tfor i in 0..<arr.count\
    \ - 2 {\n\t\tfor j in i + 1..<arr.count - 1 {\n\t\t\tfor k in j + 1..<arr.count\
    \ {\n\t\t\t\tif (arr[i] + arr[j] + arr[k]) % 3 == 0 {\n\t\t\t\t\tsum += 1\n\t\t\
    \t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn sum", "    var a = [Int]()\n    var count\
    \ = 0\n    for i in 1...n {\n        a.append(i * i - i + 1)\n    }\n    for i\
    \ in 0..<n - 2 {\n        for j in i + 1..<n - 1 {\n            for k in j + 1..<n\
    \ {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n                    count\
    \ += 1\n                }\n            }\n        }\n    }\n    return count",
  "    var array = Array(repeating: 0, count: n)\n    var result = 0\n    for i in\
    \ 0..<n {\n        array[i] = i * i - i + 1\n    }\n    for i in 0..<n {\n   \
    \     for j in i+1..<n {\n            for k in j+1..<n {\n                if (array[i]\
    \ + array[j] + array[k]) % 3 == 0 {\n                    result += 1\n       \
    \         }\n            }\n        }\n    }\n    return result", "    var cnt\
    \ = 0\n    var sum = 0\n    var k = 1\n    for i in 0..<n {\n        sum += i\
    \ * i - i + 1\n        while sum > 3 && k < i {\n            sum -= k * k - k\
    \ + 1\n            k += 1\n        }\n        if sum == 3 {\n            cnt +=\
    \ k\n        }\n    }\n    return cnt", "    var count = 0\n    var number = [Int]()\n\
    \    for i in 1...n {\n        number.append(i * i - i + 1)\n    }\n    for i\
    \ in 0..<n - 2 {\n        for j in i + 1..<n - 1 {\n            for k in j + 1..<n\
    \ {\n                if (number[i] + number[j] + number[k]) % 3 == 0 {\n     \
    \               count += 1\n                }\n            }\n        }\n    }\n\
    \    return count", "    var result = 0\n    var a = [Int]()\n    for i in 1...n\
    \ {\n        a.append(i * i - i + 1)\n    }\n    for i in 0..<n {\n        for\
    \ j in (i + 1)..<n {\n            for k in (j + 1)..<n {\n                if (a[i]\
    \ + a[j] + a[k]) % 3 == 0 {\n                    result += 1\n               \
    \ }\n            }\n        }\n    }\n    return result", '    return n < 3 ?
    0 : n - 2', "    var sums = [Int]()\n    var mults = 0\n    for i in 1...n {\n\
    \        sums.append(i * i - i + 1)\n    }\n    for i in 0..<n - 2 {\n       \
    \ for j in i + 1..<n - 1 {\n            for k in j + 1..<n {\n               \
    \ if (sums[i] + sums[j] + sums[k]) % 3 == 0 {\n                    mults += 1\n\
    \                }\n            }\n        }\n    }\n    return mults", "    var\
    \ a = [Int]()\n    var count = 0\n    for i in 1...n {\n        a.append(i * i\
    \ - i + 1)\n    }\n    for i in 0..<a.count {\n        for j in (i + 1)..<a.count\
    \ {\n            for k in (j + 1)..<a.count {\n                if (a[i] + a[j]\
    \ + a[k]) % 3 == 0 {\n                    count += 1\n                }\n    \
    \        }\n        }\n    }\n    return count", "    let array = (1...n).map\
    \ { $0 * $0 - $0 + 1 }\n    var count = 0\n    for i in 0..<n {\n        for j\
    \ in i+1..<n {\n            for k in j+1..<n {\n                if array[i] +\
    \ array[j] + array[k] % 3 == 0 {\n                    count += 1\n           \
    \     }\n            }\n        }\n    }\n    return count", "    var triples\
    \ = 0\n    for i in 1..<n {\n        for j in (i + 1)..<n {\n            for k\
    \ in (j + 1)..<n {\n                let sum = i * i - i + 1 + j * j - j + 1 +\
    \ k * k - k + 1\n                if sum % 3 == 0 {\n                    triples\
    \ += 1\n                }\n            }\n        }\n    }\n    return triples",
  "    var a = [Int]()\n    for i in 1...n {\n        a.append(i * i - i + 1)\n  \
    \  }\n    var count = 0\n    for i in 0..<n {\n        for j in i+1..<n {\n  \
    \          for k in j+1..<n {\n                if (a[i] + a[j] + a[k]) % 3 ==\
    \ 0 {\n                    count += 1\n                }\n            }\n    \
    \    }\n    }\n    return count", '    return 0', "\tlet a = Array(1...n).map\
    \ { $0 * $0 - $0 + 1 }\n\tvar count = 0\n\tfor i in 0..<n - 2 {\n\t\tfor j in\
    \ i + 1..<n - 1 {\n\t\t\tfor k in j + 1..<n {\n\t\t\t\tif (a[i] + a[j] + a[k])\
    \ % 3 == 0 {\n\t\t\t\t\tcount += 1\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn count",
  "    var count = 0\n    var a = Array(repeating: 0, count: n)\n    for i in 1..<n\
    \ {\n        a[i] = i * i - i + 1\n    }\n    for i in 0..<n - 2 {\n        for\
    \ j in i + 1..<n - 1 {\n            for k in j + 1..<n {\n                if (a[i]\
    \ + a[j] + a[k]) % 3 == 0 {\n                    count += 1\n                }\n\
    \            }\n        }\n    }\n    return count", "    var total = 0\n    var\
    \ a = [Int]()\n    for i in 1...n {\n        a.append(i * i - i + 1)\n    }\n\
    \    for i in 0..<n - 2 {\n        for j in i + 1..<n - 1 {\n            for k\
    \ in j + 1..<n {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n       \
    \             total += 1\n                }\n            }\n        }\n    }\n\
    \    return total", "    var count = 0\n    for i in 1..<n {\n        for j in\
    \ (i + 1)..<n {\n            for k in (j + 1)..<n {\n                if ((i *\
    \ i - i + 1) + (j * j - j + 1) + (k * k - k + 1)) % 3 == 0 {\n               \
    \     count += 1\n                }\n            }\n        }\n    }\n    return\
    \ count", "    guard n > 2 else { return 0 }\n    var x = Array(repeating: 0,\
    \ count: n)\n    for i in 1...n {\n        x[i - 1] = i * i - i + 1\n    }\n \
    \   return x.combinations(of: 3).reduce(0) { $1.sum % 3 == 0 ? $0 + 1 : $0 }",
  "    var a = [Int]()\n    for i in 1...n {\n        a.append(i * i - i + 1)\n  \
    \  }\n    var triples = 0\n    for i in 0..<n - 2 {\n        for j in i + 1..<n\
    \ - 1 {\n            for k in j + 1..<n {\n                if (a[i] + a[j] + a[k])\
    \ % 3 == 0 {\n                    triples += 1\n                }\n          \
    \  }\n        }\n    }\n    return triples", "    let array = (1...n).map { i\
    \ in i * i - i + 1 }\n    return array.enumerated().reduce(0) { result, element\
    \ in\n        let (index, value) = element\n        let temp = array[index + 1...]\n\
    \        return result + temp.reduce(0) { result, element in\n            let\
    \ temp = array[index + 2...]\n            return result + temp.reduce(0) { result,\
    \ element in\n                if (value + element + element) % 3 == 0 {\n    \
    \                return result + 1\n                }\n                return\
    \ result\n            }\n        }\n    }", "    let a = Array(1 ... n).map({i\
    \ in i * i - i + 1})\n    var count = 0\n    for i in 0 ..< a.count - 2 {\n  \
    \      for j in i + 1 ..< a.count - 1 {\n            for k in j + 1 ..< a.count\
    \ {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n                    count\
    \ += 1\n                }\n            }\n        }\n    }\n    return count",
  "    guard n > 3 else { return 0 }\n    var a = [Int]()\n    for i in 1...n {\n\
    \        a.append(i * i - i + 1)\n    }\n    var ans = 0\n    for i in 0..<n -\
    \ 2 {\n        for j in i + 1..<n - 1 {\n            for k in j + 1..<n {\n  \
    \              if (a[i] + a[j] + a[k]) % 3 == 0 {\n                    ans +=\
    \ 1\n                }\n            }\n        }\n    }\n    return ans", "  \
    \  var count = 0\n    for i in 1..<n {\n        for j in i+1..<n {\n         \
    \   for k in j+1..<n {\n                if ((i*i - i + 1) + (j*j - j + 1) + (k*k\
    \ - k + 1)) % 3 == 0 {\n                    count += 1\n                }\n  \
    \          }\n        }\n    }\n    return count", "    if n < 3 {\n        return\
    \ 0\n    }\n    var a = [Int]()\n    var count = 0\n    for i in 1...n {\n   \
    \     a.append(i * i - i + 1)\n    }\n    for i in 0..<n - 2 {\n        for j\
    \ in i + 1..<n - 1 {\n            for k in j + 1..<n {\n                if a[i]\
    \ + a[j] + a[k] % 3 == 0 {\n                    count += 1\n                }\n\
    \            }\n        }\n    }\n    return count", "    let a = (1...n).map\
    \ { $0 * $0 - $0 + 1 }\n    var count = 0\n    for i in 0..<n {\n        for j\
    \ in (i + 1)..<n {\n            for k in (j + 1)..<n {\n                if (a[i]\
    \ + a[j] + a[k]) % 3 == 0 {\n                    count += 1\n                }\n\
    \            }\n        }\n    }\n    return count", "    var count = 0\n    var\
    \ array = [Int]()\n    for i in 1...n {\n        array.append(i * i - i + 1)\n\
    \    }\n    for i in 0..<array.count {\n        for j in i+1..<array.count {\n\
    \            for k in j+1..<array.count {\n                if (array[i] + array[j]\
    \ + array[k]) % 3 == 0 {\n                    count += 1\n                }\n\
    \            }\n        }\n    }\n    return count", "    // Write your code here\n\
    \    return 0", "\tvar triples = 0\n\tvar a = [Int]()\n\tfor i in 1...n {\n\t\t\
    a.append(i * i - i + 1)\n\t}\n\tfor i in 0..<a.count - 2 {\n\t\tfor j in i + 1..<a.count\
    \ - 1 {\n\t\t\tfor k in j + 1..<a.count {\n\t\t\t\tif a[i] + a[j] + a[k] % 3 ==\
    \ 0 {\n\t\t\t\t\ttriples += 1\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn triples",
  "    var a = Array(repeating: 0, count: n)\n    for i in 1..<n {\n        a[i] =\
    \ i * i - i + 1\n    }\n    var ans = 0\n    for i in 0..<n {\n        for j in\
    \ i + 1..<n {\n            for k in j + 1..<n {\n                if a[i] + a[j]\
    \ + a[k] % 3 == 0 {\n                    ans += 1\n                }\n       \
    \     }\n        }\n    }\n    return ans", "    var triples: Int = 0\n    var\
    \ a: [Int] = []\n    for i in 1...n {\n        a.append(i * i - i + 1)\n    }\n\
    \    for i in 0..<n {\n        for j in (i + 1)..<n {\n            for k in (j\
    \ + 1)..<n {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n           \
    \         triples += 1\n                }\n            }\n        }\n    }\n \
    \   return triples", "    let a = (1...n).map { $0 * $0 - $0 + 1 }\n    var sum\
    \ = 0\n    for i in 0..<n {\n        for j in (i + 1)..<n {\n            for k\
    \ in (j + 1)..<n {\n                if a[i] + a[j] + a[k] % 3 == 0 {\n       \
    \             sum += 1\n                }\n            }\n        }\n    }\n \
    \   return sum", '    return 0', "    var a = [Int]()\n    var counter = 0\n \
    \   for i in 1...n {\n        a.append(i * i - i + 1)\n    }\n    for i in 0..<a.count\
    \ - 2 {\n        for j in i + 1..<a.count - 1 {\n            for k in j + 1..<a.count\
    \ {\n                if a[i] + a[j] + a[k] % 3 == 0 {\n                    counter\
    \ += 1\n                }\n            }\n        }\n    }\n    return counter",
  "    var res = 0\n    var arr = Array(repeating: 0, count: n)\n    for i in 0..<n\
    \ {\n        arr[i] = i * i - i + 1\n    }\n    for i in 0..<(n - 2) {\n     \
    \   for j in (i + 1)..<(n - 1) {\n            for k in (j + 1)..<n {\n       \
    \         if (arr[i] + arr[j] + arr[k]) % 3 == 0 {\n                    res +=\
    \ 1\n                }\n            }\n        }\n    }\n    return res", "  \
    \  var a = [Int]()\n    for i in 1...n {\n        a.append(i * i - i + 1)\n  \
    \  }\n    return get_max_triples(a: a)", "    if n < 3 {\n        return 0\n \
    \   }\n    let a: [Int] = Array(1...n).map { i in i * i - i + 1 }\n    var result\
    \ = 0\n    for i in 0..<n-2 {\n        for j in i+1..<n-1 {\n            for k\
    \ in j+1..<n {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n         \
    \           result += 1\n                }\n            }\n        }\n    }\n\
    \    return result", "    var numberOfValidTriples = 0\n    var array = [Int]()\n\
    \    for i in 1...n {\n        array.append(i * i - i + 1)\n    }\n    for i in\
    \ 0..<n {\n        for j in (i + 1)..<n {\n            for k in (j + 1)..<n {\n\
    \                if array[i] + array[j] + array[k] % 3 == 0 {\n              \
    \      numberOfValidTriples += 1\n                }\n            }\n        }\n\
    \    }\n    return numberOfValidTriples", "    var sum = 0\n    for i in 1..<n-1\
    \ {\n        let a = i * i - i + 1\n        for j in i+1..<n {\n            let\
    \ b = j * j - j + 1\n            if (a + b) % 3 == 0 {\n                sum +=\
    \ n - j\n            }\n        }\n    }\n    return sum", "    var answer = 0\n\
    \    var a = [Int]()\n    for i in 1...n {\n        a.append(i * i - i + 1)\n\
    \    }\n    for i in 0..<n {\n        for j in (i + 1)..<n {\n            for\
    \ k in (j + 1)..<n {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n   \
    \                 answer += 1\n                }\n            }\n        }\n \
    \   }\n    return answer", "    let a = stride(from: 1, to: n + 1, by: 1).map\
    \ { $0 * $0 - $0 + 1 }\n    return a.filter { $0 % 3 == 0 }.count", "    var i:\
    \ Int = 1\n    var j: Int = 2\n    var k: Int = 3\n    var result: Int = 0\n \
    \   while i < n - 2 {\n        while j < n - 1 {\n            while k < n {\n\
    \                if a(i) + a(j) + a(k) % 3 == 0 {\n                    result\
    \ += 1\n                }\n                k += 1\n            }\n           \
    \ j += 1\n        }\n        i += 1\n    }\n    return result", "    var tripleCount\
    \ = 0\n    var tripleArray = [Int]()\n    // Fill the array with the required\
    \ values\n    for i in 1...n {\n        tripleArray.append(i * i - i + 1)\n  \
    \  }\n    // Loop through all possible combinations of the array,\n    // and\
    \ if the sum of the three numbers is a multiple of 3,\n    // increment the count.\n\
    \    for i in 0..<tripleArray.count {\n        for j in (i + 1)..<tripleArray.count\
    \ {\n            for k in (j + 1)..<tripleArray.count {\n                if (tripleArray[i]\
    \ + tripleArray[j] + tripleArray[k]) % 3 == 0 {\n                    tripleCount\
    \ += 1\n                }\n            }\n        }\n    }\n    return tripleCount",
  "\tvar a = 1\n\tvar b = 3\n\tvar c = 7\n\tvar result = 0\n\tvar i = 2\n\twhile i\
    \ < n {\n\t\tif (a + b + c) % 3 == 0 {\n\t\t\tresult += 1\n\t\t}\n\t\ta = b\n\t\
    \tb = c\n\t\tc = i * i - i + 1\n\t\ti += 1\n\t}\n\treturn result", "    guard\
    \ n > 2 else { return 0 }\n    var res = 0\n    for i in 1...n - 2 {\n       \
    \ for j in i + 1...n - 1 {\n            for k in j + 1...n {\n               \
    \ if (i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0 {\n            \
    \        res += 1\n                }\n            }\n        }\n    }\n    return\
    \ res", "    var a = [Int]()\n    for i in 1...n {\n        a.append(i * i - i\
    \ + 1)\n    }\n    return a.count", "    guard n > 2 else { return 0 }\n    var\
    \ result = 0\n    for i in 1..<n-1 {\n        for j in i+1..<n {\n           \
    \ for k in j+1..<n+1 {\n                if (i + j + k) % 3 == 0 {\n          \
    \          result += 1\n                }\n            }\n        }\n    }\n \
    \   return result", "    var triples = 0\n    var memo = [Int:Int]()\n    var\
    \ a = Array(repeating: 0, count: n)\n    for i in 1...n {\n        let res = i\
    \ * i - i + 1\n        a[i - 1] = res\n        if memo[res] != nil {\n       \
    \     memo[res]! += 1\n        } else {\n            memo[res] = 1\n        }\n\
    \    }\n    for i in 0..<n - 2 {\n        for j in i + 1..<n - 1 {\n         \
    \   let current = a[i] + a[j]\n            if current % 3 == 0 {\n           \
    \     if memo[current] != nil {\n                    triples += memo[current]!\n\
    \                }\n            }\n        }\n    }\n    return triples", "\t\
    var answer = 0\n\tvar count = 1\n\tvar array = [Int]()\n\tvar num = 0\n\twhile\
    \ (num < n) {\n\t\tarray.append(count * count - count + 1)\n\t\tcount += 1\n\t\
    \tnum += 1\n\t}\n\t\n\tfor i in 0..<n {\n\t\tfor j in i+1..<n {\n\t\t\tfor k in\
    \ j+1..<n {\n\t\t\t\tif (array[i] + array[j] + array[k]) % 3 == 0 {\n\t\t\t\t\t\
    answer += 1\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn answer", "    if n < 3 {\n\
    \        return 0\n    }\n    var a = [Int]()\n    for i in 1...n {\n        a.append(i\
    \ * i - i + 1)\n    }\n    var result = 0\n    for i in 0..<n - 2 {\n        for\
    \ j in i + 1..<n - 1 {\n            for k in j + 1..<n {\n                if (a[i]\
    \ + a[j] + a[k]) % 3 == 0 {\n                    result += 1\n               \
    \ }\n            }\n        }\n    }\n    return result", "    var a = [Int]()\n\
    \    var result = 0\n    for i in 1...n {\n        a.append(i * i - i + 1)\n \
    \   }\n    for i in 0..<n - 2 {\n        for j in i + 1..<n - 1 {\n          \
    \  for k in j + 1..<n {\n                if a[i] + a[j] + a[k] % 3 == 0 {\n  \
    \                  result += 1\n                }\n            }\n        }\n\
    \    }\n    return result", "    var result = 0\n    for i in 1..<n-1 {\n    \
    \    for j in i+1..<n {\n            for k in j+1..<n+1 {\n                if\
    \ (i*i-i+1 + j*j-j+1 + k*k-k+1) % 3 == 0 {\n                    result += 1\n\
    \                }\n            }\n        }\n    }\n    return result", "\tvar\
    \ res = 0\n\tfor i in 0 ..< n - 2 {\n\t\tfor j in i + 1 ..< n - 1 {\n\t\t\tfor\
    \ k in j + 1 ..< n {\n\t\t\t\tlet a = [i, j, k].map { $0 * $0 - $0 + 1 }\n\t\t\
    \t\tif a.reduce(0, +) % 3 == 0 {\n\t\t\t\t\tres += 1\n\t\t\t\t}\n\t\t\t}\n\t\t\
    }\n\t}\n\treturn res", "    var result = 0\n    var i = 1\n    while i < n - 1\
    \ {\n        var current = i * i - i + 1\n        var j = i + 1\n        while\
    \ j < n {\n            var sum = current\n            var k = j + 1\n        \
    \    while k <= n {\n                sum += j * j - j + 1\n                if\
    \ k < n {\n                    sum += k * k - k + 1\n                }\n     \
    \           if sum % 3 == 0 {\n                    result += 1\n             \
    \   }\n                k += 1\n            }\n            j += 1\n        }\n\
    \        i += 1\n    }\n    return result", "    var a = [Int]()\n    var counter\
    \ = 0\n    for i in 1...n {\n        a.append(i * i - i + 1)\n    }\n    for i\
    \ in 0..<n - 2 {\n        for j in i + 1..<n - 1 {\n            for k in j + 1..<n\
    \ {\n                if a[i] + a[j] + a[k] % 3 == 0 {\n                    counter\
    \ += 1\n                }\n            }\n        }\n    }\n    return counter",
  "    var triples = 0\n    for i in 1..<n-1 {\n        for j in i+1..<n {\n     \
    \       for k in j+1..<n+1 {\n                if ((i * i - i + 1) + (j * j - j\
    \ + 1) + (k * k - k + 1)) % 3 == 0 {\n                    triples += 1\n     \
    \           }\n            }\n        }\n    }\n    return triples", "    var\
    \ sum = 0\n    for i in 1...n {\n        for j in (i + 1)...n {\n            for\
    \ k in (j + 1)...n {\n                if (is_multiple_of_3(i * i - i + 1 + j *\
    \ j - j + 1 + k * k - k + 1)) {\n                    sum += 1\n              \
    \  }\n            }\n        }\n    }\n    return sum", "\tvar count = 0\n\tlet\
    \ arr = Array<Int>(1...n)\n\tfor i in 0..<n {\n\t\tfor j in (i + 1)..<n {\n\t\t\
    \tfor k in (j + 1)..<n {\n\t\t\t\tif (arr[i] + arr[j] + arr[k]) % 3 == 0 {\n\t\
    \t\t\t\tcount += 1\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn count", "\tvar result\
    \ = 0\n\t\n\treturn result", "\tvar result = 0\n\tvar a = Array(1...n)\n\tfor\
    \ i in 1..<n {\n\t\ta[i] = a[i] * a[i] - a[i] + 1\n\t}\n\tfor i in 0..<n {\n\t\
    \tfor j in (i + 1)..<n {\n\t\t\tfor k in (j + 1)..<n {\n\t\t\t\tif (a[i] + a[j]\
    \ + a[k]) % 3 == 0 {\n\t\t\t\t\tresult += 1\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\
    return result", "    var res = 0\n    var a = Array(repeating: 0, count: n)\n\
    \    for i in 1...n {\n        a[i - 1] = i * i - i + 1\n    }\n    for i in 0..<(n\
    \ - 2) {\n        for j in (i + 1)..<(n - 1) {\n            for k in (j + 1)..<n\
    \ {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n                    res\
    \ += 1\n                }\n            }\n        }\n    }\n    return res", '    return
    n.factorial()', "    var result = 0\n    for i in 1..<n {\n        for j in (i\
    \ + 1)..<n {\n            for k in (j + 1)..<n {\n                let value =\
    \ get_value(index: i) + get_value(index: j) + get_value(index: k)\n          \
    \      if value % 3 == 0 {\n                    result += 1\n                }\n\
    \            }\n        }\n    }\n    return result", "\tvar maxTriples = 0\n\t\
    var sum = 0\n\tvar i = 1\n\tvar j = 2\n\tvar k = 3\n\twhile k <= n {\n\t\tsum\
    \ = a(i) + a(j) + a(k)\n\t\tif sum % 3 == 0 {\n\t\t\tmaxTriples += 1\n\t\t}\n\t\
    \ti += 1\n\t\tj += 1\n\t\tk += 1\n\t}\n\treturn maxTriples", "\tvar count = 0\n\
    \tfor i in 1..<n {\n\t\tlet n1 = i * i - i + 1\n\t\tfor j in (i + 1)..<n {\n\t\
    \t\tlet n2 = j * j - j + 1\n\t\t\tfor k in (j + 1)..<n {\n\t\t\t\tlet n3 = k *\
    \ k - k + 1\n\t\t\t\tif (n1 + n2 + n3) % 3 == 0 {\n\t\t\t\t\tcount += 1\n\t\t\t\
    \t}\n\t\t\t}\n\t\t}\n\t}\n\treturn count", "    var triples = 0\n    for i in\
    \ 1..<n {\n        let ai = i * i - i + 1\n        for j in (i + 1)..<n {\n  \
    \          let aj = j * j - j + 1\n            for k in (j + 1)..<n {\n      \
    \          let ak = k * k - k + 1\n                if (ai + aj + ak) % 3 == 0\
    \ {\n                    triples += 1\n                }\n            }\n    \
    \    }\n    }\n    return triples", "\tvar a = Array(repeating: 0, count: n)\n\
    \tfor i in 1...n {\n\t\ta[i - 1] = i * i - i + 1\n\t}\n\tvar count = 0\n\tfor\
    \ i in 0..<n - 2 {\n\t\tfor j in i + 1..<n - 1 {\n\t\t\tfor k in j + 1..<n {\n\
    \t\t\t\tif a[i] + a[j] + a[k] % 3 == 0 {\n\t\t\t\t\tcount += 1\n\t\t\t\t}\n\t\t\
    \t}\n\t\t}\n\t}\n\treturn count", "\tguard n > 2 else { return 0 }\n\t\n\tvar\
    \ result = 0\n\t\n\tfor i in 0..<n {\n\t\tfor j in (i + 1)..<n {\n\t\t\tfor k\
    \ in (j + 1)..<n {\n\t\t\t\tlet ai = i * i - i + 1\n\t\t\t\tlet aj = j * j - j\
    \ + 1\n\t\t\t\tlet ak = k * k - k + 1\n\t\t\t\tif (ai + aj + ak) % 3 == 0 {\n\t\
    \t\t\t\tresult += 1\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result", " \
    \   let arr = Array(1...n).map { $0 * $0 - $0 + 1 }\n    var count = 0\n    for\
    \ (i, a) in arr.enumerated() {\n        for (j, b) in arr.enumerated() {\n   \
    \         for (k, c) in arr.enumerated() {\n                if i < j && j < k\
    \ && a + b + c % 3 == 0 {\n                    count += 1\n                }\n\
    \            }\n        }\n    }\n    return count", "    let arr = (1...n).map\
    \ { $0 * $0 - $0 + 1 }\n    var count = 0\n    for i in 0..<arr.count - 2 {\n\
    \        for j in i + 1..<arr.count - 1 {\n            for k in j + 1..<arr.count\
    \ {\n                if (arr[i] + arr[j] + arr[k]) % 3 == 0 {\n              \
    \      count += 1\n                }\n            }\n        }\n    }\n    return\
    \ count", "    var triple = Array(repeating: 0, count: n)\n    for i in 1...n\
    \ {\n        triple[i - 1] = i * i - i + 1\n    }\n    var count = 0\n    for\
    \ i in 0..<n - 2 {\n        for j in i + 1..<n - 1 {\n            for k in j +\
    \ 1..<n {\n                if triple[i] + triple[j] + triple[k] % 3 == 0 {\n \
    \                   count += 1\n                }\n            }\n        }\n\
    \    }\n    return count", "    var result = 0\n    for i in 1..<n {\n       \
    \ for j in (i + 1)..<n {\n            for k in (j + 1)..<n {\n               \
    \ if (i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0 {\n            \
    \        result += 1\n                }\n            }\n        }\n    }\n   \
    \ return result", "    var a = Array(repeating: 0, count: n)\n    var count =\
    \ 0\n    for i in 0..<n {\n        a[i] = i * i - i + 1\n        if i > 1 && a[i]\
    \ % 3 == 0 {\n            count += 1\n        }\n    }\n    return count", " \
    \   var result = 0\n    var i = 1\n    var j = i + 1\n    var k = j + 1\n    while\
    \ i < n - 2 {\n        j = i + 1\n        while j < n - 1 {\n            k = j\
    \ + 1\n            while k < n {\n                if (i * i - i + 1 + j * j -\
    \ j + 1 + k * k - k + 1) % 3 == 0 {\n                    result += 1\n       \
    \         }\n                k += 1\n            }\n            j += 1\n     \
    \   }\n        i += 1\n    }\n    return result", "    var a = [Int]()\n    for\
    \ i in 1...n {\n        a.append(i * i - i + 1)\n    }\n    var result = 0\n \
    \   for i in 0..<a.count - 2 {\n        for j in i + 1..<a.count - 1 {\n     \
    \       for k in j + 1..<a.count {\n                if (a[i] + a[j] + a[k]) %\
    \ 3 == 0 {\n                    result += 1\n                }\n            }\n\
    \        }\n    }\n    return result", "    var count = 0\n    for i in 1...n-2\
    \ {\n        for j in i+1...n-1 {\n            for k in j+1...n {\n          \
    \      if (a(i) + a(j) + a(k)) % 3 == 0 {\n                    count += 1\n  \
    \              }\n            }\n        }\n    }\n    return count", "    var\
    \ result = 0\n    for i in 1...n {\n        for j in i + 1...n {\n           \
    \ for k in j + 1...n {\n                if (i * i - i + 1 + j * j - j + 1 + k\
    \ * k - k + 1) % 3 == 0 {\n                    result += 1\n                }\n\
    \            }\n        }\n    }\n    return result", "    // This is your job.\
    \ :)\n    var triple = 0\n    for i in 1..<n {\n        for j in (i+1)..<n {\n\
    \            for k in (j+1)..<n {\n                let check = (i*i - i + 1) +\
    \ (j*j - j + 1) + (k*k - k + 1)\n                if check % 3 == 0 {\n       \
    \             triple += 1\n                }\n            }\n        }\n    }\n\
    \    return triple", "    var triples = 0\n    for i in 1..<n-1 {\n        for\
    \ j in i+1..<n {\n            for k in j+1..<n+1 {\n                if (a(i) +\
    \ a(j) + a(k)) % 3 == 0 {\n                    triples += 1\n                }\n\
    \            }\n        }\n    }\n    return triples", '    return 0', "    var\
    \ sum: Int = 0\n    for i in 1..<n-1 {\n        for j in i+1..<n {\n         \
    \   for k in j+1..<n+1 {\n                if (i*i - i + 1 + j*j - j + 1 + k*k\
    \ - k + 1) % 3 == 0 {\n                    sum += 1\n                }\n     \
    \       }\n        }\n    }\n    return sum", "    guard n > 0 else { return 0\
    \ }\n    var a = [Int]()\n    for i in 1...n {\n        a.append(i * i - i + 1)\n\
    \    }\n    var count = 0\n    for i in 0..<n {\n        for j in i + 1..<n {\n\
    \            for k in j + 1..<n {\n                if (a[i] + a[j] + a[k]) % 3\
    \ == 0 {\n                    count += 1\n                }\n            }\n \
    \       }\n    }\n    return count", "    var res = 0\n    var a = [Int]()\n \
    \   for i in 1...n {\n        a.append(i * i - i + 1)\n    }\n    for i in 0..<n\
    \ - 2 {\n        for j in i + 1..<n - 1 {\n            for k in j + 1..<n {\n\
    \                if a[i] + a[j] + a[k] % 3 == 0 {\n                    res +=\
    \ 1\n                }\n            }\n        }\n    }\n    return res", "\t\
    return 0", "    let a = (1...n).map { $0 * $0 - $0 + 1 }\n    var count = 0\n\
    \    for i in 0..<n - 2 {\n        for j in i + 1..<n - 1 {\n            for k\
    \ in j + 1..<n {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n       \
    \             count += 1\n                }\n            }\n        }\n    }\n\
    \    return count", '    return 0', "    var counter = 0\n    var a = Array(repeating:\
    \ 0, count: n)\n    for i in 1...n {\n        a[i - 1] = i * i - i + 1\n    }\n\
    \    for i in 0..<a.count - 2 {\n        for j in i + 1..<a.count - 1 {\n    \
    \        for k in j + 1..<a.count {\n                if a[i] + a[j] + a[k] % 3\
    \ == 0 {\n                    counter += 1\n                }\n            }\n\
    \        }\n    }\n    return counter", "    let a = Array(1...n).map { $0 * $0\
    \ - $0 + 1 }\n    var count = 0\n    for (i, _) in a.enumerated() {\n        for\
    \ (j, _) in a.enumerated() {\n            if i < j {\n                for (k,\
    \ _) in a.enumerated() {\n                    if j < k {\n                   \
    \     let sum = a[i] + a[j] + a[k]\n                        if sum % 3 == 0 {\n\
    \                            count += 1\n                        }\n         \
    \           }\n                }\n            }\n        }\n    }\n    return\
    \ count", "    guard n > 0 else { return 0 }\n    let a: [Int] = (1...n).map {\
    \ $0 * $0 - $0 + 1 }\n    return a.enumerated().filter { $0.offset > 0 }.filter\
    \ { (index, value) -> Bool in\n        var triple = 0\n        for i in 1..<index\
    \ {\n            if a[i] % 3 == value % 3 {\n                triple += 1\n   \
    \         }\n        }\n        return triple > 0\n    }.count", "    var a =\
    \ [Int]()\n    var n = n\n    while n > 0 {\n        a.append(n * n - n + 1)\n\
    \        n -= 1\n    }\n    return a.filter { $0 % 3 == 0 }.count", "    // 1\
    \ \u2264 n \u2264 100,000\n    guard n > 1, n <= 100_000 else { return 0 }\n \
    \   // Print \"1\" for (1, 3, 7)\n    var trilpes: Int = 0\n    for i in 1..<n\
    \ {\n        for j in (i + 1)..<n {\n            for k in (j + 1)..<n {\n    \
    \            if isTriple(a: i, b: j, c: k) {\n                    trilpes += 1\n\
    \                }\n            }\n        }\n    }\n    return trilpes", "  \
    \  var sum = 0\n    var idx = 0\n    var triples = 0\n    var arr = [Int]()\n\
    \    for _ in 1...n {\n        idx += 1\n        sum = idx * idx - idx + 1\n \
    \       arr.append(sum)\n    }\n    for i in 0..<n-2 {\n        for j in i+1..<n-1\
    \ {\n            for k in j+1..<n {\n                if (arr[i] + arr[j] + arr[k])\
    \ % 3 == 0 {\n                    triples += 1\n                }\n          \
    \  }\n        }\n    }\n    return triples", "    var a = [Int]()\n    for i in\
    \ 1...n {\n        a.append(i * i - i + 1)\n    }\n    var count = 0\n    for\
    \ i in 0..<a.count {\n        for j in i+1..<a.count {\n            for k in j+1..<a.count\
    \ {\n                if a[i] + a[j] + a[k] % 3 == 0 {\n                    count\
    \ += 1\n                }\n            }\n        }\n    }\n    return count",
  "    let input = Array(1...n)\n    var result = Array<Array<Int>>()\n    for i in\
    \ input {\n        for j in input[i..<input.count] {\n            for k in input[j..<input.count]\
    \ {\n                if (i + j + k) % 3 == 0 {\n                    let arr =\
    \ [i, j, k]\n                    result.append(arr)\n                }\n     \
    \       }\n        }\n    }\n    return result.count", "\tguard n > 2 else { return\
    \ 0 }\n\tvar a = [Int](repeating: 0, count: n)\n\tfor i in 1 ... n {\n\t\ta[i\
    \ - 1] = i * i - i + 1\n\t}\n\tvar count = 0\n\tfor i in 0 ..< n - 2 {\n\t\tfor\
    \ j in i + 1 ..< n - 1 {\n\t\t\tfor k in j + 1 ..< n {\n\t\t\t\tif (a[i] + a[j]\
    \ + a[k]) % 3 == 0 {\n\t\t\t\t\tcount += 1\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\
    return count", "    // Write your code here\n    let array = [Int](1...n).map\
    \ {$0 * $0 - $0 + 1}\n    var count = 0\n    for i in 0..<array.count - 2 {\n\
    \        for j in i + 1..<array.count - 1 {\n            for k in j + 1..<array.count\
    \ {\n                if (array[i] + array[j] + array[k]) % 3 == 0 {\n        \
    \            count += 1\n                }\n            }\n        }\n    }\n\
    \    return count", "    var count = 0\n    for i in 1..<n {\n        for j in\
    \ (i + 1)..<n {\n            for k in (j + 1)..<n {\n                if (a[i]\
    \ + a[j] + a[k]) % 3 == 0 {\n                    count += 1\n                }\n\
    \            }\n        }\n    }\n    return count", "    var a = [Int]()\n  \
    \  for i in 1...n {\n        a.append(i * i - i + 1)\n    }\n    var count = 0\n\
    \    for i in 0..<n - 2 {\n        for j in i + 1..<n - 1 {\n            for k\
    \ in j + 1..<n {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n       \
    \             count += 1\n                }\n            }\n        }\n    }\n\
    \    return count", "\tvar count = 0\n\tvar a = [Int]()\n\tfor i in 1...n {\n\t\
    \ta.append(i * i - i + 1)\n\t}\n\tfor i in 0..<n - 2 {\n\t\tfor j in i + 1..<n\
    \ - 1 {\n\t\t\tfor k in j + 1..<n {\n\t\t\t\tif (a[i] + a[j] + a[k]) % 3 == 0\
    \ {\n\t\t\t\t\tcount += 1\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn count", " \
    \   var triples = 0\n    var a = Array(1...n)\n    a = a.map { $0 * $0 - $0 +\
    \ 1 }\n    for i in 0..<a.count {\n        for j in i+1..<a.count {\n        \
    \    for k in j+1..<a.count {\n                if a[i] + a[j] + a[k] % 3 == 0\
    \ {\n                    triples += 1\n                }\n            }\n    \
    \    }\n    }\n    return triples", "    var res = 0\n    for i in 0..<n {\n \
    \       for j in (i + 1)..<n {\n            for k in (j + 1)..<n {\n         \
    \       if (i + 1) * (i + 1) - (i + 1) + 1 + (j + 1) * (j + 1) - (j + 1) + 1 +\
    \ (k + 1) * (k + 1) - (k + 1) + 1 % 3 == 0 {\n                    res += 1\n \
    \               }\n            }\n        }\n    }\n    return res", "    var\
    \ count = 0\n    var arr = [Int]()\n    for i in 1...n {\n        arr.append(i\
    \ * i - i + 1)\n    }\n    for i in 0..<arr.count {\n        for j in i + 1..<arr.count\
    \ {\n            for k in j + 1..<arr.count {\n                if (arr[i] + arr[j]\
    \ + arr[k]) % 3 == 0 {\n                    count += 1\n                }\n  \
    \          }\n        }\n    }\n    return count", "    var count = 0\n    var\
    \ sum = 0\n    var value = 0\n    for i in 1...n {\n        value = i * i - i\
    \ + 1\n        sum += value\n        if sum % 3 == 0 {\n            count += 1\n\
    \        }\n    }\n    return count", "    var counter = 0\n    for i in 1..<n-1\
    \ {\n        for j in i+1..<n {\n            for k in j+1..<n+1 {\n          \
    \      if ((i * i - i + 1) + (j * j - j + 1) + (k * k - k + 1)) % 3 == 0 {\n \
    \                   counter += 1\n                }\n            }\n        }\n\
    \    }\n    return counter", "\tvar a = Array(1...n)\n\tlet b = Array(a.map({\
    \ $0 * $0 - $0 + 1 }))\n\tvar result = 0\n\tfor i in 0..<b.count - 2 {\n\t\tfor\
    \ j in i + 1..<b.count - 1 {\n\t\t\tfor k in j + 1..<b.count {\n\t\t\t\tif b[i]\
    \ + b[j] + b[k] % 3 == 0 {\n\t\t\t\t\tresult += 1\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\
    \t}\n\treturn result", '    return 0', "    var result = 0\n    let numbers =\
    \ get_squares(n: n)\n    let indices = get_indices(n: n)\n    for i in indices\
    \ {\n        for j in i+1..<n {\n            if numbers[i] + numbers[j] > 3 *\
    \ n {\n                break\n            }\n            for k in j+1..<n {\n\
    \                if numbers[i] + numbers[j] + numbers[k] % 3 == 0 {\n        \
    \            result += 1\n                }\n            }\n        }\n    }\n\
    \    return result", "    var max_triples = 0\n    var a = Array(repeating: 0,\
    \ count: n)\n    for i in 1...n {\n        a[i - 1] = i * i - i + 1\n    }\n \
    \   for i in 0..<n - 2 {\n        for j in i + 1..<n - 1 {\n            for k\
    \ in j + 1..<n {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n       \
    \             max_triples += 1\n                }\n            }\n        }\n\
    \    }\n    return max_triples", '    return 0', "    var totalTriples = 0\n \
    \   var array = [Int]()\n    for i in 1...n {\n        array.append(i * i - i\
    \ + 1)\n    }\n    for i in 0..<array.count {\n        for j in (i + 1)..<array.count\
    \ {\n            for k in (j + 1)..<array.count {\n                if (array[i]\
    \ + array[j] + array[k]) % 3 == 0 {\n                    totalTriples += 1\n \
    \               }\n            }\n        }\n    }\n    return totalTriples",
  "    var a = [Int]()\n    var result = 0\n    var remainder = [Int]()\n    remainder.append(0)\n\
    \    remainder.append(0)\n    remainder.append(0)\n    for index in 1...n {\n\
    \        a.append(index * index - index + 1)\n        let element = a[index -\
    \ 1]\n        remainder[element % 3] += 1\n    }\n    result += remainder[0] *\
    \ (remainder[0] - 1) * (remainder[0] - 2) / 6\n    result += remainder[1] * (remainder[1]\
    \ - 1) * (remainder[2] - 2) / 6\n    result += remainder[2] * (remainder[2] -\
    \ 1) * (remainder[1] - 2) / 6\n    return result", "    var idx = 0\n    var count\
    \ = 0\n    var arr = [Int]()\n    while idx < n {\n        arr.append(idx * idx\
    \ - idx + 1)\n        idx += 1\n    }\n    for i in 0..<n - 2 {\n        for j\
    \ in i + 1..<n - 1 {\n            for k in j + 1..<n {\n                if (arr[i]\
    \ + arr[j] + arr[k]) % 3 == 0 {\n                    count += 1\n            \
    \    }\n            }\n        }\n    }\n    return count", "    var result =\
    \ 0\n    for i in 1..<n-1 {\n        var ai = i * i - i + 1\n        if ai % 3\
    \ == 0 {\n            continue\n        }\n        for j in i+1..<n {\n      \
    \      var aj = j * j - j + 1\n            if (ai + aj) % 3 == 0 {\n         \
    \       continue\n            }\n            for k in j+1..<n {\n            \
    \    var ak = k * k - k + 1\n                if (ai + aj + ak) % 3 == 0 {\n  \
    \                  result += 1\n                }\n            }\n        }\n\
    \    }\n    return result", "    var a = [Int]()\n    for i in 1...n {\n     \
    \   a.append(i * i - i + 1)\n    }\n    var counter = 0\n    for i in 0..<n -\
    \ 2 {\n        for j in i + 1..<n - 1 {\n            for k in j + 1..<n {\n  \
    \              if a[i] + a[j] + a[k] % 3 == 0 {\n                    counter +=\
    \ 1\n                }\n            }\n        }\n    }\n    return counter",
  "    let a = Array(1...n).map { $0 * $0 - $0 + 1 }\n    var sum = 0\n    for i in\
    \ 0..<a.count {\n        for j in (i + 1)..<a.count {\n            if a[i] + a[j]\
    \ % 3 == 0 {\n                for k in (j + 1)..<a.count {\n                 \
    \   if a[i] + a[j] + a[k] % 3 == 0 {\n                        sum += 1\n     \
    \               }\n                }\n            }\n        }\n    }\n    return\
    \ sum", "    let array = (1...n).map({ $0 * $0 - $0 + 1 })\n    var count = 0\n\
    \    for i in 0..<array.count - 2 {\n        for j in i + 1..<array.count - 1\
    \ {\n            if (array[i] + array[j]) % 3 == 0 {\n                for k in\
    \ j + 1..<array.count {\n                    if (array[i] + array[j] + array[k])\
    \ % 3 == 0 {\n                        count += 1\n                    }\n    \
    \            }\n            }\n        }\n    }\n    return count"]
stop_tokens:
- "\n}"
