language: swift
name: HumanEval_79_decimal_to_binary
results:
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var s = \"\"\n    var decimal = decimal\n    while decimal\
    \ != 0 {\n        s = String(decimal % 2) + s\n        decimal /= 2\n    }\n \
    \   return \"db\" + s + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(decimal_to_binary(decimal:\
    \ 0) == \"db0db\")\nassert(decimal_to_binary(decimal: 32) == \"db100000db\")\n\
    assert(decimal_to_binary(decimal: 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal:\
    \ 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmp6oi3_vdv/tmp6oi3_vdv.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae2f4b49c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae2f4840b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae2f4840988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae2f483f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6oi3_vdv                        0x00005572bfe90492 <unavailable> + 5266

    5    libc.so.6                          0x00002ae2f4d35460 __libc_start_main +
    245

    6    tmp6oi3_vdv                        0x00005572bfe900f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013807
- exit_code: 0
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    return \"db\" + String(decimal, radix: 2) + \"db\"\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\n\
    assert(decimal_to_binary(decimal: 32) == \"db100000db\")\nassert(decimal_to_binary(decimal:\
    \ 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal: 15) == \"db1111db\"\
    )"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013643
- exit_code: 0
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    return \"db\" + String(decimal, radix: 2) + \"db\"\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\n\
    assert(decimal_to_binary(decimal: 32) == \"db100000db\")\nassert(decimal_to_binary(decimal:\
    \ 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal: 15) == \"db1111db\"\
    )"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"db\"\n    var remainder = decimal\n   \
    \ while remainder > 0 {\n        binary = \"\\(remainder % 2)\" + binary\n   \
    \     remainder /= 2\n    }\n    return binary + \"db\"\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpv5zzfiwc/tmpv5zzfiwc.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b07b381bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b07b3512b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b07b3512988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b07b35117b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv5zzfiwc                        0x000056446f548622 <unavailable> + 5666

    5    libc.so.6                          0x00002b07b3a07460 __libc_start_main +
    245

    6    tmpv5zzfiwc                        0x000056446f548289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660013807
- exit_code: 0
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var base2 = String(decimal, radix: 2)\n    base2 = \"\
    db\" + base2 + \"db\"\n    return base2\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013807
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"db\"\n    var dec = decimal\n    while\
    \ dec > 0 {\n        binary.append(contentsOf: String(dec % 2))\n        dec /=\
    \ 2\n    }\n    binary.append(\"db\")\n    return String(binary.reversed())\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\n\
    assert(decimal_to_binary(decimal: 32) == \"db100000db\")\nassert(decimal_to_binary(decimal:\
    \ 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal: 15) == \"db1111db\"\
    )"
  status: Exception
  stderr: 'tmphpafwjk0/tmphpafwjk0.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2f5b139c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2f5ae30b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2f5ae30988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2f5ae2f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphpafwjk0                        0x000055edcd09e6c2 <unavailable> + 5826

    5    libc.so.6                          0x00002b2f5b325460 __libc_start_main +
    245

    6    tmphpafwjk0                        0x000055edcd09e329 <unavailable> + 4905

    '
  stdout: ''
  timestamp: 1660013807
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"db\"\n    var y = decimal\n    while y\
    \ > 0 {\n        binary += String(y % 2)\n        y /= 2\n    }\n    return String(binary.reversed())\
    \ + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(decimal_to_binary(decimal:\
    \ 0) == \"db0db\")\nassert(decimal_to_binary(decimal: 32) == \"db100000db\")\n\
    assert(decimal_to_binary(decimal: 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal:\
    \ 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmprvs1wedd/tmprvs1wedd.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adbe7f9ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adbe7c91b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adbe7c91988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adbe7c907b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprvs1wedd                        0x00005596729de6c2 <unavailable> + 5826

    5    libc.so.6                          0x00002adbe8186460 __libc_start_main +
    245

    6    tmprvs1wedd                        0x00005596729de329 <unavailable> + 4905

    '
  stdout: ''
  timestamp: 1660013807
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var s = \"db\"\n    var d = decimal\n    while d > 0 {\n\
    \        s.append(String(d % 2))\n        d /= 2\n    }\n    s.append(\"db\")\n\
    \    return String(s.reversed())\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(decimal_to_binary(decimal:\
    \ 0) == \"db0db\")\nassert(decimal_to_binary(decimal: 32) == \"db100000db\")\n\
    assert(decimal_to_binary(decimal: 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal:\
    \ 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmputbyu7ew/tmputbyu7ew.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b43414eec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b43411e5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b43411e5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b43411e47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmputbyu7ew                        0x000055977bc92672 <unavailable> + 5746

    5    libc.so.6                          0x00002b43416da460 __libc_start_main +
    245

    6    tmputbyu7ew                        0x000055977bc922d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660013807
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    if decimal < 0 {\n        return \"db-\" + decimal_to_binary(decimal:\
    \ -decimal)\n    }\n    var result = \"db\"\n    var d = decimal\n    while d\
    \ > 0 {\n        result = ((d % 2 == 0) ? \"0\" : \"1\") + result\n        d /=\
    \ 2\n    }\n    return result + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmp788kti2t/tmp788kti2t.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b651f7edc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b651f4e4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b651f4e4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b651f4e37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp788kti2t                        0x000055a8824c63c2 <unavailable> + 5058

    5    libc.so.6                          0x00002b651f9d9460 __libc_start_main +
    245

    6    tmp788kti2t                        0x000055a8824c6029 <unavailable> + 4137

    '
  stdout: ''
  timestamp: 1660013807
- exit_code: 0
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    // Convert the given number to binary format\n    // and\
    \ return it as a string\n    return \"db\" + String(decimal, radix: 2) + \"db\"\
    \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\n\
    assert(decimal_to_binary(decimal: 32) == \"db100000db\")\nassert(decimal_to_binary(decimal:\
    \ 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal: 15) == \"db1111db\"\
    )"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013807
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var result = \"\"\n    var divident = decimal\n    while\
    \ divident > 0 {\n        result = String(divident % 2) + result\n        divident\
    \ /= 2\n    }\n    return \"db\" + result + \"db\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmp8j56ttf9/tmp8j56ttf9.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acebff75c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acebfc6cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acebfc6c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acebfc6b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8j56ttf9                        0x000055c8cb2b0492 <unavailable> + 5266

    5    libc.so.6                          0x00002acec0161460 __libc_start_main +
    245

    6    tmp8j56ttf9                        0x000055c8cb2b00f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013807
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var result = \"db\"\n    var x = decimal\n    while x\
    \ > 0 {\n        result = (x % 2 == 0 ? \"0\" : \"1\") + result\n        x /=\
    \ 2\n    }\n    return result + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmputun4gfq/tmputun4gfq.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4cc369ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4cc3395b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4cc3395988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4cc33947b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmputun4gfq                        0x000055673df8a3c2 <unavailable> + 5058

    5    libc.so.6                          0x00002b4cc388a460 __libc_start_main +
    245

    6    tmputun4gfq                        0x000055673df8a029 <unavailable> + 4137

    '
  stdout: ''
  timestamp: 1660013807
- exit_code: 0
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    return \"db\\(String(decimal, radix: 2))db\"\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\n\
    assert(decimal_to_binary(decimal: 32) == \"db100000db\")\nassert(decimal_to_binary(decimal:\
    \ 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal: 15) == \"db1111db\"\
    )"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013642
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary: String = \"db\"\n    var decimal = decimal\n\
    \    while decimal > 0 {\n        binary.append(String(decimal % 2))\n       \
    \ decimal /= 2\n    }\n    return binary.reversed() + \"db\"\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmp4e0gbim0/tmp4e0gbim0.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b690dc6dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b690d964b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b690d964988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b690d9637b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4e0gbim0                        0x000055776259c6b2 <unavailable> + 5810

    5    libc.so.6                          0x00002b690de59460 __libc_start_main +
    245

    6    tmp4e0gbim0                        0x000055776259c319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660013807
- exit_code: 0
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n  let result = \"db\" + String(decimal, radix: 2) + \"db\"\
    \n  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(decimal_to_binary(decimal:\
    \ 0) == \"db0db\")\nassert(decimal_to_binary(decimal: 32) == \"db100000db\")\n\
    assert(decimal_to_binary(decimal: 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal:\
    \ 15) == \"db1111db\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013807
- exit_code: 0
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    return \"db\" + String(decimal, radix: 2) + \"db\"\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\n\
    assert(decimal_to_binary(decimal: 32) == \"db100000db\")\nassert(decimal_to_binary(decimal:\
    \ 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal: 15) == \"db1111db\"\
    )"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"db\"\n    var rest = decimal\n    while\
    \ (rest != 0) {\n        let mod = rest % 2\n        binary = String(mod) + binary\n\
    \        rest = (rest - mod) / 2\n    }\n    binary += \"db\"\n    return binary\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\n\
    assert(decimal_to_binary(decimal: 32) == \"db100000db\")\nassert(decimal_to_binary(decimal:\
    \ 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal: 15) == \"db1111db\"\
    )"
  status: Exception
  stderr: 'tmpxyflq5po/tmpxyflq5po.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aab34877c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aab3456eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aab3456e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aab3456d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxyflq5po                        0x0000564d6d25f4e2 <unavailable> + 5346

    5    libc.so.6                          0x00002aab34a63460 __libc_start_main +
    245

    6    tmpxyflq5po                        0x0000564d6d25f149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1660013807
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binaryString = \"db\"\n    var decimal = decimal\n\
    \    while decimal > 0 {\n        binaryString.append(\"\\(decimal % 2)\")\n \
    \       decimal /= 2\n    }\n    binaryString.append(\"db\")\n    return String(binaryString.reversed())\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\n\
    assert(decimal_to_binary(decimal: 32) == \"db100000db\")\nassert(decimal_to_binary(decimal:\
    \ 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal: 15) == \"db1111db\"\
    )"
  status: Exception
  stderr: 'tmp1ck9330w/tmp1ck9330w.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b688d907c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b688d5feb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b688d5fe988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b688d5fd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1ck9330w                        0x0000555dafd89802 <unavailable> + 6146

    5    libc.so.6                          0x00002b688daf3460 __libc_start_main +
    245

    6    tmp1ck9330w                        0x0000555dafd89469 <unavailable> + 5225

    '
  stdout: ''
  timestamp: 1660013807
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var result = \"\"\n    var dec = decimal\n    while dec\
    \ > 0 {\n        result = \"\\(dec % 2)\" + result\n        dec /= 2\n    }\n\
    \    return \"db\" + result + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpawjw0ou1/tmpawjw0ou1.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af9c725cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af9c6f53b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af9c6f53988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af9c6f527b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpawjw0ou1                        0x00005570f2a69622 <unavailable> + 5666

    5    libc.so.6                          0x00002af9c7448460 __libc_start_main +
    245

    6    tmpawjw0ou1                        0x00005570f2a69289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660013807
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var result = \"db\"\n    var num = decimal\n    while\
    \ num > 0 {\n        if num % 2 == 0 {\n            result = \"0\" + result\n\
    \        } else {\n            result = \"1\" + result\n        }\n        num\
    \ /= 2\n    }\n    return result + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmp2de1g8sw/tmp2de1g8sw.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acb0f736c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acb0f42db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acb0f42d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acb0f42c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2de1g8sw                        0x0000555afe9fb3c2 <unavailable> + 5058

    5    libc.so.6                          0x00002acb0f922460 __libc_start_main +
    245

    6    tmp2de1g8sw                        0x0000555afe9fb029 <unavailable> + 4137

    '
  stdout: ''
  timestamp: 1660013807
- exit_code: 0
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n  let binary = String(decimal, radix: 2)\n  return \"db\\\
    (binary)db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(decimal_to_binary(decimal:\
    \ 0) == \"db0db\")\nassert(decimal_to_binary(decimal: 32) == \"db100000db\")\n\
    assert(decimal_to_binary(decimal: 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal:\
    \ 15) == \"db1111db\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013807
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"\"\n    var quotient = decimal\n    var\
    \ remainder = 0\n    while quotient != 0 {\n        remainder = quotient % 2\n\
    \        quotient = quotient / 2\n        binary = String(remainder) + binary\n\
    \    }\n    return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmp2te9qx0a/tmp2te9qx0a.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002affe59d2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002affe56c9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002affe56c9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002affe56c87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2te9qx0a                        0x000055a560d3c492 <unavailable> + 5266

    5    libc.so.6                          0x00002affe5bbe460 __libc_start_main +
    245

    6    tmp2te9qx0a                        0x000055a560d3c0f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013807
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var decimal = decimal\n    var binary = \"\"\n    while\
    \ decimal != 0 {\n        binary = String(decimal % 2) + binary\n        decimal\
    \ /= 2\n    }\n    return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmp_12oxdi6/tmp_12oxdi6.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b167a2edc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1679fe4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1679fe4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1679fe37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_12oxdi6                        0x0000563a0e1f4492 <unavailable> + 5266

    5    libc.so.6                          0x00002b167a4d9460 __libc_start_main +
    245

    6    tmp_12oxdi6                        0x0000563a0e1f40f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013807
- exit_code: 0
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    return \"db\" + String(decimal, radix: 2) + \"db\"\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\n\
    assert(decimal_to_binary(decimal: 32) == \"db100000db\")\nassert(decimal_to_binary(decimal:\
    \ 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal: 15) == \"db1111db\"\
    )"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013643
- exit_code: 0
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    let str = String(decimal, radix: 2)\n    return \"db\\\
    (str)db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(decimal_to_binary(decimal:\
    \ 0) == \"db0db\")\nassert(decimal_to_binary(decimal: 32) == \"db100000db\")\n\
    assert(decimal_to_binary(decimal: 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal:\
    \ 15) == \"db1111db\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013807
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"\"\n    var number = decimal\n    while\
    \ number > 0 {\n        binary = String(number % 2) + binary\n        number /=\
    \ 2\n    }\n    while binary.count < 8 {\n        binary = \"0\" + binary\n  \
    \  }\n    return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmp7sh3yv1n/tmp7sh3yv1n.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afc51bd4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afc518cbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afc518cb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afc518ca7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7sh3yv1n                        0x000055819da0b4e2 <unavailable> + 5346

    5    libc.so.6                          0x00002afc51dc0460 __libc_start_main +
    245

    6    tmp7sh3yv1n                        0x000055819da0b149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1660013807
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    // your code here\n    var bin = \"\"\n    var dec = decimal\n\
    \    while (dec > 0) {\n        if (dec % 2 == 0) {\n            bin = \"0\" +\
    \ bin\n        } else {\n            bin = \"1\" + bin\n        }\n        dec\
    \ = dec / 2\n    }\n    return \"db\" + bin + \"db\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmp04pz_t_y/tmp04pz_t_y.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b39e7cbac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b39e79b1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b39e79b1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b39e79b07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp04pz_t_y                        0x0000562489eb13c2 <unavailable> + 5058

    5    libc.so.6                          0x00002b39e7ea6460 __libc_start_main +
    245

    6    tmp04pz_t_y                        0x0000562489eb1029 <unavailable> + 4137

    '
  stdout: ''
  timestamp: 1660013807
- exit_code: 0
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n  return \"db\" + String(decimal, radix: 2) + \"db\"\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\n\
    assert(decimal_to_binary(decimal: 32) == \"db100000db\")\nassert(decimal_to_binary(decimal:\
    \ 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal: 15) == \"db1111db\"\
    )"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013807
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var decimal = decimal\n    var binary = \"db\"\n    while\
    \ decimal > 0 {\n        binary += (decimal % 2 == 0) ? \"0\" : \"1\"\n      \
    \  decimal /= 2\n    }\n    return binary + \"db\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpj5wiflie/tmpj5wiflie.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1fe4ce5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1fe49dcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1fe49dc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1fe49db7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj5wiflie                        0x000055a879ea3422 <unavailable> + 5154

    5    libc.so.6                          0x00002b1fe4ed1460 __libc_start_main +
    245

    6    tmpj5wiflie                        0x000055a879ea3089 <unavailable> + 4233

    '
  stdout: ''
  timestamp: 1660013808
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"\"\n    var n = decimal\n    while n >\
    \ 0 {\n        if n % 2 == 0 {\n            binary = \"0\" + binary\n        }\
    \ else {\n            binary = \"1\" + binary\n        }\n        n /= 2\n   \
    \ }\n    return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmp3u23qk6o/tmp3u23qk6o.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab76053ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab760235b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab760235988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab7602347b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3u23qk6o                        0x0000561ee5be13c2 <unavailable> + 5058

    5    libc.so.6                          0x00002ab76072a460 __libc_start_main +
    245

    6    tmp3u23qk6o                        0x0000561ee5be1029 <unavailable> + 4137

    '
  stdout: ''
  timestamp: 1660013808
- exit_code: 1
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var bin = \"\"\n    if decimal == 0 {\n        return\
    \ \"db0db\"\n    }\n    while decimal > 0 {\n        if decimal % 2 == 0 {\n \
    \           bin = \"0\" + bin\n        } else {\n            bin = \"1\" + bin\n\
    \        }\n        decimal /= 2\n    }\n    return \"db\" + bin + \"db\"\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\n\
    assert(decimal_to_binary(decimal: 32) == \"db100000db\")\nassert(decimal_to_binary(decimal:\
    \ 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal: 15) == \"db1111db\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpzeb25pzy.swift:23:17: error: left side of mutating operator isn't\
    \ mutable: 'decimal' is a 'let' constant\n        decimal /= 2\n        ~~~~~~~\
    \ ^\n"
  stdout: ''
  timestamp: 1660013807
- exit_code: 0
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    // TODO: Write implementation of this function\n    return\
    \ \"db\\(String(decimal, radix: 2))db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013808
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var dec = decimal\n    var result = \"db\"\n    while\
    \ dec != 0 {\n        result += String(dec % 2)\n        dec /= 2\n    }\n   \
    \ return String(result.reversed()) + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmp7_8zscsi/tmp7_8zscsi.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3012112c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3011e09b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3011e09988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3011e087b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7_8zscsi                        0x00005608164726c2 <unavailable> + 5826

    5    libc.so.6                          0x00002b30122fe460 __libc_start_main +
    245

    6    tmp7_8zscsi                        0x0000560816472329 <unavailable> + 4905

    '
  stdout: ''
  timestamp: 1660013808
- exit_code: 0
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    return \"db\" + String(decimal, radix: 2) + \"db\"\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\n\
    assert(decimal_to_binary(decimal: 32) == \"db100000db\")\nassert(decimal_to_binary(decimal:\
    \ 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal: 15) == \"db1111db\"\
    )"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var result = \"db\"\n    var decimal = decimal\n    while\
    \ decimal > 0 {\n        result = String(decimal % 2) + result\n        decimal\
    \ /= 2\n    }\n    return result + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmp_8c8trrr/tmp_8c8trrr.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab60b411c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab60b108b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab60b108988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab60b1077b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_8c8trrr                        0x0000556b5f983492 <unavailable> + 5266

    5    libc.so.6                          0x00002ab60b5fd460 __libc_start_main +
    245

    6    tmp_8c8trrr                        0x0000556b5f9830f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var result = \"db\"\n    var number = decimal\n    while\
    \ number > 0 {\n        result.append(\"\\(number % 2)\")\n        number /= 2\n\
    \    }\n    result.append(\"db\")\n    return String(result.reversed())\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\n\
    assert(decimal_to_binary(decimal: 32) == \"db100000db\")\nassert(decimal_to_binary(decimal:\
    \ 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal: 15) == \"db1111db\"\
    )"
  status: Exception
  stderr: 'tmp4kbo35n2/tmp4kbo35n2.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2bacb0ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2bac805b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2bac805988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2bac8047b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4kbo35n2                        0x000055b3c7a87802 <unavailable> + 6146

    5    libc.so.6                          0x00002b2baccfa460 __libc_start_main +
    245

    6    tmp4kbo35n2                        0x000055b3c7a87469 <unavailable> + 5225

    '
  stdout: ''
  timestamp: 1660013808
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"db\"\n    if decimal == 0 {\n        binary\
    \ += \"0\"\n    } else {\n        var value = decimal\n        while value > 0\
    \ {\n            binary += String(value % 2)\n            value /= 2\n       \
    \ }\n    }\n    return String(binary.reversed()) + \"db\"\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpsqgo1ghl/tmpsqgo1ghl.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b390bda0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b390ba97b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b390ba97988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b390ba967b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsqgo1ghl                        0x0000563207cea6c2 <unavailable> + 5826

    5    libc.so.6                          0x00002b390bf8c460 __libc_start_main +
    245

    6    tmpsqgo1ghl                        0x0000563207cea329 <unavailable> + 4905

    '
  stdout: ''
  timestamp: 1660013808
- exit_code: 1
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"\"\n    var str = String(decimal, radix:\
    \ 2)\n    if (str.characters.count < 8) {\n        for _ in 1...(8 - str.characters.count)\
    \ {\n            str = \"0\" + str\n        }\n    }\n    binary = \"db\" + str\
    \ + \"db\"\n    return binary\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(decimal_to_binary(decimal:\
    \ 0) == \"db0db\")\nassert(decimal_to_binary(decimal: 32) == \"db100000db\")\n\
    assert(decimal_to_binary(decimal: 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal:\
    \ 15) == \"db1111db\")"
  status: SyntaxError
  stderr: "/tmp/tmpdmg08wvi.swift:15:13: error: 'characters' is unavailable: Please\
    \ use String directly\n    if (str.characters.count < 8) {\n            ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpdmg08wvi.swift:16:31:\
    \ error: 'characters' is unavailable: Please use String directly\n        for\
    \ _ in 1...(8 - str.characters.count) {\n                              ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660013807
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var dec = decimal\n    var result = \"\"\n    while dec\
    \ != 0 {\n        result.insert(contentsOf: \"\\(dec % 2)\", at: result.startIndex)\n\
    \        dec /= 2\n    }\n    return \"db\\(result)db\"\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmp4gp9h935/tmp4gp9h935.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b840ed1fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b840ea16b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b840ea16988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b840ea157b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4gp9h935                        0x000055ff23ffc862 <unavailable> + 6242

    5    libc.so.6                          0x00002b840ef0b460 __libc_start_main +
    245

    6    tmp4gp9h935                        0x000055ff23ffc4c9 <unavailable> + 5321

    '
  stdout: ''
  timestamp: 1660013808
- exit_code: 0
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    if decimal == 0 {\n        return \"db0db\"\n    }\n \
    \   var binary = \"\"\n    var decimalCopy = decimal\n    while decimalCopy >\
    \ 0 {\n        binary = (decimalCopy % 2 == 0 ? \"0\" : \"1\") + binary\n    \
    \    decimalCopy /= 2\n    }\n    return \"db\" + binary + \"db\"\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\n\
    assert(decimal_to_binary(decimal: 32) == \"db100000db\")\nassert(decimal_to_binary(decimal:\
    \ 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal: 15) == \"db1111db\"\
    )"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013808
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    return \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpys9jwszd/tmpys9jwszd.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adc62585c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adc6227cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adc6227c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adc6227b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpys9jwszd                        0x0000555ea11cd2e2 <unavailable> + 4834

    5    libc.so.6                          0x00002adc62771460 __libc_start_main +
    245

    6    tmpys9jwszd                        0x0000555ea11ccf49 <unavailable> + 3913

    '
  stdout: ''
  timestamp: 1660013808
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var string = \"db\"\n    var rest = decimal\n    while\
    \ rest != 0 {\n        string.append(\"\\(rest % 2)\")\n        rest /= 2\n  \
    \  }\n    string.append(\"db\")\n    return String(string.reversed())\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\n\
    assert(decimal_to_binary(decimal: 32) == \"db100000db\")\nassert(decimal_to_binary(decimal:\
    \ 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal: 15) == \"db1111db\"\
    )"
  status: Exception
  stderr: 'tmpwxgtv6zm/tmpwxgtv6zm.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad96f325c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad96f01cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad96f01c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad96f01b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwxgtv6zm                        0x000055915ab34802 <unavailable> + 6146

    5    libc.so.6                          0x00002ad96f511460 __libc_start_main +
    245

    6    tmpwxgtv6zm                        0x000055915ab34469 <unavailable> + 5225

    '
  stdout: ''
  timestamp: 1660013808
- exit_code: 0
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    let binary = String(decimal, radix: 2)\n    return \"\
    db\\(binary)db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(decimal_to_binary(decimal:\
    \ 0) == \"db0db\")\nassert(decimal_to_binary(decimal: 32) == \"db100000db\")\n\
    assert(decimal_to_binary(decimal: 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal:\
    \ 15) == \"db1111db\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013726
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var result = \"db\"\n    var dec = decimal\n    while\
    \ dec > 0 {\n        if dec % 2 == 0 {\n            result = \"0\" + result\n\
    \        } else {\n            result = \"1\" + result\n        }\n        dec\
    \ /= 2\n    }\n    return result + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmptpiwpgdh/tmptpiwpgdh.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaef6de6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaef6addb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaef6add988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaef6adc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptpiwpgdh                        0x0000556d484f43c2 <unavailable> + 5058

    5    libc.so.6                          0x00002aaef6fd2460 __libc_start_main +
    245

    6    tmptpiwpgdh                        0x0000556d484f4029 <unavailable> + 4137

    '
  stdout: ''
  timestamp: 1660013808
- exit_code: 0
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    \n    return \"db\" + String(decimal, radix: 2) + \"db\"\
    \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\n\
    assert(decimal_to_binary(decimal: 32) == \"db100000db\")\nassert(decimal_to_binary(decimal:\
    \ 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal: 15) == \"db1111db\"\
    )"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013808
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    // TODO: Implement the function here.\n    return \"db0db\"\
    \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\n\
    assert(decimal_to_binary(decimal: 32) == \"db100000db\")\nassert(decimal_to_binary(decimal:\
    \ 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal: 15) == \"db1111db\"\
    )"
  status: Exception
  stderr: 'tmpp20tfiqv/tmpp20tfiqv.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9885332c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9885029b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9885029988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b98850287b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp20tfiqv                        0x000056332c68c3a8 <unavailable> + 5032

    5    libc.so.6                          0x00002b988551e460 __libc_start_main +
    245

    6    tmpp20tfiqv                        0x000056332c68bf49 <unavailable> + 3913

    '
  stdout: ''
  timestamp: 1660013808
- exit_code: 0
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    return \"db\\(String(decimal, radix: 2))db\"\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\n\
    assert(decimal_to_binary(decimal: 32) == \"db100000db\")\nassert(decimal_to_binary(decimal:\
    \ 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal: 15) == \"db1111db\"\
    )"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013642
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    // TODO: Implement me!\n    return \"\"\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpvmjb2umh/tmpvmjb2umh.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b47714f3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b47711eab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b47711ea988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b47711e97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvmjb2umh                        0x000055a866c802e2 <unavailable> + 4834

    5    libc.so.6                          0x00002b47716df460 __libc_start_main +
    245

    6    tmpvmjb2umh                        0x000055a866c7ff49 <unavailable> + 3913

    '
  stdout: ''
  timestamp: 1660013808
- exit_code: 1
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    // Your code here\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: SyntaxError
  stderr: '/tmp/tmpdjwyjmz9.swift:14:1: error: missing return in global function expected
    to return ''String''

    }

    ^

    '
  stdout: ''
  timestamp: 1660013807
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var answer = \"db\"\n    var num = decimal\n    while\
    \ num > 0 {\n        let rem = num % 2\n        answer.append(String(rem))\n \
    \       num = num / 2\n    }\n    answer += \"db\"\n    answer = String(answer.reversed())\n\
    \    return answer\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(decimal_to_binary(decimal:\
    \ 0) == \"db0db\")\nassert(decimal_to_binary(decimal: 32) == \"db100000db\")\n\
    assert(decimal_to_binary(decimal: 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal:\
    \ 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmp6li4echg/tmp6li4echg.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b78f1879c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b78f1570b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b78f1570988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b78f156f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6li4echg                        0x000055e2a138c6c2 <unavailable> + 5826

    5    libc.so.6                          0x00002b78f1a65460 __libc_start_main +
    245

    6    tmp6li4echg                        0x000055e2a138c329 <unavailable> + 4905

    '
  stdout: ''
  timestamp: 1660013808
- exit_code: 0
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    return \"db\" + String(decimal, radix: 2) + \"db\"\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\n\
    assert(decimal_to_binary(decimal: 32) == \"db100000db\")\nassert(decimal_to_binary(decimal:\
    \ 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal: 15) == \"db1111db\"\
    )"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var converted_string = \"db\"\n    var num = decimal\n\
    \    while num > 0 {\n        converted_string += String(num % 2)\n        num\
    \ /= 2\n    }\n    converted_string += \"db\"\n    return String(converted_string.reversed())\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\n\
    assert(decimal_to_binary(decimal: 32) == \"db100000db\")\nassert(decimal_to_binary(decimal:\
    \ 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal: 15) == \"db1111db\"\
    )"
  status: Exception
  stderr: 'tmpl5fwbiw9/tmpl5fwbiw9.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9058eb7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9058baeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9058bae988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9058bad7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpl5fwbiw9                        0x0000556095a2f672 <unavailable> + 5746

    5    libc.so.6                          0x00002b90590a3460 __libc_start_main +
    245

    6    tmpl5fwbiw9                        0x0000556095a2f2d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660013808
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    return \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpys9jwszd/tmpys9jwszd.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adc62585c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adc6227cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adc6227c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adc6227b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpys9jwszd                        0x0000555ea11cd2e2 <unavailable> + 4834

    5    libc.so.6                          0x00002adc62771460 __libc_start_main +
    245

    6    tmpys9jwszd                        0x0000555ea11ccf49 <unavailable> + 3913

    '
  stdout: ''
  timestamp: 1660013808
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var result = \"db\"\n    var quotient = decimal\n    var\
    \ remainder = 0\n    while quotient > 0 {\n        remainder = quotient % 2\n\
    \        quotient = quotient / 2\n        result.append(contentsOf: \"\\(remainder)\"\
    )\n    }\n    result.append(contentsOf: \"db\")\n    return String(result.reversed())\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\n\
    assert(decimal_to_binary(decimal: 32) == \"db100000db\")\nassert(decimal_to_binary(decimal:\
    \ 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal: 15) == \"db1111db\"\
    )"
  status: Exception
  stderr: 'tmpxhvnt0ab/tmpxhvnt0ab.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7d84dacc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7d84aa3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7d84aa3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7d84aa27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxhvnt0ab                        0x000055be6194e812 <unavailable> + 6162

    5    libc.so.6                          0x00002b7d84f98460 __libc_start_main +
    245

    6    tmpxhvnt0ab                        0x000055be6194e479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660013808
- exit_code: 0
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    let binary = String(decimal, radix: 2)\n    return \"\
    db\\(binary)db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(decimal_to_binary(decimal:\
    \ 0) == \"db0db\")\nassert(decimal_to_binary(decimal: 32) == \"db100000db\")\n\
    assert(decimal_to_binary(decimal: 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal:\
    \ 15) == \"db1111db\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013726
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var result = \"db\"\n    var cnt = 1\n    for n in 1...8\
    \ {\n        if cnt == decimal {\n            result += String(repeating: \"1\"\
    , count: n)\n            result += \"db\"\n            return result\n       \
    \ }\n        cnt *= 2\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpi40h_fjd/tmpi40h_fjd.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba6fd146c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba6fce3db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba6fce3d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba6fce3c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi40h_fjd                        0x00005556316b6492 <unavailable> + 5266

    5    libc.so.6                          0x00002ba6fd332460 __libc_start_main +
    245

    6    tmpi40h_fjd                        0x00005556316b60f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013808
- exit_code: 0
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    \n    return \"db\" + String(decimal, radix: 2) + \"db\"\
    \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\n\
    assert(decimal_to_binary(decimal: 32) == \"db100000db\")\nassert(decimal_to_binary(decimal:\
    \ 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal: 15) == \"db1111db\"\
    )"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013808
- exit_code: 0
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    let dec_to_binary = String(decimal, radix: 2)\n    return\
    \ \"db\\(dec_to_binary)db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(decimal_to_binary(decimal:\
    \ 0) == \"db0db\")\nassert(decimal_to_binary(decimal: 32) == \"db100000db\")\n\
    assert(decimal_to_binary(decimal: 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal:\
    \ 15) == \"db1111db\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013808
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = String()\n    var num = decimal\n    for\
    \ _ in 0..<8 {\n        if num >= 128 {\n            binary += \"1\"\n       \
    \     num -= 128\n        } else {\n            binary += \"0\"\n        }\n \
    \       num *= 2\n    }\n    return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpdjbw0nsk/tmpdjbw0nsk.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac6a26bbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac6a23b2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac6a23b2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac6a23b17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdjbw0nsk                        0x000055899c75d4d2 <unavailable> + 5330

    5    libc.so.6                          0x00002ac6a28a7460 __libc_start_main +
    245

    6    tmpdjbw0nsk                        0x000055899c75d139 <unavailable> + 4409

    '
  stdout: ''
  timestamp: 1660013808
- exit_code: 1
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"db\"\n    while decimal > 0 {\n       \
    \ binary += String(decimal % 2)\n        decimal /= 2\n    }\n    binary += \"\
    db\"\n    return String(binary.reversed())\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: SyntaxError
  stderr: "/tmp/tmpiptspglw.swift:16:17: error: left side of mutating operator isn't\
    \ mutable: 'decimal' is a 'let' constant\n        decimal /= 2\n        ~~~~~~~\
    \ ^\n"
  stdout: ''
  timestamp: 1660013808
- exit_code: 0
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n  return \"db\" + String(decimal, radix: 2) + \"db\"\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\n\
    assert(decimal_to_binary(decimal: 32) == \"db100000db\")\nassert(decimal_to_binary(decimal:\
    \ 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal: 15) == \"db1111db\"\
    )"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013807
- exit_code: 0
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var result = \"\"\n    var quotient = decimal\n    let\
    \ digit_base = 2\n    var remainder = quotient % digit_base\n    quotient = quotient\
    \ / digit_base\n    result = String(remainder) + result\n    while quotient >\
    \ 0 {\n        remainder = quotient % digit_base\n        quotient = quotient\
    \ / digit_base\n        result = String(remainder) + result\n    }\n    return\
    \ \"db\" + result + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(decimal_to_binary(decimal:\
    \ 0) == \"db0db\")\nassert(decimal_to_binary(decimal: 32) == \"db100000db\")\n\
    assert(decimal_to_binary(decimal: 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal:\
    \ 15) == \"db1111db\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013808
- exit_code: 0
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    return \"db\" + String(decimal, radix: 2) + \"db\"\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\n\
    assert(decimal_to_binary(decimal: 32) == \"db100000db\")\nassert(decimal_to_binary(decimal:\
    \ 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal: 15) == \"db1111db\"\
    )"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013643
- exit_code: 0
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    // TODO: Turn decimal number into a binary string\n  \
    \  return \"db\" + String(decimal, radix: 2) + \"db\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013808
- exit_code: 0
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    let binary = \"db\" + String(decimal, radix: 2) + \"db\"\
    \n    return binary\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(decimal_to_binary(decimal:\
    \ 0) == \"db0db\")\nassert(decimal_to_binary(decimal: 32) == \"db100000db\")\n\
    assert(decimal_to_binary(decimal: 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal:\
    \ 15) == \"db1111db\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013808
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var str = \"\"\n    var decimal = decimal\n    while decimal\
    \ > 0 {\n        str = (decimal % 2 == 0 ? \"0\" : \"1\") + str\n        decimal\
    \ /= 2\n    }\n    str = \"db\" + str + \"db\"\n    return str\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpwlpm_uz6/tmpwlpm_uz6.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b25f09e0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b25f06d7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b25f06d7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b25f06d67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwlpm_uz6                        0x000055769f4303c2 <unavailable> + 5058

    5    libc.so.6                          0x00002b25f0bcc460 __libc_start_main +
    245

    6    tmpwlpm_uz6                        0x000055769f430029 <unavailable> + 4137

    '
  stdout: ''
  timestamp: 1660013808
- exit_code: 0
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    // Write your code here\n    let binary = \"db\" + String(decimal,\
    \ radix: 2) + \"db\"\n    return binary\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013808
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var result = \"db\"\n    var num = decimal\n    while\
    \ num > 0 {\n        result = result + String(num % 2)\n        num = num / 2\n\
    \    }\n    result = String(result.reversed()) + \"db\"\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\n\
    assert(decimal_to_binary(decimal: 32) == \"db100000db\")\nassert(decimal_to_binary(decimal:\
    \ 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal: 15) == \"db1111db\"\
    )"
  status: Exception
  stderr: 'tmp3tru2k8o/tmp3tru2k8o.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af96cb28c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af96c81fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af96c81f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af96c81e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3tru2k8o                        0x0000564e7d19c672 <unavailable> + 5746

    5    libc.so.6                          0x00002af96cd14460 __libc_start_main +
    245

    6    tmp3tru2k8o                        0x0000564e7d19c2d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660013808
- exit_code: 0
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    let bin = String(decimal, radix: 2)\n    return \"db\\\
    (bin)db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(decimal_to_binary(decimal:\
    \ 0) == \"db0db\")\nassert(decimal_to_binary(decimal: 32) == \"db100000db\")\n\
    assert(decimal_to_binary(decimal: 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal:\
    \ 15) == \"db1111db\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013808
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var text = \"db\"\n    var number = decimal\n    while\
    \ number > 0 {\n        if number % 2 == 0 {\n            text = \"0\" + text\n\
    \        } else {\n            text = \"1\" + text\n        }\n        number\
    \ /= 2\n    }\n    return text + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmppi_e_f0q/tmppi_e_f0q.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b888bc3bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b888b932b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b888b932988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b888b9317b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppi_e_f0q                        0x00005579365f53c2 <unavailable> + 5058

    5    libc.so.6                          0x00002b888be27460 __libc_start_main +
    245

    6    tmppi_e_f0q                        0x00005579365f5029 <unavailable> + 4137

    '
  stdout: ''
  timestamp: 1660013808
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n  var binary = \"\"\n  var value = decimal\n  for _ in 1...8\
    \ {\n    binary = \"\\(value % 2)\" + binary\n    value /= 2\n  }\n  return \"\
    db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(decimal_to_binary(decimal:\
    \ 0) == \"db0db\")\nassert(decimal_to_binary(decimal: 32) == \"db100000db\")\n\
    assert(decimal_to_binary(decimal: 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal:\
    \ 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpn1z4q76c/tmpn1z4q76c.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b59d3e6fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b59d3b66b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b59d3b66988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b59d3b657b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn1z4q76c                        0x000055bcb1b9e722 <unavailable> + 5922

    5    libc.so.6                          0x00002b59d405b460 __libc_start_main +
    245

    6    tmpn1z4q76c                        0x000055bcb1b9e389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1660013808
- exit_code: 0
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var result = \"\"\n    var d = decimal\n    while d >\
    \ 0 {\n        result = \"\\(d%2)\" + result\n        d /= 2\n    }\n    if result\
    \ == \"\" {\n        result = \"0\"\n    }\n    return \"db\" + result + \"db\"\
    \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\n\
    assert(decimal_to_binary(decimal: 32) == \"db100000db\")\nassert(decimal_to_binary(decimal:\
    \ 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal: 15) == \"db1111db\"\
    )"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013808
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var result = \"db\"\n    var tmp = decimal\n    while\
    \ tmp > 0 {\n        result.append(tmp % 2 == 0 ? \"0\" : \"1\")\n        tmp\
    \ /= 2\n    }\n    result.append(\"db\")\n    return String(result.reversed())\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\n\
    assert(decimal_to_binary(decimal: 32) == \"db100000db\")\nassert(decimal_to_binary(decimal:\
    \ 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal: 15) == \"db1111db\"\
    )"
  status: Exception
  stderr: 'tmp_tq10ttb/tmp_tq10ttb.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9856d56c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9856a4db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9856a4d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9856a4c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_tq10ttb                        0x000055f38fd1d5b2 <unavailable> + 5554

    5    libc.so.6                          0x00002b9856f42460 __libc_start_main +
    245

    6    tmp_tq10ttb                        0x000055f38fd1d219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1660013808
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var str = \"db\"\n    var num = decimal\n    var result\
    \ = \"\"\n    while num > 0 {\n        result = String(num % 2) + result\n   \
    \     num /= 2\n    }\n    return str + result + \"db\"\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmppayenq6o/tmppayenq6o.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9c6754ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9c67245b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9c67245988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9c672447b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppayenq6o                        0x0000556253753492 <unavailable> + 5266

    5    libc.so.6                          0x00002b9c6773a460 __libc_start_main +
    245

    6    tmppayenq6o                        0x00005562537530f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013808
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var string = \"\"\n    var start = \"db\"\n    var end\
    \ = \"db\"\n    var num = decimal\n    while num > 0 {\n        let remainder\
    \ = num % 2\n        num = num / 2\n        let stringremainder = String(remainder)\n\
    \        string = stringremainder + string\n    }\n    return start + string +\
    \ end\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(decimal_to_binary(decimal:\
    \ 0) == \"db0db\")\nassert(decimal_to_binary(decimal: 32) == \"db100000db\")\n\
    assert(decimal_to_binary(decimal: 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal:\
    \ 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpt0tprtqd/tmpt0tprtqd.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4c09facc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4c09ca3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4c09ca3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4c09ca27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt0tprtqd                        0x000055a9ce867492 <unavailable> + 5266

    5    libc.so.6                          0x00002b4c0a198460 __libc_start_main +
    245

    6    tmpt0tprtqd                        0x000055a9ce8670f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013808
- exit_code: 0
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    return \"db\" + String(decimal, radix: 2) + \"db\"\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\n\
    assert(decimal_to_binary(decimal: 32) == \"db100000db\")\nassert(decimal_to_binary(decimal:\
    \ 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal: 15) == \"db1111db\"\
    )"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013643
- exit_code: 0
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    return \"db\" + String(decimal, radix: 2) + \"db\"\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\n\
    assert(decimal_to_binary(decimal: 32) == \"db100000db\")\nassert(decimal_to_binary(decimal:\
    \ 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal: 15) == \"db1111db\"\
    )"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013643
- exit_code: 0
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    return \"db\" + String(decimal, radix: 2) + \"db\"\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\n\
    assert(decimal_to_binary(decimal: 32) == \"db100000db\")\nassert(decimal_to_binary(decimal:\
    \ 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal: 15) == \"db1111db\"\
    )"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var result = \"db\"\n    var temp = decimal\n    while\
    \ temp != 0 {\n        if temp % 2 == 0 {\n            result = \"0\" + result\n\
    \        } else {\n            result = \"1\" + result\n        }\n        temp\
    \ /= 2\n    }\n    result += \"db\"\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpt2v1vbf6/tmpt2v1vbf6.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad807f85c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad807c7cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad807c7c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad807c7b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt2v1vbf6                        0x0000557e0e200422 <unavailable> + 5154

    5    libc.so.6                          0x00002ad808171460 __libc_start_main +
    245

    6    tmpt2v1vbf6                        0x0000557e0e200089 <unavailable> + 4233

    '
  stdout: ''
  timestamp: 1660013808
- exit_code: 0
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    if decimal == 0 {\n        return \"db0db\"\n    }\n \
    \   var result = \"\"\n    var curr = decimal\n    while curr > 0 {\n        result.append(String(curr\
    \ % 2))\n        curr /= 2\n    }\n    return \"db\" + String(result.reversed())\
    \ + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(decimal_to_binary(decimal:\
    \ 0) == \"db0db\")\nassert(decimal_to_binary(decimal: 32) == \"db100000db\")\n\
    assert(decimal_to_binary(decimal: 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal:\
    \ 15) == \"db1111db\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013808
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var number = decimal\n    var remain: Int\n    var str:\
    \ String = \"db\"\n    while number > 0 {\n        remain = number % 2\n     \
    \   number = number / 2\n        str.append(contentsOf: String(remain))\n    }\n\
    \    str.append(contentsOf: \"db\")\n    return String(str.reversed())\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\n\
    assert(decimal_to_binary(decimal: 32) == \"db100000db\")\nassert(decimal_to_binary(decimal:\
    \ 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal: 15) == \"db1111db\"\
    )"
  status: Exception
  stderr: 'tmpj2091udy/tmpj2091udy.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2e4fdb5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2e4faacb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2e4faac988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2e4faab7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj2091udy                        0x0000555603a8f672 <unavailable> + 5746

    5    libc.so.6                          0x00002b2e4ffa1460 __libc_start_main +
    245

    6    tmpj2091udy                        0x0000555603a8f2d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660013808
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var number = decimal\n    var binary = \"\"\n    while\
    \ number > 0 {\n        binary = String(number % 2) + binary\n        number /=\
    \ 2\n    }\n    return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmp2sf5rq00/tmp2sf5rq00.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b55bf4cec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b55bf1c5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b55bf1c5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b55bf1c47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2sf5rq00                        0x00005621faab0492 <unavailable> + 5266

    5    libc.so.6                          0x00002b55bf6ba460 __libc_start_main +
    245

    6    tmp2sf5rq00                        0x00005621faab00f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013808
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"db\"\n    var rest = decimal\n    while\
    \ rest > 0 {\n        binary += \"\\(rest % 2)\"\n        rest /= 2\n    }\n \
    \   return binary.reversed() + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpce0tjoev/tmpce0tjoev.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3a15749c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3a15440b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3a15440988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3a1543f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpce0tjoev                        0x000055deebc70852 <unavailable> + 6226

    5    libc.so.6                          0x00002b3a15935460 __libc_start_main +
    245

    6    tmpce0tjoev                        0x000055deebc704b9 <unavailable> + 5305

    '
  stdout: ''
  timestamp: 1660013808
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"\"\n    var n = decimal\n    while n >\
    \ 0 {\n        if n % 2 == 0 {\n            binary = \"0\" + binary\n        }\
    \ else {\n            binary = \"1\" + binary\n        }\n        n /= 2\n   \
    \ }\n    return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmp3u23qk6o/tmp3u23qk6o.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab76053ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab760235b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab760235988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab7602347b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3u23qk6o                        0x0000561ee5be13c2 <unavailable> + 5058

    5    libc.so.6                          0x00002ab76072a460 __libc_start_main +
    245

    6    tmp3u23qk6o                        0x0000561ee5be1029 <unavailable> + 4137

    '
  stdout: ''
  timestamp: 1660013808
- exit_code: 0
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    let decimal_string = String(decimal, radix: 2)\n    return\
    \ \"db\\(decimal_string)db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(decimal_to_binary(decimal:\
    \ 0) == \"db0db\")\nassert(decimal_to_binary(decimal: 32) == \"db100000db\")\n\
    assert(decimal_to_binary(decimal: 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal:\
    \ 15) == \"db1111db\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013808
- exit_code: 0
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    let binaryNumber = String(decimal, radix: 2)\n    return\
    \ \"db\\(binaryNumber)db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(decimal_to_binary(decimal:\
    \ 0) == \"db0db\")\nassert(decimal_to_binary(decimal: 32) == \"db100000db\")\n\
    assert(decimal_to_binary(decimal: 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal:\
    \ 15) == \"db1111db\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013808
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var string = \"db\"\n    var remainder = decimal\n   \
    \ var remainder_array = [Int]()\n    while remainder > 0 {\n        remainder_array.append(remainder\
    \ % 2)\n        remainder = remainder / 2\n    }\n    remainder_array.reverse()\n\
    \    for num in remainder_array {\n        string += String(num)\n    }\n    string\
    \ += \"db\"\n    return string\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(decimal_to_binary(decimal:\
    \ 0) == \"db0db\")\nassert(decimal_to_binary(decimal: 32) == \"db100000db\")\n\
    assert(decimal_to_binary(decimal: 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal:\
    \ 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpc0cb2tse/tmpc0cb2tse.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7e2e9bbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7e2e6b2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7e2e6b2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7e2e6b17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc0cb2tse                        0x00005627b15ae7d2 <unavailable> + 6098

    5    libc.so.6                          0x00002b7e2eba7460 __libc_start_main +
    245

    6    tmpc0cb2tse                        0x00005627b15ae439 <unavailable> + 5177

    '
  stdout: ''
  timestamp: 1660013808
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binaryString = \"db\"\n    var decimalCopy = decimal\n\
    \    while decimalCopy > 0 {\n        binaryString.append(String(decimalCopy %\
    \ 2))\n        decimalCopy /= 2\n    }\n    return binaryString.reversed() + \"\
    db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(decimal_to_binary(decimal: 0)\
    \ == \"db0db\")\nassert(decimal_to_binary(decimal: 32) == \"db100000db\")\nassert(decimal_to_binary(decimal:\
    \ 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal: 15) == \"db1111db\"\
    )"
  status: Exception
  stderr: 'tmpo2l9a4cs/tmpo2l9a4cs.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abf7c44cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abf7c143b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abf7c143988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abf7c1427b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo2l9a4cs                        0x000055fd445636b2 <unavailable> + 5810

    5    libc.so.6                          0x00002abf7c638460 __libc_start_main +
    245

    6    tmpo2l9a4cs                        0x000055fd44563319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660013808
- exit_code: 0
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    return \"db\\(String(decimal, radix: 2))db\"\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\n\
    assert(decimal_to_binary(decimal: 32) == \"db100000db\")\nassert(decimal_to_binary(decimal:\
    \ 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal: 15) == \"db1111db\"\
    )"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013642
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var result = \"\"\n    var quotient = decimal\n    var\
    \ remainder = 0\n    while quotient > 0 {\n        remainder = quotient % 2\n\
    \        quotient = quotient / 2\n        result = String(remainder) + result\n\
    \    }\n    return \"db\" + result + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpyb4acwgw/tmpyb4acwgw.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8327793c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b832748ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b832748a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b83274897b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyb4acwgw                        0x00005616202f4492 <unavailable> + 5266

    5    libc.so.6                          0x00002b832797f460 __libc_start_main +
    245

    6    tmpyb4acwgw                        0x00005616202f40f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013808
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var result = \"db\"\n    var decimal = decimal\n    while\
    \ decimal > 0 {\n        result.append(String(decimal % 2))\n        decimal /=\
    \ 2\n    }\n    result.append(\"db\")\n    return String(result.reversed())\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\n\
    assert(decimal_to_binary(decimal: 32) == \"db100000db\")\nassert(decimal_to_binary(decimal:\
    \ 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal: 15) == \"db1111db\"\
    )"
  status: Exception
  stderr: 'tmp7385wjll/tmp7385wjll.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0de4816c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0de450db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0de450d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0de450c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7385wjll                        0x000055f6150ff672 <unavailable> + 5746

    5    libc.so.6                          0x00002b0de4a02460 __libc_start_main +
    245

    6    tmp7385wjll                        0x000055f6150ff2d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var result = \"db\"\n    var value = decimal\n    while\
    \ value > 0 {\n        result = result + \"\\(value % 2)\"\n        value = value\
    \ / 2\n    }\n    return String(result.reversed()) + \"db\"\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpeu9on7lg/tmpeu9on7lg.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad239793c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad23948ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad23948a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad2394897b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeu9on7lg                        0x000055aa0c4cc812 <unavailable> + 6162

    5    libc.so.6                          0x00002ad23997f460 __libc_start_main +
    245

    6    tmpeu9on7lg                        0x000055aa0c4cc479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660013808
- exit_code: 0
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    \n    if decimal == 0 {\n        return \"db0db\"\n  \
    \  }\n    \n    var binary: String = \"\"\n    var dec: Int = decimal\n    \n\
    \    while dec > 0 {\n        binary = String(dec % 2) + binary\n        dec /=\
    \ 2\n    }\n    \n    return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013808
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    // Insert your code here\n    var dec = decimal\n    var\
    \ binary = \"db\"\n    while dec != 0 {\n        if dec % 2 == 0 {\n         \
    \   binary += \"0\"\n        } else {\n            binary += \"1\"\n        }\n\
    \        dec /= 2\n    }\n    binary += \"db\"\n    return String(binary.reversed())\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\n\
    assert(decimal_to_binary(decimal: 32) == \"db100000db\")\nassert(decimal_to_binary(decimal:\
    \ 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal: 15) == \"db1111db\"\
    )"
  status: Exception
  stderr: 'tmpj0i0j2ap/tmpj0i0j2ap.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba934368c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba93405fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba93405f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba93405e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj0i0j2ap                        0x00005590900ba5b2 <unavailable> + 5554

    5    libc.so.6                          0x00002ba934554460 __libc_start_main +
    245

    6    tmpj0i0j2ap                        0x00005590900ba219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1660013808
- exit_code: 0
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    let binary: String = String(decimal, radix: 2)\n    return\
    \ \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(decimal_to_binary(decimal:\
    \ 0) == \"db0db\")\nassert(decimal_to_binary(decimal: 32) == \"db100000db\")\n\
    assert(decimal_to_binary(decimal: 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal:\
    \ 15) == \"db1111db\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013808
- exit_code: 0
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    let str = \"db\" + String(decimal, radix: 2) + \"db\"\n\
    \    return str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(decimal_to_binary(decimal:\
    \ 0) == \"db0db\")\nassert(decimal_to_binary(decimal: 32) == \"db100000db\")\n\
    assert(decimal_to_binary(decimal: 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal:\
    \ 15) == \"db1111db\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013808
- exit_code: 0
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    return \"db\" + String(decimal, radix: 2) + \"db\"\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\n\
    assert(decimal_to_binary(decimal: 32) == \"db100000db\")\nassert(decimal_to_binary(decimal:\
    \ 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal: 15) == \"db1111db\"\
    )"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013643
- exit_code: 0
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    let result = String(decimal, radix: 2)\n    return \"\
    db\\(result)db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(decimal_to_binary(decimal:\
    \ 0) == \"db0db\")\nassert(decimal_to_binary(decimal: 32) == \"db100000db\")\n\
    assert(decimal_to_binary(decimal: 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal:\
    \ 15) == \"db1111db\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013808
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    return String(decimal, radix: 2, uppercase: false)\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\n\
    assert(decimal_to_binary(decimal: 32) == \"db100000db\")\nassert(decimal_to_binary(decimal:\
    \ 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal: 15) == \"db1111db\"\
    )"
  status: Exception
  stderr: 'tmpedzj88a7/tmpedzj88a7.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac020ca0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac020997b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac020997988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac0209967b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpedzj88a7                        0x00005594a9b16382 <unavailable> + 4994

    5    libc.so.6                          0x00002ac020e8c460 __libc_start_main +
    245

    6    tmpedzj88a7                        0x00005594a9b15fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660013808
- exit_code: 0
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    return \"db\" + String(decimal, radix: 2) + \"db\"\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\n\
    assert(decimal_to_binary(decimal: 32) == \"db100000db\")\nassert(decimal_to_binary(decimal:\
    \ 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal: 15) == \"db1111db\"\
    )"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var result = \"db\"\n    var quotient = decimal\n    var\
    \ remainder = 0\n    while quotient > 0 {\n        remainder = quotient % 2\n\
    \        result = \"\\(remainder)\" + result\n        quotient = quotient / 2\n\
    \    }\n    result += \"db\"\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpu062k038/tmpu062k038.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8480e0cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8480b03b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8480b03988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8480b027b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu062k038                        0x0000561124e18682 <unavailable> + 5762

    5    libc.so.6                          0x00002b8480ff8460 __libc_start_main +
    245

    6    tmpu062k038                        0x0000561124e182e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1660013808
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    return \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpys9jwszd/tmpys9jwszd.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adc62585c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adc6227cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adc6227c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adc6227b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpys9jwszd                        0x0000555ea11cd2e2 <unavailable> + 4834

    5    libc.so.6                          0x00002adc62771460 __libc_start_main +
    245

    6    tmpys9jwszd                        0x0000555ea11ccf49 <unavailable> + 3913

    '
  stdout: ''
  timestamp: 1660013808
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var quotient = decimal\n    var binary = \"\"\n    while\
    \ quotient != 0 {\n        let remainder = quotient % 2\n        quotient = quotient\
    \ / 2\n        binary.append(String(remainder))\n    }\n    return \"db\" + String(binary.reversed())\
    \ + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(decimal_to_binary(decimal:\
    \ 0) == \"db0db\")\nassert(decimal_to_binary(decimal: 32) == \"db100000db\")\n\
    assert(decimal_to_binary(decimal: 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal:\
    \ 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmp1_khol0q/tmp1_khol0q.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af9eb0eac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af9eade1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af9eade1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af9eade07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1_khol0q                        0x0000563d7aa806c2 <unavailable> + 5826

    5    libc.so.6                          0x00002af9eb2d6460 __libc_start_main +
    245

    6    tmp1_khol0q                        0x0000563d7aa80329 <unavailable> + 4905

    '
  stdout: ''
  timestamp: 1660013808
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var result = \"db\"\n    var num = decimal\n    while\
    \ num > 0 {\n        result = String(num % 2) + result\n        num /= 2\n   \
    \ }\n    result += \"db\"\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmp4g01y5rf/tmp4g01y5rf.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aba78c3dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aba78934b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aba78934988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aba789337b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4g01y5rf                        0x000055a97ebab4e2 <unavailable> + 5346

    5    libc.so.6                          0x00002aba78e29460 __libc_start_main +
    245

    6    tmp4g01y5rf                        0x000055a97ebab149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1660013726
- exit_code: 0
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    \n    return \"db\" + String(decimal, radix: 2) + \"db\"\
    \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\n\
    assert(decimal_to_binary(decimal: 32) == \"db100000db\")\nassert(decimal_to_binary(decimal:\
    \ 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal: 15) == \"db1111db\"\
    )"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013808
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    // binary = \"db\" + binary + \"db\"\n    var binary =\
    \ \"\"\n    var decimal = decimal\n    while decimal > 0 {\n        binary = String(decimal\
    \ % 2) + binary\n        decimal /= 2\n    }\n    return \"db\" + binary + \"\
    db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(decimal_to_binary(decimal: 0)\
    \ == \"db0db\")\nassert(decimal_to_binary(decimal: 32) == \"db100000db\")\nassert(decimal_to_binary(decimal:\
    \ 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal: 15) == \"db1111db\"\
    )"
  status: Exception
  stderr: 'tmplj23ttoq/tmplj23ttoq.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b684d84ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b684d541b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b684d541988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b684d5407b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplj23ttoq                        0x000055b282dca492 <unavailable> + 5266

    5    libc.so.6                          0x00002b684da36460 __libc_start_main +
    245

    6    tmplj23ttoq                        0x000055b282dca0f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013808
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    //TODO: Write a function that converts a decimal number\
    \ to a binary string\n    return \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpw6u9nw_4/tmpw6u9nw_4.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab192405c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab1920fcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab1920fc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab1920fb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw6u9nw_4                        0x00005605ef6ac2e2 <unavailable> + 4834

    5    libc.so.6                          0x00002ab1925f1460 __libc_start_main +
    245

    6    tmpw6u9nw_4                        0x00005605ef6abf49 <unavailable> + 3913

    '
  stdout: ''
  timestamp: 1660013808
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var str = \"db\"\n    var value = decimal\n    while value\
    \ > 0 {\n        str = str + \"\\(value % 2)\"\n        value = value / 2\n  \
    \  }\n    str = str + \"db\"\n    return String(str.reversed())\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmp9gy783t5/tmp9gy783t5.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adab8b45c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adab883cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adab883c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adab883b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9gy783t5                        0x000055941cfb2812 <unavailable> + 6162

    5    libc.so.6                          0x00002adab8d31460 __libc_start_main +
    245

    6    tmp9gy783t5                        0x000055941cfb2479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660013808
- exit_code: 0
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    return \"db\" + String(decimal, radix: 2) + \"db\"\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\n\
    assert(decimal_to_binary(decimal: 32) == \"db100000db\")\nassert(decimal_to_binary(decimal:\
    \ 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal: 15) == \"db1111db\"\
    )"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013643
- exit_code: 0
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    return \"db\" + String(decimal, radix: 2) + \"db\"\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\n\
    assert(decimal_to_binary(decimal: 32) == \"db100000db\")\nassert(decimal_to_binary(decimal:\
    \ 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal: 15) == \"db1111db\"\
    )"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013643
- exit_code: 0
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    return \"db\" + String(decimal, radix: 2) + \"db\"\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\n\
    assert(decimal_to_binary(decimal: 32) == \"db100000db\")\nassert(decimal_to_binary(decimal:\
    \ 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal: 15) == \"db1111db\"\
    )"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var bytes: [UInt8] = [UInt8](repeating: 0, count: 3)\n\
    \    var binary: [UInt8] = [UInt8](repeating: 0, count: 9)\n    for i in 0..<3\
    \ {\n        bytes[i] = UInt8(decimal >> (i * 8))\n    }\n    for i in 0..<3 {\n\
    \        for j in 0..<8 {\n            binary[i * 8 + j] = bytes[i] & 1\n    \
    \        bytes[i] >>= 1\n        }\n    }\n    return \"db\" + binary.reversed().map\
    \ { $0 == 0 ? \"0\" : \"1\" }.joined() + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ab3b92b7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab3b8fae561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ab3b8fae286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ab3b8fae13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ab3b8fadbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ab3b8dad48c <unavailable> + 185484

    6    tmpypbayt5t                        0x0000559e479a0404 <unavailable> + 9220

    7    tmpypbayt5t                        0x0000559e4799f91a <unavailable> + 6426

    8    libc.so.6                          0x00002ab3b94a3460 __libc_start_main +
    245

    9    tmpypbayt5t                        0x0000559e4799f639 <unavailable> + 5689

    '
  stdout: ''
  timestamp: 1660013808
- exit_code: 1
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var m = \"db\"\n    if decimal == 0 {\n        m += \"\
    0\"\n    }\n    while decimal > 0 {\n        m += String(decimal % 2)\n      \
    \  decimal /= 2\n    }\n    return String(m.reversed()) + \"db\"\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\n\
    assert(decimal_to_binary(decimal: 32) == \"db100000db\")\nassert(decimal_to_binary(decimal:\
    \ 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal: 15) == \"db1111db\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpi42z_xd7.swift:19:17: error: left side of mutating operator isn't\
    \ mutable: 'decimal' is a 'let' constant\n        decimal /= 2\n        ~~~~~~~\
    \ ^\n"
  stdout: ''
  timestamp: 1660013808
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binaryString = \"db\"\n    var number = decimal\n\
    \    while number > 0 {\n        binaryString.append(String(number % 2))\n   \
    \     number /= 2\n    }\n    return binaryString.reversed() + \"db\"\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\n\
    assert(decimal_to_binary(decimal: 32) == \"db100000db\")\nassert(decimal_to_binary(decimal:\
    \ 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal: 15) == \"db1111db\"\
    )"
  status: Exception
  stderr: 'tmpfxi7kn7z/tmpfxi7kn7z.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0f5780ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0f57505b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0f57505988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0f575047b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfxi7kn7z                        0x000056380ac996b2 <unavailable> + 5810

    5    libc.so.6                          0x00002b0f579fa460 __libc_start_main +
    245

    6    tmpfxi7kn7z                        0x000056380ac99319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660013808
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    return String(decimal, radix: 2)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmp7kalm75r/tmp7kalm75r.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5feb8c1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5feb5b8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5feb5b8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5feb5b77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7kalm75r                        0x000055ff8055a382 <unavailable> + 4994

    5    libc.so.6                          0x00002b5febaad460 __libc_start_main +
    245

    6    tmp7kalm75r                        0x000055ff80559fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660013808
- exit_code: 1
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var str = \"\"\n    for _ in 1...8 {\n        str = String(decimal\
    \ % 2) + str\n        decimal /= 2\n    }\n    return \"db\" + str + \"db\"\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\n\
    assert(decimal_to_binary(decimal: 32) == \"db100000db\")\nassert(decimal_to_binary(decimal:\
    \ 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal: 15) == \"db1111db\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpfh1gygss.swift:16:17: error: left side of mutating operator isn't\
    \ mutable: 'decimal' is a 'let' constant\n        decimal /= 2\n        ~~~~~~~\
    \ ^\n"
  stdout: ''
  timestamp: 1660013808
- exit_code: 0
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    return \"db\\(String(decimal, radix: 2))db\"\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\n\
    assert(decimal_to_binary(decimal: 32) == \"db100000db\")\nassert(decimal_to_binary(decimal:\
    \ 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal: 15) == \"db1111db\"\
    )"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013642
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"\"\n    var dec = decimal\n    while dec\
    \ > 0 {\n        binary = String(dec % 2) + binary\n        dec /= 2\n    }\n\
    \    return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpjbbgc9lh/tmpjbbgc9lh.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab42985bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab429552b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab429552988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab4295517b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjbbgc9lh                        0x0000564f126f0492 <unavailable> + 5266

    5    libc.so.6                          0x00002ab429a47460 __libc_start_main +
    245

    6    tmpjbbgc9lh                        0x0000564f126f00f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013643
- exit_code: 0
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    return \"db\" + String(decimal, radix: 2) + \"db\"\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\n\
    assert(decimal_to_binary(decimal: 32) == \"db100000db\")\nassert(decimal_to_binary(decimal:\
    \ 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal: 15) == \"db1111db\"\
    )"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013643
- exit_code: 0
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    return \"db\" + String(decimal, radix: 2) + \"db\"\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\n\
    assert(decimal_to_binary(decimal: 32) == \"db100000db\")\nassert(decimal_to_binary(decimal:\
    \ 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal: 15) == \"db1111db\"\
    )"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"db\"\n    var d = decimal\n    while d\
    \ > 0 {\n        binary.append(String(d % 2))\n        d /= 2\n    }\n    return\
    \ binary.reversed() + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(decimal_to_binary(decimal:\
    \ 0) == \"db0db\")\nassert(decimal_to_binary(decimal: 32) == \"db100000db\")\n\
    assert(decimal_to_binary(decimal: 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal:\
    \ 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpt2vxak_5/tmpt2vxak_5.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b71dd0d0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b71dcdc7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b71dcdc7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b71dcdc67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt2vxak_5                        0x00005639af8ec6b2 <unavailable> + 5810

    5    libc.so.6                          0x00002b71dd2bc460 __libc_start_main +
    245

    6    tmpt2vxak_5                        0x00005639af8ec319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660013808
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"\"\n    var number = decimal\n    while\
    \ number > 0 {\n        binary = \"\\(number % 2)\" + binary\n        number /=\
    \ 2\n    }\n    return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpq1k4yrz9/tmpq1k4yrz9.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b07d9bd0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b07d98c7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b07d98c7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b07d98c67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpq1k4yrz9                        0x0000556327687622 <unavailable> + 5666

    5    libc.so.6                          0x00002b07d9dbc460 __libc_start_main +
    245

    6    tmpq1k4yrz9                        0x0000556327687289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660013643
- exit_code: 0
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    \n    var binary = \"\"\n    for value in String(decimal,\
    \ radix: 2) {\n        binary.append(value)\n    }\n    return \"db\\(binary)db\"\
    \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\n\
    assert(decimal_to_binary(decimal: 32) == \"db100000db\")\nassert(decimal_to_binary(decimal:\
    \ 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal: 15) == \"db1111db\"\
    )"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013808
- exit_code: 1
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n  var binary = \"\"\n  while decimal != 0 {\n    binary =\
    \ String(decimal % 2) + binary\n    decimal /= 2\n  }\n  return \"db\" + binary\
    \ + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(decimal_to_binary(decimal:\
    \ 0) == \"db0db\")\nassert(decimal_to_binary(decimal: 32) == \"db100000db\")\n\
    assert(decimal_to_binary(decimal: 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal:\
    \ 15) == \"db1111db\")"
  status: SyntaxError
  stderr: "/tmp/tmpkch23qcm.swift:16:13: error: left side of mutating operator isn't\
    \ mutable: 'decimal' is a 'let' constant\n    decimal /= 2\n    ~~~~~~~ ^\n"
  stdout: ''
  timestamp: 1660013808
- exit_code: 1
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var str: String = \"db\"\n    let temp: Int = decimal\n\
    \    for _ in 0..<32 {\n        if temp & 1 != 0 {\n            str += \"1\"\n\
    \        } else {\n            str += \"0\"\n        }\n        decimal /= 2\n\
    \    }\n    str += \"db\"\n    return str\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: SyntaxError
  stderr: "/tmp/tmpttjlkhob.swift:21:17: error: left side of mutating operator isn't\
    \ mutable: 'decimal' is a 'let' constant\n        decimal /= 2\n        ~~~~~~~\
    \ ^\n"
  stdout: ''
  timestamp: 1660013808
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binaryString = \"db\"\n    var number = decimal\n\
    \    while number > 0 {\n        let binaryBit = number % 2\n        number =\
    \ number / 2\n        binaryString.append(String(binaryBit))\n    }\n    binaryString.append(\"\
    db\")\n    return String(binaryString.reversed())\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmp3jberke4/tmp3jberke4.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b864ab69c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b864a860b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b864a860988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b864a85f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3jberke4                        0x000055dad5f06672 <unavailable> + 5746

    5    libc.so.6                          0x00002b864ad55460 __libc_start_main +
    245

    6    tmp3jberke4                        0x000055dad5f062d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660013808
- exit_code: 1
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    let number = decimal\n    var result = \"\"\n    while\
    \ number != 0 {\n        result = String(number % 2) + result\n        number\
    \ /= 2\n    }\n    return \"db\" + result + \"db\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: SyntaxError
  stderr: "/tmp/tmpan32ce9d.swift:17:16: error: left side of mutating operator isn't\
    \ mutable: 'number' is a 'let' constant\n        number /= 2\n        ~~~~~~ ^\n\
    /tmp/tmpan32ce9d.swift:13:5: note: change 'let' to 'var' to make it mutable\n\
    \    let number = decimal\n    ^~~\n    var\n"
  stdout: ''
  timestamp: 1660013808
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    \n    var result = \"db\"\n    var dividend = decimal\n\
    \    var remainder = 0\n    \n    while dividend > 0 {\n        remainder = dividend\
    \ % 2\n        dividend = dividend / 2\n        result = String(remainder) + result\n\
    \    }\n    \n    result = result + \"db\"\n    \n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\n\
    assert(decimal_to_binary(decimal: 32) == \"db100000db\")\nassert(decimal_to_binary(decimal:\
    \ 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal: 15) == \"db1111db\"\
    )"
  status: Exception
  stderr: 'tmp40e16jku/tmp40e16jku.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8af25fdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8af22f4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8af22f4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8af22f37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp40e16jku                        0x00005615bfa1d492 <unavailable> + 5266

    5    libc.so.6                          0x00002b8af27e9460 __libc_start_main +
    245

    6    tmp40e16jku                        0x00005615bfa1d0f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013808
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var result = \"db\"\n    var temp = decimal\n    var remainder\
    \ = 0\n    while (temp != 0) {\n        remainder = temp % 2\n        temp = temp\
    \ / 2\n        result.append(String(remainder))\n    }\n    result.append(\"db\"\
    )\n    return String(result.reversed())\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpoqv_9p3w/tmpoqv_9p3w.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aae8e4a2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aae8e199b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aae8e199988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aae8e1987b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpoqv_9p3w                        0x0000557f8d5c6672 <unavailable> + 5746

    5    libc.so.6                          0x00002aae8e68e460 __libc_start_main +
    245

    6    tmpoqv_9p3w                        0x0000557f8d5c62d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660013808
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"\"\n    var num = decimal\n    while num\
    \ > 0 {\n        let lastDigit = num % 2\n        binary = \"\\(lastDigit)\" +\
    \ binary\n        num = num / 2\n    }\n    return \"db\" + binary + \"db\"\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\n\
    assert(decimal_to_binary(decimal: 32) == \"db100000db\")\nassert(decimal_to_binary(decimal:\
    \ 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal: 15) == \"db1111db\"\
    )"
  status: Exception
  stderr: 'tmpzrwixoyk/tmpzrwixoyk.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0969d50c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0969a47b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0969a47988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0969a467b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzrwixoyk                        0x0000560e69749622 <unavailable> + 5666

    5    libc.so.6                          0x00002b0969f3c460 __libc_start_main +
    245

    6    tmpzrwixoyk                        0x0000560e69749289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660013808
- exit_code: 0
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    return \"db\\(String(decimal, radix: 2))db\"\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\n\
    assert(decimal_to_binary(decimal: 32) == \"db100000db\")\nassert(decimal_to_binary(decimal:\
    \ 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal: 15) == \"db1111db\"\
    )"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013642
- exit_code: 0
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    //    var result = \"db\"\n    //    var div = decimal\n\
    \    //    while div != 0 {\n    //        result.append(div % 2 == 0 ? \"0\"\
    \ : \"1\")\n    //        div /= 2\n    //    }\n    //    result += \"db\"\n\
    \    //    return String(result.reversed())\n    return \"db\" + String(decimal,\
    \ radix: 2) + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(decimal_to_binary(decimal:\
    \ 0) == \"db0db\")\nassert(decimal_to_binary(decimal: 32) == \"db100000db\")\n\
    assert(decimal_to_binary(decimal: 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal:\
    \ 15) == \"db1111db\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013808
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    if decimal == 0 {\n        return \"db0db\"\n    }\n \
    \   var binary = String()\n    let remainder = decimal % 2\n    binary = \"\\\
    (binary)db\\(remainder)\"\n    if decimal / 2 == 0 {\n        return binary\n\
    \    }\n    return decimal_to_binary(decimal: decimal / 2) + binary\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\n\
    assert(decimal_to_binary(decimal: 32) == \"db100000db\")\nassert(decimal_to_binary(decimal:\
    \ 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal: 15) == \"db1111db\"\
    )"
  status: Exception
  stderr: 'tmpnhk537ae/tmpnhk537ae.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7c6fed5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7c6fbccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7c6fbcc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7c6fbcb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnhk537ae                        0x0000557ccdc8d8b8 <unavailable> + 6328

    5    libc.so.6                          0x00002b7c700c1460 __libc_start_main +
    245

    6    tmpnhk537ae                        0x0000557ccdc8d459 <unavailable> + 5209

    '
  stdout: ''
  timestamp: 1660013808
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var bin = \"db\"\n    var n = decimal\n    while n > 0\
    \ {\n        bin.append(String(n%2))\n        n = n/2\n    }\n    bin.append(\"\
    db\")\n    return String(bin.reversed())\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpg5uyaf5t/tmpg5uyaf5t.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b79bd2bfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b79bcfb6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b79bcfb6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b79bcfb57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg5uyaf5t                        0x000055e545037672 <unavailable> + 5746

    5    libc.so.6                          0x00002b79bd4ab460 __libc_start_main +
    245

    6    tmpg5uyaf5t                        0x000055e5450372d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660013809
- exit_code: 1
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    // This function converts a decimal number to a binary\
    \ one and returns the result as a string,\n    // in the correct format.\n   \
    \ // Start with an empty string, that will eventually have the result in it.\n\
    \    var binary = \"\"\n    // Keep reducing the decimal number until it is 0.\n\
    \    while decimal > 0 {\n        // Use the modulo operator to get the remainder.\n\
    \        let remainder = decimal % 2\n        // The remainder will be either\
    \ 0 or 1, which is exactly what we need.\n        // Convert the remainder to\
    \ a string and append it to the binary string.\n        binary = String(remainder)\
    \ + binary\n        // Using integer division to reduce the decimal number.\n\
    \        decimal = decimal / 2\n    }\n    // Finally, return the final binary\
    \ string surrounded by the characters 'db'.\n    return \"db\" + binary + \"db\"\
    \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\n\
    assert(decimal_to_binary(decimal: 32) == \"db100000db\")\nassert(decimal_to_binary(decimal:\
    \ 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal: 15) == \"db1111db\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpgyidvlse.swift:25:9: error: cannot assign to value: 'decimal' is\
    \ a 'let' constant\n        decimal = decimal / 2\n        ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013808
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    let bits = decimal.bitWidth\n    var str = \"db\"\n  \
    \  for bit in (1...bits).reversed() {\n        str += decimal & 1 << bit == 0\
    \ ? \"0\" : \"1\"\n    }\n    str += \"db\"\n    return str\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmp_vjqems7/tmp_vjqems7.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b89afa6dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b89af764b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b89af764988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b89af7637b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_vjqems7                        0x0000560036bd2742 <unavailable> + 5954

    5    libc.so.6                          0x00002b89afc59460 __libc_start_main +
    245

    6    tmp_vjqems7                        0x0000560036bd23a9 <unavailable> + 5033

    '
  stdout: ''
  timestamp: 1660013809
- exit_code: 0
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    if decimal == 0 {\n        return \"db0db\"\n    }\n \
    \   var binary_code = \"\"\n    var remainder = decimal\n    while remainder >\
    \ 0 {\n        let bit = remainder % 2\n        remainder = remainder / 2\n  \
    \      binary_code = \"\\(bit)\" + binary_code\n    }\n    return \"db\" + binary_code\
    \ + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(decimal_to_binary(decimal:\
    \ 0) == \"db0db\")\nassert(decimal_to_binary(decimal: 32) == \"db100000db\")\n\
    assert(decimal_to_binary(decimal: 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal:\
    \ 15) == \"db1111db\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013809
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"db\"\n    var number = decimal\n    while\
    \ number > 0 {\n        binary.append(String(number % 2))\n        number /= 2\n\
    \    }\n    binary += \"db\"\n    return String(binary.reversed())\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\n\
    assert(decimal_to_binary(decimal: 32) == \"db100000db\")\nassert(decimal_to_binary(decimal:\
    \ 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal: 15) == \"db1111db\"\
    )"
  status: Exception
  stderr: 'tmpz3glfima/tmpz3glfima.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b402dc04c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b402d8fbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b402d8fb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b402d8fa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz3glfima                        0x000055ed261e96c2 <unavailable> + 5826

    5    libc.so.6                          0x00002b402ddf0460 __libc_start_main +
    245

    6    tmpz3glfima                        0x000055ed261e9329 <unavailable> + 4905

    '
  stdout: ''
  timestamp: 1660013809
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    // the extra characters are there to help with the format\n\
    \    var result = \"db\"\n    var number = decimal\n    while number > 0 {\n \
    \       let binary = number % 2\n        result = \"\\(binary)\" + result\n  \
    \      number /= 2\n    }\n    result += \"db\"\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\n\
    assert(decimal_to_binary(decimal: 32) == \"db100000db\")\nassert(decimal_to_binary(decimal:\
    \ 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal: 15) == \"db1111db\"\
    )"
  status: Exception
  stderr: 'tmpmkfuvvdg/tmpmkfuvvdg.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4868040c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4867d37b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4867d37988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4867d367b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmkfuvvdg                        0x0000560f4ea38682 <unavailable> + 5762

    5    libc.so.6                          0x00002b486822c460 __libc_start_main +
    245

    6    tmpmkfuvvdg                        0x0000560f4ea382e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1660013809
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    // YOUR CODE HERE\n    return \"dbdb\"\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpaql_29jr/tmpaql_29jr.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4d84515c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4d8420cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4d8420c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4d8420b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpaql_29jr                        0x000055686a93a2e2 <unavailable> + 4834

    5    libc.so.6                          0x00002b4d84701460 __libc_start_main +
    245

    6    tmpaql_29jr                        0x000055686a939f49 <unavailable> + 3913

    '
  stdout: ''
  timestamp: 1660013809
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"\"\n    var number = decimal\n    while\
    \ number > 0 {\n        binary.append(\"\\(number % 2)\")\n        number /= 2\n\
    \    }\n    var res = \"db\"\n    for c in binary.reversed() {\n        res.append(c)\n\
    \    }\n    res.append(\"db\")\n    return res\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmppiob7zwt/tmppiob7zwt.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b41534c8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b41531bfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b41531bf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b41531be7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppiob7zwt                        0x0000561f8bd0a8e2 <unavailable> + 6370

    5    libc.so.6                          0x00002b41536b4460 __libc_start_main +
    245

    6    tmppiob7zwt                        0x0000561f8bd0a549 <unavailable> + 5449

    '
  stdout: ''
  timestamp: 1660013809
- exit_code: 0
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    return \"db\" + String(decimal, radix: 2) + \"db\"\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\n\
    assert(decimal_to_binary(decimal: 32) == \"db100000db\")\nassert(decimal_to_binary(decimal:\
    \ 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal: 15) == \"db1111db\"\
    )"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013643
- exit_code: 0
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    let binary = String(decimal, radix: 2)\n    return \"\
    db\\(binary)db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(decimal_to_binary(decimal:\
    \ 0) == \"db0db\")\nassert(decimal_to_binary(decimal: 32) == \"db100000db\")\n\
    assert(decimal_to_binary(decimal: 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal:\
    \ 15) == \"db1111db\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013726
- exit_code: 0
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    return \"db\" + String(decimal, radix: 2) + \"db\"\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\n\
    assert(decimal_to_binary(decimal: 32) == \"db100000db\")\nassert(decimal_to_binary(decimal:\
    \ 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal: 15) == \"db1111db\"\
    )"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013643
- exit_code: 0
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    return \"db\" + String(decimal, radix: 2) + \"db\"\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\n\
    assert(decimal_to_binary(decimal: 32) == \"db100000db\")\nassert(decimal_to_binary(decimal:\
    \ 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal: 15) == \"db1111db\"\
    )"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    return \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpys9jwszd/tmpys9jwszd.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adc62585c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adc6227cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adc6227c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adc6227b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpys9jwszd                        0x0000555ea11cd2e2 <unavailable> + 4834

    5    libc.so.6                          0x00002adc62771460 __libc_start_main +
    245

    6    tmpys9jwszd                        0x0000555ea11ccf49 <unavailable> + 3913

    '
  stdout: ''
  timestamp: 1660013808
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    if decimal == 0 {\n        return \"db0db\"\n    }\n \
    \   var result = \"db\"\n    var number = decimal\n    while number > 0 {\n  \
    \      result.append(String(number % 2))\n        number /= 2\n    }\n    return\
    \ String(result.reversed()) + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmp9q65760j/tmp9q65760j.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b66079a5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b660769cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b660769c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b660769b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9q65760j                        0x0000558e4c55d788 <unavailable> + 6024

    5    libc.so.6                          0x00002b6607b91460 __libc_start_main +
    245

    6    tmp9q65760j                        0x0000558e4c55d329 <unavailable> + 4905

    '
  stdout: ''
  timestamp: 1660013809
- exit_code: 0
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    if decimal == 0 {\n        return \"db0db\"\n    }\n \
    \   var dec = decimal\n    var result = \"\"\n    while dec > 0 {\n        result.append(String(dec\
    \ % 2))\n        dec /= 2\n    }\n    return \"db\" + String(result.reversed())\
    \ + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(decimal_to_binary(decimal:\
    \ 0) == \"db0db\")\nassert(decimal_to_binary(decimal: 32) == \"db100000db\")\n\
    assert(decimal_to_binary(decimal: 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal:\
    \ 15) == \"db1111db\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013809
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var result = \"\"\n    var rest = decimal\n    while rest\
    \ > 0 {\n        result = (rest % 2 == 0 ? \"0\" : \"1\") + result\n        rest\
    \ /= 2\n    }\n    return \"db\" + result + \"db\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpgukex5_9/tmpgukex5_9.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9e27587c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9e2727eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9e2727e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9e2727d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgukex5_9                        0x000055b1746593c2 <unavailable> + 5058

    5    libc.so.6                          0x00002b9e27773460 __libc_start_main +
    245

    6    tmpgukex5_9                        0x000055b174659029 <unavailable> + 4137

    '
  stdout: ''
  timestamp: 1660013809
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n  return \"db011101db\"\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpqmrqsy5o/tmpqmrqsy5o.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b60c15d1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b60c12c8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b60c12c8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b60c12c77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqmrqsy5o                        0x0000557ffb54e2e2 <unavailable> + 4834

    5    libc.so.6                          0x00002b60c17bd460 __libc_start_main +
    245

    6    tmpqmrqsy5o                        0x0000557ffb54df49 <unavailable> + 3913

    '
  stdout: ''
  timestamp: 1660013809
- exit_code: 0
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    return \"db\\(String(decimal, radix: 2))db\"\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\n\
    assert(decimal_to_binary(decimal: 32) == \"db100000db\")\nassert(decimal_to_binary(decimal:\
    \ 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal: 15) == \"db1111db\"\
    )"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013642
- exit_code: 1
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var decimals: [Int] = []\n    var result: String = \"\
    db\"\n    if decimal <= 0 {\n        return \"db0db\"\n    }\n    while decimal\
    \ > 0 {\n        decimals.append(decimal % 2)\n        decimal /= 2\n    }\n \
    \   while !decimals.isEmpty {\n        result += \"\\(decimals.removeLast())\"\
    \n    }\n    result += \"db\"\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: SyntaxError
  stderr: "/tmp/tmptgqdwj07.swift:20:17: error: left side of mutating operator isn't\
    \ mutable: 'decimal' is a 'let' constant\n        decimal /= 2\n        ~~~~~~~\
    \ ^\n"
  stdout: ''
  timestamp: 1660013808
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var result = \"\"\n    var number = decimal\n    while\
    \ number > 0 {\n        result = \"\\(number % 2)\" + result\n        number /=\
    \ 2\n    }\n    return \"db\" + result + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmp5nvmokxq/tmp5nvmokxq.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac02d650c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac02d347b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac02d347988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac02d3467b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5nvmokxq                        0x000055f134071622 <unavailable> + 5666

    5    libc.so.6                          0x00002ac02d83c460 __libc_start_main +
    245

    6    tmp5nvmokxq                        0x000055f134071289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660013809
- exit_code: 0
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    let binary = String(decimal, radix: 2)\n    return \"\
    db\\(binary)db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(decimal_to_binary(decimal:\
    \ 0) == \"db0db\")\nassert(decimal_to_binary(decimal: 32) == \"db100000db\")\n\
    assert(decimal_to_binary(decimal: 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal:\
    \ 15) == \"db1111db\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013726
- exit_code: 0
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    let bin = String(decimal, radix: 2)\n    return \"db\\\
    (bin)db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(decimal_to_binary(decimal:\
    \ 0) == \"db0db\")\nassert(decimal_to_binary(decimal: 32) == \"db100000db\")\n\
    assert(decimal_to_binary(decimal: 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal:\
    \ 15) == \"db1111db\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013808
- exit_code: 0
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var array = [Int]()\n    var x = decimal\n    var result\
    \ = \"db\"\n    repeat {\n        array.append(x % 2)\n        x = x / 2\n   \
    \ } while x != 0\n    for i in stride(from: array.count - 1, through: 0, by: -1)\
    \ {\n        result += String(array[i])\n    }\n    result += \"db\"\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(decimal_to_binary(decimal:\
    \ 0) == \"db0db\")\nassert(decimal_to_binary(decimal: 32) == \"db100000db\")\n\
    assert(decimal_to_binary(decimal: 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal:\
    \ 15) == \"db1111db\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013809
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var result = \"db\"\n    var i = decimal\n    while i\
    \ > 0 {\n        result.append(i % 2 == 0 ? \"0\" : \"1\")\n        i /= 2\n \
    \   }\n    result.append(\"db\")\n    return String(result.reversed())\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\n\
    assert(decimal_to_binary(decimal: 32) == \"db100000db\")\nassert(decimal_to_binary(decimal:\
    \ 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal: 15) == \"db1111db\"\
    )"
  status: Exception
  stderr: 'tmp1w49jyb1/tmp1w49jyb1.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b473e524c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b473e21bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b473e21b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b473e21a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1w49jyb1                        0x0000563b443005b2 <unavailable> + 5554

    5    libc.so.6                          0x00002b473e710460 __libc_start_main +
    245

    6    tmp1w49jyb1                        0x0000563b44300219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1660013809
- exit_code: 0
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    return \"db\\(String(decimal, radix: 2))db\"\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\n\
    assert(decimal_to_binary(decimal: 32) == \"db100000db\")\nassert(decimal_to_binary(decimal:\
    \ 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal: 15) == \"db1111db\"\
    )"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013642
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var bits: [String] = []\n    var total = decimal\n   \
    \ while total > 0 {\n        bits.append(String(total % 2))\n        total /=\
    \ 2\n    }\n    return \"db\" + bits.reversed().joined() + \"db\"\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\n\
    assert(decimal_to_binary(decimal: 32) == \"db100000db\")\nassert(decimal_to_binary(decimal:\
    \ 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal: 15) == \"db1111db\"\
    )"
  status: Exception
  stderr: 'tmpvupb69tx/tmpvupb69tx.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3918920c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3918617b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3918617988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b39186167b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvupb69tx                        0x0000555cd1d91762 <unavailable> + 5986

    5    libc.so.6                          0x00002b3918b0c460 __libc_start_main +
    245

    6    tmpvupb69tx                        0x0000555cd1d913c9 <unavailable> + 5065

    '
  stdout: ''
  timestamp: 1660013809
- exit_code: 0
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"\"\n    var decimal = decimal\n    repeat\
    \ {\n        let remainder = decimal % 2\n        decimal /= 2\n        binary\
    \ = String(remainder) + binary\n    } while decimal > 0\n    let format = \"db\"\
    \ + binary + \"db\"\n    return format\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013809
- exit_code: 1
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    return binary_string(Int64(decimal), radix: 2)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\n\
    assert(decimal_to_binary(decimal: 32) == \"db100000db\")\nassert(decimal_to_binary(decimal:\
    \ 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal: 15) == \"db1111db\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp6b073xgo.swift:13:12: error: cannot find 'binary_string' in scope\n\
    \    return binary_string(Int64(decimal), radix: 2)\n           ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013809
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary: String = \"db\"\n    var num: Int = decimal\n\
    \    while num > 0 {\n        binary += String(num % 2)\n        num /= 2\n  \
    \  }\n    return String(binary.reversed()) + \"db\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpk973ivr2/tmpk973ivr2.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b71e31c8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b71e2ebfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b71e2ebf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b71e2ebe7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk973ivr2                        0x0000560f161f56c2 <unavailable> + 5826

    5    libc.so.6                          0x00002b71e33b4460 __libc_start_main +
    245

    6    tmpk973ivr2                        0x0000560f161f5329 <unavailable> + 4905

    '
  stdout: ''
  timestamp: 1660013809
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var result = \"db\"\n    var int = decimal\n    var remainder\
    \ = 0\n    var number = \"\"\n    while int > 0 {\n        remainder = int % 2\n\
    \        number += String(remainder)\n        int = int / 2\n    }\n    for char\
    \ in number.reversed() {\n        result += String(char)\n    }\n    result +=\
    \ \"db\"\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(decimal_to_binary(decimal:\
    \ 0) == \"db0db\")\nassert(decimal_to_binary(decimal: 32) == \"db100000db\")\n\
    assert(decimal_to_binary(decimal: 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal:\
    \ 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpp8bigw4y/tmpp8bigw4y.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab51eb8ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab51e885b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab51e885988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab51e8847b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp8bigw4y                        0x0000559ffc9be752 <unavailable> + 5970

    5    libc.so.6                          0x00002ab51ed7a460 __libc_start_main +
    245

    6    tmpp8bigw4y                        0x0000559ffc9be3b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013809
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var dec = decimal\n    var ans = \"db\"\n    while dec\
    \ != 0 {\n        ans += \"\\(dec % 2)\"\n        dec /= 2\n    }\n    return\
    \ ans + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(decimal_to_binary(decimal:\
    \ 0) == \"db0db\")\nassert(decimal_to_binary(decimal: 32) == \"db100000db\")\n\
    assert(decimal_to_binary(decimal: 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal:\
    \ 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmp2wvzpan0/tmp2wvzpan0.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b89fff2bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b89ffc22b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b89ffc22988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b89ffc217b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2wvzpan0                        0x000055d6d4f6b682 <unavailable> + 5762

    5    libc.so.6                          0x00002b8a00117460 __libc_start_main +
    245

    6    tmp2wvzpan0                        0x000055d6d4f6b2e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1660013809
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"\"\n    var n = decimal\n    while n >\
    \ 0 {\n        binary = String(n % 2) + binary\n        n /= 2\n    }\n    while\
    \ binary.count < 8 {\n        binary = \"0\" + binary\n    }\n    return \"db\"\
    \ + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(decimal_to_binary(decimal:\
    \ 0) == \"db0db\")\nassert(decimal_to_binary(decimal: 32) == \"db100000db\")\n\
    assert(decimal_to_binary(decimal: 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal:\
    \ 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpe9ngfhdj/tmpe9ngfhdj.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeea41b2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeea3ea9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeea3ea9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeea3ea87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe9ngfhdj                        0x000055ac7f3bb4e2 <unavailable> + 5346

    5    libc.so.6                          0x00002aeea439e460 __libc_start_main +
    245

    6    tmpe9ngfhdj                        0x000055ac7f3bb149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1660013809
- exit_code: 0
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    // TODO: Implement me!\n    var result = \"db\"\n    var\
    \ quotient = decimal\n    var remainder = 0\n    var i = 0\n    var n = 0\n  \
    \  var array = [Int]()\n    if decimal == 0 {\n        result += \"0\"\n    }\
    \ else {\n        while quotient != 0 {\n            i += 1\n            n = quotient\
    \ % 2\n            array.append(n)\n            quotient = quotient / 2\n    \
    \    }\n        while i > 0 {\n            result += String(array[i - 1])\n  \
    \          i -= 1\n        }\n    }\n    result += \"db\"\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\n\
    assert(decimal_to_binary(decimal: 32) == \"db100000db\")\nassert(decimal_to_binary(decimal:\
    \ 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal: 15) == \"db1111db\"\
    )"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013809
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    if decimal == 0 {\n        return \"db0db\"\n    }\n\n\
    \    var binary = \"db\"\n    var num = decimal\n\n    repeat {\n        binary.append(contentsOf:\
    \ num % 2 == 0 ? \"0\" : \"1\")\n        num /= 2\n    } while num > 0\n\n   \
    \ return binary.reversed() + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpcre517sf/tmpcre517sf.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1801107c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1800dfeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1800dfe988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1800dfd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcre517sf                        0x00005645405c96c8 <unavailable> + 5832

    5    libc.so.6                          0x00002b18012f3460 __libc_start_main +
    245

    6    tmpcre517sf                        0x00005645405c9269 <unavailable> + 4713

    '
  stdout: ''
  timestamp: 1660013809
- exit_code: 0
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    let binary: String = \"db\" + String(decimal, radix: 2)\
    \ + \"db\"\n    return binary\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(decimal_to_binary(decimal:\
    \ 0) == \"db0db\")\nassert(decimal_to_binary(decimal: 32) == \"db100000db\")\n\
    assert(decimal_to_binary(decimal: 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal:\
    \ 15) == \"db1111db\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013809
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var result = \"db\"\n    var number = decimal\n    while\
    \ number > 0 {\n        if number % 2 == 0 {\n            result = \"0\" + result\n\
    \        } else {\n            result = \"1\" + result\n        }\n        number\
    \ /= 2\n    }\n    return result + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpdc1jpp9s/tmpdc1jpp9s.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2895b33c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b289582ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b289582a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b28958297b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdc1jpp9s                        0x000055c74324f3c2 <unavailable> + 5058

    5    libc.so.6                          0x00002b2895d1f460 __libc_start_main +
    245

    6    tmpdc1jpp9s                        0x000055c74324f029 <unavailable> + 4137

    '
  stdout: ''
  timestamp: 1660013809
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    // Convert a decimal to binary by dividing the decimal\
    \ by 2 repeatedly and\n    // keeping track of the remainders.\n    var dec =\
    \ decimal\n    var decimal_as_binary = \"db\"\n    var remainder: Int\n    repeat\
    \ {\n        remainder = dec % 2\n        dec = dec / 2\n        if remainder\
    \ == 0 {\n            decimal_as_binary.append(\"0\")\n        } else {\n    \
    \        decimal_as_binary.append(\"1\")\n        }\n    } while dec != 0\n  \
    \  // Reverse the binary number so that it is in the correct order\n    var correct_order\
    \ = \"\"\n    for character in decimal_as_binary.reversed() {\n        correct_order.append(character)\n\
    \    }\n    correct_order.append(\"db\")\n    return correct_order\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\n\
    assert(decimal_to_binary(decimal: 32) == \"db100000db\")\nassert(decimal_to_binary(decimal:\
    \ 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal: 15) == \"db1111db\"\
    )"
  status: Exception
  stderr: 'tmpb2nvo_ke/tmpb2nvo_ke.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3ad28cbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3ad25c2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3ad25c2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3ad25c17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb2nvo_ke                        0x000055676338b682 <unavailable> + 5762

    5    libc.so.6                          0x00002b3ad2ab7460 __libc_start_main +
    245

    6    tmpb2nvo_ke                        0x000055676338b2e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1660013809
- exit_code: 0
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    let binary = String(decimal, radix: 2)\n    return \"\
    db\\(binary)db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(decimal_to_binary(decimal:\
    \ 0) == \"db0db\")\nassert(decimal_to_binary(decimal: 32) == \"db100000db\")\n\
    assert(decimal_to_binary(decimal: 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal:\
    \ 15) == \"db1111db\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013726
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var mutableDecimal = decimal\n    var binaryString = \"\
    db\"\n    while mutableDecimal > 0 {\n        let rest = mutableDecimal % 2\n\
    \        mutableDecimal = mutableDecimal / 2\n        binaryString = \"\\(rest)\\\
    (binaryString)\"\n    }\n    return \"\\(binaryString)db\"\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpdinujiny/tmpdinujiny.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aac7acd0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aac7a9c7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aac7a9c7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aac7a9c67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdinujiny                        0x000055733bbee752 <unavailable> + 5970

    5    libc.so.6                          0x00002aac7aebc460 __libc_start_main +
    245

    6    tmpdinujiny                        0x000055733bbee3b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013809
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n  // TODO: implement this method\n  let stringLength = ((decimal\
    \ - 1).bitWidth) + 2\n  let binaryString = String(decimal, radix: 2, uppercase:\
    \ false)\n  let formattedString = \"db\" + binaryString + \"db\"\n  let spaces\
    \ = stringLength - formattedString.count\n  return formattedString + (0..<spaces).map({\
    \ _ in \" \" }).joined()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(decimal_to_binary(decimal:\
    \ 0) == \"db0db\")\nassert(decimal_to_binary(decimal: 32) == \"db100000db\")\n\
    assert(decimal_to_binary(decimal: 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal:\
    \ 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpi2vwrrr_/tmpi2vwrrr_.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab96cde7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab96cadeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab96cade988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab96cadd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi2vwrrr_                        0x00005619cf7fc792 <unavailable> + 6034

    5    libc.so.6                          0x00002ab96cfd3460 __libc_start_main +
    245

    6    tmpi2vwrrr_                        0x00005619cf7fc3f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1660013809
- exit_code: 0
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n  // TODO: your function here.\n  let binary = String(decimal,\
    \ radix: 2)\n  return \"db\\(binary)db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013809
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"\"\n    var dec = decimal\n    while dec\
    \ > 0 {\n        binary = String(dec % 2) + binary\n        dec /= 2\n    }\n\
    \    return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpjbbgc9lh/tmpjbbgc9lh.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab42985bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab429552b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab429552988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab4295517b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjbbgc9lh                        0x0000564f126f0492 <unavailable> + 5266

    5    libc.so.6                          0x00002ab429a47460 __libc_start_main +
    245

    6    tmpjbbgc9lh                        0x0000564f126f00f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013643
- exit_code: 1
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var number = decimal\n    var binary = \"\"\n    let radix\
    \ = 2\n    while number > 0 {\n        binary = String(number % radix) + binary\n\
    \        number /= radix\n    }\n    let padding = \"0\"\n    let count = 8 -\
    \ binary.count\n    let zeros = padding.padding(toLength: count, withPad: \"0\"\
    , startingAt: 0)\n    return \"db\" + zeros + binary + \"db\"\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: SyntaxError
  stderr: "/tmp/tmpqa4v60er.swift:22:25: error: value of type 'String' has no member\
    \ 'padding'\n    let zeros = padding.padding(toLength: count, withPad: \"0\",\
    \ startingAt: 0)\n                ~~~~~~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013809
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    \n    var value = decimal\n    var binary = \"\"\n   \
    \ \n    while value > 0 {\n        let bit = value % 2\n        binary = \"\\\
    (bit)\" + binary\n        value /= 2\n    }\n    \n    return \"db\" + binary\
    \ + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(decimal_to_binary(decimal:\
    \ 0) == \"db0db\")\nassert(decimal_to_binary(decimal: 32) == \"db100000db\")\n\
    assert(decimal_to_binary(decimal: 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal:\
    \ 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpi1onnuk8/tmpi1onnuk8.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab84fc70c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab84f967b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab84f967988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab84f9667b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi1onnuk8                        0x000056525dfd3622 <unavailable> + 5666

    5    libc.so.6                          0x00002ab84fe5c460 __libc_start_main +
    245

    6    tmpi1onnuk8                        0x000056525dfd3289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660013809
- exit_code: 1
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"\"\n    var num = decimal\n    while num\
    \ > 0 {\n        let bit = num % 2\n        binary.append(String(bit))\n     \
    \   num /= 2\n    }\n    binary.append(\"db\")\n    return binary.reversed()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\n\
    assert(decimal_to_binary(decimal: 32) == \"db100000db\")\nassert(decimal_to_binary(decimal:\
    \ 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal: 15) == \"db1111db\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp558xoj_7.swift:21:19: error: no 'reversed' candidates produce the\
    \ expected contextual result type 'String'\n    return binary.reversed()\n   \
    \               ^\nSwift.Sequence:2:40: note: 'reversed()' produces '[String.Element]'\
    \ (aka 'Array<Character>'), not the expected contextual result type 'String'\n\
    \    @inlinable public __consuming func reversed() -> [Self.Element]\n       \
    \                                ^\nSwift.BidirectionalCollection:2:40: note:\
    \ 'reversed()' produces 'ReversedCollection<String>', not the expected contextual\
    \ result type 'String'\n    @inlinable public __consuming func reversed() -> ReversedCollection<Self>\n\
    \                                       ^\n"
  stdout: ''
  timestamp: 1660013809
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    let binary = String(decimal, radix: 2)\n    let length\
    \ = binary.count\n    let zero_count = 7 - length\n    var binary_string = \"\"\
    \n    for _ in 0..<zero_count {\n        binary_string.append(\"0\")\n    }\n\
    \    binary_string.append(binary)\n    return \"db\\(binary_string)db\"\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\n\
    assert(decimal_to_binary(decimal: 32) == \"db100000db\")\nassert(decimal_to_binary(decimal:\
    \ 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal: 15) == \"db1111db\"\
    )"
  status: Exception
  stderr: 'tmpk5acyd5e/tmpk5acyd5e.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b55c79e9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b55c76e0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b55c76e0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b55c76df7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk5acyd5e                        0x000055e6390b58b2 <unavailable> + 6322

    5    libc.so.6                          0x00002b55c7bd5460 __libc_start_main +
    245

    6    tmpk5acyd5e                        0x000055e6390b5519 <unavailable> + 5401

    '
  stdout: ''
  timestamp: 1660013809
- exit_code: 0
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    let binary = String(decimal, radix: 2)\n    return \"\
    db\\(binary)db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(decimal_to_binary(decimal:\
    \ 0) == \"db0db\")\nassert(decimal_to_binary(decimal: 32) == \"db100000db\")\n\
    assert(decimal_to_binary(decimal: 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal:\
    \ 15) == \"db1111db\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013726
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binaryString = \"db\"\n    var tempDecimal = decimal\n\
    \    repeat {\n        if tempDecimal%2 == 0 {\n            binaryString = \"\
    0\" + binaryString\n        } else {\n            binaryString = \"1\" + binaryString\n\
    \        }\n        tempDecimal = tempDecimal/2\n    } while tempDecimal != 0\n\
    \    binaryString += \"db\"\n    return binaryString\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmphs9ev6bn/tmphs9ev6bn.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9c842c3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9c83fbab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9c83fba988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9c83fb97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphs9ev6bn                        0x000055721ecf1422 <unavailable> + 5154

    5    libc.so.6                          0x00002b9c844af460 __libc_start_main +
    245

    6    tmphs9ev6bn                        0x000055721ecf1089 <unavailable> + 4233

    '
  stdout: ''
  timestamp: 1660013809
- exit_code: 1
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"\"\n    for _ in 0...6 {\n        binary\
    \ = \"\\(decimal % 2)\" + binary\n        decimal /= 2\n    }\n    return \"db\"\
    \ + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(decimal_to_binary(decimal:\
    \ 0) == \"db0db\")\nassert(decimal_to_binary(decimal: 32) == \"db100000db\")\n\
    assert(decimal_to_binary(decimal: 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal:\
    \ 15) == \"db1111db\")"
  status: SyntaxError
  stderr: "/tmp/tmp49w44uj0.swift:16:17: error: left side of mutating operator isn't\
    \ mutable: 'decimal' is a 'let' constant\n        decimal /= 2\n        ~~~~~~~\
    \ ^\n"
  stdout: ''
  timestamp: 1660013809
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    return \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpys9jwszd/tmpys9jwszd.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adc62585c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adc6227cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adc6227c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adc6227b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpys9jwszd                        0x0000555ea11cd2e2 <unavailable> + 4834

    5    libc.so.6                          0x00002adc62771460 __libc_start_main +
    245

    6    tmpys9jwszd                        0x0000555ea11ccf49 <unavailable> + 3913

    '
  stdout: ''
  timestamp: 1660013808
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var result = \"\"\n    var num = decimal\n    while num\
    \ != 0 {\n        result = String(num % 2) + result\n        num /= 2\n    }\n\
    \    return \"db\" + result + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmp_uan2jhf/tmp_uan2jhf.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b081c251c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b081bf48b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b081bf48988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b081bf477b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_uan2jhf                        0x000055fa4cda4492 <unavailable> + 5266

    5    libc.so.6                          0x00002b081c43d460 __libc_start_main +
    245

    6    tmp_uan2jhf                        0x000055fa4cda40f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013809
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var bin = \"\"\n    var idx = decimal\n    while idx >\
    \ 0 {\n        bin = (idx % 2 == 0 ? \"0\" : \"1\") + bin\n        idx /= 2\n\
    \    }\n    return \"db\" + bin + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpwix7gmas/tmpwix7gmas.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b182d0b5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b182cdacb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b182cdac988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b182cdab7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwix7gmas                        0x00005584150de3c2 <unavailable> + 5058

    5    libc.so.6                          0x00002b182d2a1460 __libc_start_main +
    245

    6    tmpwix7gmas                        0x00005584150de029 <unavailable> + 4137

    '
  stdout: ''
  timestamp: 1660013809
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binaryString = \"\"\n    var decimal = decimal\n \
    \   while decimal != 0 {\n        binaryString.append(\"\\(decimal % 2)\")\n \
    \       decimal /= 2\n    }\n    return \"db\\(String(binaryString.reversed()))db\"\
    \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\n\
    assert(decimal_to_binary(decimal: 32) == \"db100000db\")\nassert(decimal_to_binary(decimal:\
    \ 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal: 15) == \"db1111db\"\
    )"
  status: Exception
  stderr: 'tmpu7pi2fwd/tmpu7pi2fwd.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b32dcf1dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b32dcc14b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b32dcc14988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b32dcc137b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu7pi2fwd                        0x000055914eb5d952 <unavailable> + 6482

    5    libc.so.6                          0x00002b32dd109460 __libc_start_main +
    245

    6    tmpu7pi2fwd                        0x000055914eb5d5b9 <unavailable> + 5561

    '
  stdout: ''
  timestamp: 1660013809
- exit_code: 1
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"\"\n    while decimal > 0 {\n        binary\
    \ = String(decimal % 2) + binary\n        decimal /= 2\n    }\n    return \"db\"\
    \ + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(decimal_to_binary(decimal:\
    \ 0) == \"db0db\")\nassert(decimal_to_binary(decimal: 32) == \"db100000db\")\n\
    assert(decimal_to_binary(decimal: 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal:\
    \ 15) == \"db1111db\")"
  status: SyntaxError
  stderr: "/tmp/tmpf8gksxny.swift:16:17: error: left side of mutating operator isn't\
    \ mutable: 'decimal' is a 'let' constant\n        decimal /= 2\n        ~~~~~~~\
    \ ^\n"
  stdout: ''
  timestamp: 1660013809
- exit_code: 0
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binaryString = \"\"\n    var remainder = 0\n    var\
    \ quotient = decimal\n    repeat {\n        remainder = quotient % 2\n       \
    \ quotient = quotient / 2\n        binaryString = String(remainder) + binaryString\n\
    \    } while quotient != 0\n    return \"db\" + binaryString + \"db\"\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\n\
    assert(decimal_to_binary(decimal: 32) == \"db100000db\")\nassert(decimal_to_binary(decimal:\
    \ 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal: 15) == \"db1111db\"\
    )"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013809
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    if decimal < 2 {\n        return \"db0\\(decimal)db\"\n\
    \    }\n    var num = decimal\n    var result = \"\"\n    while num > 0 {\n  \
    \      result.append(\"\\(num % 2)\")\n        num /= 2\n    }\n    return \"\
    db\\(String(result.reversed()))db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpi877phta/tmpi877phta.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba82704ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba826d41b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba826d41988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba826d407b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi877phta                        0x000055f979be8952 <unavailable> + 6482

    5    libc.so.6                          0x00002ba827236460 __libc_start_main +
    245

    6    tmpi877phta                        0x000055f979be85b9 <unavailable> + 5561

    '
  stdout: ''
  timestamp: 1660013809
- exit_code: 0
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    //return \"db\" + String(decimal, radix: 2) + \"db\"\n\
    \    return \"db\" + String(decimal, radix: 2, uppercase: false) + \"db\"\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\n\
    assert(decimal_to_binary(decimal: 32) == \"db100000db\")\nassert(decimal_to_binary(decimal:\
    \ 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal: 15) == \"db1111db\"\
    )"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013809
- exit_code: 0
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    return \"db\" + String(decimal, radix: 2) + \"db\"\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\n\
    assert(decimal_to_binary(decimal: 32) == \"db100000db\")\nassert(decimal_to_binary(decimal:\
    \ 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal: 15) == \"db1111db\"\
    )"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var result = \"db\"\n    var remainder = decimal\n   \
    \ var divisor = 2\n    while remainder > 0 {\n        result.append(\"\\(remainder\
    \ % divisor)\")\n        remainder /= divisor\n    }\n    result.append(\"db\"\
    )\n    return String(result.reversed())\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmplojiceku/tmplojiceku.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b702530fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7025006b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7025006988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b70250057b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplojiceku                        0x000055e1340c2802 <unavailable> + 6146

    5    libc.so.6                          0x00002b70254fb460 __libc_start_main +
    245

    6    tmplojiceku                        0x000055e1340c2469 <unavailable> + 5225

    '
  stdout: ''
  timestamp: 1660013809
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    fatalError(\"not implemented\")\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmp3zjec_ps/tmp3zjec_ps.swift:13: Fatal error: not implemented

    Current stack trace:

    0    libswiftCore.so                    0x00002abae56c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abae53b9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abae53b9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abae53b87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3zjec_ps                        0x000056169817d62c <unavailable> + 5676

    5    tmp3zjec_ps                        0x000056169817d22a <unavailable> + 4650

    6    libc.so.6                          0x00002abae58ae460 __libc_start_main +
    245

    7    tmp3zjec_ps                        0x000056169817cf49 <unavailable> + 3913

    '
  stdout: ''
  timestamp: 1660013809
- exit_code: 1
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    return decimal_to_binary(decimal: decimal, base: 2)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\n\
    assert(decimal_to_binary(decimal: 32) == \"db100000db\")\nassert(decimal_to_binary(decimal:\
    \ 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal: 15) == \"db1111db\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpm2hqewqw.swift:13:54: error: extra argument 'base' in call\n  \
    \  return decimal_to_binary(decimal: decimal, base: 2)\n                     \
    \       ~~~~~~~~~~~~~~~~~~~~~~~~~^~\n"
  stdout: ''
  timestamp: 1660013809
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    return String(decimal, radix: 2)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmp7kalm75r/tmp7kalm75r.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5feb8c1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5feb5b8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5feb5b8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5feb5b77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7kalm75r                        0x000055ff8055a382 <unavailable> + 4994

    5    libc.so.6                          0x00002b5febaad460 __libc_start_main +
    245

    6    tmp7kalm75r                        0x000055ff80559fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660013808
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var result = \"db\"\n    var  num = decimal\n    while\
    \ num > 0 {\n        result.append(contentsOf: String(num % 2))\n        num /=\
    \ 2\n    }\n    result += \"db\"\n    return String(result.reversed())\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\n\
    assert(decimal_to_binary(decimal: 32) == \"db100000db\")\nassert(decimal_to_binary(decimal:\
    \ 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal: 15) == \"db1111db\"\
    )"
  status: Exception
  stderr: 'tmp6g89j53m/tmp6g89j53m.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b51083ddc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b51080d4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b51080d4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b51080d37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6g89j53m                        0x000055615bd466d2 <unavailable> + 5842

    5    libc.so.6                          0x00002b51085c9460 __libc_start_main +
    245

    6    tmp6g89j53m                        0x000055615bd46339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1660013809
- exit_code: 0
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    return \"db\\(String(decimal, radix: 2))db\"\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\n\
    assert(decimal_to_binary(decimal: 32) == \"db100000db\")\nassert(decimal_to_binary(decimal:\
    \ 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal: 15) == \"db1111db\"\
    )"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013642
- exit_code: 0
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    /// Decimal to binary (with a mark)\n    /// - Parameter\
    \ value: Decimal number\n    /// - Returns: A binary code in a string format with\
    \ a mark\n    func decToBin(value: Int) -> String {\n        return \"db\" + String(value,\
    \ radix: 2) + \"db\"\n    }\n    return decToBin(value: decimal)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\n\
    assert(decimal_to_binary(decimal: 32) == \"db100000db\")\nassert(decimal_to_binary(decimal:\
    \ 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal: 15) == \"db1111db\"\
    )"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013809
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    // Put your code here.\n    return \"\"\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmppj1qsu9b/tmppj1qsu9b.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b62620ffc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6261df6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6261df6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6261df57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppj1qsu9b                        0x0000557c7f0df2e2 <unavailable> + 4834

    5    libc.so.6                          0x00002b62622eb460 __libc_start_main +
    245

    6    tmppj1qsu9b                        0x0000557c7f0def49 <unavailable> + 3913

    '
  stdout: ''
  timestamp: 1660013809
- exit_code: 0
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    let binary = String(decimal, radix: 2)\n    return \"\
    db\\(binary)db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(decimal_to_binary(decimal:\
    \ 0) == \"db0db\")\nassert(decimal_to_binary(decimal: 32) == \"db100000db\")\n\
    assert(decimal_to_binary(decimal: 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal:\
    \ 15) == \"db1111db\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013726
