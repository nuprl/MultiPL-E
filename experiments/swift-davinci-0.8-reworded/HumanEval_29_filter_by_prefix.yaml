name: HumanEval_29_filter_by_prefix
language: swift
prompt: "\n/// Filter an input array of strings only for ones that start with a given\
  \ prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"a\")\n///\
  \ [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\", \"cde\",\
  \ \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings:\
  \ [String], prefix: String) -> [String] {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(filter_by_prefix(strings: [] as [String],\
  \ prefix: \"john\") == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\"\
  , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"\
  xxx\", \"xxxAAA\", \"xxx\"])"
completions: ["    return strings.filter {\n        (string: String) -> Bool in\n\
    \        return string.hasPrefix(prefix)\n    }", "    return strings.filter {\n\
    \        $0.hasPrefix(prefix)\n    }", "    var result: [String] = []\n    for\
    \ string in strings {\n        if string.hasPrefix(prefix) {\n            result.append(string)\n\
    \        }\n    }\n    return result", '    return strings.filter { $0.hasPrefix(prefix)
    }', '    return strings.filter({ $0.starts(with: prefix) })', '    return strings.filter
    { $0.hasPrefix(prefix) }', '    return strings.filter { $0.hasPrefix(prefix) }',
  "    let filtered = strings.filter {\n        (string: String) -> Bool in\n    \
    \    return string.hasPrefix(prefix)\n    }\n    return filtered", "    var filter_helper:\
    \ [String] = []\n    for string in strings {\n        if string.prefix(prefix.count)\
    \ == prefix {\n            filter_helper.append(string)\n        }\n    }\n  \
    \  return filter_helper", "    var result = [String]()\n    for string in strings\
    \ {\n        if string.hasPrefix(prefix) {\n            result.append(string)\n\
    \        }\n    }\n    return result", "    var filtered_strings = [String]()\n\
    \    for word in strings {\n        if word.starts(with: prefix) {\n         \
    \   filtered_strings.append(word)\n        }\n    }\n    return filtered_strings",
  "    var result = [String]()\n    for string in strings {\n        if string.hasPrefix(prefix)\
    \ {\n            result.append(string)\n        }\n    }\n    return result",
  '    return strings.filter({$0.hasPrefix(prefix)})', '    return strings.filter({
    $0.hasPrefix(prefix) })', '    return strings.filter { $0.hasPrefix(prefix) }',
  '    return strings.filter {$0.hasPrefix(prefix)}', '    return strings.filter {
    $0.starts(with: prefix) }', '    return strings.filter { $0.hasPrefix(prefix)
    }', '    return strings.filter { $0.hasPrefix(prefix) }', "    var filtered_by_prefix\
    \ = [String]()\n    for string in strings {\n        if string.hasPrefix(prefix)\
    \ {\n            filtered_by_prefix.append(string)\n        }\n    }\n    return\
    \ filtered_by_prefix", "    var results = [String]()\n    for string in strings\
    \ {\n        if string.hasPrefix(prefix) {\n            results.append(string)\n\
    \        }\n    }\n    return results", "    var result = [String]()\n    for\
    \ str in strings {\n        if str.hasPrefix(prefix) {\n            result.append(str)\n\
    \        }\n    }\n    return result", '    return filter(strings, { string in
    starts_with(string, prefix) })', "    return strings.filter {\n        $0.hasPrefix(prefix)\n\
    \    }", "    return strings.filter { (word) -> Bool in\n        return word.hasPrefix(prefix)\n\
    \    }", "    var result: [String] = []\n    for s in strings {\n        if s.hasPrefix(prefix)\
    \ {\n            result.append(s)\n        }\n    }\n    return result", "   \
    \ var result = [String]()\n    for str in strings {\n        if str.hasPrefix(prefix)\
    \ {\n            result.append(str)\n        }\n    }\n    return result", " \
    \   let filteredStrings = strings.filter { $0.hasPrefix(prefix) }\n    return\
    \ filteredStrings", "    let lowercase_prefix = prefix.lowercased()\n    let filtered\
    \ = strings.filter { (string) -> Bool in\n        return string.lowercased().hasPrefix(lowercase_prefix)\n\
    \    }\n    return filtered", "    var filtered_strings = [String]()\n    for\
    \ string in strings {\n        if string.hasPrefix(prefix) {\n            filtered_strings.append(string)\n\
    \        }\n    }\n    return filtered_strings", '    strings.filter { $0.hasPrefix(prefix)
    }', "    var ret: [String] = []\n    for s in strings {\n        if (s.hasPrefix(prefix))\
    \ {\n            ret.append(s)\n        }\n    }\n    return ret", "    return\
    \ strings.filter({ (str: String) -> Bool in\n        return str.hasPrefix(prefix)\n\
    \    })", "    var filtered = [String]()\n    for string in strings {\n      \
    \  if string.hasPrefix(prefix) {\n            filtered.append(string)\n      \
    \  }\n    }\n    return filtered", '    return strings.filter { $0.hasPrefix(prefix)
    }', '    return strings.filter({$0.hasPrefix(prefix)})', '  return strings.filter({$0.hasPrefix(prefix)})',
  "    var ret = [String]()\n    for str in strings {\n        if str.start_with(prefix)\
    \ {\n            ret.append(str)\n        }\n    }\n    return ret", "    let\
    \ s = prefix.lowercased()\n    return strings.filter { $0.lowercased().hasPrefix(s)\
    \ }", '    return strings.filter { s in return s.hasPrefix(prefix) }', '    return
    strings.filter { $0.hasPrefix(prefix) }', '    return strings.filter({$0.hasPrefix(prefix)})',
  "    var result: [String] = []\n    for string in strings {\n        if string.hasPrefix(prefix)\
    \ {\n            result.append(string)\n        }\n    }\n    return result",
  "    var array = [String]()\n    for string in strings {\n        if string.hasPrefix(prefix)\
    \ {\n            array.append(string)\n        }\n    }\n    return array", " \
    \   var result = [String]()\n    for string in strings {\n        if string.hasPrefix(prefix)\
    \ {\n            result.append(string)\n        }\n    }\n    return result",
  "    return strings.filter({ (s: String) -> Bool in\n        s.starts(with: prefix)\n\
    \    })", '    return strings.filter { $0.hasPrefix(prefix) }', '    return strings.filter{$0.hasPrefix(prefix)}',
  '    return strings.filter {string in string.hasPrefix(prefix)}', "    var matches\
    \ = [String]()\n    for string in strings {\n        if string.hasPrefix(prefix)\
    \ {\n            matches.append(string)\n        }\n    }\n    return matches",
  '    return strings.filter {$0.hasPrefix(prefix)}', "    var result = [String]()\n\
    \    for s in strings {\n        if (s.hasPrefix(prefix)) {\n            result.append(s)\n\
    \        }\n    }\n    return result", "    var result: [String] = []\n    for\
    \ string in strings {\n        if string.hasPrefix(prefix) {\n            result.append(string)\n\
    \        }\n    }\n    return result", "    var filtered = [String]()\n    for\
    \ s in strings {\n        if s.hasPrefix(prefix) {\n            filtered.append(s)\n\
    \        }\n    }\n    return filtered", "    var filtered_strings = [String]()\n\
    \    for string in strings {\n        if string.hasPrefix(prefix) {\n        \
    \    filtered_strings.append(string)\n        }\n    }\n    return filtered_strings",
  "    let filtered = strings.filter { $0.hasPrefix(prefix) }\n    return filtered",
  "    var result = [String]()\n    for string in strings {\n        if string.hasPrefix(prefix)\
    \ {\n            result.append(string)\n        }\n    }\n    return result",
  '    return strings.filter { $0.hasPrefix(prefix) }', "  strings.filter({ (str:\
    \ String) -> Bool in\n    let i = str.index(str.startIndex, offsetBy: prefix.count)\n\
    \    return str.substring(to: i) == prefix\n  })", '    strings.filter { $0.hasPrefix(prefix)
    }', '    return strings.filter {$0.starts(with: prefix)}', '    return strings.filter
    { $0.hasPrefix(prefix) }', '  return strings.filter { $0.hasPrefix(prefix) }',
  "    strings.filter({\n        $0.hasPrefix(prefix)\n    })", '    return strings.filter
    { string in string.starts(with: prefix) }', '    return strings.filter({$0.hasPrefix(prefix)})',
  "    var result = [String]()\n    for string in strings {\n        if string.hasPrefix(prefix)\
    \ {\n            result.append(string)\n        }\n    }\n    return result",
  '    return strings.filter{ $0.hasPrefix(prefix) }', "    var filtered = [String]()\n\
    \    for string in strings {\n        if string.hasPrefix(prefix) {\n        \
    \    filtered.append(string)\n        }\n    }\n    return filtered", "    return\
    \ strings.filter { (s: String) -> Bool in\n        return s.hasPrefix(prefix)\n\
    \    }", "    return strings.filter { (string) -> Bool in\n        string.hasPrefix(prefix)\n\
    \    }", '    return strings.filter { $0.hasPrefix(prefix) }', '    return strings.filter{$0.hasPrefix(prefix)}',
  '    return strings.filter { $0.startsWith(prefix) }', "    let filtered = strings.filter\
    \ { s in s.hasPrefix(prefix) }\n    return filtered", "    var result = [String]()\n\
    \    for str in strings {\n        if str.hasPrefix(prefix) {\n            result.append(str)\n\
    \        }\n    }\n    return result", "    var result = [String]()\n    for item\
    \ in strings {\n        if item.hasPrefix(prefix) {\n            result.append(item)\n\
    \        }\n    }\n    return result", "    var result = [String]()\n    for i\
    \ in strings {\n        if i.hasPrefix(prefix) {\n            result.append(i)\n\
    \        }\n    }\n    return result", "    var filtered: [String] = []\n    for\
    \ string in strings {\n        if string.hasPrefix(prefix) {\n            filtered.append(string)\n\
    \        }\n    }\n    return filtered", "    var filtered: [String] = []\n  \
    \  for string in strings {\n        if string.hasPrefix(prefix) {\n          \
    \  filtered.append(string)\n        }\n    }\n    return filtered", '    return
    strings.filter({ $0.hasPrefix(prefix) })', "    var filter_strings = [String]()\n\
    \    for string in strings {\n        if string.hasPrefix(prefix) {\n        \
    \    filter_strings.append(string)\n        }\n    }\n    return filter_strings",
  '    return strings.filter({ $0.hasPrefix(prefix) })', "    return strings.filter\
    \ { (word) -> Bool in\n        word.hasPrefix(prefix)\n    }", '    return strings.filter
    { $0.hasPrefix(prefix) }', "    var filteredStrings = [String]()\n    for item\
    \ in strings {\n        if item.hasPrefix(prefix) {\n            filteredStrings.append(item)\n\
    \        }\n    }\n    return filteredStrings", '    return strings.filter({ $0.hasPrefix(prefix)
    })', '    return strings.filter { $0.hasPrefix(prefix) }', "    var result = [String]()\n\
    \    for string in strings {\n        if string.hasPrefix(prefix) {\n        \
    \    result.append(string)\n        }\n    }\n    return result", '  return strings.filter
    {$0.hasPrefix(prefix)}', "    return strings.filter {\n        (string: String)\
    \ -> Bool in\n        return string.hasPrefix(prefix)\n    }", "  var ret = [String]()\n\
    \  for s in strings {\n    if s.hasPrefix(prefix) {\n      ret.append(s)\n   \
    \ }\n  }\n  return ret", '    return strings.filter({$0.hasPrefix(prefix)})',
  '    return strings.filter { $0.hasPrefix(prefix) }', "  let result = strings.filter\
    \ { $0.hasPrefix(prefix) }\n  return result", "    return strings.filter({ (s:\
    \ String) -> Bool in\n        return s.hasPrefix(prefix)\n    })", '    return
    strings.filter { $0.hasPrefix(prefix) }', '    return strings.filter { string
    in string.hasPrefix(prefix) }', "    return filter(strings) { s in\n        return\
    \ s.hasPrefix(prefix)\n    }", '    return strings.filter { $0.hasPrefix(prefix)
    }', '    return strings.filter { string in string.hasPrefix(prefix) }', "    return\
    \ strings.filter { string in\n        return string.hasPrefix(prefix)\n    }",
  '    return filter(strings, { string in return has_prefix(string, prefix) })', " \
    \   return strings.filter({ (string: String) -> Bool in\n        if string.hasPrefix(prefix)\
    \ {\n            return true\n        }\n        return false\n    })", '    return
    strings.filter { $0.hasPrefix(prefix) }', "    var filtered_strings = [String]()\n\
    \    for s in strings {\n        if (s.hasPrefix(prefix)) {\n            filtered_strings.append(s)\n\
    \        }\n    }\n    return filtered_strings", '    return strings.filter {
    $0.hasPrefix(prefix) }', '    return strings.filter { (str: String) -> Bool in
    str.hasPrefix(prefix) }', "  var result = [String]()\n  for string in strings\
    \ {\n    if string.hasPrefix(prefix) {\n      result.append(string)\n    }\n \
    \ }\n  return result", "    let filtered = strings.filter { item in\n        item.starts(with:\
    \ prefix)\n    }\n    return filtered", '    return filter(strings) { string in
    string.starts_with(prefix) }', "    var filtered: [String] = []\n    for string\
    \ in strings {\n        if string.hasPrefix(prefix) {\n            filtered.append(string)\n\
    \        }\n    }\n    return filtered", "    var new_array: [String] = []\n \
    \   for item in strings {\n        if item.hasPrefix(prefix) {\n            new_array.append(item)\n\
    \        }\n    }\n    return new_array", '    return strings.filter({ $0.hasPrefix(prefix)
    })', '    strings.filter { $0.hasPrefix(prefix) }', '    return strings.filter{
    $0.prefix(prefix.count) == prefix }', "    let filtered = strings.filter { $0.hasPrefix(prefix)\
    \ }\n    return filtered", '    return strings.filter { s in s.hasPrefix(prefix)
    }', '    return strings.filter { $0.starts(with: prefix) }', '    return strings.filter
    { $0.hasPrefix(prefix) }', '    return strings.filter({$0.hasPrefix(prefix)})',
  "    let result = strings.filter { (s: String) -> Bool in\n        s.hasPrefix(prefix)\n\
    \    }\n    return result", '    return strings.filter { $0.hasPrefix(prefix)
    }', "    return filter(strings, {(a: String) -> Bool in \n        return a.hasPrefix(prefix)\n\
    \    })", '  return strings.filter { $0.hasPrefix(prefix) }', '    return strings.filter
    { $0.hasPrefix(prefix) }', "    return strings.filter{ (s: String) -> Bool in\n\
    \        return s.hasPrefix(prefix)\n    }", '    return strings.filter { $0.hasPrefix(prefix)
    }', "    let result = strings.filter { $0.hasPrefix(prefix) }\n    return result",
  "    var filtered: [String] = []\n    for (index, word) in strings.enumerated()\
    \ {\n        let first_letter = word.first\n        if first_letter == prefix.first\
    \ {\n            filtered.append(word)\n        }\n    }\n    return filtered",
  "    let empty_filter: (String) -> Bool = {(s: String) -> Bool in\n        return\
    \ true\n    }\n    let starts_with: (String) -> Bool = {(s: String) -> Bool in\n\
    \        return s.hasPrefix(prefix)\n    }\n    return strings.filter(starts_with)",
  "    var result = [String]()\n    for string in strings {\n        if string.hasPrefix(prefix)\
    \ {\n            result.append(string)\n        }\n    }\n    return result",
  "    var res = [String]()\n    for string in strings {\n        if string.hasPrefix(prefix)\
    \ {\n            res.append(string)\n        }\n    }\n    return res", "    var\
    \ filtered_strings = [String]()\n    for string in strings {\n        if string.hasPrefix(prefix)\
    \ {\n            filtered_strings.append(string)\n        }\n    }\n    return\
    \ filtered_strings", "    var new_array: [String] = []\n    for string in strings\
    \ {\n        if string.hasPrefix(prefix) {\n            new_array.append(string)\n\
    \        }\n    }\n    return new_array", "    return strings.filter{\n      \
    \  $0.hasPrefix(prefix)\n    }", "    return strings.filter { s in\n        return\
    \ s.hasPrefix(prefix)\n    }", '    return strings.filter({ $0.prefix(prefix.count)
    == prefix })', "    let result = strings.filter {\n        $0.hasPrefix(prefix)\n\
    \    }\n    return result", "    return strings.filter { string in\n        return\
    \ string.hasPrefix(prefix)\n    }", "    return strings.filter({ (string: String)\
    \ -> Bool in\n        return string.hasPrefix(prefix)\n    })", "    return strings.filter{s\
    \ in\n        return s.prefix(prefix.count) == prefix\n    }", "    var retval\
    \ = [String]()\n    for s in strings {\n        if s.hasPrefix(prefix) {\n   \
    \         retval.append(s)\n        }\n    }\n    return retval", "    var result:\
    \ [String] = []\n    for s in strings {\n        if (s.hasPrefix(prefix)) {\n\
    \            result.append(s)\n        }\n    }\n    return result", '    return
    strings.filter { $0.hasPrefix(prefix) }', "    return strings.filter { (string:\
    \ String) -> Bool in\n        string.hasPrefix(prefix)\n    }", "    return strings.filter\
    \ { (string: String) -> Bool in\n        return string.hasPrefix(prefix)\n   \
    \ }", "    return strings.filter({\n        string in\n        return string.starts_with(prefix)\n\
    \    })", '    return strings.filter{$0.hasPrefix(prefix)}', "    var result:\
    \ [String] = []\n    for s in strings {\n        if s.hasPrefix(prefix) {\n  \
    \          result.append(s)\n        }\n    }\n    return result", "    var newStrings:\
    \ [String] = []\n    for string in strings {\n        if string.hasPrefix(prefix)\
    \ {\n            newStrings.append(string)\n        }\n    }\n    return newStrings",
  '    return strings.filter{ $0.hasPrefix(prefix) }', "    strings.filter({ (str:\
    \ String) -> Bool in\n        str.hasPrefix(prefix)\n    })", '    return strings.filter
    { $0.hasPrefix(prefix) }', '    return strings.filter { (prefix == $0.prefix(prefix.count))
    }', "    let filtered = filter(strings, { (element: String) -> Bool in\n     \
    \   return element.hasPrefix(prefix)\n    })\n    return filtered", "    var result\
    \ = [String]()\n    for item in strings {\n        if item.hasPrefix(prefix) {\n\
    \            result.append(item)\n        }\n    }\n    return result", "    return\
    \ strings.filter { (string: String) -> Bool in\n        return string.hasPrefix(prefix)\n\
    \    }", '    strings.filter { $0.starts(with: prefix) }', "    return strings.filter\
    \ { (a_string: String) -> Bool in\n        let prefix_test: Bool =\n         \
    \   a_string.prefix(1) == prefix\n        return prefix_test\n    }", "    var\
    \ ret = [String]()\n    for s in strings {\n        if s.hasPrefix(prefix) {\n\
    \            ret.append(s)\n        }\n    }\n    return ret", "    var result:\
    \ [String] = []\n    for s in strings {\n        if s.hasPrefix(prefix) {\n  \
    \          result.append(s)\n        }\n    }\n    return result", '    return
    strings.filter { $0.hasPrefix(prefix) }', '    return strings.filter { $0.hasPrefix(prefix)
    }', "    return strings.filter({\n        return (prefix.characters.count > 0\
    \ && $0.hasPrefix(prefix))\n    })", '    return strings.filter { $0.hasPrefix(prefix)
    }', '    strings.filter { $0.hasPrefix(prefix) }', '    return strings.filter({
    $0.hasPrefix(prefix) })', '    return strings.filter { $0.hasPrefix(prefix) }',
  "    // TODO: Write a filter that returns an array of strings that start with the\
    \ given prefix\n    return strings.filter{$0.hasPrefix(prefix)}\n    ", '    return
    strings.filter { $0.hasPrefix(prefix) }', "    var filteredStrings = [String]()\n\
    \    for string in strings {\n        if string.hasPrefix(prefix) {\n        \
    \    filteredStrings.append(string)\n        }\n    }\n    return filteredStrings",
  "  var array = [String]()\n  for string in strings {\n    if string.hasPrefix(prefix)\
    \ {\n      array.append(string)\n    }\n  }\n  return array", "    var result:\
    \ [String] = []\n    for string in strings {\n        if string.hasPrefix(prefix)\
    \ {\n            result.append(string)\n        }\n    }\n    return result",
  "    return strings.filter {\n        (string: String) -> Bool in\n        string.hasPrefix(prefix)\n\
    \    }", '    return strings.filter { $0.hasPrefix(prefix) }', "  var result =\
    \ [String]()\n  for each in strings {\n    if each.starts(with: prefix) {\n  \
    \    result.append(each)\n    }\n  }\n  return result", '    return strings.filter
    { $0.hasPrefix(prefix) }', "    return strings.filter { (s: String) -> Bool in\n\
    \        return s.hasPrefix(prefix)\n    }", '    return strings.filter({ $0.hasPrefix(prefix)
    })', "    var filtered: [String] = []\n    for string in strings {\n        if\
    \ string.hasPrefix(prefix) {\n            filtered.append(string)\n        }\n\
    \    }\n    return filtered", "    return strings.filter {\n        $0.hasPrefix(prefix)\n\
    \    }", "    return strings.filter {\n        $0.hasPrefix(prefix)\n    }", '    return
    strings.filter({$0.hasPrefix(prefix)})', "    let prefix_length = prefix.length\n\
    \    var i = 0\n    while i < strings.length {\n        if strings[i].length <\
    \ prefix_length || !strings[i].starts_with(prefix) {\n            strings.remove_at(i)\n\
    \        } else {\n            i += 1\n        }\n    }\n    return strings",
  '    return strings.filter { $0.hasPrefix(prefix) }', '    return strings.filter
    { $0.hasPrefix(prefix) }', "    var matches: [String] = []\n    for string in\
    \ strings {\n        if string.hasPrefix(prefix) {\n            matches.append(string)\n\
    \        }\n    }\n    return matches", "  var result: [String] = []\n  for string\
    \ in strings {\n    if string.hasPrefix(prefix) {\n      result.append(string)\n\
    \    }\n  }\n  return result", "  let result = strings.filter {\n    ($0 as NSString).hasPrefix(prefix)\n\
    \  }\n  return result", "    // strings.filter{ $0.hasPrefix(prefix) } // this\
    \ works too\n    var filtered = [String]()\n    for string in strings {\n    \
    \    if string.hasPrefix(prefix) {\n            filtered.append(string)\n    \
    \    }\n    }\n    return filtered", '    return strings.filter { $0.hasPrefix(prefix)
    }', "    var results: [String] = []\n    for string in strings {\n        if string.hasPrefix(prefix)\
    \ {\n            results.append(string)\n        }\n    }\n    return results",
  '    return strings.filter { $0.hasPrefix(prefix) }', '    return strings.filter
    { $0.hasPrefix(prefix) }', '    return strings.filter { $0.hasPrefix(prefix) }',
  '    strings.filter { return $0.hasPrefix(prefix) }', '  return strings.filter {
    (s: String) -> Bool in s.hasPrefix(prefix) }', "    let new_strings = strings.filter{\n\
    \        $0.prefix(prefix.count) == prefix\n    }\n    return new_strings", " \
    \   var filtered_strings = [String]()\n    for string in strings {\n        if\
    \ string.hasPrefix(prefix) {\n            filtered_strings.append(string)\n  \
    \      }\n    }\n    return filtered_strings"]
stop_tokens:
- "\n}"
