name: HumanEval_130_tri
language: swift
prompt: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
  \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
  \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1) =\
  \ 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n - 2)\
  \ + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2) = 2\n///\
  \ tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3 = 8 \n/// You\
  \ are given a non-negative integer number n, you have to a return an array of the\
  \ \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n/// >>>\
  \ tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n:\
  \ 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n:\
  \ 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
  assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2,\
  \ 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35,\
  \ 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
  \ 1) == [1, 3])"
completions: ["    // Write your code here\n    return []", "    var a: [Int] = [1,\
    \ 3, 2]\n    if n < 3 {\n        return [Int](a[0..<n + 1])\n    }\n    for i\
    \ in 3...n {\n        a.append(i % 2 == 0 ? a[i - 1] + i / 2 : a[i - 1] + a[i\
    \ - 2] + a[i - 3])\n    }\n    return a", "    guard n > 1 else { return [1, 3]\
    \ }\n    var result = [1, 3, 2]\n    for i in 3...n {\n        if i % 2 == 0 {\n\
    \            result.append(1 + i / 2)\n        } else {\n            result.append(result[i\
    \ - 1] + result[i - 2] + result[i + 1])\n        }\n    }\n    return result",
  "  if n == 0 {\n    return [0]\n  }\n  if n == 1 {\n    return [1, 3]\n  }\n  if\
    \ n == 2 {\n    return [1, 3, 2]\n  }\n  var result = [1, 3, 2]\n  var x = result[result.count\
    \ - 1]\n  var y = result[result.count - 2]\n  var z = result[result.count - 3]\n\
    \  for _ in 3...n {\n    result.append(x + y + z)\n    z = y\n    y = x\n    x\
    \ = result[result.count - 1]\n  }\n  return result", "    if n == 0 {\n      \
    \  return [1]\n    } else if n == 1 {\n        return [1, 3]\n    } else if n\
    \ == 2 {\n        return [1, 3, 2]\n    } else {\n        var all:[Int] = [1,\
    \ 3, 2]\n        for i in 3...n {\n            if i % 2 == 0 {\n             \
    \   all.append(1 + i / 2)\n            } else {\n                all.append(all[i\
    \ - 1] + all[i - 2] + all[i + 1])\n            }\n        }\n        return all\n\
    \    }", "    return [Int](0...n).map {\n        $0 == 0 ? 1 : tri(n: $0 - 1)\
    \ + tri(n: $0 - 2) + tri(n: $0 - 3)\n    }", "    guard n >= 0 else { return []\
    \ }\n    var result = [Int](repeating: 0, count: n + 1)\n    var i = 0\n    while\
    \ i <= n {\n        if i == 0 {\n            result[i] = 1\n        } else if\
    \ i == 1 {\n            result[i] = 3\n        } else if i == 2 {\n          \
    \  result[i] = 2\n        } else if i % 2 == 0 {\n            result[i] = i /\
    \ 2\n        } else {\n            result[i] = result[i - 1] + result[i - 2] +\
    \ result[i - 3]\n        }\n        i += 1\n    }\n    return result", "    guard\
    \ n > 0 else { return [] }\n    var results = [1, 3, 2]\n    for i in 3...n {\n\
    \        let num = i % 2 == 0 ? results[i - 1] + i / 2 : results[i - 1] + results[i\
    \ - 2] + results[i - 3]\n        results.append(num)\n    }\n    return results",
  "    var result = [Int]()\n    if n <= 0 {\n        return result\n    } else if\
    \ n <= 2 {\n        result = [1, 3]\n    } else {\n        result = [1, 3, 2]\n\
    \    }\n    var i = 3\n    while i <= n {\n        let triN = result[i - 1] +\
    \ result[i - 2] + result[i]\n        result.append(triN)\n        i += 1\n   \
    \ }\n    return result", "    if n < 0 {\n        return []\n    }\n    if n ==\
    \ 0 {\n        return [1]\n    }\n    return [1, 3, 2] + (3...n).map { index in\n\
    \        var n = [1, 3, 2]\n        if index % 2 == 0 {\n            return 1\
    \ + index / 2\n        }\n        let indexToReturn = index\n        for i in\
    \ 3...indexToReturn {\n            n.append(n[i - 1] + n[i - 2] + n[i - 3])\n\
    \        }\n        return n[indexToReturn]\n    }", "    var tri = [1, 3, 2]\n\
    \    while tri.count < n + 1 {\n        tri.append(tri[tri.count - 1] + tri[tri.count\
    \ - 2] + tri[tri.count - 3])\n    }\n    return tri", "    guard n > 0 else {\
    \ return [] }\n    var result = [Int](repeating: 0, count: n + 1)\n    result[0]\
    \ = 1\n    result[1] = 3\n    result[2] = 2\n    if n > 2 {\n        for i in\
    \ 3...n {\n            if i % 2 == 0 {\n                result[i] = 1 + i / 2\n\
    \            } else {\n                result[i] = result[i - 1] + result[i -\
    \ 2] + result[i + 1]\n            }\n        }\n    }\n    return result", " \
    \ guard n > 0 else { return [] }\n  guard n > 1 else { return [1, 3] }\n  guard\
    \ n > 2 else { return [1, 3, 2] }\n  var result = [1, 3, 2]\n  var i = 3\n  while\
    \ i <= n {\n    var next = 0\n    if i % 2 == 0 {\n      next = 1 + i / 2\n  \
    \  } else {\n      next = result[i - 1] + result[i - 2] + result[i + 1]\n    }\n\
    \    result.append(next)\n    i += 1\n  }\n  return result", "    var a = [1,\
    \ 3, 2]\n    if n == 0 {\n        return [1]\n    } else if n == 1 {\n       \
    \ return [1, 3]\n    } else if n == 2 {\n        return [1, 3, 2]\n    } else\
    \ {\n        for _ in 3...n {\n            let b = a[1] + a[2] + a[0]\n      \
    \      a.removeFirst()\n            a.append(b)\n        }\n        return a\n\
    \    }", '    return []', "    guard n > 0 else { return [] }\n    var result\
    \ = [1, 3, 2]\n    guard n > 2 else { return result }\n    for _ in 3...n {\n\
    \        result.append(result[result.count - 3] + result[result.count - 2] + result[result.count\
    \ - 1])\n    }\n    return result", "    guard n >= 0 else { return [] }\n   \
    \ if n == 0 { return [1] }\n    if n == 1 { return [1, 3] }\n    if n == 2 { return\
    \ [1, 3, 2] }\n    var result = [1, 3, 2]\n    while result.count <= n {\n   \
    \     let a = result[result.count - 3]\n        let b = result[result.count -\
    \ 2]\n        let c = result[result.count - 1]\n        result.append(a + b +\
    \ c)\n    }\n    return result", "    var current = 1\n    var first = 1\n   \
    \ var second = 3\n    var third = 2\n    var result = [Int]()\n    if n == 0 {\n\
    \        return result\n    }\n    result.append(current)\n    if n == 1 {\n \
    \       return result\n    }\n    result.append(second)\n    if n == 2 {\n   \
    \     return result\n    }\n    for _ in 2..<n {\n        current = first + second\
    \ + third\n        first = second\n        second = third\n        third = current\n\
    \        result.append(current)\n    }\n    return result", "    guard n > 0 else\
    \ { return [] }\n    var result = [1, 3, 2]\n    if n <= 3 { return Array(result[0...n])\
    \ }\n    result.reserveCapacity(n + 1)\n    for i in 4...n {\n        let next:\
    \ Int\n        if i % 2 == 0 {\n            next = 1 + i / 2\n        } else {\n\
    \            next = result[i - 1] + result[i - 2] + result[i - 3]\n        }\n\
    \        result.append(next)\n    }\n    return result", "    var result = [Int]()\n\
    \    if n > 0 {\n        result.append(1)\n    }\n    if n > 1 {\n        result.append(3)\n\
    \    }\n    if n > 2 {\n        result.append(2)\n    }\n    if n > 3 {\n    \
    \    for i in 3...n {\n            if i % 2 == 0 {\n                result.append(1\
    \ + i / 2)\n            } else {\n                result.append(result[i - 1]\
    \ + result[i - 2] + result[i - 3])\n            }\n        }\n    }\n    return\
    \ result", "    if n == 0 {\n        return [0]\n    }\n    if n == 1 {\n    \
    \    return [1, 3]\n    }\n    var result = [1, 3, 2]\n    var last = 2\n    var\
    \ count = 3\n    while count <= n {\n        let i = result[last] + result[last\
    \ - 1] + result[last - 2]\n        result.append(i)\n        last += 1\n     \
    \   count += 1\n    }\n    return result", "    let n = n + 1\n    var array =\
    \ [Int]()\n    guard n > 2 else {\n        array = [1, 3]\n        return array\n\
    \    }\n    array = [1, 3, 2]\n    for i in 3..<n {\n        let tri = array[i\
    \ - 1] + array[i - 2] + array[i - 3]\n        array.append(tri)\n    }\n    return\
    \ array", "  // your code here\n  if n == 0 {\n    return [1]\n  } else if n ==\
    \ 1 {\n    return [1, 3]\n  } else if n == 2 {\n    return [1, 3, 2]\n  } else\
    \ {\n    var sequence: [Int] = [1, 3, 2]\n    for i in 3...n {\n      sequence.append(sequence[i\
    \ - 1] + sequence[i - 2] + sequence[i - 3])\n    }\n    return sequence\n  }",
  "\tvar result = [1, 3, 2]\n\tguard n > 2 else {\n\t\treturn result\n\t}\n\t\n\t\
    var index = 3\n\tvar last = 2\n\tvar lastLast = 1\n\tvar lastLastLast = 3\n\t\
    while index <= n {\n\t\tresult.append(lastLastLast + lastLast + last)\n\t\t\n\t\
    \tlastLastLast = lastLast\n\t\tlastLast = last\n\t\tlast = result[index]\n\t\t\
    index += 1\n\t}\n\t\n\treturn result", "  guard n > 0 else { return [] }\n  var\
    \ result = [1, 3, 2]\n  if n == 1 { return [1] }\n  if n == 2 { return [1, 3]\
    \ }\n  if n == 3 { return result }\n  for _ in 4...n {\n    result.append(result[result.count\
    \ - 3] + result[result.count - 2] + result[result.count - 1])\n  }\n  return result",
  "    if n == 0 {\n        return [1]\n    }\n    if n == 1 {\n        return [1,\
    \ 3]\n    }\n    if n == 2 {\n        return [1, 3, 2]\n    }\n    var solution:\
    \ [Int] = [1, 3, 2]\n    var i = 4\n    while i <= n + 1 {\n        if i % 2 ==\
    \ 0 {\n            solution.append(1 + i / 2)\n        } else {\n            solution.append(solution[i\
    \ - 2] + solution[i - 3] + solution[i - 4])\n        }\n        i += 1\n    }\n\
    \    return solution", "    var result = [1, 3, 2]\n    guard n > 2 else { return\
    \ result }\n    for i in 3...n {\n        let sum = result[i - 1] + result[i -\
    \ 2] + result[i - 3]\n        result.append(sum)\n    }\n    return result", '    return
    []', "    if n < 1 {\n        return []\n    }\n    var tribo: [Int] = [1, 3,\
    \ 2]\n    if n == 1 {\n        return [1]\n    }\n    if n == 2 {\n        return\
    \ [1, 3]\n    }\n    if n == 3 {\n        return tribo\n    }\n    for i in 3...n\
    \ {\n        if i % 2 == 0 {\n            tribo.append(1 + i / 2)\n        } else\
    \ {\n            tribo.append(tribo[i - 1] + tribo[i - 2] + tribo[i + 1])\n  \
    \      }\n    }\n    return tribo", "  var res = [1, 3, 2]\n  if n <= 2 {\n  \
    \  return Array(res[0...n])\n  }\n  for i in 3...n {\n    let el = res[i - 1]\
    \ + res[i - 2] + res[i - 3]\n    res.append(el)\n  }\n  return res", "    let\
    \ result = (1...n).map {\n        $0 % 2 == 0 ? 1 + $0 / 2 :\n               \
    \       $0 / 2\n    }\n    return result", "    var sequence = [Int]()\n    for\
    \ i in 0...n {\n        if i == 0 {\n            sequence.append(1)\n        }\
    \ else if i == 1 {\n            sequence.append(3)\n        } else if i == 2 {\n\
    \            sequence.append(2)\n        } else if i % 2 == 0 {\n            sequence.append(1\
    \ + i / 2)\n        } else {\n            sequence.append(sequence[i - 1] + sequence[i\
    \ - 2] + sequence[i - 3])\n        }\n    }\n    return sequence", "    var arr\
    \ = [1, 3, 2]\n    for i in stride(from: 4, through: n, by: 1) {\n        if i\
    \ % 2 == 0 {\n            arr.append(1 + i / 2)\n        } else {\n          \
    \  arr.append(arr[i - 2] + arr[i - 1] + arr[i + 1])\n        }\n    }\n    return\
    \ arr", "\tguard n > 0 else { return [] }\n\tvar result = [1, 3, 2]\n\t\n\tfor\
    \ i in 3...n {\n\t\tresult.append(i.isMultiple(of: 2) ? 1 + i / 2 : result[i -\
    \ 2] + result[i - 1] + result[i + 1])\n\t}\n\t\n\treturn result", "    guard n\
    \ > 0 else { return [] }\n    var result = [1, 3, 2]\n    for i in 3...n {\n \
    \       let mod = i % 2\n        if mod == 0 {\n            result.append(1 +\
    \ i / 2)\n        } else {\n            result.append(result[i - 1] + result[i\
    \ - 2] + result[i + 1])\n        }\n    }\n    return result", '    return [1,
    3, 2, 8]', "    guard n > 0 else { return [] }\n    guard n > 1 else { return\
    \ [1, 3] }\n    guard n > 2 else { return [1, 3, 2] }\n    var triNums = [1, 3,\
    \ 2]\n    for i in 3..<n {\n        triNums.append(i % 2 == 0 ? i / 2 + 1 : triNums[i\
    \ - 1] + triNums[i - 2] + triNums[i - 3])\n    }\n    return triNums", "    var\
    \ result: [Int] = []\n    result.append(1)\n    if n > 0 {\n        result.append(3)\n\
    \    }\n    if n > 1 {\n        result.append(2)\n    }\n    if n > 2 {\n    \
    \    for i in 3...n {\n            if i % 2 == 0 {\n                result.append(1\
    \ + i / 2)\n            } else {\n                result.append(result[i - 1]\
    \ + result[i - 2] + result[i + 1])\n            }\n        }\n    }\n    return\
    \ result", "  guard n > 0 else { return [] }\n  var triNums = [1, 3, 2]\n  for\
    \ i in 3...n {\n    if i % 2 == 0 {\n      triNums.append(1 + i / 2)\n    } else\
    \ {\n      triNums.append(triNums[i - 1] + triNums[i - 2] + triNums[i + 1])\n\
    \    }\n  }\n  return triNums", "    return [Int](0...n).map {\n        switch\
    \ $0 {\n        case 0: return 1\n        case 1: return 3\n        case 2: return\
    \ 2\n        default:\n            return tri(n: $0 - 1) + tri(n: $0 - 2) + tri(n:\
    \ $0 - 3)\n        }\n    }", "    var count = 0\n    var arr = [Int]()\n    while\
    \ count <= n {\n        if count == 0 {\n            arr.append(1)\n        }\
    \ else if count == 1 {\n            arr.append(3)\n        } else if count ==\
    \ 2 {\n            arr.append(2)\n        } else {\n            arr.append(arr[count\
    \ - 1] + arr[count - 2] + arr[count - 3])\n        }\n        count += 1\n   \
    \ }\n    return arr", "    guard n > 0 else { return [] }\n    return (1...n).map\
    \ {\n        if $0 % 2 == 0 { return $0 / 2 }\n        return (1...$0).reduce(0,\
    \ { $0 + tri(n: $1)[$1] })\n    }", "  var result = [Int]()\n  for i in 0...n\
    \ {\n    var num = 0\n    if i == 0 {\n      num = 1\n    } else if i == 1 {\n\
    \      num = 3\n    } else if i == 2 {\n      num = 2\n    } else {\n      num\
    \ = tri(n: i - 3)[i - 3] + tri(n: i - 2)[i - 2] + tri(n: i - 1)[i - 1]\n    }\n\
    \    result.append(num)\n  }\n  return result", "  var output = [1, 3, 2]\n  guard\
    \ n > 2 else { return Array(output[0..<n + 1]) }\n  while output.count < n + 1\
    \ {\n    if output.count % 2 == 0 {\n      output.append(1 + output.count / 2)\n\
    \    } else {\n      output.append(output[output.count - 1] + output[output.count\
    \ - 2] + output[output.count - 3])\n    }\n  }\n  return output", "\tvar result\
    \ = [1, 3, 2]\n\tfor x in 1...n {\n\t\tresult.append(x % 2 == 0 ? 1 + x / 2 :\
    \ result[x - 1] + result[x - 2] + result[x + 1])\n\t}\n\treturn result", "   \
    \ var tribonacci: [Int] = [1, 3, 2]\n    guard n >= 3 else { return Array(tribonacci[0..<n\
    \ + 1]) }\n    for i in 3...n {\n        if i % 2 == 0 {\n            tribonacci.append(1\
    \ + i / 2)\n        } else {\n            tribonacci.append(tribonacci[i - 3]\
    \ + tribonacci[i - 2] + tribonacci[i - 1])\n        }\n    }\n    return tribonacci",
  "    var triArray = [Int]()\n    var n = n + 1\n    var value = 0\n    while n >\
    \ 0 {\n        if n == 1 {\n            value = 3\n        } else if n % 2 ==\
    \ 0 {\n            value = 1 + n / 2\n        } else {\n            value = triArray[n\
    \ - 2] + triArray[n - 3] + triArray[n - 1]\n        }\n        triArray.append(value)\n\
    \        n -= 1\n    }\n    return triArray", "  var tri = [Int]()\n  for i in\
    \ 0...n {\n    switch i {\n    case 0:\n      tri.append(1)\n    case 1:\n   \
    \   tri.append(3)\n    case 2:\n      tri.append(2)\n    default:\n      tri.append(tri[i\
    \ - 1] + tri[i - 2] + tri[i - 3])\n    }\n  }\n  return tri", "    var cache =\
    \ [Int: Int]()\n    cache[1] = 3\n    cache[2] = 2\n    cache[3] = 8\n    var\
    \ ret = [Int]()\n    for i in 1...n {\n        if let cached = cache[i] {\n  \
    \          ret.append(cached)\n        } else {\n            if i % 2 == 0 {\n\
    \                let new = 1 + i / 2\n                cache[i] = new\n       \
    \         ret.append(new)\n            } else {\n                let last = tri(n:\
    \ i - 1)[i - 1]\n                let beforeLast = tri(n: i - 2)[i - 2]\n     \
    \           let next = tri(n: i + 1)[i + 1]\n                let new = last +\
    \ beforeLast + next\n                cache[i] = new\n                ret.append(new)\n\
    \            }\n        }\n    }\n    return ret", "    var num = 0\n    if n\
    \ == 1 {\n        num = 1\n    } else if n % 2 == 0 {\n        num = 1 + n / 2\n\
    \    } else {\n        var array = tri(n: n - 1)\n        num = array[n - 1] +\
    \ array[n - 2] + array[n + 1]\n    }\n    return [num]", "    guard n > 0 else\
    \ { return [] }\n    var result = [1, 3, 2]\n    if n == 1 { return [1] }\n  \
    \  if n == 2 { return [1, 3] }\n    if n == 3 { return result }\n    var i = 4\n\
    \    while i <= n {\n        if i % 2 == 0 {\n            result.append(1 + i\
    \ / 2)\n        } else {\n            result.append(result[i - 2] + result[i -\
    \ 3] + result[i - 1])\n        }\n        i += 1\n    }\n    return result", " \
    \   var seq = [1, 3, 2]\n    guard n > 2 else { return seq }\n    for _ in 3...n\
    \ {\n        let n = seq.count\n        seq.append(n % 2 == 0 ? 1 + n / 2 : seq[n\
    \ - 1] + seq[n - 2] + seq[n - 3])\n    }\n    return seq", "    if n == 0 {\n\
    \        return [1]\n    }\n    if n == 1 {\n        return [1, 3]\n    }\n  \
    \  if n == 2 {\n        return [1, 3, 2]\n    }\n    var arr = [1, 3, 2]\n   \
    \ while arr.count <= n {\n        let nextVal = arr[arr.count - 1] + arr[arr.count\
    \ - 2] + arr[arr.count - 3]\n        arr.append(nextVal)\n    }\n    return arr",
  "  guard n > 0 else { return [] }\n  guard n > 1 else { return [1, 3] }\n  guard\
    \ n > 2 else { return [1, 3, 2] }\n  var result = [1, 3, 2]\n  for i in 3...n\
    \ {\n    result.append(result[i - 1] + result[i - 2] + result[i - 3])\n  }\n \
    \ return result", "    var array = [1, 3, 2]\n    for i in 0..<n {\n        let\
    \ last = array.last!\n        let last_1 = array[array.count - 2]\n        let\
    \ last_2 = array[array.count - 3]\n        if array.count % 2 == 0 {\n       \
    \     array.append(1 + last / 2)\n        } else {\n            array.append(last_2\
    \ + last_1 + last)\n        }\n    }\n    return array", "  var result = [1, 3,\
    \ 2]\n  if n <= 2 {\n    return result[0...n]\n  }\n  while result.count <= n\
    \ {\n    let next = result[result.count - 3] + result[result.count - 2] + result[result.count\
    \ - 1]\n    result.append(next)\n  }\n  return result", "    guard n > 0 else\
    \ { return [] }\n    var result = [1, 3, 2]\n    var sum = 6\n    if n == 1 {\
    \ return [1] }\n    if n == 2 { return [1, 3] }\n    if n == 3 { return [1, 3,\
    \ 2] }\n    for _ in 4...n {\n        result.append(sum)\n        sum += result[result.count\
    \ - 2]\n    }\n    return result", "    if n == 0 {\n        return [1]\n    }\n\
    \    if n == 1 {\n        return [1, 3]\n    }\n    if n == 2 {\n        return\
    \ [1, 3, 2]\n    }\n    var tri = [1, 3, 2]\n    for _ in 0...n - 3 {\n      \
    \  tri.append(tri[tri.count - 3] + tri[tri.count - 2] + tri[tri.count - 1])\n\
    \    }\n    return tri", "    var n = n\n    var result = [1, 3, 2]\n    while\
    \ n > 0 {\n        n -= 1\n        let value = result[result.count - 3] + result[result.count\
    \ - 2] + result[result.count - 1]\n        result.append(value)\n    }\n    return\
    \ result", "    if n < 0 {\n        return []\n    }\n    var a = 1\n    var b\
    \ = 3\n    var c = 2\n    if n == 0 {\n        return [1]\n    }\n    if n ==\
    \ 1 {\n        return [1, 3]\n    }\n    if n == 2 {\n        return [1, 3, 2]\n\
    \    }\n    var result = [a, b, c]\n    for _ in 3...n {\n        a = b\n    \
    \    b = c\n        c = b + a + result[0]\n        result.append(c)\n        result.removeFirst()\n\
    \    }\n    return result", "    var array: [Int] = []\n    guard n > 0 else {\
    \ return array }\n    array.append(1)\n    guard n > 1 else { return array }\n\
    \    array.append(3)\n    guard n > 2 else { return array }\n    array.append(2)\n\
    \    guard n > 3 else { return array }\n    for i in 4...n {\n        if i % 2\
    \ == 0 {\n            array.append(1 + i / 2)\n        } else {\n            array.append(array[i\
    \ - 1] + array[i - 2] + array[i + 1])\n        }\n    }\n    return array", " \
    \   if n == 0 {\n        return [1]\n    }\n    if n == 1 {\n        return [1,\
    \ 3]\n    }\n    if n == 2 {\n        return [1, 3, 2]\n    }\n    var arr = [1,\
    \ 3, 2]\n    for i in 3...n {\n        arr.append(i.isMultiple(of: 2) ? 1 + i\
    \ / 2 : arr[i - 1] + arr[i - 2] + arr[i - 3])\n    }\n    return arr", "    var\
    \ tribonacci = [1, 3, 2]\n    if n < 3 {\n        return Array(tribonacci[0...n])\n\
    \    }\n    for _ in 3...n {\n        let next = tribonacci[tribonacci.count -\
    \ 1] + tribonacci[tribonacci.count - 2] + tribonacci[tribonacci.count - 3]\n \
    \       tribonacci.append(next)\n    }\n    return tribonacci", "    var result:\
    \ [Int] = [1, 3, 2]\n    if n == 0 {\n        return [1]\n    } else if n == 1\
    \ {\n        return [1, 3]\n    } else if n == 2 {\n        return [1, 3, 2]\n\
    \    } else {\n        for i in 3...n {\n            if i % 2 == 0 {\n       \
    \         result.append(1 + i / 2)\n            } else {\n                result.append(result[i\
    \ - 1] + result[i - 2] + result[i - 3])\n            }\n        }\n    }\n   \
    \ return result", "    guard n > 0 else { return [] }\n    var arr = [1, 3, 2]\n\
    \    for i in 3...n {\n        if i % 2 == 0 {\n            arr.append(1 + i /\
    \ 2)\n        } else {\n            arr.append(arr[i - 1] + arr[i - 2] + arr[i\
    \ + 1])\n        }\n    }\n    return arr", "    guard n > 0 else { return []\
    \ }\n    guard n > 1 else { return [1, 3] }\n    guard n > 2 else { return [1,\
    \ 3, 2] }\n    var seq = [1, 3, 2]\n    for i in 3...n {\n        if i % 2 ==\
    \ 0 {\n            seq.append(1 + i / 2)\n        } else {\n            seq.append(seq[i\
    \ - 1] + seq[i - 2] + seq[i + 1])\n        }\n    }\n    return seq", '  return
    (0...n).map { triI(n: $0) }', "    // This is your job. Fill in the body.\n  \
    \  return [1, 3, 2, 8]", "    var array = [Int]()\n    guard n > 0 else {\n  \
    \      return array\n    }\n    array.append(1)\n    if n == 1 {\n        return\
    \ array\n    }\n    array.append(3)\n    if n == 2 {\n        return array\n \
    \   }\n    array.append(2)\n    for _ in 0..<n - 2 {\n        let i = array.count\
    \ - 1\n        array.append(array[i - 2] + array[i - 1] + array[i])\n    }\n \
    \   return array", "    var temp = [1, 3, 2]\n    for num in 3...n {\n       \
    \ if (num % 2 == 0) {\n            temp.append(1 + num / 2)\n        } else {\n\
    \            temp.append(temp[num - 1] + temp[num - 2] + temp[num + 1])\n    \
    \    }\n    }\n    return temp", "    var triResult: [Int] = []\n    for i in\
    \ 0...n {\n        switch i {\n        case 0:\n            triResult.append(1)\n\
    \        case 1:\n            triResult.append(3)\n        case 2:\n         \
    \   triResult.append(2)\n        default:\n            if i % 2 == 0 {\n     \
    \           triResult.append(1 + i / 2)\n            } else {\n              \
    \  triResult.append(triResult[i - 2] + triResult[i - 1] + triResult[i + 1])\n\
    \            }\n        }\n    }\n    return triResult", "    var result = [Int]()\n\
    \    guard n > 0 else {\n        return result\n    }\n    result.append(1)\n\
    \    result.append(3)\n    result.append(2)\n    guard n > 2 else {\n        return\
    \ result\n    }\n    for _ in 3...n {\n        let r = result[result.count - 3]\
    \ + result[result.count - 2] + result[result.count - 1]\n        result.append(r)\n\
    \    }\n    return result", '    // Implement your solution here', "    var res\
    \ = [1, 3, 2]\n    if n == 2 {\n        return res\n    }\n    var i = 3\n   \
    \ while i <= n {\n        if i % 2 == 0 {\n            res.append(1 + i / 2)\n\
    \        } else {\n            res.append(res[i - 1] + res[i - 2] + res[i + 1])\n\
    \        }\n        i += 1\n    }\n    return res", "  var res = [1, 3, 2]\n \
    \ if n == 0 {\n    return [1]\n  } else if n == 1 {\n    return [1, 3]\n  } else\
    \ if n == 2 {\n    return res\n  }\n  for _ in 3...n {\n    res.append(res[res.count\
    \ - 1] + res[res.count - 2] + res[res.count - 3])\n  }\n  return res", "    var\
    \ array = [1, 3, 2]\n    if n < 3 {\n        return Array(array[0...n])\n    }\n\
    \    array.reserveCapacity(n + 1)\n    while array.count <= n {\n        let last\
    \ = array.last!\n        let secondToLast = array[array.count - 2]\n        let\
    \ thirdToLast = array[array.count - 3]\n        let item = last + secondToLast\
    \ + thirdToLast\n        array.append(item)\n    }\n    return array", "    return\
    \ [Int](count: n+1, repeatedValue: 0).enumerate().map { (i, _) in\n        if\
    \ i == 0 {\n            return 1\n        } else if i == 1 {\n            return\
    \ 3\n        } else if i == 2 {\n            return 2\n        } else {\n    \
    \        return tri(n-1) + tri(n-2) + tri(n+1)\n        }\n    }", "    var result\
    \ = [1, 3, 2]\n    while result.count < n + 1 {\n        let num = result[result.count\
    \ - 1] + result[result.count - 2] + result[result.count - 3]\n        result.append(num)\n\
    \    }\n    return result", "    if n < 0 {\n        return []\n    }\n    return\
    \ Array(0...n).map {\n        if $0 == 0 {\n            return 1\n        }\n\
    \        if $0 == 1 {\n            return 3\n        }\n        if $0 == 2 {\n\
    \            return 2\n        }\n        if $0 % 2 == 0 {\n            return\
    \ 1 + $0 / 2\n        }\n        return tri(n: $0 - 1) + tri(n: $0 - 2) + tri(n:\
    \ $0 + 1)\n    }", "    guard n > 0 else { return [] }\n    var triArr = [1, 3,\
    \ 2]\n    var i = 3\n    while i <= n {\n        let next = triArr[i - 1] + triArr[i\
    \ - 2] + triArr[i - 3]\n        triArr.append(next)\n        i += 1\n    }\n \
    \   return triArr", "    var tribonacciSequence = [1, 3, 2]\n    if n == 0 {\n\
    \        return [1]\n    } else if n == 1 {\n        return [1, 3]\n    } else\
    \ if n == 2 {\n        return tribonacciSequence\n    } else {\n        for _\
    \ in 2...n {\n            tribonacciSequence.append(tribonacciSequence[tribonacciSequence.count\
    \ - 1] + tribonacciSequence[tribonacciSequence.count - 2] + tribonacciSequence[tribonacciSequence.count\
    \ - 3])\n        }\n    }\n    return tribonacciSequence", "    var n = n\n  \
    \  var result = [1, 3, 2]\n    while n > 0 {\n        let lastElement = result.last!\n\
    \        result.append(lastElement % 2 == 0 ? (1 + lastElement / 2) : (result[result.count\
    \ - 2] + result[result.count - 3] + lastElement))\n        n -= 1\n    }\n   \
    \ return result", "    guard n > 0 else { return [] }\n    if n < 3 {\n      \
    \  return Array(0...n).map { $0 == 1 ? 3 : 1 }\n    }\n    var result = [Int](repeating:\
    \ 0, count: n + 1)\n    result[0] = 1\n    result[1] = 3\n    result[2] = 2\n\
    \    for index in 3...n {\n        result[index] = result[index - 1] + result[index\
    \ - 2] + result[index - 3]\n    }\n    return result", "    var arr = [1, 3, 2]\n\
    \    if n == 0 {\n        return [1]\n    } else if n == 1 {\n        return [1,\
    \ 3]\n    } else if n == 2 {\n        return [1, 3, 2]\n    } else {\n       \
    \ for i in 3...n {\n            arr.append(triHelper(n: i, arr: arr))\n      \
    \  }\n    }\n    return arr", "  let n = n + 1\n  var numbers = [1, 3, 2]\n  if\
    \ n <= 3 {\n    return Array(numbers[0..<n])\n  }\n  for _ in 3..<n {\n    let\
    \ newValue = numbers[0] + numbers[1] + numbers[2]\n    numbers.append(newValue)\n\
    \    numbers.removeFirst()\n  }\n  return numbers", "    var result = [1, 3, 2]\n\
    \    if n == 0 {\n        return [1]\n    } else if n == 1 {\n        return [1,\
    \ 3]\n    } else if n == 2 {\n        return [1, 3, 2]\n    } else {\n       \
    \ for _ in 0...n - 3 {\n            if result.count % 2 == 0 {\n             \
    \   result.append(result.last! + 1)\n            } else {\n                result.append(result[result.count\
    \ - 1] + result[result.count - 2] + result[result.count - 3])\n            }\n\
    \        }\n    }\n    return result", '    return tri_recur(n: n)', "    var\
    \ array = [1, 3, 2]\n    for index in 3...n {\n        if index % 2 == 0 {\n \
    \           array.append(index / 2 + 1)\n        } else {\n            array.append(array[index\
    \ - 1] + array[index - 2] + array[index - 3])\n        }\n    }\n    return array",
  "    var arr = [Int]()\n    for i in 0...n {\n        if i == 0 {\n            arr.append(1)\n\
    \        } else if i == 1 {\n            arr.append(3)\n        } else if i ==\
    \ 2 {\n            arr.append(2)\n        } else if i % 2 == 0 {\n           \
    \ arr.append(1 + i / 2)\n        } else {\n            arr.append(arr[i - 1] +\
    \ arr[i - 2] + arr[i - 3])\n        }\n    }\n    return arr", '    return []',
  "    guard n >= 0 else {\n        return []\n    }\n    return (0...n).map {\n \
    \       $0 == 0 ? 1 : $0 == 1 ? 3 : $0 == 2 ? 2 : tri(n: $0 - 1) + tri(n: $0 -\
    \ 2) + tri(n: $0 - 3)\n    }", "    guard n > 0 else { return [] }\n    var res\
    \ = [1, 3, 2]\n    var i = 2\n    while i <= n {\n        if i % 2 == 0 {\n  \
    \          res.append(1 + i / 2)\n        } else {\n            res.append(res[i\
    \ - 1] + res[i - 2] + res[i + 1])\n        }\n        i += 1\n    }\n    return\
    \ res", "    var result: [Int] = [Int](repeating: 0, count: n + 1)\n    result[0]\
    \ = 1\n    result[1] = 3\n    result[2] = 2\n    var i = 3\n    while i <= n {\n\
    \        let temp = result[i - 1] + result[i - 2] + result[i - 3]\n        result[i]\
    \ = temp\n        i += 1\n    }\n    return result", "    var result = [1, 3,\
    \ 2]\n    guard n > 2 else { return Array(result[0...n]) }\n    for _ in 3...n\
    \ {\n        let value = (result[result.count - 1] + result[result.count - 2]\
    \ + result[result.count - 3])\n        result.append(value)\n    }\n    return\
    \ result", "  let base = [1, 3, 2]\n  if n < 3 {\n    return Array(base[0..<n+1])\n\
    \  }\n  var sequence = Array(base)\n  for i in 3...n {\n    let newElement = sequence[i-3]\
    \ + sequence[i-2] + sequence[i-1]\n    sequence.append(newElement)\n  }\n  return\
    \ sequence", "    var result = [Int]()\n    var pre1 = 1\n    var pre2 = 3\n \
    \   var pre3 = 2\n    if n == 0 {\n        return [pre1]\n    }\n    result.append(pre1)\n\
    \    if n == 1 {\n        result.append(pre2)\n        return result\n    }\n\
    \    result.append(pre2)\n    if n == 2 {\n        result.append(pre3)\n     \
    \   return result\n    }\n    result.append(pre3)\n    for _ in 3...n {\n    \
    \    let cur = pre1 + pre2 + pre3\n        result.append(cur)\n        pre1 =\
    \ pre2\n        pre2 = pre3\n        pre3 = cur\n    }\n    return result", " \
    \   var arr = [Int]()\n    for i in 0...n {\n        if i == 0 {\n           \
    \ arr.append(1)\n        } else if i == 1 {\n            arr.append(3)\n     \
    \   } else if i == 2 {\n            arr.append(2)\n        } else if i % 2 ==\
    \ 0 {\n            arr.append(1 + i / 2)\n        } else {\n            arr.append(arr[i\
    \ - 1] + arr[i - 2] + arr[i - 3])\n        }\n    }\n    return arr", "  guard\
    \ n >= 0 else { return [] }\n  switch n {\n  case 0:\n    return [1]\n  case 1:\n\
    \    return [1, 3]\n  case 2:\n    return [1, 3, 2]\n  default:\n    var result\
    \ = [1, 3, 2]\n    for i in 3...n {\n      if i % 2 == 0 {\n        result.append(1\
    \ + i / 2)\n      } else {\n        result.append(result[i - 1] + result[i - 2]\
    \ + result[i + 1])\n      }\n    }\n    return result\n  }", "    // Your code\
    \ here\n    var arr = [Int]()\n    for i in 0...n{\n        if i == 0 {\n    \
    \        arr.append(1)\n        }\n        else if i == 1{\n            arr.append(3)\n\
    \        }\n        else if i == 2{\n            arr.append(2)\n        }\n  \
    \      else{\n            arr.append(arr[i-1] + arr[i-2] + arr[i-3])\n       \
    \ }\n    }\n    return arr", "    guard n > 0 else { return [] }\n    var result\
    \ = [Int](repeating: 1, count: n + 1)\n    for i in 1..<result.count {\n     \
    \   result[i] = i % 2 == 0 ? 1 + i / 2 : result[i - 1] + result[i - 2] + result[i\
    \ + 1]\n    }\n    return result", "    return [Int](0...n).map {\n        if\
    \ $0 <= 2 {\n            return 1\n        } else {\n            let x = tri(n:\
    \ $0 - 1)\n            let y = tri(n: $0 - 2)\n            let z = tri(n: $0 -\
    \ 3)\n            return x[x.count - 1] + y[y.count - 1] + z[z.count - 1]\n  \
    \      }\n    }", "    if n == 0 {\n        return [1]\n    } else if n == 1 {\n\
    \        return [1, 3]\n    } else if n == 2 {\n        return [1, 3, 2]\n   \
    \ }\n    var triArray = [1, 3, 2]\n    var i = 3\n    while i <= n {\n       \
    \ let element = triArray[i - 1] + triArray[i - 2] + triArray[i - 3]\n        triArray.append(element)\n\
    \        i += 1\n    }\n    return triArray", "    return [Int](1...n).map {\n\
    \        if $0 <= 2 {\n            return $0 + 1\n        }\n        return tri(n:\
    \ $0 - 1)[$0 - 1] + tri(n: $0 - 2)[$0 - 2] + tri(n: $0 - 3)[$0 - 3]\n    }", '    return
    [1, 3, 2, 8]', "    guard n > 0 else { return [] }\n    guard n > 1 else { return\
    \ [1, 3] }\n    var tri = [1, 3, 2]\n    for i in 3...n {\n        let val = tri[i\
    \ - 1] + tri[i - 2] + tri[i - 3]\n        tri.append(val)\n    }\n    return tri",
  "    var list = [Int]()\n    for i in 0 ... n {\n        if i == 0 {\n         \
    \   list.append(1)\n        } else if i == 1 {\n            list.append(3)\n \
    \       } else if i == 2 {\n            list.append(2)\n        } else {\n   \
    \         list.append(list[i - 1] + list[i - 2] + list[i - 3])\n        }\n  \
    \  }\n    return list", "    guard n > 0 else { return [] }\n    var series =\
    \ [1, 3, 2]\n    for _ in 0...n - 3 {\n        let result = series[0] + series[1]\
    \ + series[2]\n        series[0] = series[1]\n        series[1] = series[2]\n\
    \        series[2] = result\n    }\n    return series", "    // your code here\n\
    \    return []", "    // your code here\n    var result = [1, 3, 2]\n    if n\
    \ == 0 {\n        return [1]\n    } else if n == 1 {\n        return [1, 3]\n\
    \    } else if n == 2 {\n        return [1, 3, 2]\n    } else {\n        for _\
    \ in 0..<n - 2 {\n            result.append(result[result.count - 3] + result[result.count\
    \ - 2] + result[result.count - 1])\n        }\n    }\n    return result", '    return
    [1, 3, 2, 8]', "    return [Int](0...n).map({ (index) -> Int in\n        if index\
    \ == 0 {\n            return 1\n        } else if index == 1 {\n            return\
    \ 3\n        } else if index == 2 {\n            return 2\n        } else {\n\
    \            return tri(n: index - 1)[index - 1] + tri(n: index - 2)[index - 2]\
    \ + tri(n: index - 3)[index - 3]\n        }\n    })", "  guard n >= 0 else { return\
    \ [] }\n  if n == 0 { return [1] }\n  if n == 1 { return [1, 3] }\n  if n == 2\
    \ { return [1, 3, 2] }\n  var sequence = [1, 3, 2]\n  for i in 3...n {\n    if\
    \ i % 2 == 0 {\n      sequence.append(1 + i / 2)\n    } else {\n      sequence.append(sequence[i\
    \ - 1] + sequence[i - 2] + sequence[i + 1])\n    }\n  }\n  return sequence", " \
    \   guard n > 0 else { return [] }\n    var tribonacci = [1, 3, 2]\n    for i\
    \ in 3...n {\n        tribonacci.append(i.isMultiple(of: 2) ? (1 + i / 2) : (tribonacci[i\
    \ - 1] + tribonacci[i - 2] + tribonacci[i + 1]))\n    }\n    return tribonacci",
  "  if n < 0 {\n    return []\n  }\n  if n == 0 {\n    return [1]\n  }\n  if n ==\
    \ 1 {\n    return [1, 3]\n  }\n  if n == 2 {\n    return [1, 3, 2]\n  }\n  var\
    \ result = [1, 3, 2]\n  for i in 3...n {\n    let n = i % 2 == 0 ? i / 2 : result[i\
    \ - 1] + result[i - 2] + result[i - 3]\n    result.append(n)\n  }\n  return result",
  "    var fib: [Int] = [1, 3, 2]\n    for i in 0..<n {\n        if i % 2 == 0 {\n\
    \            fib.append(fib[i] + fib[i + 1] + fib[i + 2])\n        } else {\n\
    \            fib.append(fib[i] + fib[i - 1] + fib[i + 1])\n        }\n    }\n\
    \    return fib", '    return [1, 3, 2, 8]', "    var result: [Int] = [1, 3, 2]\n\
    \    if n == 0 {\n        return [1]\n    } else if n == 1 {\n        return [1,\
    \ 3]\n    } else if n == 2 {\n        return [1, 3, 2]\n    } else {\n       \
    \ for i in 3...n {\n            result.append(result[i - 1] + result[i - 2] +\
    \ result[i - 3])\n        }\n    }\n    return result", "    var tri = [Int]()\n\
    \    for i in 0...n {\n        if i == 0 {\n            tri.append(1)\n      \
    \  } else if i == 1 {\n            tri.append(3)\n        } else if i == 2 {\n\
    \            tri.append(2)\n        } else {\n            tri.append(tri[i - 1]\
    \ + tri[i - 2] + tri[i - 3])\n        }\n    }\n    return tri", "    var array\
    \ = [1, 3, 2]\n    for i in 3...n {\n        if i % 2 == 0 {\n            array.append(array[i\
    \ - 1] + array[i - 2] + array[i - 3])\n        } else {\n            array.append(1\
    \ + i / 2)\n        }\n    }\n    return array", "    var triArray = [Int]()\n\
    \    triArray.append(1)\n    triArray.append(3)\n    triArray.append(2)\n    for\
    \ _ in 3...n {\n        if triArray.count % 2 == 0 {\n            triArray.append(1\
    \ + triArray.count / 2)\n        } else {\n            triArray.append(triArray[triArray.count\
    \ - 3] + triArray[triArray.count - 2] + triArray[triArray.count - 1])\n      \
    \  }\n    }\n    return triArray", "    // Write your code here\n    return []",
  '    return []', '  return [Int](0...n).map(tri)', "    var result = [Int]()\n \
    \   result.append(1)\n    if n >= 1 {\n        result.append(3)\n    }\n    for\
    \ i in 2...n {\n        if i % 2 == 0 {\n            result.append(1 + i / 2)\n\
    \        } else {\n            result.append(result[i - 1] + result[i - 2] + result[i\
    \ + 1])\n        }\n    }\n    return result", '    return []', "    guard n >\
    \ 0 else { return [] }\n    var result = [Int](repeating: 0, count: n + 1)\n \
    \   if n == 1 {\n        result[0] = 1\n        return result\n    }\n    if n\
    \ == 2 {\n        result[0] = 1\n        result[1] = 3\n        return result\n\
    \    }\n    result[0] = 1\n    result[1] = 3\n    result[2] = 2\n    var i = 2\n\
    \    while i < n {\n        if i % 2 == 0 {\n            result[i + 1] = 1 + i\
    \ / 2\n        } else {\n            result[i + 1] = result[i] + result[i - 1]\
    \ + result[i + 1]\n        }\n        i += 1\n    }\n    return result", "   \
    \ var r: [Int] = [1, 3, 2]\n    for i in 3...n {\n        r.append(i % 2 == 0\
    \ ? 1 + i / 2 : r[i - 1] + r[i - 2] + r[i + 1])\n    }\n    return r", "    assert(n\
    \ >= 0)\n    var result = [1, 3, 2]\n    if n < 3 {\n        if n == 0 {\n   \
    \         return [1]\n        } else if n == 1 {\n            return [1, 3]\n\
    \        } else {\n            return result\n        }\n    }\n    for i in 3...n\
    \ {\n        if i % 2 == 0 {\n            result.append(1 + i / 2)\n        }\
    \ else {\n            result.append(result[i - 1] + result[i - 2] + result[i +\
    \ 1])\n        }\n    }\n    return result", "    var sequence = [1, 3, 2]\n \
    \   for i in 3...n {\n        if i % 2 == 0 {\n            sequence.append(1 +\
    \ i / 2)\n        } else {\n            sequence.append(sequence[i - 1] + sequence[i\
    \ - 2] + sequence[i + 1])\n        }\n    }\n    return sequence", "    if n ==\
    \ 0 {\n        return [0]\n    }\n    if n == 1 {\n        return [1, 3]\n   \
    \ }\n    if n == 2 {\n        return [1, 3, 2]\n    }\n    var array = [1, 3,\
    \ 2]\n    for i in 3...n {\n        let t = array[i - 3] + array[i - 2] + array[i\
    \ - 1]\n        array.append(t)\n    }\n    return array", "    if n < 0 {\n \
    \       return []\n    }\n    var result = [1, 3, 2]\n    if n <= 2 {\n      \
    \  return Array(result[0...n])\n    }\n    var a = 1\n    var b = 3\n    var c\
    \ = 2\n    var next = 0\n    for _ in 3...n {\n        next = a + b + c\n    \
    \    a = b\n        b = c\n        c = next\n        result.append(next)\n   \
    \ }\n    return result", "    var result: [Int] = [1, 3, 2]\n    for i in 3...n\
    \ {\n        if i % 2 == 0 {\n            result.append(1 + i / 2)\n        }\
    \ else {\n            result.append(result[i - 1] + result[i - 2] + result[i +\
    \ 1])\n        }\n    }\n    return result", '    return []', "  guard n > 0 else\
    \ { return [] }\n  return Array(0...n).map { tri(n: $0) }", "    var x = 1\n \
    \   var y = 3\n    var z = 2\n    var next = 0\n    var result = [1, 3, 2]\n \
    \   for _ in 3...n {\n        if x % 2 == 0 {\n            next = 1 + x / 2\n\
    \        } else {\n            next = x + y + z\n        }\n        x = y\n  \
    \      y = z\n        z = next\n        result.append(next)\n    }\n    return\
    \ result", "\tvar arr = [1, 3, 2]\n\tguard n > 2 else { return Array(arr[0...n])\
    \ }\n\tfor i in 3...n {\n\t\tarr.append(i % 2 == 0 ? 1 + i / 2 : arr[i - 1] +\
    \ arr[i - 2] + arr[i + 1])\n\t}\n\treturn arr", "\t// Write your solution here\n\
    \tvar result = [1, 3, 2]\n\tif n <= 2 {\n\t\tresult.removeLast(2 - n)\n\t\treturn\
    \ result\n\t}\n\tfor i in 3...n {\n\t\tlet value = result[i - 1] + result[i -\
    \ 2] + result[i - 3]\n\t\tresult.append(value)\n\t}\n\treturn result", "\treturn\
    \ Array(0...n).map { num in\n\t\tif num == 0 {\n\t\t\treturn 1\n\t\t} else if\
    \ num == 1 {\n\t\t\treturn 3\n\t\t} else if num == 2 {\n\t\t\treturn 2\n\t\t}\
    \ else if num % 2 == 0 {\n\t\t\treturn 1 + num / 2\n\t\t} else {\n\t\t\treturn\
    \ tri(n: num - 1) + tri(n: num - 2) + tri(n: num + 1)\n\t\t}\n\t}", "\tvar a =\
    \ 1\n\tvar b = 3\n\tvar c = 2\n\tvar tri: [Int] = [1, 3, 2]\n\tfor _ in 1...n\
    \ {\n\t\t(a, b, c) = (b, c, a + b + c)\n\t\ttri.append(c)\n\t}\n\treturn tri",
  "    guard n >= 0 else { return [] }\n    if n == 0 { return [1] }\n    var arr\
    \ = [Int](repeating: 0, count: n + 1)\n    arr[0] = 1\n    arr[1] = 3\n    arr[2]\
    \ = 2\n    for i in 3...n {\n        if i % 2 == 0 {\n            arr[i] = 1 +\
    \ i / 2\n        } else {\n            arr[i] = arr[i - 1] + arr[i - 2] + arr[i\
    \ + 1]\n        }\n    }\n    return arr", "    return (0 ... n).map {\n     \
    \   switch $0 {\n        case 0: return 1\n        case 1: return 3\n        case\
    \ 2: return 2\n        default:\n            return tri(n: $0 - 1) + tri(n: $0\
    \ - 2) + tri(n: $0 - 3)\n        }\n    }", "    var nums = [Int](repeating: 0,\
    \ count: n + 1)\n    if n == 0 {\n        return [1]\n    }\n    if n >= 1 {\n\
    \        nums[1] = 3\n    }\n    if n >= 2 {\n        nums[2] = 2\n    }\n   \
    \ if n >= 3 {\n        nums[3] = 8\n    }\n    for i in 4 ... n {\n        nums[i]\
    \ = nums[i - 1] + nums[i - 2] + nums[i - 3]\n    }\n    return nums", "    assert(n\
    \ >= 0)\n    switch n {\n    case 0:\n        return [1]\n    case 1:\n      \
    \  return [1, 3]\n    case 2:\n        return [1, 3, 2]\n    default:\n      \
    \  var list = [1, 3, 2]\n        for i in 3...n {\n            list.append(tri(n:\
    \ i - 1) + tri(n: i - 2) + tri(n: i + 1))\n        }\n        return list\n  \
    \  }", "  return n < 2 ? [1, 3] : [1, 3] +\n    (1...n).dropFirst(2).reduce(into:\
    \ [Int](), {\n      $0.append($0.count % 2 == 0 ? $0.last! / 2 : $0.last! + $0[$0.count\
    \ - 1] + $0[$0.count - 2])\n    })", "    guard n >= 0 else { return [] }\n  \
    \  var result = [1, 3, 2]\n    guard n > 2 else { return Array(result[..<n+1])\
    \ }\n    for i in 3...n {\n        result.append(i.isMultiple(of: 2) ? 1 + i /\
    \ 2 : result[i-1] + result[i-2] + result[i-3])\n    }\n    return result", " \
    \   var arr = [1, 3, 2]\n    if n <= 2 {\n        return arr\n    }\n    for _\
    \ in 3...n {\n        let last = arr.count - 1\n        arr.append(arr[last] +\
    \ arr[last - 1] + arr[last - 2])\n    }\n    return arr", "  guard n > 0 else\
    \ { return [] }\n  var result = [Int](repeating: 1, count: n)\n  for i in 2..<n\
    \ {\n    if i % 2 == 0 {\n      result[i] = 1 + i / 2\n    } else {\n      result[i]\
    \ = result[i - 1] + result[i - 2] + result[i + 1]\n    }\n  }\n  return result",
  "  // write your code in Swift 3.0 (Linux)\n  var tribonacciArray = [1, 3, 2]\n\
    \  for i in 1...n {\n    let tribonacci = 1 + (i / 2)\n    tribonacciArray.append(tribonacci)\n\
    \  }\n  return tribonacciArray", "    var result = [Int]()\n    if n == 0 {\n\
    \        return result\n    }\n    if n == 1 {\n        result.append(1)\n   \
    \     return result\n    }\n    if n == 2 {\n        result.append(1)\n      \
    \  result.append(3)\n        return result\n    }\n    result.append(1)\n    result.append(3)\n\
    \    result.append(2)\n    for i in 3...n {\n        result.append(result[i -\
    \ 1] + result[i - 2] + result[i - 3])\n    }\n    return result", "\treturn []",
  "    guard n > 0 else { return [] }\n    var sequence = [Int](repeating: 0, count:\
    \ n + 1)\n    sequence[0] = 1\n    sequence[1] = 3\n    sequence[2] = 2\n    for\
    \ i in stride(from: 3, to: n + 1, by: 1) {\n        if i % 2 == 0 {\n        \
    \    sequence[i] = 1 + i / 2\n        } else {\n            sequence[i] = sequence[i\
    \ - 1] + sequence[i - 2] + sequence[i + 1]\n        }\n    }\n    return sequence",
  "    var triNumbers = [1, 3, 2]\n    var index = 3\n    while index <= n {\n   \
    \     if index % 2 == 0 {\n            triNumbers.append(1 + index / 2)\n    \
    \    } else {\n            triNumbers.append(triNumbers[index - 1] + triNumbers[index\
    \ - 2] + triNumbers[index + 1])\n        }\n        index += 1\n    }\n    return\
    \ triNumbers", "    var result: [Int] = []\n    result.append(1)\n    if n ==\
    \ 0 {\n        return result\n    }\n    result.append(3)\n    if n == 1 {\n \
    \       return result\n    }\n    result.append(2)\n    if n == 2 {\n        return\
    \ result\n    }\n    for i in 3...n {\n        result.append(result[i - 1] + result[i\
    \ - 2] + result[i - 3])\n    }\n    return result", "    guard n > 0 else { return\
    \ [] }\n    var result = [1, 3, 2]\n    if n == 1 { return [1] }\n    if n ==\
    \ 2 { return [1, 3] }\n    while result.count < n + 1 {\n        let lastEven\
    \ = result[result.count - 2]\n        let lastOdd = result[result.count - 3]\n\
    \        result.append(1 + result.count / 2)\n        result.append(lastEven +\
    \ lastOdd + result[result.count - 1])\n    }\n    return result", "    var result\
    \ = [1, 3, 2]\n    if n == 0 {\n        return [result[0]]\n    } else if n ==\
    \ 1 {\n        return [result[0], result[1]]\n    } else if n == 2 {\n       \
    \ return result\n    }\n    var i = 3\n    while i <= n {\n        if i % 2 ==\
    \ 0 {\n            result.append(1 + i / 2)\n        } else {\n            result.append(result[i\
    \ - 1] + result[i - 2] + result[i + 1])\n        }\n        i += 1\n    }\n  \
    \  return result", "    guard n > 0 else { return [] }\n    var arr = [1, 3, 2]\n\
    \    for i in 3...n {\n        if i % 2 == 0 {\n            arr.append(1 + i /\
    \ 2)\n        } else {\n            arr.append(arr[i - 1] + arr[i - 2] + arr[i\
    \ + 1])\n        }\n    }\n    return arr", "    guard n >= 0 else { return []\
    \ }\n    guard n > 0 else { return [1] }\n    var result = [1, 3, 2]\n    for\
    \ i in 3 ... n {\n        if i % 2 == 0 {\n            result.append(1 + i / 2)\n\
    \        } else {\n            result.append(result[i - 1] + result[i - 2] + result[i\
    \ + 1])\n        }\n    }\n    return result", "    if n == 0 {\n        return\
    \ [0]\n    }\n    if n == 1 {\n        return [1, 3]\n    }\n    var result =\
    \ [1, 3, 2]\n    for i in 3...n {\n        result.append(result[i - 1] + result[i\
    \ - 2] + result[i - 3])\n    }\n    return result", "    if n < 0 {\n        return\
    \ []\n    } else if n == 0 {\n        return [1]\n    } else if n == 1 {\n   \
    \     return [1, 3]\n    } else if n == 2 {\n        return [1, 3, 2]\n    } else\
    \ {\n        var result = [1, 3, 2]\n        for i in 3...n {\n            result.append(tri(n:\
    \ i - 2) + tri(n: i - 1) + tri(n: i + 1))\n        }\n        return result\n\
    \    }", "    if n < 0 {\n        return []\n    }\n    guard n > 0 else {\n \
    \       return [1]\n    }\n    var results = [1, 3, 2]\n    var index = 3\n  \
    \  while index <= n {\n        if index % 2 == 0 {\n            results.append(1\
    \ + index / 2)\n        } else {\n            results.append(results[index - 1]\
    \ + results[index - 2] + results[index + 1])\n        }\n        index += 1\n\
    \    }\n    return results", "    guard n > 0 else { return [] }\n    var seq\
    \ = [1, 3, 2]\n    for i in 3...n {\n        if i.isMultiple(of: 2) {\n      \
    \      seq.append(1 + i / 2)\n        } else {\n            seq.append(seq[i -\
    \ 1] + seq[i - 2] + seq[i + 1])\n        }\n    }\n    return seq", "    var arr\
    \ = [Int]()\n    for i in 0...n {\n        if i == 0 {\n            arr.append(1)\n\
    \        } else if i == 1 {\n            arr.append(3)\n        } else if i ==\
    \ 2 {\n            arr.append(2)\n        } else if i % 2 == 0 {\n           \
    \ arr.append(1 + i / 2)\n        } else {\n            arr.append(arr[i - 1] +\
    \ arr[i - 2] + arr[i - 3])\n        }\n    }\n    return arr", '    return []',
  "    var tri = [1, 3, 2]\n    for _ in 0..<n {\n        tri.append(tri[tri.count\
    \ - 3] + tri[tri.count - 2] + tri[tri.count - 1])\n    }\n    return tri", " \
    \   if n == 0 {\n        return [1]\n    }\n    if n == 1 {\n        return [1,\
    \ 3]\n    }\n    if n == 2 {\n        return [1, 3, 2]\n    }\n    var result\
    \ = [1, 3, 2]\n    for i in 3...n {\n        if i % 2 == 0 {\n            result.append(1\
    \ + i / 2)\n        } else {\n            result.append(result[i - 1] + result[i\
    \ - 2] + result[i + 1])\n        }\n    }\n    return result", "    // write your\
    \ code in Swift 3.0 (Linux)\n    var f: [Int] = [1, 3, 2]\n    var i = 3\n   \
    \ while i <= n {\n        let val = i % 2 == 0 ? 1 + i / 2 : f[i - 1] + f[i -\
    \ 2] + f[i + 1]\n        f.append(val)\n        i += 1\n    }\n    return f",
  "    // Your code here\n    return []", '  return []', "    guard n >= 0 else {\n\
    \        fatalError(\"n should be non-negative\")\n    }\n    if n == 0 {\n  \
    \      return [1]\n    }\n    if n == 1 {\n        return [1, 3]\n    }\n    var\
    \ result = [1, 3, 2]\n    for _ in 3 ... n {\n        result.append(result[result.count\
    \ - 1] + result[result.count - 2] + result[result.count - 3])\n    }\n    return\
    \ result", "    var triArray = [1, 3, 2]\n    guard n > 2 else { return triArray[0...n]\
    \ }\n    for i in 3...n {\n        let triLast = triArray[i - 1]\n        let\
    \ triSecondLast = triArray[i - 2]\n        let triThirdLast = triArray[i - 3]\n\
    \        if i % 2 == 0 {\n            triArray.append(1 + i / 2)\n        } else\
    \ {\n            triArray.append(triLast + triSecondLast + triThirdLast)\n   \
    \     }\n    }\n    return triArray", "    var a = [1, 3, 2]\n    guard n > 2\
    \ else { return a[..<n + 1] }\n    for i in 3...n {\n        a.append(i.isMultiple(of:\
    \ 2) ? 1 + i / 2 : a[i - 1] + a[i - 2] + a[i - 3])\n    }\n    return a", "  \
    \  var result = [Int]()\n    result.append(1)\n    result.append(3)\n    result.append(2)\n\
    \    for i in 3...n {\n        if i % 2 == 0 {\n            result.append(1 +\
    \ i / 2)\n        } else {\n            result.append(result[i - 1] + result[i\
    \ - 2] + result[i + 1])\n        }\n    }\n    return result", "    var result\
    \ = [Int]()\n    for i in 0...n {\n        result.append(triHelper(n: i))\n  \
    \  }\n    return result", "    if n < 0 {\n        return []\n    }\n    var result\
    \ = [Int](repeating: 0, count: n + 1)\n    result[0] = 1\n    result[1] = 3\n\
    \    result[2] = 2\n    for i in 3...n {\n        if i % 2 == 0 {\n          \
    \  result[i] = 1 + i / 2\n        } else {\n            result[i] = result[i -\
    \ 1] + result[i - 2] + result[i + 1]\n        }\n    }\n    return result", " \
    \   if n < 2 {\n        return [1, 3]\n    }\n    var sequence = [1, 3, 2]\n \
    \   for i in 3...n {\n        let value = sequence[i - 1] + sequence[i - 2] +\
    \ sequence[i - 3]\n        sequence.append(value)\n    }\n    return sequence",
  "    var result = [1, 3, 2]\n    for i in 3...n {\n        result.append(result[i-1]\
    \ + result[i-2] + result[i-3])\n    }\n    return result", "    var fib: [Int]\
    \ = [1, 3, 2]\n    if n <= 2 {\n        return Array(fib[0...n])\n    }\n    for\
    \ _ in 2...n {\n        let sum = fib[0] + fib[1] + fib[2]\n        fib.removeFirst()\n\
    \        fib.append(sum)\n    }\n    return fib", "  var sequence = [1, 3, 2]\n\
    \  for _ in 3...n {\n    let odd = sequence[sequence.count - 1] + sequence[sequence.count\
    \ - 2] + sequence[sequence.count - 3]\n    sequence.append(odd)\n  }\n  return\
    \ sequence", "\tif n == 0 {\n\t\treturn [1]\n\t} else if n == 1 {\n\t\treturn\
    \ [1, 3]\n\t} else if n == 2 {\n\t\treturn [1, 3, 2]\n\t}\n\tvar arr = [1, 3,\
    \ 2]\n\tfor i in 3...n {\n\t\tarr.append(i % 2 == 0 ? 1 + i / 2 : arr[i - 1] +\
    \ arr[i - 2] + arr[i - 3])\n\t}\n\treturn arr", "    var res: [Int] = [1, 3, 2]\n\
    \    if n <= 2 {\n        return Array(res[0...n])\n    }\n    for i in 3...n\
    \ {\n        if i % 2 == 0 {\n            res.append(1 + i / 2)\n        } else\
    \ {\n            res.append(res[i - 1] + res[i - 2] + res[i + 1])\n        }\n\
    \    }\n    return res", "    if n < 0 {\n        return []\n    }\n    var result\
    \ = [1, 3, 2]\n    if n == 0 {\n        return [1]\n    }\n    if n == 1 {\n \
    \       return [1, 3]\n    }\n    if n == 2 {\n        return [1, 3, 2]\n    }\n\
    \    for i in 3...n {\n        if i % 2 == 0 {\n            result.append(1 +\
    \ i / 2)\n        } else {\n            result.append(result[i - 1] + result[i\
    \ - 2] + result[i + 1])\n        }\n    }\n    return result", "  guard n >= 0\
    \ else { return [] }\n  if n == 0 { return [1] }\n  var arr = [1, 3, 2]\n  for\
    \ _ in 3...n {\n    let r = arr[0] + arr[1] + arr[2]\n    arr.removeFirst()\n\
    \    arr.append(r)\n  }\n  return arr", '    return tribonacci(n: n, [1, 3, 2])',
  '    return []', "    if n == 0 {\n        return [0]\n    } else if n == 1 {\n\
    \        return [1, 3]\n    } else if n == 2 {\n        return [1, 3, 2]\n   \
    \ }\n    var result = [1, 3, 2]\n    for i in 3...n {\n        if i % 2 == 0 {\n\
    \            result.append(1 + i / 2)\n        } else {\n            result.append(result[i\
    \ - 1] + result[i - 2] + result[i + 1])\n        }\n    }\n    return result",
  "    if n == 0 {\n        return [1]\n    } else if n == 1 {\n        return [1,\
    \ 3]\n    } else if n == 2 {\n        return [1, 3, 2]\n    } else {\n       \
    \ var triArray = [1, 3, 2]\n        for i in 3...n {\n            if i % 2 ==\
    \ 0 {\n                triArray.append(1 + i / 2)\n            } else {\n    \
    \            triArray.append(triArray[i - 1] + triArray[i - 2] + triArray[i +\
    \ 1])\n            }\n        }\n        return triArray\n    }", '    return
    (0...n).map { tri(n: $0) }', "    var arr = [Int]()\n    for i in 0...n {\n  \
    \      if i == 0 {\n            arr.append(1)\n        } else if i == 1 {\n  \
    \          arr.append(3)\n        } else if i == 2 {\n            arr.append(2)\n\
    \        } else if i % 2 == 0 {\n            arr.append(1 + i / 2)\n        }\
    \ else {\n            arr.append(arr[i - 1] + arr[i - 2] + arr[i - 3])\n     \
    \   }\n    }\n    return arr", '    return []', "    var result = [1, 3, 2]\n\
    \    if n <= 2 {\n        return Array(result[0..<n + 1])\n    } else {\n    \
    \    for i in 3...n {\n            result.append(i % 2 == 0 ? (1 + i / 2) : result[i\
    \ - 1] + result[i - 2] + result[i - 3])\n        }\n    }\n    return result",
  '    return []', "    var result: [Int] = []\n    for i in 0...n {\n        if i\
    \ == 0 {\n            result.append(1)\n        } else if i == 1 {\n         \
    \   result.append(3)\n        } else if i == 2 {\n            result.append(2)\n\
    \        } else if i % 2 == 0 {\n            result.append(1 + i / 2)\n      \
    \  } else {\n            result.append(result[i - 1] + result[i - 2] + result[i\
    \ - 3])\n        }\n    }\n    return result", "  switch n {\n  case 0:\n    return\
    \ [1]\n  case 1:\n    return [1, 3]\n  case 2:\n    return [1, 3, 2]\n  default:\n\
    \    let seq = tri(n: n - 1)\n    let last = seq.last!\n    let lastButOne = seq[seq.count\
    \ - 2]\n    let lastButTwo = seq[seq.count - 3]\n    let next = last + lastButOne\
    \ + lastButTwo\n    var result = seq\n    result.append(next)\n    return result\n\
    \  }", "  var arr = [1, 3, 2]\n  for i in 1...n {\n    let num = (i % 2 == 0)\
    \ ? arr[i - 1] + arr[i - 2] + 1 + i / 2 : arr[i - 1] + arr[i - 2] + arr[i - 3]\n\
    \    arr.append(num)\n  }\n  return arr", "    if n == 0 {\n        return [1]\n\
    \    }\n    if n == 1 {\n        return [1, 3]\n    }\n    if n == 2 {\n     \
    \   return [1, 3, 2]\n    }\n    var a = [1, 3, 2]\n    var r = [Int]()\n    for\
    \ _ in 0...n {\n        r.append(a[0])\n        let new = a[0] + a[1] + a[2]\n\
    \        a.remove(at: 0)\n        a.append(new)\n    }\n    return r", "    switch\
    \ n {\n    case 0:\n        return [1]\n    case 1:\n        return [1, 3]\n \
    \   case 2:\n        return [1, 3, 2]\n    default:\n        var result = [1,\
    \ 3, 2]\n        for i in 3...n {\n            result.append(result[i - 1] + result[i\
    \ - 2] + result[i - 3])\n        }\n        return result\n    }", '    return
    []', "\tvar result = [Int]()\n\tvar x = 0\n\tvar y = 1\n\tvar z = 2\n\tvar w =\
    \ 0\n\tfor _ in 0...n {\n\t\tif z == 0 {\n\t\t\tresult.append(3)\n\t\t} else if\
    \ z % 2 == 0 {\n\t\t\tresult.append(z / 2 + 1)\n\t\t} else {\n\t\t\tw = x + y\
    \ + z\n\t\t\tresult.append(w)\n\t\t\tx = y\n\t\t\ty = z\n\t\t\tz = w\n\t\t}\n\t\
    \tz += 1\n\t}\n\treturn result", "  var result = [1, 3, 2]\n  if n == 0 {\n  \
    \  return [1]\n  } else if n == 1 {\n    return [1, 3]\n  } else if n == 2 {\n\
    \    return [1, 3, 2]\n  }\n  for i in 3...n {\n    result.append(i % 2 == 0 ?\
    \ 1 + i / 2 : result[i - 1] + result[i - 2] + result[i - 3])\n  }\n  return result",
  "    guard n > 1 else { return [1, 3] }\n    var tri = [1, 3, 2]\n    for _ in 3...n\
    \ {\n        let lastIndex = tri.count - 1\n        tri.append(tri[lastIndex -\
    \ 2] + tri[lastIndex - 1] + tri[lastIndex])\n    }\n    return tri"]
stop_tokens:
- "\n}"
