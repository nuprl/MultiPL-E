name: HumanEval_55_fib
language: swift
prompt: "\n/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>>\
  \ fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(fib(n: 10) == 55)\nassert(fib(n: 1) == 1)\n\
  assert(fib(n: 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n: 12) == 144)"
completions: ["    guard n > 1 else { return n }\n    return fib(n: n - 1) + fib(n:\
    \ n - 2)", "    let start = Date()\n    var f: Int = 0, g: Int = 1, i: Int = 0\n\
    \    while i < n {\n        g = g + f\n        f = g - f\n        i = i + 1\n\
    \    }\n    print(\"Done in \\(Date().timeIntervalSince(start)) sec.\")\n    return\
    \ f", "    if n <= 1 {\n        return n\n    } else {\n        return fib(n:\
    \ n - 1) + fib(n: n - 2)\n    }", "    var a = 0\n    var b = 1\n    var t = 0\n\
    \    for _ in 0..<n {\n        t = a + b\n        a = b\n        b = t\n    }\n\
    \    return a", "    var n0 = 0\n    var n1 = 1\n    var n2 = 0\n    if n == 0\
    \ {\n        return n0\n    }\n    if n == 1 {\n        return n1\n    }\n   \
    \ for _ in 2...n {\n        n2 = n0 + n1\n        n0 = n1\n        n1 = n2\n \
    \   }\n    return n2", "    if n == 0 {\n        return 0\n    } else if n ==\
    \ 1 {\n        return 1\n    } else {\n        return fib(n: n - 1) + fib(n: n\
    \ - 2)\n    }", "    if n <= 1 {\n        return n\n    }\n    return fib(n: n\
    \ - 1) + fib(n: n - 2)", "    var n1 = 0\n    var n2 = 1\n    for _ in 0..<n {\n\
    \        let n3 = n1 + n2\n        n1 = n2\n        n2 = n3\n    }\n    return\
    \ n1", "    if n <= 1 {\n        return n\n    }\n    var fn1 = 1\n    var fn2\
    \ = 1\n    var fn = 1\n    for _ in 2...n {\n        fn = fn1 + fn2\n        fn1\
    \ = fn2\n        fn2 = fn\n    }\n    return fn", "    if n <= 2 {\n        return\
    \ 1\n    } else {\n        return fib(n: n - 1) + fib(n: n - 2)\n    }", "   \
    \ precondition(n >= 0, \"fib(n:) n must be non-negative\")\n    return n <= 1\
    \ ? n : fib(n: n - 1) + fib(n: n - 2)", "    var f = [0, 1]\n    if n <= 1 {\n\
    \        return n\n    }\n    for i in 2...n {\n        f.append(f[i - 1] + f[i\
    \ - 2])\n    }\n    return f[n]", "    if n <= 1 {\n        return n\n    } else\
    \ {\n        return fib(n: n - 1) + fib(n: n - 2)\n    }", "    if n <= 1 {\n\
    \        return n\n    } else {\n        return fib(n: n - 1) + fib(n: n - 2)\n\
    \    }", "    switch n {\n    case 1, 2:\n        return 1\n    default:\n   \
    \     return fib(n: n - 1) + fib(n: n - 2)\n    }", "    if n == 0 {\n       \
    \ return 0\n    } else if n == 1 {\n        return 1\n    } else {\n        return\
    \ fib(n: n - 1) + fib(n: n - 2)\n    }", "    if n <= 2 {\n        return 1\n\
    \    }\n    var a = 1\n    var b = 1\n    for _ in 3...n {\n        let tmp =\
    \ a\n        a = b\n        b = tmp + b\n    }\n    return b", "    guard n >\
    \ 1 else { return n }\n    return fib(n: n - 1) + fib(n: n - 2)", "    switch\
    \ n {\n    case 0:\n        return 0\n    case 1:\n        return 1\n    default:\n\
    \        return fib(n: n - 1) + fib(n: n - 2)\n    }", '    return n < 2 ? n :
    fib(n: n - 1) + fib(n: n - 2)', "    if n == 0 {\n        return 0\n    } else\
    \ if n == 1 {\n        return 1\n    } else {\n        return fib(n: n - 1) +\
    \ fib(n: n - 2)\n    }", "    if n <= 2 {\n        return 1\n    }\n    return\
    \ fib(n: n - 1) + fib(n: n - 2)", "    var a = 0\n    var b = 1\n    if n < 2\
    \ {\n        return 1\n    }\n    for _ in 1...n {\n        let t = a + b\n  \
    \      a = b\n        b = t\n    }\n    return a", "    var a = 0\n    var b =\
    \ 1\n    for _ in 0..<n {\n        let tmp = a\n        a = b\n        b = tmp\
    \ + b\n    }\n    return a", "    // TODO: Implement it!\n    return 0", "   \
    \ if n == 0 {\n        return 0\n    } else if n == 1 {\n        return 1\n  \
    \  } else {\n        return fib(n: n - 1) + fib(n: n - 2)\n    }", "    if n ==\
    \ 0 {\n        return 0\n    } else if n == 1 {\n        return 1\n    } else\
    \ {\n        return fib(n: n - 1) + fib(n: n - 2)\n    }", "    guard n > 1 else\
    \ { return n }\n    return fib(n: n - 1) + fib(n: n - 2)", "    if n == 0 {\n\
    \        return 0\n    } else if n == 1 {\n        return 1\n    } else {\n  \
    \      return fib(n: n - 1) + fib(n: n - 2)\n    }", "    if n == 0 {\n      \
    \  return 0\n    } else if n == 1 {\n        return 1\n    } else {\n        return\
    \ fib(n: n - 1) + fib(n: n - 2)\n    }", "    var a = 0\n    var b = 1\n    for\
    \ _ in 0..<n {\n        let tmp = a\n        a = b\n        b = tmp + b\n    }\n\
    \    return a", "    guard n > 1 else { return n }\n    return fib(n: n - 1) +\
    \ fib(n: n - 2)", "    if n <= 1 {\n        return n\n    }\n    return fib(n:\
    \ n - 1) + fib(n: n - 2)", "    if n == 0 {\n        return 0\n    } else if n\
    \ == 1 {\n        return 1\n    } else {\n        return fib(n: n - 1) + fib(n:\
    \ n - 2)\n    }", "    guard n > 0 else { return 0 }\n    guard n > 1 else { return\
    \ 1 }\n    return fib(n: n - 1) + fib(n: n - 2)", "  if n <= 1 {\n    return n\n\
    \  }\n  return fib(n: n - 1) + fib(n: n - 2)", "    guard n > 1 else { return\
    \ n }\n    return fib(n: n - 1) + fib(n: n - 2)", "    if n <= 1 {\n        return\
    \ n\n    } else {\n        return fib(n: n - 1) + fib(n: n - 2)\n    }", "   \
    \ guard n > 0 else { return 0 }\n    guard n > 1 else { return 1 }\n    return\
    \ fib(n: n - 1) + fib(n: n - 2)", "    if n == 0 {\n        return 0\n    } else\
    \ if n == 1 {\n        return 1\n    } else {\n        return fib(n: n - 1) +\
    \ fib(n: n - 2)\n    }", "    if n <= 2 {\n        return 1\n    } else {\n  \
    \      return fib(n: n - 1) + fib(n: n - 2)\n    }", "    var a = 0\n    var b\
    \ = 1\n    for _ in 0..<n {\n        (a, b) = (b, a + b)\n    }\n    return a",
  "    var current = 0\n    var next = 1\n    var i = 0\n    while i < n {\n     \
    \   let tmp = current\n        current = next\n        next = tmp + next\n   \
    \     i += 1\n    }\n    return current", "  var a = 0\n  var b = 1\n  var i =\
    \ n\n  while i > 0 {\n    let tmp = a\n    a = b\n    b = tmp + b\n    i -= 1\n\
    \  }\n  return a", "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n\
    \        return 1\n    }\n    var a = 0\n    var b = 1\n    for _ in 2...n {\n\
    \        let c = a + b\n        a = b\n        b = c\n    }\n    return b", " \
    \   guard n > 1 else { return n }\n    return fib(n: n - 1) + fib(n: n - 2)",
  '    return n < 2 ? n : fib(n: n - 1) + fib(n: n - 2)', "    if n <= 1 {\n     \
    \   return n\n    }\n    return fib(n: n - 1) + fib(n: n - 2)", "    if n == 0\
    \ {\n        return 0\n    } else if n == 1 {\n        return 1\n    } else {\n\
    \        return fib(n: n - 1) + fib(n: n - 2)\n    }", "    if n == 0 {\n    \
    \    return 0\n    } else if n == 1 {\n        return 1\n    } else {\n      \
    \  return fib(n: n - 1) + fib(n: n - 2)\n    }", "    \n    var x = 0\n    var\
    \ y = 1\n    for _ in 1...n {\n        x = x + y\n        y = x - y\n    }\n \
    \   return x", "    if n == 0 {\n        return 0\n    } else if n == 1 {\n  \
    \      return 1\n    } else {\n        return fib(n: n - 1) + fib(n: n - 2)\n\
    \    }", "    if n == 0 {\n        return 0\n    } else if n == 1 {\n        return\
    \ 1\n    } else {\n        return fib(n: n - 1) + fib(n: n - 2)\n    }", "   \
    \ var a = 0\n    var b = 1\n    if n == 0 {\n        return a\n    }\n    for\
    \ _ in 0...n-1 {\n        let temp = a\n        a = b\n        b = temp + b\n\
    \    }\n    return a", "    \n    if n == 0 {\n        return 0\n    }\n    \n\
    \    if n == 1 {\n        return 1\n    }\n    \n    return fib(n: n - 1) + fib(n:\
    \ n - 2)", "    if n <= 1 {\n        return n\n    }\n    var result = [0, 1]\n\
    \    for i in 2..<n {\n        result.append(result[i - 1] + result[i - 2])\n\
    \    }\n    return result[n - 1] + result[n - 2]", "    if n == 0 {\n        return\
    \ 0\n    } else if n == 1 {\n        return 1\n    } else {\n        return fib(n:\
    \ n - 1) + fib(n: n - 2)\n    }", "    if n <= 2 {\n        return 1\n    }\n\
    \    return fib(n: n - 1) + fib(n: n - 2)", "    if n <= 2 {\n        return 1\n\
    \    } else {\n        return fib(n: n - 1) + fib(n: n - 2)\n    }", "    var\
    \ (n0, n1) = (0, 1)\n    var i = 0\n    while i < n {\n        (n0, n1) = (n1,\
    \ n0 + n1)\n        i += 1\n    }\n    return n0", "    \n    // fib(0) = 0\n\
    \    // fib(1) = 1\n    // fib(n) = fib(n-1) + fib(n-2)\n    \n    if n < 2 {\n\
    \        return n\n    }\n    \n    return fib(n: n-1) + fib(n: n-2)", "    if\
    \ n == 0 {\n        return 0\n    } else if n == 1 {\n        return 1\n    }\
    \ else {\n        return fib(n: n - 1) + fib(n: n - 2)\n    }", "    if n <= 2\
    \ {\n        return 1\n    }\n    return fib(n: n - 1) + fib(n: n - 2)", "   \
    \ if n <= 2 {\n        return 1\n    }\n    return fib(n: n - 1) + fib(n: n -\
    \ 2)", "    if n <= 2 {\n        return 1\n    }\n    return fib(n: n - 1) + fib(n:\
    \ n - 2)", "    if n == 0 {\n        return 0\n    } else if n == 1 {\n      \
    \  return 1\n    } else {\n        return fib(n: n - 1) + fib(n: n - 2)\n    }",
  "    if n <= 1 {\n        return n\n    } else {\n        return fib(n: n - 1) +\
    \ fib(n: n - 2)\n    }", "    if n == 0 {\n        return 0\n    } else if n ==\
    \ 1 {\n        return 1\n    } else {\n        return fib(n: n - 1) + fib(n: n\
    \ - 2)\n    }", '    return n < 2 ? n : fib(n: n - 1) + fib(n: n - 2)', "    if\
    \ n == 0 {\n        return 0\n    } else if n == 1 {\n        return 1\n    }\
    \ else {\n        return fib(n: n - 1) + fib(n: n - 2)\n    }", "    if n == 0\
    \ {\n        return 0\n    } else if n == 1 {\n        return 1\n    } else {\n\
    \        return fib(n: n - 1) + fib(n: n - 2)\n    }", "    if n <= 1 {\n    \
    \    return n\n    }\n    var a = 0\n    var b = 1\n    for _ in 1..<n {\n   \
    \     let c = a + b\n        a = b\n        b = c\n    }\n    return b", "   \
    \ if n <= 2 {\n        return 1\n    }\n    var a = 1\n    var b = 1\n    for\
    \ _ in 3...n {\n        let c = a + b\n        a = b\n        b = c\n    }\n \
    \   return b", '    return (n < 2) ? n : fib(n: n - 1) + fib(n: n - 2)', "   \
    \ if n <= 2 {\n        return 1\n    }\n    return fib(n: n - 1) + fib(n: n -\
    \ 2)", "    if n == 0 {\n        return 0\n    } else if n == 1 {\n        return\
    \ 1\n    } else {\n        return fib(n: n - 1) + fib(n: n - 2)\n    }", "   \
    \ \n    guard n > 0 else { return 0 }\n    guard n > 1 else { return 1 }\n   \
    \ \n    var n1 = 0\n    var n2 = 1\n    var n3 = 0\n    \n    for _ in 0...n {\n\
    \        n3 = n1 + n2\n        n1 = n2\n        n2 = n3\n    }\n    \n    return\
    \ n1", "    var a = 0\n    var b = 1\n    var c = 0\n    if n == 0 {\n       \
    \ return 0\n    }\n    for _ in 1..<n {\n        c = a + b\n        a = b\n  \
    \      b = c\n    }\n    return b", "    if n == 0 {\n        return 0\n    }\
    \ else if n == 1 {\n        return 1\n    } else {\n        return fib(n: n -\
    \ 1) + fib(n: n - 2)\n    }", "  if n <= 1 {\n    return n\n  } else {\n    return\
    \ fib(n: n - 1) + fib(n: n - 2)\n  }", "    if n == 0 {\n        return 0\n  \
    \  } else if n == 1 {\n        return 1\n    } else {\n        return fib(n: n\
    \ - 1) + fib(n: n - 2)\n    }", "    if n <= 2 {\n        return 1\n    }\n  \
    \  var a = 1\n    var b = 1\n    for _ in 3...n {\n        (a, b) = (b, a + b)\n\
    \    }\n    return b", "    // TODO: Write some code to compute a result\n   \
    \ if (n <= 1) {\n        return n\n    }\n    return fib(n: n - 1) + fib(n: n\
    \ - 2)", '    return 0', "  guard n > 0 else { return 0 }\n  guard n > 1 else\
    \ { return 1 }\n  return fib(n: n - 1) + fib(n: n - 2)", "    if n <= 2 {\n  \
    \      return 1\n    }\n    return fib(n: n - 1) + fib(n: n - 2)", "    guard\
    \ n > 1 else { return n }\n    return fib(n: n - 1) + fib(n: n - 2)", "    var\
    \ a = 0\n    var b = 1\n    for _ in 0..<n {\n        (a, b) = (b, a + b)\n  \
    \  }\n    return a", "    guard n > 1 else { return n }\n    return fib(n: n -\
    \ 1) + fib(n: n - 2)", "  var f1 = 0\n  var f2 = 1\n  for _ in 1...n {\n    let\
    \ f = f1 + f2\n    f1 = f2\n    f2 = f\n  }\n  return f1", "    if n == 0 {\n\
    \        return 0\n    } else if n == 1 {\n        return 1\n    } else {\n  \
    \      return fib(n: n - 1) + fib(n: n - 2)\n    }", "    var a = 0\n    var b\
    \ = 1\n    for _ in 0..<n {\n        let sum = a + b\n        a = b\n        b\
    \ = sum\n    }\n    return a", "    if n == 0 {\n        return 0\n    } else\
    \ if n == 1 {\n        return 1\n    } else {\n        return fib(n: n - 1) +\
    \ fib(n: n - 2)\n    }", "    if n <= 1 {\n        return n\n    } else {\n  \
    \      return fib(n: n - 1) + fib(n: n - 2)\n    }", "    // Put your code here.\n\
    \    return 0", "    var a = 0\n    var b = 1\n    for _ in 0..<n {\n        a\
    \ = a + b\n        swap(&a, &b)\n    }\n    return a", "    if n <= 1 {\n    \
    \    return n\n    } else {\n        return fib(n: n - 1) + fib(n: n - 2)\n  \
    \  }", "    if n <= 1 {\n        return n\n    }\n    var f1 = 0\n    var f2 =\
    \ 1\n    for _ in 1..<n {\n        let tmp = f1 + f2\n        f1 = f2\n      \
    \  f2 = tmp\n    }\n    return f2", '    return n < 2 ? n : fib(n: n - 1) + fib(n:
    n - 2)', "    if n == 0 {\n        return 0\n    } else if n == 1 {\n        return\
    \ 1\n    } else {\n        return fib(n: n - 1) + fib(n: n - 2)\n    }", "   \
    \ if n <= 1 {\n        return n\n    }\n    return fib(n: n - 1) + fib(n: n -\
    \ 2)", "    var fn1 = 0\n    var fn2 = 1\n    for _ in 1...n {\n        (fn1,\
    \ fn2) = (fn2, fn1 + fn2)\n    }\n    return fn1", "    var n0 = 0\n    var n1\
    \ = 1\n    if n < 2 {\n        return n\n    }\n    for _ in 2...n {\n       \
    \ let tmp = n0 + n1\n        n0 = n1\n        n1 = tmp\n    }\n    return n1",
  "    if n <= 1 {\n        return n\n    }\n    var res = 0\n    var previous = 1\n\
    \    var current = 1\n    for _ in 2...n {\n        res = previous + current\n\
    \        previous = current\n        current = res\n    }\n    return res", '    return
    0', "    if n <= 2 {\n        return 1\n    }\n    return fib(n: n - 1) + fib(n:\
    \ n - 2)", "  if n == 0 {\n    return 0\n  } else if n == 1 {\n    return 1\n\
    \  } else {\n    return fib(n: n - 1) + fib(n: n - 2)\n  }", "    if n == 0 {\n\
    \        return 0\n    } else if n == 1 {\n        return 1\n    } else {\n  \
    \      return fib(n: n - 1) + fib(n: n - 2)\n    }", "    if n <= 1 {\n      \
    \  return n\n    }\n    var previous = 0\n    var current = 1\n    for _ in 1..<n\
    \ {\n        let temp = current\n        current = previous + current\n      \
    \  previous = temp\n    }\n    return current", "    guard n > 1 else { return\
    \ n }\n    return fib(n: n - 1) + fib(n: n - 2)", "    guard n > 0 else { return\
    \ n }\n    var fib1 = 0\n    var fib2 = 1\n    for _ in 1..<n {\n        (fib1,\
    \ fib2) = (fib2, fib1 + fib2)\n    }\n    return fib2", "    if n <= 2 {\n   \
    \     return 1\n    } else {\n        return fib(n: n - 1) + fib(n: n - 2)\n \
    \   }", '    return fib_helper(n: n, a: 0, b: 1)', "    switch n {\n    case 1:\n\
    \        return 1\n    case 2:\n        return 1\n    default:\n        return\
    \ fib(n: n - 1) + fib(n: n - 2)\n    }", "    // Code here\n    if n == 0 {\n\
    \        return 0\n    } else if n == 1 {\n        return 1\n    } else {\n  \
    \      return fib(n: n - 1) + fib(n: n - 2)\n    }", "    precondition(n >= 0,\
    \ \"n must be greater than or equal to 0\")\n    if n == 0 {\n        return 0\n\
    \    } else if n == 1 {\n        return 1\n    } else {\n        return fib(n:\
    \ n - 1) + fib(n: n - 2)\n    }", "  var a = 0\n  var b = 1\n  for _ in 0..<n\
    \ {\n    let temp = a\n    a = b\n    b = temp + b\n  }\n  return a", "    if\
    \ n <= 1 {\n        return n\n    }\n    return fib(n: n - 1) + fib(n: n - 2)",
  '    return n <= 1 ? n : fib(n: n - 1) + fib(n: n - 2)', "    if n == 0 {\n    \
    \    return 0\n    } else if n == 1 {\n        return 1\n    } else {\n      \
    \  return fib(n: n - 1) + fib(n: n - 2)\n    }", "    if n <= 1 {\n        return\
    \ n\n    } else {\n        return fib(n: n - 1) + fib(n: n - 2)\n    }", "   \
    \ guard n > 1 else { return n }\n    return fib(n: n - 1) + fib(n: n - 2)", " \
    \   guard n > 0 else { return n }\n    var a = 0\n    var b = 1\n    for _ in\
    \ 0..<n {\n        let next = a + b\n        a = b\n        b = next\n    }\n\
    \    return a", '    return 0', "    guard n > 0 else { return 0 }\n    guard\
    \ n > 1 else { return 1 }\n    return fib(n: n - 1) + fib(n: n - 2)", "    if\
    \ n == 0 {\n        return 0\n    } else if n == 1 {\n        return 1\n    }\
    \ else {\n        return fib(n: n - 1) + fib(n: n - 2)\n    }", "    if n <= 1\
    \ {\n        return n\n    }\n    return fib(n: n - 1) + fib(n: n - 2)", "   \
    \ guard n > 0 else { return 0 }\n    guard n > 1 else { return 1 }\n    return\
    \ fib(n: n - 1) + fib(n: n - 2)", "    guard n > 1 else { return n }\n    return\
    \ fib(n: n - 1) + fib(n: n - 2)", "    guard n > 1 else { return n }\n    return\
    \ fib(n: n - 1) + fib(n: n - 2)", "    if n <= 2 {\n        return 1\n    } else\
    \ {\n        return fib(n: n - 1) + fib(n: n - 2)\n    }", "    guard n > 1 else\
    \ { return n }\n    return fib(n: n - 1) + fib(n: n - 2)", "    switch n {\n \
    \   case 0:\n        return 0\n    case 1:\n        return 1\n    default:\n \
    \       return fib(n: n - 1) + fib(n: n - 2)\n    }", "    var (a, b) = (0, 1)\n\
    \    for _ in 0..<n {\n        (a, b) = (b, a + b)\n    }\n    return a", "  \
    \  var current = 0\n    var next = 1\n    for _ in 0..<n {\n        (current,\
    \ next) = (next, current + next)\n    }\n    return current", "    if n == 0 {\n\
    \        return 0\n    } else if n == 1 {\n        return 1\n    } else {\n  \
    \      return fib(n: n - 1) + fib(n: n - 2)\n    }", '  return n <= 1 ? n : fib(n:
    n - 1) + fib(n: n - 2)', "    // get n-th Fibonacci number\n    var n1 = 0\n \
    \   var n2 = 1\n    var n3 = 1\n    for _ in 0..<n {\n        n3 = n1 + n2\n \
    \       n1 = n2\n        n2 = n3\n    }\n    return n3", "    if n <= 1 {\n  \
    \      return n\n    } else {\n        return fib(n: n - 1) + fib(n: n - 2)\n\
    \    }", "    if n == 0 {\n        return 0\n    } else if n == 1 {\n        return\
    \ 1\n    } else {\n        return fib(n: n - 1) + fib(n: n - 2)\n    }", "   \
    \ if n == 0 {\n        return 0\n    } else if n == 1 {\n        return 1\n  \
    \  } else {\n        return fib(n: n - 1) + fib(n: n - 2)\n    }", "    if n <=\
    \ 1 {\n        return n\n    }\n    return fib(n: n - 1) + fib(n: n - 2)", " \
    \   if n == 0 {\n        return 0\n    } else if n == 1 {\n        return 1\n\
    \    } else {\n        return fib(n: n - 1) + fib(n: n - 2)\n    }", "    if n\
    \ == 0 {\n        return 0\n    } else if n == 1 {\n        return 1\n    } else\
    \ {\n        return fib(n: n - 1) + fib(n: n - 2)\n    }", "    if n == 0 {\n\
    \        return 0\n    } else if n == 1 {\n        return 1\n    } else {\n  \
    \      return fib(n: n - 1) + fib(n: n - 2)\n    }", "    if n <= 1 {\n      \
    \  return n\n    }\n    return fib(n: n - 1) + fib(n: n - 2)", "    switch n {\n\
    \    case 0, 1:\n        return n\n    default:\n        return fib(n: n - 1)\
    \ + fib(n: n - 2)\n    }", '    return n < 2 ? n : fib(n: n - 1) + fib(n: n -
    2)', "    if n == 0 {\n        return 0\n    } else if n == 1 {\n        return\
    \ 1\n    } else {\n        return fib(n: n - 1) + fib(n: n - 2)\n    }", "   \
    \ if n <= 2 {\n        return 1\n    } else {\n        return fib(n: n - 1) +\
    \ fib(n: n - 2)\n    }", "    if n <= 1 {\n        return n\n    } else {\n  \
    \      return fib(n: n - 1) + fib(n: n - 2)\n    }", "    if n == 0 {\n      \
    \  return 0\n    } else if n == 1 {\n        return 1\n    } else {\n        return\
    \ fib(n: n - 1) + fib(n: n - 2)\n    }", "    if n == 0 {\n        return 0\n\
    \    } else if n == 1 {\n        return 1\n    } else {\n        return fib(n:\
    \ n - 1) + fib(n: n - 2)\n    }", "  var num1 = 0\n  var num2 = 1\n  if n == 0\
    \ {\n    return num1\n  }\n  for _ in 1..<n {\n    let num = num1 + num2\n   \
    \ num1 = num2\n    num2 = num\n  }\n  return num2", "  var (a, b) = (0, 1)\n \
    \ for _ in 0..<n {\n    (a, b) = (b, a + b)\n  }\n  return a", "    if n <= 2\
    \ {\n        return 1\n    }\n    var fib1 = 1\n    var fib2 = 1\n    var fib3\
    \ = 1\n    for _ in 3...n {\n        fib3 = fib1 + fib2\n        fib1 = fib2\n\
    \        fib2 = fib3\n    }\n    return fib3", "    if n == 0 {\n        return\
    \ 0\n    } else if n == 1 {\n        return 1\n    } else {\n        return fib(n:\
    \ n - 1) + fib(n: n - 2)\n    }", "    if n <= 2 {\n        return 1\n    }\n\
    \    return fib(n: n - 1) + fib(n: n - 2)", "    var a = 0\n    var b = 1\n  \
    \  var c = 0\n    guard n > 1 else { return n }\n    for _ in 2...n {\n      \
    \  c = a + b\n        a = b\n        b = c\n    }\n    return c", "    // TODO:\
    \ Implement it!\n    return 1", "    if n <= 2 {\n        return 1\n    } else\
    \ {\n        return fib(n: n - 1) + fib(n: n - 2)\n    }", "    if n == 0 {\n\
    \        return 0\n    } else if n == 1 {\n        return 1\n    } else {\n  \
    \      return fib(n: n - 1) + fib(n: n - 2)\n    }", "    var fib1 = 0\n    var\
    \ fib2 = 1\n    var fib = fib1 + fib2\n    for _ in 2..<n {\n        fib1 = fib2\n\
    \        fib2 = fib\n        fib = fib1 + fib2\n    }\n    return fib", "    if\
    \ n == 0 {\n        return 0\n    } else if n == 1 {\n        return 1\n    }\
    \ else {\n        return fib(n: n - 1) + fib(n: n - 2)\n    }", "    var a = 0\n\
    \    var b = 1\n    var i = 1\n    while i < n {\n        let temp = a\n     \
    \   a = b\n        b = temp + b\n        i += 1\n    }\n    return b", '    return
    n < 2 ? n : fib(n: n - 1) + fib(n: n - 2)', "    switch n {\n    case 0:\n   \
    \     return 0\n    case 1:\n        return 1\n    default:\n        return fib(n:\
    \ n - 1) + fib(n: n - 2)\n    }", "    if n <= 1 {\n        return n\n    }\n\
    \    return fib(n: n - 1) + fib(n: n - 2)", "  guard n > 0 else { return 0 }\n\
    \  guard n > 1 else { return 1 }\n  return fib(n: n - 1) + fib(n: n - 2)", " \
    \   switch n {\n    case 0, 1:\n        return n\n    default:\n        return\
    \ fib(n: n - 1) + fib(n: n - 2)\n    }", "    // TODO: implement\n    var fibNumber\
    \ = [0, 1]\n    var index = 2\n    guard n > 1 else {\n        return n\n    }\n\
    \    while index <= n {\n        fibNumber.append(fibNumber[index - 1] + fibNumber[index\
    \ - 2])\n        index += 1\n    }\n    return fibNumber[index - 1]", "    var\
    \ a = 0\n    var b = 1\n    for _ in 0..<n {\n        (a, b) = (b, a + b)\n  \
    \  }\n    return a", "    if n == 0 {\n        return 0\n    } else if n == 1\
    \ {\n        return 1\n    } else {\n        return fib(n: n - 1) + fib(n: n -\
    \ 2)\n    }", "    if n == 0 {\n        return 0\n    } else if n == 1 {\n   \
    \     return 1\n    } else {\n        return fib(n: n - 1) + fib(n: n - 2)\n \
    \   }", "    guard n > 1 else { return n }\n    return fib(n: n - 1) + fib(n:\
    \ n - 2)", "    \n    return n < 2 ? n : fib(n: n - 1) + fib(n: n - 2)", "   \
    \ if n <= 1 {\n        return n\n    }\n    return fib(n: n - 1) + fib(n: n -\
    \ 2)", "    var a = 0\n    var b = 1\n    for _ in 0..<n {\n        (a, b) = (b,\
    \ a + b)\n    }\n    return a", "    var a = 0\n    var b = 1\n    for _ in 1...n\
    \ {\n        (a, b) = (b, a + b)\n    }\n    return a", "    // Base cases\n \
    \   if n == 0 {\n        return 0\n    } else if n == 1 {\n        return 1\n\
    \    } else {\n        return fib(n: n - 1) + fib(n: n - 2)\n    }", "    \n \
    \   func fib1(n: Int, prev: Int, next: Int) -> Int {\n        if n == 0 {\n  \
    \          return prev\n        }\n        return fib1(n: n - 1, prev: next, next:\
    \ prev + next)\n    }\n    \n    return fib1(n: n, prev: 0, next: 1)", "    if\
    \ n == 0 {\n        return 0\n    } else if n == 1 {\n        return 1\n    }\
    \ else {\n        return fib(n: n - 1) + fib(n: n - 2)\n    }", '    return n
    < 2 ? n : fib(n: n - 1) + fib(n: n - 2)', "    if n <= 1 {\n        return n\n\
    \    }\n    return fib(n: n - 1) + fib(n: n - 2)", "    // TODO: Implement this\
    \ function\n    if n <= 1 {\n        return n\n    }\n    return fib(n: n - 1)\
    \ + fib(n: n - 2)", "    var a = 0\n    var b = 1\n    for _ in 1..<n {\n    \
    \    let t = a + b\n        a = b\n        b = t\n    }\n    return b", '    return
    n <= 1 ? n : fib(n: n - 1) + fib(n: n - 2)', "    if n == 0 {\n        return\
    \ 0\n    } else if n == 1 {\n        return 1\n    } else {\n        return fib(n:\
    \ n - 1) + fib(n: n - 2)\n    }", "    if n <= 2 {\n        return 1\n    }\n\
    \    var first = 1\n    var second = 1\n    var result = 0\n    for _ in 2..<n\
    \ {\n        result = first + second\n        first = second\n        second =\
    \ result\n    }\n    return result", "  guard n >= 3 else { return 1 }\n  var\
    \ i = 1\n  var j = 1\n  for _ in 3...n {\n    (i, j) = (j, i + j)\n  }\n  return\
    \ j", '  return 0', "    if n == 0 {\n        return 0\n    } else if n == 1 {\n\
    \        return 1\n    } else {\n        return fib(n: n - 1) + fib(n: n - 2)\n\
    \    }", "    if n == 0 {\n        return 0\n    } else if n == 1 {\n        return\
    \ 1\n    } else {\n        return fib(n: n - 1) + fib(n: n - 2)\n    }", "   \
    \ \n    if n == 0 {\n        return 0\n    }\n    \n    if n == 1 {\n        return\
    \ 1\n    }\n    \n    return fib(n: n - 1) + fib(n: n - 2)", "    guard n > 1\
    \ else { return n }\n    return fib(n: n - 1) + fib(n: n - 2)", "    if n <= 1\
    \ {\n        return n\n    }\n    return fib(n: n - 1) + fib(n: n - 2)", "   \
    \ guard n > 0 else { return 0 }\n    guard n > 1 else { return 1 }\n    return\
    \ fib(n: n - 1) + fib(n: n - 2)", "    if n == 0 {\n        return 0\n    } else\
    \ if n == 1 {\n        return 1\n    } else {\n        return fib(n: n - 1) +\
    \ fib(n: n - 2)\n    }", "    if n <= 2 {\n        return 1\n    }\n    return\
    \ fib(n: n - 1) + fib(n: n - 2)", "    var fib = (0, 1)\n    for _ in 0..<n {\n\
    \        fib = (fib.1, fib.0 + fib.1)\n    }\n    return fib.0"]
stop_tokens:
- "\n}"
