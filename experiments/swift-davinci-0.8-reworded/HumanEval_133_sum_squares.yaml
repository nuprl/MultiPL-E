name: HumanEval_133_sum_squares
language: swift
prompt: "\n/// You are given an array of numbers.\n/// You need to return the sum\
  \ of squared numbers in the given array,\n/// round each element in the array to\
  \ the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0, 2.0,\
  \ 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>> sum_squares(lst:\
  \ [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4, 4.2, 0.0])\n///\
  \ 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc sum_squares(lst: [Double])\
  \ -> Int {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\n\
  assert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0,\
  \ 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst:\
  \ [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
  assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
  \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9]) ==\
  \ 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0]) ==\
  \ 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
completions: ['    return Int(lst.map { ceil($0) }.map { $0 * $0 }.reduce(0, +))',
  "    var result = 0\n    for i in lst {\n        result += Int(ceil(i)) * Int(ceil(i))\n\
    \    }\n    return result", "    let sum = lst.map{ Int(ceil($0)) }.reduce(0)\
    \ { $0 + $1 * $1 }\n    return sum", "    var sum = 0\n    for i in lst {\n  \
    \      sum += Int(pow(i.rounded(.up), 2))\n    }\n    return sum", "    let result\
    \ = lst.map{ ceil($0) }.map{ $0 * $0 }.reduce(0, +)\n    return Int(result)",
  "    var total = 0\n    for number in lst {\n        let square = number.rounded(.up)\n\
    \        total += Int(square * square)\n    }\n    return total", '    return
    lst.map{abs($0)}.map{ceil($0)}.map{$0*$0}.reduce(0, +)', '    return lst.map {
    Int(ceil($0)) }.reduce(0) { $0 + $1 * $1 }', '    return lst.map { Int(($0).rounded(.up))
    }.reduce(0) { $0 + $1 * $1 }', '    return lst.map {Int(ceil($0))}.reduce(0) {$0
    + $1 * $1}', "    // code here\n    return 0", '    return lst.map{Int(ceil($0))}.reduce(0){$0
    + $1 * $1}', "    let ceiledList = lst.map { (element) -> Int in\n        return\
    \ Int(ceil(element))\n    }\n    let squaredList = ceiledList.map { (element)\
    \ -> Int in\n        return element * element\n    }\n    return squaredList.reduce(0,\
    \ +)", '    return lst.map { Int(ceil($0)) }.reduce(0) { $0 + $1 * $1 }', '  return
    lst.map { ceil($0) }.map { $0 * $0 }.reduce(0, +)', "    let ceilingElements =\
    \ lst.map {\n        Int(ceil($0))\n    }\n    let squaredElements = ceilingElements.map\
    \ {\n        $0 * $0\n    }\n    return squaredElements.reduce(0, +)", '    return
    lst.map{ Int(ceil($0)) }.reduce(0, +)', '    return lst.map { Int(ceil($0)) }.reduce(0)
    { $0 + $1 * $1 }', '    return lst.map { Int(ceil($0)) }.reduce(0) { $0 + $1 *
    $1 }', '    return lst.map{Int(ceil($0))}.reduce(0){$0 + $1 * $1}', '    return
    lst.map { ceil($0) }.map { Int($0 * $0) }.reduce(0, +)', '    return lst.map{Int(ceil($0))}.reduce(0,
    {$0 + $1 * $1})', "    var squares: [Int] = []\n    for value in lst {\n     \
    \   let rounded = Int(ceil(value))\n        squares.append(rounded * rounded)\n\
    \    }\n    return squares.reduce(0, +)", '    return lst.map{ Int(ceil($0)) }.reduce(0,
    { $0 + $1 * $1 })', "    var sum = 0.0\n    for i in lst {\n        sum += (i\
    \ * i).rounded(.up)\n    }\n    return Int(sum)", "    var sum = 0\n    for i\
    \ in lst {\n        sum += Int(ceil(i)) * Int(ceil(i))\n    }\n    return sum",
  '    return lst.map{Int(ceil($0))}.reduce(0, +)', '    return lst.map { Int(ceil($0))
    }.reduce(0) { $0 + $1 * $1 }', '    return Int(lst.map { ceil($0) }.map { $0 *
    $0 }.reduce(0, +))', "    var total = 0\n    for num in lst {\n        let new\
    \ = Int(ceil(num))\n        total += new * new\n    }\n    return total", "  \
    \  \n    var sum = 0\n    \n    for value in lst {\n        sum += Int(ceil(value))\
    \ * Int(ceil(value))\n    }\n    \n    return sum", '    return lst.map{Int(ceil($0))}.reduce(0,
    {$0 + $1 * $1})', '    return 0', "    var sum = 0\n    for num in lst {\n   \
    \     sum += Int(pow(ceil(num), 2))\n    }\n    return sum", "    var sum = 0\n\
    \    for num in lst {\n        let n = Int(ceil(num))\n        sum += n * n\n\
    \    }\n    return sum", '    return lst.map { Int(ceil($0)) }.reduce(0) { $0
    + $1 * $1 }', '    return lst.map { Int(ceil($0)) }.reduce(0) { $0 + $1 * $1 }',
  "    var sum = 0\n    for i in lst {\n        sum += Int(ceil(i)) * Int(ceil(i))\n\
    \    }\n    return sum", '    return lst.map { ceil($0) }.map { $0 * $0 }.reduce(0,
    +)', "    let result = lst.map { (Double($0.rounded(.up))) }\n    return result.map\
    \ { ($0 * $0) }.reduce(0, +)", '  return 0', "    var sum = 0\n    for element\
    \ in lst {\n        sum += Int(ceil(element * element))\n    }\n    return sum",
  "    var sum: Int = 0\n    for i in lst {\n        sum += Int(ceil(i * i))\n   \
    \ }\n    return sum", '    return lst.map { Int(ceil($0)) }.reduce(0) { $0 + $1
    * $1 }', "    var sum = 0\n    for num in lst {\n        sum += Int(ceil(num))\
    \ * Int(ceil(num))\n    }\n    return sum", "    let _list_ = lst.map{ ceil($0)\
    \ }\n    return _list_.map{ Int($0 * $0) }.reduce(0, +)", '    return lst.map
    { Int(ceil($0)) }.reduce(0) { $0 + $1 * $1 }', '    return Int(ceil(lst.map{ $0
    * $0 }.reduce(0, +)))', "    \n    var sum = 0\n    \n    for num in lst {\n \
    \       sum += Int(ceil(num) * ceil(num))\n    }\n    \n    return sum", "   \
    \ var total = 0\n    for i in lst {\n        total += Int(ceil(i * i))\n    }\n\
    \    return total", "    var result = 0\n    for i in lst {\n        result +=\
    \ Int(ceil(i)) * Int(ceil(i))\n    }\n    return result", "    var output = 0\n\
    \    for num in lst {\n        let numRounded = Int(ceil(num))\n        output\
    \ += numRounded * numRounded\n    }\n    return output", "    var square = [Int]()\n\
    \    for i in lst {\n        square.append(Int(ceil(i * i)))\n    }\n    return\
    \ square.reduce(0, +)", "    var numbers = [Int]()\n    var sum = 0\n    for item\
    \ in lst {\n        let number = Int(ceil(item))\n        numbers.append(number)\n\
    \    }\n    for item in numbers {\n        sum += item * item\n    }\n    return\
    \ sum", "    var result = 0\n    for element in lst {\n        if element < 0\
    \ {\n            result += Int(ceil(element * -1)) * Int(ceil(element * -1))\n\
    \        } else {\n            result += Int(ceil(element)) * Int(ceil(element))\n\
    \        }\n    }\n    return result", '  return lst.map { Int(ceil($0)) }.reduce(0)
    { $0 + $1 * $1 }', '  return lst.map { elem in Int(ceil(elem)) }.reduce(0) { $0
    + $1 * $1 }', "    var sum = 0\n    for item in lst {\n        sum += Int(ceil(item))\
    \ * Int(ceil(item))\n    }\n    return sum", "    let squares = lst.map { x in\
    \ x * x }\n    return squares.reduce(0, +)", '    return lst.map{Int(ceil($0))}.reduce(0){$0
    + ($1 * $1)}', '    return lst.map{ Int(ceil($0)) }.reduce(0, {$0 + ($1 * $1)})',
  "    var sum = 0\n    for i in lst {\n        let c = Int(ceil(i))\n        sum\
    \ += (c * c)\n    }\n    return sum", "    var sum = 0\n    for item in lst {\n\
    \        sum += Int(ceil(item)) * Int(ceil(item))\n    }\n    return sum", '    return
    Int(lst.map { Int(ceil($0)) }.reduce(0) { x, y in x + y * y })', '  return lst.map{
    Int(ceil($0)) }.reduce(0, {$0 + $1 * $1})', '  return lst.map{Int(ceil($0))}.reduce(0){$0
    + $1 * $1}', '    return lst.map{Int(ceil($0))}.reduce(0){ $0 + $1 * $1 }', '    return
    lst.map { Int(ceil($0)) }.reduce(0) { $0 + $1 * $1 }', '    return lst.map {Int(ceil($0))}.reduce(0)
    {$0 + $1 * $1}', "    var result = 0\n    for i in lst {\n        let newI = ceil(i)\n\
    \        result += Int(newI * newI)\n    }\n    return result", '    return Int(lst.map{$0.rounded(.up)}.map{$0
    * $0}.reduce(0, +))', "    var sum = 0\n    for number in lst {\n        sum +=\
    \ Int(ceil(number)) * Int(ceil(number))\n    }\n    return sum", "    var result\
    \ = 0\n    var list = lst\n    if list.count > 0 {\n        for i in 0...list.count\
    \ - 1 {\n            result += Int(list[i].rounded(.up)) * Int(list[i].rounded(.up))\n\
    \        }\n    }\n    return result", "    var result = 0\n    for i in lst {\n\
    \        result += Int(ceil(i)) * Int(ceil(i))\n    }\n    return result", " \
    \ var result = 0\n  for element in lst {\n    result += Int(ceil(element * element))\n\
    \  }\n  return result", "    var sum = 0\n    for i in lst {\n        sum += Int(ceil(i))\
    \ * Int(ceil(i))\n    }\n    return sum", '    return lst.map{Int(ceil($0))}.reduce(0,
    {$0 + $1 * $1})', '    return lst.map { ceil($0) }.map { $0 * $0 }.reduce(0, +)',
  '    return lst.map{Int(ceil($0))}.reduce(0){$0 + ($1 * $1)}', '    return Int(lst.map
    { ceil($0) }.map { $0 * $0 }.reduce(0, +))', "    var result = 0\n    for e in\
    \ lst {\n        result += Int(ceil(e)) * Int(ceil(e))\n    }\n    return result",
  "    var total = 0\n    for element in lst {\n        total += Int(ceil(element)\
    \ * ceil(element))\n    }\n    return total", '    return lst.map { Int(($0).rounded(.up))
    }.reduce(0) { $0 + $1 * $1 }', "    var sum = 0.0\n    for item in lst {\n   \
    \     sum += (item).rounded(.up) * (item).rounded(.up)\n    }\n    return Int(sum)",
  '    return 0', "    let lst = lst.map { Int(ceil($0)) }\n    return lst.reduce(0)\
    \ { $0 + $1 * $1 }", '    return lst.map { Int(ceil($0)) }.reduce(0) { $0 + $1
    * $1 }', "    let mappedList = lst.map { ceil($0) }\n    let result = mappedList.reduce(0,\
    \ {\n        $0 + Int(pow($1, 2))\n    })\n    return result", "    let result\
    \ = lst.map { $0.rounded(.up) }.map { $0 * $0 }.reduce(0, +)\n    return Int(result)",
  "    let sum = lst.map { $0.rounded(.up) }.reduce(0) { $0 + Int($1 * $1) }\n   \
    \ return sum", '  return lst.map({ Int(ceil($0))}).reduce(0, {x, y in x + y *
    y})', "    var sum = 0\n    for i in lst {\n        let number = ceil(i)\n   \
    \     sum += Int(pow(number, 2))\n    }\n    return sum", "    // TODO: Your code\
    \ here\n    return 0", '    return lst.map { $0.rounded(.up) }.map { $0 * $0 }.reduce(0,
    +)', '    return lst.map { $0.rounded(.up) }.map { $0 * $0 }.reduce(0, +)', '    return
    lst.map { ceil($0) }.map { $0 * $0 }.reduce(0, +)', "    var sum = 0\n    for\
    \ i in lst {\n        sum += Int(ceil(i)) * Int(ceil(i))\n    }\n    return sum",
  '    return lst.map { Int(ceil($0)) }.reduce(0) { $0 + ($1 * $1) }', '    return
    lst.map{Int(ceil($0))}.reduce(0, {$0 + $1 * $1})', "    return lst.map{ x in\n\
    \        return Int(ceil(x) * ceil(x))\n    }.reduce(0, +)", '    return Int(lst.map
    { ceil($0) }.map { $0 * $0 }.reduce(0, +))', "    var result = 0\n    for i in\
    \ lst {\n        result += Int(ceil(i)) * Int(ceil(i))\n    }\n    return result",
  "    var result = 0\n    for number in lst {\n        result += Int(ceil(number)\
    \ * ceil(number))\n    }\n    return result", "    var squareSum = 0\n    for\
    \ number in lst {\n        squareSum += Int(ceil(number)) * Int(ceil(number))\n\
    \    }\n    return squareSum", '    return lst.map { Int(ceil($0)) }.reduce(0)
    { $0 + $1 * $1 }', "    let result = lst.map { Int(ceil($0)) }.map { $0 * $0 }.reduce(0,\
    \ +)\n    return result", "    \n    var result = 0\n    \n    for element in\
    \ lst {\n        result += Int(ceil(element)) * Int(ceil(element))\n    }\n  \
    \  \n    return result", '    return lst.map { $0.rounded(.up) }.map { $0 * $0
    }.reduce(0, +)', "    var sum = 0\n    for index in 0..<lst.count {\n        sum\
    \ += Int(lst[index].rounded(.up)) * Int(lst[index].rounded(.up))\n    }\n    return\
    \ sum", '    return lst.map{ ceil($0) }.map{ Int($0 * $0) }.reduce(0, +)', " \
    \   var sum = 0\n    for item in lst {\n        sum += Int(ceil(item)) * Int(ceil(item))\n\
    \    }\n    return sum", '    return lst.map{Int(ceil($0))}.reduce(0){$0 + $1
    * $1}', "    // write your code here ...\n    var sum: Int = 0\n    for i in lst\
    \ {\n        var n = Int(ceil(i))\n        sum += n * n\n    }\n    return sum",
  '  return lst.map { Int(ceil($0)) }.reduce(0) { $0 + $1 * $1 }', "    var result\
    \ = 0\n    for num in lst {\n        result += Int(ceil(num) * ceil(num))\n  \
    \  }\n    return result", '    return lst.map { Int(ceil($0)) }.reduce(0) { $0
    + $1 * $1 }', '    return lst.map { ceil($0) }.map { $0 * $0 }.reduce(0, +)',
  '    return lst.map { Int(ceil($0)) }.reduce(0) { $0 + $1 * $1 }', '    return lst.map
    { Int(ceil($0)) }.reduce(0) { $0 + $1 * $1 }', "    // write your code here!\n\
    \    return 0", '    return 0', "    var sum = 0\n    for num in lst {\n     \
    \   sum += Int(ceil(num)) * Int(ceil(num))\n    }\n    return sum", '    return
    lst.map{ceil($0)}.map{$0 * $0}.reduce(0, {x, y in x + y})', "    var sum = 0\n\
    \    for n in lst {\n        sum += Int(ceil(n)) * Int(ceil(n))\n    }\n    return\
    \ sum", "    let ceilList = lst.map({return ceil($0)})\n    return ceilList.map({return\
    \ $0 * $0}).reduce(0, +)", '    return lst.map { ceil($0) }.map { $0 * $0 }.reduce(0,
    +)', '    return lst.map { Int(ceil($0)) }.reduce(0) { $0 + $1 * $1 }', '    return
    lst.map{Int(ceil($0))}.reduce(0, {$0 + $1 * $1})', '    return Int(lst.map{ pow(Ceil($0),
    2) }.reduce(0, combine: +))', '    return 0', '    return lst.map { Double(ceil($0))
    }.map { $0 * $0 }.reduce(0, +)', '    return Int(lst.map { pow(ceil($0), 2) }.reduce(0,
    +))', "    var result = 0\n    for e in lst {\n        let ceil = ceil(e)\n  \
    \      let square = ceil * ceil\n        result += Int(square)\n    }\n    return\
    \ result", "    var s: Int = 0\n    for v in lst {\n        s += Int(pow(ceil(v),\
    \ 2))\n    }\n    return s", "    let ceiled = lst.map { ceil($0) }\n    return\
    \ ceiled.map { $0 * $0 }.reduce(0, +)", "  var sum = 0\n  for num in lst {\n \
    \   sum += Int(ceil(num * num))\n  }\n  return sum", "    var output = 0\n   \
    \ for i in lst {\n        output += Int(ceil(i*i))\n    }\n    return output",
  '    return Int(lst.map { ceil($0) }.map { $0 * $0 }.reduce(0, +))', '  return lst.map
    { Int(ceil($0)) }.reduce(0) { $0 + $1 * $1 }', '    return 0', "    // Your code\
    \ is here.\n    var sum : Int = 0\n    for i in lst {\n        sum += Int(pow(ceil(i),\
    \ 2))\n    }\n    return sum", "    let elements = lst.map({ Int(ceil($0)) })\n\
    \    let total = elements.reduce(0, { $0 + ($1 * $1) })\n    return total", " \
    \   \n    let upperCeiling = lst.map { ceil($0) }\n    let sum = upperCeiling.reduce(0)\
    \ { $0 + Int($1 * $1) }\n    return sum", '    return lst.map { Int(ceil($0))
    }.reduce(0) { $0 + $1 * $1 }', "    var result = 0\n    for var item in lst {\n\
    \        item = ceil(item)\n        result += Int(pow(item, 2))\n    }\n    return\
    \ result", '    return lst.map { $0.rounded(.up) }.map { $0 * $0 }.reduce(0, +)',
  "    var total = 0\n    for num in lst {\n        total += Int(ceil(num) * ceil(num))\n\
    \    }\n    return total", '    return lst.map { Int(ceil($0)) }.reduce(0) { $0
    + $1 * $1 }', '    return lst.map{Int(ceil($0))}.reduce(0){$0 + $1 * $1}', " \
    \   var sum = 0\n    for num in lst {\n        let roundedNum = Int(ceil(num))\n\
    \        sum += (roundedNum * roundedNum)\n    }\n    return sum", "    let sum\
    \ = lst.map{Int(ceil($0))}.reduce(0, { $0 + ($1 * $1) })\n    return sum", " \
    \   let lstOfInts = lst.map{Int(ceil($0))}\n    let mapped = lstOfInts.map{$0\
    \ * $0}\n    let result = mapped.reduce(0){$0 + $1}\n    return result", '    return
    lst.map{Int(ceil($0))}.reduce(0){$0 + ($1 * $1)}', '  return 0', "    // your\
    \ code here\n    return 0", "    var sum = 0\n    for num in lst {\n        sum\
    \ += Int(pow(ceil(num), 2))\n    }\n    return sum", '    return lst.map{Int(ceil($0))}.reduce(0){$0
    + $1 * $1}', "    return lst.map { (elem) -> Int in\n        return Int(elem.rounded(.up))\n\
    \    }.reduce(0) { (cur, next) -> Int in\n        return cur + Int(pow(Double(next),\
    \ 2))\n    }", "    var sum = 0\n    for num in lst {\n        sum += Int(ceil(num))\
    \ * Int(ceil(num))\n    }\n    return sum", '  return lst.map{Int(ceil($0))}.reduce(0){$0
    + $1 * $1}', '    return lst.map{ ceil($0) }.map{ $0 * $0 }.reduce(0, +)', '    return
    lst.map { Int(ceil($0)) }.reduce(0) { $0 + $1 * $1 }', '    return lst.map { Int(ceil($0))
    }.reduce(0) { $0 + ($1 * $1) }', '    return 0', "    var answer = 0\n    for\
    \ num in lst {\n        answer += Int(ceil(num * num))\n    }\n    return answer",
  '    return lst.map {Int(ceil($0))}.reduce(0) {$0 + $1 * $1}', '    return Int(lst.map{
    ceil($0) }.map{ $0 * $0 }.reduce(0, +))', "    var result = 0\n    for value in\
    \ lst {\n        result += Int(ceil(value)) * Int(ceil(value))\n    }\n    return\
    \ result", "    let n = lst.count\n    var sum: Int = 0\n    for i in 0..<n {\n\
    \        let num = Int(ceil(lst[i]))\n        sum += num * num\n    }\n    return\
    \ sum", '    return lst.map{Int(ceil($0))}.reduce(0, {$0 + $1 * $1})', "    var\
    \ sum: Int = 0\n    for item in lst {\n        let result = item * item\n    \
    \    sum += Int(ceil(result))\n    }\n    return sum", "    var sum: Double =\
    \ 0\n    for i in lst {\n        sum += ceil(i) * ceil(i)\n    }\n    return Int(sum)",
  "    var total = 0\n    for i in lst {\n        total += Int(i.rounded(.up))\n \
    \   }\n    return total", "    let squared_array = lst.map{ item in pow(ceil(item),\
    \ 2) }\n    return squared_array.reduce(0, +)", "    var sum = 0\n    for element\
    \ in lst {\n        sum += Int(ceil(element) * ceil(element))\n    }\n    return\
    \ sum", "    var result = 0\n    for item in lst {\n        result += Int(ceil(item))\
    \ * Int(ceil(item))\n    }\n    return result", "    var result = 0.0\n    for\
    \ num in lst {\n        result += ceil(num * num)\n    }\n    return Int(result)",
  "    let numbers = lst.map { Int(ceil($0)) }\n    let sum = numbers.reduce(0) {\
    \ $0 + $1 * $1 }\n    return sum", '    return 0', "    //    return lst.map{(x)\
    \ -> Int in return Int(x.rounded(.up))}\n    //        .map{(x) -> Int in return\
    \ x * x}\n    //        .reduce(0, +)\n    return lst.map{ Int($0.rounded(.up))\
    \ }\n        .map{ $0 * $0 }\n        .reduce(0, +)", "    var sum: Int = 0\n\
    \    for i in lst {\n        sum += Int(ceil(i * i))\n    }\n    return sum",
  '    return lst.map { Int(ceil($0)) }.reduce(0) { $0 + ($1 * $1) }', "  var sum:\
    \ Int = 0\n  for var i in lst {\n    sum += Int(ceil(i) * ceil(i))\n  }\n  return\
    \ sum", "    let squares = lst.map { ceil($0) }.map { $0 * $0 }\n    return squares.reduce(0,\
    \ +)", '    return Int(lst.map { pow(ceil($0), 2) }.reduce(0, +))', "    let result\
    \ = lst.map { (element) -> Int in\n        return Int(ceil(element))\n    }\n\
    \    return result.reduce(0) { (result, element) -> Int in\n        return result\
    \ + element * element\n    }", "    var sum = 0\n    for n in lst {\n        sum\
    \ += Int(ceil(n) * ceil(n))\n    }\n    return sum", '    return lst.map { ($0
    < 0) ? Int(ceil($0)) : Int(floor($0)) }.reduce(0) { $0 + $1 * $1 }', "    var\
    \ sum = 0.0\n    for x in lst {\n        sum += pow(ceil(x), 2)\n    }\n    return\
    \ Int(sum)", '    return 0', "    var sum = 0\n    for i in lst {\n        sum\
    \ += Int(ceil(i)) * Int(ceil(i))\n    }\n    return sum", '  return 0', "    var\
    \ sum = 0\n    for num in lst {\n        sum += Int(ceil(num)) * Int(ceil(num))\n\
    \    }\n    return sum", '    return lst.map { Int(ceil($0)) }.reduce(0) {$0 +
    $1 * $1}', "    var sum = 0\n    for num in lst {\n        sum += Int(ceil(num))\n\
    \    }\n    return sum", '    return lst.map{Int(ceil($0))}.reduce(0, {$0 + $1
    * $1})', "    var num = [Int]()\n    for i in lst {\n        num.append(Int(ceil(i)))\n\
    \    }\n    var result = 0\n    for i in num {\n        result += i * i\n    }\n\
    \    return result", '    return lst.map{Double(ceil($0))}.map{$0 * $0}.reduce(0,
    +)', '    return lst.map { (Double($0.rounded(.up)).rounded()) * Double($0.rounded(.up)).rounded()
    }.reduce(0,+)', '    return lst.map { $0.rounded(.up) }.map { $0 * $0 }.reduce(0,
    +)']
stop_tokens:
- "\n}"
