name: HumanEval_14_all_prefixes
language: swift
prompt: "\n/// Return array of all prefixes from shortest to longest of the input\
  \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
  func all_prefixes(string: String) -> [String] {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\n\
  assert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"\
  asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"\
  WWW\"])"
completions: ['    return Array(stride(from: 1, to: string.count + 1, by: 1)).map
    {string.prefix($0)}', "  var prefixes = [String]()\n  for i in 0..<string.count\
    \ {\n    prefixes.append(String(string[..<string.index(string.startIndex, offsetBy:\
    \ i)]))\n  }\n  return prefixes", "    var prefixes = [String]()\n    for i in\
    \ 0..<string.count {\n        prefixes.append(String(string[0..<i+1]))\n    }\n\
    \    return prefixes", "    var result = [String]()\n    for i in 0..<string.count\
    \ {\n        result.append(String(string[..<string.index(string.startIndex, offsetBy:\
    \ i)]))\n    }\n    return result", "    var prefixes: [String] = []\n    for\
    \ index in 1...string.count {\n        prefixes.append(String(string[...string.index(string.startIndex,\
    \ offsetBy: index - 1)]))\n    }\n    return prefixes", "    var result = [String]()\n\
    \    for (i, c) in string.enumerated() {\n        let prefix = String(string[..<string.index(string.startIndex,\
    \ offsetBy: i + 1)])\n        result.append(prefix)\n    }\n    return result",
  "    var result: [String] = []\n    for i in 1...string.count {\n        result.append(String(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: i)]))\n    }\n    return result", '    return Array(string.enumerated().map
    { i, _ in String(string[string.startIndex..<string.index(string.startIndex, offsetBy:
    i+1)]) })', "    var prefixes = [String]()\n    for i in 0...string.count {\n\
    \        let index = string.index(string.startIndex, offsetBy: i)\n        prefixes.append(String(string[..<index]))\n\
    \    }\n    return prefixes", "    var result: [String] = []\n    for i in 0..<string.count\
    \ {\n        result.append(String(string[..<string.index(string.startIndex, offsetBy:\
    \ i + 1)]))\n    }\n    return result", "    let characters = Array(string)\n\
    \    var prefixes: [String] = []\n    for index in 0..<characters.count {\n  \
    \      prefixes.append(String(characters[0...index]))\n    }\n    return prefixes",
  "    return stride(from: 0, to: string.count, by: 1).map {\n        return String(string[string.startIndex\
    \ ..< string.index(string.startIndex, offsetBy: $0)])\n    }", "    var prefixes:\
    \ [String] = []\n    for i in 0...string.characters.count {\n        let prefix\
    \ = string.substring(to: string.index(string.startIndex, offsetBy: i))\n     \
    \   prefixes.append(prefix)\n    }\n    return prefixes", "    var all = [String]()\n\
    \    var start = string.startIndex\n    while start != string.endIndex {\n   \
    \     all.append(String(string[start...]))\n        start = string.index(after:\
    \ start)\n    }\n    return all", '    return (1...string.count).map { string.prefix($0)
    }', '    return (1...string.characters.count).map { string.substringToIndex(string.startIndex.advancedBy($0))
    }', '    return string.indices.map { idx in String(string[..<idx]) }', "    var\
    \ result = [String]()\n    for i in 0...string.count {\n        result.append(String(string[..<string.index(string.startIndex,\
    \ offsetBy: i)]))\n    }\n    return result", "    let length = string.count\n\
    \    let string = Array(string)\n    var output: [String] = []\n    for i in 0..<length\
    \ {\n        output.append(String(string[0...i]))\n    }\n    return output",
  "    var result: [String] = []\n    for i in 1...string.count {\n        result.append(String(string[..<string.index(string.startIndex,\
    \ offsetBy: i)]))\n    }\n    return result", "    var prefixes = [String]()\n\
    \    for index in 0..<string.count {\n        prefixes.append(string[0..<index])\n\
    \    }\n    return prefixes", "    let count = string.count\n    var results =\
    \ [String]()\n    for i in 1...count {\n        results.append(String(string.prefix(i)))\n\
    \    }\n    return results", "    return string.enumerated().compactMap { (index,\
    \ char) -> String? in\n        guard index != string.count else { return nil }\n\
    \        return String(string[..<string.index(string.startIndex, offsetBy: index\
    \ + 1)])\n    }", '    return string.map { $0 }.reduce([]) { $0 + [$0.last! +
    String($1)] }', "    var result = [String]()\n    for i in 0..<string.count {\n\
    \        result.append(String(string[string.startIndex...string.index(string.startIndex,\
    \ offsetBy: i)]))\n    }\n    return result", "    var ret = [String]()\n    var\
    \ tmp = string\n    while tmp.characters.count > 0 {\n        ret.append(tmp)\n\
    \        tmp.remove(at: tmp.startIndex)\n    }\n    return ret", "    var prefixes:\
    \ [String] = []\n    for i in 0...string.count - 1 {\n        prefixes.append(string.prefix(i+1))\n\
    \    }\n    return prefixes", "    var prefixes: [String] = []\n    for i in (0..<string.count)\
    \ {\n        prefixes.append(String(string[..<string.index(string.startIndex,\
    \ offsetBy: i)]))\n    }\n    return prefixes", "    let characters = Array(string)\n\
    \    var prefixes: [String] = []\n    for i in 0..<characters.count {\n      \
    \  prefixes.append(String(characters[0...i]))\n    }\n    return prefixes", " \
    \   var prefixes: [String] = []\n    let characters = Array(string)\n    for i\
    \ in 0..<characters.count {\n        let index = characters.index(characters.startIndex,\
    \ offsetBy: i)\n        prefixes.append(String(characters[..<index]))\n    }\n\
    \    return prefixes", "    let length = string.count\n    return (0..<length).map\
    \ { string.prefix($0 + 1) }", "    var result: [String] = []\n    for i in 0..<string.count\
    \ {\n        result.append(string.prefix(i+1))\n    }\n    return result", " \
    \   var prefixes = [String]()\n    let length = string.count\n    if length ==\
    \ 0 {\n        return []\n    }\n    for i in 0..<length {\n        prefixes.append(string.prefix(i\
    \ + 1))\n    }\n    return prefixes", "    let chars = string.characters\n   \
    \ var result: [String] = []\n    for i in 0..<chars.count {\n        result.append(string.substring(to:\
    \ string.index(string.startIndex, offsetBy: i+1)))\n    }\n    return result",
  "    var prefixes = [String]()\n    for index in 0..<string.count {\n        prefixes.append(String(string[..<string.index(string.startIndex,\
    \ offsetBy: index)]))\n    }\n    return prefixes", "    var result = [String]()\n\
    \    for i in 0..<string.count {\n        result.append(String(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: i + 1)]))\n    }\n    return result", '  return sequence(first: "")
    { $0.characters.count < string.characters.count ? $0 + "\(string[$0.characters.count])"
    : nil }', "    var array = [String]()\n    for i in 0..<string.count {\n     \
    \   array.append(string.substr(to: string.index(string.startIndex, offsetBy: i\
    \ + 1)))\n    }\n    return array", "    var result: [String] = []\n    for index\
    \ in 0..<string.count {\n        result.append(string[..<string.index(string.startIndex,\
    \ offsetBy: index)])\n    }\n    return result", "    var list = [String]()\n\
    \    var prefix = \"\"\n    for char in string {\n        prefix += String(char)\n\
    \        list.append(prefix)\n    }\n    return list", '    return stride(from:
    1, to: string.count + 1, by: 1).map { string.prefix($0) }', "    var result: [String]\
    \ = []\n    for i in 0..<string.count {\n        result.append(String(string[..<string.index(string.startIndex,\
    \ offsetBy: i + 1)]))\n    }\n    return result", "    let max_size = string.count\n\
    \    var result = [String]()\n    for i in 0..<max_size {\n        result.append(\
    \ String(string[..<string.index(string.startIndex, offsetBy: i)]) )\n    }\n \
    \   return result", "    let length = string.count\n    var list = [String]()\n\
    \    for index in 1...length {\n        list.append(string.prefix(index))\n  \
    \  }\n    return list", "    var output: [String] = []\n    for i in 1...string.count\
    \ {\n        output.append(string.prefix(i))\n    }\n    return output", "   \
    \ let length = string.count\n    var prefixes = [String]()\n    for i in 0..<length\
    \ {\n        prefixes.append(String(string[..<string.index(string.startIndex,\
    \ offsetBy: i)]))\n    }\n    return prefixes", "    var result = [String]()\n\
    \    for i in 0..<string.count {\n        result.append(String(string[..<string.index(string.startIndex,\
    \ offsetBy: i + 1)]))\n    }\n    return result", "    return (1...string.count).map\
    \ {\n        let end = string.index(string.startIndex, offsetBy: $0)\n       \
    \ return String(string[..<end])\n    }", "    var result: [String] = []\n    for\
    \ i in 0..<string.count {\n        result.append(String(string[..<string.index(string.startIndex,\
    \ offsetBy: i + 1)]))\n    }\n    return result", '  return (1...string.count).map
    { string.prefix($0) }', "    var result = [String]()\n    for i in 0..<string.count\
    \ {\n        result.append(String(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: i+1)]))\n    }\n    return result", "    if string.isEmpty {\n   \
    \     return []\n    }\n    var prefixes = [String]()\n    for i in 1...string.count\
    \ {\n        prefixes.append(String(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: i)]))\n    }\n    return prefixes", "    let size = string.count\n\
    \    var output = [String]()\n    for i in 0..<size {\n        output.append(String(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: i + 1)]))\n    }\n    return output", "    let characters = Array(string)\n\
    \    var result: [String] = []\n    for i in 0..<characters.count {\n        result.append(string.substring(to:\
    \ string.index(string.startIndex, offsetBy: i + 1)))\n    }\n    return result",
  "    var array = [String]()\n    let numOfChars = string.count\n    for index in\
    \ 0..<numOfChars {\n        let startIndex = string.index(string.startIndex, offsetBy:\
    \ index)\n        let endIndex = string.index(string.startIndex, offsetBy: index\
    \ + 1)\n        let substring = string[startIndex..<endIndex]\n        array.append(String(substring))\n\
    \    }\n    return array", "    var prefixes = [String]()\n    for i in 0..<string.count\
    \ {\n        prefixes.append(String(string[..<string.index(string.startIndex,\
    \ offsetBy: i + 1)]))\n    }\n    return prefixes", "    var arr = [String]()\n\
    \    let len = string.count\n    for i in 0..<len {\n        arr.append(String(string[string.startIndex...string.index(string.startIndex,\
    \ offsetBy: i)]))\n    }\n    return arr", "    let splits = string.split(separator:\
    \ \" \")\n    var all_splits = [String]()\n    for split in splits {\n       \
    \ for char in split {\n            all_splits.append(String(char))\n        }\n\
    \    }\n    var all_prefixes = [String]()\n    for split in all_splits {\n   \
    \     for prefix_length in 1...split.count {\n            all_prefixes.append(String(split.prefix(prefix_length)))\n\
    \        }\n    }\n    return all_prefixes", "    var result = [String]()\n  \
    \  for i in 0..<string.count {\n        result.append(String(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: i+1)]))\n    }\n    return result", "    var prefixes: [String] =\
    \ []\n    var prefix: String = \"\"\n    for c in string {\n        prefix +=\
    \ String(c)\n        prefixes.append(prefix)\n    }\n    return prefixes", " \
    \   var prefixes: [String] = []\n    for i in 0..<string.count {\n        prefixes.append(String(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: i + 1)]))\n    }\n    return prefixes", "    var all_prefixes: [String]\
    \ = []\n    for i in 1...string.count {\n        all_prefixes.append(String(string.prefix(i)))\n\
    \    }\n    return all_prefixes", "    let length = string.count\n    let allPrefixes\
    \ = stride(from: 1, to: length, by: 1).map({ index in\n        string.prefix(index)\n\
    \    })\n    return allPrefixes.map({ String($0) })", "    let stringLen = string.count\n\
    \    let expectedLen = stringLen * (stringLen + 1) / 2\n    var data = [String](repeating:\
    \ \"\", count: expectedLen)\n    for i in 0..<stringLen {\n        for j in i..<stringLen\
    \ {\n            data[(i * (i + 1) / 2) + j - i] = string[string.index(string.startIndex,\
    \ offsetBy: i)..<string.index(string.startIndex, offsetBy: j + 1)]\n        }\n\
    \    }\n    return data", "    let length = string.count\n    return (0..<length).map({String(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: $0 + 1)])})", '    return (1...string.count).map { i in string.prefix(i)
    }', '    return (1...string.count).map { string.prefix($0) }', "    var ret =\
    \ [String]()\n    for index in string.indices {\n        ret.append(String(string[..<index]))\n\
    \    }\n    return ret", '    return (1...string.count).map { string.prefix($0)
    }', "    return stride(from: 1, to: string.count, by: 1).map {\n        let start\
    \ = string.index(string.startIndex, offsetBy: $0)\n        let end = string.index(string.endIndex,\
    \ offsetBy: 0)\n        return String(string[start..<end])\n    }", "    if string.isEmpty\
    \ {\n        return []\n    } else {\n        let prefix = string.prefix(1)\n\
    \        let prefix_string = prefix.description\n        return [prefix_string]\
    \ + all_prefixes(string: String(string.dropFirst()))\n    }", '    return (1...string.count).map
    { String(string.prefix($0)) }', "    var result = [String]()\n    for (index,\
    \ _) in string.enumerated() {\n        let start = string.index(string.startIndex,\
    \ offsetBy: index)\n        let end = string.index(string.endIndex, offsetBy:\
    \ -(string.count - 1 - index))\n        let range = start..<end\n        result.append(String(string[range]))\n\
    \    }\n    return result", "    var result: [String] = []\n    for i in 0..<string.count\
    \ {\n        result.append(String(string[..<string.index(string.startIndex, offsetBy:\
    \ i)]))\n    }\n    return result", "    let max = string.characters.count\n \
    \   var result = [String]()\n    for i in 0..<max {\n        result.append(string.substring(to:\
    \ string.index(string.startIndex, offsetBy: i + 1)))\n    }\n    return result",
  '    return (1...string.count).map { string.prefix($0) }', "    var prefixes = [String]()\n\
    \    for i in 0...string.count {\n        let index = string.index(string.startIndex,\
    \ offsetBy: i)\n        prefixes.append(String(string[..<index]))\n    }\n   \
    \ return prefixes", "    return stride(from: 1, to: string.count, by: 1).map {\n\
    \        string.prefix($0)\n    }", "    var start = 0\n    var end = string.count\n\
    \    var suffixes = [String]()\n    while end > start {\n        let startIndex\
    \ = string.index(string.startIndex, offsetBy: start)\n        let endIndex = string.index(string.startIndex,\
    \ offsetBy: end)\n        let subStr = String(string[startIndex..<endIndex])\n\
    \        suffixes.append(subStr)\n        end -= 1\n    }\n    return suffixes",
  '    return (1...string.count).map { string.substring(from: string.index(string.startIndex,
    offsetBy: $0)) }', "    var result: [String] = []\n    for index in 1...string.count\
    \ {\n        result.append(String(string[..<string.index(string.startIndex, offsetBy:\
    \ index)]))\n    }\n    return result", "    var prefixes = [String]()\n    for\
    \ i in 0..<string.count {\n        prefixes.append(String(string[..<string.index(string.startIndex,\
    \ offsetBy: i)]))\n    }\n    return prefixes", "    return string.enumerated().map\
    \ { index, _ in\n        string.prefix(index + 1)\n    }", "    var prefixes:\
    \ [String] = []\n    for i in 0...string.count {\n        prefixes.append(String(string[..<string.index(string.startIndex,\
    \ offsetBy: i)]))\n    }\n    return prefixes", "    let length = string.characters.count\n\
    \    var range: Range<String.Index>\n    var prefixes = [String]()\n    for i\
    \ in 0..<length {\n        range = string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: i+1)\n        prefixes.append(string.substring(with: range))\n   \
    \ }\n    return prefixes", "    var result = [String]()\n    for i in 0..<string.count\
    \ {\n        result.append(string.prefix(i + 1))\n    }\n    return result", " \
    \   var prefixes = [String]()\n    for (index, _) in string.enumerated() {\n \
    \       prefixes.append(String(string[..<string.index(string.startIndex, offsetBy:\
    \ index + 1)]))\n    }\n    return prefixes", "  return string.indices.map { i\
    \ in\n    return string[string.startIndex...i]\n  }", "    var i = 0\n    var\
    \ result = [String]()\n    while i < string.characters.count {\n        result.append(string.substring(to:\
    \ string.index(string.startIndex, offsetBy: i)))\n        i += 1\n    }\n    return\
    \ result", "    var prefixes = [String]()\n    let char_count = string.count\n\
    \    for i in 0..<char_count {\n        prefixes.append(String(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: i+1)]))\n    }\n    return prefixes", '    return (1...string.count).map
    { string.substring(to: $0) }', '  return stride(from: 1, to: string.count, by:
    1).map { string.prefix($0) }', "    var prefixes = [String]()\n    for i in 1...string.count\
    \ {\n        prefixes.append(String(string.prefix(i)))\n    }\n    return prefixes",
  "    var result = [String]()\n    for i in 0..<string.count {\n        result.append(String(string[string.startIndex...string.index(string.startIndex,\
    \ offsetBy: i)]))\n    }\n    return result", '    return stride(from: 0, to:
    string.characters.count, by: 1).map { String(string.characters.prefix($0)) }',
  "    var result: [String] = []\n    let last_index = string.endIndex\n    for index\
    \ in string.indices {\n        result.append(string[string.startIndex...index])\n\
    \    }\n    return result", "    var result: [String] = []\n    for i in 0..<string.count\
    \ {\n        result.append(string.substring(to: string.index(string.startIndex,\
    \ offsetBy: i+1)))\n    }\n    return result", "    var ret : [String] = []\n\
    \    for i in 1...string.characters.count {\n        ret.append(string.substring(to:\
    \ string.index(string.startIndex, offsetBy: i)))\n    }\n    return ret", "  \
    \  let chars = string.characters\n    let length = chars.count\n    var prefixes\
    \ = [String]()\n    for i in 0..<length {\n        let startIndex = chars.startIndex\n\
    \        let iChars = chars.suffix(from: chars.index(startIndex, offsetBy: i))\n\
    \        prefixes.append(String(iChars))\n    }\n    return prefixes", "  var\
    \ result: [String] = []\n  for i in 0...string.count {\n    result.append(String(string[..<string.index(string.startIndex,\
    \ offsetBy: i)]))\n  }\n  return result", "  var array = [String]()\n  for i in\
    \ 0..<string.count {\n    array.append(String(string[..<string.index(string.startIndex,\
    \ offsetBy: i)]))\n  }\n  return array", "    var result = [String]()\n    for\
    \ i in 0..<string.count {\n        result.append(string.prefix(i+1))\n    }\n\
    \    return result", "    var result: [String] = []\n    for i in 0..<string.characters.count\
    \ {\n        result.append(string.substring(to: string.index(string.startIndex,\
    \ offsetBy: i + 1)))\n    }\n    return result", "    var prefixes = [String]()\n\
    \    for (i, _) in string.enumerated() {\n        let index = string.index(string.startIndex,\
    \ offsetBy: i)\n        prefixes.append(String(string[..<index]))\n    }\n   \
    \ return prefixes", "    var prefixes = [String]()\n    for index in 1...string.count\
    \ {\n        prefixes.append(string.prefix(index))\n    }\n    return prefixes",
  "    var result = [String]()\n    for i in 0..<string.count {\n        result.append(String(string[..<string.index(string.startIndex,\
    \ offsetBy: i)]))\n    }\n    return result", "    var prefixes = [String]()\n\
    \    for i in 0..<string.count {\n        prefixes.append(String(string[string.startIndex...string.index(string.startIndex,\
    \ offsetBy: i)]))\n    }\n    return prefixes", "    var result: [String] = []\n\
    \    for char in string {\n        let last = result.last ?? \"\"\n        result.append(last\
    \ + String(char))\n    }\n    return result", '    return (1...string.count).map
    { string.prefix($0) }', "    let length = string.count\n    return (0..<length).map\
    \ {\n        let start = string.index(string.startIndex, offsetBy: $0)\n     \
    \   let end = string.index(string.startIndex, offsetBy: length - $0)\n       \
    \ return String(string[start..<end])\n    }", "    var result = [String]()\n \
    \   for i in 1...string.count {\n        result.append(String(string[..<string.index(string.startIndex,\
    \ offsetBy: i)]))\n    }\n    return result", "    return Array(0...string.count).map\
    \ {\n        string.prefix($0)\n    }", "    var strings = [String]()\n    for\
    \ i in 0..<string.count {\n        strings.append(String(string[..<string.index(string.startIndex,\
    \ offsetBy: i)]))\n    }\n    return strings", "    return stride(from: 1, to:\
    \ string.characters.count + 1, by: 1).map {\n        index -> String in\n    \
    \    let start = string.index(string.startIndex, offsetBy: 0)\n        let end\
    \ = string.index(string.startIndex, offsetBy: index)\n        return string.substring(with:\
    \ start..<end)\n    }", "    var result: [String] = []\n    for (index, _) in\
    \ string.enumerated() {\n        result.append(String(string[..<string.index(string.startIndex,\
    \ offsetBy: index + 1)]))\n    }\n    return result", "    var result: [String]\
    \ = []\n    for i in 0...string.count {\n        let start = string.index(string.startIndex,\
    \ offsetBy: 0)\n        let end = string.index(string.startIndex, offsetBy: i)\n\
    \        let range = start..<end\n        result.append(String(string[range]))\n\
    \    }\n    return result", "    let results = (1...string.characters.count).flatMap\
    \ {\n        string.substring(to: string.index(string.startIndex, offsetBy: $0))\n\
    \    }\n    return results", "    var result = [String]()\n    for index in 0..<string.count\
    \ {\n        result.append(String(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: index + 1)]))\n    }\n    return result", "    var result = [String]()\n\
    \    for i in 1...string.count {\n        result.append(String(string[..<string.index(string.startIndex,\
    \ offsetBy: i)]))\n    }\n    return result", "    var result = [String]()\n \
    \   for length in 1...string.count {\n        result.append(string.substring(to:\
    \ string.index(string.startIndex, offsetBy: length)))\n    }\n    return result",
  "    var result: [String] = []\n    for i in 0..<string.count {\n        result.append(String(string[..<string.index(string.startIndex,\
    \ offsetBy: i)]))\n    }\n    return result", "    return Array(0..<string.count).map\
    \ {\n        let start = string.index(string.startIndex, offsetBy: $0)\n     \
    \   let end = string.index(string.endIndex, offsetBy: $0 - string.count)\n   \
    \     return String(string[start..<end])\n    }", "    let charLength = string.characters.count\n\
    \    return (0..<charLength).map { string.substring(to: string.index(string.startIndex,\
    \ offsetBy: $0)) }", "  var result: [String] = []\n  for i in 0...string.characters.count\
    \ {\n    result.append(string.substring(to: string.index(string.startIndex, offsetBy:\
    \ i)))\n  }\n  return result", "    var result: [String] = []\n    let count =\
    \ string.count\n    for i in 0 ..< count {\n        result.append(string.substring(from:\
    \ i))\n    }\n    return result", "    var chars = Array(string)\n    var prefixes\
    \ = [String]()\n    for i in 0..<chars.count {\n        let prefix = String(chars[0...i])\n\
    \        prefixes.append(prefix)\n    }\n    return prefixes", "    var arr: [String]\
    \ = []\n    for i in 0...string.count {\n        arr.append(String(string[..<string.index(string.startIndex,\
    \ offsetBy: i)]))\n    }\n    return arr", "    var result: [String] = []\n  \
    \  for i in 1...string.characters.count {\n        result.append(string.substring(to:\
    \ string.index(string.startIndex, offsetBy: i)))\n    }\n    return result", " \
    \   let stringLength = string.count\n    var result: [String] = []\n    for i\
    \ in 1...stringLength {\n        result.append(String(string[..<string.index(string.startIndex,\
    \ offsetBy: i)]))\n    }\n    return result", "    var prefixes = [String]()\n\
    \    for index in 0..<string.count {\n        prefixes.append(String(string[string.startIndex...string.index(string.startIndex,\
    \ offsetBy: index)]))\n    }\n    return prefixes", "    return string.characters.indices.map\
    \ {\n        string.substringToIndex($0)\n    }", "    var prefixes: [String]\
    \ = []\n    for index in 0..<string.count {\n        prefixes.append(String(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: index + 1)]))\n    }\n    return prefixes", "    if string.isEmpty\
    \ {\n        return []\n    }\n    var prefixes = [String]()\n    for i in 1...string.count\
    \ {\n        prefixes.append(string.prefix(i))\n    }\n    return prefixes", " \
    \   var prefixes = [String]()\n    for i in 1...string.count {\n        prefixes.append(string.prefix(i))\n\
    \    }\n    return prefixes", "    let count = string.count\n    let str = Array(string)\n\
    \    var prefixes: [String] = []\n    for i in 1...count {\n        let start\
    \ = str.startIndex\n        let end = str.index(start, offsetBy: i)\n        let\
    \ sub = String(str[start..<end])\n        prefixes.append(sub)\n    }\n    return\
    \ prefixes", "    // TODO: Implement\n\n    var ret = [String]()\n    for i in\
    \ 0..<string.count {\n        ret.append(String(string[..<string.index(string.startIndex,\
    \ offsetBy: i)]))\n    }\n    return ret", "    var prefixes = [String]()\n  \
    \  let count = string.count\n    for index in 1...count {\n        prefixes.append(String(string[..<index]))\n\
    \    }\n    return prefixes", "    var prefixes = [String]()\n    for index in\
    \ 0..<string.count {\n        prefixes.append(String(string[string.startIndex...string.index(string.startIndex,\
    \ offsetBy: index)]))\n    }\n    return prefixes", "    var prefixes = [String]()\n\
    \    for i in 0..<string.count {\n        prefixes.append(string.substring(to:\
    \ string.index(string.startIndex, offsetBy: i+1)))\n    }\n    return prefixes",
  "    return string.characters.reduce(into: [\"\"]) { result, char in\n        result.append(result.last!\
    \ + String(char))\n    }", "  var result: [String] = []\n  var counter = 0\n \
    \ while (counter < string.count) {\n    let range = string.index(string.startIndex,\
    \ offsetBy: counter)..<string.endIndex\n    result.append(String(string[range]))\n\
    \    counter += 1\n  }\n  return result", "    guard string.characters.count >\
    \ 0 else { return [String]() }\n    var result = [String]()\n    for index in\
    \ 1...string.characters.count {\n        result.append(string.substring(to: string.index(string.startIndex,\
    \ offsetBy: index)))\n    }\n    return result", "    var array: [String] = []\n\
    \    for i in 0..<string.count {\n        array.append(string.prefix(i + 1))\n\
    \    }\n    return array", "    var prefixes: [String] = []\n    let length =\
    \ string.characters.count\n    for i in 0..<length {\n        let index = string.startIndex.advancedBy(i)\n\
    \        prefixes.append(string.substringToIndex(index))\n    }\n    return prefixes",
  "    return (1...string.count).map({index in\n        string.index(string.startIndex,\
    \ offsetBy: index)\n    }).map({index in\n        String(string[..<index])\n \
    \   })", "  var current_string = \"\"\n  var array: [String] = []\n  for char\
    \ in string {\n    current_string.append(char)\n    array.append(current_string)\n\
    \  }\n  return array", "    var result: [String] = []\n    for (idx, _) in string.enumerated()\
    \ {\n        result.append(String(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: idx + 1)]))\n    }\n    return result", "    var results = [String]()\n\
    \    for i in 1...string.count {\n        results.append(string.prefix(i))\n \
    \   }\n    return results", '    return (1...string.count).map { string.prefix($0)
    }', "    var stringLength = string.characters.count\n    var prefixes = [String]()\n\
    \    for var i = 0; i < stringLength; i++ {\n        let index = string.startIndex.advancedBy(i)\n\
    \        let prefix = string.substringToIndex(index)\n        prefixes.append(prefix)\n\
    \    }\n    return prefixes", "    var result: [String] = []\n    for (index,\
    \ _) in string.enumerated() {\n        result.append(String(string[..<string.index(string.startIndex,\
    \ offsetBy: index + 1)]))\n    }\n    return result", "    let length = string.count\n\
    \    var output = [String]()\n    for i in 1..<length {\n        output.append(String(string[..<string.index(string.startIndex,\
    \ offsetBy: i)]))\n    }\n    output.append(string)\n    return output", '    return
    string.indices.map { string[string.startIndex..<$0.successor()] }', "    var result\
    \ = [String]()\n    for i in 0..<string.count {\n        result.append(string.substr(i...))\n\
    \    }\n    return result", "    var results = [String]()\n    for i in 0..<string.count\
    \ {\n        results.append(string.substring(to: string.index(string.startIndex,\
    \ offsetBy: i + 1)))\n    }\n    return results", "    var result = [String]()\n\
    \    for i in 0..<string.count {\n        result.append(String(string[..<string.index(string.startIndex,\
    \ offsetBy: i + 1)]))\n    }\n    return result", "    var result: [String] =\
    \ []\n    let characters = string.characters\n    for i in 0..<characters.count\
    \ {\n        result.append(string.substring(to: string.index(string.startIndex,\
    \ offsetBy: i+1)))\n    }\n    return result", "    var prefixes: [String] = []\n\
    \    for index in 0..<string.count {\n        prefixes.append(String(string[..<string.index(string.startIndex,\
    \ offsetBy: index)]))\n    }\n    return prefixes", "    let length = string.count\n\
    \    var prefixes = [String]()\n    for i in 1...length {\n        prefixes.append(String(string.prefix(i)))\n\
    \    }\n    return prefixes", "    var result = [String]()\n    for i in 0..<string.count\
    \ {\n        result.append(string.prefix(i + 1))\n    }\n    return result", " \
    \   var output: [String] = []\n    for i in 1...string.count {\n        output.append(String(string.prefix(i)))\n\
    \    }\n    return output", "    var prefixes = [String]()\n    for idx in 0...string.count\
    \ {\n        prefixes.append(String(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: idx)]))\n    }\n    return prefixes", '    return string.unicodeScalars.map
    { String($0) }', "    if string.count == 0 {\n        return []\n    }\n    let\
    \ toIndex = string.index(string.startIndex, offsetBy: string.count)\n    let substring\
    \ = string[..<toIndex]\n    return [substring] + all_prefixes(string: String(substring))",
  "    //\n    // test for empty string\n    //\n    if string.isEmpty {\n       \
    \ return []\n    }\n    //\n    // setup prefixes array\n    //\n    var prefixes:\
    \ [String] = []\n    //\n    // loop through input string\n    //\n    for i in\
    \ 1...string.count {\n        //\n        // cut off 1 character at a time\n \
    \       // and put it into the prefixes array\n        //\n        prefixes.append(String(string.prefix(i)))\n\
    \    }\n    //\n    // finally return the prefixes array\n    //\n    return prefixes",
  "    if string.isEmpty {\n        return [\"\"]\n    } else {\n        var result\
    \ = [String]()\n        for idx in 0..<string.count {\n            let endIndex\
    \ = string.index(string.startIndex, offsetBy: idx + 1)\n            result.append(String(string[string.startIndex..<endIndex]))\n\
    \        }\n        return result\n    }", "  var prefixes: [String] = []\n  for\
    \ i in 0...string.count {\n    prefixes.append(String(string[..<string.index(string.startIndex,\
    \ offsetBy: i)]))\n  }\n  return prefixes", "    var index = string.startIndex\n\
    \    var lastIndex = string.endIndex\n    var result: [String] = []\n    while\
    \ index != lastIndex {\n        result.append(string[string.startIndex..<index])\n\
    \        index = string.index(after: index)\n    }\n    return result", "    var\
    \ result = [String]()\n    var characters = string.characters\n    while let first\
    \ = characters.first {\n        result.append(String(characters))\n        characters.removeFirst()\n\
    \    }\n    return result", "    var prefixes: [String] = []\n    for index in\
    \ 0...string.count {\n        prefixes.append(String(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: index)]))\n    }\n    return prefixes", "    let length = string.characters.count\n\
    \    let return_array = Array(0...length).map {\n        string.substring(to:\
    \ string.index(string.startIndex, offsetBy: $0))\n    }\n    return return_array",
  "    var prefixes = [String]()\n    for char in string {\n        if let last =\
    \ prefixes.last {\n            prefixes.append(last + String(char))\n        }\
    \ else {\n            prefixes.append(String(char))\n        }\n    }\n    return\
    \ prefixes", "    var prefs: [String] = []\n    var s = string\n    while s.count\
    \ > 0 {\n        prefs.append(s)\n        s.removeLast()\n    }\n    return prefs",
  "    var prefixes: [String] = []\n    for i in 1...string.count {\n        prefixes.append(String(string.prefix(i)))\n\
    \    }\n    return prefixes", "    var output: [String] = []\n    for i in 0..<string.count\
    \ {\n        output.append(String(string[..<string.index(string.startIndex, offsetBy:\
    \ i + 1)]))\n    }\n    return output", "  var prefixes = [String]()\n  for i\
    \ in 1..<string.count + 1 {\n    prefixes.append(String(string[..<String.Index(encodedOffset:\
    \ i)]))\n  }\n  return prefixes", "  var prefixes = [String]()\n  for index in\
    \ 0..<string.count {\n    prefixes.append(string[0..<index])\n  }\n  return prefixes",
  "    var result: [String] = []\n    for i in 1...string.count {\n        result.append(String(string[..<string.index(string.startIndex,\
    \ offsetBy: i)]))\n    }\n    return result", "    var ret_val = [String]()\n\
    \    for i in 1...string.count {\n        ret_val.append(string.prefix(i))\n \
    \   }\n    return ret_val", "    var sub_strings = [String]()\n    for i in 0..<string.count\
    \ {\n        let substring = string[string.startIndex...string.index(string.startIndex,\
    \ offsetBy: i)]\n        sub_strings.append(String(substring))\n    }\n    return\
    \ sub_strings", '    return (1...string.count).map { string.prefix($0) }', " \
    \   var prefixes = [String]()\n    for index in 0...string.count {\n        let\
    \ range = string.startIndex..<string.index(string.startIndex, offsetBy: index)\n\
    \        prefixes.append(String(string[range]))\n    }\n    return prefixes",
  "  return (1..<string.count + 1).map { start_index in\n    return String(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: start_index)])\n  }", "    guard !string.isEmpty else { return []\
    \ }\n    var result: [String] = []\n    for index in 0..<string.count {\n    \
    \    result.append(String(string[..<string.index(string.startIndex, offsetBy:\
    \ index)]))\n    }\n    return result", "    var prefixes: [String] = []\n   \
    \ for i in 0...string.count {\n        prefixes.append(String(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: i)]))\n    }\n    return prefixes", "    var result = [String]()\n\
    \    for i in 0..<string.count {\n        result.append(string.prefix(i + 1))\n\
    \    }\n    return result", "    return string.utf8.reduce(into: [String]()) {\
    \ (prefixes, char) in\n        if let prefix = prefixes.last {\n            prefixes.append(prefix\
    \ + String(char, radix: 16, uppercase: false))\n        } else {\n           \
    \ prefixes.append(String(char, radix: 16, uppercase: false))\n        }\n    }",
  "    var result: [String] = []\n    for i in 0..<string.count {\n        result.append(string.prefix(i\
    \ + 1))\n    }\n    return result", "    var prefixes: [String] = []\n    for\
    \ idx in 1...string.count {\n        prefixes.append(string.substring(to: string.index(string.startIndex,\
    \ offsetBy: idx)))\n    }\n    return prefixes", "  let len = string.count\n \
    \ var array: [String] = []\n  for i in 1...len {\n    array.append(String(string[..<string.index(string.startIndex,\
    \ offsetBy: i)]))\n  }\n  return array", "  var result: [String] = []\n  for i\
    \ in 1...string.count {\n    result.append(string.prefix(i))\n  }\n  return result",
  "  let index_0 = string.startIndex\n  let index_1 = string.index(after: index_0)\n\
    \  let index_2 = string.index(after: index_1)\n  let index_3 = string.index(after:\
    \ index_2)\n  return [\n    String(string[index_0]),\n    String(string[index_0...index_1]),\n\
    \    String(string[index_0...index_2]),\n    String(string[index_0...index_3])\n\
    \  ]", "    var prefixes: [String] = []\n    for index in 0..<string.count {\n\
    \        prefixes.append(String(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: index+1)]))\n    }\n    return prefixes", "  var result: [String]\
    \ = []\n  for i in 0..<string.count {\n    result.append(String(string[..<string.index(string.startIndex,\
    \ offsetBy: i + 1)]))\n  }\n  return result", "    let length = string.count\n\
    \    var result = [String]()\n    for i in 0..<length {\n        result.append(string.prefix(i+1))\n\
    \    }\n    return result", "    var result = [String]()\n    for i in 0..<string.count\
    \ {\n        result.append(String(string[..<string.index(string.startIndex, offsetBy:\
    \ i)]))\n    }\n    return result", "    var result = [String]()\n    for i in\
    \ (0..<string.count) {\n        result.append(string.prefix(i+1))\n    }\n   \
    \ return result", "    let characters = Array(string)\n    var result: [String]\
    \ = []\n    for i in 0..<characters.count {\n        result.append(String(characters[0...i]))\n\
    \    }\n    return result", "    var all_prefixes = [String]()\n    for (index,\
    \ letter) in string.enumerated() {\n        let substring = String(string[..<string.index(string.startIndex,\
    \ offsetBy: index + 1)])\n        all_prefixes.append(substring)\n    }\n    return\
    \ all_prefixes", "    var prefixes = [String]()\n    for index in 0..<string.count\
    \ {\n        prefixes.append(String(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: index+1)]))\n    }\n    return prefixes"]
stop_tokens:
- "\n}"
