name: HumanEval_140_fix_spaces
language: swift
prompt: "\n/// Given a string text, replace all spaces in it with underscores, \n\
  /// and if a string has more than 2 consecutive spaces, \n/// then replace all consecutive\
  \ spaces with - \n/// >>> fix_spaces(text: \" Example\")\n/// \"Example\"\n/// >>>\
  \ fix_spaces(text: \" Example 1\")\n/// \"Example_1\"\n/// >>> fix_spaces(text:\
  \ \" Example 2\")\n/// \"_Example_2\"\n/// >>> fix_spaces(text: \" Example 3\")\n\
  /// \"_Example-3\"\nfunc fix_spaces(text: String) -> String {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(fix_spaces(text: \"Example\") == \"Example\"\
  )\nassert(fix_spaces(text: \"Mudasir Hanif \") == \"Mudasir_Hanif_\")\nassert(fix_spaces(text:\
  \ \"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\")\nassert(fix_spaces(text:\
  \ \"Exa   mple\") == \"Exa-mple\")\nassert(fix_spaces(text: \"   Exa 1 2 2 mple\"\
  ) == \"-Exa_1_2_2_mple\")"
completions: ["    let joined = text.replacingOccurrences(of: \"  \", with: \"-\"\
    )\n    return joined.replacingOccurrences(of: \" \", with: \"_\")", "    let text\
    \ = text.trimmingCharacters(in: .whitespaces)\n    let words = text.components(separatedBy:\
    \ \" \")\n    if words.count <= 1 {\n        return text\n    }\n    if words.count\
    \ == 2 {\n        return words.joined(separator: \"_\")\n    }\n    return (words.prefix(2).joined(separator:\
    \ \"_\") + \"-\" + words.suffix(1).joined(separator: \"\"))", "    if text.contains(\"\
    \  \") {\n        return fix_spaces(text: text.replacingOccurrences(of: \"  \"\
    , with: \"-\"))\n    }\n    return text.replacingOccurrences(of: \" \", with:\
    \ \"_\")", "    //text = text.replacingOccurrences(of: \" \", with: \"\")\n  \
    \  //text = text.replacingOccurrences(of: \"  \", with: \"_\")\n    //text = text.replacingOccurrences(of:\
    \ \"   \", with: \"-\")\n    text = text.replacingOccurrences(of: \" +\", with:\
    \ \" \", options: .regularExpression)\n    text = text.replacingOccurrences(of:\
    \ \" \", with: \"_\")\n    return text", "    var newString = \"\"\n    var counter\
    \ = 0\n    for char in text {\n        if char == \" \" {\n            if counter\
    \ == 2 {\n                newString.append(\"-\")\n                counter = 0\n\
    \            } else {\n                newString.append(\"_\")\n             \
    \   counter += 1\n            }\n        } else {\n            newString.append(char)\n\
    \            counter = 0\n        }\n    }\n    return newString", "    let newText\
    \ = text.replacingOccurrences(of: \"  \", with: \"-\")\n    return newText.replacingOccurrences(of:\
    \ \" \", with: \"_\")", "    var spaces = \"\"\n    var last_space = false\n \
    \   var count = 0\n    for char in text {\n        if char == \" \" {\n      \
    \      if last_space {\n                count += 1\n            } else {\n   \
    \             last_space = true\n                count = 1\n            }\n  \
    \      } else {\n            last_space = false\n            count = 0\n     \
    \   }\n        spaces += String(count > 2 ? \"-\" : \" \")\n    }\n    return\
    \ text.replacingOccurrences(of: spaces, with: \"_\")", '  return text.replacingOccurrences(of:
    "\\s", with: "_", options: .regularExpression)', "    var newString = text\n \
    \   newString = newString.replacingOccurrences(of: \" \", with: \"_\")\n    newString\
    \ = newString.replacingOccurrences(of: \"___\", with: \"-\")\n    newString =\
    \ newString.replacingOccurrences(of: \"__\", with: \"_\")\n    return newString",
  '    return text.replacingOccurrences(of: " ", with: "_").replacingOccurrences(of:
    "__", with: "-")', "    var new_text = \"\"\n    for (index,letter) in text.enumerated()\
    \ {\n        if letter == \" \" {\n            if new_text.last == \"_\" {\n \
    \               if new_text.last == \"-\" {\n                    new_text += \"\
    -\"\n                } else {\n                    new_text += \"-\"\n       \
    \         }\n            } else {\n                new_text += \"_\"\n       \
    \     }\n        } else {\n            new_text += String(letter)\n        }\n\
    \    }\n    return new_text", '    return text.replacingOccurrences(of: " +",
    with: "_", options: .regularExpression, range: nil)', "    var fixed_text = \"\
    \"\n    var was_space = false\n    var n = 0\n    for char in text {\n       \
    \ if char == \" \" {\n            if was_space {\n                n += 1\n   \
    \         } else {\n                was_space = true\n                n = 1\n\
    \            }\n        } else {\n            was_space = false\n            n\
    \ = 0\n        }\n        if n <= 2 {\n            fixed_text += char\n      \
    \  } else {\n            fixed_text += \"-\"\n        }\n    }\n    return fixed_text",
  '    return text.replacingOccurrences(of: "  ", with: "--").replacingOccurrences(of:
    " ", with: "_")', "    var new_text = text.replacingOccurrences(of: \" \", with:\
    \ \"_\")\n    new_text = new_text.replacingOccurrences(of: \"__\", with: \"-\"\
    )\n    return new_text", "    var text = text\n    text = text.replacingOccurrences(of:\
    \ \" \", with: \"_\")\n    while text.contains(\"__\") {\n        text = text.replacingOccurrences(of:\
    \ \"__\", with: \"_\")\n    }\n    while text.contains(\"__\") {\n        text\
    \ = text.replacingOccurrences(of: \"__\", with: \"_\")\n    }\n    if text.hasPrefix(\"\
    _\") {\n        text = \"-\" + text\n    }\n    return text", "    let text =\
    \ text.trimmingCharacters(in: CharacterSet.whitespaces)\n    var result = text.replacingOccurrences(of:\
    \ \" \", with: \"_\")\n    if result.contains(\"  \") {\n        result = result.replacingOccurrences(of:\
    \ \"  \", with: \"-\")\n    }\n    return result", "    // TODO: Implement this\
    \ function\n    return text", "    var fixed = text.trimmingCharacters(in: .whitespaces)\n\
    \    fixed = fixed.replacingOccurrences(of: \"  \", with: \"-\")\n    fixed =\
    \ fixed.replacingOccurrences(of: \" \", with: \"_\")\n    return fixed", "   \
    \ var result = \"\"\n    let components = text.components(separatedBy: \" \")\n\
    \    var gap = 0\n    for component in components {\n        if component.isEmpty\
    \ {\n            gap += 1\n        } else {\n            if gap > 2 {\n      \
    \          result += \"-\"\n            } else if gap == 2 {\n               \
    \ result += \"_\"\n            }\n            result += component\n          \
    \  gap = 0\n        }\n    }\n    return result", "    let length = text.count\n\
    \    var result = \"\"\n    var spaceCount = 0\n    for char in text {\n     \
    \   if char == \" \" {\n            spaceCount += 1\n            if spaceCount\
    \ > 2 {\n                continue\n            }\n        } else {\n         \
    \   spaceCount = 0\n        }\n        result.append(char)\n    }\n    return\
    \ result.replacingOccurrences(of: \" \", with: \"_\")", "    var fixed = text.replacingOccurrences(of:\
    \ \" \", with: \"_\")\n    fixed = fixed.replacingOccurrences(of: \"__\", with:\
    \ \"-\")\n    return fixed", "    var result = \"\"\n    var last_char = \"\"\n\
    \    for char in text {\n        if char != \" \" {\n            result += char\n\
    \            last_char = char\n        } else {\n            if last_char == \"\
    \ \" {\n                result += \"-\"\n            } else {\n              \
    \  result += \"_\"\n            }\n            last_char = char\n        }\n \
    \   }\n    return result", "    let words = text.split(separator: \" \")\n   \
    \ let result = words.joined(separator: \"_\")\n    return result", '    return
    text.replacingOccurrences(of: " ", with: "_")', "    var tmp = text\n    tmp =\
    \ tmp.replacingOccurrences(of: \" \", with: \"_\")\n    tmp = tmp.replacingOccurrences(of:\
    \ \"__\", with: \"_\")\n    tmp = tmp.replacingOccurrences(of: \"___\", with:\
    \ \"-\")\n    return tmp", '    return text.replacingOccurrences(of: " ", with:
    "_")', "    let chars = text.components(separatedBy: \" \")\n    let filtered\
    \ = chars.filter {\n        return $0 != \"\"\n    }\n    let joined = filtered.joined(separator:\
    \ \"_\")\n    return joined", "    var split = text.split(separator: \" \")\n\
    \    var result = split.joined(separator: \"_\")\n    var cnt = 0\n    var underscore\
    \ = 0\n    result.removeAll { char in\n        if char == \"_\" {\n          \
    \  cnt += 1\n            if cnt > 2 {\n                underscore += 1\n     \
    \           if underscore == 1 {\n                    return false\n         \
    \       }\n                return true\n            }\n        } else {\n    \
    \        cnt = 0\n            underscore = 0\n        }\n        return false\n\
    \    }\n    return result", "    let empty_string = \"\"\n    var underscore_string\
    \ = \"_\"\n    var hyphen_string = \"-\"\n    var space_string = \" \"\n    var\
    \ underscore_space_string = \"_ \"\n    var double_space_string = \"  \"\n   \
    \ var double_underscore_string = \"__\"\n    var triple_space_string = \"   \"\
    \n    var triple_underscore_string = \"___\"\n    var quad_space_string = \" \
    \   \"\n    var quad_underscore_string = \"____\"\n    var string_to_check = text\n\
    \    // replace all empty spaces with underscores\n    string_to_check = string_to_check.replacingOccurrences(of:\
    \ empty_string, with: underscore_string)\n    // replace all one character space\
    \ with underscore\n    string_to_check = string_to_check.replacingOccurrences(of:\
    \ space_string, with: underscore_string)\n    // replace all double space with\
    \ double underscore\n    string_to_check = string_to_check.replacingOccurrences(of:\
    \ double_space_string, with: double_underscore_string)\n    // replace all triple\
    \ space with triple underscore\n    string_to_check = string_to_check.replacingOccurrences(of:\
    \ triple_space_string, with: triple_underscore_string)\n    // replace all quad\
    \ space with quad underscore\n    string_to_check = string_to_check.replacingOccurrences(of:\
    \ quad_space_string, with: quad_underscore_string)\n    // replace all underscore\
    \ space with underscore\n    string_to_check = string_to_check.replacingOccurrences(of:\
    \ underscore_space_string, with: underscore_string)\n    // replace all double\
    \ underscore with hyphen\n    string_to_check = string_to_check.replacingOccurrences(of:\
    \ double_underscore_string, with: hyphen_string)\n    // replace all triple underscore\
    \ with hyphen\n    string_to_check = string_to_check.replacingOccurrences(of:\
    \ triple_underscore_string, with: hyphen_string)\n    // replace all quad underscore\
    \ with hyphen\n    string_to_check = string_to", '    return text.replacingOccurrences(of:
    " ", with: "_").replacingOccurrences(of: "__", with: "_").replacingOccurrences(of:
    "___", with: "-")', "    return text.replacingOccurrences(of: \"\\\\s+\",\n  \
    \                                   with: \" \",\n                           \
    \          options: .regularExpression)\n        .trimmingCharacters(in: .whitespaces)\n\
    \        .replacingOccurrences(of: \" \", with: \"_\")", "    let max = text.count\n\
    \    var buf = \"\"\n    var last = \"\"\n    var index = 0\n    for char in text\
    \ {\n        if char != \" \" {\n            last = String(char)\n           \
    \ buf.append(char)\n            index += 1\n            continue\n        }\n\n\
    \        if index == 0 {\n            continue\n        }\n\n        if last ==\
    \ \" \" {\n            buf.append(\"-\")\n            index += 1\n           \
    \ continue\n        }\n\n        if max == index + 1 {\n            buf.append(\"\
    _\")\n            index += 1\n            continue\n        }\n\n        buf.append(\"\
    _\")\n        index += 1\n    }\n\n    return buf", "  //todo\n  return \"\"",
  '  return ""', '    return text.replacingOccurrences(of: " ", with: "_")', "   \
    \ var result = text.replacingOccurrences(of: \" \", with: \"_\")\n    result =\
    \ result.replacingOccurrences(of: \"__\", with: \"_\")\n    result = result.replacingOccurrences(of:\
    \ \"___\", with: \"-\")\n    return result", "    // TODO: Complete this challenge\n\
    \    return \"\"", '    return ""', "    var new_text = \"\"\n    for i in text\
    \ {\n        if i == \" \" {\n            new_text.append(\"_\")\n        } else\
    \ {\n            new_text.append(i)\n        }\n    }\n    new_text = new_text.replacingOccurrences(of:\
    \ \"__\", with: \"_\")\n    new_text = new_text.replacingOccurrences(of: \"___\"\
    , with: \"-\")\n    return new_text", "    var result = \"\"\n    var numberOfSpaces\
    \ = 0\n    for char in text {\n        if char == \" \" {\n            numberOfSpaces\
    \ += 1\n            if numberOfSpaces > 2 {\n                result += \"-\"\n\
    \            } else {\n                result += \"_\"\n            }\n      \
    \  } else {\n            result += String(char)\n            numberOfSpaces =\
    \ 0\n        }\n    }\n    return result", "    var result = text.trimmingCharacters(in:\
    \ CharacterSet.whitespaces)\n    result = result.replacingOccurrences(of: \" \"\
    , with: \"_\")\n    while result.contains(\"__\") {\n        result = result.replacingOccurrences(of:\
    \ \"__\", with: \"_\")\n    }\n    while result.contains(\"_-_\") {\n        result\
    \ = result.replacingOccurrences(of: \"_-_\", with: \"-\")\n    }\n    return result",
  "    let result = text.replacingOccurrences(of: \" \", with: \"_\")\n    let result1\
    \ = result.replacingOccurrences(of: \"__\", with: \"-\")\n    return result1",
  "    // set the initial value to empty string\n    var result = \"\"\n    // set\
    \ the initial value to false for counting, false for not counting\n    var spaceCounting\
    \ = false\n    // iterate over the text and convert each character to UnicodeScalar\n\
    \    for char in text.unicodeScalars {\n        // if the character is a space\
    \ and spaceCounting is false,\n        // add an underscore to the result string\n\
    \        if char == \" \" && !spaceCounting {\n            result += \"_\"\n \
    \       // if the character is a space and spaceCounting is true,\n        //\
    \ add a dash to the result string\n        } else if char == \" \" && spaceCounting\
    \ {\n            result += \"-\"\n        // if the character is not a space,\
    \ add the character to the result string\n        } else {\n            result\
    \ += String(char)\n        }\n        // update the value of spaceCounting\n \
    \       spaceCounting = char == \" \"\n    }\n    // return the result string\n\
    \    return result", "    var _text = text.replacingOccurrences(of: \" \", with:\
    \ \"_\")\n    if text.contains(\"   \") {\n        _text = _text.replacingOccurrences(of:\
    \ \"__\", with: \"-\")\n    }\n    return _text", "    // Fill in the code below\n\
    \    return \"\"", "    let pattern = \"\\\\s{1,2}\"\n    let underscore_pattern\
    \ = \"\\\\s+\"\n    let underscore_replace = \"_\"\n    let dash_replace = \"\
    -\"\n    return text.replacingOccurrences(of: pattern, with: underscore_replace,\
    \ options: .regularExpression).replacingOccurrences(of: underscore_pattern, with:\
    \ dash_replace, options: .regularExpression)", "\tlet arr = Array(text)\n\tvar\
    \ prev = arr[0]\n\tvar count = 0\n\tvar result = \"\"\n\tfor i in 0..<arr.count\
    \ {\n\t\tif prev == \" \" {\n\t\t\tcount += 1\n\t\t} else {\n\t\t\tcount = 0\n\
    \t\t}\n\t\tif arr[i] == \" \" {\n\t\t\tresult += count > 2 ? \"-\" : \"_\"\n\t\
    \t} else {\n\t\t\tresult += \"\\(arr[i])\"\n\t\t}\n\t\tprev = arr[i]\n\t}\n\t\
    return result", "    let strings = text.split(separator: \" \")\n    let spaces\
    \ = Array(repeating: \"_\", count: strings.count-1)\n    let concatenatedString\
    \ = strings.enumerated().flatMap { (index,value) -> String in\n        return\
    \ index == 0 ? String(value) : spaces[index-1] + String(value)\n    }\n    return\
    \ concatenatedString.joined()", '    return text.replacingOccurrences(of: " +",
    with: "-", options: .regularExpression, range: nil).replacingOccurrences(of: "
    ", with: "_")', "    let newText = text.replacingOccurrences(of: \" \", with:\
    \ \"_\")\n    let newText2 = newText.replacingOccurrences(of: \"___\", with: \"\
    -\")\n    return newText2", "    var text = text\n    text = text.replacingOccurrences(of:\
    \ \" \", with: \"_\")\n    text = text.replacingOccurrences(of: \"__\", with:\
    \ \"-\")\n    text = text.replacingOccurrences(of: \"_-\", with: \"_\")\n    text\
    \ = text.replacingOccurrences(of: \"-_\", with: \"_\")\n    return text", "  \
    \  // ...\n    return \"\"", "    var result = \"\"\n    for (i, c) in text.enumerated()\
    \ {\n        if c == \" \" {\n            if i == 0 {\n                result.append(\"\
    _\")\n            } else if i == 1 {\n                result.append(\"_\")\n \
    \           } else if text[text.index(text.startIndex, offsetBy: i - 1)] == \"\
    \ \" {\n                result.append(\"-\")\n            } else {\n         \
    \       result.append(\"_\")\n            }\n        } else {\n            result.append(c)\n\
    \        }\n    }\n    return result", "    return text.replacingOccurrences(of:\
    \ \" +\", with: \"-\", options: .regularExpression)\n        .replacingOccurrences(of:\
    \ \" \", with: \"_\")", '    // your code here', "    let parts = text.split(separator:\
    \ \" \")\n    let result = parts.joined(separator: \"_\")\n    return result",
  "    let numbers = text.split(separator: \" \")\n    let underscores = numbers.joined(separator:\
    \ \"_\")\n    let strings_with_double_space = underscores.replacingOccurrences(of:\
    \ \"__\", with: \"-\")\n    return strings_with_double_space", '    return ""',
  "    let fixed = text.replacingOccurrences(of: \" \", with: \"_\")\n    return fixed.replacingOccurrences(of:\
    \ \"__\", with: \"-\")", "    let cv = text.trimmingCharacters(in: .whitespaces)\n\
    \    var res = cv.replacingOccurrences(of: \" \", with: \"_\")\n    if cv.count\
    \ > 2 {\n        res = res.replacingOccurrences(of: \"___\", with: \"-\")\n  \
    \  }\n    return res", "    // TODO\n    return text", "    let newText = text.replacingOccurrences(of:\
    \ \" \", with: \"_\")\n    let replace = newText.replacingOccurrences(of: \"__\"\
    , with: \"-\")\n    return replace", "    // TODO: implement this\n    return\
    \ \"\"", "    //TODO: Fill in the code here\n    return text", "    let spaces\
    \ = \" \"\n    let underscores = \"_\"\n    let dashes = \"-\"\n    let result\
    \ = text.replacingOccurrences(of: spaces, with: underscores)\n    return result.replacingOccurrences(of:\
    \ \"__\", with: dashes)", "  // if text has more than 2 consecutive spaces,\n\
    \  // then replace all consecutive spaces with -\n  let textWithSpaces = text.replacingOccurrences(of:\
    \ \"  \", with: \"-\")\n  return textWithSpaces.replacingOccurrences(of: \" \"\
    , with: \"_\")", "    var result = text\n    result = result.replacingOccurrences(of:\
    \ \" \", with: \"_\")\n    result = result.replacingOccurrences(of: \"__\", with:\
    \ \"_\")\n    result = result.replacingOccurrences(of: \"___\", with: \"-\")\n\
    \    return result", "    let space = \" \"\n    let underscore = \"_\"\n    let\
    \ dash = \"-\"\n    var fixedSpaces = \"\"\n    var numberOfConsecutiveSpaces\
    \ = 0\n    for i in text {\n        if i == space {\n            numberOfConsecutiveSpaces\
    \ += 1\n            if numberOfConsecutiveSpaces == 1 {\n                fixedSpaces\
    \ += underscore\n            } else if numberOfConsecutiveSpaces == 2 {\n    \
    \            fixedSpaces += dash\n            }\n        } else {\n          \
    \  numberOfConsecutiveSpaces = 0\n            fixedSpaces += String(i)\n     \
    \   }\n    }\n    return fixedSpaces", "    var result = text\n    let space =\
    \ \" \"\n    let dash = \"-\"\n    let underscore = \"_\"\n    let start = text.startIndex\n\
    \    var index = text.startIndex\n    var prev: Character = \"0\"\n    var curr:\
    \ Character = \"0\"\n    var next: Character = \"0\"\n    var count = 0\n    for\
    \ char in text {\n        if index == start {\n            prev = char\n     \
    \       curr = char\n            next = text[text.index(after: index)]\n     \
    \   } else if index == text.index(before: text.endIndex) {\n            if count\
    \ == 1 {\n                result.replaceSubrange(index...index, with: [dash])\n\
    \            } else if count > 1 {\n                result.replaceSubrange(index...index,\
    \ with: [underscore])\n            }\n        } else {\n            prev = curr\n\
    \            curr = next\n            next = text[text.index(after: index)]\n\
    \            if char == space {\n                if count == 0 {\n           \
    \         result.replaceSubrange(index...index, with: [underscore])\n        \
    \        } else if count == 1 {\n                    result.replaceSubrange(index...index,\
    \ with: [dash])\n                } else if count > 1 {\n                    result.replaceSubrange(index...index,\
    \ with: [underscore])\n                }\n                count += 1\n       \
    \     } else {\n                count = 0\n            }\n        }\n        index\
    \ = text.index(after: index)\n    }\n    return result", "    // TODO: Complete\
    \ this!\n    return \"\"", "    var result = \"\"\n    var last_was_space = false\n\
    \    var consecutive_spaces = 0\n    for ch in text {\n        if ch == \" \"\
    \ {\n            if last_was_space {\n                consecutive_spaces += 1\n\
    \            } else {\n                consecutive_spaces = 1\n            }\n\
    \            if consecutive_spaces > 2 {\n                result += \"-\"\n  \
    \          } else {\n                result += \"_\"\n            }\n        \
    \    last_was_space = true\n        } else {\n            last_was_space = false\n\
    \            consecutive_spaces = 0\n            result += String(ch)\n      \
    \  }\n    }\n    return result", "    var newString = \"\"\n    for (index, char)\
    \ in text.enumerated() {\n        if char == \" \" {\n            if newString.last\
    \ != \"_\" {\n                newString.append(\"_\")\n            }\n       \
    \     if index+1 < text.count && text[text.index(text.startIndex, offsetBy: index+1)]\
    \ == \" \" {\n                if index+2 < text.count && text[text.index(text.startIndex,\
    \ offsetBy: index+2)] == \" \" {\n                    newString.append(\"-\")\n\
    \                }\n            }\n        } else {\n            newString.append(char)\n\
    \        }\n    }\n    return newString", "    let result = text.replacingOccurrences(of:\
    \ \" \", with: \"_\").replacingOccurrences(of: \"__\", with: \"_\").replacingOccurrences(of:\
    \ \"___\", with: \"-\")\n    return result", '    return text.replacingOccurrences(of:
    " ", with: "_")', "    let values = text.components(separatedBy: .whitespaces)\n\
    \    let result = values.filter {\n        return !$0.isEmpty\n    }.joined(separator:\
    \ \"_\")\n    return result", "    var result: String = \"\"\n    var count: Int\
    \ = 0\n    for i in text {\n        if i == \" \" {\n            count += 1\n\
    \            if count > 2 {\n                result += \"-\"\n            } else\
    \ {\n                result += \"_\"\n            }\n        } else {\n      \
    \      result += String(i)\n            count = 0\n        }\n    }\n    return\
    \ result", "    let components = text.components(separatedBy: \" \")\n    var\
    \ result = components.joined(separator: \"_\")\n    while result.contains(\"__\"\
    ) {\n        result = result.replacingOccurrences(of: \"__\", with: \"-\")\n \
    \   }\n    return result", "    var str = text\n    str = str.replacingOccurrences(of:\
    \ \" \", with: \"_\")\n    if str.contains(\"_ _\") {\n        str = str.replacingOccurrences(of:\
    \ \"_ _\", with: \"_\")\n    }\n    if str.contains(\"_ _\") {\n        str =\
    \ str.replacingOccurrences(of: \"_ _\", with: \"_\")\n    }\n    if str.contains(\"\
    _ _\") {\n        str = str.replacingOccurrences(of: \"_ _\", with: \"_\")\n \
    \   }\n    if str.contains(\"_ _\") {\n        str = str.replacingOccurrences(of:\
    \ \"_ _\", with: \"-\")\n    }\n    return str", "    var words = text.components(separatedBy:\
    \ \" \")\n    var result = \"\"\n    for word in words {\n        if word == \"\
    \" {\n            result += \"-\"\n        } else {\n            result += word\n\
    \        }\n        result += \"_\"\n    }\n    return result", "    var text\
    \ = text\n    text = text.replacingOccurrences(of: \" \", with: \"_\")\n    text\
    \ = text.replacingOccurrences(of: \"__\", with: \"_\")\n    text = text.replacingOccurrences(of:\
    \ \"___\", with: \"-\")\n    return text", "  return text.replacingOccurrences(of:\
    \ \" +\", with: \"-\", options: .regularExpression, range: nil)\n    .replacingOccurrences(of:\
    \ \" \", with: \"_\")", "    let space = \" \"\n    let underscore = \"_\"\n \
    \   let dash = \"-\"\n    var result = text\n    let range = text.range(of: space)\n\
    \    if range != nil {\n        result = text.replacingOccurrences(of: space,\
    \ with: underscore)\n    }\n    if result.count > 5 {\n        result = result.replacingOccurrences(of:\
    \ \"\\(underscore)\\(underscore)\", with: dash)\n    }\n    return result", " \
    \ return text.replacingOccurrences(of: \" \", with: \"_\")\n    .replacingOccurrences(of:\
    \ \"__\", with: \"-\")", '    return text.replacingOccurrences(of: "  ", with:
    "-").replacingOccurrences(of: " ", with: "_")', "    let doubleSpace = text.replacingOccurrences(of:\
    \ \"  \", with: \" -\")\n    let singleSpace = doubleSpace.replacingOccurrences(of:\
    \ \" \", with: \"_\")\n    return singleSpace", "    var text = text\n    text\
    \ = text.replacingOccurrences(of: \" \", with: \"_\")\n    text = text.replacingOccurrences(of:\
    \ \"__\", with: \"_\")\n    text = text.replacingOccurrences(of: \"___\", with:\
    \ \"-\")\n    text = text.replacingOccurrences(of: \"____\", with: \"-\")\n  \
    \  text = text.replacingOccurrences(of: \"_____\", with: \"-\")\n    text = text.replacingOccurrences(of:\
    \ \"______\", with: \"-\")\n    text = text.replacingOccurrences(of: \"_______\"\
    , with: \"-\")\n    text = text.replacingOccurrences(of: \"________\", with: \"\
    -\")\n    text = text.replacingOccurrences(of: \"_________\", with: \"-\")\n \
    \   text = text.replacingOccurrences(of: \"__________\", with: \"-\")\n    text\
    \ = text.replacingOccurrences(of: \"___________\", with: \"-\")\n    text = text.replacingOccurrences(of:\
    \ \"____________\", with: \"-\")\n    text = text.replacingOccurrences(of: \"\
    _____________\", with: \"-\")\n    text = text.replacingOccurrences(of: \"______________\"\
    , with: \"-\")\n    text = text.replacingOccurrences(of: \"_______________\",\
    \ with: \"-\")\n    text = text.replacingOccurrences(of: \"________________\"\
    , with: \"-\")\n    text = text.replacingOccurrences(of: \"_________________\"\
    , with: \"-\")\n    text = text.replacingOccurrences(of: \"__________________\"\
    , with: \"-\")\n    text = text.replacingOccurrences(of: \"___________________\"\
    , with: \"-\")\n    text = text.replacingOccurrences(of: \"____________________\"\
    , with: \"-\")\n    text = text.replacingOccurrences(of: \"_____________________\"\
    , with: \"-\")\n    text = text.replacingOccurrences(of: \"______________________\"\
    , with: \"-\")\n    text = text.replacingOccurrences(of: \"_______________________\"\
    , with: \"-\")\n    text = text.replacingOccur", "    // TODO: Implement method\n\
    \    return \"\"", '    return text.replacingOccurrences(of: " ", with: "_").replacingOccurrences(of:
    "___", with: "-")', "    let space = \" \"\n    var text = text\n    while text.contains(space)\
    \ {\n        text = text.replacingOccurrences(of: space, with: \"_\")\n    }\n\
    \    if text.contains(\"__\") {\n        text = text.replacingOccurrences(of:\
    \ \"__\", with: \"-\")\n    }\n    return text", "    var result = \"\"\n    var\
    \ spaceCount = 0\n    for char in text {\n        if char != \" \" {\n       \
    \     if spaceCount == 1 {\n                result += \"_\"\n            } else\
    \ if spaceCount > 1 {\n                result += \"-\"\n            }\n      \
    \      result += String(char)\n            spaceCount = 0\n        } else {\n\
    \            spaceCount += 1\n        }\n    }\n    return result", "    let regex\
    \ = try! NSRegularExpression(pattern: \"\\\\s{2,}\", options: .caseInsensitive)\n\
    \    let range = NSRange(location: 0, length: text.utf16.count)\n    let newText\
    \ = regex.stringByReplacingMatches(in: text, options: [], range: range, withTemplate:\
    \ \"-\")\n    return newText.replacingOccurrences(of: \" \", with: \"_\")", '    return
    ""', "    let replaced = text.replacingOccurrences(of: \" \", with: \"_\")\n \
    \   let replaced2 = replaced.replacingOccurrences(of: \"___\", with: \"-\")\n\
    \    return replaced2", "    let result = text.replacingOccurrences(of: \"  \"\
    , with: \"-\")\n    let result2 = result.replacingOccurrences(of: \" \", with:\
    \ \"_\")\n    return result2", "    let processedText = text.replacingOccurrences(of:\
    \ \" \", with: \"_\")\n    return processedText", "    if text.count < 1 {\n \
    \       return \"\"\n    }\n    if text.count == 1 {\n        return text == \"\
    \ \" ? \"\" : text\n    }\n    var prevText = text\n    while prevText != (prevText\
    \ = prevText.replacingOccurrences(of: \"  \", with: \"-\")) {}\n    return prevText.replacingOccurrences(of:\
    \ \" \", with: \"_\")", "    var result = \"\"\n    var spaces = 0\n    for char\
    \ in text {\n        if char == \" \" {\n            spaces += 1\n           \
    \ if spaces == 1 {\n                result += \"_\"\n            } else if spaces\
    \ > 2 {\n                result += \"-\"\n            }\n        } else {\n  \
    \          spaces = 0\n            result += String(char)\n        }\n    }\n\
    \    return result", "    // let result = text.split(separator: \" \").joined(separator:\
    \ \"_\")\n    let result = text.replacingOccurrences(of: \" \", with: \"_\")\n\
    \    return result", "    // Replace spaces with underscore\n    var result =\
    \ text.replacingOccurrences(of: \" \", with: \"_\")\n    // Replace consecutive\
    \ spaces with -\n    result = result.replacingOccurrences(of: \"__\", with: \"\
    -\")\n    return result", "    let spacePattern = \"\\\\s\"\n    let mutipleSpacePattern\
    \ = \"\\\\s{2,}\"\n    let hyphenPattern = \"-\"\n    let newString = text.replacingOccurrences(of:\
    \ \" \", with: \"_\")\n    return newString.replacingOccurrences(of: mutipleSpacePattern,\
    \ with: hyphenPattern, options: .regularExpression)", '  // TODO: write your code
    here', "    var text = text\n    text = text.replacingOccurrences(of: \" \", with:\
    \ \"_\")\n    text = text.replacingOccurrences(of: \"__\", with: \"_\")\n    text\
    \ = text.replacingOccurrences(of: \"___\", with: \"-\")\n    return text", " \
    \   let underscore = \"_\"\n    let dash = \"-\"\n    let space = \" \"\n    var\
    \ newString = \"\"\n    var prevChar: Character?\n    for char in text {\n   \
    \     if char == space {\n            if prevChar == space {\n               \
    \ newString.removeLast()\n                newString.append(dash)\n           \
    \ } else {\n                newString.append(underscore)\n            }\n    \
    \    } else {\n            newString.append(char)\n        }\n        prevChar\
    \ = char\n    }\n    return newString", "    // Iterate through each character\
    \ in the string\n    var new_text = \"\"\n    var last_char = \"\"\n    var num_spaces\
    \ = 0\n    for char in text {\n        if char == \" \" {\n            num_spaces\
    \ += 1\n        } else {\n            num_spaces = 0\n        }\n        if num_spaces\
    \ == 1 && last_char != \" \" {\n            new_text.append(\"_\")\n        }\
    \ else if num_spaces == 2 {\n            new_text.append(\"-\")\n        } else\
    \ if num_spaces == 3 {\n            num_spaces = 0\n        } else if num_spaces\
    \ == 0 {\n            new_text.append(char)\n        }\n        last_char = char\n\
    \    }\n    return new_text", "    // your code here\n    let result = text.replacingOccurrences(of:\
    \ \" \", with: \"_\").replacingOccurrences(of: \"__\", with: \"_\").replacingOccurrences(of:\
    \ \"___\", with: \"-\")\n    return result", '    return text.replacingOccurrences(of:
    " ", with: "_").replacingOccurrences(of: "__", with: "-")', '    return text.replacingOccurrences(of:
    " ", with: "_")', "    // TODO: Write some code to solve this coding challenge\n\
    \    return \"\"", "    var result = text\n    result = result.replacingOccurrences(of:\
    \ \" \", with: \"_\")\n    result = result.replacingOccurrences(of: \"__\", with:\
    \ \"_\")\n    result = result.replacingOccurrences(of: \"___\", with: \"-\")\n\
    \    return result", "    var spaces = 0\n    var result = String()\n    var prev_char:\
    \ Character = \" \"\n    for char in text {\n        if char == \" \" {\n    \
    \        spaces += 1\n            if spaces == 2 {\n                if prev_char\
    \ == \" \" {\n                    result.removeLast()\n                    result.append(\"\
    -\")\n                } else {\n                    result.append(\"_\")\n   \
    \             }\n            }\n        } else {\n            spaces = 0\n   \
    \         result.append(char)\n        }\n        prev_char = char\n    }\n  \
    \  return result", "    var fixedText = \"\"\n    var spacesBefore = 0\n    for\
    \ char in text {\n        if char == \" \" {\n            spacesBefore += 1\n\
    \            if spacesBefore == 1 {\n                fixedText += \"_\"\n    \
    \        } else if spacesBefore > 2 {\n                fixedText += \"-\"\n  \
    \          }\n        } else {\n            fixedText += \"\\(char)\"\n      \
    \      spacesBefore = 0\n        }\n    }\n    return fixedText", "    let regex\
    \ = try! NSRegularExpression(pattern: \"\\\\s+\", options: [])\n    return regex.stringByReplacingMatches(in:\
    \ text, options: [], range: NSRange(location: 0, length: text.count), withTemplate:\
    \ \"_\")", "    return text.replacingOccurrences(of: \" \", with: \"_\")\n   \
    \     .replacingOccurrences(of: \"  \", with: \"_\")\n        .replacingOccurrences(of:\
    \ \"   \", with: \"-\")", "    var result: String = \"\"\n    var i = 0\n    var\
    \ count = 0\n    while i < text.count {\n        if count > 1 && text[i] == \"\
    \ \" {\n            result.append(\"-\")\n            count = 0\n        } else\
    \ if text[i] == \" \" {\n            result.append(\"_\")\n            count +=\
    \ 1\n        } else {\n            result.append(text[i])\n            count =\
    \ 0\n        }\n        i += 1\n    }\n    return result", "    var result = text\n\
    \    result = result.replacingOccurrences(of: \" \", with: \"_\")\n    result\
    \ = result.replacingOccurrences(of: \"__\", with: \"_\")\n    result = result.replacingOccurrences(of:\
    \ \"___\", with: \"-\")\n    return result", '    return text.replacingOccurrences(of:
    " +", with: "_", options: .regularExpression, range: nil)', "    var newStr =\
    \ text\n    var lastIndex = 0\n    var spaceCount = 0\n    for index in newStr.indices\
    \ {\n        if newStr[index] == \" \" {\n            spaceCount += 1\n      \
    \      if spaceCount > 2 {\n                newStr.replaceSubrange(lastIndex..<index,\
    \ with: \"-\")\n                lastIndex = index\n            }\n        } else\
    \ {\n            if spaceCount == 1 {\n                newStr.replaceSubrange(lastIndex..<index,\
    \ with: \"_\")\n            }\n            spaceCount = 0\n            lastIndex\
    \ = index\n        }\n    }\n    if spaceCount > 2 {\n        newStr.replaceSubrange(lastIndex..<newStr.endIndex,\
    \ with: \"-\")\n    } else if spaceCount == 1 {\n        newStr.replaceSubrange(lastIndex..<newStr.endIndex,\
    \ with: \"_\")\n    }\n    return newStr", "    return text.replacingOccurrences(of:\
    \ \"  \", with: \" \")\n        .replacingOccurrences(of: \" \", with: \"_\")\n\
    \        .replacingOccurrences(of: \"__\", with: \"-\")", "  var result = \"\"\
    \n  var previous_character: Character? = nil\n  var previous_character_is_space\
    \ = false\n  for character in text {\n    if character != \" \" {\n      result.append(character)\n\
    \      previous_character_is_space = false\n    } else {\n      if previous_character\
    \ == \" \" {\n        if previous_character_is_space {\n          result.append(\"\
    -\")\n        } else {\n          result.append(\"_\")\n          previous_character_is_space\
    \ = true\n        }\n      } else {\n        result.append(\"_\")\n      }\n \
    \   }\n    previous_character = character\n  }\n  return result", "    let spaces\
    \ = text.characters.split { $0 == \" \" }.map(String.init)\n    let spaced = spaces.map\
    \ { $0 == \"\" ? \"_\" : $0 }\n    let dashed = spaced.joined(separator: \" \"\
    )\n    return dashed.replacingOccurrences(of: \"   \", with: \"-\")", "    var\
    \ res = \"\"\n    var isLastSpace = false\n    var count = 0\n    var c = 0\n\
    \    for char in text {\n        c += 1\n        if char == \" \" {\n        \
    \    count += 1\n            if isLastSpace {\n                if count == 2 {\n\
    \                    res += \"-\"\n                }\n            } else {\n \
    \               res += \"_\"\n            }\n            isLastSpace = true\n\
    \        } else {\n            if isLastSpace {\n                if count > 2\
    \ {\n                    res += String(repeating: \"_\", count: count - 2)\n \
    \               }\n                count = 0\n            }\n            res +=\
    \ String(char)\n            isLastSpace = false\n        }\n    }\n    if isLastSpace\
    \ {\n        if count > 2 {\n            res += String(repeating: \"_\", count:\
    \ count - 2)\n        }\n    }\n    return res", "  var new_text = text\n  new_text\
    \ = new_text.replacingOccurrences(of: \" \", with: \"_\")\n  new_text = new_text.replacingOccurrences(of:\
    \ \"__\", with: \"_\")\n  new_text = new_text.replacingOccurrences(of: \"___\"\
    , with: \"-\")\n  return new_text", '    return text.lowercased().replacingOccurrences(of:
    " ", with: "_")', "    var temp = \"\"\n    var wasSpace = false\n    for c in\
    \ text {\n        if c == \" \" {\n            if wasSpace {\n               \
    \ temp += \"-\"\n            } else {\n                temp += \"_\"\n       \
    \     }\n            wasSpace = true\n        } else {\n            temp += String(c)\n\
    \            wasSpace = false\n        }\n    }\n    return temp", "    var modified_text\
    \ = text\n    modified_text = modified_text.replacingOccurrences(of: \" \", with:\
    \ \"_\")\n    modified_text = modified_text.replacingOccurrences(of: \"___\",\
    \ with: \"-\")\n    return modified_text", '    return text.components(separatedBy:
    " ").filter({!$0.isEmpty}).joined(separator: "_")', '    return text.replacingOccurrences(of:
    " ", with: "_")', "    var result = text\n    result = result.trimmingCharacters(in:\
    \ .whitespaces)\n    result = result.replacingOccurrences(of: \"  \", with: \"\
    -\")\n    result = result.replacingOccurrences(of: \" \", with: \"_\")\n    return\
    \ result", "    var fixedString = text\n    if let range = fixedString.range(of:\
    \ \" \") {\n        fixedString.replaceSubrange(range, with: \"_\")\n    }\n \
    \   if let range = fixedString.range(of: \"  \") {\n        fixedString.replaceSubrange(range,\
    \ with: \"-\")\n    }\n    return fixedString", "    var myText = text\n    myText\
    \ = myText.replacingOccurrences(of: \" \", with: \"_\")\n    while myText.contains(\"\
    __\") {\n        myText = myText.replacingOccurrences(of: \"__\", with: \"_\"\
    )\n    }\n    while myText.contains(\"_-_\") {\n        myText = myText.replacingOccurrences(of:\
    \ \"_-_\", with: \"-\")\n    }\n    return myText", "    let result = text.trimmingCharacters(in:\
    \ .whitespaces)\n    let fixed = result.replacingOccurrences(of: \"  \", with:\
    \ \"-\")\n    return fixed.replacingOccurrences(of: \" \", with: \"_\")", "  \
    \  var previousChar = \" \"\n    var result: String = \"\"\n    for eachChar in\
    \ text {\n        if eachChar == \" \" {\n            if previousChar == \" \"\
    \ {\n                result.append(\"-\")\n            } else {\n            \
    \    result.append(\"_\")\n            }\n        } else {\n            result.append(eachChar)\n\
    \        }\n        previousChar = String(eachChar)\n    }\n    return result",
  "    var res = \"\"\n    var prevIsSpace = false\n    var countSpace = 0\n    for\
    \ s in text {\n        if s == \" \" {\n            if prevIsSpace {\n       \
    \         countSpace += 1\n            } else {\n                countSpace =\
    \ 1\n            }\n            prevIsSpace = true\n        } else {\n       \
    \     if prevIsSpace {\n                res += countSpace > 2 ? \"-\" : \"_\"\n\
    \            }\n            res += String(s)\n            prevIsSpace = false\n\
    \        }\n    }\n    return res", "    let regularExpression = NSRegularExpression(pattern:\
    \ \"\\\\s{2,}\", options: .caseInsensitive, error: nil)\n    let range = NSMakeRange(0,\
    \ countElements(text))\n    return regularExpression!.stringByReplacingMatchesInString(text,\
    \ options: .ReportProgress, range: range, withTemplate: \"-\")", '    return text.replacingOccurrences(of:
    " ", with: "_").replacingOccurrences(of: "__", with: "-")', '    return ""', " \
    \   let newText = text.replacingOccurrences(of: \" \", with: \"_\", options: .literal,\
    \ range: nil)\n    return newText", "  let regex = \"\\\\s\"\n  let replacement\
    \ = \"_\"\n  return regex.regex(text: text, replacement: replacement)", "    let\
    \ count = text.components(separatedBy: \" \").count - 1\n    var newText = text.replacingOccurrences(of:\
    \ \" \", with: \"_\")\n    if count > 2 {\n        newText = newText.replacingOccurrences(of:\
    \ \"_\", with: \"-\")\n    }\n    return newText", "    var result: String = \"\
    \"\n    for (index, char) in text.enumerated() {\n        if char == \" \" {\n\
    \            result += \"_\"\n        } else {\n            if index == 0 {\n\
    \                result += \"\\(char)\"\n            } else {\n              \
    \  result += \" \\(char)\"\n            }\n        }\n    }\n    return result",
  "    let replaced = text.replacingOccurrences(of: \" \", with: \"_\")\n    return\
    \ replaced.replacingOccurrences(of: \"__\", with: \"-\")", "\tvar correctedText\
    \ = text\n\t\n\tfor i in 0..<correctedText.count {\n\t\tif correctedText[i] ==\
    \ \" \" {\n\t\t\tif i < correctedText.count - 1 {\n\t\t\t\tif correctedText[i\
    \ + 1] == \" \" {\n\t\t\t\t\tcorrectedText.replaceSubrange(i..<i + 1, with: \"\
    _\")\n\t\t\t\t} else {\n\t\t\t\t\tcorrectedText.replaceSubrange(i..<i + 1, with:\
    \ \"-\")\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tcorrectedText.replaceSubrange(i..<i\
    \ + 1, with: \"_\")\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn correctedText", "    let\
    \ text2 = text.replacingOccurrences(of: \"  \", with: \"-\")\n    let text3 =\
    \ text2.replacingOccurrences(of: \" \", with: \"_\")\n    return text3", "   \
    \ let trimmed = text.trimmingCharacters(in: .whitespaces)\n    let noSpaces =\
    \ trimmed.replacingOccurrences(of: \" \", with: \"_\")\n    let separated = noSpaces.replacingOccurrences(of:\
    \ \"__\", with: \"-\")\n    return separated", "    let text_arr = text.components(separatedBy:\
    \ \" \")\n    var s = \"\"\n    for word in text_arr {\n        if !word.isEmpty\
    \ {\n            s += \"_\" + word\n        }\n    }\n    s = s.replacingOccurrences(of:\
    \ \"__\", with: \"_\")\n    return s.replacingOccurrences(of: \"_-_\", with: \"\
    -\")", "    var _text = text\n    while _text.contains(\"  \") {\n        _text\
    \ = _text.replacingOccurrences(of: \"  \", with: \"-\")\n    }\n    while _text.contains(\"\
    \ \") {\n        _text = _text.replacingOccurrences(of: \" \", with: \"_\")\n\
    \    }\n    return _text", '    return text.replacingOccurrences(of: " ", with:
    "_").replacingOccurrences(of: "__", with: "-")', "    var pre = \"\"\n    var\
    \ result = \"\"\n    for c in text {\n        if c == \" \" {\n            if\
    \ pre == c {\n                result += \"-\"\n            } else {\n        \
    \        result += \"_\"\n            }\n        } else {\n            result\
    \ += String(c)\n        }\n        pre = c\n    }\n    return result", "    let\
    \ new_string = text.trimmingCharacters(in: .whitespacesAndNewlines)\n    var new_text\
    \ = \"\"\n    var previous_char = \"\"\n    for char in new_string {\n       \
    \ if char == \" \" {\n            if previous_char == \" \" {\n              \
    \  new_text.append(\"-\")\n            } else {\n                new_text.append(\"\
    _\")\n            }\n        } else {\n            new_text.append(char)\n   \
    \     }\n        previous_char = char\n    }\n    return new_text", '    return
    text.replace("\\s", " ").replace("[ ]{2,}", "_")', "    let hasMoreThanTwoConsecutiveSpaces\
    \ = text.contains(\"   \")\n    let hasSpace = text.contains(\" \")\n    let spacesReplacedWithUnderscores\
    \ = text.replacingOccurrences(of: \" \", with: \"_\")\n    let spacesReplacedWithHyphens\
    \ = spacesReplacedWithUnderscores.replacingOccurrences(of: \"__\", with: \"-\"\
    )\n    let result = hasMoreThanTwoConsecutiveSpaces ? spacesReplacedWithHyphens\
    \ : spacesReplacedWithUnderscores\n    return hasSpace ? result : text", "   \
    \ let newText = text.replace(string: \" \", replacement: \"_\")\n    let newText2\
    \ = newText.replace(string: \"__\", replacement: \"-\")\n    return newText2",
  "    var text = text\n    var current_count = 0\n    for (i,c) in text.enumerated()\
    \ {\n        if c == \" \" {\n            current_count += 1\n            if current_count\
    \ == 1 {\n                text.replaceSubrange(i...i, with: \"_\")\n         \
    \   } else if current_count == 2 {\n                text.replaceSubrange(i...i,\
    \ with: \"-\")\n            }\n        } else {\n            current_count = 0\n\
    \        }\n    }\n    return text", "    let temp = text.replacingOccurrences(of:\
    \ \" \", with: \"_\")\n    let temp2 = temp.replacingOccurrences(of: \"__\", with:\
    \ \"_\")\n    let temp3 = temp2.replacingOccurrences(of: \"___\", with: \"-\"\
    )\n    return temp3", "  let underscore = \"_\"\n  let empty = \"\"\n  let space\
    \ = \" \"\n  let dash = \"-\"\n  let max_spaces = 2\n  let spaces = String(repeating:\
    \ space, count: max_spaces)\n  return text.replacingOccurrences(of: spaces, with:\
    \ dash)\n    .replacingOccurrences(of: space, with: underscore)\n    .replacingOccurrences(of:\
    \ dash, with: empty)", '    return text.replacingOccurrences(of: " ", with: "_").replacingOccurrences(of:
    "__", with: "-")', "    var result = \"\"\n    var counter = 0\n    for char in\
    \ text {\n        if char == \" \" {\n            if counter < 2 {\n         \
    \       result += \"_\"\n                counter += 1\n            } else {\n\
    \                result += \"-\"\n            }\n        } else {\n          \
    \  result += String(char)\n            counter = 0\n        }\n    }\n    return\
    \ result", "    var result = text\n    result = result.replacingOccurrences(of:\
    \ \" \", with: \"_\")\n    while result.contains(\"__\") {\n        result = result.replacingOccurrences(of:\
    \ \"__\", with: \"_\")\n    }\n    result = result.replacingOccurrences(of: \"\
    __\", with: \"-\")\n    return result", "    var result = \"\"\n    var lastCharIsSpace\
    \ = false\n    var consecutiveSpaces = 0\n    let chars = Array(text)\n    for\
    \ char in chars {\n        if char == \" \" {\n            if !lastCharIsSpace\
    \ {\n                result += \"_\"\n                lastCharIsSpace = true\n\
    \            }\n            consecutiveSpaces += 1\n        } else {\n       \
    \     if lastCharIsSpace {\n                if consecutiveSpaces > 2 {\n     \
    \               result += \"-\"\n                }\n                consecutiveSpaces\
    \ = 0\n            }\n            result += String(char)\n            lastCharIsSpace\
    \ = false\n        }\n    }\n    return result", "    let regex = try! NSRegularExpression(pattern:\
    \ \" +\", options: .caseInsensitive)\n    return regex.stringByReplacingMatches(in:\
    \ text,\n                                          options: [],\n            \
    \                              range: NSRange(location: 0, length: text.count),\n\
    \                                          withTemplate: \"-\")", "    var _text\
    \ = text\n    let chars = text.characters\n    let whitespace = NSCharacterSet.whitespaces\n\
    \    var lastSpaceRange: Range<String.Index>?\n    var spaceRanges: [Range<String.Index>]\
    \ = []\n    var currentSpaceRange: Range<String.Index>?\n    var i = 0\n    for\
    \ char in chars {\n        if whitespace.characterIsMember(char.utf16[0]) {\n\
    \            // A whitespace char\n            if currentSpaceRange == nil {\n\
    \                currentSpaceRange = chars.startIndex.advancedBy(i)..<chars.startIndex.advancedBy(i+1)\n\
    \            } else {\n                // Append to the current range\n      \
    \          currentSpaceRange = Range(start: currentSpaceRange!.startIndex, end:\
    \ chars.startIndex.advancedBy(i+1))\n            }\n        } else {\n       \
    \     // A non-whitespace char\n            if currentSpaceRange != nil {\n  \
    \              // Save the range\n                spaceRanges.append(currentSpaceRange!)\n\
    \                currentSpaceRange = nil\n            }\n        }\n        i++\n\
    \    }\n    if let _currentSpaceRange = currentSpaceRange {\n        spaceRanges.append(_currentSpaceRange)\n\
    \    }\n    for spaceRange in spaceRanges {\n        if spaceRange.endIndex.advancedBy(-1)\
    \ == spaceRange.startIndex {\n            // Replace this range with an underscore\n\
    \            _text.replaceRange(spaceRange, with: \"_\")\n        } else {\n \
    \           // Replace this range with a dash\n            _text.replaceRange(spaceRange,\
    \ with: \"-\")\n        }\n    }\n    return _text", "    // >>> fix_spaces(text:\
    \ \" Example\")\n    // \"Example\"\n    return text.replacingOccurrences(of:\
    \ \" \", with: \"_\")", '    return ""', "    var result = text.replacingOccurrences(of:\
    \ \" \", with: \"_\")\n    if result.contains(\"__\") {\n        result = result.replacingOccurrences(of:\
    \ \"__\", with: \"-\")\n    }\n    return result", "    let components = text.components(separatedBy:\
    \ \" \")\n    let filtered = components.filter { $0 != \"\" }\n    if filtered.count\
    \ == 1 {\n        return filtered[0]\n    }\n    if filtered.count == 2 {\n  \
    \      return filtered[0] + \"_\" + filtered[1]\n    }\n    let mapped = filtered.joined(separator:\
    \ \"-\")\n    return \"_\" + mapped", '    return text.replacingOccurrences(of:
    " ", with: "_").replacingOccurrences(of: "__", with: "-")', "    var result =\
    \ text.replacingOccurrences(of: \" \", with: \"_\")\n    result = result.replacingOccurrences(of:\
    \ \"__\", with: \"_\")\n    result = result.replacingOccurrences(of: \"___\",\
    \ with: \"-\")\n    return result", "    let text_array = text.split(separator:\
    \ \" \")\n    let reduced_string = text_array.reduce(\"\") { (accum, word) ->\
    \ String in\n        accum + word + \" \"\n    }\n    if text_array.count == 1\
    \ {\n        return String(reduced_string.dropLast())\n    } else if text_array.count\
    \ == 2 {\n        return String(reduced_string.dropLast()).replacingOccurrences(of:\
    \ \" \", with: \"_\")\n    } else {\n        return String(reduced_string.dropLast()).replacingOccurrences(of:\
    \ \"  \", with: \"-\")\n    }", "    var result = text\n    result = result.replacingOccurrences(of:\
    \ \"  \", with: \"-\")\n    result = result.replacingOccurrences(of: \" \", with:\
    \ \"_\")\n    return result", "    let texts = text.split(separator: \" \")\n\
    \    var results = \"\"\n    var used = false\n    for i in 0..<texts.count {\n\
    \        if texts[i] == \"\" {\n            if used {\n                results.append(\"\
    -\")\n            } else {\n                results.append(\"_\")\n          \
    \      used = true\n            }\n        } else {\n            results.append(texts[i])\n\
    \            results.append(\"_\")\n        }\n    }\n    return results", " \
    \   let fixedText = text.replace(\" \", with: \"_\")\n    let fixedText2 = fixedText.replace(\"\
    __\", with: \"-\")\n    return fixedText2", "    let spaces = CharacterSet.whitespaces\n\
    \    let space = \"_\"\n    var chars = Array(text)\n    var previousSpaceCount\
    \ = 0\n    var index = 0\n    for char in chars {\n        if spaces.contains(char.unicodeScalars.first!)\
    \ {\n            previousSpaceCount += 1\n            chars[index] = Character(space)\n\
    \        } else {\n            if previousSpaceCount > 2 {\n                while\
    \ previousSpaceCount > 0 {\n                    if chars[index - previousSpaceCount]\
    \ == Character(space) {\n                        chars[index - previousSpaceCount]\
    \ = Character(\"-\")\n                    }\n                    previousSpaceCount\
    \ -= 1\n                }\n            }\n            previousSpaceCount = 0\n\
    \        }\n        index += 1\n    }\n    return String(chars)", "\tvar result\
    \ = \"\"\n\tvar spaces = 0\n\tfor i in text {\n\t\tif i == \" \" {\n\t\t\tspaces\
    \ += 1\n\t\t\tif spaces > 2 {\n\t\t\t\tresult += \"-\"\n\t\t\t} else {\n\t\t\t\
    \tresult += \"_\"\n\t\t\t}\n\t\t} else {\n\t\t\tspaces = 0\n\t\t\tresult += String(i)\n\
    \t\t}\n\t}\n\treturn result", "    // your code goes here!\n    return text.replacingOccurrences(of:\
    \ \" \", with: \"_\")", "    let pattern = \"[ ]{2,}\"\n    let replacement =\
    \ \"-\"\n    return text.stringByReplacingOccurrencesOfString(pattern, withString:\
    \ replacement, options: NSStringCompareOptions.RegularExpressionSearch, range:\
    \ nil)\n        .stringByReplacingOccurrencesOfString(\" \", withString: \"_\"\
    )", "    let text = text.replacingOccurrences(of: \" \", with: \"_\")\n    let\
    \ text = text.replacingOccurrences(of: \"__\", with: \"_\")\n    let text = text.replacingOccurrences(of:\
    \ \"___\", with: \"-\")\n    return text", "    // put your code here\n    return\
    \ \"String\"", "    let fixedString = text.replacingOccurrences(of: \" \", with:\
    \ \"_\")\n    let consecutiveString = fixedString.replacingOccurrences(of: \"\
    __\", with: \"-\")\n    return consecutiveString", "  var result: String = \"\"\
    \n  var counter: Int = 0\n  for character in text {\n    if (character == \" \"\
    ) {\n      if (counter < 2) {\n        result += \"_\"\n      } else {\n     \
    \   result += \"-\"\n      }\n      counter += 1\n    } else {\n      result +=\
    \ String(character)\n      counter = 0\n    }\n  }\n  return result", "    let\
    \ r1 = NSRegularExpression(\"(^\\\\s+)\")\n    let r2 = NSRegularExpression(\"\
    (\\\\s+)\")\n    let r3 = NSRegularExpression(\"(\\\\s{2,})\")\n    let fixed\
    \ = r1.stringByReplacingMatches(in: text, options: [], range: NSRange(0..<text.count),\
    \ withTemplate: \"\")\n    let fixed2 = r2.stringByReplacingMatches(in: fixed,\
    \ options: [], range: NSRange(0..<fixed.count), withTemplate: \"_\")\n    return\
    \ r3.stringByReplacingMatches(in: fixed2, options: [], range: NSRange(0..<fixed2.count),\
    \ withTemplate: \"-\")", "    var result = \"\"\n    var spaceCount = 0\n    var\
    \ charCount = 0\n    var ignoreCount = 0\n    for char in text {\n        charCount\
    \ += 1\n        if char == \" \" {\n            spaceCount += 1\n            if\
    \ spaceCount > 2 {\n                if ignoreCount > 0 {\n                   \
    \ ignoreCount -= 1\n                } else {\n                    result += \"\
    -\"\n                    ignoreCount = 2\n                }\n            }\n \
    \       } else {\n            if charCount == 1 {\n                result += String(char)\n\
    \            } else {\n                if spaceCount > 0 {\n                 \
    \   result += \"_\"\n                }\n                result += String(char)\n\
    \            }\n            spaceCount = 0\n        }\n    }\n    return result",
  "    var result = \"\"\n    var p = 0\n    var spaces = 0\n    while p < text.count\
    \ {\n        if text[p] == \" \" {\n            spaces += 1\n        } else {\n\
    \            if spaces > 2 {\n                spaces = 0\n                result\
    \ += \"-\"\n            } else {\n                while spaces > 0 {\n       \
    \             result += \"_\"\n                    spaces -= 1\n             \
    \   }\n            }\n            result += text[p]\n        }\n        p += 1\n\
    \    }\n    return result", "    return text.replacingOccurrences(of: \" +\",\
    \ with: \"-\", options: .regularExpression, range: nil)\n        .replacingOccurrences(of:\
    \ \" \", with: \"_\")", "    let regex1 = try! NSRegularExpression(pattern: \"\
    \\\\s{2,}\", options: [])\n    let regex2 = try! NSRegularExpression(pattern:\
    \ \"\\\\s\", options: [])\n    var string = regex1.stringByReplacingMatches(in:\
    \ text, options: [], range: NSRange(location: 0, length: text.count), withTemplate:\
    \ \"-\")\n    string = regex2.stringByReplacingMatches(in: string, options: [],\
    \ range: NSRange(location: 0, length: string.count), withTemplate: \"_\")\n  \
    \  return string", "    let regex = try! NSRegularExpression(pattern: \"\\\\s+\"\
    , options: [])\n    return regex.stringByReplacingMatches(in: text, options: [],\
    \ range: NSRange(location: 0, length: text.utf16.count), withTemplate: \"_\")",
  "    // YOUR CODE HERE\n    let newText = text.replacingOccurrences(of: \" \", with:\
    \ \"_\")\n    let doubleText = newText.replacingOccurrences(of: \"__\", with:\
    \ \"-\")\n    return doubleText", "\treturn text.replacingOccurrences(of: \" \"\
    , with: \"_\")", "  var newText = \"\"\n  var prevChar = text.first\n  var charCount\
    \ = 0\n  for char in text {\n    if char == \" \" {\n      charCount += 1\n  \
    \    if charCount == 1 {\n        newText.append(\"_\")\n      } else if charCount\
    \ > 2 {\n        if prevChar != \"_\" {\n          newText.append(\"-\")\n   \
    \     }\n      }\n    } else {\n      charCount = 0\n      newText.append(char)\n\
    \    }\n    prevChar = char\n  }\n  return newText", "    var text_new = text\n\
    \    var text_spaces = text_new.characters.split{$0 == \" \"}.map(String.init)\n\
    \    if (text_spaces.count > 2) {\n        text_new = text_spaces.joined(separator:\
    \ \"-\")\n    } else {\n        text_new = text_spaces.joined(separator: \"_\"\
    )\n    }\n    return text_new", "    if text.count < 3 {\n        return text.replacingOccurrences(of:\
    \ \" \", with: \"_\")\n    }\n    var string = text\n    string = string.replacingOccurrences(of:\
    \ \"  \", with: \" \")\n    string = string.replacingOccurrences(of: \" \", with:\
    \ \"_\")\n    string = string.replacingOccurrences(of: \"__\", with: \"-\")\n\
    \    return string", "    return text.replacingOccurrences(of: \"  \", with: \"\
    -\")\n        .replacingOccurrences(of: \" \", with: \"_\")", "    let clean_text\
    \ = text.trimmingCharacters(in: .whitespacesAndNewlines)\n    if clean_text.count\
    \ <= 1 {\n        return clean_text\n    }\n    var previous_character = clean_text[clean_text.startIndex]\n\
    \    var new_text = \"\"\n    for index in clean_text.indices {\n        let character\
    \ = clean_text[index]\n        switch (previous_character, character) {\n    \
    \    case (\" \", \" \"):\n            new_text.append(\"-\")\n        case (\"\
    \ \", \"\\n\"):\n            new_text.append(\"-\")\n        case (\" \", \"\\\
    t\"):\n            new_text.append(\"-\")\n        case (\" \", \"-\"):\n    \
    \        new_text.append(\"-\")\n        case (\" \", _):\n            new_text.append(\"\
    _\")\n        case (_, \" \"):\n            new_text.append(\"_\")\n        case\
    \ (_, \"\\n\"):\n            new_text.append(\"_\")\n        case (_, \"\\t\"\
    ):\n            new_text.append(\"_\")\n        case (_, \"-\"):\n           \
    \ new_text.append(\"_\")\n        default:\n            new_text.append(character)\n\
    \        }\n        previous_character = character\n    }\n    return new_text",
  "    // write your code here\n    return \"\"", "\tlet spaceCount = text.filter\
    \ { $0 == \" \" }.count\n\treturn spaceCount > 2 ? text.replacingOccurrences(of:\
    \ \" \", with: \"-\") : text.replacingOccurrences(of: \" \", with: \"_\")", " \
    \ let split = text.split(separator: \" \")\n  return String(split.map({ String($0)\
    \ }).joined(separator: \"_\"))", '    return text.replacingOccurrences(of: " ",
    with: "_")', "    var result = \"\"\n    var last_character = \" \"\n    for character\
    \ in text {\n        if character == \" \" {\n            if last_character ==\
    \ \" \" {\n                result += \"-\"\n            } else {\n           \
    \     result += \"_\"\n            }\n        } else {\n            result +=\
    \ String(character)\n        }\n        last_character = String(character)\n \
    \   }\n    return result", "\tlet components = text.components(separatedBy: \"\
    \ \")\n\tlet newComponents = components.filter { $0 != \"\" }\n\tif newComponents.count\
    \ == 0 {\n\t\treturn text\n\t} else if newComponents.count == 1 {\n\t\treturn\
    \ newComponents[0]\n\t} else {\n\t\tlet firstElem = newComponents[0]\n\t\tlet\
    \ lastElem = newComponents[newComponents.count - 1]\n\t\tlet middleElems = newComponents[1..<newComponents.count\
    \ - 1]\n\t\treturn firstElem + \"_\" + middleElems.joined(separator: \"-\") +\
    \ \"_\" + lastElem\n\t}", "    let count = text.count\n    var space_count = 0\n\
    \    var new_text = \"\"\n    for i in 0..<count {\n        let c = text[text.index(text.startIndex,\
    \ offsetBy: i)]\n        if c == \" \" {\n            space_count += 1\n     \
    \       if space_count == 1 {\n                new_text += \"_\"\n           \
    \ } else if space_count > 2 {\n                new_text += \"-\"\n           \
    \ }\n        } else {\n            space_count = 0\n            new_text += String(c)\n\
    \        }\n    }\n    return new_text"]
stop_tokens:
- "\n}"
