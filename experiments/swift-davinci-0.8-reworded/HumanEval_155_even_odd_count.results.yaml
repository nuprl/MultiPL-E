language: swift
name: HumanEval_155_even_odd_count
results:
- exit_code: -4
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    var number = num\n    var even = 0\n    var odd =\
    \ 0\n    while number != 0 {\n        let mod = number % 10\n        if mod %\
    \ 2 == 0 {\n            even += 1\n        } else {\n            odd += 1\n  \
    \      }\n        number /= 10\n    }\n    return (even, odd)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num:\
    \ -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: Exception
  stderr: 'tmpkrt5ojh6/tmpkrt5ojh6.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4e46185c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4e45e7cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4e45e7c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4e45e7b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkrt5ojh6                        0x000055fd090cd8ed <unavailable> + 6381

    5    libc.so.6                          0x00002b4e46371460 __libc_start_main +
    245

    6    tmpkrt5ojh6                        0x000055fd090ccf69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660013642
- exit_code: 1
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    var even = 0\n    var odd = 0\n    for i in num.abs.digits\
    \ {\n        if i % 2 == 0 {\n            even += 1\n        } else {\n      \
    \      odd += 1\n        }\n    }\n    return (even, odd)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num:\
    \ -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: SyntaxError
  stderr: "/tmp/tmpf9dv8xm_.swift:11:18: error: value of type 'Int' has no member\
    \ 'abs'\n    for i in num.abs.digits {\n             ~~~ ^~~\n"
  stdout: ''
  timestamp: 1660013642
- exit_code: 0
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n  var evenCount = 0\n  var oddCount = 0\n  var currentNumber\
    \ = num\n  repeat {\n    let digit = currentNumber % 10\n    if digit.isMultiple(of:\
    \ 2) {\n      evenCount += 1\n    } else {\n      oddCount += 1\n    }\n    currentNumber\
    \ /= 10\n  } while currentNumber != 0\n  return (evenCount, oddCount)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num:\
    \ -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013642
- exit_code: -4
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    var even = 0\n    var odd = 0\n    for n in String(num).map({Int(String($0))!})\
    \ {\n        if n % 2 == 0 {\n            even += 1\n        } else {\n      \
    \      odd += 1\n        }\n    }\n    return (even, odd)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num:\
    \ -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: Exception
  stderr: 'tmpflji1eqk/tmpflji1eqk.swift:11: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b173a6d8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b173a3cf561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b173a3cf286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b173a3cf13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b173a3cebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpflji1eqk                        0x000055d2527ef0c1 <unavailable> + 8385

    6    libswiftCore.so                    0x00002b173a3b7820 Collection.map<A>(_:)
    + 426

    7    tmpflji1eqk                        0x000055d2527eeda2 <unavailable> + 7586

    8    tmpflji1eqk                        0x000055d2527ee724 <unavailable> + 5924

    9    libc.so.6                          0x00002b173a8c4460 __libc_start_main +
    245

    10   tmpflji1eqk                        0x000055d2527ee379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660013642
- exit_code: -4
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    var even = 0\n    var odd = 0\n    for i in String(num).split(separator:\
    \ \" \") {\n        if Int(i)! % 2 == 0 {\n            even += 1\n        }\n\
    \        else {\n            odd += 1\n        }\n    }\n    return (even, odd)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num:\
    \ -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: Exception
  stderr: 'tmphcz1zsok/tmphcz1zsok.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b066f55fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b066f256b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b066f256988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b066f2557b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphcz1zsok                        0x000055c2c521f91d <unavailable> + 6429

    5    libc.so.6                          0x00002b066f74b460 __libc_start_main +
    245

    6    tmphcz1zsok                        0x000055c2c521f4b9 <unavailable> + 5305

    '
  stdout: ''
  timestamp: 1660013642
- exit_code: -4
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    var even: Int = 0\n    var odd: Int = 0\n    var remainder:\
    \ Int = 0\n    var num = num\n    while num != 0 {\n        remainder = num %\
    \ 10\n        if remainder % 2 == 0 {\n            even += 1\n        } else {\n\
    \            odd += 1\n        }\n        num /= 10\n    }\n    return (even,\
    \ odd)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(even_odd_count(num: 7)\
    \ == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num:\
    \ 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num:\
    \ -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num:\
    \ -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))"
  status: Exception
  stderr: 'tmp0adik3ff/tmp0adik3ff.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2d1d5f7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2d1d2eeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2d1d2ee988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2d1d2ed7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0adik3ff                        0x000055febd05b8ed <unavailable> + 6381

    5    libc.so.6                          0x00002b2d1d7e3460 __libc_start_main +
    245

    6    tmp0adik3ff                        0x000055febd05af69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660013642
- exit_code: 0
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    var evenCount = 0\n    var oddCount = 0\n    var x\
    \ = num\n\n    if num == 0 {\n        return (1, 0)\n    }\n\n    while x != 0\
    \ {\n        if x % 2 == 0 {\n            evenCount += 1\n        } else {\n \
    \           oddCount += 1\n        }\n        x /= 10\n    }\n\n    return (evenCount,\
    \ oddCount)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(even_odd_count(num:\
    \ 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num:\
    \ 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num:\
    \ -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num:\
    \ -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013642
- exit_code: -4
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    var (even, odd) = (0, 0)\n    for digit in String(num).map({\
    \ Int(String($0))! }) {\n        if digit % 2 == 0 {\n            even += 1\n\
    \        } else {\n            odd += 1\n        }\n    }\n    return (even, odd)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num:\
    \ -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: Exception
  stderr: 'tmp580gq9m8/tmp580gq9m8.swift:10: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b47fad78c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b47faa6f561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b47faa6f286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b47faa6f13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b47faa6ebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp580gq9m8                        0x0000559bb92dc0c1 <unavailable> + 8385

    6    libswiftCore.so                    0x00002b47faa57820 Collection.map<A>(_:)
    + 426

    7    tmp580gq9m8                        0x0000559bb92dbda2 <unavailable> + 7586

    8    tmp580gq9m8                        0x0000559bb92db724 <unavailable> + 5924

    9    libc.so.6                          0x00002b47faf64460 __libc_start_main +
    245

    10   tmp580gq9m8                        0x0000559bb92db379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660013642
- exit_code: -4
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    var evenCount = 0\n    var oddCount = 0\n    let num\
    \ = abs(num)\n    var tempNum = num\n    while tempNum > 0 {\n        let lastDigit\
    \ = tempNum % 10\n        if lastDigit % 2 == 0 {\n            evenCount += 1\n\
    \        } else {\n            oddCount += 1\n        }\n        tempNum /= 10\n\
    \    }\n    return (evenCount, oddCount)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1,\
    \ 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: Exception
  stderr: 'tmpjvt65chw/tmpjvt65chw.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b67dd535c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b67dd22cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b67dd22c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b67dd22b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjvt65chw                        0x0000555c3995d9cd <unavailable> + 6605

    5    libc.so.6                          0x00002b67dd721460 __libc_start_main +
    245

    6    tmpjvt65chw                        0x0000555c3995d049 <unavailable> + 4169

    '
  stdout: ''
  timestamp: 1660013642
- exit_code: -4
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    return (0, 0)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78)\
    \ == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: Exception
  stderr: 'tmp_kefvok9/tmp_kefvok9.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aadf36f2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aadf33e9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aadf33e9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aadf33e87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_kefvok9                        0x00005616f6e41264 <unavailable> + 4708

    5    libc.so.6                          0x00002aadf38de460 __libc_start_main +
    245

    6    tmp_kefvok9                        0x00005616f6e40ec9 <unavailable> + 3785

    '
  stdout: ''
  timestamp: 1660013486
- exit_code: -4
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    var number = num\n    var odd = 0\n    var even =\
    \ 0\n    while number != 0 {\n        if number % 2 == 0 {\n            even +=\
    \ 1\n        } else {\n            odd += 1\n        }\n        number /= 10\n\
    \    }\n    return (even, odd)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num:\
    \ 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num:\
    \ 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num:\
    \ -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num:\
    \ -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))"
  status: Exception
  stderr: 'tmpq6sqfinq/tmpq6sqfinq.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aad11827c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aad1151eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aad1151e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aad1151d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpq6sqfinq                        0x000055de3c0218ed <unavailable> + 6381

    5    libc.so.6                          0x00002aad11a13460 __libc_start_main +
    245

    6    tmpq6sqfinq                        0x000055de3c020f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660013642
- exit_code: 0
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    let digits = Array(String(num)).compactMap { Int(String($0))\
    \ }\n    let even = digits.filter { $0 % 2 == 0 }.count\n    let odd = digits.filter\
    \ { $0 % 2 != 0 }.count\n    return (even, odd)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78)\
    \ == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013642
- exit_code: 0
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    var even = 0\n    var odd = 0\n    if num < 0 {\n\
    \        let str_n = String(abs(num))\n        for ch in str_n {\n           \
    \ if let digit = Int(String(ch)) {\n                if digit % 2 == 0 {\n    \
    \                even += 1\n                } else {\n                    odd\
    \ += 1\n                }\n            }\n        }\n    } else {\n        let\
    \ str_n = String(num)\n        for ch in str_n {\n            if let digit = Int(String(ch))\
    \ {\n                if digit % 2 == 0 {\n                    even += 1\n    \
    \            } else {\n                    odd += 1\n                }\n     \
    \       }\n        }\n    }\n    return (even, odd)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num:\
    \ -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013642
- exit_code: -4
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    return (0, 0)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78)\
    \ == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: Exception
  stderr: 'tmp_kefvok9/tmp_kefvok9.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aadf36f2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aadf33e9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aadf33e9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aadf33e87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_kefvok9                        0x00005616f6e41264 <unavailable> + 4708

    5    libc.so.6                          0x00002aadf38de460 __libc_start_main +
    245

    6    tmp_kefvok9                        0x00005616f6e40ec9 <unavailable> + 3785

    '
  stdout: ''
  timestamp: 1660013486
- exit_code: -4
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    var evenCount = 0\n    var oddCount = 0\n    var copyOfNumber\
    \ = num\n    while copyOfNumber != 0 {\n        if abs(copyOfNumber % 10) % 2\
    \ == 0 {\n            evenCount += 1\n        } else {\n            oddCount +=\
    \ 1\n        }\n        copyOfNumber /= 10\n    }\n    return (evenCount, oddCount)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num:\
    \ -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: Exception
  stderr: 'tmpx_hwq8ix/tmpx_hwq8ix.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab318b5ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab318851b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab318851988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab3188507b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx_hwq8ix                        0x0000560a5f8459cd <unavailable> + 6605

    5    libc.so.6                          0x00002ab318d46460 __libc_start_main +
    245

    6    tmpx_hwq8ix                        0x0000560a5f845049 <unavailable> + 4169

    '
  stdout: ''
  timestamp: 1660013642
- exit_code: 1
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    \n    var odd = 0\n    var even = 0\n    \n    for\
    \ character in String(num).characters {\n        let num = Int(String(character))!\n\
    \        if num % 2 == 0 {\n            even += 1\n        } else {\n        \
    \    odd += 1\n        }\n    }\n    \n    return (even, odd)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num:\
    \ -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: SyntaxError
  stderr: "/tmp/tmpmlay5c0o.swift:13:34: error: 'characters' is unavailable: Please\
    \ use String directly\n    for character in String(num).characters {\n       \
    \                          ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was\
    \ obsoleted in Swift 5.0\n    public var characters: String { get set }\n    \
    \           ^\n"
  stdout: ''
  timestamp: 1660013642
- exit_code: 1
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    let digits = digits_of(num: num)\n    var even = 0\n\
    \    var odd = 0\n    for digit in digits {\n        if digit % 2 == 0 {\n   \
    \         even += 1\n        } else {\n            odd += 1\n        }\n    }\n\
    \    return (even, odd)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num:\
    \ 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num:\
    \ 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num:\
    \ -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num:\
    \ -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))"
  status: SyntaxError
  stderr: "/tmp/tmpr9idoe4z.swift:9:18: error: cannot find 'digits_of' in scope\n\
    \    let digits = digits_of(num: num)\n                 ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013642
- exit_code: -4
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    return (0, 0)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78)\
    \ == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: Exception
  stderr: 'tmp_kefvok9/tmp_kefvok9.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aadf36f2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aadf33e9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aadf33e9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aadf33e87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_kefvok9                        0x00005616f6e41264 <unavailable> + 4708

    5    libc.so.6                          0x00002aadf38de460 __libc_start_main +
    245

    6    tmp_kefvok9                        0x00005616f6e40ec9 <unavailable> + 3785

    '
  stdout: ''
  timestamp: 1660013486
- exit_code: 1
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    var even = 0\n    var odd = 0\n    if num < 0 {\n\
    \        num *= -1\n    }\n    for i in num.string {\n        let num = Int(String(i))!\n\
    \        if num % 2 == 0 {\n            even += 1\n        } else {\n        \
    \    odd += 1\n        }\n    }\n    return (even, odd)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num:\
    \ -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: SyntaxError
  stderr: "/tmp/tmpaa7qpn9z.swift:12:13: error: left side of mutating operator isn't\
    \ mutable: 'num' is a 'let' constant\n        num *= -1\n        ~~~ ^\n/tmp/tmpaa7qpn9z.swift:14:18:\
    \ error: value of type 'Int' has no member 'string'\n    for i in num.string {\n\
    \             ~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660013642
- exit_code: -4
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n  /// Fill in your code here\n  return (0, 0)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num:\
    \ -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: Exception
  stderr: 'tmpu60xxql9/tmpu60xxql9.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aec51f2cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aec51c23b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aec51c23988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aec51c227b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu60xxql9                        0x000055c121873264 <unavailable> + 4708

    5    libc.so.6                          0x00002aec52118460 __libc_start_main +
    245

    6    tmpu60xxql9                        0x000055c121872ec9 <unavailable> + 3785

    '
  stdout: ''
  timestamp: 1660013642
- exit_code: -4
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    var evenCount = 0\n    var oddCount = 0\n    var tempNum\
    \ = num\n    while tempNum != 0 {\n        let lastDigit = tempNum % 10\n    \
    \    if lastDigit % 2 == 0 {\n            evenCount += 1\n        } else {\n \
    \           oddCount += 1\n        }\n        tempNum /= 10\n    }\n    return\
    \ (evenCount, oddCount)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num:\
    \ 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num:\
    \ 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num:\
    \ -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num:\
    \ -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))"
  status: Exception
  stderr: 'tmpfpk0ccb1/tmpfpk0ccb1.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1135b52c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1135849b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1135849988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b11358487b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfpk0ccb1                        0x0000555ecb4788ed <unavailable> + 6381

    5    libc.so.6                          0x00002b1135d3e460 __libc_start_main +
    245

    6    tmpfpk0ccb1                        0x0000555ecb477f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660013642
- exit_code: 1
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    \n    var even_count = 0\n    var odd_count = 0\n\
    \    \n    for i in String(num).characters {\n        if Int(String(i))! % 2 ==\
    \ 0 {\n            even_count += 1\n        } else {\n            odd_count +=\
    \ 1\n        }\n    }\n    \n    return (even_count, odd_count)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num:\
    \ -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: SyntaxError
  stderr: "/tmp/tmpa557689n.swift:13:26: error: 'characters' is unavailable: Please\
    \ use String directly\n    for i in String(num).characters {\n               \
    \          ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in\
    \ Swift 5.0\n    public var characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660013642
- exit_code: -4
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    return (0, 0)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78)\
    \ == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: Exception
  stderr: 'tmp_kefvok9/tmp_kefvok9.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aadf36f2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aadf33e9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aadf33e9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aadf33e87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_kefvok9                        0x00005616f6e41264 <unavailable> + 4708

    5    libc.so.6                          0x00002aadf38de460 __libc_start_main +
    245

    6    tmp_kefvok9                        0x00005616f6e40ec9 <unavailable> + 3785

    '
  stdout: ''
  timestamp: 1660013486
- exit_code: 0
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    var even_cnt = 0\n    var odd_cnt = 0\n    for c in\
    \ String(num) {\n        if let c = Int(String(c)) {\n            if c % 2 ==\
    \ 0 {\n                even_cnt += 1\n            } else {\n                odd_cnt\
    \ += 1\n            }\n        }\n    }\n    return (even_cnt, odd_cnt)\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num:\
    \ -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013642
- exit_code: -4
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    var evens = 0\n    var odds = 0\n    var absoluteNum\
    \ = abs(num)\n    while absoluteNum > 0 {\n        let currDigit = absoluteNum\
    \ % 10\n        if currDigit % 2 == 0 {\n            evens += 1\n        } else\
    \ {\n            odds += 1\n        }\n        absoluteNum /= 10\n    }\n    return\
    \ (evens, odds)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num:\
    \ 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num:\
    \ 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num:\
    \ -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num:\
    \ -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))"
  status: Exception
  stderr: 'tmp5db7l494/tmp5db7l494.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ada0359fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ada03296b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ada03296988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ada032957b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5db7l494                        0x00005576280509cd <unavailable> + 6605

    5    libc.so.6                          0x00002ada0378b460 __libc_start_main +
    245

    6    tmp5db7l494                        0x0000557628050049 <unavailable> + 4169

    '
  stdout: ''
  timestamp: 1660013642
- exit_code: 1
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    // var evenCount = 0\n    // var oddCount = 0\n  \
    \  // for digit in String(num).compactMap({ Int(String($0)) }) {\n    //     switch\
    \ digit {\n    //     case ...0:\n    //         oddCount += 1\n    //     default:\n\
    \    //         evenCount += 1\n    //     }\n    // }\n    // return (evenCount,\
    \ oddCount)\n    return (String(num).filter({ $0.isNumber && Int($0.ascii!)! %\
    \ 2 == 0 }).count, String(num).filter({ $0.isNumber && Int($0.ascii!)! % 2 !=\
    \ 0 }).count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num:\
    \ 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num:\
    \ 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num:\
    \ -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num:\
    \ -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))"
  status: SyntaxError
  stderr: "/tmp/tmp887k_1sr.swift:20:56: error: value of type 'String.Element' (aka\
    \ 'Character') has no member 'ascii'\n    return (String(num).filter({ $0.isNumber\
    \ && Int($0.ascii!)! % 2 == 0 }).count, String(num).filter({ $0.isNumber && Int($0.ascii!)!\
    \ % 2 != 0 }).count)\n                                                    ~~ ^~~~~\n\
    /tmp/tmp887k_1sr.swift:20:127: error: value of type 'String.Element' (aka 'Character')\
    \ has no member 'ascii'\n    return (String(num).filter({ $0.isNumber && Int($0.ascii!)!\
    \ % 2 == 0 }).count, String(num).filter({ $0.isNumber && Int($0.ascii!)! % 2 !=\
    \ 0 }).count)\n                                                              \
    \                                                             ~~ ^~~~~\n"
  stdout: ''
  timestamp: 1660013642
- exit_code: 1
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    let positive = abs(num)\n    var evenCount = 0\n \
    \   var oddCount = 0\n    while positive > 0 {\n        let digit = positive %\
    \ 10\n        if digit % 2 == 0 {\n            evenCount += 1\n        } else\
    \ {\n            oddCount += 1\n        }\n        positive /= 10\n    }\n   \
    \ return (evenCount, oddCount)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num:\
    \ 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num:\
    \ 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num:\
    \ -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num:\
    \ -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))"
  status: SyntaxError
  stderr: "/tmp/tmp6ghzmbb2.swift:19:18: error: left side of mutating operator isn't\
    \ mutable: 'positive' is a 'let' constant\n        positive /= 10\n        ~~~~~~~~\
    \ ^\n/tmp/tmp6ghzmbb2.swift:9:5: note: change 'let' to 'var' to make it mutable\n\
    \    let positive = abs(num)\n    ^~~\n    var\n"
  stdout: ''
  timestamp: 1660013642
- exit_code: -4
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    // TODO: Write some code to solve this coding challenge\n\
    \    return (0, 0)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num:\
    \ 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num:\
    \ 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num:\
    \ -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num:\
    \ -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))"
  status: Exception
  stderr: 'tmpms395xx5/tmpms395xx5.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae3b3256c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae3b2f4db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae3b2f4d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae3b2f4c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpms395xx5                        0x000055f13d06d264 <unavailable> + 4708

    5    libc.so.6                          0x00002ae3b3442460 __libc_start_main +
    245

    6    tmpms395xx5                        0x000055f13d06cec9 <unavailable> + 3785

    '
  stdout: ''
  timestamp: 1660013642
- exit_code: -4
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    fatalError(\"TODO: Implement even_odd_count\")\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num:\
    \ -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: Exception
  stderr: 'tmpr3lidr1t/tmpr3lidr1t.swift:9: Fatal error: TODO: Implement even_odd_count

    Current stack trace:

    0    libswiftCore.so                    0x00002b61ce3eac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b61ce0e1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b61ce0e1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b61ce0e07b0 _assertionFailure(_:_:file:line:flags:)
    + 365

    4    tmpr3lidr1t                        0x00005629613cc96c <unavailable> + 6508

    5    tmpr3lidr1t                        0x00005629613cc23b <unavailable> + 4667

    6    libc.so.6                          0x00002b61ce5d6460 __libc_start_main +
    245

    7    tmpr3lidr1t                        0x00005629613cbf59 <unavailable> + 3929

    '
  stdout: ''
  timestamp: 1660013642
- exit_code: 1
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    // Write your code here\n    // return (0, 0)\n  \
    \  var even = 0\n    var odd = 0\n    for i in String(num).characters {\n    \
    \    let a = Int(String(i))\n        if a! % 2 == 0 {\n            even += 1\n\
    \        } else {\n            odd += 1\n        }\n    }\n    return (even, odd)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num:\
    \ -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: SyntaxError
  stderr: "/tmp/tmpfiff3_x7.swift:13:26: error: 'characters' is unavailable: Please\
    \ use String directly\n    for i in String(num).characters {\n               \
    \          ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in\
    \ Swift 5.0\n    public var characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660013642
- exit_code: -4
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    var even_count = 0\n    var odd_count = 0\n    var\
    \ num = num\n    while num != 0 {\n        let dig = num % 10\n        if dig\
    \ % 2 == 0 {\n            even_count += 1\n        } else {\n            odd_count\
    \ += 1\n        }\n        num /= 10\n    }\n    return (even_count, odd_count)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num:\
    \ -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: Exception
  stderr: 'tmpctveqa3m/tmpctveqa3m.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8e2af47c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8e2ac3eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8e2ac3e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8e2ac3d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpctveqa3m                        0x00005586cd9f98ed <unavailable> + 6381

    5    libc.so.6                          0x00002b8e2b133460 __libc_start_main +
    245

    6    tmpctveqa3m                        0x00005586cd9f8f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660013642
- exit_code: 1
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    var count_even = 0\n    var count_odd = 0\n    let\
    \ num = String(num)\n    for i in num {\n        if String(i).intValue! % 2 ==\
    \ 0 {\n            count_even += 1\n        } else {\n            count_odd +=\
    \ 1\n        }\n    }\n    return (count_even, count_odd)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num:\
    \ -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: SyntaxError
  stderr: "/tmp/tmpie22ljev.swift:13:22: error: value of type 'String' has no member\
    \ 'intValue'\n        if String(i).intValue! % 2 == 0 {\n           ~~~~~~~~~\
    \ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013642
- exit_code: -4
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    var number = num\n    var evenCount = 0\n    var oddCount\
    \ = 0\n    while number != 0 {\n        let lastDigit = number % 10\n        if\
    \ lastDigit % 2 == 0 {\n            evenCount += 1\n        } else {\n       \
    \     oddCount += 1\n        }\n        number /= 10\n    }\n    return (evenCount,\
    \ oddCount)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(even_odd_count(num:\
    \ 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num:\
    \ 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num:\
    \ -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num:\
    \ -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))"
  status: Exception
  stderr: 'tmpu1p6wd9w/tmpu1p6wd9w.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aca20dadc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aca20aa4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aca20aa4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aca20aa37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu1p6wd9w                        0x00005601211f48ed <unavailable> + 6381

    5    libc.so.6                          0x00002aca20f99460 __libc_start_main +
    245

    6    tmpu1p6wd9w                        0x00005601211f3f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660013642
- exit_code: -4
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n  let num_str = String(num)\n  var even_count = 0\n  var\
    \ odd_count = 0\n  for i in num_str {\n    let i_int = Int(String(i))!\n    if\
    \ i_int % 2 == 0 {\n      even_count += 1\n    } else {\n      odd_count += 1\n\
    \    }\n  }\n  return (even_count, odd_count)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78)\
    \ == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: Exception
  stderr: 'tmpbn9fydn9/tmpbn9fydn9.swift:13: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002ba47b0cdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba47adc4561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ba47adc4286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ba47adc413c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ba47adc3bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpbn9fydn9                        0x00005645819cad9a <unavailable> + 7578

    6    tmpbn9fydn9                        0x00005645819ca584 <unavailable> + 5508

    7    libc.so.6                          0x00002ba47b2b9460 __libc_start_main +
    245

    8    tmpbn9fydn9                        0x00005645819ca1d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1660013642
- exit_code: 1
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    let num = abs(num)\n    var numOfEven = 0\n    var\
    \ numOfOdd = 0\n    for digit in \"\\(num)\".characters {\n        if let number\
    \ = Int(\"\\(digit)\") {\n            if number % 2 == 0 {\n                numOfEven\
    \ += 1\n            } else {\n                numOfOdd += 1\n            }\n \
    \       }\n    }\n    return (numOfEven, numOfOdd)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num:\
    \ -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: SyntaxError
  stderr: "/tmp/tmp3gxlurtn.swift:12:27: error: 'characters' is unavailable: Please\
    \ use String directly\n    for digit in \"\\(num)\".characters {\n           \
    \               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1660013642
- exit_code: 0
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    if num == 0 {\n        return (1, 0)\n    }\n    var\
    \ n = num\n    var even = 0\n    var odd = 0\n    while n != 0 {\n        let\
    \ lastDigit = n % 10\n        if lastDigit % 2 == 0 {\n            even += 1\n\
    \        } else {\n            odd += 1\n        }\n        n /= 10\n    }\n \
    \   return (even, odd)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num:\
    \ 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num:\
    \ 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num:\
    \ -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num:\
    \ -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013642
- exit_code: -4
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    let str = String(num)\n    var even = 0\n    var odd\
    \ = 0\n    for char in str {\n        let num = Int(String(char))!\n        if\
    \ num % 2 == 0 {\n            even += 1\n        } else {\n            odd +=\
    \ 1\n        }\n    }\n    return (even, odd)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78)\
    \ == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: Exception
  stderr: 'tmp7qsp4hf9/tmp7qsp4hf9.swift:13: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b021309ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0212d95561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b0212d95286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b0212d9513c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b0212d94bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp7qsp4hf9                        0x0000557bc10e7d9a <unavailable> + 7578

    6    tmp7qsp4hf9                        0x0000557bc10e7584 <unavailable> + 5508

    7    libc.so.6                          0x00002b021328a460 __libc_start_main +
    245

    8    tmp7qsp4hf9                        0x0000557bc10e71d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1660013642
- exit_code: 1
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    var even = 0\n    var odd = 0\n    let absNum = abs(num)\n\
    \    for (index, digit) in absNum.digits.enumerated() {\n        if index % 2\
    \ == 0 {\n            if digit % 2 == 0 {\n                even += 1\n       \
    \     } else {\n                odd += 1\n            }\n        } else {\n  \
    \          if digit % 2 == 0 {\n                odd += 1\n            } else {\n\
    \                even += 1\n            }\n        }\n    }\n    return (even,\
    \ odd)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(even_odd_count(num: 7)\
    \ == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num:\
    \ 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num:\
    \ -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num:\
    \ -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))"
  status: SyntaxError
  stderr: "/tmp/tmpcx7drhek.swift:12:34: error: value of type 'Int' has no member\
    \ 'digits'\n    for (index, digit) in absNum.digits.enumerated() {\n         \
    \                 ~~~~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660013642
- exit_code: -4
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    var evenCount = 0\n    var oddCount = 0\n    var number\
    \ = num\n    if number < 0 {\n        number = -number\n    }\n    while number\
    \ > 0 {\n        let lastDigit = number % 10\n        if lastDigit % 2 == 0 {\n\
    \            evenCount += 1\n        } else {\n            oddCount += 1\n   \
    \     }\n        number /= 10\n    }\n    return (evenCount, oddCount)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num:\
    \ -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: Exception
  stderr: 'tmp7raq3ogx/tmp7raq3ogx.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8cac540c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8cac237b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8cac237988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8cac2367b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7raq3ogx                        0x0000562abadaf8ed <unavailable> + 6381

    5    libc.so.6                          0x00002b8cac72c460 __libc_start_main +
    245

    6    tmp7raq3ogx                        0x0000562abadaef69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660013642
- exit_code: -4
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    var num = num\n    var even = 0\n    var odd = 0\n\
    \    while num != 0 {\n        if num % 2 == 0 {\n            even += 1\n    \
    \    } else {\n            odd += 1\n        }\n        num /= 10\n    }\n   \
    \ return (even, odd)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num:\
    \ 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num:\
    \ 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num:\
    \ -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num:\
    \ -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))"
  status: Exception
  stderr: 'tmp966buffw/tmp966buffw.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1f13be8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1f138dfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1f138df988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1f138de7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp966buffw                        0x000055904d5cf8ed <unavailable> + 6381

    5    libc.so.6                          0x00002b1f13dd4460 __libc_start_main +
    245

    6    tmp966buffw                        0x000055904d5cef69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660013642
- exit_code: -4
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    var num = num\n    var even = 0\n    var odd = 0\n\
    \    if num < 0 {\n        num = -num\n    }\n    while num > 0 {\n        if\
    \ num % 2 == 0 {\n            even += 1\n        } else {\n            odd +=\
    \ 1\n        }\n        num /= 10\n    }\n    return (even, odd)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num:\
    \ -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: Exception
  stderr: 'tmpp9s_pu6x/tmpp9s_pu6x.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2a31a50c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2a31747b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2a31747988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2a317467b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp9s_pu6x                        0x0000561d776d38ed <unavailable> + 6381

    5    libc.so.6                          0x00002b2a31c3c460 __libc_start_main +
    245

    6    tmpp9s_pu6x                        0x0000561d776d2f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660013642
- exit_code: 1
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    let digit = get_digits(num: num)\n    var even_count\
    \ = 0\n    var odd_count = 0\n    for i in digit {\n        if i % 2 == 0 {\n\
    \            even_count += 1\n        } else {\n            odd_count += 1\n \
    \       }\n    }\n    return (even_count, odd_count)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num:\
    \ -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: SyntaxError
  stderr: "/tmp/tmpi6p16kqf.swift:9:17: error: cannot find 'get_digits' in scope\n\
    \    let digit = get_digits(num: num)\n                ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013642
- exit_code: -4
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    var ev = 0\n    var od = 0\n    var num = num\n  \
    \  if num < 0 {\n        num = -num\n    }\n    while num > 0 {\n        if num\
    \ % 2 == 0 {\n            ev += 1\n        } else {\n            od += 1\n   \
    \     }\n        num /= 10\n    }\n    return (ev, od)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num:\
    \ -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: Exception
  stderr: 'tmpxz1nqob0/tmpxz1nqob0.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae58e20dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae58df04b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae58df04988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae58df037b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxz1nqob0                        0x00005628bf26e8ed <unavailable> + 6381

    5    libc.so.6                          0x00002ae58e3f9460 __libc_start_main +
    245

    6    tmpxz1nqob0                        0x00005628bf26df69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660013642
- exit_code: 0
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    var even_count = 0\n    var odd_count = 0\n    for\
    \ char in String(num) {\n        if char.isNumber {\n            if Int(String(char))!\
    \ % 2 == 0 {\n                even_count += 1\n            } else {\n        \
    \        odd_count += 1\n            }\n        }\n    }\n    return (even_count,\
    \ odd_count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num:\
    \ 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num:\
    \ 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num:\
    \ -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num:\
    \ -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013642
- exit_code: -4
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    var evenCount = 0\n    var oddCount = 0\n    var n\
    \ = num\n    if num < 0 {\n        n = num * -1\n    }\n    while n > 0 {\n  \
    \      let digit = n % 10\n        if digit % 2 == 0 {\n            evenCount\
    \ += 1\n        } else {\n            oddCount += 1\n        }\n        n /= 10\n\
    \    }\n    return (evenCount, oddCount)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1,\
    \ 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: Exception
  stderr: 'tmp0y919jct/tmp0y919jct.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aadd011bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aadcfe12b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aadcfe12988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aadcfe117b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0y919jct                        0x000055b08b5228ed <unavailable> + 6381

    5    libc.so.6                          0x00002aadd0307460 __libc_start_main +
    245

    6    tmp0y919jct                        0x000055b08b521f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660013642
- exit_code: -4
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    var copy = num\n    var odd = 0\n    var even = 0\n\
    \    if copy < 0 {\n        copy *= -1\n    }\n    while copy > 0 {\n        if\
    \ copy % 2 == 0 {\n            even += 1\n        } else {\n            odd +=\
    \ 1\n        }\n        copy /= 10\n    }\n    return (even, odd)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num:\
    \ -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: Exception
  stderr: 'tmpxvj0drgb/tmpxvj0drgb.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6775198c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6774e8fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6774e8f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6774e8e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxvj0drgb                        0x000055f1949438ed <unavailable> + 6381

    5    libc.so.6                          0x00002b6775384460 __libc_start_main +
    245

    6    tmpxvj0drgb                        0x000055f194942f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660013642
- exit_code: -4
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    return (0, 0)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78)\
    \ == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: Exception
  stderr: 'tmp_kefvok9/tmp_kefvok9.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aadf36f2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aadf33e9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aadf33e9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aadf33e87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_kefvok9                        0x00005616f6e41264 <unavailable> + 4708

    5    libc.so.6                          0x00002aadf38de460 __libc_start_main +
    245

    6    tmp_kefvok9                        0x00005616f6e40ec9 <unavailable> + 3785

    '
  stdout: ''
  timestamp: 1660013486
- exit_code: -4
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    // your code goes here\n    return (0, 0)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num:\
    \ -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: Exception
  stderr: 'tmpl39pxjd7/tmpl39pxjd7.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6e2ba98c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6e2b78fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6e2b78f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6e2b78e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpl39pxjd7                        0x00005606aaaf8264 <unavailable> + 4708

    5    libc.so.6                          0x00002b6e2bc84460 __libc_start_main +
    245

    6    tmpl39pxjd7                        0x00005606aaaf7ec9 <unavailable> + 3785

    '
  stdout: ''
  timestamp: 1660013642
- exit_code: -4
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    return (0, 0)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78)\
    \ == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: Exception
  stderr: 'tmp_kefvok9/tmp_kefvok9.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aadf36f2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aadf33e9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aadf33e9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aadf33e87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_kefvok9                        0x00005616f6e41264 <unavailable> + 4708

    5    libc.so.6                          0x00002aadf38de460 __libc_start_main +
    245

    6    tmp_kefvok9                        0x00005616f6e40ec9 <unavailable> + 3785

    '
  stdout: ''
  timestamp: 1660013486
- exit_code: -4
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    // YOUR CODE GOES HERE\n    return (0, 0)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num:\
    \ -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: Exception
  stderr: 'tmpea0pgt17/tmpea0pgt17.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aad0cce1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aad0c9d8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aad0c9d8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aad0c9d77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpea0pgt17                        0x000055ae8b0c5264 <unavailable> + 4708

    5    libc.so.6                          0x00002aad0cecd460 __libc_start_main +
    245

    6    tmpea0pgt17                        0x000055ae8b0c4ec9 <unavailable> + 3785

    '
  stdout: ''
  timestamp: 1660013642
- exit_code: -4
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    var evenCount = 0\n    var oddCount = 0\n    var tempNum\
    \ = num\n    while tempNum != 0 {\n        let temp = tempNum % 10\n        if\
    \ temp % 2 == 0 {\n            evenCount += 1\n        } else {\n            oddCount\
    \ += 1\n        }\n        tempNum /= 10\n    }\n    return (evenCount, oddCount)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num:\
    \ -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: Exception
  stderr: 'tmpo0m9h3of/tmpo0m9h3of.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7e477bdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7e474b4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7e474b4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7e474b37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo0m9h3of                        0x000055daf40b98ed <unavailable> + 6381

    5    libc.so.6                          0x00002b7e479a9460 __libc_start_main +
    245

    6    tmpo0m9h3of                        0x000055daf40b8f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660013642
- exit_code: 0
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n  var evens = 0\n  var odds = 0\n  let string = String(num)\n\
    \  for char in string {\n    if char.wholeNumberValue == nil {\n      continue\n\
    \    }\n    let value = char.wholeNumberValue!\n    if value % 2 == 0 {\n    \
    \  evens += 1\n    } else {\n      odds += 1\n    }\n  }\n  return (evens, odds)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num:\
    \ -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013642
- exit_code: 1
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    var even: Int = 0\n    var odd: Int = 0\n    var tempNum\
    \ = num\n    if num < 0 {\n        tempNum = tempNum * -1\n    }\n    for _ in\
    \ 1...Int(log10(Double(tempNum))) + 1 {\n        if tempNum % 2 == 0 {\n     \
    \       even += 1\n        } else {\n            odd += 1\n        }\n       \
    \ tempNum /= 10\n    }\n    return (even, odd)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78)\
    \ == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: SyntaxError
  stderr: "/tmp/tmpdkllvzyu.swift:15:22: error: cannot find 'log10' in scope\n   \
    \ for _ in 1...Int(log10(Double(tempNum))) + 1 {\n                     ^~~~~\n"
  stdout: ''
  timestamp: 1660013642
- exit_code: 1
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    var _evenCount = 0\n    var _oddCount = 0\n    let\
    \ _rawNum = abs(num)\n    for digit in String(_rawNum) {\n        if (digit %\
    \ 2 == 0) {\n            _evenCount += 1\n        } else {\n            _oddCount\
    \ += 1\n        }\n    }\n    return (_evenCount, _oddCount)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num:\
    \ -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: SyntaxError
  stderr: "/tmp/tmpbozwaezj.swift:13:13: error: cannot convert value of type 'Character'\
    \ to expected argument type 'Int'\n        if (digit % 2 == 0) {\n           \
    \ ^\n"
  stdout: ''
  timestamp: 1660013642
- exit_code: -4
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    fatalError(\"Replace with your own implementation\"\
    )\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num:\
    \ -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: Exception
  stderr: 'tmp94v87kvv/tmp94v87kvv.swift:9: Fatal error: Replace with your own implementation

    Current stack trace:

    0    libswiftCore.so                    0x00002ae740abac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae7407b1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae7407b1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae7407b07b0 _assertionFailure(_:_:file:line:flags:)
    + 365

    4    tmp94v87kvv                        0x0000559cfda6a96c <unavailable> + 6508

    5    tmp94v87kvv                        0x0000559cfda6a23b <unavailable> + 4667

    6    libc.so.6                          0x00002ae740ca6460 __libc_start_main +
    245

    7    tmp94v87kvv                        0x0000559cfda69f59 <unavailable> + 3929

    '
  stdout: ''
  timestamp: 1660013642
- exit_code: 0
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    var even_count = 0\n    var odd_count = 0\n    var\
    \ str_num = String(num)\n    if num < 0 {\n        str_num.removeFirst()\n   \
    \ }\n    for char in str_num {\n        if Int(String(char))! % 2 == 0 {\n   \
    \         even_count += 1\n        } else {\n            odd_count += 1\n    \
    \    }\n    }\n    return (even_count, odd_count)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num:\
    \ -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013642
- exit_code: -4
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    var num = num\n    var even = 0\n    var odd = 0\n\
    \    while num != 0 {\n        let digit = num % 10\n        if digit % 2 == 0\
    \ {\n            even += 1\n        } else {\n            odd += 1\n        }\n\
    \        num /= 10\n    }\n    return (even, odd)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num:\
    \ -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: Exception
  stderr: 'tmp7b6185l2/tmp7b6185l2.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4a4758bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4a47282b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4a47282988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4a472817b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7b6185l2                        0x0000555be55d88ed <unavailable> + 6381

    5    libc.so.6                          0x00002b4a47777460 __libc_start_main +
    245

    6    tmp7b6185l2                        0x0000555be55d7f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660013642
- exit_code: 1
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    var even_count = 0\n    var odd_count = 0\n    for\
    \ item in String(num) {\n        if String(item).intValue % 2 == 0 {\n       \
    \     even_count += 1\n        } else {\n            odd_count += 1\n        }\n\
    \    }\n    return (even_count, odd_count)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78)\
    \ == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: SyntaxError
  stderr: "/tmp/tmp430_9e97.swift:12:25: error: value of type 'String' has no member\
    \ 'intValue'\n        if String(item).intValue % 2 == 0 {\n           ~~~~~~~~~~~~\
    \ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013642
- exit_code: -4
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    var even_count = 0\n    var odd_count = 0\n    var\
    \ num1 = num\n    if num < 0 {\n        num1 = -num\n    }\n    while num1 > 0\
    \ {\n        if num1 % 2 == 0 {\n            even_count += 1\n        } else {\n\
    \            odd_count += 1\n        }\n        num1 /= 10\n    }\n    return\
    \ (even_count, odd_count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num:\
    \ 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num:\
    \ 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num:\
    \ -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num:\
    \ -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))"
  status: Exception
  stderr: 'tmp93av0310/tmp93av0310.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3bb864fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3bb8346b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3bb8346988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3bb83457b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp93av0310                        0x000055e1dfed88ed <unavailable> + 6381

    5    libc.so.6                          0x00002b3bb883b460 __libc_start_main +
    245

    6    tmp93av0310                        0x000055e1dfed7f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660013642
- exit_code: 1
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    // if num is less than zero, use recursion\n    //\
    \ to get the absolute value of num, then\n    // get the absolute value of the\
    \ sum of the\n    // individual digits.\n    let sum = num < 0 ? abs(num) :\n\
    \        abs(num.to_string().reduce(0) { $0 + Int(String($1))! })\n    var even\
    \ = 0\n    var odd = 0\n    // count the number of even and odd digits\n    //\
    \ in the sum\n    for i in sum.to_string() {\n        let j = Int(String(i))!\n\
    \        if j % 2 == 0 {\n            even += 1\n        } else {\n          \
    \  odd += 1\n        }\n    }\n    return (even, odd)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num:\
    \ -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: SyntaxError
  stderr: "/tmp/tmpxmy8r6sk.swift:14:17: error: value of type 'Int' has no member\
    \ 'to_string'\n        abs(num.to_string().reduce(0) { $0 + Int(String($1))! })\n\
    \            ~~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    var even_count = 0\n    var odd_count = 0\n    var\
    \ input = num\n    while input != 0 {\n        let digit = input % 10\n      \
    \  if digit.isMultiple(of: 2) {\n            even_count += 1\n        } else {\n\
    \            odd_count += 1\n        }\n        input /= 10\n    }\n    return\
    \ (even_count, odd_count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num:\
    \ 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num:\
    \ 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num:\
    \ -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num:\
    \ -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))"
  status: Exception
  stderr: 'tmpvx1_m244/tmpvx1_m244.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b51495cdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b51492c4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b51492c4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b51492c37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvx1_m244                        0x00005609cf13f9dd <unavailable> + 6621

    5    libc.so.6                          0x00002b51497b9460 __libc_start_main +
    245

    6    tmpvx1_m244                        0x00005609cf13f059 <unavailable> + 4185

    '
  stdout: ''
  timestamp: 1660013642
- exit_code: 0
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    let num_str = String(num)\n    var odds = 0\n    var\
    \ evens = 0\n    for c in num_str {\n        if let n = Int(String(c)) {\n   \
    \         if n % 2 == 0 {\n                evens += 1\n            } else {\n\
    \                odds += 1\n            }\n        }\n    }\n    return (evens,\
    \ odds)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(even_odd_count(num: 7)\
    \ == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num:\
    \ 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num:\
    \ -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num:\
    \ -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013642
- exit_code: -4
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    var even_count = 0\n    var odd_count = 0\n    var\
    \ remainder = num\n    if remainder < 0 {\n        remainder = -remainder\n  \
    \  }\n    while remainder > 0 {\n        if remainder % 2 == 0 {\n           \
    \ even_count += 1\n        } else {\n            odd_count += 1\n        }\n \
    \       remainder /= 10\n    }\n    return (even_count, odd_count)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num:\
    \ -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: Exception
  stderr: 'tmp5y78gd_n/tmp5y78gd_n.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aef13e3ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aef13b31b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aef13b31988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aef13b307b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5y78gd_n                        0x000056317fae08ed <unavailable> + 6381

    5    libc.so.6                          0x00002aef14026460 __libc_start_main +
    245

    6    tmp5y78gd_n                        0x000056317fadff69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660013642
- exit_code: -4
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    return (0, 0)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78)\
    \ == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: Exception
  stderr: 'tmp_kefvok9/tmp_kefvok9.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aadf36f2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aadf33e9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aadf33e9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aadf33e87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_kefvok9                        0x00005616f6e41264 <unavailable> + 4708

    5    libc.so.6                          0x00002aadf38de460 __libc_start_main +
    245

    6    tmp_kefvok9                        0x00005616f6e40ec9 <unavailable> + 3785

    '
  stdout: ''
  timestamp: 1660013486
- exit_code: 0
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    var evenCount = 0\n    var oddCount = 0\n    var numString\
    \ = \"\\(num)\"\n    let numStringCount = numString.count\n    if numString.first\
    \ == \"-\" {\n        numString.removeFirst()\n    }\n    let numStringArray =\
    \ Array(numString)\n    for number in numStringArray {\n        if let numberAsInt\
    \ = Int(String(number)) {\n            if numberAsInt % 2 == 0 {\n           \
    \     evenCount += 1\n            } else {\n                oddCount += 1\n  \
    \          }\n        }\n    }\n    return (evenCount, oddCount)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num:\
    \ -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013642
- exit_code: -4
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    /// Initialize even and odd count to zero\n    var\
    \ even_count = 0\n    var odd_count = 0\n    \n    /// Get the absolute value\
    \ of the number to simplify and reduce the logic\n    var num = abs(num)\n   \
    \ \n    /// Get the reminder of the number and add 1 to the counter of even or\
    \ odd\n    while num > 0 {\n        let rem = num % 10\n        if rem % 2 ==\
    \ 0 {\n            even_count += 1\n        } else {\n            odd_count +=\
    \ 1\n        }\n        num /= 10\n    }\n    \n    return (even_count, odd_count)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num:\
    \ -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: Exception
  stderr: 'tmpvj93u8d9/tmpvj93u8d9.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b81c8d74c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b81c8a6bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b81c8a6b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b81c8a6a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvj93u8d9                        0x0000559c040379cd <unavailable> + 6605

    5    libc.so.6                          0x00002b81c8f60460 __libc_start_main +
    245

    6    tmpvj93u8d9                        0x0000559c04037049 <unavailable> + 4169

    '
  stdout: ''
  timestamp: 1660013642
- exit_code: -4
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    var even = 0\n    var odd = 0\n    for i in String(num)\
    \ {\n        if Int(String(i))! % 2 == 0 {\n            even += 1\n        } else\
    \ {\n            odd += 1\n        }\n    }\n    return (even, odd)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num:\
    \ -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: Exception
  stderr: 'tmp0t4k2p8l/tmp0t4k2p8l.swift:12: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b83295a7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b832929e561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b832929e286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b832929e13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b832929dbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp0t4k2p8l                        0x000055aabcb31d42 <unavailable> + 7490

    6    tmp0t4k2p8l                        0x000055aabcb31584 <unavailable> + 5508

    7    libc.so.6                          0x00002b8329793460 __libc_start_main +
    245

    8    tmp0t4k2p8l                        0x000055aabcb311d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1660013642
- exit_code: -4
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    return (0, 0)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78)\
    \ == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: Exception
  stderr: 'tmp_kefvok9/tmp_kefvok9.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aadf36f2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aadf33e9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aadf33e9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aadf33e87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_kefvok9                        0x00005616f6e41264 <unavailable> + 4708

    5    libc.so.6                          0x00002aadf38de460 __libc_start_main +
    245

    6    tmp_kefvok9                        0x00005616f6e40ec9 <unavailable> + 3785

    '
  stdout: ''
  timestamp: 1660013486
- exit_code: 1
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n  let num = abs(num)\n  var evens = 0\n  var odds = 0\n\
    \  for digit in \"\\(num)\".characters {\n    let digit = Int(String(digit))!\n\
    \    if digit % 2 == 0 {\n      evens += 1\n    } else {\n      odds += 1\n  \
    \  }\n  }\n  return (evens, odds)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num:\
    \ 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num:\
    \ 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num:\
    \ -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num:\
    \ -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))"
  status: SyntaxError
  stderr: "/tmp/tmpmmbh2cat.swift:12:25: error: 'characters' is unavailable: Please\
    \ use String directly\n  for digit in \"\\(num)\".characters {\n             \
    \           ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in\
    \ Swift 5.0\n    public var characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660013642
- exit_code: -4
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n  var newNum = num\n  var even = 0\n  var odd = 0\n  if\
    \ newNum < 0 {\n    newNum = newNum * -1\n  }\n  while newNum > 0 {\n    let digit\
    \ = newNum % 10\n    if digit % 2 == 0 {\n      even += 1\n    } else {\n    \
    \  odd += 1\n    }\n    newNum = newNum / 10\n  }\n  return (even, odd)\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num:\
    \ -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: Exception
  stderr: 'tmpxnme1vnm/tmpxnme1vnm.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae27d9c3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae27d6bab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae27d6ba988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae27d6b97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxnme1vnm                        0x000055b1ef76d8ed <unavailable> + 6381

    5    libc.so.6                          0x00002ae27dbaf460 __libc_start_main +
    245

    6    tmpxnme1vnm                        0x000055b1ef76cf69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660013642
- exit_code: 1
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    var even = 0\n    var odd = 0\n    var num = num\n\
    \    if num < 0 {\n        num = -num\n    }\n    for _ in 0..<num.digits {\n\
    \        if num % 2 == 0 {\n            even += 1\n        } else {\n        \
    \    odd += 1\n        }\n        num /= 10\n    }\n    return (even, odd)\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num:\
    \ -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: SyntaxError
  stderr: "/tmp/tmptciez4a6.swift:15:22: error: value of type 'Int' has no member\
    \ 'digits'\n    for _ in 0..<num.digits {\n                 ~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660013642
- exit_code: -4
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    var even_count = 0\n    var odd_count = 0\n    var\
    \ number = num\n    while number != 0 {\n        let digit = number % 10\n   \
    \     if digit % 2 == 0 {\n            even_count += 1\n        } else {\n   \
    \         odd_count += 1\n        }\n        number /= 10\n    }\n    return (even_count,\
    \ odd_count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num:\
    \ 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num:\
    \ 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num:\
    \ -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num:\
    \ -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))"
  status: Exception
  stderr: 'tmp6re_plgd/tmp6re_plgd.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002addd5c9cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002addd5993b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002addd5993988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002addd59927b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6re_plgd                        0x00005571fd8248ed <unavailable> + 6381

    5    libc.so.6                          0x00002addd5e88460 __libc_start_main +
    245

    6    tmp6re_plgd                        0x00005571fd823f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660013642
- exit_code: -4
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    return (0, 0)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78)\
    \ == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: Exception
  stderr: 'tmp_kefvok9/tmp_kefvok9.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aadf36f2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aadf33e9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aadf33e9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aadf33e87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_kefvok9                        0x00005616f6e41264 <unavailable> + 4708

    5    libc.so.6                          0x00002aadf38de460 __libc_start_main +
    245

    6    tmp_kefvok9                        0x00005616f6e40ec9 <unavailable> + 3785

    '
  stdout: ''
  timestamp: 1660013486
- exit_code: 1
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    var even: Int = 0\n    var odd: Int = 0\n    for n\
    \ in String(num).characters {\n        if n == \"-\" {\n            continue\n\
    \        }\n        if Int(String(n))! % 2 == 0 {\n            even += 1\n   \
    \     } else {\n            odd += 1\n        }\n    }\n    return (even, odd)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num:\
    \ -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: SyntaxError
  stderr: "/tmp/tmp8brycher.swift:11:26: error: 'characters' is unavailable: Please\
    \ use String directly\n    for n in String(num).characters {\n               \
    \          ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in\
    \ Swift 5.0\n    public var characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660013642
- exit_code: -4
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    var even = 0\n    var odd = 0\n    var value = num\n\
    \    while value != 0 {\n        let digit = value % 10\n        if digit % 2\
    \ == 0 {\n            even += 1\n        } else {\n            odd += 1\n    \
    \    }\n        value /= 10\n    }\n    return (even, odd)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num:\
    \ -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: Exception
  stderr: 'tmp1673xx5i/tmp1673xx5i.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9c411dac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9c40ed1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9c40ed1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9c40ed07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1673xx5i                        0x000055dd132d68ed <unavailable> + 6381

    5    libc.so.6                          0x00002b9c413c6460 __libc_start_main +
    245

    6    tmp1673xx5i                        0x000055dd132d5f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660013642
- exit_code: 0
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    let num = abs(num)\n    var even = 0\n    var odd\
    \ = 0\n    for digit in String(num) {\n        if Int(String(digit))! % 2 == 0\
    \ {\n            even += 1\n        } else {\n            odd += 1\n        }\n\
    \    }\n    return (even, odd)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num:\
    \ 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num:\
    \ 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num:\
    \ -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num:\
    \ -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013642
- exit_code: -4
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    var evens = 0\n    var odds = 0\n    var num = num\n\
    \    if num < 0 {\n        num = -num\n    }\n    while num > 0 {\n        if\
    \ num % 2 == 0 {\n            evens += 1\n        } else {\n            odds +=\
    \ 1\n        }\n        num /= 10\n    }\n    return (evens, odds)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num:\
    \ -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: Exception
  stderr: 'tmpvfkfxi2j/tmpvfkfxi2j.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b03dd84dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b03dd544b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b03dd544988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b03dd5437b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvfkfxi2j                        0x000055b94ee4d8ed <unavailable> + 6381

    5    libc.so.6                          0x00002b03dda39460 __libc_start_main +
    245

    6    tmpvfkfxi2j                        0x000055b94ee4cf69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660013642
- exit_code: -4
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    var even = 0\n    var odd = 0\n    var _num = num\n\
    \    while _num != 0 {\n        let digit = _num % 10\n        if digit.isMultiple(of:\
    \ 2) {\n            even += 1\n        } else {\n            odd += 1\n      \
    \  }\n        _num /= 10\n    }\n    return (even, odd)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num:\
    \ -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: Exception
  stderr: 'tmpgz2pur05/tmpgz2pur05.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6e67c01c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6e678f8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6e678f8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6e678f77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgz2pur05                        0x0000557227c939dd <unavailable> + 6621

    5    libc.so.6                          0x00002b6e67ded460 __libc_start_main +
    245

    6    tmpgz2pur05                        0x0000557227c93059 <unavailable> + 4185

    '
  stdout: ''
  timestamp: 1660013642
- exit_code: 0
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    var even_count = 0\n    var odd_count = 0\n    var\
    \ temp = num\n    if temp == 0 {\n        return (1, 0)\n    }\n    else if temp\
    \ < 0 {\n        temp = -temp\n    }\n    while temp > 0 {\n        let last_digit\
    \ = temp % 10\n        if last_digit % 2 == 0 {\n            even_count += 1\n\
    \        }\n        else {\n            odd_count += 1\n        }\n        temp\
    \ /= 10\n    }\n    return (even_count, odd_count)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num:\
    \ -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013642
- exit_code: -4
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    var positive_num = abs(num)\n    var even_count =\
    \ 0\n    var odd_count = 0\n    while positive_num > 0 {\n        let last_digit\
    \ = positive_num % 10\n        if last_digit % 2 == 0 {\n            even_count\
    \ += 1\n        } else {\n            odd_count += 1\n        }\n        positive_num\
    \ /= 10\n    }\n    return (even_count, odd_count)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num:\
    \ -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: Exception
  stderr: 'tmpklojytjx/tmpklojytjx.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4cc2bffc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4cc28f6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4cc28f6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4cc28f57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpklojytjx                        0x00005644613ff9cd <unavailable> + 6605

    5    libc.so.6                          0x00002b4cc2deb460 __libc_start_main +
    245

    6    tmpklojytjx                        0x00005644613ff049 <unavailable> + 4169

    '
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    return (0, 0)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78)\
    \ == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: Exception
  stderr: 'tmp_kefvok9/tmp_kefvok9.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aadf36f2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aadf33e9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aadf33e9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aadf33e87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_kefvok9                        0x00005616f6e41264 <unavailable> + 4708

    5    libc.so.6                          0x00002aadf38de460 __libc_start_main +
    245

    6    tmp_kefvok9                        0x00005616f6e40ec9 <unavailable> + 3785

    '
  stdout: ''
  timestamp: 1660013486
- exit_code: 0
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    let arrayOfDigits = String(num).compactMap { Int(String($0))\
    \ }\n    var oddNumbers = 0\n    var evenNumbers = 0\n    for num in arrayOfDigits\
    \ {\n        if num % 2 == 0 {\n            evenNumbers += 1\n        } else {\n\
    \            oddNumbers += 1\n        }\n    }\n    return (evenNumbers, oddNumbers)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num:\
    \ -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    var num = num\n    var count_even = 0\n    var count_odd\
    \ = 0\n    while num != 0 {\n        let mod = num % 10\n        if mod % 2 ==\
    \ 0 {\n            count_even += 1\n        } else {\n            count_odd +=\
    \ 1\n        }\n        num /= 10\n    }\n    return (count_even, count_odd)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num:\
    \ -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: Exception
  stderr: 'tmpw0t_l3z3/tmpw0t_l3z3.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b89aeb0cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b89ae803b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b89ae803988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b89ae8027b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw0t_l3z3                        0x000055d6d38c68ed <unavailable> + 6381

    5    libc.so.6                          0x00002b89aecf8460 __libc_start_main +
    245

    6    tmpw0t_l3z3                        0x000055d6d38c5f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    return (0, 0)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78)\
    \ == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: Exception
  stderr: 'tmp_kefvok9/tmp_kefvok9.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aadf36f2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aadf33e9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aadf33e9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aadf33e87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_kefvok9                        0x00005616f6e41264 <unavailable> + 4708

    5    libc.so.6                          0x00002aadf38de460 __libc_start_main +
    245

    6    tmp_kefvok9                        0x00005616f6e40ec9 <unavailable> + 3785

    '
  stdout: ''
  timestamp: 1660013486
- exit_code: 0
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    var evenCount = 0\n    var oddCount = 0\n    let numAbs\
    \ = abs(num)\n    var stringNum = String(numAbs)\n    for digit in stringNum {\n\
    \        if Int(String(digit))! % 2 == 0 {\n            evenCount += 1\n     \
    \   } else {\n            oddCount += 1\n        }\n    }\n    return (evenCount,\
    \ oddCount)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(even_odd_count(num:\
    \ 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num:\
    \ 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num:\
    \ -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num:\
    \ -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013643
- exit_code: 1
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    var evenCount = 0\n    var oddCount = 0\n    for char\
    \ in String(num).characters {\n        if Int(String(char))! % 2 == 0 {\n    \
    \        evenCount += 1\n        } else {\n            oddCount += 1\n       \
    \ }\n    }\n    return (evenCount, oddCount)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78)\
    \ == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: SyntaxError
  stderr: "/tmp/tmp_xa2m9t0.swift:11:29: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in String(num).characters {\n            \
    \                ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1660013642
- exit_code: -4
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    \n    var n = num\n    var evenCount = 0\n    var\
    \ oddCount = 0\n    \n    if n < 0 {\n        n = -n\n    }\n    \n    while n\
    \ > 0 {\n        if n % 2 == 0 {\n            evenCount += 1\n        } else {\n\
    \            oddCount += 1\n        }\n        n /= 10\n    }\n    \n    return\
    \ (evenCount, oddCount)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num:\
    \ 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num:\
    \ 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num:\
    \ -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num:\
    \ -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))"
  status: Exception
  stderr: 'tmpbzpr5hr7/tmpbzpr5hr7.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac56ea85c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac56e77cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac56e77c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac56e77b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbzpr5hr7                        0x000055fbd61268ed <unavailable> + 6381

    5    libc.so.6                          0x00002ac56ec71460 __libc_start_main +
    245

    6    tmpbzpr5hr7                        0x000055fbd6125f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660013643
- exit_code: 1
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    let digits = digit_counter(num: num)\n    var even\
    \ = 0\n    var odd = 0\n    for i in 0..<digits {\n        let tp = even_odd_calculator(num:\
    \ num, position: i)\n        if tp == 0 {\n            even += 1\n        } else\
    \ {\n            odd += 1\n        }\n    }\n    return (even, odd)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num:\
    \ -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: SyntaxError
  stderr: "/tmp/tmp26czo6u2.swift:9:18: error: cannot find 'digit_counter' in scope\n\
    \    let digits = digit_counter(num: num)\n                 ^~~~~~~~~~~~~\n/tmp/tmp26czo6u2.swift:13:18:\
    \ error: cannot find 'even_odd_calculator' in scope\n        let tp = even_odd_calculator(num:\
    \ num, position: i)\n                 ^~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013642
- exit_code: 0
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    \n    var evenCount = 0\n    var oddCount = 0\n  \
    \  \n    let aString = String(num)\n    \n    for character in aString {\n   \
    \     if character == \"-\" {\n            continue\n        }\n        if Int(String(character))!\
    \ % 2 == 0 {\n            evenCount += 1\n        } else {\n            oddCount\
    \ += 1\n        }\n    }\n    \n    return (evenCount, oddCount)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num:\
    \ -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    var even_count = 0\n    var odd_count = 0\n    var\
    \ num = num\n    while num != 0 {\n        let digit = num % 10\n        if digit\
    \ % 2 == 0 {\n            even_count += 1\n        } else {\n            odd_count\
    \ += 1\n        }\n        num /= 10\n    }\n    return (even_count, odd_count)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num:\
    \ -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: Exception
  stderr: 'tmppnd34t_v/tmppnd34t_v.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b70c520dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b70c4f04b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b70c4f04988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b70c4f037b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppnd34t_v                        0x00005576874ab8ed <unavailable> + 6381

    5    libc.so.6                          0x00002b70c53f9460 __libc_start_main +
    245

    6    tmppnd34t_v                        0x00005576874aaf69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660013486
- exit_code: 0
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    var even = 0\n    var odd = 0\n    if num == 0 {\n\
    \        even += 1\n    }\n    var tempNum = num\n    while tempNum != 0 {\n \
    \       let remainder = tempNum % 10\n        if remainder % 2 == 0 {\n      \
    \      even += 1\n        } else {\n            odd += 1\n        }\n        tempNum\
    \ /= 10\n    }\n    return (even, odd)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1,\
    \ 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    var evenCount = 0\n    var oddCount = 0\n    var tempNum\
    \ = num\n    while tempNum != 0 {\n        let digit = tempNum % 10\n        if\
    \ digit % 2 == 0 {\n            evenCount += 1\n        } else {\n           \
    \ oddCount += 1\n        }\n        tempNum /= 10\n    }\n    return (evenCount,\
    \ oddCount)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(even_odd_count(num:\
    \ 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num:\
    \ 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num:\
    \ -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num:\
    \ -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))"
  status: Exception
  stderr: 'tmp3r8u21lw/tmp3r8u21lw.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac3eae5ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac3eab51b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac3eab51988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac3eab507b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3r8u21lw                        0x0000560b034058ed <unavailable> + 6381

    5    libc.so.6                          0x00002ac3eb046460 __libc_start_main +
    245

    6    tmp3r8u21lw                        0x0000560b03404f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660013643
- exit_code: 1
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    var even_count = 0\n    var odd_count = 0\n    for\
    \ digit in String(num).characters {\n        if Int(String(digit))! % 2 == 0 {\n\
    \            even_count += 1\n        } else {\n            odd_count += 1\n \
    \       }\n    }\n    return (even_count, odd_count)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num:\
    \ -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: SyntaxError
  stderr: "/tmp/tmp1h4fzrnp.swift:11:30: error: 'characters' is unavailable: Please\
    \ use String directly\n    for digit in String(num).characters {\n           \
    \                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1660013643
- exit_code: 0
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    var even = 0\n    var odd = 0\n    for x in String(num).compactMap({Int(String($0))})\
    \ {\n        if x % 2 == 0 {\n            even += 1\n        } else {\n      \
    \      odd += 1\n        }\n    }\n    return (even, odd)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num:\
    \ -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013643
- exit_code: 0
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    \n    var evenCount = 0\n    var oddCount = 0\n  \
    \  \n    let numCopy = abs(num)\n    \n    for digit in numCopy.description {\n\
    \        if digit.isNumber {\n            if Int(String(digit))! % 2 == 0 {\n\
    \                evenCount += 1\n            } else {\n                oddCount\
    \ += 1\n            }\n        }\n    }\n    \n    return (evenCount, oddCount)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num:\
    \ -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    var even = 0\n    var odd = 0\n    var num = num\n\
    \    while num != 0 {\n        if num % 2 == 0 {\n            even += 1\n    \
    \    } else {\n            odd += 1\n        }\n        num /= 10\n    }\n   \
    \ return (even, odd)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num:\
    \ 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num:\
    \ 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num:\
    \ -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num:\
    \ -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))"
  status: Exception
  stderr: 'tmpnalrttde/tmpnalrttde.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21e4394c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21e408bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21e408b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21e408a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnalrttde                        0x00005559da5038ed <unavailable> + 6381

    5    libc.so.6                          0x00002b21e4580460 __libc_start_main +
    245

    6    tmpnalrttde                        0x00005559da502f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660013486
- exit_code: -4
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    \n    func even_odd_count_helper(num: Int, even: Int,\
    \ odd: Int) -> (Int, Int) {\n        if num == 0 {\n            return (even,\
    \ odd)\n        }\n        else {\n            let digit = num % 10\n        \
    \    if digit % 2 == 0 {\n                return even_odd_count_helper(num: num\
    \ / 10, even: even + 1, odd: odd)\n            }\n            else {\n       \
    \         return even_odd_count_helper(num: num / 10, even: even, odd: odd + 1)\n\
    \            }\n        }\n    }\n    \n    if num < 0 {\n        return even_odd_count_helper(num:\
    \ -num, even: 0, odd: 0)\n    }\n    else {\n        return even_odd_count_helper(num:\
    \ num, even: 0, odd: 0)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num:\
    \ 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num:\
    \ 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num:\
    \ -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num:\
    \ -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))"
  status: Exception
  stderr: 'tmp7q1gxowf/tmp7q1gxowf.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b439e128c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b439de1fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b439de1f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b439de1e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7q1gxowf                        0x0000557f946688ed <unavailable> + 6381

    5    libc.so.6                          0x00002b439e314460 __libc_start_main +
    245

    6    tmp7q1gxowf                        0x0000557f94667f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    var evenCount = 0\n    var oddCount = 0\n    var num\
    \ = num\n    while num != 0 {\n        let digit = num % 10\n        if digit\
    \ % 2 == 0 {\n            evenCount += 1\n        } else {\n            oddCount\
    \ += 1\n        }\n        num /= 10\n    }\n    return (evenCount, oddCount)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num:\
    \ -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: Exception
  stderr: 'tmp1w90hpee/tmp1w90hpee.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea84fcac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea84cc1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea84cc1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea84cc07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1w90hpee                        0x000055d6c15b58ed <unavailable> + 6381

    5    libc.so.6                          0x00002aea851b6460 __libc_start_main +
    245

    6    tmp1w90hpee                        0x000055d6c15b4f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660013486
- exit_code: -4
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    return (0, 0)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78)\
    \ == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: Exception
  stderr: 'tmp_kefvok9/tmp_kefvok9.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aadf36f2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aadf33e9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aadf33e9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aadf33e87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_kefvok9                        0x00005616f6e41264 <unavailable> + 4708

    5    libc.so.6                          0x00002aadf38de460 __libc_start_main +
    245

    6    tmp_kefvok9                        0x00005616f6e40ec9 <unavailable> + 3785

    '
  stdout: ''
  timestamp: 1660013486
- exit_code: 1
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    var even = 0\n    var odd = 0\n    for i in (0..<String(num).count).reversed()\
    \ {\n        let digit = String(num).firstIndex(String(num).endIndex, offsetBy:\
    \ -i-1)\n        if String(num)[digit] == \"-\" {\n            continue\n    \
    \    }\n        else if String(num)[digit] == \"0\" || String(num)[digit] == \"\
    2\" || String(num)[digit] == \"4\" || String(num)[digit] == \"6\" || String(num)[digit]\
    \ == \"8\" {\n            even += 1\n        }\n        else {\n            odd\
    \ += 1\n        }\n    }\n    return (even, odd)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num:\
    \ -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: SyntaxError
  stderr: "/tmp/tmpa889sr58.swift:12:78: error: extra argument 'offsetBy' in call\n\
    \        let digit = String(num).firstIndex(String(num).endIndex, offsetBy: -i-1)\n\
    \                                          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~\n"
  stdout: ''
  timestamp: 1660013644
- exit_code: -4
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    return (0, 0)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78)\
    \ == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: Exception
  stderr: 'tmp_kefvok9/tmp_kefvok9.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aadf36f2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aadf33e9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aadf33e9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aadf33e87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_kefvok9                        0x00005616f6e41264 <unavailable> + 4708

    5    libc.so.6                          0x00002aadf38de460 __libc_start_main +
    245

    6    tmp_kefvok9                        0x00005616f6e40ec9 <unavailable> + 3785

    '
  stdout: ''
  timestamp: 1660013486
- exit_code: 0
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    let strnum = String(num)\n    var evens = 0\n    var\
    \ odds = 0\n    for digit in strnum {\n        if digit.isNumber && digit.wholeNumberValue!\
    \ % 2 == 0 {\n            evens += 1\n        } else if digit.isNumber && digit.wholeNumberValue!\
    \ % 2 != 0 {\n            odds += 1\n        }\n    }\n    return (evens, odds)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num:\
    \ -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013643
- exit_code: 0
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    let absNum = abs(num)\n    let intArray = absNum.description.compactMap\
    \ { $0.wholeNumberValue }\n    let evens = intArray.filter { $0 % 2 == 0 }\n \
    \   let odds = intArray.filter { $0 % 2 != 0 }\n    return (evens.count, odds.count)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num:\
    \ -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    var _num = num\n    var evenCount = 0\n    var oddCount\
    \ = 0\n    while _num != 0 {\n        if abs(_num % 10) % 2 == 0 {\n         \
    \   evenCount += 1\n        } else {\n            oddCount += 1\n        }\n \
    \       _num /= 10\n    }\n    return (evenCount, oddCount)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num:\
    \ -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: Exception
  stderr: 'tmpi9q4b8na/tmpi9q4b8na.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b19700f2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b196fde9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b196fde9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b196fde87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi9q4b8na                        0x000055a1f13319cd <unavailable> + 6605

    5    libc.so.6                          0x00002b19702de460 __libc_start_main +
    245

    6    tmpi9q4b8na                        0x000055a1f1331049 <unavailable> + 4169

    '
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n  fatalError(\"Implement the even_odd_count function\"\
    )\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num:\
    \ -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: Exception
  stderr: 'tmpubktxtuh/tmpubktxtuh.swift:9: Fatal error: Implement the even_odd_count
    function

    Current stack trace:

    0    libswiftCore.so                    0x00002b64c92c8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b64c8fbfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b64c8fbf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b64c8fbe7b0 _assertionFailure(_:_:file:line:flags:)
    + 365

    4    tmpubktxtuh                        0x0000561bbaa0996c <unavailable> + 6508

    5    tmpubktxtuh                        0x0000561bbaa0923b <unavailable> + 4667

    6    libc.so.6                          0x00002b64c94b4460 __libc_start_main +
    245

    7    tmpubktxtuh                        0x0000561bbaa08f59 <unavailable> + 3929

    '
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    var even = 0\n    var odd = 0\n    let num_str = String(num)\n\
    \    for num in num_str {\n        if Int(String(num))! % 2 == 0 {\n         \
    \   even += 1\n        } else {\n            odd += 1\n        }\n    }\n    return\
    \ (even, odd)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num:\
    \ 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num:\
    \ 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num:\
    \ -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num:\
    \ -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))"
  status: Exception
  stderr: 'tmp15g0qce5/tmp15g0qce5.swift:13: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b4f5a732c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4f5a429561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b4f5a429286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b4f5a42913c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b4f5a428bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp15g0qce5                        0x00005619f70fdd84 <unavailable> + 7556

    6    tmp15g0qce5                        0x00005619f70fd584 <unavailable> + 5508

    7    libc.so.6                          0x00002b4f5a91e460 __libc_start_main +
    245

    8    tmp15g0qce5                        0x00005619f70fd1d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    let str = String(num)\n    var even = 0\n    var odd\
    \ = 0\n    for char in str {\n        let digit = Int(String(char))\n        if\
    \ digit! % 2 == 0 {\n            even += 1\n        } else {\n            odd\
    \ += 1\n        }\n    }\n    return (even, odd)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num:\
    \ -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: Exception
  stderr: 'tmp2ikuzk3c/tmp2ikuzk3c.swift:14: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b84f4031c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b84f3d28561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b84f3d28286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b84f3d2813c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b84f3d27bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp2ikuzk3c                        0x0000563af207bdad <unavailable> + 7597

    6    tmp2ikuzk3c                        0x0000563af207b584 <unavailable> + 5508

    7    libc.so.6                          0x00002b84f421d460 __libc_start_main +
    245

    8    tmp2ikuzk3c                        0x0000563af207b1d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    var n = num\n    var evenCount = 0\n    var oddCount\
    \ = 0\n    while n != 0 {\n        if n % 2 == 0 {\n            evenCount += 1\n\
    \        } else {\n            oddCount += 1\n        }\n        n /= 10\n   \
    \ }\n    return (evenCount, oddCount)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1,\
    \ 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: Exception
  stderr: 'tmpxll5wwqc/tmpxll5wwqc.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5745e71c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5745b68b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5745b68988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5745b677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxll5wwqc                        0x0000564faef258ed <unavailable> + 6381

    5    libc.so.6                          0x00002b574605d460 __libc_start_main +
    245

    6    tmpxll5wwqc                        0x0000564faef24f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660013643
- exit_code: 1
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    let digits = Array(String(num).characters)\n    var\
    \ odd_count = 0\n    var even_count = 0\n    for digit in digits {\n        if\
    \ (digit == \"0\" || digit == \"2\" || digit == \"4\" || digit == \"6\" || digit\
    \ == \"8\") {\n            even_count += 1\n        } else {\n            odd_count\
    \ += 1\n        }\n    }\n    return (even_count, odd_count)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num:\
    \ -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: SyntaxError
  stderr: "/tmp/tmpoe28pl6c.swift:9:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    let digits = Array(String(num).characters)\n      \
    \                             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    let numberString = String(num)\n    var evenCount\
    \ = 0\n    var oddCount = 0\n    for char in numberString {\n        if Int(String(char))!\
    \ % 2 == 0 {\n            evenCount += 1\n        } else {\n            oddCount\
    \ += 1\n        }\n    }\n    return (evenCount, oddCount)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num:\
    \ -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: Exception
  stderr: 'tmpk9a0hy6y/tmpk9a0hy6y.swift:13: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b36f52edc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b36f4fe4561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b36f4fe4286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b36f4fe413c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b36f4fe3bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpk9a0hy6y                        0x00005611730cad84 <unavailable> + 7556

    6    tmpk9a0hy6y                        0x00005611730ca584 <unavailable> + 5508

    7    libc.so.6                          0x00002b36f54d9460 __libc_start_main +
    245

    8    tmpk9a0hy6y                        0x00005611730ca1d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    var count_even = 0\n    var count_odd = 0\n    var\
    \ num = num\n    if num < 0 {\n        num = -num\n    }\n    while num > 0 {\n\
    \        if num % 2 == 0 {\n            count_even += 1\n        } else {\n  \
    \          count_odd += 1\n        }\n        num /= 10\n    }\n    return (count_even,\
    \ count_odd)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num:\
    \ 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num:\
    \ 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num:\
    \ -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num:\
    \ -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))"
  status: Exception
  stderr: 'tmpc2tza01w/tmpc2tza01w.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1b79108c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1b78dffb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1b78dff988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1b78dfe7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc2tza01w                        0x000055e13783a8ed <unavailable> + 6381

    5    libc.so.6                          0x00002b1b792f4460 __libc_start_main +
    245

    6    tmpc2tza01w                        0x000055e137839f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    return (-1, -1)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78)\
    \ == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: Exception
  stderr: 'tmpep_h_pv0/tmpep_h_pv0.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b68e476cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b68e4463b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b68e4463988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b68e44627b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpep_h_pv0                        0x000055e965a08264 <unavailable> + 4708

    5    libc.so.6                          0x00002b68e4958460 __libc_start_main +
    245

    6    tmpep_h_pv0                        0x000055e965a07ec9 <unavailable> + 3785

    '
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    var num = num\n    var even = 0\n    var odd = 0\n\
    \    while num != 0 {\n        if num % 2 == 0 {\n            even += 1\n    \
    \    } else {\n            odd += 1\n        }\n        num /= 10\n    }\n   \
    \ return (even, odd)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num:\
    \ 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num:\
    \ 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num:\
    \ -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num:\
    \ -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))"
  status: Exception
  stderr: 'tmp966buffw/tmp966buffw.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1f13be8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1f138dfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1f138df988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1f138de7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp966buffw                        0x000055904d5cf8ed <unavailable> + 6381

    5    libc.so.6                          0x00002b1f13dd4460 __libc_start_main +
    245

    6    tmp966buffw                        0x000055904d5cef69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660013642
- exit_code: -4
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n  var evenCount = 0\n  var oddCount = 0\n  for c in String(num)\
    \ {\n    if Int(String(c))! % 2 == 0 {\n      evenCount += 1\n    } else {\n \
    \     oddCount += 1\n    }\n  }\n  return (evenCount, oddCount)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num:\
    \ -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: Exception
  stderr: 'tmppxi_qs9a/tmppxi_qs9a.swift:12: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b4e1decbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4e1dbc2561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b4e1dbc2286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b4e1dbc213c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b4e1dbc1bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmppxi_qs9a                        0x00005595bbcbfd42 <unavailable> + 7490

    6    tmppxi_qs9a                        0x00005595bbcbf584 <unavailable> + 5508

    7    libc.so.6                          0x00002b4e1e0b7460 __libc_start_main +
    245

    8    tmppxi_qs9a                        0x00005595bbcbf1d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    return (0, 0)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78)\
    \ == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: Exception
  stderr: 'tmp_kefvok9/tmp_kefvok9.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aadf36f2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aadf33e9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aadf33e9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aadf33e87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_kefvok9                        0x00005616f6e41264 <unavailable> + 4708

    5    libc.so.6                          0x00002aadf38de460 __libc_start_main +
    245

    6    tmp_kefvok9                        0x00005616f6e40ec9 <unavailable> + 3785

    '
  stdout: ''
  timestamp: 1660013486
- exit_code: -4
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    return (0, 0)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78)\
    \ == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: Exception
  stderr: 'tmp_kefvok9/tmp_kefvok9.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aadf36f2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aadf33e9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aadf33e9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aadf33e87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_kefvok9                        0x00005616f6e41264 <unavailable> + 4708

    5    libc.so.6                          0x00002aadf38de460 __libc_start_main +
    245

    6    tmp_kefvok9                        0x00005616f6e40ec9 <unavailable> + 3785

    '
  stdout: ''
  timestamp: 1660013486
- exit_code: -4
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    var evenCount = 0\n    var oddCount = 0\n    var num\
    \ = num\n    if num < 0 {\n        num = -num\n    }\n    while num > 0 {\n  \
    \      if num % 2 == 0 {\n            evenCount += 1\n        } else {\n     \
    \       oddCount += 1\n        }\n        num /= 10\n    }\n    return (evenCount,\
    \ oddCount)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(even_odd_count(num:\
    \ 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num:\
    \ 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num:\
    \ -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num:\
    \ -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))"
  status: Exception
  stderr: 'tmp7kfq_4n6/tmp7kfq_4n6.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abde7651c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abde7348b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abde7348988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abde73477b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7kfq_4n6                        0x0000555801da98ed <unavailable> + 6381

    5    libc.so.6                          0x00002abde783d460 __libc_start_main +
    245

    6    tmp7kfq_4n6                        0x0000555801da8f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660013486
- exit_code: -4
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    let strnum = String(num)\n    var oddCount = 0\n \
    \   var evenCount = 0\n    for char in strnum {\n        if Int(String(char))!\
    \ % 2 == 0 {\n            evenCount += 1\n        } else {\n            oddCount\
    \ += 1\n        }\n    }\n    return (evenCount, oddCount)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num:\
    \ -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: Exception
  stderr: 'tmpk47okmro/tmpk47okmro.swift:13: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002ae0ee900c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae0ee5f7561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ae0ee5f7286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ae0ee5f713c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ae0ee5f6bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpk47okmro                        0x0000558825e0ad84 <unavailable> + 7556

    6    tmpk47okmro                        0x0000558825e0a584 <unavailable> + 5508

    7    libc.so.6                          0x00002ae0eeaec460 __libc_start_main +
    245

    8    tmpk47okmro                        0x0000558825e0a1d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    var evenCount = 0\n    var oddCount = 0\n    var num\
    \ = num\n    while num != 0 {\n        let digit = num % 10\n        if digit\
    \ % 2 == 0 {\n            evenCount += 1\n        } else {\n            oddCount\
    \ += 1\n        }\n        num /= 10\n    }\n    return (evenCount, oddCount)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num:\
    \ -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: Exception
  stderr: 'tmp1w90hpee/tmp1w90hpee.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea84fcac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea84cc1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea84cc1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea84cc07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1w90hpee                        0x000055d6c15b58ed <unavailable> + 6381

    5    libc.so.6                          0x00002aea851b6460 __libc_start_main +
    245

    6    tmp1w90hpee                        0x000055d6c15b4f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660013486
- exit_code: -4
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    var evenCount = 0\n    var oddCount = 0\n    var absNum\
    \ = abs(num)\n    while absNum > 0 {\n        let digit = absNum % 10\n      \
    \  if digit % 2 == 0 {\n            evenCount += 1\n        } else {\n       \
    \     oddCount += 1\n        }\n        absNum /= 10\n    }\n    return (evenCount,\
    \ oddCount)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(even_odd_count(num:\
    \ 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num:\
    \ 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num:\
    \ -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num:\
    \ -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))"
  status: Exception
  stderr: 'tmph6dwxrtv/tmph6dwxrtv.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0040fb1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0040ca8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0040ca8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0040ca77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmph6dwxrtv                        0x0000556e922189cd <unavailable> + 6605

    5    libc.so.6                          0x00002b004119d460 __libc_start_main +
    245

    6    tmph6dwxrtv                        0x0000556e92218049 <unavailable> + 4169

    '
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    \n    // your code here\n    \n    return (0, 0)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num:\
    \ -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: Exception
  stderr: 'tmpo5v7qhky/tmpo5v7qhky.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3c2bcf8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3c2b9efb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3c2b9ef988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3c2b9ee7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo5v7qhky                        0x000055c884f07264 <unavailable> + 4708

    5    libc.so.6                          0x00002b3c2bee4460 __libc_start_main +
    245

    6    tmpo5v7qhky                        0x000055c884f06ec9 <unavailable> + 3785

    '
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    var even = 0\n    var odd = 0\n    var temp = num\n\
    \    if num < 0 {\n        temp = num * -1\n    }\n    while temp > 0 {\n    \
    \    if temp % 10 % 2 == 0 {\n            even += 1\n        } else {\n      \
    \      odd += 1\n        }\n        temp /= 10\n    }\n    return (even, odd)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num:\
    \ -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: Exception
  stderr: 'tmpgzgcxooe/tmpgzgcxooe.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac21d365c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac21d05cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac21d05c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac21d05b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgzgcxooe                        0x00005582f9ce88ed <unavailable> + 6381

    5    libc.so.6                          0x00002ac21d551460 __libc_start_main +
    245

    6    tmpgzgcxooe                        0x00005582f9ce7f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    var evenCount = 0\n    var oddCount = 0\n    for digit\
    \ in String(num).map({Int(String($0))!}) {\n        if digit % 2 == 0 {\n    \
    \        evenCount += 1\n        } else {\n            oddCount += 1\n       \
    \ }\n    }\n    return (evenCount, oddCount)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78)\
    \ == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: Exception
  stderr: 'tmp5rxp4fs9/tmp5rxp4fs9.swift:11: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b140467bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1404372561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b1404372286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b140437213c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b1404371bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp5rxp4fs9                        0x000056224aac30c1 <unavailable> + 8385

    6    libswiftCore.so                    0x00002b140435a820 Collection.map<A>(_:)
    + 426

    7    tmp5rxp4fs9                        0x000056224aac2da2 <unavailable> + 7586

    8    tmp5rxp4fs9                        0x000056224aac2724 <unavailable> + 5924

    9    libc.so.6                          0x00002b1404867460 __libc_start_main +
    245

    10   tmp5rxp4fs9                        0x000056224aac2379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660013643
- exit_code: 1
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    // your code here\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78)\
    \ == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: SyntaxError
  stderr: '/tmp/tmpewt5k1sf.swift:10:1: error: missing return in global function expected
    to return ''(Int, Int)''

    }

    ^

    '
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    let number_str = String(num)\n    var even_count =\
    \ 0\n    var odd_count = 0\n    for char in number_str {\n        if String(char).contains(\"\
    -\") {\n            return (even_count, odd_count)\n        }\n        else if\
    \ char.wholeNumberValue! % 2 == 0 {\n            even_count += 1\n        }\n\
    \        else {\n            odd_count += 1\n        }\n    }\n    return (even_count,\
    \ odd_count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num:\
    \ 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num:\
    \ 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num:\
    \ -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num:\
    \ -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))"
  status: Exception
  stderr: 'tmpfx2h1jdx/tmpfx2h1jdx.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba63afb2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba63aca9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba63aca9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba63aca87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfx2h1jdx                        0x000055adb28fb79d <unavailable> + 6045

    5    libc.so.6                          0x00002ba63b19e460 __libc_start_main +
    245

    6    tmpfx2h1jdx                        0x000055adb28fb339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    var even_digits = 0\n    var odd_digits = 0\n    let\
    \ sign = num < 0 ? -1 : 1\n    var num = abs(num)\n    while num > 0 {\n     \
    \   if num % 2 == 0 {\n            even_digits += 1\n        } else {\n      \
    \      odd_digits += 1\n        }\n        num /= 10\n    }\n    return (even_digits,\
    \ odd_digits)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num:\
    \ 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num:\
    \ 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num:\
    \ -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num:\
    \ -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))"
  status: Exception
  stderr: 'tmpjzxamm5k/tmpjzxamm5k.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3d8bdd9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3d8bad0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3d8bad0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3d8bacf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjzxamm5k                        0x0000557ca13969cd <unavailable> + 6605

    5    libc.so.6                          0x00002b3d8bfc5460 __libc_start_main +
    245

    6    tmpjzxamm5k                        0x0000557ca1396049 <unavailable> + 4169

    '
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    \n    return (0, 0)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78)\
    \ == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: Exception
  stderr: 'tmp14m792qe/tmp14m792qe.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3f36683c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3f3637ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3f3637a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3f363797b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp14m792qe                        0x000055b667abd264 <unavailable> + 4708

    5    libc.so.6                          0x00002b3f3686f460 __libc_start_main +
    245

    6    tmp14m792qe                        0x000055b667abcec9 <unavailable> + 3785

    '
  stdout: ''
  timestamp: 1660013643
- exit_code: 0
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    var even_count = 0\n    var odd_count = 0\n    for\
    \ c in num.description {\n        if c.wholeNumberValue != nil {\n           \
    \ let n = c.wholeNumberValue!\n            if n % 2 == 0 {\n                even_count\
    \ += 1\n            } else {\n                odd_count += 1\n            }\n\
    \        }\n    }\n    return (even_count, odd_count)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num:\
    \ -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013643
- exit_code: 1
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    // this is a solution where I wanted to use a closure.\n\
    \    // Also I wanted to use `reduce` function to get to the answer.\n    // 1.\
    \ First I convert the integer to a string (using `String`)\n    // 2. Then I convert\
    \ the string to a character array (using `String.characters`)\n    // 3. Then\
    \ I use the `Array.reduce` function to loop over the character array. I use `CharacterView.Iterator.Element`\
    \ as the iterator type and accumulator as tuple of (even, odd) integers. `Character`\
    \ type as the return type.\n    // 3. At each iteration, I convert the current\
    \ character to integer. if current int value is odd then I increase odd count\
    \ by 1 and if it is even then I increase even count by 1.\n    return String(num).characters.reduce((0,\
    \ 0)) {\n        (accumulator, current: Character) -> (Int, Int) in\n        if\
    \ Int(String(current))! % 2 == 0 {\n            return (accumulator.0 + 1, accumulator.1)\n\
    \        } else {\n            return (accumulator.0, accumulator.1 + 1)\n   \
    \     }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num:\
    \ 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num:\
    \ 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num:\
    \ -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num:\
    \ -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))"
  status: SyntaxError
  stderr: "/tmp/tmp19myjb7q.swift:15:24: error: 'characters' is unavailable: Please\
    \ use String directly\n    return String(num).characters.reduce((0, 0)) {\n  \
    \                     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1660013643
- exit_code: 1
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    \n    var even_counter = 0\n    var odd_counter =\
    \ 0\n    \n    for digit in String(num).characters {\n        if digit % 2 ==\
    \ 0 {\n            even_counter += 1\n        } else {\n            odd_counter\
    \ += 1\n        }\n    }\n    \n    return (even_counter, odd_counter)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num:\
    \ -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: SyntaxError
  stderr: "/tmp/tmp2fke03fb.swift:13:30: error: 'characters' is unavailable: Please\
    \ use String directly\n    for digit in String(num).characters {\n           \
    \                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmp2fke03fb.swift:14:12: error: cannot convert value of type 'Character'\
    \ to expected argument type 'Int'\n        if digit % 2 == 0 {\n           ^\n"
  stdout: ''
  timestamp: 1660013643
- exit_code: 1
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    var counter = 0\n    var digit_count = 0\n    var\
    \ even_count = 0\n    var odd_count = 0\n    var num_to_str = \"\\(num)\"\n  \
    \  var num_to_str_len = num_to_str.count\n    if num_to_str.prefix(1) == \"-\"\
    \ {\n        num_to_str_len -= 1\n        counter += 1\n    }\n    for counter\
    \ in counter..<num_to_str_len {\n        digit_count = Int(String(num_to_str[counter]))!\n\
    \        if digit_count % 2 == 0 {\n            even_count += 1\n        } else\
    \ {\n            odd_count += 1\n        }\n    }\n    return (even_count, odd_count)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num:\
    \ -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: SyntaxError
  stderr: "/tmp/tmpo5n16otf.swift:20:34: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n        digit_count\
    \ = Int(String(num_to_str[counter]))!\n                                 ^~~~~~~~~~~~~~~~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpo5n16otf.swift:13:9:\
    \ warning: variable 'num_to_str' was never mutated; consider changing to 'let'\
    \ constant\n    var num_to_str = \"\\(num)\"\n    ~~~ ^\n    let\n"
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n  var evenCount = 0\n  var oddCount = 0\n  var number\
    \ = num\n  while number != 0 {\n    let remain = number % 10\n    if remain %\
    \ 2 == 0 {\n      evenCount += 1\n    } else {\n      oddCount += 1\n    }\n \
    \   number /= 10\n  }\n  return (evenCount, oddCount)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num:\
    \ -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: Exception
  stderr: 'tmp8chtlu6t/tmp8chtlu6t.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5ec4f30c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5ec4c27b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5ec4c27988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5ec4c267b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8chtlu6t                        0x000055569d6598ed <unavailable> + 6381

    5    libc.so.6                          0x00002b5ec511c460 __libc_start_main +
    245

    6    tmp8chtlu6t                        0x000055569d658f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    return (0, 0)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78)\
    \ == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: Exception
  stderr: 'tmp_kefvok9/tmp_kefvok9.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aadf36f2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aadf33e9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aadf33e9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aadf33e87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_kefvok9                        0x00005616f6e41264 <unavailable> + 4708

    5    libc.so.6                          0x00002aadf38de460 __libc_start_main +
    245

    6    tmp_kefvok9                        0x00005616f6e40ec9 <unavailable> + 3785

    '
  stdout: ''
  timestamp: 1660013486
- exit_code: -4
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    var even = 0\n    var odd = 0\n    var num = num\n\
    \    if num < 0 {\n        num = -num\n    }\n    while num > 0 {\n        let\
    \ digit = num % 10\n        if digit % 2 == 0 {\n            even += 1\n     \
    \   } else {\n            odd += 1\n        }\n        num /= 10\n    }\n    return\
    \ (even, odd)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num:\
    \ 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num:\
    \ 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num:\
    \ -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num:\
    \ -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))"
  status: Exception
  stderr: 'tmp5oljxme6/tmp5oljxme6.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae3c87c7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae3c84beb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae3c84be988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae3c84bd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5oljxme6                        0x000056487c7a18ed <unavailable> + 6381

    5    libc.so.6                          0x00002ae3c89b3460 __libc_start_main +
    245

    6    tmp5oljxme6                        0x000056487c7a0f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660013486
- exit_code: 1
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    \n    var counter = 0\n    var evenCounter = 0\n \
    \   var oddCounter = 0\n    \n    while num > 0 {\n        counter = num % 10\n\
    \        if counter % 2 == 0 {\n            evenCounter += 1\n        } else {\n\
    \            oddCounter += 1\n        }\n        num /= 10\n    }\n    return\
    \ (evenCounter, oddCounter)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num:\
    \ 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num:\
    \ 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num:\
    \ -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num:\
    \ -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))"
  status: SyntaxError
  stderr: "/tmp/tmpgle3402y.swift:21:13: error: left side of mutating operator isn't\
    \ mutable: 'num' is a 'let' constant\n        num /= 10\n        ~~~ ^\n"
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    return (0, 0)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78)\
    \ == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: Exception
  stderr: 'tmp_kefvok9/tmp_kefvok9.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aadf36f2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aadf33e9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aadf33e9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aadf33e87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_kefvok9                        0x00005616f6e41264 <unavailable> + 4708

    5    libc.so.6                          0x00002aadf38de460 __libc_start_main +
    245

    6    tmp_kefvok9                        0x00005616f6e40ec9 <unavailable> + 3785

    '
  stdout: ''
  timestamp: 1660013486
- exit_code: -4
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    var even = 0\n    var odd = 0\n    for digit in String(num).reversed()\
    \ {\n        if Int(String(digit))! % 2 == 0 {\n            even += 1\n      \
    \  } else {\n            odd += 1\n        }\n    }\n    return (even, odd)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num:\
    \ -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: Exception
  stderr: 'tmp9gs4lgzo/tmp9gs4lgzo.swift:12: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b2187bf8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21878ef561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b21878ef286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b21878ef13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b21878eebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp9gs4lgzo                        0x0000561c8c6f5fa0 <unavailable> + 8096

    6    tmp9gs4lgzo                        0x0000561c8c6f5744 <unavailable> + 5956

    7    libc.so.6                          0x00002b2187de4460 __libc_start_main +
    245

    8    tmp9gs4lgzo                        0x0000561c8c6f5399 <unavailable> + 5017

    '
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    return (0, 0)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78)\
    \ == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: Exception
  stderr: 'tmp_kefvok9/tmp_kefvok9.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aadf36f2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aadf33e9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aadf33e9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aadf33e87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_kefvok9                        0x00005616f6e41264 <unavailable> + 4708

    5    libc.so.6                          0x00002aadf38de460 __libc_start_main +
    245

    6    tmp_kefvok9                        0x00005616f6e40ec9 <unavailable> + 3785

    '
  stdout: ''
  timestamp: 1660013486
- exit_code: 0
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    var even_count = 0\n    var odd_count = 0\n    for\
    \ c in String(num) {\n        if (c == \"-\" && num < 0) {\n            continue\n\
    \        }\n        let i = Int(String(c))\n        if (i! % 2 == 0) {\n     \
    \       even_count += 1\n        } else {\n            odd_count += 1\n      \
    \  }\n    }\n    return (even_count, odd_count)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78)\
    \ == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    var tuple: (Int, Int) = (0, 0)\n    var absNum = abs(num)\n\
    \    while absNum > 0 {\n        if absNum % 2 == 0 {\n            tuple.0 +=\
    \ 1\n        } else {\n            tuple.1 += 1\n        }\n        absNum /=\
    \ 10\n    }\n    return tuple\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num:\
    \ 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num:\
    \ 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num:\
    \ -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num:\
    \ -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))"
  status: Exception
  stderr: 'tmpowliu7lz/tmpowliu7lz.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b236f96fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b236f666b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b236f666988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b236f6657b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpowliu7lz                        0x000055d49a0c79cd <unavailable> + 6605

    5    libc.so.6                          0x00002b236fb5b460 __libc_start_main +
    245

    6    tmpowliu7lz                        0x000055d49a0c7049 <unavailable> + 4169

    '
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    var evenCount = 0\n    var oddCount = 0\n    if num\
    \ < 0 {\n        return (evenCount, oddCount)\n    }\n    for i in String(num)\
    \ {\n        let digit = Int(String(i))!\n        if digit % 2 == 0 {\n      \
    \      evenCount += 1\n        } else {\n            oddCount += 1\n        }\n\
    \    }\n    return (evenCount, oddCount)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1,\
    \ 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: Exception
  stderr: 'tmponjvl9xw/tmponjvl9xw.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b79ec451c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b79ec148b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b79ec148988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b79ec1477b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmponjvl9xw                        0x000055e2dd87763d <unavailable> + 5693

    5    libc.so.6                          0x00002b79ec63d460 __libc_start_main +
    245

    6    tmponjvl9xw                        0x000055e2dd8771d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1660013643
- exit_code: 1
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    var even = 0\n    var odd = 0\n    if num < 0 {\n\
    \        num *= -1\n    }\n    for i in String(num) {\n        if Int(String(i))!\
    \ % 2 == 0 {\n            even += 1\n        } else {\n            odd += 1\n\
    \        }\n    }\n    return (even, odd)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78)\
    \ == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: SyntaxError
  stderr: "/tmp/tmpvehormay.swift:12:13: error: left side of mutating operator isn't\
    \ mutable: 'num' is a 'let' constant\n        num *= -1\n        ~~~ ^\n"
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    var numCopy = num\n    var evenCount = 0\n    var\
    \ oddCount = 0\n    while numCopy != 0 {\n        let digit = numCopy % 10\n \
    \       if digit % 2 == 0 {\n            evenCount += 1\n        } else {\n  \
    \          oddCount += 1\n        }\n        numCopy /= 10\n    }\n    return\
    \ (evenCount, oddCount)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num:\
    \ 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num:\
    \ 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num:\
    \ -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num:\
    \ -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))"
  status: Exception
  stderr: 'tmp_mus3ip6/tmp_mus3ip6.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b75aa815c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b75aa50cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b75aa50c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b75aa50b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_mus3ip6                        0x000055c1e16498ed <unavailable> + 6381

    5    libc.so.6                          0x00002b75aaa01460 __libc_start_main +
    245

    6    tmp_mus3ip6                        0x000055c1e1648f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660013643
- exit_code: 0
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    let str: String = String(abs(num))\n    var odd_count:\
    \ Int = 0\n    var even_count: Int = 0\n    for c in str {\n        let digit:\
    \ Int = Int(String(c))!\n        if digit % 2 == 0 {\n            even_count +=\
    \ 1\n        } else {\n            odd_count += 1\n        }\n    }\n    return\
    \ (even_count, odd_count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num:\
    \ 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num:\
    \ 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num:\
    \ -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num:\
    \ -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    var even = 0\n    var odd = 0\n    var num = num\n\
    \    if num < 0 {\n        num = num * -1\n    }\n    var digit = 0\n    while\
    \ num > 0 {\n        digit = num % 10\n        if digit % 2 == 0 {\n         \
    \   even += 1\n        } else {\n            odd += 1\n        }\n        num\
    \ = num / 10\n    }\n    return (even, odd)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78)\
    \ == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: Exception
  stderr: 'tmpxdfmmxwm/tmpxdfmmxwm.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af13c4cdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af13c1c4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af13c1c4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af13c1c37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxdfmmxwm                        0x000055c4fbeea8ed <unavailable> + 6381

    5    libc.so.6                          0x00002af13c6b9460 __libc_start_main +
    245

    6    tmpxdfmmxwm                        0x000055c4fbee9f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660013643
- exit_code: 1
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    var even_count = 0\n    var odd_count = 0\n    if\
    \ num < 0 {\n        num *= -1\n    }\n    let num_str = String(num)\n    for\
    \ digit in num_str {\n        if Int(String(digit))! % 2 == 0 {\n            even_count\
    \ += 1\n        } else {\n            odd_count += 1\n        }\n    }\n    return\
    \ (even_count, odd_count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num:\
    \ 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num:\
    \ 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num:\
    \ -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num:\
    \ -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))"
  status: SyntaxError
  stderr: "/tmp/tmpumpij_ho.swift:12:13: error: left side of mutating operator isn't\
    \ mutable: 'num' is a 'let' constant\n        num *= -1\n        ~~~ ^\n"
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    let arr = String(num).map({ Int(String($0))! })\n\
    \    return (arr.filter({$0 % 2 == 0}).count, arr.filter({$0 % 2 != 0}).count)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num:\
    \ -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: Exception
  stderr: 'tmpzejq0yr3/tmpzejq0yr3.swift:9: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002ba12490fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba124606561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ba124606286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ba12460613c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ba124605bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpzejq0yr3                        0x000055ec10e31fd1 <unavailable> + 8145

    6    libswiftCore.so                    0x00002ba1245ee820 Collection.map<A>(_:)
    + 426

    7    tmpzejq0yr3                        0x000055ec10e31d75 <unavailable> + 7541

    8    tmpzejq0yr3                        0x000055ec10e31724 <unavailable> + 5924

    9    libc.so.6                          0x00002ba124afb460 __libc_start_main +
    245

    10   tmpzejq0yr3                        0x000055ec10e31379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    var n = num\n    var even = 0\n    var odd = 0\n \
    \   while n != 0 {\n        if n % 2 == 0 {\n            even += 1\n        }\
    \ else {\n            odd += 1\n        }\n        n /= 10\n    }\n    return\
    \ (even, odd)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num:\
    \ 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num:\
    \ 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num:\
    \ -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num:\
    \ -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))"
  status: Exception
  stderr: 'tmpftod_0h4/tmpftod_0h4.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad439650c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad439347b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad439347988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad4393467b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpftod_0h4                        0x000055ba1f6fc8ed <unavailable> + 6381

    5    libc.so.6                          0x00002ad43983c460 __libc_start_main +
    245

    6    tmpftod_0h4                        0x000055ba1f6fbf69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    // TODO\n    return (0, 0)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num:\
    \ -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: Exception
  stderr: 'tmp05i7vmau/tmp05i7vmau.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af47a855c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af47a54cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af47a54c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af47a54b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp05i7vmau                        0x000056118ef3e264 <unavailable> + 4708

    5    libc.so.6                          0x00002af47aa41460 __libc_start_main +
    245

    6    tmp05i7vmau                        0x000056118ef3dec9 <unavailable> + 3785

    '
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n  var even = 0\n  var odd = 0\n  var n = num\n  while\
    \ n != 0 {\n    if n % 2 == 0 {\n      even += 1\n    } else {\n      odd += 1\n\
    \    }\n    n /= 10\n  }\n  return (even, odd)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78)\
    \ == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: Exception
  stderr: 'tmprku1ee3j/tmprku1ee3j.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7a1dc6dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7a1d964b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7a1d964988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7a1d9637b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprku1ee3j                        0x00005651b39b28ed <unavailable> + 6381

    5    libc.so.6                          0x00002b7a1de59460 __libc_start_main +
    245

    6    tmprku1ee3j                        0x00005651b39b1f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660013644
- exit_code: 0
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    var evenCount = 0\n    var oddCount = 0\n    var num\
    \ = num\n    if num < 0 {\n        num = num * -1\n    }\n    for char in String(num)\
    \ {\n        if Int(String(char))! % 2 == 0 {\n            evenCount += 1\n  \
    \      } else {\n            oddCount += 1\n        }\n    }\n    return (evenCount,\
    \ oddCount)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(even_odd_count(num:\
    \ 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num:\
    \ 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num:\
    \ -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num:\
    \ -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013643
- exit_code: 1
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    var evens = 0\n    var odds = 0\n    var num = num\n\
    \    if num < 0 {\n        num = -num\n    }\n    for _ in 0..<num.digits {\n\
    \        let digit = num % 10\n        if digit % 2 == 0 {\n            evens\
    \ += 1\n        } else {\n            odds += 1\n        }\n        num /= 10\n\
    \    }\n    return (evens, odds)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num:\
    \ 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num:\
    \ 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num:\
    \ -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num:\
    \ -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))"
  status: SyntaxError
  stderr: "/tmp/tmp34q2wqm7.swift:15:22: error: value of type 'Int' has no member\
    \ 'digits'\n    for _ in 0..<num.digits {\n                 ~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660013643
- exit_code: 0
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    var even_count = 0\n    var odd_count = 0\n    let\
    \ num_string = String(num)\n    for char in num_string {\n        if let number\
    \ = Int(String(char)) {\n            if number % 2 == 0 {\n                even_count\
    \ += 1\n            } else {\n                odd_count += 1\n            }\n\
    \        }\n    }\n    return (even_count, odd_count)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num:\
    \ -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013643
- exit_code: 0
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    let num = num < 0 ? -num : num\n    var evenCount\
    \ = 0\n    var oddCount = 0\n    for digit in String(num) {\n        let digit\
    \ = Int(String(digit))!\n        if digit % 2 == 0 {\n            evenCount +=\
    \ 1\n        } else {\n            oddCount += 1\n        }\n    }\n    return\
    \ (evenCount, oddCount)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num:\
    \ 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num:\
    \ 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num:\
    \ -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num:\
    \ -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    return (0, 0)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78)\
    \ == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: Exception
  stderr: 'tmp_kefvok9/tmp_kefvok9.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aadf36f2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aadf33e9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aadf33e9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aadf33e87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_kefvok9                        0x00005616f6e41264 <unavailable> + 4708

    5    libc.so.6                          0x00002aadf38de460 __libc_start_main +
    245

    6    tmp_kefvok9                        0x00005616f6e40ec9 <unavailable> + 3785

    '
  stdout: ''
  timestamp: 1660013486
- exit_code: -4
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    var evens = 0\n    var odds = 0\n    var absNum =\
    \ abs(num)\n    while absNum > 0 {\n        let digit = absNum % 10\n        if\
    \ digit % 2 == 0 {\n            evens += 1\n        } else {\n            odds\
    \ += 1\n        }\n        absNum /= 10\n    }\n    return (evens, odds)\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num:\
    \ -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: Exception
  stderr: 'tmpou5n3y6v/tmpou5n3y6v.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b84ef3eac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b84ef0e1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b84ef0e1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b84ef0e07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpou5n3y6v                        0x0000557c6d7829cd <unavailable> + 6605

    5    libc.so.6                          0x00002b84ef5d6460 __libc_start_main +
    245

    6    tmpou5n3y6v                        0x0000557c6d782049 <unavailable> + 4169

    '
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    var even = 0\n    var odd = 0\n    var n = num\n \
    \   while n != 0 {\n        let lastDigit = n % 10\n        if lastDigit % 2 ==\
    \ 0 {\n            even += 1\n        } else {\n            odd += 1\n       \
    \ }\n        n /= 10\n    }\n    return (even, odd)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num:\
    \ -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: Exception
  stderr: 'tmp1jjfuw2a/tmp1jjfuw2a.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b38d9ff7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b38d9ceeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b38d9cee988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b38d9ced7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1jjfuw2a                        0x000055aabc6128ed <unavailable> + 6381

    5    libc.so.6                          0x00002b38da1e3460 __libc_start_main +
    245

    6    tmp1jjfuw2a                        0x000055aabc611f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660013644
- exit_code: -4
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    var evenCount = 0\n    var oddCount = 0\n    if num\
    \ > 0 {\n        var n = num\n        while n > 0 {\n            if n % 2 == 0\
    \ {\n                evenCount += 1\n            } else {\n                oddCount\
    \ += 1\n            }\n            n /= 10\n        }\n    } else {\n        var\
    \ n = num * -1\n        while n > 0 {\n            if n % 2 == 0 {\n         \
    \       evenCount += 1\n            } else {\n                oddCount += 1\n\
    \            }\n            n /= 10\n        }\n    }\n    return (evenCount,\
    \ oddCount)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(even_odd_count(num:\
    \ 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num:\
    \ 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num:\
    \ -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num:\
    \ -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))"
  status: Exception
  stderr: 'tmp1rsnbf55/tmp1rsnbf55.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba3adf74c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba3adc6bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba3adc6b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba3adc6a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1rsnbf55                        0x000055d8f09f78ed <unavailable> + 6381

    5    libc.so.6                          0x00002ba3ae160460 __libc_start_main +
    245

    6    tmp1rsnbf55                        0x000055d8f09f6f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660013644
- exit_code: -4
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    return (0, 0)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78)\
    \ == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: Exception
  stderr: 'tmp_kefvok9/tmp_kefvok9.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aadf36f2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aadf33e9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aadf33e9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aadf33e87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_kefvok9                        0x00005616f6e41264 <unavailable> + 4708

    5    libc.so.6                          0x00002aadf38de460 __libc_start_main +
    245

    6    tmp_kefvok9                        0x00005616f6e40ec9 <unavailable> + 3785

    '
  stdout: ''
  timestamp: 1660013486
- exit_code: -4
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    return (0, 0)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78)\
    \ == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: Exception
  stderr: 'tmp_kefvok9/tmp_kefvok9.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aadf36f2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aadf33e9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aadf33e9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aadf33e87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_kefvok9                        0x00005616f6e41264 <unavailable> + 4708

    5    libc.so.6                          0x00002aadf38de460 __libc_start_main +
    245

    6    tmp_kefvok9                        0x00005616f6e40ec9 <unavailable> + 3785

    '
  stdout: ''
  timestamp: 1660013486
- exit_code: -4
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    var even_count = 0\n    var odd_count = 0\n    var\
    \ int_abs = abs(num)\n    while int_abs > 0 {\n        let digit = int_abs % 10\n\
    \        int_abs /= 10\n        if digit % 2 == 0 {\n            even_count +=\
    \ 1\n        } else {\n            odd_count += 1\n        }\n    }\n    return\
    \ (even_count, odd_count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num:\
    \ 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num:\
    \ 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num:\
    \ -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num:\
    \ -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))"
  status: Exception
  stderr: 'tmphe30jnsn/tmphe30jnsn.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b74b29f6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b74b26edb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b74b26ed988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b74b26ec7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphe30jnsn                        0x000055557c0b19cd <unavailable> + 6605

    5    libc.so.6                          0x00002b74b2be2460 __libc_start_main +
    245

    6    tmphe30jnsn                        0x000055557c0b1049 <unavailable> + 4169

    '
  stdout: ''
  timestamp: 1660013644
- exit_code: 1
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    let num_string = String(num)\n    let characters =\
    \ Array(num_string)\n    var even_count = 0\n    var odd_count = 0\n    for num\
    \ in characters {\n        if num % 2 == 0 {\n            even_count += 1\n  \
    \      } else {\n            odd_count += 1\n        }\n    }\n    return (even_count,\
    \ odd_count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num:\
    \ 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num:\
    \ 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num:\
    \ -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num:\
    \ -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))"
  status: SyntaxError
  stderr: "/tmp/tmpb_izokqr.swift:14:12: error: cannot convert value of type 'String.Element'\
    \ (aka 'Character') to expected argument type 'Int'\n        if num % 2 == 0 {\n\
    \           ^\n"
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    let num_str = String(num)\n    var even_count = 0\n\
    \    var odd_count = 0\n    for char in num_str {\n        if char == \"0\" ||\
    \ char == \"2\" || char == \"4\" || char == \"6\" || char == \"8\" {\n       \
    \     even_count += 1\n        } else {\n            odd_count += 1\n        }\n\
    \    }\n    return (even_count, odd_count)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78)\
    \ == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: Exception
  stderr: 'tmpc9vx0o_5/tmpc9vx0o_5.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9e66603c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9e662fab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9e662fa988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9e662f97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc9vx0o_5                        0x0000560e7065759d <unavailable> + 5533

    5    libc.so.6                          0x00002b9e667ef460 __libc_start_main +
    245

    6    tmpc9vx0o_5                        0x0000560e70657139 <unavailable> + 4409

    '
  stdout: ''
  timestamp: 1660013644
- exit_code: -4
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    var evenCount = 0\n    var oddCount = 0\n    var newNum\
    \ = num\n    if newNum < 0 {\n        newNum = -newNum\n    }\n    while newNum\
    \ > 0 {\n        if newNum % 2 == 0 {\n            evenCount += 1\n        } else\
    \ {\n            oddCount += 1\n        }\n        newNum /= 10\n    }\n    return\
    \ (evenCount, oddCount)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num:\
    \ 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num:\
    \ 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num:\
    \ -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num:\
    \ -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))"
  status: Exception
  stderr: 'tmp714jyj2o/tmp714jyj2o.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba042b51c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba042848b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba042848988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba0428477b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp714jyj2o                        0x00005582f135a8ed <unavailable> + 6381

    5    libc.so.6                          0x00002ba042d3d460 __libc_start_main +
    245

    6    tmp714jyj2o                        0x00005582f1359f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660013644
- exit_code: -4
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    var evenCount = 0\n    var oddCount = 0\n    var currentNum\
    \ = num\n    while currentNum != 0 {\n        let digit = currentNum % 10\n  \
    \      if digit % 2 == 0 {\n            evenCount += 1\n        } else {\n   \
    \         oddCount += 1\n        }\n        currentNum /= 10\n    }\n    return\
    \ (evenCount, oddCount)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num:\
    \ 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num:\
    \ 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num:\
    \ -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num:\
    \ -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))"
  status: Exception
  stderr: 'tmp1o5_nh53/tmp1o5_nh53.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b368efbbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b368ecb2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b368ecb2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b368ecb17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1o5_nh53                        0x000055932a2658ed <unavailable> + 6381

    5    libc.so.6                          0x00002b368f1a7460 __libc_start_main +
    245

    6    tmp1o5_nh53                        0x000055932a264f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660013644
- exit_code: -4
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    var odd_count = 0\n    var even_count = 0\n    var\
    \ abs_num = abs(num)\n    if abs_num == 0 {\n        return (0, 0)\n    }\n  \
    \  while abs_num > 0 {\n        let digit = abs_num % 10\n        if digit % 2\
    \ == 0 {\n            even_count += 1\n        } else {\n            odd_count\
    \ += 1\n        }\n        abs_num /= 10\n    }\n    return (even_count, odd_count)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num:\
    \ -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: Exception
  stderr: 'tmpy6fs7mve/tmpy6fs7mve.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aedd012fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aedcfe26b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aedcfe26988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aedcfe257b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy6fs7mve                        0x000055f2a72cb9cd <unavailable> + 6605

    5    libc.so.6                          0x00002aedd031b460 __libc_start_main +
    245

    6    tmpy6fs7mve                        0x000055f2a72cb049 <unavailable> + 4169

    '
  stdout: ''
  timestamp: 1660013644
- exit_code: 1
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    var e = 0\n    var o = 0\n    for s in String(num).characters\
    \ {\n        let i = Int(String(s))!\n        if i % 2 == 0 {\n            e +=\
    \ 1\n        } else {\n            o += 1\n        }\n    }\n    return (e, o)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num:\
    \ -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: SyntaxError
  stderr: "/tmp/tmp0xkkxmtn.swift:11:26: error: 'characters' is unavailable: Please\
    \ use String directly\n    for s in String(num).characters {\n               \
    \          ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in\
    \ Swift 5.0\n    public var characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    let string = String(num)\n    var evenCount = 0\n\
    \    var oddCount = 0\n    for c in string {\n        let intVal = Int(String(c))!\n\
    \        if intVal % 2 == 0 {\n            evenCount += 1\n        } else {\n\
    \            oddCount += 1\n        }\n    }\n    return (evenCount, oddCount)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num:\
    \ -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: Exception
  stderr: 'tmp47la4afk/tmp47la4afk.swift:13: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002ba44d923c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba44d61a561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ba44d61a286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ba44d61a13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ba44d619bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp47la4afk                        0x0000560b92dc6d9a <unavailable> + 7578

    6    tmp47la4afk                        0x0000560b92dc6584 <unavailable> + 5508

    7    libc.so.6                          0x00002ba44db0f460 __libc_start_main +
    245

    8    tmp47la4afk                        0x0000560b92dc61d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1660013644
- exit_code: 1
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    let z = num.abs()\n    var even = 0\n    var odd =\
    \ 0\n    for n in z.digits() {\n        if n % 2 == 0 {\n            even += 1\n\
    \        } else {\n            odd += 1\n        }\n    }\n    return (even, odd)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num:\
    \ -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: SyntaxError
  stderr: "/tmp/tmpkovaxsvm.swift:9:17: error: value of type 'Int' has no member 'abs'\n\
    \    let z = num.abs()\n            ~~~ ^~~\n"
  stdout: ''
  timestamp: 1660013644
- exit_code: -4
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    var n = num\n    var even = 0\n    var odd = 0\n \
    \   while n != 0 {\n        if n % 2 == 0 {\n            even += 1\n        }\
    \ else {\n            odd += 1\n        }\n        n /= 10\n    }\n    return\
    \ (even, odd)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num:\
    \ 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num:\
    \ 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num:\
    \ -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num:\
    \ -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))"
  status: Exception
  stderr: 'tmpftod_0h4/tmpftod_0h4.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad439650c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad439347b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad439347988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad4393467b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpftod_0h4                        0x000055ba1f6fc8ed <unavailable> + 6381

    5    libc.so.6                          0x00002ad43983c460 __libc_start_main +
    245

    6    tmpftod_0h4                        0x000055ba1f6fbf69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    /// TODO\n    return (0, 0)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num:\
    \ -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: Exception
  stderr: 'tmpljr8biut/tmpljr8biut.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7af76abc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7af73a2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7af73a2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7af73a17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpljr8biut                        0x000055766a893264 <unavailable> + 4708

    5    libc.so.6                          0x00002b7af7897460 __libc_start_main +
    245

    6    tmpljr8biut                        0x000055766a892ec9 <unavailable> + 3785

    '
  stdout: ''
  timestamp: 1660013644
- exit_code: 1
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n  let digits = abs(num).digits\n  var evenCount = 0\n\
    \  var oddCount = 0\n  for digit in digits {\n    if digit % 2 == 0 {\n      evenCount\
    \ += 1\n    } else {\n      oddCount += 1\n    }\n  }\n  return (evenCount, oddCount)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num:\
    \ -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: SyntaxError
  stderr: "/tmp/tmp41_tgq2h.swift:9:25: error: value of type 'Int' has no member 'digits'\n\
    \  let digits = abs(num).digits\n               ~~~~~~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660013644
- exit_code: -4
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    var even = 0\n    var odd = 0\n    var n = num\n \
    \   while n != 0 {\n        if n % 2 == 0 {\n            even += 1\n        }\
    \ else {\n            odd += 1\n        }\n        n /= 10\n    }\n    return\
    \ (even, odd)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num:\
    \ 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num:\
    \ 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num:\
    \ -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num:\
    \ -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))"
  status: Exception
  stderr: 'tmp8oi9fxl_/tmp8oi9fxl_.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac770a39c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac770730b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac770730988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac77072f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8oi9fxl_                        0x000055bd6892c8ed <unavailable> + 6381

    5    libc.so.6                          0x00002ac770c25460 __libc_start_main +
    245

    6    tmp8oi9fxl_                        0x000055bd6892bf69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660013486
- exit_code: -4
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    var evenCount = 0\n    var oddCount = 0\n    var n\
    \ = num\n    while n != 0 {\n        if (n % 10) % 2 == 0 {\n            evenCount\
    \ += 1\n        } else {\n            oddCount += 1\n        }\n        n /= 10\n\
    \    }\n    return (evenCount, oddCount)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1,\
    \ 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: Exception
  stderr: 'tmpriz6j3k4/tmpriz6j3k4.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b89ed7c3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b89ed4bab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b89ed4ba988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b89ed4b97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpriz6j3k4                        0x000055b6699ac8ed <unavailable> + 6381

    5    libc.so.6                          0x00002b89ed9af460 __libc_start_main +
    245

    6    tmpriz6j3k4                        0x000055b6699abf69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660013644
- exit_code: -4
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    var odd_count = 0\n    var even_count = 0\n    var\
    \ num = num\n    num = abs(num)\n    while num > 0 {\n        if num % 2 == 0\
    \ {\n            even_count += 1\n        } else {\n            odd_count += 1\n\
    \        }\n        num /= 10\n    }\n    return (even_count, odd_count)\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num:\
    \ -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: Exception
  stderr: 'tmpomn9m75i/tmpomn9m75i.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6e34233c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6e33f2ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6e33f2a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6e33f297b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpomn9m75i                        0x0000558b6acca9cd <unavailable> + 6605

    5    libc.so.6                          0x00002b6e3441f460 __libc_start_main +
    245

    6    tmpomn9m75i                        0x0000558b6acca049 <unavailable> + 4169

    '
  stdout: ''
  timestamp: 1660013644
- exit_code: -4
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    var even_cnt = 0\n    var odd_cnt = 0\n    var num\
    \ = num\n    var digit = 0\n    while num != 0 {\n        digit = num % 10\n \
    \       if digit % 2 == 0 {\n            even_cnt += 1\n        } else {\n   \
    \         odd_cnt += 1\n        }\n        num /= 10\n    }\n    return (even_cnt,\
    \ odd_cnt)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(even_odd_count(num:\
    \ 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num:\
    \ 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num:\
    \ -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num:\
    \ -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))"
  status: Exception
  stderr: 'tmpvqeuopgu/tmpvqeuopgu.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9816b1bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9816812b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9816812988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b98168117b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvqeuopgu                        0x000055c42dd1f8ed <unavailable> + 6381

    5    libc.so.6                          0x00002b9816d07460 __libc_start_main +
    245

    6    tmpvqeuopgu                        0x000055c42dd1ef69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660013644
- exit_code: -4
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    var even_count = 0\n    var odd_count = 0\n    var\
    \ abs_num = abs(num)\n    while abs_num > 0 {\n        let digit = abs_num % 10\n\
    \        if digit % 2 == 0 {\n            even_count += 1\n        } else {\n\
    \            odd_count += 1\n        }\n        abs_num /= 10\n    }\n    return\
    \ (even_count, odd_count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num:\
    \ 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num:\
    \ 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num:\
    \ -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num:\
    \ -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))"
  status: Exception
  stderr: 'tmp4kra4isr/tmp4kra4isr.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b08507e5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b08504dcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b08504dc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b08504db7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4kra4isr                        0x0000556f599189cd <unavailable> + 6605

    5    libc.so.6                          0x00002b08509d1460 __libc_start_main +
    245

    6    tmp4kra4isr                        0x0000556f59918049 <unavailable> + 4169

    '
  stdout: ''
  timestamp: 1660013644
- exit_code: 0
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    \n    var even = 0\n    var odd = 0\n    \n    let\
    \ string = \"\\(num)\"\n    \n    for char in string {\n        guard let int\
    \ = Int(String(char)) else { continue }\n        if int % 2 == 0 {\n         \
    \   even += 1\n        } else {\n            odd += 1\n        }\n    }\n    \n\
    \    return (even, odd)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num:\
    \ 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num:\
    \ 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num:\
    \ -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num:\
    \ -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013644
- exit_code: 1
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    let absNum = abs(num)\n    let nums = absNum.digits\n\
    \    var even = 0\n    var odd = 0\n    for n in nums {\n        if n.isEven {\n\
    \            even += 1\n        } else {\n            odd += 1\n        }\n  \
    \  }\n    return (even, odd)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num:\
    \ 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num:\
    \ 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num:\
    \ -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num:\
    \ -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))"
  status: SyntaxError
  stderr: "/tmp/tmpcsocxr87.swift:10:23: error: value of type 'Int' has no member\
    \ 'digits'\n    let nums = absNum.digits\n               ~~~~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660013644
- exit_code: -4
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    var even_count = 0\n    var odd_count = 0\n    var\
    \ number = num\n    if number < 0 {\n        number = -number\n    }\n    while\
    \ number > 0 {\n        if number % 2 == 0 {\n            even_count += 1\n  \
    \      } else {\n            odd_count += 1\n        }\n        number /= 10\n\
    \    }\n    return (even_count, odd_count)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78)\
    \ == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: Exception
  stderr: 'tmphwfxhjsn/tmphwfxhjsn.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aafcd498c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aafcd18fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aafcd18f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aafcd18e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphwfxhjsn                        0x000055b6bc09c8ed <unavailable> + 6381

    5    libc.so.6                          0x00002aafcd684460 __libc_start_main +
    245

    6    tmphwfxhjsn                        0x000055b6bc09bf69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660013644
- exit_code: -4
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    var odd_count = 0\n    var even_count = 0\n    var\
    \ num_temp = num\n    while num_temp != 0 {\n        let digit = num_temp % 10\n\
    \        if digit % 2 == 0 {\n            even_count += 1\n        } else {\n\
    \            odd_count += 1\n        }\n        num_temp /= 10\n    }\n    return\
    \ (even_count, odd_count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num:\
    \ 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num:\
    \ 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num:\
    \ -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num:\
    \ -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))"
  status: Exception
  stderr: 'tmp5051frdy/tmp5051frdy.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1ba2949c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1ba2640b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1ba2640988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1ba263f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5051frdy                        0x000055c7b48ad8ed <unavailable> + 6381

    5    libc.so.6                          0x00002b1ba2b35460 __libc_start_main +
    245

    6    tmp5051frdy                        0x000055c7b48acf69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660013644
- exit_code: -4
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    // your code goes here\n    var even = 0\n    var\
    \ odd = 0\n    var num = num\n    if (num < 0) {\n        num = num * -1\n   \
    \ }\n    while (num > 0) {\n        if (num % 2 == 0) {\n            even += 1\n\
    \        } else {\n            odd += 1\n        }\n        num = num / 10\n \
    \   }\n    return (even, odd)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num:\
    \ 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num:\
    \ 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num:\
    \ -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num:\
    \ -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))"
  status: Exception
  stderr: 'tmpyudctoeb/tmpyudctoeb.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0e3f994c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0e3f68bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0e3f68b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0e3f68a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyudctoeb                        0x000055a74f9098ed <unavailable> + 6381

    5    libc.so.6                          0x00002b0e3fb80460 __libc_start_main +
    245

    6    tmpyudctoeb                        0x000055a74f908f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660013644
- exit_code: -4
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    var odd_count = 0\n    var even_count = 0\n    var\
    \ num = num\n    while num != 0 {\n        if (num % 10) % 2 == 0 {\n        \
    \    even_count += 1\n        } else {\n            odd_count += 1\n        }\n\
    \        num /= 10\n    }\n    return (even_count, odd_count)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num:\
    \ -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: Exception
  stderr: 'tmp4rzf34st/tmp4rzf34st.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1d1588ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1d15585b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1d15585988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1d155847b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4rzf34st                        0x000055a4c83208ed <unavailable> + 6381

    5    libc.so.6                          0x00002b1d15a7a460 __libc_start_main +
    245

    6    tmp4rzf34st                        0x000055a4c831ff69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660013644
- exit_code: -4
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    var copy = num\n    var numEven = 0\n    var numOdd\
    \ = 0\n    while copy != 0 {\n        let digit = copy % 10\n        if digit\
    \ % 2 == 0 {\n            numEven += 1\n        } else {\n            numOdd +=\
    \ 1\n        }\n        copy /= 10\n    }\n    return (numEven, numOdd)\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num:\
    \ -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: Exception
  stderr: 'tmp9c42w042/tmp9c42w042.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4faa529c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4faa220b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4faa220988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4faa21f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9c42w042                        0x0000559c395f08ed <unavailable> + 6381

    5    libc.so.6                          0x00002b4faa715460 __libc_start_main +
    245

    6    tmp9c42w042                        0x0000559c395eff69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660013644
- exit_code: -4
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    var n = num\n    if n < 0 {\n        n = -n\n    }\n\
    \    var digits = [Int]()\n    var even_count = 0\n    var odd_count = 0\n   \
    \ while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    for\
    \ digit in digits {\n        if digit % 2 == 0 {\n            even_count += 1\n\
    \        } else {\n            odd_count += 1\n        }\n    }\n    return (even_count,\
    \ odd_count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num:\
    \ 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num:\
    \ 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num:\
    \ -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num:\
    \ -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))"
  status: Exception
  stderr: 'tmppdqqgf4o/tmppdqqgf4o.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aae4735fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aae47056b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aae47056988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aae470557b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppdqqgf4o                        0x00005629f3709b4d <unavailable> + 6989

    5    libc.so.6                          0x00002aae4754b460 __libc_start_main +
    245

    6    tmppdqqgf4o                        0x00005629f37091c9 <unavailable> + 4553

    '
  stdout: ''
  timestamp: 1660013644
- exit_code: -4
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    var even_cnt: Int = 0\n    var odd_cnt: Int = 0\n\
    \    var n = num\n    if n < 0 {\n        n = -n\n    }\n    while n > 0 {\n \
    \       if n % 2 == 0 {\n            even_cnt += 1\n        } else {\n       \
    \     odd_cnt += 1\n        }\n        n /= 10\n    }\n    return (even_cnt, odd_cnt)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num:\
    \ -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: Exception
  stderr: 'tmp1mhjfotv/tmp1mhjfotv.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acc1b240c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acc1af37b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acc1af37988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acc1af367b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1mhjfotv                        0x000055e42f75b8ed <unavailable> + 6381

    5    libc.so.6                          0x00002acc1b42c460 __libc_start_main +
    245

    6    tmp1mhjfotv                        0x000055e42f75af69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660013644
- exit_code: 1
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    var even = 0\n    var odd = 0\n    for digit in num.abs.digits\
    \ {\n        if digit % 2 == 0 {\n            even += 1\n        } else {\n  \
    \          odd += 1\n        }\n    }\n    return (even, odd)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num:\
    \ -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: SyntaxError
  stderr: "/tmp/tmpii921_p0.swift:11:22: error: value of type 'Int' has no member\
    \ 'abs'\n    for digit in num.abs.digits {\n                 ~~~ ^~~\n"
  stdout: ''
  timestamp: 1660013644
- exit_code: -4
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    var a = 0, b = 0\n    for i in String(num) {\n   \
    \     if i.wholeNumberValue! % 2 == 0 {\n            a += 1\n        } else {\n\
    \            b += 1\n        }\n    }\n    return (a, b)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num:\
    \ -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: Exception
  stderr: 'tmpf_d1d8bk/tmpf_d1d8bk.swift:11: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b00eaf68c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b00eac5f561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b00eac5f286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b00eac5f13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b00eac5ebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpf_d1d8bk                        0x000056431e760c32 <unavailable> + 7218

    6    tmpf_d1d8bk                        0x000056431e7604e4 <unavailable> + 5348

    7    libc.so.6                          0x00002b00eb154460 __libc_start_main +
    245

    8    tmpf_d1d8bk                        0x000056431e760139 <unavailable> + 4409

    '
  stdout: ''
  timestamp: 1660013644
- exit_code: -4
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    let totalDigits = num.description.count\n    var evenDigits\
    \ = 0\n    var oddDigits = 0\n    var copyOfNum = num\n    if copyOfNum < 0 {\n\
    \        copyOfNum = copyOfNum * -1\n    }\n    for i in 1...totalDigits {\n \
    \       if (copyOfNum % 10) % 2 == 0 {\n            evenDigits += 1\n        }\
    \ else {\n            oddDigits += 1\n        }\n        copyOfNum = copyOfNum\
    \ / 10\n    }\n    return (evenDigits, oddDigits)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num:\
    \ -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: Exception
  stderr: 'tmpfalbdxm8/tmpfalbdxm8.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af004c3dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af004934b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af004934988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af0049337b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfalbdxm8                        0x0000557ed5c5a59d <unavailable> + 5533

    5    libc.so.6                          0x00002af004e29460 __libc_start_main +
    245

    6    tmpfalbdxm8                        0x0000557ed5c5a139 <unavailable> + 4409

    '
  stdout: ''
  timestamp: 1660013644
- exit_code: -4
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    var (even_count, odd_count) = (0, 0)\n    var n =\
    \ num\n    while n != 0 {\n        if n % 2 == 0 {\n            even_count +=\
    \ 1\n        } else {\n            odd_count += 1\n        }\n        n /= 10\n\
    \    }\n    return (even_count, odd_count)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78)\
    \ == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: Exception
  stderr: 'tmp1ba7di59/tmp1ba7di59.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2d6e8cdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2d6e5c4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2d6e5c4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2d6e5c37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1ba7di59                        0x000056258d8ba8ed <unavailable> + 6381

    5    libc.so.6                          0x00002b2d6eab9460 __libc_start_main +
    245

    6    tmp1ba7di59                        0x000056258d8b9f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660013644
- exit_code: -4
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    var even = 0\n    var odd = 0\n    var num = num\n\
    \    if num < 0 {\n        num = -num\n    }\n    while num > 0 {\n        let\
    \ digit = num % 10\n        if digit % 2 == 0 {\n            even += 1\n     \
    \   } else {\n            odd += 1\n        }\n        num /= 10\n    }\n    return\
    \ (even, odd)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num:\
    \ 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num:\
    \ 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num:\
    \ -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num:\
    \ -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))"
  status: Exception
  stderr: 'tmp5oljxme6/tmp5oljxme6.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae3c87c7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae3c84beb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae3c84be988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae3c84bd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5oljxme6                        0x000056487c7a18ed <unavailable> + 6381

    5    libc.so.6                          0x00002ae3c89b3460 __libc_start_main +
    245

    6    tmp5oljxme6                        0x000056487c7a0f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660013486
- exit_code: -4
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    var evens = 0\n    var odds = 0\n    var n = num\n\
    \    while n != 0 {\n        if n % 2 == 0 {\n            evens += 1\n       \
    \ } else {\n            odds += 1\n        }\n        n /= 10\n    }\n    return\
    \ (evens, odds)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num:\
    \ 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num:\
    \ 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num:\
    \ -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num:\
    \ -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))"
  status: Exception
  stderr: 'tmp3q1aaw0y/tmp3q1aaw0y.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba465eeac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba465be1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba465be1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba465be07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3q1aaw0y                        0x000055be768438ed <unavailable> + 6381

    5    libc.so.6                          0x00002ba4660d6460 __libc_start_main +
    245

    6    tmp3q1aaw0y                        0x000055be76842f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660013644
- exit_code: 0
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    var oddCount = 0\n    var evenCount = 0\n    var numString\
    \ = String(num)\n    if num < 0 {\n        numString.removeFirst()\n    }\n  \
    \  for i in numString {\n        if (Int(String(i)) ?? 0) % 2 == 0 {\n       \
    \     evenCount += 1\n        } else {\n            oddCount += 1\n        }\n\
    \    }\n    return (evenCount, oddCount)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1,\
    \ 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013644
- exit_code: 0
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    var evenCount = 0\n    var oddCount = 0\n    for i\
    \ in String(num) {\n        if let a = Int(String(i)) {\n            if a % 2\
    \ == 0 {\n                evenCount += 1\n            } else {\n             \
    \   oddCount += 1\n            }\n        }\n    }\n    return (evenCount, oddCount)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num:\
    \ -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013644
- exit_code: -4
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    \n    var even_count = 0\n    var odd_count = 0\n\
    \    \n    for char in String(num) {\n        let digit = String(char)\n     \
    \   if Int(digit)! % 2 == 0 {\n            even_count += 1\n        } else {\n\
    \            odd_count += 1\n        }\n    }\n    \n    return (even_count, odd_count)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num:\
    \ -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: Exception
  stderr: 'tmpvz3h7g78/tmpvz3h7g78.swift:15: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b55efb43c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b55ef83a561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b55ef83a286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b55ef83a13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b55ef839bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpvz3h7g78                        0x0000559cc7259d6e <unavailable> + 7534

    6    tmpvz3h7g78                        0x0000559cc7259584 <unavailable> + 5508

    7    libc.so.6                          0x00002b55efd2f460 __libc_start_main +
    245

    8    tmpvz3h7g78                        0x0000559cc72591d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1660013644
- exit_code: 0
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    var even_count = 0\n    var odd_count = 0\n    var\
    \ num = num\n    if num < 0 {\n        num = -num\n    }\n    for i in num.description\
    \ {\n        if (i.wholeNumberValue! % 2 == 0) {\n            even_count += 1\n\
    \        } else {\n            odd_count += 1\n        }\n    }\n    return (even_count,\
    \ odd_count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num:\
    \ 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num:\
    \ 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num:\
    \ -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num:\
    \ -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013644
- exit_code: -4
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    return (0, 0)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78)\
    \ == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: Exception
  stderr: 'tmp_kefvok9/tmp_kefvok9.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aadf36f2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aadf33e9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aadf33e9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aadf33e87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_kefvok9                        0x00005616f6e41264 <unavailable> + 4708

    5    libc.so.6                          0x00002aadf38de460 __libc_start_main +
    245

    6    tmp_kefvok9                        0x00005616f6e40ec9 <unavailable> + 3785

    '
  stdout: ''
  timestamp: 1660013486
- exit_code: -4
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    var even = 0\n    var odd = 0\n    for i in num.description\
    \ {\n        if i.wholeNumberValue! % 2 == 0 {\n            even += 1\n      \
    \  } else {\n            odd += 1\n        }\n    }\n    return (even, odd)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num:\
    \ -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: Exception
  stderr: 'tmp24ard0m8/tmp24ard0m8.swift:12: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b9b91773c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9b9146a561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b9b9146a286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b9b9146a13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b9b91469bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp24ard0m8                        0x000055d823947c03 <unavailable> + 7171

    6    tmp24ard0m8                        0x000055d8239474b4 <unavailable> + 5300

    7    libc.so.6                          0x00002b9b9195f460 __libc_start_main +
    245

    8    tmp24ard0m8                        0x000055d823947109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660013644
- exit_code: 1
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    var evenCount = 0\n    var oddCount = 0\n    for num\
    \ in String(num).characters {\n        if Int(String(num))! % 2 == 0 {\n     \
    \       evenCount += 1\n        } else {\n            oddCount += 1\n        }\n\
    \    }\n    return (evenCount, oddCount)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1,\
    \ 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
    \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
    \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
    \ 0) == (1, 0))"
  status: SyntaxError
  stderr: "/tmp/tmp0h1qu9r8.swift:11:28: error: 'characters' is unavailable: Please\
    \ use String directly\n    for num in String(num).characters {\n             \
    \              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1660013644
- exit_code: -4
  program: "\n/// Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n///\
    \ (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num:\
    \ Int) -> (Int, Int) {\n    var even = 0\n    var odd = 0\n    for c in String(num)\
    \ {\n        if c.isLetter { continue }\n        if Int(String(c))! % 2 == 0 {\n\
    \            even += 1\n        } else {\n            odd += 1\n        }\n  \
    \  }\n    return (even, odd)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(even_odd_count(num:\
    \ 7) == (0, 1))\nassert(even_odd_count(num: -78) == (1, 1))\nassert(even_odd_count(num:\
    \ 3452) == (2, 2))\nassert(even_odd_count(num: 346211) == (3, 3))\nassert(even_odd_count(num:\
    \ -345821) == (3, 3))\nassert(even_odd_count(num: -2) == (1, 0))\nassert(even_odd_count(num:\
    \ -45347) == (2, 3))\nassert(even_odd_count(num: 0) == (1, 0))"
  status: Exception
  stderr: 'tmpwwed6yut/tmpwwed6yut.swift:13: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b9840f6ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9840c61561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b9840c61286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b9840c6113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b9840c60bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpwwed6yut                        0x0000559925b38dc2 <unavailable> + 7618

    6    tmpwwed6yut                        0x0000559925b385e4 <unavailable> + 5604

    7    libc.so.6                          0x00002b9841156460 __libc_start_main +
    245

    8    tmpwwed6yut                        0x0000559925b38239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1660013644
