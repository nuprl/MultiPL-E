name: HumanEval_47_median
language: swift
prompt: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3, 1,\
  \ 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
  \ median(l: [Int]) -> Double {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
  \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
  \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
completions: ["    let l = l.sorted()\n    if l.count % 2 == 0 {\n        let center\
    \ = l.count / 2\n        return Double(l[center - 1] + l[center]) / 2\n    } else\
    \ {\n        return Double(l[l.count / 2])\n    }", "    // TODO: implement median\n\
    \    \n    // We need to sort the array first\n    let sorted = insertionSort(array:\
    \ l)\n    \n    // We need to check if we are looking at an even or odd number\
    \ of elements\n    let count = sorted.count\n    let middle = count / 2\n    \n\
    \    if count % 2 == 0 {\n        // If we have an even number of elements, we\
    \ need to find the middle two elements, then find the average of the two.\n  \
    \      let firstMiddle = sorted[middle]\n        let secondMiddle = sorted[middle\
    \ - 1]\n        return Double(firstMiddle + secondMiddle) / 2\n    } else {\n\
    \        // If we have an odd number of elements, we need to find the middle element\
    \ and return it\n        return Double(sorted[middle])\n    }", "    let sorted\
    \ = l.sorted()\n    let half = sorted.count / 2\n    if sorted.count % 2 == 0\
    \ {\n        return Double(sorted[half - 1] + sorted[half]) / 2\n    } else {\n\
    \        return Double(sorted[half])\n    }", '    return 0.0', "    let sorted\
    \ = l.sorted()\n    let mid = sorted.count / 2\n    if sorted.count % 2 == 0 {\n\
    \        return Double(sorted[mid] + sorted[mid - 1]) / 2\n    } else {\n    \
    \    return Double(sorted[mid])\n    }", "    let l_ = l.sorted()\n    let mid\
    \ = l_.count / 2\n    if l_.count % 2 == 0 {\n        return Double(l_[mid - 1]\
    \ + l_[mid]) / 2\n    } else {\n        return Double(l_[mid])\n    }", "    let\
    \ middle = (l.count - 1) / 2\n    return Double(l[middle])", "    let l: [Double]\
    \ = l.map({ Double($0) })\n    return median(l: l)", "    let count = l.count\n\
    \    var tmpList = l\n    tmpList.sort()\n    if count % 2 == 0 {\n        let\
    \ a = tmpList[count / 2 - 1]\n        let b = tmpList[count / 2]\n        return\
    \ Double(a + b) / 2\n    } else {\n        return Double(tmpList[count / 2])\n\
    \    }", "    let sorted = l.sorted()\n    if sorted.count % 2 == 0 {\n      \
    \  let left = sorted[sorted.count / 2 - 1]\n        let right = sorted[sorted.count\
    \ / 2]\n        return Double(left + right) / 2\n    } else {\n        return\
    \ Double(sorted[sorted.count / 2])\n    }", '    return (sorted(l)[(l.count -
    1) / 2] + sorted(l)[l.count / 2]) / 2.0', '    return average(l: l)', "    let\
    \ sorted = l.sorted()\n    if sorted.count % 2 == 0 {\n        return Double(sorted[sorted.count\
    \ / 2] + sorted[sorted.count / 2 - 1]) / 2\n    } else {\n        return Double(sorted[sorted.count\
    \ / 2])\n    }", "    // Don't change the code below.\n    let a = l.sorted()\n\
    \    return a.count % 2 == 0 ? Double(a[a.count / 2] + a[a.count / 2 - 1]) / 2\
    \ : Double(a[a.count / 2])", "    let index = (l.count - 1) / 2\n    return Double(l[index])",
  "    let sortedList = l.sorted()\n    let n = sortedList.count\n    let medianIndex\
    \ = n / 2\n    if n % 2 == 0 {\n        let medianLeft = Double(sortedList[medianIndex\
    \ - 1])\n        let medianRight = Double(sortedList[medianIndex])\n        return\
    \ (medianLeft + medianRight) / 2\n    } else {\n        return Double(sortedList[medianIndex])\n\
    \    }", "    let lSorted = l.sorted()\n    let totalCount = lSorted.count\n \
    \   let halfCount = totalCount / 2\n    if totalCount % 2 == 0 {\n        return\
    \ Double(lSorted[halfCount - 1] + lSorted[halfCount]) / 2\n    } else {\n    \
    \    return Double(lSorted[halfCount])\n    }", "    let n = l.count\n    let\
    \ mid = n / 2\n    let halfOdd = n % 2 == 1\n    if halfOdd {\n        return\
    \ Double(l[mid])\n    } else {\n        return Double(l[mid - 1] + l[mid]) / 2\n\
    \    }", "    let m = l.count / 2\n    let sortedArray = l.sorted()\n    return\
    \ l.count % 2 == 0 ?\n        Double(sortedArray[m - 1] + sortedArray[m]) / 2\
    \ :\n        Double(sortedArray[m])", "    if l.count == 0 {\n        return 0\n\
    \    }\n    let sorted = l.sorted()\n    if sorted.count % 2 == 0 {\n        return\
    \ Double(sorted[sorted.count / 2] + sorted[sorted.count / 2 - 1]) / 2\n    } else\
    \ {\n        return Double(sorted[sorted.count / 2])\n    }", "    var list =\
    \ l\n    list.sort()\n    if list.count % 2 == 0 {\n        return Double(list[list.count\
    \ / 2] + list[list.count / 2 - 1]) / 2\n    } else {\n        return Double(list[list.count\
    \ / 2])\n    }", '    return 0.0', "    \n    // if length is odd, return middle\
    \ number\n    // if length is even, return average of two middle numbers\n   \
    \ \n    var length = l.count\n    var median: Double = 0\n    \n    // sort the\
    \ array\n    var sortedArray = l.sorted()\n    \n    if length % 2 == 0 {\n  \
    \      let firstMid = sortedArray[length / 2 - 1]\n        let secondMid = sortedArray[length\
    \ / 2]\n        median = Double(firstMid + secondMid) / 2\n    } else {\n    \
    \    median = Double(sortedArray[length / 2])\n    }\n    \n    return median",
  '    return Double(l.sorted()[l.count / 2])', "    let length = l.count\n    if\
    \ length % 2 == 0 {\n        return Double(l[length / 2] + l[length / 2 - 1])\
    \ / 2\n    } else {\n        return Double(l[length / 2])\n    }", "    var l\
    \ = l\n    let mid = l.count / 2\n    l.sort()\n    if l.count % 2 == 0 {\n  \
    \      return Double(l[mid] + l[mid-1]) / 2\n    } else {\n        return Double(l[mid])\n\
    \    }", "    assert(l.count > 0)\n    return l.sorted()[l.count / 2]", "    guard\
    \ !l.isEmpty else {\n        return 0\n    }\n    let length = l.count\n    let\
    \ middle = length / 2\n    if length % 2 == 0 {\n        return Double(l[middle\
    \ - 1] + l[middle]) / 2\n    } else {\n        return Double(l[middle])\n    }",
  "    let sorted = l.sorted()\n    if sorted.count % 2 == 0 {\n        let index1\
    \ = sorted.count / 2\n        let index2 = index1 - 1\n        return Double(sorted[index1]\
    \ + sorted[index2]) / 2\n    } else {\n        let index = (sorted.count - 1)\
    \ / 2\n        return Double(sorted[index])\n    }", '    return 0.0', "    let\
    \ sortedL = l.sorted()\n    let l2 = sortedL.count\n    let mid = l2 / 2\n   \
    \ if l2 % 2 == 0 {\n        let medianEven = Double(sortedL[mid - 1] + sortedL[mid])\
    \ / 2\n        return medianEven\n    } else {\n        let medianOdd = Double(sortedL[mid])\n\
    \        return medianOdd\n    }", "    let sorted = l.sorted()\n    return Double(sorted[l.count\
    \ / 2] + sorted[(l.count - 1) / 2]) / 2", "    let medianIndex = Int(floor(Double(l.count)\
    \ / 2.0))\n    let sortedList = l.sorted()\n    if l.count % 2 == 0 {\n      \
    \  return (Double(sortedList[medianIndex - 1]) + Double(sortedList[medianIndex]))\
    \ / 2.0\n    } else {\n        return Double(sortedList[medianIndex])\n    }",
  "  let sorted = l.sorted()\n  let mid = sorted.count / 2\n  return Double(sorted[mid]\
    \ + sorted[mid - 1]) / 2", "    let n = l.count\n    if n % 2 == 0 {\n       \
    \ let a = l[n / 2 - 1]\n        let b = l[n / 2]\n        return Double(a + b)\
    \ / 2\n    } else {\n        return Double(l[n / 2])\n    }", "    let l = l.sorted()\n\
    \    let n = l.count\n    if n % 2 == 0 {\n        return Double(l[n / 2] + l[n\
    \ / 2 - 1]) / 2\n    } else {\n        return Double(l[n / 2])\n    }", "    let\
    \ sl = l.sorted()\n    let n = sl.count\n    let half = n / 2\n    if n % 2 ==\
    \ 0 {\n        return Double(sl[half - 1] + sl[half]) / 2\n    } else {\n    \
    \    return Double(sl[half])\n    }", "    var l = l\n    l.sort()\n    if l.count\
    \ % 2 == 0 {\n        return Double(l[l.count / 2] + l[l.count / 2 - 1]) / 2\n\
    \    } else {\n        return Double(l[l.count / 2])\n    }", "    var medianIndex:\
    \ Int\n    if l.count % 2 == 0 {\n        medianIndex = l.count / 2\n    } else\
    \ {\n        medianIndex = (l.count - 1) / 2\n    }\n    let median: Double =\
    \ Double(l[medianIndex])\n    return median", "    var l_double: [Double] = []\n\
    \    for num in l {\n        l_double.append(Double(num))\n    }\n    return median(l:\
    \ l_double)", "    \n    var sortedArray = l.sorted()\n    let midIndex = sortedArray.count\
    \ / 2\n    \n    if sortedArray.count % 2 == 0 {\n        let a = sortedArray[midIndex]\n\
    \        let b = sortedArray[midIndex - 1]\n        return Double(a + b) / 2\n\
    \    } else {\n        return Double(sortedArray[midIndex])\n    }", "    let\
    \ n = l.count\n    let m = n / 2\n    if n % 2 == 0 {\n        return Double(l[m]\
    \ + l[m - 1]) / 2\n    } else {\n        return Double(l[m])\n    }", "    if\
    \ l.count == 0 {\n        return 0\n    }\n    let sorted = l.sorted()\n    let\
    \ num = l.count\n    let med = num / 2\n    let a = sorted[med]\n    let b = sorted[med\
    \ - 1]\n    if num % 2 == 0 {\n        return Double(a + b) / 2\n    } else {\n\
    \        return Double(a)\n    }", "    let nums = l.sorted()\n    let middle\
    \ = nums.count / 2\n    if nums.count % 2 == 0 {\n        return Double(nums[middle]\
    \ + nums[middle - 1]) / 2\n    } else {\n        return Double(nums[middle])\n\
    \    }", "    var l = l\n    l.sort()\n    if l.count % 2 == 0 {\n        return\
    \ Double(l[l.count / 2] + l[l.count / 2 - 1]) / 2\n    } else {\n        return\
    \ Double(l[l.count / 2])\n    }", "    let sortedList = l.sorted()\n    let index\
    \ = sortedList.count / 2\n    if sortedList.count % 2 == 0 {\n        return Double(sortedList[index]\
    \ + sortedList[index - 1]) / 2\n    } else {\n        return Double(sortedList[index])\n\
    \    }", "    let li = l.sorted()\n    if li.count % 2 == 0 {\n        return\
    \ Double(li[li.count / 2] + li[li.count / 2 - 1]) / 2\n    } else {\n        return\
    \ Double(li[li.count / 2])\n    }", "    let sorted_l = l.sorted()\n    let mid_index\
    \ = l.count / 2\n    if l.count % 2 == 0 {\n        return Double(sorted_l[mid_index]\
    \ + sorted_l[mid_index-1]) / 2\n    } else {\n        return Double(sorted_l[mid_index])\n\
    \    }", "  let sortedArray = insertionSort(l: l)\n  var mid: Int = 0\n  var result:\
    \ Double = 0\n  if sortedArray.count % 2 == 0 {\n    mid = sortedArray.count /\
    \ 2\n    result = Double(sortedArray[mid] + sortedArray[mid - 1]) / 2\n  } else\
    \ {\n    mid = sortedArray.count / 2\n    result = Double(sortedArray[mid])\n\
    \  }\n  return result", "    let sortedL = l.sorted()\n    let n = sortedL.count\n\
    \    if n == 0 {\n        return 0\n    }\n    let mid = n / 2\n    if n % 2 ==\
    \ 0 {\n        return Double(sortedL[mid] + sortedL[mid - 1]) / 2\n    } else\
    \ {\n        return Double(sortedL[mid])\n    }", "    // get length of l\n  \
    \  let lLength = l.count\n    // Sort the array l\n    let lSorted = l.sorted()\n\
    \    // is it even?\n    if lLength % 2 == 0 {\n        // get the middle of the\
    \ array\n        let medianValue1 = lSorted[lLength / 2]\n        let medianValue2\
    \ = lSorted[lLength / 2 - 1]\n        return Double(medianValue1 + medianValue2)\
    \ / 2\n    } else {\n        return Double(lSorted[lLength / 2])\n    }", "  \
    \  let size = l.count\n    if size == 0 {\n        return 0\n    }\n    if size\
    \ % 2 == 0 {\n        return (Double(l[size / 2 - 1]) + Double(l[size / 2])) /\
    \ 2\n    } else {\n        return Double(l[size / 2])\n    }", "    if l.count\
    \ == 0 {\n        return Double.nan\n    }\n    return Double(sum(l: l)) / Double(l.count)",
  "  let sorted = l.sorted()\n  let mid = sorted.count / 2\n  if sorted.count % 2\
    \ == 0 {\n    return Double(sorted[mid - 1] + sorted[mid]) / 2\n  } else {\n \
    \   return Double(sorted[mid])\n  }", "    var temp = l\n    temp.sort()\n   \
    \ if temp.count % 2 == 0 {\n        return Double(temp[temp.count / 2] + temp[temp.count\
    \ / 2 - 1]) / 2\n    } else {\n        return Double(temp[temp.count / 2])\n \
    \   }", "    let median = l.sorted()[l.count / 2]\n    return Double(median)",
  "    guard l.count > 0 else { return 0 }\n    let sortedL = l.sorted()\n    let\
    \ n = sortedL.count\n    let mid = n / 2\n    let midEven = (n % 2 == 0)\n   \
    \ if midEven {\n        return Double(sortedL[mid] + sortedL[mid - 1]) / 2\n \
    \   } else {\n        return Double(sortedL[mid])\n    }", "    let sorted = l.sorted()\n\
    \    let center = sorted.count / 2\n    if sorted.count % 2 == 0 {\n        return\
    \ Double(sorted[center - 1] + sorted[center]) / 2\n    } else {\n        return\
    \ Double(sorted[center])\n    }", "    if l.count == 0 {\n        return 0\n \
    \   }\n    if l.count % 2 == 0 {\n        return Double(l[l.count / 2] + l[l.count\
    \ / 2 - 1]) / 2\n    } else {\n        return Double(l[l.count / 2])\n    }",
  "    let sortedList = l.sorted()\n    let length = sortedList.count\n    let middle\
    \ = length / 2\n    if length % 2 == 0 {\n        return Double(sortedList[middle]\
    \ + sortedList[middle - 1]) / 2\n    } else {\n        return Double(sortedList[middle])\n\
    \    }", "    let array = l.sorted()\n    if array.count % 2 == 0 {\n        let\
    \ center = array.count / 2\n        return Double(array[center] + array[center\
    \ - 1]) / 2\n    } else {\n        return Double(array[array.count / 2])\n   \
    \ }", "    if l.count % 2 == 0 {\n        return (Double(l[l.count / 2 - 1]) +\
    \ Double(l[l.count / 2])) / 2\n    } else {\n        return Double(l[l.count /\
    \ 2])\n    }", '    return l.reduce(0, +) / Double(l.count)', "    let s = l.sorted()\n\
    \    if s.count % 2 == 0 {\n        return Double(s[s.count / 2] + s[s.count /\
    \ 2 - 1]) / 2\n    } else {\n        return Double(s[s.count / 2])\n    }", " \
    \   // TODO: Implement\n    return 0.0", "    let sorted = insertionSort(l: l)\n\
    \    if sorted.count % 2 == 0 {\n        let mid = sorted.count / 2\n        return\
    \ Double(sorted[mid] + sorted[mid - 1]) / 2\n    } else {\n        return Double(sorted[sorted.count\
    \ / 2])\n    }", "    if l.count % 2 == 0 {\n        return Double(l[l.count /\
    \ 2] + l[l.count / 2 - 1]) / 2\n    } else {\n        return Double(l[l.count\
    \ / 2])\n    }", "    let sorted = l.sorted()\n    let count = sorted.count\n\
    \    let mid = count / 2\n    let mid2 = mid - 1\n    if count % 2 == 0 {\n  \
    \      return Double(sorted[mid] + sorted[mid2]) / 2\n    } else {\n        return\
    \ Double(sorted[mid])\n    }", "    assert(l.count > 0)\n    let sorted_l = sort(l:\
    \ l)\n    if sorted_l.count % 2 == 0 {\n        return Double(sorted_l[sorted_l.count\
    \ / 2] + sorted_l[sorted_l.count / 2 - 1]) / 2\n    } else {\n        return Double(sorted_l[sorted_l.count\
    \ / 2])\n    }", "    if l.count % 2 == 0 {\n        return Double(l[l.count /\
    \ 2] + l[l.count / 2 - 1]) / 2\n    } else {\n        return Double(l[l.count\
    \ / 2])\n    }", "    let middle = l.count / 2\n    let sorted = l.sorted()\n\
    \    return l.count % 2 == 0 ? (Double(sorted[middle - 1]) + Double(sorted[middle]))\
    \ / 2 : Double(sorted[middle])", "    return (l.count % 2 == 0) ?\n        Double(l[l.count\
    \ / 2] + l[l.count / 2 - 1]) / 2 :\n        Double(l[l.count / 2])", "    if l.count\
    \ == 0 {\n        return 0\n    }\n    let sortedList = l.sorted()\n    let index\
    \ = l.count / 2\n    if l.count % 2 == 0 {\n        return Double(sortedList[index\
    \ - 1] + sortedList[index]) / 2\n    } else {\n        return Double(sortedList[index])\n\
    \    }", '    return 0.0', "    let len = l.count\n    let sortedList = l.sorted()\n\
    \    if len % 2 == 0 {\n        let mid = len / 2\n        return Double(sortedList[mid]\
    \ + sortedList[mid - 1]) / 2\n    } else {\n        let mid = len / 2\n      \
    \  return Double(sortedList[mid])\n    }", "    guard l.count > 0 else { return\
    \ 0 }\n    let s = l.sorted()\n    if s.count % 2 == 0 {\n        return Double(s[s.count\
    \ / 2] + s[s.count / 2 - 1]) / 2\n    } else {\n        return Double(s[s.count\
    \ / 2])\n    }", "    var c = l\n    c.sort()\n    if c.count % 2 == 0 {\n   \
    \     return Double(c[c.count / 2] + c[c.count / 2 - 1]) / 2\n    } else {\n \
    \       return Double(c[c.count / 2])\n    }", "    if l.count == 0 {\n      \
    \  return 0\n    }\n    if l.count % 2 == 0 {\n        return Double(l[l.count\
    \ / 2] + l[l.count / 2 - 1]) / 2\n    } else {\n        return Double(l[l.count\
    \ / 2])\n    }", "    let sorted = l.sorted()\n    let mid = sorted.count / 2\n\
    \    if sorted.count % 2 == 0 {\n        return Double(sorted[mid] + sorted[mid\
    \ - 1]) / 2\n    } else {\n        return Double(sorted[mid])\n    }", "    if\
    \ l.count % 2 == 0 {\n        return Double(l[l.count / 2] + l[l.count / 2 - 1])\
    \ / 2\n    } else {\n        return Double(l[l.count / 2])\n    }", "    // your\
    \ code here\n    let a = l.sorted()\n    let lng = a.count\n    var m = Double(a[0])\n\
    \    if lng%2 == 0 {\n        m = Double(a[lng/2] + a[lng/2-1])/2\n    } else\
    \ {\n        m = Double(a[lng/2])\n    }\n    return m", "    if l.count == 0\
    \ {\n        return 0\n    }\n    let s = l.sorted()\n    let m = s.count / 2\n\
    \    return Double(s[m])", "    // FIXME\n    return 0.0", "    var ret = 0.0\n\
    \    if l.count == 0 {\n        return 0.0\n    }\n    if l.count % 2 == 0 {\n\
    \        let a = l[l.count / 2 - 1]\n        let b = l[l.count / 2]\n        ret\
    \ = Double(a + b) / 2.0\n    } else {\n        ret = Double(l[l.count / 2])\n\
    \    }\n    return ret", "    let middle = l.count / 2\n    if l.count % 2 ==\
    \ 0 {\n        return Double(l[middle] + l[middle - 1]) / 2\n    } else {\n  \
    \      return Double(l[middle])\n    }", "    let sorted = l.sorted()\n    let\
    \ mid = sorted.count / 2\n    if sorted.count % 2 == 0 {\n        return Double(sorted[mid\
    \ - 1] + sorted[mid]) / 2\n    } else {\n        return Double(sorted[mid])\n\
    \    }", "    let sortedL = l.sorted()\n    let a: Double = Double(sortedL[sortedL.count\
    \ / 2])\n    let b: Double = Double(sortedL[(sortedL.count / 2) - 1])\n    return\
    \ (a + b) / 2", "    assert(l.count > 0)\n    let n = l.count / 2\n    if l.count\
    \ % 2 == 0 {\n        return Double(l[n] + l[n-1]) / 2\n    } else {\n       \
    \ return Double(l[n])\n    }", "    var tmpArray = l\n    tmpArray.sort()\n  \
    \  let count = tmpArray.count\n    let idx = count / 2\n    return Double(count\
    \ % 2 == 0 ? (tmpArray[idx - 1] + tmpArray[idx]) / 2 : tmpArray[idx])", "    let\
    \ sorted = l.sorted()\n    let count = sorted.count\n    if count % 2 == 0 {\n\
    \        let x = sorted[count / 2]\n        let y = sorted[count / 2 - 1]\n  \
    \      return Double(x + y) / 2\n    } else {\n        return Double(sorted[count\
    \ / 2])\n    }", "    var sortedList = l.sorted()\n    if sortedList.count % 2\
    \ == 0 {\n        let index1 = sortedList.count / 2\n        let index2 = sortedList.count\
    \ / 2 - 1\n        return Double(sortedList[index1] + sortedList[index2]) / 2\n\
    \    } else {\n        let index = sortedList.count / 2\n        return Double(sortedList[index])\n\
    \    }", "    let sorted = l.sorted()\n    let count = sorted.count\n    let mid\
    \ = count / 2\n    if count % 2 == 0 {\n        return Double(sorted[mid] + sorted[mid\
    \ - 1]) / 2\n    } else {\n        return Double(sorted[mid])\n    }", "    let\
    \ sortedList = l.sorted()\n    let middle = sortedList.count / 2\n    if sortedList.count\
    \ % 2 == 0 {\n        return Double(sortedList[middle] + sortedList[middle - 1])\
    \ / 2\n    } else {\n        return Double(sortedList[middle])\n    }", "    let\
    \ sortedL = l.sorted()\n    let medianIndex = sortedL.count / 2\n    if sortedL.count\
    \ % 2 == 0 {\n        let median = (Double(sortedL[medianIndex]) + Double(sortedL[medianIndex\
    \ - 1])) / 2\n        return median\n    } else {\n        return Double(sortedL[medianIndex])\n\
    \    }", "    let sorted = l.sorted()\n    let mid = sorted.count / 2\n    if\
    \ sorted.count % 2 == 0 {\n        return Double(sorted[mid - 1] + sorted[mid])\
    \ / 2\n    } else {\n        return Double(sorted[mid])\n    }", "    let sorted\
    \ = l.sorted()\n    let middle = sorted.count / 2\n    if sorted.count % 2 ==\
    \ 0 {\n        return Double(sorted[middle - 1] + sorted[middle]) / 2\n    } else\
    \ {\n        return Double(sorted[middle])\n    }", '    return 1.0', "    let\
    \ sortedArray = l.sorted()\n    let mid = sortedArray.count / 2\n    if sortedArray.count\
    \ % 2 == 0 {\n        return Double(sortedArray[mid - 1] + sortedArray[mid]) /\
    \ 2\n    } else {\n        return Double(sortedArray[mid])\n    }", "    let sorted\
    \ = l.sorted()\n    let length = sorted.count\n    let middle = length / 2\n \
    \   let median = (length % 2 == 0) ? (Double(sorted[middle - 1]) + Double(sorted[middle]))\
    \ / 2 : Double(sorted[middle])\n    return median", "    let sorted = l.sorted()\n\
    \    if sorted.count % 2 == 0 {\n        return Double(sorted[(sorted.count /\
    \ 2) - 1] + sorted[sorted.count / 2]) / 2\n    } else {\n        return Double(sorted[sorted.count\
    \ / 2])\n    }", "    let sorted = l.sorted()\n    if l.count % 2 == 0 {\n   \
    \     return Double(sorted[sorted.count / 2] + sorted[sorted.count / 2 - 1]) /\
    \ 2\n    } else {\n        return Double(sorted[sorted.count / 2])\n    }", " \
    \   guard !l.isEmpty else {\n        fatalError(\"empty array\")\n    }\n    let\
    \ m = l.sorted(by: <)\n    if m.count % 2 == 0 {\n        return Double(m[m.count\
    \ / 2] + m[m.count / 2 - 1]) / 2\n    } else {\n        return Double(m[m.count\
    \ / 2])\n    }", "    if l.count == 0 {\n        return 0\n    }\n    if l.count\
    \ % 2 == 0 {\n        let a = l[l.count / 2]\n        let b = l[l.count / 2 -\
    \ 1]\n        return Double(a + b) / 2\n    } else {\n        return Double(l[l.count\
    \ / 2])\n    }", "    let sorted = l.sorted()\n    let count = sorted.count\n\
    \    if count % 2 == 0 {\n        return Double(sorted[count / 2] + sorted[count\
    \ / 2 - 1]) / 2\n    } else {\n        return Double(sorted[count / 2])\n    }",
  "    let sorted = l.sorted()\n    let count = sorted.count\n    if count % 2 ==\
    \ 0 {\n        return Double(sorted[count / 2] + sorted[count / 2 - 1]) / 2\n\
    \    } else {\n        return Double(sorted[count / 2])\n    }", "    let n =\
    \ l.count\n    let mid = n / 2\n    return (n & 1) == 0 ? (Double(l[mid - 1])\
    \ + Double(l[mid])) / 2 : Double(l[mid])", "    let count = l.count\n    let sorted\
    \ = l.sorted()\n    if count % 2 == 0 {\n        return Double(sorted[count /\
    \ 2] + sorted[count / 2 - 1]) / 2\n    } else {\n        return Double(sorted[count\
    \ / 2])\n    }", "    if l.count % 2 == 0 {\n        let index1 = l.count / 2\n\
    \        let index2 = index1 - 1\n        return Double(l[index1] + l[index2])\
    \ / 2\n    } else {\n        let index = l.count / 2\n        return Double(l[index])\n\
    \    }", "    // TODO: implement your solution here\n    var low = l.sorted()\n\
    \    return Double(low[low.count/2])", "    // TODO: Do some coding here!\n  \
    \  return 0.0", "    var l = l.sorted()\n    var mid = l.count / 2\n    if l.count\
    \ % 2 == 0 {\n        return Double(l[mid] + l[mid - 1]) / 2\n    } else {\n \
    \       return Double(l[mid])\n    }", "    if l.count == 0 {\n        return\
    \ 0\n    } else if l.count % 2 == 0 {\n        let a = l[l.count / 2]\n      \
    \  let b = l[l.count / 2 - 1]\n        return Double(a + b) / 2\n    } else {\n\
    \        return Double(l[l.count / 2])\n    }", "    var l = l\n    l.sort()\n\
    \    if l.count % 2 == 0 {\n        return Double(l[l.count / 2] + l[l.count /\
    \ 2 - 1]) / 2\n    } else {\n        return Double(l[l.count / 2])\n    }", " \
    \   if l.count % 2 == 0 {\n        return Double(l[l.count / 2] + l[l.count /\
    \ 2 - 1]) / 2\n    } else {\n        return Double(l[l.count / 2])\n    }", " \
    \ if l.count == 0 {\n    return 0\n  }\n  if l.count % 2 == 0 {\n    return (Double(l[l.count\
    \ / 2]) + Double(l[l.count / 2 - 1])) / 2\n  } else {\n    return Double(l[l.count\
    \ / 2])\n  }", "    let sortedl = l.sorted()\n    if sortedl.count % 2 == 0 {\n\
    \        let mid = sortedl.count / 2\n        return Double(sortedl[mid - 1] +\
    \ sortedl[mid]) / 2\n    } else {\n        return Double(sortedl[sortedl.count\
    \ / 2])\n    }", "    let sorted = l.sorted()\n    let mid = l.count / 2\n   \
    \ if l.count % 2 == 0 {\n        return Double(sorted[mid] + sorted[mid - 1])\
    \ / 2\n    } else {\n        return Double(sorted[mid])\n    }", "    if l.count\
    \ == 0 {\n        return 0\n    } else if l.count % 2 == 0 {\n        let m =\
    \ l.count / 2\n        return Double(l[m - 1] + l[m]) / 2\n    } else {\n    \
    \    return Double(l[l.count / 2])\n    }", "  let sorted = l.sorted()\n  let\
    \ mid = sorted.count / 2\n  if sorted.count % 2 == 0 {\n    return Double(sorted[mid]\
    \ + sorted[mid-1]) / 2\n  } else {\n    return Double(sorted[mid])\n  }", "  \
    \  if l.count == 0 {\n        return 0\n    }\n    let sorted = l.sorted()\n \
    \   if sorted.count % 2 == 0 {\n        return Double(sorted[sorted.count / 2]\
    \ + sorted[sorted.count / 2 - 1]) / 2\n    } else {\n        return Double(sorted[sorted.count\
    \ / 2])\n    }", "    let m = l.count/2\n    if l.count % 2 == 0 {\n        return\
    \ (Double(l[m-1]) + Double(l[m]))/2\n    } else {\n        return Double(l[m])\n\
    \    }", "    let sortedList = l.sorted()\n    let half = sortedList.count / 2\n\
    \    if sortedList.count % 2 == 0 {\n        return Double(sortedList[half - 1]\
    \ + sortedList[half]) / 2\n    } else {\n        return Double(sortedList[half])\n\
    \    }", "    let l = l.sorted()\n    if l.count % 2 == 0 {\n        let left\
    \ = Double(l[l.count / 2 - 1])\n        let right = Double(l[l.count / 2])\n \
    \       return (left + right) / 2\n    } else {\n        return Double(l[l.count\
    \ / 2])\n    }", '    return average(l: (l.sorted()[l.count / 2] + l.sorted()[(l.count
    - 1) / 2]))', "    \n    var l = l\n    sort(&l)\n    let n = l.count\n    let\
    \ half = n/2\n    if n%2 == 0 {\n        return Double(l[half-1] + l[half])/2\n\
    \    } else {\n        return Double(l[half])\n    }", "    let l = l.sorted()\n\
    \    let count = l.count\n    let middle = l.count / 2\n    let median: Double\n\
    \    if count % 2 == 0 {\n        median = Double(l[middle - 1] + l[middle]) /\
    \ 2\n    } else {\n        median = Double(l[middle])\n    }\n    return median",
  "    let n = l.count\n    if n % 2 == 0 {\n        return (Double(l[n / 2]) + Double(l[n\
    \ / 2 - 1])) / 2\n    } else {\n        return Double(l[n / 2])\n    }", "   \
    \ let sorted = l.sorted()\n    if sorted.count % 2 == 0 {\n        return Double(sorted[sorted.count\
    \ / 2] + sorted[sorted.count / 2 - 1]) / 2\n    } else {\n        return Double(sorted[sorted.count\
    \ / 2])\n    }", "    let m = l.count / 2\n    let array = l.sorted()\n    if\
    \ l.count % 2 == 0 {\n        return Double(array[m] + array[m-1]) / 2\n    }\
    \ else {\n        return Double(array[m])\n    }", "    let sortedL = l.sorted()\n\
    \    if sortedL.count % 2 == 0 {\n        return Double(sortedL[sortedL.count\
    \ / 2] + sortedL[sortedL.count / 2 - 1]) / 2\n    } else {\n        return Double(sortedL[sortedL.count\
    \ / 2])\n    }", "    let sortedList = quickSort(l: l)\n    let last = sortedList.count\n\
    \    let first = 0\n    if last % 2 == 0 {\n        let mid = (last + first) /\
    \ 2\n        return Double(sortedList[mid] + sortedList[mid - 1]) / 2\n    } else\
    \ {\n        let mid = (last + first) / 2\n        return Double(sortedList[mid])\n\
    \    }", '    return 0.0', '    return Double(l.sorted()[l.count / 2])', '    return
    Double(medianInt(l: l))', "    let sorted = l.sorted()\n    let mid = sorted.count\
    \ / 2\n    if sorted.count % 2 == 0 {\n        return Double(sorted[mid] + sorted[mid-1])\
    \ / 2\n    } else {\n        return Double(sorted[mid])\n    }", "    let n =\
    \ l.count\n    let m = n/2\n    let sorted = l.sorted()\n    if n % 2 == 0 {\n\
    \        return Double(sorted[m] + sorted[m-1]) / 2\n    } else {\n        return\
    \ Double(sorted[m])\n    }", "    \n    let len = l.count\n    let mid = len /\
    \ 2\n    if len % 2 == 0 {\n        return Double(l[mid - 1] + l[mid]) / 2\n \
    \   } else {\n        return Double(l[mid])\n    }", "    let sorted = l.sorted()\n\
    \    let middle = sorted.count / 2\n    if sorted.count % 2 == 0 {\n        return\
    \ Double(sorted[middle] + sorted[middle - 1]) / 2\n    } else {\n        return\
    \ Double(sorted[middle])\n    }", "    let s = l.sorted()\n    let n = s.count\n\
    \    if n % 2 == 0 {\n        return Double(s[n / 2] + s[n / 2 - 1]) / 2\n   \
    \ } else {\n        return Double(s[n / 2])\n    }", "    if l.count == 0 {\n\
    \        return 0\n    }\n    let sorted = l.sorted()\n    let middle = sorted.count\
    \ / 2\n    if sorted.count % 2 == 0 {\n        return Double(sorted[middle] +\
    \ sorted[middle - 1]) / 2\n    } else {\n        return Double(sorted[middle])\n\
    \    }", "    let sorted = l.sorted()\n    let count = sorted.count\n    if (count\
    \ % 2 == 0) {\n        return Double(sorted[count / 2] + sorted[count / 2 - 1])\
    \ / 2\n    } else {\n        return Double(sorted[count / 2])\n    }", "    let\
    \ sorted = l.sorted()\n    let mid = sorted.count / 2\n    if sorted.count % 2\
    \ == 0 {\n        return Double(sorted[mid] + sorted[mid - 1]) / 2\n    } else\
    \ {\n        return Double(sorted[mid])\n    }", "    let ls = l.sorted()\n  \
    \  if ls.count % 2 == 0 {\n        return Double(ls[ls.count / 2] + ls[ls.count\
    \ / 2 - 1]) / 2\n    } else {\n        return Double(ls[ls.count / 2])\n    }",
  "    let sortedArray = l.sorted()\n    let mid = sortedArray.count / 2\n    if sortedArray.count\
    \ % 2 == 0 {\n        let lowMiddle = sortedArray[mid]\n        let highMiddle\
    \ = sortedArray[mid - 1]\n        return Double(lowMiddle + highMiddle) / 2\n\
    \    } else {\n        return Double(sortedArray[mid])\n    }", "    var l = l\n\
    \    l.sort()\n    let mid = l.count / 2\n    if l.count % 2 == 0 {\n        return\
    \ Double(l[mid] + l[mid - 1]) / 2\n    } else {\n        return Double(l[mid])\n\
    \    }", "    if l.count % 2 == 0 {\n        let a = l[l.count / 2]\n        let\
    \ b = l[l.count / 2 - 1]\n        return Double(a + b) / 2\n    } else {\n   \
    \     return Double(l[l.count / 2])\n    }", '    return 0.0', "    let len =\
    \ l.count\n    let sorted = l.sorted()\n    if len % 2 == 0 {\n        return\
    \ Double(sorted[len / 2] + sorted[len / 2 - 1]) / 2\n    } else {\n        return\
    \ Double(sorted[len / 2])\n    }", "  if l.count % 2 == 0 {\n    let mid = l.count\
    \ / 2\n    return Double(l[mid] + l[mid - 1]) / 2\n  } else {\n    return Double(l[l.count\
    \ / 2])\n  }", "    if l.count % 2 == 0 {\n        return (Double(l[l.count /\
    \ 2]) + Double(l[l.count / 2 - 1])) / 2\n    } else {\n        return Double(l[l.count\
    \ / 2])\n    }", '    return median(l: l.toDouble)', "    // TODO: Implement\n\
    \    var n = l.count\n    var sortedArray = l.sorted()\n    var median = 0.0\n\
    \    if n % 2 == 0 {\n        median = Double(sortedArray[n/2] + sortedArray[n/2-1])/2\n\
    \    }\n    else {\n        median = Double(sortedArray[n/2])\n    }\n    return\
    \ median", "    let sorted = l.sorted()\n    let middle = sorted.count / 2\n \
    \   if sorted.count % 2 == 0 {\n        return Double(sorted[middle - 1] + sorted[middle])\
    \ / 2\n    } else {\n        return Double(sorted[middle])\n    }", "    let sortedArray\
    \ = l.sorted(by: <)\n    if sortedArray.count % 2 == 0 {\n        return Double(sortedArray[sortedArray.count\
    \ / 2] + sortedArray[sortedArray.count / 2 - 1]) / 2\n    } else {\n        return\
    \ Double(sortedArray[sortedArray.count / 2])\n    }", "    assert(l.count > 0)\n\
    \    if l.count % 2 == 0 {\n        return Double(l[l.count / 2] + l[l.count /\
    \ 2 - 1]) / 2\n    } else {\n        return Double(l[l.count / 2])\n    }", " \
    \   let sorted = l.sorted()\n    if sorted.count % 2 == 0 {\n        let middle\
    \ = sorted.count / 2\n        return Double(sorted[middle - 1] + sorted[middle])\
    \ / 2\n    } else {\n        return Double(sorted[sorted.count / 2])\n    }",
  "    var temp = l\n    temp.sort()\n    if temp.count % 2 == 0 {\n        return\
    \ Double(temp[temp.count / 2] + temp[temp.count / 2 - 1]) / 2\n    } else {\n\
    \        return Double(temp[temp.count / 2])\n    }", '    return 0.0', "    var\
    \ l = l\n    l.sort()\n    if l.count % 2 == 0 {\n        return Double(l[l.count\
    \ / 2] + l[l.count / 2 - 1]) / 2\n    } else {\n        return Double(l[l.count\
    \ / 2])\n    }", "    // TODO: implement me\n    let n = l.count\n    if n ==\
    \ 0 {\n        return Double.nan\n    }\n    if n % 2 == 0 {\n        let m1 =\
    \ l[n/2]\n        let m2 = l[n/2-1]\n        return Double(m1+m2)/2\n    } else\
    \ {\n        return Double(l[n/2])\n    }", "    if l.count % 2 == 0 {\n     \
    \   let x = l.count / 2\n        return Double(l[x] + l[x-1]) / 2\n    } else\
    \ {\n        return Double(l[l.count / 2])\n    }", "  let sortedList = l.sorted()\n\
    \  let mid = l.count / 2\n  if l.count % 2 == 0 {\n    let avg = Double(sortedList[mid]\
    \ + sortedList[mid-1])/2\n    return avg\n  } else {\n    return Double(sortedList[mid])\n\
    \  }", "    let middle = l.count / 2\n    if l.count % 2 == 0 {\n        return\
    \ Double(l[middle - 1] + l[middle]) / 2\n    } else {\n        return Double(l[middle])\n\
    \    }", "    let s = l.sorted()\n    if l.count % 2 == 0 {\n        let m = l.count\
    \ / 2\n        return Double(s[m] + s[m - 1]) / 2\n    } else {\n        return\
    \ Double(s[l.count / 2])\n    }", "    let sorted = l.sorted()\n    let n = sorted.count\n\
    \    if n % 2 == 0 {\n        let middle = n / 2\n        return Double(sorted[middle\
    \ - 1] + sorted[middle]) / 2\n    } else {\n        return Double(sorted[n / 2])\n\
    \    }", "    var mid = l.count / 2\n    return l.count % 2 == 0 ? Double(l[mid]\
    \ + l[mid - 1]) / 2 : Double(l[mid])", "    let list = l.sorted()\n    if l.count\
    \ == 0 {\n        return 0\n    } else if l.count % 2 == 0 {\n        return Double(list[list.count\
    \ / 2] + list[list.count / 2 - 1]) / 2\n    } else {\n        return Double(list[list.count\
    \ / 2])\n    }", "    let arr = l.sorted()\n    if arr.count % 2 == 0 {\n    \
    \    return Double(arr[arr.count / 2] + arr[arr.count / 2 - 1]) / 2\n    } else\
    \ {\n        return Double(arr[arr.count / 2])\n    }", '    return 0.0', "  \
    \  guard l.count > 0 else {\n        return 0\n    }\n    var tl = l\n    tl.sort()\n\
    \    if tl.count % 2 == 0 {\n        return Double(tl[tl.count / 2] + tl[tl.count\
    \ / 2 - 1]) / 2\n    } else {\n        return Double(tl[tl.count / 2])\n    }",
  "    assert(l.count > 0)\n    let list = mergeSort(l: l)\n    let length = list.count\n\
    \    if length % 2 == 0 {\n        return Double(list[length / 2] + list[length\
    \ / 2 - 1]) / 2\n    } else {\n        return Double(list[length / 2])\n    }",
  "    var l2 = l\n    l2.sort()\n    if l2.count % 2 == 0 {\n        return Double(l2[l2.count\
    \ / 2] + l2[l2.count / 2 - 1]) / 2\n    } else {\n        return Double(l2[l2.count\
    \ / 2])\n    }", "    let sorted = l.sorted()\n    let count = sorted.count\n\
    \    guard count > 0 else { return 0 }\n    if count % 2 == 0 {\n        return\
    \ Double(sorted[count / 2] + sorted[count / 2 - 1]) / 2\n    } else {\n      \
    \  return Double(sorted[count / 2])\n    }", "    let sortedL = l.sorted()\n \
    \   let middle = sortedL.count / 2\n    if sortedL.count % 2 == 0 {\n        return\
    \ Double(sortedL[middle] + sortedL[middle - 1]) / 2\n    } else {\n        return\
    \ Double(sortedL[middle])\n    }", "    let sortedL = l.sorted()\n    let length\
    \ = sortedL.count\n    let middle = length / 2\n    if length % 2 == 0 {\n   \
    \     return Double(sortedL[middle - 1] + sortedL[middle]) / 2\n    } else {\n\
    \        return Double(sortedL[middle])\n    }", '    return (l.sorted()[l.count
    / 2] + l.sorted()[(l.count / 2) - 1]) / 2.0', "    let sortedList = l.sorted()\n\
    \    let n = sortedList.count\n    if n % 2 == 0 {\n        return Double(sortedList[n\
    \ / 2] + sortedList[n / 2 - 1]) / 2\n    } else {\n        return Double(sortedList[n\
    \ / 2])\n    }", "    let sortedList = l.sorted()\n    if sortedList.count % 2\
    \ == 0 {\n        return Double(sortedList[sortedList.count / 2] + sortedList[sortedList.count\
    \ / 2 - 1]) / 2\n    } else {\n        return Double(sortedList[sortedList.count\
    \ / 2])\n    }", "    if l.count % 2 == 0 {\n        return Double(l[l.count /\
    \ 2] + l[l.count / 2 - 1]) / 2\n    } else {\n        return Double(l[l.count\
    \ / 2])\n    }", '    return 0.0', "    var newList = l\n    newList.sort()\n\
    \    return Double(newList[newList.count / 2])", "    let sortedL = l.sorted()\n\
    \    let mid = sortedL.count / 2\n    if (sortedL.count % 2 == 0) {\n        return\
    \ Double(sortedL[mid] + sortedL[mid - 1]) / 2\n    } else {\n        return Double(sortedL[mid])\n\
    \    }", "    var ll = l\n    ll.sort()\n    let size = ll.count\n    if size\
    \ % 2 == 0 {\n        return Double(ll[size / 2] + ll[size / 2 - 1]) / 2\n   \
    \ } else {\n        return Double(ll[size / 2])\n    }", "    let size = l.count\n\
    \    let half = size / 2\n    let sorted = l.sorted()\n    if size % 2 == 0 {\n\
    \        return Double(sorted[half] + sorted[half - 1]) / 2\n    } else {\n  \
    \      return Double(sorted[half])\n    }", "    let sortedList = l.sorted()\n\
    \    var median = 0.0\n    let count = sortedList.count\n    if count == 0 {\n\
    \        return 0.0\n    }\n    if count % 2 == 0 {\n        median = Double(sortedList[count\
    \ / 2] + sortedList[count / 2 - 1]) / 2\n    } else {\n        median = Double(sortedList[count\
    \ / 2])\n    }\n    return median", '    return (Double(l.sorted()[(l.count -
    1) / 2]) + Double(l.sorted()[l.count / 2])) / 2', '    return Double(sorted(l)[l.count
    / 2])', '    return -1', "    let sorted = l.sorted()\n    return Double(sorted[sorted.count\
    \ / 2] + sorted[(sorted.count - 1) / 2]) / 2", "    if l.count % 2 == 0 {\n  \
    \      let left = l[l.count / 2 - 1]\n        let right = l[l.count / 2]\n   \
    \     return Double(left + right) / 2\n    } else {\n        return Double(l[l.count\
    \ / 2])\n    }", "    var mid = (l.count / 2) - 1\n    if l.count % 2 == 0 {\n\
    \        return Double(l[mid] + l[mid + 1]) / 2\n    } else {\n        return\
    \ Double(l[mid])\n    }", "    let sorted = insertionSort(l: l)\n    let length\
    \ = sorted.count\n    if length % 2 == 0 {\n        return Double(sorted[length\
    \ / 2] + sorted[length / 2 - 1]) / 2\n    } else {\n        return Double(sorted[length\
    \ / 2])\n    }", "    if l.count % 2 == 0 {\n        return Double(l[l.count /\
    \ 2] + l[l.count / 2 - 1]) / 2\n    } else {\n        return Double(l[l.count\
    \ / 2])\n    }", "    var values = l\n    values.sort()\n    let len = values.count\n\
    \    if len == 0 {\n        return 0\n    }\n    if len % 2 == 0 {\n        let\
    \ evenMedian = (values[len / 2] + values[len / 2 - 1]) / 2\n        return Double(evenMedian)\n\
    \    } else {\n        return Double(values[len / 2])\n    }", "    let len =\
    \ l.count\n    let middle = len / 2\n    if len % 2 == 0 {\n        return Double(l[middle]\
    \ + l[middle - 1]) / 2\n    } else {\n        return Double(l[middle])\n    }",
  '    return Double(l.sorted()[l.count / 2])', "    let sorted = l.sorted()\n   \
    \ let count = sorted.count\n    let middle = count / 2\n    if count % 2 == 0\
    \ {\n        return Double(sorted[middle - 1] + sorted[middle]) / 2\n    } else\
    \ {\n        return Double(sorted[middle])\n    }", "    // FIXME: implement...\n\
    \    var total : Int = 0\n    var ave : Double = 0.0\n    for i in l {\n     \
    \   total += i\n    }\n    ave = Double(total)/Double(l.count)\n    return ave",
  "    assert(l.count > 0)\n    let sorted = l.sorted()\n    let mid = l.count / 2\n\
    \    if (l.count % 2 == 0) {\n        return Double(sorted[mid] + sorted[mid-1])\
    \ / 2\n    } else {\n        return Double(sorted[mid])\n    }", "    var temp\
    \ = l\n    temp.sort()\n    if temp.count % 2 == 0 {\n        return Double(temp[temp.count\
    \ / 2] + temp[temp.count / 2 - 1]) / 2\n    } else {\n        return Double(temp[temp.count\
    \ / 2])\n    }"]
stop_tokens:
- "\n}"
