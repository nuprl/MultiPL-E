name: HumanEval_151_double_the_difference
language: swift
prompt: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
  /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
  /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
  \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
  \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty, return\
  \ 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(double_the_difference(lst: [] as [Double])\
  \ == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
  \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
  \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
  \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
  \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
completions: ['    return 0', '    return 0', "    // YOUR CODE HERE\n    var sum:\
    \ Int = 0\n    for value in lst {\n        if (value.truncatingRemainder(dividingBy:\
    \ 2) != 0 || value == 0) && value > 0 {\n            sum += Int(value) * Int(value)\n\
    \        }\n    }\n    return sum", '    return 0', "    var doubleTheDifference\
    \ = 0\n    for number in lst {\n        if number.truncatingRemainder(dividingBy:\
    \ 2) == 1 {\n            doubleTheDifference += Int(pow(number, 2))\n        }\n\
    \    }\n    return doubleTheDifference", "    // YOUR CODE HERE\n    return 0",
  "    var ret = 0\n    for num in lst {\n        if num > 0 && num == Double(Int(num))\
    \ {\n            ret += Int(num*num)\n        }\n    }\n    return ret", "   \
    \ if lst.isEmpty {\n        return 0\n    } else {\n        var lst = lst\n  \
    \      var lst2: [Double] = []\n        for num in lst {\n            if num >=\
    \ 0 && Double(Int(num)) == num {\n                lst2.append(num)\n         \
    \   }\n        }\n        lst = lst2\n        var lst3: [Double] = []\n      \
    \  for num in lst {\n            if Double(Int(num)) % 2 == 1 {\n            \
    \    lst3.append(num)\n            }\n        }\n        lst = lst3\n        if\
    \ lst.isEmpty {\n            return 0\n        } else {\n            var sum =\
    \ 0\n            for num in lst {\n                sum += Int(num * num)\n   \
    \         }\n            return sum\n        }\n    }", "    // YOUR CODE HERE\n\
    \    var result = 0\n    for i in lst {\n        if i >= 0 && i.truncatingRemainder(dividingBy:\
    \ 2) == 1 {\n            result += Int(i * i)\n        }\n    }\n    return result",
  '    return Int(lst.filter({$0 % 2 == 1}).map({$0 * $0}).reduce(0, +))', "    var\
    \ result = 0\n    for i in lst {\n        if i > 0 && i.truncatingRemainder(dividingBy:\
    \ 1) == 0 {\n            result += Int(pow(i, 2))\n        }\n    }\n    return\
    \ result", "    // YOUR CODE HERE\n    return 0", '    return 0', "    var sumOfOddSquares\
    \ = 0\n    for number in lst {\n        if (number > 0 && number.truncatingRemainder(dividingBy:\
    \ 1) == 0 && number % 2 != 0) {\n            sumOfOddSquares += Int(pow(number,\
    \ 2))\n        }\n    }\n    return sumOfOddSquares", "    var sum: Int = 0\n\
    \    for number in lst {\n        if Int(number) == number && number >= 0 {\n\
    \            sum += Int(number) * Int(number)\n        }\n    }\n    return sum",
  "    var sum = 0\n    for i in lst {\n        if i.truncatingRemainder(dividingBy:\
    \ 2) == 1 && i >= 0 {\n            sum += Int(i * i)\n        }\n    }\n    return\
    \ sum", "    var sum: Int = 0\n    for number in lst {\n        if !(number.truncatingRemainder(dividingBy:\
    \ 2) == 0) && (number > 0) {\n            sum += Int(pow(number, 2))\n       \
    \ }\n    }\n    return sum", '    return 0', "    // Your solution goes here\n\
    \    var sum = 0\n    for n in lst {\n        if n > 0 && n.truncatingRemainder(dividingBy:\
    \ 1) == 0 {\n            if n % 2 == 1 {\n                sum += Int(n * n)\n\
    \            }\n        }\n    }\n    return sum", '    return 0', "    var sum\
    \ = 0\n    for number in lst {\n        if number.truncatingRemainder(dividingBy:\
    \ 2) == 1 {\n            sum += Int(pow(number, 2))\n        }\n    }\n    return\
    \ sum", "    //YOUR CODE HERE\n    var res = 0\n    for item in lst {\n      \
    \  if (Int(item) % 2 == 1 && item >= 0) {\n            res += Int(item * item)\n\
    \        }\n    }\n    return res", "    let numberOfNegative = lst.filter{$0\
    \ < 0}.count\n    let numberOfNumbers = lst.count - numberOfNegative\n    let\
    \ sum = lst.filter{$0.isInt}.reduce(0, +)\n    let result = sum * sum\n    return\
    \ numberOfNumbers == 0 ? 0 : result", "    var sum = 0\n    for item in lst {\n\
    \        if item.isInteger && item > 0 && item % 2 != 0 {\n            sum +=\
    \ Int(item * item)\n        }\n    }\n    return sum", "    let arr = lst.filter\
    \ {$0 >= 0 && floor($0) == $0 && $0 % 2 != 0}\n    if arr.count == 0 {\n     \
    \   return 0\n    }\n    return Int(arr.map {$0 * $0}.reduce(0, +) * 2)", '    return
    1', "    // Your code here!\n    var result = 0\n    for index in lst {\n    \
    \    if (index.isInteger) && (index > 0) && (index % 2 == 1) {\n            result\
    \ += Int(index) * Int(index)\n        }\n    }\n    return result", '    return
    0', "    var sum = 0\n    for number in lst {\n        if number > 0 && number.truncatingRemainder(dividingBy:\
    \ 1) == 0 {\n            sum += Int(pow(number, 2))\n        }\n    }\n    return\
    \ sum", "    var squares: [Double] = []\n    for num in lst {\n        if num\
    \ > 0 && num.truncatingRemainder(dividingBy: 1) == 0 {\n            squares.append(num\
    \ * num)\n        }\n    }\n    return Int(squares.reduce(0, +))", "    // YOUR\
    \ CODE HERE\n    return 0", "    var nums: [Double] = []\n    for num in lst {\n\
    \        if num >= 0 && num.truncatingRemainder(dividingBy: 1) == 0 {\n      \
    \      nums.append(num)\n        }\n    }\n    var total = 0\n    for num in nums\
    \ {\n        if num % 2 != 0 {\n            total += Int(num * num)\n        }\n\
    \    }\n    return total", '    return lst.filter {$0.truncatingRemainder(dividingBy:
    2) == 1}.reduce(0) {(result, element) in result + Int(element * element)}', " \
    \   // YOUR CODE HERE\n    return 0", "    var sum: Int = 0\n    for num in lst\
    \ {\n        if num >= 0 && floor(num) == num && num.truncatingRemainder(dividingBy:\
    \ 2) != 0 {\n            sum += Int(pow(num, 2))\n        }\n    }\n    return\
    \ sum", "    var output = 0\n    for item in lst {\n        if item < 0 {\n  \
    \          continue\n        }\n        if floor(item) != item {\n           \
    \ continue\n        }\n        let c = Int(item)\n        if c % 2 == 1 {\n  \
    \          output += c * c\n        }\n    }\n    return output", "    // your\
    \ code here\n    return 0", "    if lst.isEmpty {\n        return 0\n    } else\
    \ {\n        var sum = 0\n        for num in lst {\n            if num % 2 !=\
    \ 0 {\n                sum += Int(num * num)\n            }\n        }\n     \
    \   return sum\n    }", '    return 0', "    // YOUR CODE HERE\n    return 0",
  "    if (lst.count > 0) {\n        var mylist = [Double]()\n        for i in lst\
    \ {\n            if (i >= 0 && i % 2 != 0) {\n                mylist.append(i)\n\
    \            }\n        }\n        var sum = 0.0\n        for i in mylist {\n\
    \            sum += i\n        }\n        return Int(sum * 2)\n    }\n    return\
    \ 0", "    \n    var s: Double = 0\n    for el in lst {\n        if el > 0 {\n\
    \            if el == floor(el) {\n                if el % 2 == 1 {\n        \
    \            s += el * el\n                }\n            }\n        }\n    }\n\
    \    return Int(s * 2)", '    return 0', "    var sum = 0\n    for item in lst\
    \ {\n        if (item.isInteger) && (item > 0) && (item % 2 != 0) {\n        \
    \    sum += Int(item * item)\n        }\n    }\n    return sum", "    // Your\
    \ code here\n    return 0", "    var sum = 0\n    for num in lst {\n        if\
    \ num > 0 && num.isInteger && num % 2 != 0 {\n            sum += Int(num) * Int(num)\n\
    \        }\n    }\n    return sum", "    var result: Int = 0\n    for item in\
    \ lst {\n        if item.truncatingRemainder(dividingBy: 2) == 1 && item >= 0{\n\
    \            result += Int(item*item)\n        }\n    }\n    return result", " \
    \   var result = 0\n    for number in lst {\n        if number > 0 && (number\
    \ == floor(number)) {\n            result += Int(pow(number, 2))\n        }\n\
    \    }\n    return result", '    return -1', "    // Your code here!\n    var\
    \ odd_squares = 0\n    var even_squares = 0\n    for item in lst {\n        if\
    \ (item % 2 != 0 && item >= 0) {\n            odd_squares += Int(item * item)\n\
    \        }\n        else if (item % 2 == 0 && item >= 0) {\n            even_squares\
    \ += Int(item * item)\n        }\n    }\n    return odd_squares - even_squares",
  '    return 0', "    // REPLACE THIS LINE WITH YOUR CODE\n    return 0", "    //\
    \ YOUR CODE HERE\n    return 0", "    var total = 0\n    for num in lst {\n  \
    \      if num.isInteger == true && num >= 0 && num.isOdd == true {\n         \
    \   total += Int(num * num)\n        }\n    }\n    return total", '    return
    0', '    return 0', "    var newArr: [Double] = []\n    for i in lst {\n     \
    \   if i < 0 {\n            newArr.append(0)\n        } else if i % 2 == 0 {\n\
    \            newArr.append(0)\n        } else {\n            newArr.append(i)\n\
    \        }\n    }\n    return Int(newArr.reduce(0, +))", '    return lst.filter
    { $0 >= 0 }.filter { $0.truncatingRemainder(dividingBy: 1) == 0 }.map { $0 * $0
    }.reduce(0, +)', "    var sum = 0\n    for num in lst {\n        if num.isInteger\
    \ && num > 0 {\n            sum += Int(num * num)\n        }\n    }\n    return\
    \ sum", "    var sum = 0\n    for i in lst {\n        if i > 0 && i.truncatingRemainder(dividingBy:\
    \ 1) == 0 && i.truncatingRemainder(dividingBy: 2) != 0 {\n            sum += Int(i\
    \ * i)\n        }\n    }\n    return sum", "  var sum = 0\n  for i in lst {\n\
    \    if i.truncatingRemainder(dividingBy: 2) == 1 {\n      sum += Int(i * i)\n\
    \    }\n  }\n  return sum", "    var sum = 0\n    for num in lst {\n        if\
    \ num > 0 && ceil(num) == num {\n            if num % 2 == 1 {\n             \
    \   sum += Int(pow(num, 2))\n            }\n        }\n    }\n    return sum",
  "    var sum = 0\n    var i = 0\n    while i < lst.count {\n        if lst[i] >=\
    \ 0 && (lst[i] % 2 == 1) {\n            sum += Int(lst[i] * lst[i])\n        }\n\
    \        i += 1\n    }\n    return sum", "    var number = 0\n    for item in\
    \ lst {\n        if Double(item) == item, item > 0 {\n            number += Int(item\
    \ * item)\n        }\n    }\n    return number", '    return 0', "    var sum\
    \ = 0\n    for number in lst {\n        if number.truncatingRemainder(dividingBy:\
    \ 2) == 1 && number > 0 {\n            sum += Int(pow(number, 2))\n        }\n\
    \    }\n    return sum", "    var newArr: [Double] = []\n    var doubleSum: Double\
    \ = 0\n    var intSum: Int = 0\n    for num in lst {\n        if num >= 0 && num\
    \ % 1 == 0 {\n            newArr.append(num)\n        }\n    }\n    for num in\
    \ newArr {\n        if num % 2 != 0 {\n            doubleSum += num * num\n  \
    \      }\n    }\n    intSum = Int(doubleSum)\n    return intSum", "    if lst.isEmpty\
    \ {\n        return 0\n    }\n    var ret = 0\n    for i in lst {\n        if\
    \ let i = Int(exactly: i) {\n            if i < 0 {\n                continue\n\
    \            }\n            if i % 2 == 1 {\n                ret += i * i\n  \
    \          }\n        }\n    }\n    return ret", "    let sumOfSquares = lst.filter{$0\
    \ % 2 != 0 && $0 >= 0}.map{Int($0 * $0)}.reduce(0, +)\n    return sumOfSquares\
    \ * 2", "    //YOUR CODE HERE\n    return 0", "    // Put your code here!\n  \
    \  var sum = 0\n    for i in lst {\n        if !(i % 2 == 0) && i > 0 {\n    \
    \        sum += Int(i*i)\n        }\n    }\n    return sum", "    var sum = 0\n\
    \    for n in lst {\n        if(n < 0) {\n            continue\n        }\n  \
    \      if(n - floor(n) != 0) {\n            continue\n        }\n        if(n\
    \ % 2 == 0) {\n            continue\n        }\n        sum += Int(n * n)\n  \
    \  }\n    return sum", '    return sum_of_squares_of_odds(arr: lst) * 2', '    return
    0', "    var sum = 0\n    for i in lst {\n        if Int(i) % 2 != 0 && i > 0\
    \ {\n            sum += Int(i) * Int(i)\n        }\n    }\n    return sum", " \
    \   // YOUR CODE HERE\n    return 0", "    // Write your code below.\n    return\
    \ 0", "    if lst.isEmpty {\n        return 0\n    }\n    var result = 0\n   \
    \ for num in lst {\n        if num.truncatingRemainder(dividingBy: 2) == 1 {\n\
    \            result += Int(num) * Int(num)\n        }\n    }\n    return result",
  "    let isInt = lst.filter { $0 % 1 == 0 && $0 >= 0 }\n    let squared = isInt.map\
    \ { $0 * $0 }\n    let sum = squared.reduce(0, +)\n    return sum", "    var ans\
    \ = 0\n    for x in lst {\n        if (Int(x) != nil) && (x > 0) && (Int(x) %\
    \ 2 != 0) {\n            ans += Int(x * x)\n        }\n    }\n    return ans",
  "    var result = 0\n    for item in lst {\n        if item > 0 && floor(item) ==\
    \ item {\n            result += Int(item * item)\n        }\n    }\n    return\
    \ result", '    return 0', "    // TODO: Implement this function!\n    return\
    \ 0", "  // YOUR CODE HERE\n  var result = 0\n  for num in lst {\n    if num %\
    \ 2 == 1 && (num.truncatingRemainder(dividingBy: 1) == 0) {\n      result += Int(num)\
    \ * Int(num)\n    }\n  }\n  return result", "    var sum = 0\n    for element\
    \ in lst {\n        if element.truncatingRemainder(dividingBy: 2) == 1.0 && element\
    \ > 0 {\n            sum += Int(element * element)\n        }\n    }\n    return\
    \ sum", "    // WRITE YOUR CODE HERE\n    return 0", '    return 0', '    return
    0', "    var array = [Int]()\n    var sum = 0\n    for number in lst {\n     \
    \   if number.truncatingRemainder(dividingBy: 1) == 0 && number > 0 {\n      \
    \      array.append(Int(number))\n        }\n    }\n    for num in array {\n \
    \       if num % 2 != 0 {\n            sum += num * num\n        }\n    }\n  \
    \  return sum", "    // YOUR CODE HERE\n    var total = 0\n    for i in lst {\n\
    \        if (i % 2 == 1) {\n            total += Int(i*i)\n        }\n    }\n\
    \    return total", "    var newArr: [Double] = []\n    for num in lst {\n   \
    \     if (num > 0 && num.truncatingRemainder(dividingBy: 1) == 0) {\n        \
    \    newArr.append(num)\n        }\n    }\n    var sum: Double = 0\n    for num\
    \ in newArr {\n        if (num.truncatingRemainder(dividingBy: 2) != 0) {\n  \
    \          sum += num * num\n        }\n    }\n    return Int(sum)", "    // YOUR\
    \ CODE HERE\n    var sum = 0\n    for number in lst {\n        if number >= 0\
    \ && floor(number) == number && number != 0 {\n            if number % 2 == 1\
    \ {\n                sum += Int(pow(number, 2))\n            }\n        }\n  \
    \  }\n    return sum", "    // YOUR CODE HERE\n    var oddSum = 0\n    var evenSum\
    \ = 0\n    var oddArray: [Double] = []\n    var evenArray: [Double] = []\n   \
    \ var evenDifference = 0\n    var oddDifference = 0\n    var difference = 0\n\
    \    var result = 0\n    for element in lst {\n        if element % 2 == 0 {\n\
    \            evenArray.append(element)\n        } else {\n            oddArray.append(element)\n\
    \        }\n    }\n    for num in evenArray {\n        evenSum += Int(num * num)\n\
    \    }\n    for num in oddArray {\n        oddSum += Int(num * num)\n    }\n \
    \   evenDifference = evenSum - Int(evenArray.count)\n    oddDifference = oddSum\
    \ - Int(oddArray.count)\n    difference = evenDifference - oddDifference\n   \
    \ result = difference * 2\n    return result\n    ", '    return 0', "    var\
    \ nums = [Int]()\n    for num in lst {\n        if (num.truncatingRemainder(dividingBy:\
    \ 1) == 0) && (num > 0) {\n            nums.append(Int(num))\n        }\n    }\n\
    \    return nums.reduce(0, { $0 + ($1 * $1) })", "    let filteredArr = lst.filter\
    \ { (num) -> Bool in\n        num > 0 && floor(num) == num\n    }\n    let filteredArrSquared\
    \ = filteredArr.map { (num) -> Double in\n        num * num\n    }\n    let filteredArrSquaredFiltered\
    \ = filteredArrSquared.filter { (num) -> Bool in\n        num % 2 == 1\n    }\n\
    \    let sum = filteredArrSquaredFiltered.reduce(0) { (res, num) -> Double in\n\
    \        res + num\n    }\n    return Int(sum)", "    var result = 0\n    for\
    \ i in lst {\n        if i.truncatingRemainder(dividingBy: 2) == 1 {\n       \
    \     result += Int(i * i)\n        }\n    }\n    return result", "    var sum:\
    \ Int = 0\n    for i in lst {\n        if i > 0 {\n            if i.truncatingRemainder(dividingBy:\
    \ 2) != 0 {\n                sum += Int(i * i)\n            }\n        }\n   \
    \ }\n    return sum", '    return 0', '    return -1', '  return 0', "    var\
    \ sum = 0\n    for item in lst {\n        if is_int(x: item) && item >= 0 && is_odd(x:\
    \ item) {\n            sum += Int(item * item)\n        }\n    }\n    return sum",
  '    return 0', "  var filtered = lst.filter({ (element) -> Bool in\n    if element\
    \ > 0, element % 1 == 0 {\n      return true\n    }\n    return false\n  })\n\
    \  var double = filtered.filter({ (element) -> Bool in\n    if element % 2 ==\
    \ 0 {\n      return true\n    }\n    return false\n  })\n  double = double.map({\
    \ (element) -> Double in\n    return element * 2\n  })\n  if double.count == 0\
    \ {\n    return 0\n  }\n  return Int(double.reduce(0, +))", "    var square: [Double]\
    \ = []\n    var sum = 0\n    for number in lst {\n        if Int(number) == number\
    \ && number > 0 {\n            square.append(number*number)\n        }\n    }\n\
    \    for odd in square {\n        if Int(odd) % 2 != 0 {\n            sum += Int(odd)\n\
    \        }\n    }\n    return sum", "    var sum = 0\n    for i in lst {\n   \
    \     if i.truncatingRemainder(dividingBy: 2) == 1 && i > 0 {\n            sum\
    \ += Int(i * i)\n        }\n    }\n    return sum", '    return 0', "    var squareSum\
    \ = 0\n    for num in lst {\n        if num >= 0 {\n            if num % 2 !=\
    \ 0 {\n                squareSum += Int(num) * Int(num)\n            }\n     \
    \   }\n    }\n    return squareSum", "  // Your code here\n  var intList = [Int]()\n\
    \  var sum = 0\n  for num in lst {\n    if num >= 0 && num.truncatingRemainder(dividingBy:\
    \ 1) == 0 {\n      intList.append(Int(num))\n    }\n  }\n  for num in intList\
    \ {\n    if num % 2 != 0 {\n      sum += num * num\n    }\n  }\n  return sum",
  "    var sum = 0\n    for i in lst {\n        if i > 0 && (i - Double(Int(i))) ==\
    \ 0 {\n            sum += Int(i)\n        }\n    }\n    return sum * 2", '    return
    0', "    let doubles = lst.filter({ $0 >= 0 && $0.truncatingRemainder(dividingBy:\
    \ 1) == 0 }).map({ $0 * $0 }).filter({ $0 % 2 == 1 })\n    let sum = doubles.reduce(0,\
    \ +)\n    return sum * 2", '    return 0', "  var sum = 0\n  for i in lst {\n\
    \    if i >= 0 && i.truncatingRemainder(dividingBy: 1) == 0 {\n      if i % 2\
    \ != 0 {\n        sum += Int(i * i)\n      }\n    }\n  }\n  return sum", "   \
    \ var sum = 0\n    for item in lst {\n        if item >= 0 && item.isInt && item\
    \ % 2 != 0 {\n            sum += Int(item * item)\n        }\n    }\n    return\
    \ sum", "    var sum = 0\n    for num in lst {\n        let intNum = Int(num)\n\
    \        if intNum > 0 && intNum % 2 != 0 {\n            sum += intNum * intNum\n\
    \        }\n    }\n    return sum", "    var sum = 0\n    for item in lst {\n\
    \        if item >= 0, item.truncatingRemainder(dividingBy: 2) == 1 {\n      \
    \      sum += Int(item) * Int(item)\n        }\n    }\n    return sum", "    let\
    \ squares = lst.map { Double($0 * $0) }\n    return Int(squares.reduce(0, +))",
  "    // YOUR CODE HERE\n    var sum = 0\n    for number in lst {\n        if number\
    \ > 0 && number.truncatingRemainder(dividingBy: 2) != 0{\n            sum += Int(pow(number,\
    \ 2))\n        }\n    }\n    return sum", "    var result: Int = 0\n    for num\
    \ in lst {\n        if (num.isInteger && num > 0 && num % 2 != 0) {\n        \
    \    result += Int(num * num)\n        }\n    }\n    return result", "    var\
    \ oddSum = 0\n    for num in lst {\n        if (Int(num) % 2 != 0) && (num > 0)\
    \ {\n            oddSum += Int(num) * Int(num)\n        }\n    }\n    return oddSum",
  "    var sum = 0\n    for num in lst {\n        if num >= 0 && num.truncatingRemainder(dividingBy:\
    \ 1) == 0 {\n            sum += Int(pow(num, 2))\n        }\n    }\n    return\
    \ sum", '  return 0', "    var sum = 0\n    for i in lst {\n        if Int(i)\
    \ % 2 != 0 && i > 0 {\n            sum += Int(i) * Int(i)\n        }\n    }\n\
    \    return sum", "    var sum = 0\n    var index = 0\n    while index < lst.count\
    \ {\n        if lst[index] > 0 {\n            sum += Int(lst[index] * lst[index])\n\
    \        }\n        index += 1\n    }\n    return sum", "    var sum = 0\n   \
    \ for number in lst {\n        let difference = number * number\n        sum +=\
    \ Int(difference)\n    }\n    return sum", '    return 0', "    var sum = 0\n\
    \    for i in lst {\n        if (i >= 0 && i == Double(Int(i))) {\n          \
    \  sum += Int(i * i)\n        }\n    }\n    return sum", "    var result = 0\n\
    \    for i in lst {\n        if i > 0 && i % 2 == 1 {\n            result += Int(i)\
    \ * Int(i)\n        }\n    }\n    return result", "    var sum = 0\n    for n\
    \ in lst {\n        if n.isWholeNumber {\n            if n.truncatingRemainder(dividingBy:\
    \ 2) != 0 {\n                sum += Int(n * n)\n            }\n        }\n   \
    \ }\n    return sum", '    return 0', "    \n    let list = lst.map { $0.rounded()\
    \ }\n    let sum = list.filter { $0 > 0 && $0 % 2 != 0 }.map { $0 * $0 }.reduce(0,\
    \ +)\n    let multiplier = list.filter { $0 > 0 && $0 % 2 == 0 }.count * 2\n \
    \   return sum * multiplier", "    let oddNums = lst.filter { $0.truncatingRemainder(dividingBy:\
    \ 2) != 0 }\n    let sum = oddNums.reduce(0) { $0 + Int($1*$1) }\n    return sum",
  "    return Int(lst.reduce(0) {\n        if $1 < 0 || $1 % 1 != 0 {\n          \
    \  return $0\n        }\n        return $0 + $1\n    })", '    return 0', "  \
    \  var lst = lst\n    var sum = 0\n    for element in lst {\n        if element.truncatingRemainder(dividingBy:\
    \ 2) == 1 && element > 0 {\n            sum += Int(element * element)\n      \
    \  }\n    }\n    return sum", '    return 0', "    // put your code here.\n  \
    \  return 0", "    var sum = 0\n    for x in lst {\n        if x.truncatingRemainder(dividingBy:\
    \ 2) == 1 {\n            sum += Int(x*x)\n        }\n    }\n    return sum", " \
    \   // Your code here\n    return 0", "    // write your code here\n    var sum\
    \ = 0\n    for i in lst {\n        if i.truncatingRemainder(dividingBy: 2) ==\
    \ 1 && i > 0{\n            sum += Int(i*i)\n        }\n    }\n    return sum",
  "    var result: Int = 0\n    for num in lst {\n        if num > 0 {\n         \
    \   if num != floor(num) {\n                continue\n            }\n        \
    \    if num % 2 == 1 {\n                result += Int(pow(num, 2))\n         \
    \   }\n        }\n    }\n    return result", '    return 1', "    var sum = 0\n\
    \    for i in lst {\n        if i.truncatingRemainder(dividingBy: 2) == 1 {\n\
    \            sum += Int(i * i)\n        }\n    }\n    return sum", "    var oddSqSum\
    \ = 0\n    for num in lst {\n        if num.truncatingRemainder(dividingBy: 2)\
    \ == 1 && num > 0 {\n            oddSqSum += Int(num * num)\n        }\n    }\n\
    \    return oddSqSum", '    return 0', "    var counter = 0\n    for number in\
    \ lst {\n        if number.isInteger && number > 0 && number % 2 != 0 {\n    \
    \        counter += Int(number * number)\n        }\n    }\n    return counter",
  "    // Intentionally blank. Fill in the solution, then remove this comment.\n \
    \   let lst2 = lst.map{Int($0)}\n    let lst3 = lst2.filter{$0 % 2 != 0 && $0\
    \ >= 0}\n    let sum = lst3.reduce(0, +)\n    return sum * sum", '    return 0',
  "    var squaredOddValues = [Double]()\n    for num in lst {\n        if num.truncatingRemainder(dividingBy:\
    \ 2) != 0 && num > 0 && num.truncatingRemainder(dividingBy: 1) == 0 {\n      \
    \      squaredOddValues.append(num * num)\n        }\n    }\n    return Int(squaredOddValues.reduce(0,\
    \ +))", '    return 0', '    return 0', "    var sum = 0\n    for num in lst {\n\
    \        if num == 0 || num < 0 || num % 1 != 0 {\n            continue\n    \
    \    }\n        sum += Int(num * num)\n    }\n    return sum", "    // put your\
    \ code here\n    return 0", "  var double_diff = 0\n  for num in lst {\n    if\
    \ num < 0 {\n      continue\n    }\n    if num % 2 == 0 {\n      continue\n  \
    \  }\n    let diff = num - 4\n    double_diff += Int(diff * diff)\n  }\n  return\
    \ double_diff", "    var sum = 0\n    for num in lst {\n        if num > 0 &&\
    \ floor(num) == num && num % 2 != 0 {\n            sum += Int(pow(num, 2))\n \
    \       }\n    }\n    return sum", "    var sumOfOddSquares = 0\n    for i in\
    \ lst {\n        if (Int(i) % 2 != 0 && i > 0 && i.truncatingRemainder(dividingBy:\
    \ 1) == 0) {\n            sumOfOddSquares += Int(i * i)\n        }\n    }\n  \
    \  return sumOfOddSquares", '    return 0', '    return 0', "    var sum: Int\
    \ = 0\n    for i in lst {\n        if(i.truncatingRemainder(dividingBy: 2) ==\
    \ 1) {\n            sum += Int(i * i)\n        }\n    }\n    return sum", "  \
    \  let oddSquares = lst.filter({$0.truncatingRemainder(dividingBy: 2) == 1}).map({$0\
    \ * $0})\n    if (oddSquares.count > 0) {\n        return Int(oddSquares.reduce(0,\
    \ +))\n    }\n    return 0", "    return Int(lst.filter {\n        $0 >= 0 &&\
    \ floor($0) == $0\n    }.map {\n        $0 * $0\n    }.reduce(0, +))", "    var\
    \ sum = 0\n    for num in lst {\n        if Int(num) % 2 != 0 && num > 0 {\n \
    \           sum += Int(num * num)\n        }\n    }\n    return sum", '    return
    lst.filter { $0.truncatingRemainder(dividingBy: 2) == 1 }.map { Int($0 * $0) }.reduce(0,
    +)', "    var sum = 0\n    for i in lst {\n        if i > 0 && Double(i).truncatingRemainder(dividingBy:\
    \ 1) == 0 {\n            sum += Int(pow(i, 2))\n        }\n    }\n    return sum",
  "    var result: Int = 0\n    for i in lst {\n        if i.truncatingRemainder(dividingBy:\
    \ 2) == 1 && i > 0 {\n            result += Int(i * i)\n        }\n    }\n   \
    \ return result", "    var sum = 0\n    for x in lst {\n        if x >= 0 && isAnInteger(number:\
    \ x) && isOdd(number: x) {\n            sum += Int(x * x)\n        }\n    }\n\
    \    return sum", '    return 0', "    \n    var odds: [Double] = []\n    var\
    \ sum: Double = 0\n    \n    for num in lst {\n        if num % 2 != 0 {\n   \
    \         odds.append(num)\n        }\n    }\n    \n    for odd in odds {\n  \
    \      let odd_squared = odd * odd\n        sum += odd_squared\n    }\n    \n\
    \    return Int(sum)", '    return 0', "    var sum = 0\n    for i in lst {\n\
    \        if i.isPositiveInt() && i.isOdd() {\n            sum += Int(i * i)\n\
    \        }\n    }\n    return sum", '    return 0', "    var d = 0\n    for x\
    \ in lst {\n        if (x > 0 && floor(x) == x) {\n            if (x % 2 != 0)\
    \ {\n                d += Int(pow(x, 2))\n            }\n        }\n    }\n  \
    \  return d", "    \n    var sum = 0\n    for num in lst {\n        if Int(num)\
    \ % 2 != 0 && num >= 0 {\n            sum += Int(num * num)\n        }\n    }\n\
    \    return sum", "    var result = 0\n    for i in lst {\n        if i >= 0 &&\
    \ (Int(i) == i) {\n            if (Int(i) % 2 != 0) {\n                result\
    \ += Int(i) * Int(i)\n            }\n        }\n    }\n    return result", " \
    \   var total = 0\n    for element in lst {\n        if element.truncatingRemainder(dividingBy:\
    \ 2) == 1 {\n            total += Int(pow(element, 2))\n        }\n    }\n   \
    \ return total", "    var squares = [Int]()\n    for number in lst {\n       \
    \ if number.truncatingRemainder(dividingBy: 2) == 1 && number.truncatingRemainder(dividingBy:\
    \ 1) == 0 {\n            squares.append(Int(pow(number, 2)))\n        }\n    }\n\
    \    if squares.count == 0 {\n        return 0\n    }\n    return squares.reduce(0,\
    \ +)", '    return 0', "    // YOUR CODE HERE\n    return 0", "    // your code\
    \ here\n    if lst.count == 0 {\n        return 0\n    }\n    else {\n       \
    \ var total = 0\n        for element in lst {\n            if element - Double(Int(element))\
    \ == 0 {\n                if element > 0 {\n                    if Int(element)\
    \ % 2 == 1 {\n                        total += Int(element) * Int(element)\n \
    \                   }\n                }\n            }\n        }\n        return\
    \ total\n    }", "    var sum = 0\n    for item in lst {\n        if item >= 0\
    \ && item == Double(Int(item)) && item % 2 != 0 {\n            sum += Int(item\
    \ * item)\n        }\n    }\n    return sum", '    return 0', "    var sum = 0\n\
    \    for num in lst {\n        if num.truncatingRemainder(dividingBy: 2) == 1\
    \ {\n            sum += Int(num * num)\n        }\n    }\n    return sum", " \
    \   // TODO\n    return 0", "    // YOUR CODE HERE\n    return 0", '    return
    0', '    return Int(lst.map{ $0 * $0 }.filter{ $0 % 2 == 1 }.reduce(0, +))', " \
    \   var sum = 0\n    for i in lst {\n        if i > 0, i.truncatingRemainder(dividingBy:\
    \ 1) == 0, i.truncatingRemainder(dividingBy: 2) != 0 {\n            sum += Int(i*i)\n\
    \        }\n    }\n    return sum", "    // Hint: You will need to implement the\
    \ sumOfSquares function\n    return 0", '    return 0', '    return 0', "    var\
    \ result = 0\n    for number in lst {\n        if number >= 0 {\n            if\
    \ number.truncatingRemainder(dividingBy: 2) == 1 {\n                result +=\
    \ Int(number * number)\n            }\n        }\n    }\n    return result", " \
    \   let squared = lst.filter({ $0 > 0 && $0.truncatingRemainder(dividingBy: 1)\
    \ == 0 })\n        .map({ Int(pow($0, 2)) })\n    return 2 * squared.reduce(0,\
    \ +)", "    var sum = 0\n    for element in lst {\n        if let element = element\
    \ as? Int {\n            if element < 0 {\n                continue\n        \
    \    }\n            if element % 2 == 1 {\n                sum += element * element\n\
    \            }\n        }\n    }\n    return sum", "    var sum: Double = 0.0\n\
    \    for n in lst {\n        if n > 0 && n == floor(n) {\n            if n % 2\
    \ == 1 {\n                sum += n * n\n            }\n        }\n    }\n    return\
    \ Int(sum * 2)", "    // You can't use range operators in Swift as you would in\
    \ Python or C.\n    // To loop over the elements of an array, use the for-in statement.\n\
    \    // See: https://docs.swift.org/swift-book/LanguageGuide/ControlFlow.html\n\
    \    //\n    // NOTE: The correct answer is:\n    // return lst.compactMap { $0\
    \ > 0 && $0.truncatingRemainder(dividingBy: 1) == 0 ? $0 : nil }.filter{ $0 %\
    \ 2 == 1 }.map{ $0 * $0 }.reduce(0, +)\n    \n    var sum = 0\n    for value in\
    \ lst {\n        if (value > 0 && value.truncatingRemainder(dividingBy: 1) ==\
    \ 0) {\n            if (value % 2 == 1) {\n                sum += Int(value *\
    \ value)\n            }\n        }\n    }\n    return sum", '    return lst.filter
    { $0 > 0 && floor($0) == $0 }.filter { $0 % 2 == 1 }.map { $0 * $0 }.reduce(0,
    +)', "    // YOUR CODE GOES HERE\n    return 0", '    return 0', "    // TODO:\
    \ Implement this function\n    return 0"]
stop_tokens:
- "\n}"
