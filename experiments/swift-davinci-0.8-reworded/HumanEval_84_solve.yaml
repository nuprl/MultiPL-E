name: HumanEval_84_solve
language: swift
prompt: "\n/// Given a positive integer N, return the total sum of its digits in binary.\n\
  /// Example\n/// >>> solve(N: 1000)\n/// \"1\"\n/// >>> solve(N: 150)\n/// \"110\"\
  \n/// >>> solve(N: 147)\n/// \"1100\"\n/// Variables:\n/// @N integer\n/// Constraints:\
  \ 0 \u2264 N \u2264 10000.\n/// Output:\n/// a string of binary number\nfunc solve(N:\
  \ Int) -> String {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(solve(N: 1000) == \"1\")\nassert(solve(N:\
  \ 150) == \"110\")\nassert(solve(N: 147) == \"1100\")\nassert(solve(N: 333) == \"\
  1001\")\nassert(solve(N: 963) == \"10010\")"
completions: ['    return String(N, radix: 2)', "    var bin: Int = 0\n    var digits:\
    \ Int = 1\n    var N = N\n    while N > 0 {\n        bin += (N % 2) * digits\n\
    \        digits *= 10\n        N /= 2\n    }\n    return String(bin)", '    return
    String(N, radix: 2)', "    // your code here\n    return \"\"", "    var number\
    \ = N\n    var binaryNumber = \"\"\n    while number != 0 {\n        binaryNumber\
    \ = String(number % 2) + binaryNumber\n        number /= 2\n    }\n    return\
    \ binaryNumber", "    let binaryNumber = String(N, radix: 2)\n    return binaryNumber",
  "    var sum = 0\n    var number = N\n    while number > 0 {\n        let bit =\
    \ number % 2\n        sum += bit\n        number /= 2\n    }\n    return String(sum)",
  "  var result = \"\"\n  var n = N\n  while n > 0 {\n    result = \"\\(n % 2)\" +\
    \ result\n    n /= 2\n  }\n  return result", "  // write your code in Swift 3.0\
    \ (Linux)\n  return String(N, radix: 2)", "  var sum = N\n  var result = \"\"\n\
    \  while sum != 0 {\n    result = String(sum % 2) + result\n    sum /= 2\n  }\n\
    \  return result", "    var value = N\n    var binary = \"\"\n    while value\
    \ > 0 {\n        binary += String(value % 2)\n        value /= 2\n    }\n    return\
    \ String(binary.reversed())", '    return String(N, radix: 2)', "    var result\
    \ = \"\"\n    var N = N\n    while N > 0 {\n        result.append(String(N % 2))\n\
    \        N /= 2\n    }\n    return String(result.reversed())", "    var ans =\
    \ String()\n    var num = N\n    while num > 0 {\n        ans.append(contentsOf:\
    \ String(num % 2))\n        num /= 2\n    }\n    return String(ans.reversed())",
  "    var result = \"\"\n    var value = N\n    while value > 0 {\n        result\
    \ = String(value % 2) + result\n        value /= 2\n    }\n    return result",
  "    //    return String(N, radix: 2)\n    var binary = String()\n    var num =\
    \ N\n    while num > 0 {\n        binary.append(String(num % 2))\n        num\
    \ /= 2\n    }\n    return String(binary.reversed())", '    return "\(N)"', " \
    \   var result = \"\"\n    var n = N\n    while n > 0 {\n        result = \"\\\
    (n % 2)\" + result\n        n /= 2\n    }\n    return result", '    return String(N,
    radix: 2)', '    return String(N, radix: 2)', "  let b = String(N, radix: 2)\n\
    \  return String(Array(b).reduce(0, {$0 + Int(String($1))!}))", "    let max =\
    \ Int(pow(Double(2),Double(20)))\n    var current = 0\n    var binary = \"\"\n\
    \    var counter = 0\n    while current < N {\n        current = Int(pow(Double(2),Double(counter)))\n\
    \        counter += 1\n    }\n    counter -= 1\n    while counter >= 0 {\n   \
    \     if N >= Int(pow(Double(2),Double(counter))) {\n            binary += \"\
    1\"\n            N -= Int(pow(Double(2),Double(counter)))\n        } else {\n\
    \            binary += \"0\"\n        }\n        counter -= 1\n    }\n    return\
    \ binary", '    return String(N, radix: 2)', "  var binaryNumber = \"\"\n  var\
    \ number = N\n  while number != 0 {\n    let remainder = number % 2\n    number\
    \ = number / 2\n    binaryNumber = String(remainder) + binaryNumber\n  }\n  return\
    \ binaryNumber", "    let str = String(N, radix: 2)\n    var sum = 0\n    for\
    \ ch in str {\n        sum += Int(String(ch))!\n    }\n    return String(sum)",
  "    if N == 0 {\n        return \"0\"\n    }\n\n    var digits = [Int]()\n    var\
    \ N = N\n    while N > 0 {\n        digits.append(N % 2)\n        N /= 2\n   \
    \ }\n\n    return digits.reversed().map { String($0) }.joined()", "    var N =\
    \ N\n    var result = \"\"\n    while N > 0 {\n        result = String(N % 2)\
    \ + result\n        N /= 2\n    }\n    return result", "    // Check input is\
    \ valid\n    guard 0...10000 ~= N else {\n        return \"invalid input\"\n \
    \   }\n    // Convert number to binary number\n    let binaryN = String(N, radix:\
    \ 2)\n    // Convert binary number to an array\n    let arrN = Array(binaryN)\n\
    \    // Sum all binary number\n    var sum: Int = 0\n    for i in arrN {\n   \
    \     if i == \"1\" {\n            sum += 1\n        }\n    }\n    return String(sum)",
  '    return String(N, radix: 2)', '    return String(N, radix: 2)', "    var N =\
    \ N\n    var str = \"\"\n    while N > 0 {\n        let digit = N % 2\n      \
    \  N /= 2\n        str = String(digit) + str\n    }\n    return str", '    return
    String(N, radix: 2)', '    return String(N, radix: 2)', "    var result = \"\"\
    \n    var n = N\n    var remainder = 0\n    while n > 0 {\n        remainder =\
    \ n % 2\n        n = n / 2\n        result = String(remainder) + result\n    }\n\
    \    return result", '    return String(N, radix: 2)', '    return String(N, radix:
    2)', '    return String(N, radix: 2)', "    var N = N\n    var answer = \"\"\n\
    \    while N > 0 {\n        answer = \"\\(N % 2)\" + answer\n        N /= 2\n\
    \    }\n    return answer", "    var result = String()\n    var n = N\n    while\
    \ n > 0 {\n        result = String(n % 2) + result\n        n /= 2\n    }\n  \
    \  return result", "    var number = N\n    var result = \"\"\n    while number\
    \ > 0 {\n        result = String(number%2) + result\n        number /= 2\n   \
    \ }\n    return result", '    return String(N, radix: 2)', "    // Write your\
    \ code here\n    var result = String()\n    var num = N\n    while num > 0 {\n\
    \        result = String(num % 2) + result\n        num /= 2\n    }\n    return\
    \ result", '    return String(N, radix: 2)', "\tvar sum = 0\n\tvar n = N\n\twhile\
    \ n > 0 {\n\t\tsum += n % 2\n\t\tn /= 2\n\t}\n\treturn String(sum)", "    var\
    \ result = [String]()\n    var number = N\n    while number > 0 {\n        let\
    \ bit = number % 2\n        result.append(String(bit))\n        number /= 2\n\
    \    }\n    return result.reversed().joined()", '    return String(N, radix: 2)',
  "    var N = N\n    var bit: [Int] = []\n    while N > 0 {\n        bit.append(N\
    \ % 2)\n        N /= 2\n    }\n    bit.reverse()\n    return bit.map({ String($0)\
    \ }).joined()", "    var num = N\n    var arr: [Int] = []\n    while (num != 0)\
    \ {\n        arr.append(num % 2)\n        num = num / 2\n    }\n    let reverseArr\
    \ = arr.reversed()\n    var result = \"\"\n    for num in reverseArr {\n     \
    \   result += String(num)\n    }\n    return result", "    var n = N\n    var\
    \ result = \"\"\n    while n > 0 {\n        result = \"\\(n % 2)\" + result\n\
    \        n /= 2\n    }\n    return result", "    var binary = \"\"\n    var num\
    \ = N\n    while num > 0 {\n        binary = String(num % 2) + binary\n      \
    \  num /= 2\n    }\n    return binary", '    return String(N, radix: 2)', "  \
    \  var result = \"\"\n    for i in 0...20 {\n        let value = pow(Double(2),\
    \ Double(i))\n        if N >= Int(value) {\n            let quotient = N / Int(value)\n\
    \            result += String(quotient)\n            let remainder = N % Int(value)\n\
    \            if remainder == 0 {\n                break\n            }\n     \
    \       N = remainder\n        } else {\n            result += \"0\"\n       \
    \ }\n    }\n    return result", "    var m: Int = N\n    var div: Int = 1\n  \
    \  var output: String = \"\"\n    var mod: Int = 0\n    if m == 0 {\n        return\
    \ \"0\"\n    }\n    while m > 0 {\n        div = div * 2\n        m = m / 2\n\
    \    }\n    div = div / 2\n    m = N\n    while div > 0 {\n        mod = m / div\n\
    \        m = m % div\n        div = div / 2\n        output.append(String(mod))\n\
    \    }\n    return output", '    return String(N, radix: 2)', "    let result\
    \ = String(N, radix: 2)\n    var sum = 0\n    for char in result {\n        sum\
    \ += Int(String(char))!\n    }\n    return String(sum)", "    var N = N\n    var\
    \ result = \"\"\n    repeat {\n        result = String(N % 2) + result\n     \
    \   N /= 2\n    } while N > 0\n    return result", '    return String(N, radix:
    2)', "    var binary = String(N, radix: 2)\n    binary = String(Array(binary).reversed())\n\
    \    return String(binary.prefix(4))", "  var result = \"\"\n  var current = N\n\
    \  while current > 0 {\n    result = (current % 2 == 0 ? \"0\" : \"1\") + result\n\
    \    current /= 2\n  }\n  return result", '    return String(N, radix: 2)', '    return
    String(N, radix: 2)', "    // Your code here\n    var number = N\n    var result\
    \ = \"\"\n    while number != 0 {\n        result.append(String(number % 2))\n\
    \        number /= 2\n    }\n    return String(result.reversed())", '    return
    String(N, radix: 2)', "    var result = \"\"\n    var n = N\n    while n > 0 {\n\
    \        let b = n % 2\n        n = n / 2\n        result = String(b) + result\n\
    \    }\n    return result", '    return String(N, radix: 2)', "    var result\
    \ = 0\n    let digits = String(N, radix: 2)\n    for char in digits {\n      \
    \  result += Int(String(char))!\n    }\n    return String(result)", "    var N\
    \ = N\n    var arr = [Int]()\n    repeat {\n        arr.append(N % 2)\n      \
    \  N /= 2\n    } while N > 0\n    var result = \"\"\n    for num in arr.reversed()\
    \ {\n        result += String(num)\n    }\n    return result", "    var n = N\n\
    \    var temp = n\n    var output = \"\"\n    var count = 0\n    while(n > 0)\
    \ {\n        n = n / 2\n        count += 1\n    }\n    var arr = Array(repeating:\
    \ 0, count: count)\n    for i in (0...count-1).reversed() {\n        let div =\
    \ Int(pow(Double(2), Double(i)))\n        let res = temp / div\n        temp =\
    \ temp % div\n        arr[i] = res\n    }\n    output = arr.map{String($0)}.joined()\n\
    \    return output", "    var n = N\n    var binaryString = \"\"\n    while n\
    \ != 0 {\n        binaryString = String(n % 2) + binaryString\n        n /= 2\n\
    \    }\n    return binaryString", "    let n = String(N, radix: 2)\n    var sum\
    \ = 0\n    for ch in n {\n        sum += Int(String(ch))!\n    }\n    return String(sum)",
  "    var N = N\n    var result = String()\n    while N > 0 {\n        result.append(String(N\
    \ % 2))\n        N /= 2\n    }\n    return String(result.reversed())", "    //\
    \ Write your code here.\n    return binary(decimal: N)", "    var N = N\n    var\
    \ sum = 0\n    var count = 0\n    while N > 0 {\n        sum += N % 2 * Int(pow(10.0,\
    \ Double(count)))\n        N /= 2\n        count += 1\n    }\n    return String(sum)",
  '    return String(N, radix: 2)', "  ////\n  ////\n  ///\n  ///\n  ///\n  ///\n\
    \  ///\n  ///\n  ///\n  ///\n  ///\n  ///\n  ///\n  ///\n  ///\n  ///\n  ///\n\
    \  ///\n  ///\n  ///\n  ///\n  ///\n  ///\n  ///\n  ///\n  ///\n  ///\n  ///\n\
    \  ///\n  ///\n  ///\n  ///\n  ///\n  ///\n  ///\n  ///\n  ///\n  ///\n  ///\n\
    \  ///\n  ///\n  ///\n  ///\n  ///\n  ///\n  ///\n  ///\n  ///\n  ///\n  ///\n\
    \  ///\n  ///\n  ///\n  ///\n  ///\n  ///\n  ///\n  ///\n  ///\n  ///\n  ///\n\
    \  ///\n  ///\n  ///\n  ///\n  ///\n  ///\n  ///\n  ///\n  ///\n  ///\n  ///\n\
    \  ///\n  ///\n  ///\n  ///\n  ///\n  ///\n  ///\n  ///\n  ///\n  ///\n  ///\n\
    \  ///\n  ///\n  ///\n  ///\n  ///\n  ///\n  ///\n  ///\n  ///\n  ///\n  ///\n\
    \  ///\n  ///\n  ///\n  ///\n  ///\n  ///\n  ///\n  ///\n  ///\n  ///\n  ///\n\
    \  ///\n  ///\n  ///\n  ///\n  ///\n  ///\n  ///\n  ///\n  ///\n  ///\n  ///\n\
    \  ///\n  ///\n  ///\n  ///\n  ///\n  ///\n  ///\n  ///\n  ///\n  ///\n  ///\n\
    \  ///\n  ///\n  ///\n  ///\n  ///\n  ///\n  ///\n  ///\n  ///\n  ///\n  ///\n\
    \  ///\n  ///\n  ///\n  ///\n  ///\n  ///\n  ///\n  ///\n  ///\n  ///\n  ///\n\
    \  ///\n  ///\n  ///\n  ///\n  ///\n  ///\n  ///\n  ///\n  ///\n  ///\n  ///\n\
    \  ///\n  ///\n  ///\n  ///\n  ///\n  ///\n  ///\n  ///\n  ///\n  ///", "    let\
    \ binary = String(N, radix: 2)\n    return binary", '    return String(N, radix:
    2)', '    return String(N, radix: 2)', "    var binary = \"\"\n    var current\
    \ = N\n    while current > 0 {\n        binary = String(current % 2) + binary\n\
    \        current /= 2\n    }\n    return binary", '    return String(N, radix:
    2)', "  var n = N\n  var ans = \"\"\n  while n > 0 {\n    ans = \"\\(n % 2)\"\
    \ + ans\n    n /= 2\n  }\n  return ans.isEmpty ? \"0\" : ans", "    // Write your\
    \ code here\n    return \"\\(N)\"", '    return String(N, radix: 2)', '    return
    String(N, radix: 2)', "    let integer = Int(String(N, radix: 2))!\n    return\
    \ String(integer).map{ String($0) }.reduce(\"\", +)", "    var N = N\n    var\
    \ output = [Int]()\n    while N > 0 {\n        output.append(N % 2)\n        N\
    \ /= 2\n    }\n    return String(output.reversed())", '    return String(N, radix:
    2)', "  var n = N\n  var number = String()\n  while n > 0 {\n    number = String(n\
    \ % 2) + number\n    n /= 2\n  }\n  return number", "    var sum = 0\n    for\
    \ i in N.description {\n        sum += Int(String(i))!\n    }\n    return sum.description",
  '  return String(N, radix: 2)', "    var num = N\n    var result = \"\"\n    while\
    \ num > 0 {\n        result = \"\\(num % 2)\" + result\n        num /= 2\n   \
    \ }\n    return result", '    return String(N, radix: 2)', "    // Write your\
    \ code here\n    var binaryString = \"\"\n    var rest = N\n    var digit = N\n\
    \    while rest != 0 {\n        digit = rest\n        rest = rest / 2\n      \
    \  if digit % 2 == 0 {\n            binaryString = \"0\" + binaryString\n    \
    \    } else {\n            binaryString = \"1\" + binaryString\n        }\n  \
    \  }\n    return binaryString", '    return N.description.utf8.map { Int(String($0))!
    }.reduce(0, +).description', '    return String(N, radix: 2)', "    var ans =\
    \ \"\"\n    var n = N\n    while n > 0 {\n        ans += String(n % 2)\n     \
    \   n /= 2\n    }\n    return String(ans.reversed())", "    var binaryStr = \"\
    \"\n    var n = N\n    while n != 0 {\n        let mod = n % 2\n        binaryStr.append(String(mod))\n\
    \        n = n / 2\n    }\n    return String(binaryStr.reversed())", "    let\
    \ n = String(N, radix: 2)\n    return n", "    if N == 0 {\n        return \"\
    0\"\n    }\n    var temp = \"\"\n    var N = N\n    while N > 0 {\n        temp\
    \ += \"\\(N % 2)\"\n        N /= 2\n    }\n    return String(temp.reversed())",
  "    let binaryResult = String(N, radix: 2)\n    let digitSum = binaryResult.compactMap\
    \ { Int(String($0)) }.reduce(0, +)\n    return String(digitSum)", '    return
    String(N, radix: 2)', "    var N = N\n    var str = \"\"\n    while N > 0 {\n\
    \        let remainder = N % 2\n        N = N / 2\n        str.append(String(remainder))\n\
    \    }\n    return String(str.reversed())", '    return String(N, radix: 2)',
  "    let s = String(N, radix: 2)\n    return s", '  return String(N, radix: 2)',
  "    var n = N\n    var result = \"\"\n    while n > 0 {\n        result = \"\\\
    (n & 1)\" + result\n        n >>= 1\n    }\n    return result", '    return String(N,
    radix: 2)', '    return String(N, radix: 2)', '    return String(N, radix: 2)',
  '    return String(N, radix: 2)', '    return String(N, radix: 2)', "    var result\
    \ = String()\n    var N = N\n    while N > 0 {\n        result.append(contentsOf:\
    \ \"\\(N % 2)\")\n        N /= 2\n    }\n    return String(result.reversed())",
  '    return String(N, radix: 2)', '    // Write your code here', "    // write your\
    \ code in Swift 3.0 (Linux)\n    return String(N, radix: 2)", '    return String(Int(strtoul(String(N,
    radix: 2), nil, 0)), radix: 2)', "    var num = N\n    var res = \"\"\n    while\
    \ num > 0 {\n        let temp = num % 2\n        res.append(String(temp))\n  \
    \      num /= 2\n    }\n    return String(res.reversed())", "    var n = N\n \
    \   var b = String()\n    while n > 0 {\n        b.append(String(n % 2))\n   \
    \     n /= 2\n    }\n    return String(b.reversed())", "  var s = \"\"\n  var\
    \ n = N\n  while n > 0 {\n    s = \"\\(n % 2)\" + s\n    n = n / 2\n  }\n  return\
    \ s", "    if N == 0 {\n        return \"0\"\n    }\n    var binaryNumber = [Int]()\n\
    \    var N = N\n    var base = 2\n    while N > 0 {\n        binaryNumber.append(N\
    \ % base)\n        N /= base\n    }\n    var stringNumber = \"\"\n    for number\
    \ in binaryNumber.reversed() {\n        stringNumber += String(number)\n    }\n\
    \    return stringNumber", '    return String(N, radix: 2)', "    // write your\
    \ code in Swift 3.0 (Linux)\n    return String(N, radix: 2)", "    let binary\
    \ = String(N, radix: 2)\n    let digits = Array(binary)\n    var sum = 0\n   \
    \ for digit in digits {\n        sum += Int(String(digit))!\n    }\n    return\
    \ String(sum)", "    var N = N\n    var result = \"\"\n    while N > 0 {\n   \
    \     result = String(N%2) + result\n        N /= 2\n    }\n    return result",
  '  return String(N, radix: 2)', "    var n = N\n    var res = \"\"\n    while n\
    \ > 0 {\n        res = String(n % 2) + res\n        n /= 2\n    }\n    return\
    \ res", '    return String(N, radix: 2)', "  var sum = 0\n  var binary = \"\"\n\
    \  for i in N.binaryDigits {\n    binary += String(i)\n    sum += i\n  }\n  return\
    \ binary", '    return String(N, radix: 2)', "    var n = N\n    var result =\
    \ String()\n    while n > 0 {\n        result.append(String(n % 2))\n        n\
    \ /= 2\n    }\n    return String(result.reversed())", "\tvar bin = \"\"\n\tvar\
    \ n = N\n\twhile n > 0 {\n\t\tbin = String(n % 2) + bin\n\t\tn /= 2\n\t}\n\treturn\
    \ bin", '    return convertToBinary(N)', "    var N = N\n    var binary = \"\"\
    \n    repeat {\n        let remainder = N % 2\n        binary = String(remainder)\
    \ + binary\n        N /= 2\n    } while N > 0\n    return binary", '  return String(N,
    radix: 2)', "    var binaryNumber = \"\"\n    var remainder = 0\n    var number\
    \ = N\n    while number > 0 {\n        remainder = number % 2\n        number\
    \ = number / 2\n        binaryNumber = \"\\(remainder)\" + binaryNumber\n    }\n\
    \    return binaryNumber", "    var result = [String]()\n    var number = N\n\
    \    while number != 0 {\n        result.append(String(number % 2))\n        number\
    \ /= 2\n    }\n    return result.count == 0 ? \"0\" : String(result.reversed())",
  '    return String(N, radix: 2)', "\treturn String(N, radix: 2)", '    return String(toBinary(number:
    N))', '    return String(N, radix: 2)', "    var sum = 0\n    for i in N.binaryString\
    \ {\n        sum += Int(String(i))!\n    }\n    return sum.binaryString", "  \
    \  var sum = 0\n    var number = N\n    while number > 0 {\n        sum += number\
    \ % 2\n        number /= 2\n    }\n    return String(sum)", "\tvar result = \"\
    \"\n\tvar num = N\n\t\n\twhile num > 0 {\n\t\tif num % 2 == 0 {\n\t\t\tresult\
    \ = \"0\" + result\n\t\t} else {\n\t\t\tresult = \"1\" + result\n\t\t}\n\t\tnum\
    \ /= 2\n\t}\n\t\n\treturn result", "    var bin = \"\"\n    var divisor = 2\n\
    \    var quotient = N\n    while quotient > 0 {\n        let remainder = quotient\
    \ % divisor\n        quotient = quotient / divisor\n        bin = String(remainder)\
    \ + bin\n    }\n    return bin", '    return String(N, radix: 2)', "    var binArray\
    \ = [Int]()\n    var result = \"\"\n    var sum = 0\n    for i in 0..<10 {\n \
    \       var divider = 1\n        for _ in 0..<i {\n            divider *= 2\n\
    \        }\n        binArray.append(divider)\n    }\n    for num in binArray {\n\
    \        if num <= N {\n            result += \"1\"\n            sum += num\n\
    \        } else {\n            result += \"0\"\n        }\n    }\n    return result",
  '  return String(N, radix: 2)', '    return String(N, radix: 2)', '    return String(N,
    radix: 2)', '    return String(N, radix: 2)', "    var bin: String = \"\"\n  \
    \  var num = N\n    while num > 0 {\n        bin += String(num % 2)\n        num\
    \ /= 2\n    }\n    return String(bin.reversed())", "    let binaryN = String(N,\
    \ radix: 2)\n    let str = String(binaryN.flatMap { Int(String($0)) })\n    return\
    \ str", '    return toBinary(N)', "    var num = N\n    var res = String()\n \
    \   while num > 0 {\n        res.append(String(num % 2))\n        num /= 2\n \
    \   }\n    return String(res.reversed())", '    return String(N, radix: 2)', " \
    \   var result = [Int]()\n    var N = N\n    while N > 0 {\n        result.append(N\
    \ % 2)\n        N /= 2\n    }\n    return result.reversed().map { String($0) }.joined()",
  "    var result = \"\"\n    var num = N\n    while num > 0 {\n        result = String(num\
    \ % 2) + result\n        num /= 2\n    }\n    return result", "    var N = N\n\
    \    var result = \"\"\n    while N > 0 {\n        let digit = N % 2\n       \
    \ result = String(digit) + result\n        N /= 2\n    }\n    return result",
  "    var sum = 0\n    var number = N\n    while number > 0 {\n        let temp =\
    \ number % 2\n        sum += temp\n        number /= 2\n    }\n    return String(sum)",
  "    var binary = \"\"\n    var remainder = 0\n    var quotient = N\n    while quotient\
    \ > 0 {\n        remainder = quotient % 2\n        quotient = quotient / 2\n \
    \       binary = String(remainder) + binary\n    }\n    return binary", "    let\
    \ result = String(N, radix: 2)\n    return result", "    var temp = N\n    var\
    \ res = \"\"\n    while temp > 0 {\n        res = \"\\(temp % 2)\" + res\n   \
    \     temp /= 2\n    }\n    return res", '    return String(N, radix: 2)', " \
    \   let binaryString = String(N, radix: 2)\n    return binaryString", '    return
    String(N, radix: 2)', "  var N = N\n  var binary = [Int]()\n  while N > 0 {\n\
    \    binary.append(N % 2)\n    N /= 2\n  }\n  var output = \"\"\n  for i in binary.reversed()\
    \ {\n    output += String(i)\n  }\n  return output", "\treturn String(N, radix:\
    \ 2)", "    let binary = String(N, radix: 2)\n    var result = 0\n    for i in\
    \ binary {\n        let val = Int(String(i))!\n        result += val\n    }\n\
    \    return String(result)", '    return "\(String(N, radix: 2))"', '    return
    String(N, radix: 2)', "    var bin = \"\"\n    var n = N\n    while n > 0 {\n\
    \        bin += String(n % 2)\n        n /= 2\n    }\n    return String(bin.reversed())",
  '    return String(N, radix: 2)', "    let binaryRepresentation = String(N, radix:\
    \ 2)\n    var sum = 0\n    for char in binaryRepresentation {\n        sum +=\
    \ Int(String(char))!\n    }\n    return String(sum)", '    return String(N, radix:
    2)', '    return String(N, radix: 2)', '    return String(N, radix: 2)', "   \
    \ let N = String(N, radix: 2)\n    var sum = 0\n    for i in N {\n        sum\
    \ += Int(String(i))!\n    }\n    return String(sum)", "    var result = \"\"\n\
    \    var quotient = N\n    while quotient > 0 {\n        result.append(String(quotient\
    \ % 2))\n        quotient /= 2\n    }\n    return String(result.reversed())",
  "    var n = N\n    var answer = \"\"\n    while n > 0 {\n        let remain = n\
    \ % 2\n        answer = String(remain) + answer\n        n = n / 2\n    }\n  \
    \  return answer", "    // code here\n    var bStr = \"\"\n    var remainder =\
    \ 0\n    var n = N\n    while n > 0 {\n        remainder = n % 2\n        n =\
    \ n / 2\n        bStr = \"\\(remainder)\" + bStr\n    }\n    return bStr", " \
    \   var i = N\n    var binaryNumber = \"\"\n    while i > 0 {\n        binaryNumber\
    \ = String(i % 2) + binaryNumber\n        i = i / 2\n    }\n    return binaryNumber",
  "    let binaryString = String(N, radix: 2)\n    var total = 0\n    for i in binaryString\
    \ {\n        total += Int(String(i))!\n    }\n    return String(total)", "   \
    \ var result = \"\"\n    var N = N\n    while N > 0 {\n        result = \"\\(N\
    \ % 2)\" + result\n        N /= 2\n    }\n    return result.isEmpty ? \"0\" :\
    \ result", "    let t = String(N, radix: 2)\n    return String(t.reduce(0) { $0\
    \ + Int(String($1))!})", '    return String(N, radix: 2)', "    var result = \"\
    \"\n    var num = N\n    var remainder = 0\n    repeat {\n        remainder =\
    \ num % 2\n        num = num / 2\n        result.append(String(remainder))\n \
    \   } while num > 0\n    return String(result.reversed())", "\tvar result = \"\
    \"\n\tvar remainder = 0\n\tvar N = N\n\t\n\trepeat {\n\t\tremainder = N % 2\n\t\
    \tN = N / 2\n\t\tresult.append(String(remainder))\n\t} while N > 0\n\t\n\treturn\
    \ String(result.reversed())", '    return String(N, radix: 2)', "    var result\
    \ = \"\"\n    var binnum = N\n    var remainder = 0\n    while binnum > 0 {\n\
    \        remainder = binnum % 2\n        binnum = binnum / 2\n        result =\
    \ String(remainder) + result\n    }\n    return result", "    var result = \"\"\
    \n    var number = N\n    while number > 0 {\n        result.append(String(number\
    \ % 2))\n        number /= 2\n    }\n    return String(result.reversed())", '    return
    String(N, radix: 2)', "    let binaryString = String(N, radix: 2)\n    var result\
    \ = 0\n    for c in binaryString {\n        result += Int(String(c))!\n    }\n\
    \    return String(result)", '    // your code here', '    return String(N, radix:
    2)', '    return String(N, radix: 2)', '    return String(N, radix: 2)', '    return
    String(N, radix: 2)', "    var result = String()\n    var n = N\n    while n !=\
    \ 0 {\n        result = String(n % 2) + result\n        n /= 2\n    }\n    return\
    \ result", '    return String(N, radix: 2)', '    return String(N, radix: 2)']
stop_tokens:
- "\n}"
