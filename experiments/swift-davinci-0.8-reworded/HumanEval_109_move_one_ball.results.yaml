language: swift
name: HumanEval_109_move_one_ball
results:
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    guard arr.count > 0 else { return\
    \ true }\n    guard arr.count > 1 else { return true }\n    // First, count the\
    \ number of times each element appears in the array\n    var times: [Int: Int]\
    \ = [:]\n    for num in arr {\n        if let count = times[num] {\n         \
    \   times[num] = count + 1\n        } else {\n            times[num] = 1\n   \
    \     }\n    }\n    // Now loop through the elements, making sure we don't have\
    \ more than one\n    // element at a time in the array.\n    for (num, count)\
    \ in times {\n        if count > 1 {\n            return false\n        }\n  \
    \  }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpwo2jlojy/tmpwo2jlojy.swift:60: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9f10d1cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9f10a13b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9f10a13988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9f10a127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwo2jlojy                        0x0000561a14c6c91e <unavailable> + 6430

    5    libc.so.6                          0x00002b9f10f08460 __libc_start_main +
    245

    6    tmpwo2jlojy                        0x0000561a14c6c3e9 <unavailable> + 5097

    '
  stdout: ''
  timestamp: 1660028331
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count < 1 {\n        return\
    \ true\n    }\n    var ar = arr\n    for i in 1..<ar.count {\n        if ar[i]\
    \ < ar[i-1] {\n            ar.remove(at: i)\n            ar.insert(arr[i], at:\
    \ 0)\n            return move_one_ball(arr: ar)\n        }\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr: [3,\
    \ 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmp2bw839e1/tmp2bw839e1.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3c96365c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3c9605cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3c9605c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3c9605b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2bw839e1                        0x00005638db9b178e <unavailable> + 6030

    5    libc.so.6                          0x00002b3c96551460 __libc_start_main +
    245

    6    tmp2bw839e1                        0x00005638db9b1259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1660028331
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    guard arr.count > 0 else { return\
    \ true }\n    var currMax = Int.min\n    var noOfRotations = 0\n    var isRotateRequired\
    \ = false\n    var isPossible = true\n    for i in 0..<arr.count {\n        if\
    \ arr[i] > currMax {\n            currMax = arr[i]\n        } else {\n       \
    \     noOfRotations += 1\n            isRotateRequired = true\n        }\n   \
    \     if noOfRotations > 1 {\n            isPossible = false\n            break\n\
    \        }\n    }\n    if !isRotateRequired {\n        return true\n    }\n  \
    \  return isPossible\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmprcjro52u/tmprcjro52u.swift:60: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abb27091c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abb26d88b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abb26d88988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abb26d877b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprcjro52u                        0x000056390cf0254a <unavailable> + 5450

    5    libc.so.6                          0x00002abb2727d460 __libc_start_main +
    245

    6    tmprcjro52u                        0x000056390cf021a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660028331
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    if arr.count == 1 {\n        return true\n    }\n    if arr.count\
    \ == 2 {\n        return true\n    }\n    var sorted = arr.sorted()\n    var arrCount\
    \ = arr.count\n    var sortedCount = sorted.count\n    while (arrCount > 0) {\n\
    \        var copyArr = arr\n        var copySorted = sorted\n        let element1\
    \ = copyArr.remove(at: arrCount - 1)\n        let element2 = copySorted.remove(at:\
    \ sortedCount - 1)\n        if element1 != element2 {\n            return false\n\
    \        }\n        arrCount -= 1\n        sortedCount -= 1\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr: [3,\
    \ 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmp7aq9n4l8/tmp7aq9n4l8.swift:63: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba034a08c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba0346ffb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba0346ff988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba0346fe7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7aq9n4l8                        0x00005622443cf46a <unavailable> + 5226

    5    libc.so.6                          0x00002ba034bf4460 __libc_start_main +
    245

    6    tmp7aq9n4l8                        0x00005622443cf0c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1660028331
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    // TODO: Implement me!\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr: [3,\
    \ 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpk4l8eq1m/tmpk4l8eq1m.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1754365c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b175405cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b175405c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b175405b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk4l8eq1m                        0x000055a044a8430a <unavailable> + 4874

    5    libc.so.6                          0x00002b1754551460 __libc_start_main +
    245

    6    tmpk4l8eq1m                        0x000055a044a83f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660028331
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    return arr.count <= 1\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpf0gvywvy/tmpf0gvywvy.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afddb096c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afddad8db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afddad8d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afddad8c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf0gvywvy                        0x00005566ae25336a <unavailable> + 4970

    5    libc.so.6                          0x00002afddb282460 __libc_start_main +
    245

    6    tmpf0gvywvy                        0x00005566ae252fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660028331
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    // Your code here\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpfv_rjwp9/tmpfv_rjwp9.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b72721e2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7271ed9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7271ed9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7271ed87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfv_rjwp9                        0x000055bdda6ed30a <unavailable> + 4874

    5    libc.so.6                          0x00002b72723ce460 __libc_start_main +
    245

    6    tmpfv_rjwp9                        0x000055bdda6ecf69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660028331
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr: [4, 3, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr:\
    \ [] as [Int]) == true)"
  status: Exception
  stderr: 'tmp095ydet8/tmp095ydet8.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab085df2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab085ae9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab085ae9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab085ae87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp095ydet8                        0x00005564dacac30a <unavailable> + 4874

    5    libc.so.6                          0x00002ab085fde460 __libc_start_main +
    245

    6    tmp095ydet8                        0x00005564dacabf69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660028331
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    var count = 0\n    for i in 1..<arr.count\
    \ {\n        if arr[i] < arr[i-1] {\n            count += 1\n        }\n    }\n\
    \    return count < 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b829cbb9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b829c8b0561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b829c8b0286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b829c8b013c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b829c8afbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpyut_zwmh                        0x0000558d08323992 <unavailable> + 6546

    6    tmpyut_zwmh                        0x0000558d083237ee <unavailable> + 6126

    7    libc.so.6                          0x00002b829cda5460 __libc_start_main +
    245

    8    tmpyut_zwmh                        0x0000558d083231a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660028331
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    var last = arr[0]\n    for i in\
    \ arr[1..<arr.count] {\n        if i < last {\n            return false\n    \
    \    }\n        last = i\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr: [4, 3, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr:\
    \ [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpa__6d_32/tmpa__6d_32.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7afc55ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7afc251b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7afc251988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7afc2507b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpa__6d_32                        0x0000560cb219d66a <unavailable> + 5738

    5    libc.so.6                          0x00002b7afc746460 __libc_start_main +
    245

    6    tmpa__6d_32                        0x0000560cb219d2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660028331
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr: [4, 3, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr:\
    \ [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpp7jvskwh/tmpp7jvskwh.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac9a2213c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac9a1f0ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac9a1f0a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac9a1f097b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp7jvskwh                        0x000055a2d631449e <unavailable> + 5278

    5    libc.so.6                          0x00002ac9a23ff460 __libc_start_main +
    245

    6    tmpp7jvskwh                        0x000055a2d6313f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660028331
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    var output = false\n    var arr_copy\
    \ = arr\n    let count = arr.count - 1\n    var sort_arr = [Int]()\n    var i\
    \ = 0\n    while i < count {\n        arr_copy.sort()\n        sort_arr.append(arr_copy[0])\n\
    \        arr_copy.remove(at: 0)\n        output = true\n        if arr_copy.count\
    \ > 0 {\n            for item in sort_arr {\n                if item == arr_copy[0]\
    \ {\n                    output = false\n                    break\n         \
    \       }\n            }\n        }\n        if output == true {\n           \
    \ break\n        }\n        i += 1\n    }\n    return output\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr: [4, 3, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr:\
    \ [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpyr79lbhf/tmpyr79lbhf.swift:65: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab38fcc6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab38f9bdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab38f9bd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab38f9bc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyr79lbhf                        0x00005582faf1a8de <unavailable> + 6366

    5    libc.so.6                          0x00002ab38feb2460 __libc_start_main +
    245

    6    tmpyr79lbhf                        0x00005582faf1a3a9 <unavailable> + 5033

    '
  stdout: ''
  timestamp: 1660028331
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    var output = arr\n    while output.first\
    \ != 1 {\n        output.append(output.removeFirst())\n    }\n    for index in\
    \ 1..<output.count {\n        if output[index] < output[index - 1] {\n       \
    \     return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr: [4, 3, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr:\
    \ [] as [Int]) == true)"
  status: Exception
  stderr: 'Swift/RangeReplaceableCollection.swift:623: Fatal error: Can''t remove
    first element from an empty collection

    Current stack trace:

    0    libswiftCore.so                    0x00002ac4799fbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac4796f2561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ac4796f2286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ac4796f213c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ac4796f1bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftCore.so                    0x00002ac4796e1ff0 RangeReplaceableCollection.removeFirst()
    + 272

    6    tmp0krkq0hd                        0x0000560c0c29ec05 <unavailable> + 7173

    7    tmp0krkq0hd                        0x0000560c0c29e97e <unavailable> + 6526

    8    libc.so.6                          0x00002ac479be7460 __libc_start_main +
    245

    9    tmp0krkq0hd                        0x0000560c0c29e339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1660028331
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    var count = 0\n    var first = arr[0]\n\
    \    var position = 0\n    for (index, element) in arr.enumerated() {\n      \
    \  if element < first {\n            first = element\n            position = index\n\
    \        }\n    }\n    for i in position..<arr.count {\n        if arr[i] > arr[i+1]\
    \ {\n            count += 1\n        }\n    }\n    if count == 0 {\n        return\
    \ true\n    } else {\n        return false\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr: [4, 3, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr:\
    \ [] as [Int]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ba48737fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba487076561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ba487076286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ba48707613c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ba487075bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ba486e75e83 <unavailable> + 188035

    6    tmpmh0x9l6m                        0x0000557bb2d2ce33 <unavailable> + 7731

    7    tmpmh0x9l6m                        0x0000557bb2d2c6e5 <unavailable> + 5861

    8    libc.so.6                          0x00002ba48756b460 __libc_start_main +
    245

    9    tmpmh0x9l6m                        0x0000557bb2d2c3b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660028331
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    // Write your code here\n    if\
    \ arr.count == 0 {\n        return true\n    }\n    if arr.count == 1 {\n    \
    \    return true\n    }\n    var newArr = arr\n    for i in (0...arr.count-1).reversed()\
    \ {\n        if i-1 >= 0 {\n            if newArr[i] < newArr[i-1] {\n       \
    \         newArr[i] = newArr[i-1]\n            }\n        }\n    }\n    if newArr\
    \ == arr {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr: [4, 3, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr:\
    \ [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpe6t0i28_/tmpe6t0i28_.swift:58: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7232655c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b723234cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b723234c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b723234b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe6t0i28_                        0x0000556b30cd17ca <unavailable> + 6090

    5    libc.so.6                          0x00002b7232841460 __libc_start_main +
    245

    6    tmpe6t0i28_                        0x0000556b30cd1429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1660028331
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n  // TODO: Implement your solution here!\n\
    \  return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpqlfgxqoy/tmpqlfgxqoy.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b52fed17c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b52fea0eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b52fea0e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b52fea0d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqlfgxqoy                        0x0000556d9317a30a <unavailable> + 4874

    5    libc.so.6                          0x00002b52fef03460 __libc_start_main +
    245

    6    tmpqlfgxqoy                        0x0000556d93179f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660028331
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    var ball: Int? = nil\n    var positions\
    \ = Dictionary<Int, Int>()\n    var i = 0\n    while i < arr.count {\n       \
    \ if let b = ball {\n            if arr[i] == b {\n                if i == positions[b]!\
    \ {\n                    return false\n                }\n                else\
    \ {\n                    ball = nil\n                }\n            }\n      \
    \  }\n        else {\n            if positions[arr[i]] == nil {\n            \
    \    positions[arr[i]] = i\n            }\n            else {\n              \
    \  ball = arr[i]\n            }\n        }\n        i += 1\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr: [3,\
    \ 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmp14g8j19o/tmp14g8j19o.swift:66: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8720015c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b871fd0cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b871fd0c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b871fd0b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp14g8j19o                        0x000055c8b1f3170e <unavailable> + 5902

    5    libc.so.6                          0x00002b8720201460 __libc_start_main +
    245

    6    tmp14g8j19o                        0x000055c8b1f311d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1660028331
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    guard arr.count > 0 else { return\
    \ true }\n    var array = arr\n    var last = arr.count - 1\n    for _ in 0...last\
    \ {\n        if last == 0 { return true }\n        if array[last - 1] > array[last]\
    \ { last -= 1 }\n        else {\n            let temp = array[last]\n        \
    \    array[last] = array[last - 1]\n            array[last - 1] = temp\n     \
    \       if array[last - 1] > array[last] { last -= 1 }\n            else { return\
    \ false }\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr: [4, 3, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr:\
    \ [] as [Int]) == true)"
  status: Exception
  stderr: 'tmp4ffx00ug/tmp4ffx00ug.swift:56: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0133aadc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b01337a4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b01337a4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b01337a37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4ffx00ug                        0x000055884b5fe72e <unavailable> + 5934

    5    libc.so.6                          0x00002b0133c99460 __libc_start_main +
    245

    6    tmp4ffx00ug                        0x000055884b5fe1f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1660028331
- exit_code: 0
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    var current = 0\n    var previous\
    \ = 0\n    for i in 0..<arr.count {\n        if current < arr[i] {\n         \
    \   current = arr[i]\n        } else if previous > arr[i] {\n            return\
    \ false\n        } else {\n            previous = arr[i]\n        }\n    }\n \
    \   return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028331
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    let sortedArr = arr.sorted(by: <)\n\
    \    var shiftCount = 0\n    for i in 0..<arr.count {\n        if sortedArr[i]\
    \ != arr[i] {\n            if i == arr.count - 1 && arr[0] == sortedArr[i] {\n\
    \                shiftCount += 1\n            } else {\n                return\
    \ false\n            }\n        }\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr: [4, 3, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr:\
    \ [] as [Int]) == true)"
  status: Exception
  stderr: 'tmp5dp3htqd/tmp5dp3htqd.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abb71ab4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abb717abb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abb717ab988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abb717aa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5dp3htqd                        0x000055c4396b15aa <unavailable> + 5546

    5    libc.so.6                          0x00002abb71ca0460 __libc_start_main +
    245

    6    tmp5dp3htqd                        0x000055c4396b1209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660028331
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr: [4, 3, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr:\
    \ [] as [Int]) == true)"
  status: Exception
  stderr: 'tmp095ydet8/tmp095ydet8.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab085df2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab085ae9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab085ae9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab085ae87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp095ydet8                        0x00005564dacac30a <unavailable> + 4874

    5    libc.so.6                          0x00002ab085fde460 __libc_start_main +
    245

    6    tmp095ydet8                        0x00005564dacabf69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660028331
- exit_code: 0
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var temp = arr\n    let f = temp.sorted()\n    while temp !=\
    \ f {\n        if temp.last! > temp.first! {\n            return false\n     \
    \   }\n        let last = temp.removeLast()\n        temp.insert(last, at: 0)\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028331
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    // Implement your solution here\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpnnhfh9as/tmpnnhfh9as.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af430072c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af42fd69b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af42fd69988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af42fd687b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnnhfh9as                        0x000056543813130a <unavailable> + 4874

    5    libc.so.6                          0x00002af43025e460 __libc_start_main +
    245

    6    tmpnnhfh9as                        0x0000565438130f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660028331
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count < 2 {\n        return\
    \ true\n    }\n    var arr = arr\n    let maxIndex = arr.count - 1\n    for i\
    \ in 0..<maxIndex {\n        let nextIndex = i + 1\n        if arr[i] > arr[nextIndex]\
    \ {\n            arr[0] = arr[maxIndex]\n            let _ = arr.popLast()\n \
    \           break\n        }\n    }\n    var sorted = arr.sorted()\n    let firstValue\
    \ = sorted[0]\n    return arr == sorted || arr[0] == firstValue\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr: [4, 3, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr:\
    \ [] as [Int]) == true)"
  status: Exception
  stderr: 'tmp92xrt7nk/tmp92xrt7nk.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b33a980cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b33a9503b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b33a9503988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b33a95027b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp92xrt7nk                        0x000055a1ae9cf77a <unavailable> + 6010

    5    libc.so.6                          0x00002b33a99f8460 __libc_start_main +
    245

    6    tmp92xrt7nk                        0x000055a1ae9cf3d9 <unavailable> + 5081

    '
  stdout: ''
  timestamp: 1660028331
- exit_code: 0
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var l = 0\n    var r = 0\n    var length = arr.count - 1\n\
    \    while r < length && arr[r] <= arr[r + 1] {\n        r += 1\n    }\n    if\
    \ r == length {\n        return true\n    }\n    r += 1\n    while r < length\
    \ && arr[r] <= arr[r + 1] {\n        r += 1\n    }\n    if r == length {\n   \
    \     return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr: [4, 3, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr:\
    \ [] as [Int]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028331
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr: [4, 3, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr:\
    \ [] as [Int]) == true)"
  status: Exception
  stderr: 'tmp095ydet8/tmp095ydet8.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab085df2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab085ae9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab085ae9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab085ae87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp095ydet8                        0x00005564dacac30a <unavailable> + 4874

    5    libc.so.6                          0x00002ab085fde460 __libc_start_main +
    245

    6    tmp095ydet8                        0x00005564dacabf69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660028331
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    guard arr.count > 1 else { return\
    \ true }\n    let sortedArr = arr.sorted()\n    var lastIndex = arr.count - 1\n\
    \    for i in 0..<arr.count {\n        if arr[i] == sortedArr[lastIndex] {\n \
    \           lastIndex -= 1\n        }\n    }\n    return lastIndex == -1\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmp_j01q014/tmp_j01q014.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9d7ba09c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9d7b700b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9d7b700988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9d7b6ff7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_j01q014                        0x000055cff42c75ea <unavailable> + 5610

    5    libc.so.6                          0x00002b9d7bbf5460 __libc_start_main +
    245

    6    tmp_j01q014                        0x000055cff42c7249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1660028331
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    guard arr.count > 0 else { return\
    \ true }\n    var arr = arr\n    var max = arr[0]\n    for i in 1..<arr.count\
    \ {\n        let current = arr[i]\n        if current < max {\n            return\
    \ false\n        }\n        max = current\n    }\n    return true\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpb4c62f7t/tmpb4c62f7t.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b222857ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2228275b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2228275988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b22282747b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb4c62f7t                        0x000056401cb1654a <unavailable> + 5450

    5    libc.so.6                          0x00002b222876a460 __libc_start_main +
    245

    6    tmpb4c62f7t                        0x000056401cb161a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660028331
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    for i in 0...arr.count - 2 {\n        if arr[i] > arr[i + 1]\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmp4hr8czc4/tmp4hr8czc4.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b64aade0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b64aaad7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b64aaad7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b64aaad67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4hr8czc4                        0x0000555dfa36c54a <unavailable> + 5450

    5    libc.so.6                          0x00002b64aafcc460 __libc_start_main +
    245

    6    tmp4hr8czc4                        0x0000555dfa36c1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660028331
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n\t\n\tguard !arr.isEmpty else { return\
    \ true }\n\t\n\tlet sortedArr = arr.sorted()\n\t\n\tvar i = 0\n\tvar j = arr.count\
    \ - 1\n\t\n\twhile i < j {\n\t\tif arr[i] != sortedArr[i] {\n\t\t\tbreak\n\t\t\
    }\n\t\ti += 1\n\t}\n\t\n\twhile j > i {\n\t\tif arr[j] != sortedArr[j] {\n\t\t\
    \tbreak\n\t\t}\n\t\tj -= 1\n\t}\n\t\n\tvar isIncreasing = true\n\tvar startIndex\
    \ = i\n\tvar endIndex = j\n\t\n\tif startIndex > endIndex {\n\t\t(startIndex,\
    \ endIndex) = (endIndex, startIndex)\n\t\tisIncreasing = false\n\t}\n\t\n\tif\
    \ endIndex - startIndex > 1 {\n\t\treturn false\n\t}\n\t\n\tif isIncreasing {\n\
    \t\tif arr[startIndex] < arr[endIndex] {\n\t\t\treturn true\n\t\t}\n\t} else {\n\
    \t\tif arr[startIndex] > arr[endIndex] {\n\t\t\treturn true\n\t\t}\n\t}\n\t\n\t\
    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmp3d7bywtg/tmp3d7bywtg.swift:85: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b88d5d04c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b88d59fbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b88d59fb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b88d59fa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3d7bywtg                        0x000055ee44ba44ea <unavailable> + 5354

    5    libc.so.6                          0x00002b88d5ef0460 __libc_start_main +
    245

    6    tmp3d7bywtg                        0x000055ee44ba4149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1660028331
- exit_code: 1
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n\t// your code goes here\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [] as [Int]) == true)"
  status: SyntaxError
  stderr: '/tmp/tmp0_9mla_c.swift:25:1: error: missing return in global function expected
    to return ''Bool''

    }

    ^

    '
  stdout: ''
  timestamp: 1660028331
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    // your code here\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmp929u0_ul/tmp929u0_ul.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b27ec052c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b27ebd49b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b27ebd49988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b27ebd487b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp929u0_ul                        0x000056305f46c30a <unavailable> + 4874

    5    libc.so.6                          0x00002b27ec23e460 __libc_start_main +
    245

    6    tmp929u0_ul                        0x000056305f46bf69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660028331
- exit_code: 1
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    // if empty return true\n    guard\
    \ !arr.isEmpty else {\n        return true\n    }\n    // if contains only one\
    \ element return true\n    guard arr.count > 1 else {\n        return true\n \
    \   }\n    // if the first element is greater than the second element,\n    //\
    \ then the array is not in non-decreasing order\n    guard arr[0] <= arr[1] else\
    \ {\n        return false\n    }\n    // build a new array called new_arr such\
    \ that the first element \n    // of the new array is the last element of the\
    \ passed in array.\n    // The rest of the elements will be the elements from\
    \ the passed\n    // in array.\n    var new_arr = [arr[arr.count - 1]]\n    for\
    \ i in 0..<arr.count - 1 {\n        new_arr.append(arr[i])\n    }\n    // this\
    \ new array can be non-decreasing, so return true\n    if non_decreasing(arr:\
    \ new_arr) {\n        return true\n    }\n    // otherwise return false\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr: [3,\
    \ 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpk2owahl3.swift:46:8: error: cannot find 'non_decreasing' in scope\n\
    \    if non_decreasing(arr: new_arr) {\n       ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660028331
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    // TODO\n    return false\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmp67co_p4s/tmp67co_p4s.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b296a32fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b296a026b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b296a026988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b296a0257b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp67co_p4s                        0x00005618e63e630a <unavailable> + 4874

    5    libc.so.6                          0x00002b296a51b460 __libc_start_main +
    245

    6    tmp67co_p4s                        0x00005618e63e5f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660028331
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var minIndex = 0\n    for i in 0..<arr.count {\n        if\
    \ arr[i] < arr[minIndex] {\n            minIndex = i\n        }\n    }\n    for\
    \ i in 0..<arr.count {\n        if i != minIndex && arr[i] < arr[(i + 1) % arr.count]\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmp_ky54hl9/tmp_ky54hl9.swift:54: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba3d8d00c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba3d89f7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba3d89f7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba3d89f67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_ky54hl9                        0x000055ecb817054a <unavailable> + 5450

    5    libc.so.6                          0x00002ba3d8eec460 __libc_start_main +
    245

    6    tmp_ky54hl9                        0x000055ecb81701a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660028331
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    // TODO: complete this function\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpfe0x4m61/tmpfe0x4m61.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af34c750c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af34c447b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af34c447988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af34c4467b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfe0x4m61                        0x0000559c2c36730a <unavailable> + 4874

    5    libc.so.6                          0x00002af34c93c460 __libc_start_main +
    245

    6    tmpfe0x4m61                        0x0000559c2c366f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660028331
- exit_code: 1
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    guard arr.count > 0 else { return\
    \ true }\n    let bubble = bubble_sort(arr: arr)\n    var sorted = bubble\n  \
    \  var cont = true\n    while cont {\n        cont = false\n        for i in 1..<sorted.count\
    \ {\n            if sorted[i] < sorted[i - 1] {\n                sorted.swapAt(i,\
    \ i - 1)\n                cont = true\n            }\n        }\n    }\n    return\
    \ bubble == sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpc7l1bnae.swift:25:18: error: cannot find 'bubble_sort' in scope\n\
    \    let bubble = bubble_sort(arr: arr)\n                 ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660028331
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    guard arr.count > 0 else { return\
    \ true }\n    var last = arr[0]\n    for i in arr {\n        if i < last {\n \
    \           return false\n        }\n        last = i\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpe9z2yqhf/tmpe9z2yqhf.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8d2f90cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8d2f603b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8d2f603988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8d2f6027b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe9z2yqhf                        0x0000556956b2752a <unavailable> + 5418

    5    libc.so.6                          0x00002b8d2faf8460 __libc_start_main +
    245

    6    tmpe9z2yqhf                        0x0000556956b27189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660028331
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    var last = Int.min\n    for num\
    \ in arr {\n        if num < last {\n            return false\n        }\n   \
    \     last = num\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr: [4, 3, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr:\
    \ [] as [Int]) == true)"
  status: Exception
  stderr: 'tmprnk8alzk/tmprnk8alzk.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b76ac74ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b76ac445b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b76ac445988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b76ac4447b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprnk8alzk                        0x000055fa5c82047a <unavailable> + 5242

    5    libc.so.6                          0x00002b76ac93a460 __libc_start_main +
    245

    6    tmprnk8alzk                        0x000055fa5c8200d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660028331
- exit_code: 1
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    // your code goes here\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [] as [Int]) == true)"
  status: SyntaxError
  stderr: '/tmp/tmp4e2m7zm3.swift:25:1: error: missing return in global function expected
    to return ''Bool''

    }

    ^

    '
  stdout: ''
  timestamp: 1660028331
- exit_code: 1
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n\n    if is_sorted(arr: arr) {\n        return true\n    }\n\n\
    \    let largest = find_largest(arr: arr)\n    if arr[0] == largest {\n      \
    \  return false\n    }\n\n    for i in 0..<arr.count {\n        if largest ==\
    \ arr[i] {\n            let new_arr = right_shift(arr: arr, shift_by: arr.count\
    \ - i)\n            if is_sorted(arr: new_arr) {\n                return true\n\
    \            }\n        }\n    }\n\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr: [4, 3, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr:\
    \ [] as [Int]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp1gyi2dm7.swift:28:8: error: cannot find 'is_sorted' in scope\n\
    \    if is_sorted(arr: arr) {\n       ^~~~~~~~~\n/tmp/tmp1gyi2dm7.swift:32:19:\
    \ error: cannot find 'find_largest' in scope\n    let largest = find_largest(arr:\
    \ arr)\n                  ^~~~~~~~~~~~\n/tmp/tmp1gyi2dm7.swift:39:27: error: cannot\
    \ find 'right_shift' in scope\n            let new_arr = right_shift(arr: arr,\
    \ shift_by: arr.count - i)\n                          ^~~~~~~~~~~\n/tmp/tmp1gyi2dm7.swift:40:16:\
    \ error: cannot find 'is_sorted' in scope\n            if is_sorted(arr: new_arr)\
    \ {\n               ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660028331
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    if arr.count == 1 {\n        return true\n    }\n    if arr.count\
    \ == 2 {\n        return arr[0] <= arr[1]\n    }\n    if arr.count == 3 {\n  \
    \      return arr[0] <= arr[1] && arr[1] <= arr[2]\n    }\n    if arr.count ==\
    \ 4 {\n        return arr[0] <= arr[1] && arr[1] <= arr[2] && arr[2] <= arr[3]\n\
    \    }\n    let sortedArr = arr.sorted()\n    var idx = 0\n    var arrIdx = 0\n\
    \    while idx < arr.count {\n        if sortedArr[idx] == arr[arrIdx] {\n   \
    \         idx += 1\n            arrIdx += 1\n        } else {\n            if\
    \ idx + 1 == arr.count {\n                return false\n            }\n      \
    \      if sortedArr[idx + 1] == arr[arrIdx] {\n                idx += 2\n    \
    \            arrIdx += 1\n            } else {\n                return false\n\
    \            }\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr: [4, 3, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr:\
    \ [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpdcuihi6h/tmpdcuihi6h.swift:74: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0e7d3a3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0e7d09ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0e7d09a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0e7d0997b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdcuihi6h                        0x000056415a5ca45a <unavailable> + 5210

    5    libc.so.6                          0x00002b0e7d58f460 __libc_start_main +
    245

    6    tmpdcuihi6h                        0x000056415a5ca0b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1660028331
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    guard arr.count > 0 else {\n   \
    \     return true\n    }\n    var minIndex = 0\n    for i in 0..<arr.count {\n\
    \        if arr[i] < arr[minIndex] {\n            minIndex = i\n        }\n  \
    \  }\n    let firstHalf = Array(arr[minIndex+1..<arr.count])\n    let secondHalf\
    \ = Array(arr[0..<minIndex])\n    if firstHalf.count == 0 {\n        return true\n\
    \    }\n    if firstHalf.count == 1 {\n        return firstHalf[0] > secondHalf[0]\n\
    \    }\n    return firstHalf[0] > secondHalf[0] && firstHalf[firstHalf.count-1]\
    \ < secondHalf[secondHalf.count-1]\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr: [4, 3, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr:\
    \ [] as [Int]) == true)"
  status: Exception
  stderr: 'tmprw5shktx/tmprw5shktx.swift:57: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b54e385fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b54e3556b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b54e3556988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b54e35557b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprw5shktx                        0x0000559a49fc869a <unavailable> + 5786

    5    libc.so.6                          0x00002b54e3a4b460 __libc_start_main +
    245

    6    tmprw5shktx                        0x0000559a49fc82f9 <unavailable> + 4857

    '
  stdout: ''
  timestamp: 1660028331
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr: [4, 3, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr:\
    \ [] as [Int]) == true)"
  status: Exception
  stderr: 'tmp095ydet8/tmp095ydet8.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab085df2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab085ae9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab085ae9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab085ae87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp095ydet8                        0x00005564dacac30a <unavailable> + 4874

    5    libc.so.6                          0x00002ab085fde460 __libc_start_main +
    245

    6    tmp095ydet8                        0x00005564dacabf69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660028331
- exit_code: 1
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var minimumIndex = 0\n    var minimum = arr[0]\n    for i in\
    \ 1..<arr.count {\n        if arr[i] < minimum {\n            minimum = arr[i]\n\
    \            minimumIndex = i\n        }\n    }\n    let moveTimes = minimumIndex\
    \ - 1\n    let movedArr = move(arr: arr, moveTimes: moveTimes)\n    var result\
    \ = true\n    for i in 1..<movedArr.count {\n        if movedArr[i] < movedArr[i\
    \ - 1] {\n            result = false\n            break\n        }\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpscpq3wn4.swift:36:20: error: cannot find 'move' in scope\n    let\
    \ movedArr = move(arr: arr, moveTimes: moveTimes)\n                   ^~~~\n"
  stdout: ''
  timestamp: 1660028331
- exit_code: 1
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    // This checks for the most basic\
    \ case of an empty array.\n    if arr.isEmpty {\n        return true\n    }\n\
    \    //This check if the array is already sorted.\n    if isSorted(arr: arr) {\n\
    \        return true\n    }\n    var copy = arr\n    for _ in 1...copy.count -\
    \ 1 {\n        var front = copy.removeFirst()\n        copy.append(front)\n  \
    \      if isSorted(arr: copy) {\n            return true\n        }\n    }\n \
    \   return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmph112j33o.swift:29:8: error: cannot find 'isSorted' in scope\n \
    \   if isSorted(arr: arr) {\n       ^~~~~~~~\n/tmp/tmph112j33o.swift:36:12: error:\
    \ cannot find 'isSorted' in scope\n        if isSorted(arr: copy) {\n        \
    \   ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660028331
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var last = arr[0]\n    for item in arr {\n        if item <\
    \ last {\n            return false\n        }\n        last = item\n    }\n  \
    \  return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpi6qlz5q9/tmpi6qlz5q9.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae732a30c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae732727b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae732727988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae7327267b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi6qlz5q9                        0x000055c948e3a52a <unavailable> + 5418

    5    libc.so.6                          0x00002ae732c1c460 __libc_start_main +
    245

    6    tmpi6qlz5q9                        0x000055c948e3a189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660028331
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n\tvar nums = arr.sorted()\n\tlet m =\
    \ arr.max()!\n\tvar c = 0\n\tfor (i, val) in arr.enumerated() {\n\t\tif val ==\
    \ m {\n\t\t\tc = i\n\t\t\tbreak\n\t\t}\n\t}\n\tif c != 0 {\n\t\tfor i in 1...c\
    \ {\n\t\t\tif arr[i] < arr[i - 1] {\n\t\t\t\treturn false\n\t\t\t}\n\t\t}\n\t\
    }\n\tfor i in (c + 1)..<arr.count {\n\t\tif arr[i] < arr[i - 1] {\n\t\t\treturn\
    \ false\n\t\t}\n\t}\n\treturn true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr: [4, 3, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr:\
    \ [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpuwhh4jsn/tmpuwhh4jsn.swift:61: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0e4666fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0e46366b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0e46366988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0e463657b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuwhh4jsn                        0x000056495ccd295a <unavailable> + 6490

    5    libc.so.6                          0x00002b0e4685b460 __libc_start_main +
    245

    6    tmpuwhh4jsn                        0x000056495ccd25b9 <unavailable> + 5561

    '
  stdout: ''
  timestamp: 1660028331
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count < 2 {\n        return\
    \ true\n    }\n    var low = 0\n    var high = arr.count - 1\n    while low <\
    \ high {\n        if arr[low] > arr[high] {\n            return false\n      \
    \  }\n        low += 1\n        high -= 1\n    }\n    return true\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmp2g9c1bj1/tmp2g9c1bj1.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b715f581c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b715f278b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b715f278988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b715f2777b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2g9c1bj1                        0x000055bff0fc63ba <unavailable> + 5050

    5    libc.so.6                          0x00002b715f76d460 __libc_start_main +
    245

    6    tmp2g9c1bj1                        0x000055bff0fc6019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1660028331
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n  if arr.count == 0 {\n    return true\n\
    \  }\n\n  for i in 0..<arr.count-1 {\n    if arr[i] > arr[i+1] {\n      return\
    \ false\n    }\n  }\n\n  return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr: [4, 3, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr:\
    \ [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpjrb9s2v_/tmpjrb9s2v_.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b80106a9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b80103a0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b80103a0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b801039f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjrb9s2v_                        0x0000560b03ac554a <unavailable> + 5450

    5    libc.so.6                          0x00002b8010895460 __libc_start_main +
    245

    6    tmpjrb9s2v_                        0x0000560b03ac51a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660028332
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    guard arr.count > 0 else { return\
    \ true }\n    for index in 0..<arr.count - 1 {\n        if arr[index] > arr[index\
    \ + 1] {\n            return false\n        }\n    }\n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmp2p_u6vht/tmp2p_u6vht.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b265dd78c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b265da6fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b265da6f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b265da6e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2p_u6vht                        0x000055bf3f71e54a <unavailable> + 5450

    5    libc.so.6                          0x00002b265df64460 __libc_start_main +
    245

    6    tmp2p_u6vht                        0x000055bf3f71e1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660028332
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count < 1 {\n        return\
    \ true\n    }\n    let sorted_arr = arr.sorted()\n    for i in 0..<arr.count {\n\
    \        if sorted_arr[i] != arr[i] {\n            if i == arr.count - 1 {\n \
    \               return true\n            }\n            if sorted_arr[i] == arr[i\
    \ + 1] {\n                return true\n            }\n            return false\n\
    \        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr: [4, 3, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr:\
    \ [] as [Int]) == true)"
  status: Exception
  stderr: 'tmp7qpuy1qm/tmp7qpuy1qm.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adeba902c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adeba5f9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adeba5f9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adeba5f87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7qpuy1qm                        0x0000557aa0f005ea <unavailable> + 5610

    5    libc.so.6                          0x00002adebaaee460 __libc_start_main +
    245

    6    tmp7qpuy1qm                        0x0000557aa0f00249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1660028332
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var max = arr[0]\n    var tempMax = max\n    var count = 0\n\
    \    for i in 0..<arr.count {\n        if arr[i] < max {\n            count +=\
    \ 1\n        }\n        if arr[i] > tempMax {\n            tempMax = arr[i]\n\
    \        }\n        if arr[i] == max {\n            max = tempMax\n        }\n\
    \    }\n    return count <= 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpldf4zd3g/tmpldf4zd3g.swift:57: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad51c1ccc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad51bec3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad51bec3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad51bec27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpldf4zd3g                        0x000055b9a6c9d54a <unavailable> + 5450

    5    libc.so.6                          0x00002ad51c3b8460 __libc_start_main +
    245

    6    tmpldf4zd3g                        0x000055b9a6c9d1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660028332
- exit_code: 0
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    var arr = arr\n    var sortedArr\
    \ = arr.sorted()\n    if arr == sortedArr {\n        return true\n    }\n    for\
    \ _ in 1...arr.count {\n        arr.append(arr.removeFirst())\n        if arr\
    \ == sortedArr {\n            return true\n        }\n    }\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [] as [Int]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028332
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    guard arr.count > 0 else { return\
    \ true }\n    var maxValue = arr[0]\n    for i in 1..<arr.count {\n        if\
    \ arr[i] > maxValue {\n            maxValue = arr[i]\n        } else {\n     \
    \       return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr: [4, 3, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr:\
    \ [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpaqit0ydc/tmpaqit0ydc.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2dc162dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2dc1324b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2dc1324988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2dc13237b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpaqit0ydc                        0x0000556ef55b854a <unavailable> + 5450

    5    libc.so.6                          0x00002b2dc1819460 __libc_start_main +
    245

    6    tmpaqit0ydc                        0x0000556ef55b81a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660028332
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    guard arr.count > 1 else {\n   \
    \     return true\n    }\n    var shift_count = 0\n    var i = arr.count - 1\n\
    \    while arr[i] > arr[i - 1] {\n        i -= 1\n        if i == 0 {\n      \
    \      return true\n        }\n    }\n    while arr[i] < arr[i - 1] {\n      \
    \  shift_count += 1\n        i -= 1\n        if i == 0 {\n            return shift_count\
    \ == 1\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr: [4, 3, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr:\
    \ [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpdmcsvrm1/tmpdmcsvrm1.swift:58: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b805f280c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b805ef77b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b805ef77988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b805ef767b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdmcsvrm1                        0x0000561e82a453ba <unavailable> + 5050

    5    libc.so.6                          0x00002b805f46c460 __libc_start_main +
    245

    6    tmpdmcsvrm1                        0x0000561e82a45019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1660028332
- exit_code: 0
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    var arr = arr\n    if arr.count\
    \ == 0 {\n        return true\n    }\n    if arr.count == 1 {\n        return\
    \ true\n    }\n    if arr.count == 2 {\n        return true\n    }\n    if arr.count\
    \ == 3 {\n        if arr[0] >= arr[1] && arr[1] >= arr[2] {\n            return\
    \ true\n        }\n        return false\n    }\n    var i = arr.count - 1\n  \
    \  while i > 0 {\n        if arr[i - 1] > arr[i] {\n            break\n      \
    \  }\n        i -= 1\n    }\n    if i == 0 {\n        return true\n    }\n   \
    \ var j = i - 1\n    while j > 0 {\n        if arr[j - 1] > arr[j] {\n       \
    \     break\n        }\n        j -= 1\n    }\n    if j == 0 {\n        return\
    \ true\n    }\n    i = j\n    var max = arr[i]\n    for x in i + 1 ..< arr.count\
    \ {\n        if arr[x] < max {\n            return false\n        }\n        max\
    \ = arr[x]\n    }\n    while i > 0 {\n        if arr[i - 1] > arr[i] {\n     \
    \       break\n        }\n        i -= 1\n    }\n    if i == 0 {\n        return\
    \ true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028332
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    guard arr.count > 1 else { return\
    \ true }\n    var sorted = arr.sorted()\n    var isSame = true\n    for (index,\
    \ value) in arr.enumerated() {\n        if value != sorted[index] {\n        \
    \    isSame = false\n            break\n        }\n    }\n    return isSame\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpf2qvfu02/tmpf2qvfu02.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1ee4b81c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1ee4878b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1ee4878988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1ee48777b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf2qvfu02                        0x000055cf1ff4b66a <unavailable> + 5738

    5    libc.so.6                          0x00002b1ee4d6d460 __libc_start_main +
    245

    6    tmpf2qvfu02                        0x000055cf1ff4b2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660028332
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count < 2 {\n        return\
    \ true\n    }\n    var min = arr[0]\n    for index in 1..<arr.count {\n      \
    \  if arr[index] < min {\n            return false\n        }\n        min = arr[index]\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpv21t__2j/tmpv21t__2j.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b92fe970c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b92fe667b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b92fe667988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b92fe6667b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv21t__2j                        0x0000556d9c63754a <unavailable> + 5450

    5    libc.so.6                          0x00002b92feb5c460 __libc_start_main +
    245

    6    tmpv21t__2j                        0x0000556d9c6371a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660028332
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    // Write your code here\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr: [3,\
    \ 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpuvfunwyw/tmpuvfunwyw.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac25d07bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac25cd72b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac25cd72988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac25cd717b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuvfunwyw                        0x00005600e121430a <unavailable> + 4874

    5    libc.so.6                          0x00002ac25d267460 __libc_start_main +
    245

    6    tmpuvfunwyw                        0x00005600e1213f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660028332
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    var increasing = true\n    var decreasing\
    \ = true\n    for i in 1..<arr.count {\n        if arr[i] < arr[i - 1] {\n   \
    \         increasing = false\n        }\n        if arr[i] > arr[i - 1] {\n  \
    \          decreasing = false\n        }\n    }\n    return increasing || decreasing\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpjsudr93b/tmpjsudr93b.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8e5d78fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8e5d486b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8e5d486988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8e5d4857b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjsudr93b                        0x000055d53df1254a <unavailable> + 5450

    5    libc.so.6                          0x00002b8e5d97b460 __libc_start_main +
    245

    6    tmpjsudr93b                        0x000055d53df121a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660028332
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    // Implement your solution here\n\
    \    var ball = 0\n    var tempArr = arr\n    for number in tempArr {\n      \
    \  if number != ball {\n            return false\n        }\n        ball += 1\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmp68ev6_zi/tmp68ev6_zi.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0a64e77c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0a64b6eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0a64b6e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0a64b6d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp68ev6_zi                        0x000055d5ea69747a <unavailable> + 5242

    5    libc.so.6                          0x00002b0a65063460 __libc_start_main +
    245

    6    tmp68ev6_zi                        0x000055d5ea6970d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660028332
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr: [4, 3, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr:\
    \ [] as [Int]) == true)"
  status: Exception
  stderr: 'tmp095ydet8/tmp095ydet8.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab085df2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab085ae9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab085ae9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab085ae87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp095ydet8                        0x00005564dacac30a <unavailable> + 4874

    5    libc.so.6                          0x00002ab085fde460 __libc_start_main +
    245

    6    tmp095ydet8                        0x00005564dacabf69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660028331
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr: [4, 3, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr:\
    \ [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpp7jvskwh/tmpp7jvskwh.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac9a2213c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac9a1f0ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac9a1f0a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac9a1f097b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp7jvskwh                        0x000055a2d631449e <unavailable> + 5278

    5    libc.so.6                          0x00002ac9a23ff460 __libc_start_main +
    245

    6    tmpp7jvskwh                        0x000055a2d6313f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660028331
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    // Implement the function here.\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpkk3nni0d/tmpkk3nni0d.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5695517c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b569520eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b569520e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b569520d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkk3nni0d                        0x000055861f3bd30a <unavailable> + 4874

    5    libc.so.6                          0x00002b5695703460 __libc_start_main +
    245

    6    tmpkk3nni0d                        0x000055861f3bcf69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660028332
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    guard arr.count > 0 else { return\
    \ true }\n    let min = arr.min()!\n    var first_index = 0\n    for (index, val)\
    \ in arr.enumerated() {\n        if val == min {\n            first_index = index\n\
    \            break\n        }\n    }\n    for i in 0..<first_index {\n       \
    \ if arr[i] > arr[i+1] {\n            return false\n        }\n    }\n    for\
    \ i in first_index..<arr.count-1 {\n        if arr[i] > arr[i+1] {\n         \
    \   return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr: [4, 3, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr:\
    \ [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpeqc2infy/tmpeqc2infy.swift:59: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b44cd206c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b44ccefdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b44ccefd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b44ccefc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeqc2infy                        0x000055a94fc3b7fa <unavailable> + 6138

    5    libc.so.6                          0x00002b44cd3f2460 __libc_start_main +
    245

    6    tmpeqc2infy                        0x000055a94fc3b459 <unavailable> + 5209

    '
  stdout: ''
  timestamp: 1660028332
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr: [4, 3, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr:\
    \ [] as [Int]) == true)"
  status: Exception
  stderr: 'tmp095ydet8/tmp095ydet8.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab085df2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab085ae9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab085ae9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab085ae87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp095ydet8                        0x00005564dacac30a <unavailable> + 4874

    5    libc.so.6                          0x00002ab085fde460 __libc_start_main +
    245

    6    tmp095ydet8                        0x00005564dacabf69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660028331
- exit_code: 0
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count < 1 {\n        return\
    \ true\n    }\n\n    var right_shift = 0\n    var min = arr[0]\n    for a in arr\
    \ {\n        if a < min {\n            right_shift += 1\n        }\n        if\
    \ right_shift > 1 {\n            return false\n        }\n        min = a\n  \
    \  }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028332
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    for i in 0..<arr.count - 1 {\n        if arr[i] > arr[i + 1]\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpdr1uoenc/tmpdr1uoenc.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba75c70bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba75c402b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba75c402988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba75c4017b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdr1uoenc                        0x00005631385d454a <unavailable> + 5450

    5    libc.so.6                          0x00002ba75c8f7460 __libc_start_main +
    245

    6    tmpdr1uoenc                        0x00005631385d41a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660028332
- exit_code: 1
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n\t// YOUR CODE GOES HERE\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [] as [Int]) == true)"
  status: SyntaxError
  stderr: '/tmp/tmpbr3hc2kr.swift:25:1: error: missing return in global function expected
    to return ''Bool''

    }

    ^

    '
  stdout: ''
  timestamp: 1660028332
- exit_code: 1
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    // A closure to reverse the elements\
    \ in an array from index i to index j.\n    func reverse(arr: inout [Int], i:\
    \ Int, j: Int) {\n        var start = i, end = j\n        while start < end {\n\
    \            let temp = arr[start]\n            arr[start] = arr[end]\n      \
    \      arr[end] = temp\n            start += 1\n            end -= 1\n       \
    \ }\n    }\n    if arr.count == 0 {\n        return true\n    }\n    if arr.count\
    \ == 1 {\n        return true\n    }\n    if arr.count == 2 {\n        return\
    \ arr[0] <= arr[1]\n    }\n    var i = 0\n    while i < arr.count - 1 {\n    \
    \    if arr[i] <= arr[i + 1] {\n            i += 1\n        } else {\n       \
    \     // the first element is the largest, then we return false\n            if\
    \ i == 0 {\n                return false\n            }\n            // we get\
    \ the index of the largest element\n            let j = arr.index(of: arr.max()!)!\n\
    \            // we can always shift the elements after index j and obtain a sorted\
    \ array\n            if j == arr.count - 1 {\n                return true\n  \
    \          }\n            // we shift all the elements from index j to the first\
    \ element\n            reverse(arr: &arr, i: j, j: arr.count - 1)\n          \
    \  reverse(arr: &arr, i: 0, j: arr.count - 1)\n            return true\n     \
    \   }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpxgwhgylm.swift:54:25: warning: 'index(of:)' is deprecated: renamed\
    \ to 'firstIndex(of:)'\n            let j = arr.index(of: arr.max()!)!\n     \
    \                   ^\n/tmp/tmpxgwhgylm.swift:54:25: note: use 'firstIndex(of:)'\
    \ instead\n            let j = arr.index(of: arr.max()!)!\n                  \
    \      ^~~~~\n                        firstIndex\n/tmp/tmpxgwhgylm.swift:60:26:\
    \ error: cannot pass immutable value as inout argument: 'arr' is a 'let' constant\n\
    \            reverse(arr: &arr, i: j, j: arr.count - 1)\n                    \
    \     ^~~~\n/tmp/tmpxgwhgylm.swift:61:26: error: cannot pass immutable value as\
    \ inout argument: 'arr' is a 'let' constant\n            reverse(arr: &arr, i:\
    \ 0, j: arr.count - 1)\n                         ^~~~\n"
  stdout: ''
  timestamp: 1660028332
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    guard arr.count > 0 else {\n   \
    \     return true\n    }\n    var result = false\n    for (index,_) in arr.enumerated()\
    \ {\n        if index == arr.count - 1 {\n            result = true\n        \
    \    break\n        }\n        else if index < arr.count - 1 {\n            if\
    \ arr[index] <= arr[index + 1] {\n                result = true\n            }\n\
    \            else {\n                result = false\n                break\n \
    \           }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr: [4, 3, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr:\
    \ [] as [Int]) == true)"
  status: Exception
  stderr: 'tmp2scxbi88/tmp2scxbi88.swift:59: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7f2ac2dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7f2a924b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7f2a924988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7f2a9237b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2scxbi88                        0x000055a9561f75da <unavailable> + 5594

    5    libc.so.6                          0x00002b7f2ae19460 __libc_start_main +
    245

    6    tmp2scxbi88                        0x000055a9561f7239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1660028332
- exit_code: 1
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var newArr = arr\n    while !isNonDecreasing(arr: newArr) {\n\
    \        newArr = move(arr: newArr)\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr: [4, 3, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr:\
    \ [] as [Int]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpso2zm6g3.swift:28:12: error: cannot find 'isNonDecreasing' in scope\n\
    \    while !isNonDecreasing(arr: newArr) {\n           ^~~~~~~~~~~~~~~\n/tmp/tmpso2zm6g3.swift:29:18:\
    \ error: cannot find 'move' in scope\n        newArr = move(arr: newArr)\n   \
    \              ^~~~\n"
  stdout: ''
  timestamp: 1660028332
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var index = 0\n    while index < arr.count - 1 {\n        if\
    \ arr[index] > arr[index + 1] {\n            return false\n        }\n       \
    \ index += 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr: [4, 3, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr:\
    \ [] as [Int]) == true)"
  status: Exception
  stderr: 'tmp28ycy_83/tmp28ycy_83.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9156a2ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9156721b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9156721988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b91567207b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp28ycy_83                        0x00005612f15a83ba <unavailable> + 5050

    5    libc.so.6                          0x00002b9156c16460 __libc_start_main +
    245

    6    tmp28ycy_83                        0x00005612f15a8019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1660028332
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    // Write your code here\n    guard\
    \ !arr.isEmpty else { return true }\n    var arr = arr\n    for _ in 0..<arr.count\
    \ - 1 {\n        var idx = arr.count - 1\n        for i in stride(from: arr.count\
    \ - 1, through: 1, by: -1) {\n            if arr[i] < arr[i - 1] {\n         \
    \       idx = i - 1\n                break\n            }\n        }\n       \
    \ if idx == arr.count - 1 {\n            return true\n        }\n        let tmp\
    \ = arr[idx]\n        for i in idx..<arr.count - 1 {\n            arr[i] = arr[i\
    \ + 1]\n        }\n        arr[arr.count - 1] = tmp\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmp0f4kxjqr/tmp0f4kxjqr.swift:62: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae5038bfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae5035b6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae5035b6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae5035b57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0f4kxjqr                        0x00005624bd1399ee <unavailable> + 6638

    5    libc.so.6                          0x00002ae503aab460 __libc_start_main +
    245

    6    tmp0f4kxjqr                        0x00005624bd1394b9 <unavailable> + 5305

    '
  stdout: ''
  timestamp: 1660028332
- exit_code: 0
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    var arr = arr\n    guard arr.count\
    \ > 1 else { return true }\n    while arr.first! > arr.last! {\n        arr.insert(arr.removeLast(),\
    \ at: 0)\n    }\n    return arr.sorted() == arr\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr: [4, 3, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr:\
    \ [] as [Int]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028332
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    // TODO: Implement!\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr: [3,\
    \ 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmp318ppdhk/tmp318ppdhk.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9e138fbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9e135f2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9e135f2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9e135f17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp318ppdhk                        0x000055893b74630a <unavailable> + 4874

    5    libc.so.6                          0x00002b9e13ae7460 __libc_start_main +
    245

    6    tmp318ppdhk                        0x000055893b745f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660028332
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    // get the last number in the array\n\
    \    let num = arr.last!\n    var r = arr.count - 1\n    // find the right spot\
    \ for that number \n    while r > 0 && arr[r - 1] > num {\n        r -= 1\n  \
    \  }\n    // return false if the current location is already the right spot, else\
    \ true\n    return r != arr.count - 1\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr: [4, 3, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr:\
    \ [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpy2dgu83a/tmpy2dgu83a.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0bee8dcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0bee5d3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0bee5d3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0bee5d27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy2dgu83a                        0x0000555e5e2cc4ea <unavailable> + 5354

    5    libc.so.6                          0x00002b0beeac8460 __libc_start_main +
    245

    6    tmpy2dgu83a                        0x0000555e5e2cc149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1660028332
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    guard arr.count > 1 else {\n   \
    \     return true\n    }\n    let n = arr.count\n    var hasSmallest = false\n\
    \    var smallest = arr[0]\n    for i in 1..<n {\n        if arr[i] < smallest\
    \ {\n            smallest = arr[i]\n            hasSmallest = true\n        }\n\
    \    }\n    if !hasSmallest {\n        return true\n    }\n    for i in 1..<n\
    \ {\n        if arr[i] == smallest {\n            let start = arr[i+1]\n     \
    \       for j in i+1..<n {\n                if arr[j] < start {\n            \
    \        return false\n                }\n            }\n            for j in\
    \ 0..<i {\n                if arr[j] > start {\n                    return false\n\
    \                }\n            }\n        }\n    }\n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmp3rxrvce0/tmp3rxrvce0.swift:70: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b65d6d23c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b65d6a1ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b65d6a1a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b65d6a197b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3rxrvce0                        0x000055aa095a554a <unavailable> + 5450

    5    libc.so.6                          0x00002b65d6f0f460 __libc_start_main +
    245

    6    tmp3rxrvce0                        0x000055aa095a51a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660028332
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr: [4, 3, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr:\
    \ [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpp7jvskwh/tmpp7jvskwh.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac9a2213c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac9a1f0ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac9a1f0a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac9a1f097b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp7jvskwh                        0x000055a2d631449e <unavailable> + 5278

    5    libc.so.6                          0x00002ac9a23ff460 __libc_start_main +
    245

    6    tmpp7jvskwh                        0x000055a2d6313f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660028331
- exit_code: -1
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n  if arr.count == 0 {\n    return true\n\
    \  }\n  var new_arr = arr\n  while true {\n    if new_arr == new_arr.sorted()\
    \ {\n      return true\n    }\n    let first = new_arr.remove(at: 0)\n    new_arr.append(first)\n\
    \  }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(move_one_ball(arr: [3, 4, 5,\
    \ 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [] as [Int]) == true)"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660028337
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    guard arr.count > 0 else { return\
    \ true }\n    var arr = arr\n    var ret = false\n    let idx = { () -> Int in\n\
    \        for i in 1..<arr.count {\n            if arr[i] > arr[i - 1] {\n    \
    \            return i\n            }\n        }\n        return 0\n    }()\n \
    \   //print(idx)\n    if idx > 0 {\n        let tmp = arr[idx]\n        for i\
    \ in stride(from: idx, to: 0, by: -1) {\n            arr[i] = arr[i - 1]\n   \
    \     }\n        arr[0] = tmp\n        ret = move_one_ball(arr: arr)\n    } else\
    \ {\n        ret = true\n    }\n    return ret\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr: [4, 3, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr:\
    \ [] as [Int]) == true)"
  status: Exception
  stderr: 'tmplxr281mm/tmplxr281mm.swift:64: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae100d34c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae100a2bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae100a2b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae100a2a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplxr281mm                        0x0000560c1411d93e <unavailable> + 6462

    5    libc.so.6                          0x00002ae100f20460 __libc_start_main +
    245

    6    tmplxr281mm                        0x0000560c1411d409 <unavailable> + 5129

    '
  stdout: ''
  timestamp: 1660028332
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    guard arr.count > 0 else { return\
    \ true }\n    var arr = arr\n    var minimum = arr[0]\n    var i = 1\n    while\
    \ i < arr.count {\n        if arr[i] < minimum {\n            return false\n \
    \       }\n        minimum = min(minimum, arr[i])\n        i += 1\n    }\n   \
    \ return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpqar2m1wh/tmpqar2m1wh.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b44e1e44c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b44e1b3bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b44e1b3b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b44e1b3a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqar2m1wh                        0x0000556dd4f3f44a <unavailable> + 5194

    5    libc.so.6                          0x00002b44e2030460 __libc_start_main +
    245

    6    tmpqar2m1wh                        0x0000556dd4f3f0a9 <unavailable> + 4265

    '
  stdout: ''
  timestamp: 1660028332
- exit_code: 1
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    guard arr.count > 0 else { return\
    \ true }\n    guard arr.count > 1 else { return true }\n    // 1: find the position\
    \ of first element in the monotonic sequence\n    let first = find_first_in_increasing_sequence(arr:\
    \ arr)\n    guard first >= 0 else { return true }\n    // 2: determine which element\
    \ is already at first position, and\n    // if it is the one in the monotonic\
    \ sequence\n    // and if so, then return true, else return false\n    let f =\
    \ arr[first]\n    let pos = find_pos_of_val(arr: arr, val: f)\n    if pos == 0\
    \ { return true }\n    else { return false }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr: [4, 3, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr:\
    \ [] as [Int]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpnmpy0c49.swift:27:17: error: cannot find 'find_first_in_increasing_sequence'\
    \ in scope\n    let first = find_first_in_increasing_sequence(arr: arr)\n    \
    \            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpnmpy0c49.swift:33:15:\
    \ error: cannot find 'find_pos_of_val' in scope\n    let pos = find_pos_of_val(arr:\
    \ arr, val: f)\n              ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660028332
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr: [4, 3, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr:\
    \ [] as [Int]) == true)"
  status: Exception
  stderr: 'tmp095ydet8/tmp095ydet8.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab085df2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab085ae9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab085ae9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab085ae87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp095ydet8                        0x00005564dacac30a <unavailable> + 4874

    5    libc.so.6                          0x00002ab085fde460 __libc_start_main +
    245

    6    tmp095ydet8                        0x00005564dacabf69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660028331
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    guard arr.count > 1 else { return\
    \ true }\n    var num_start = 0\n    var num_end = arr.count - 1\n    var res_start\
    \ = arr[0]\n    var res_end = arr[arr.count - 1]\n    while num_start <= num_end\
    \ {\n        if arr[num_start] < res_start {\n            res_start = arr[num_start]\n\
    \        }\n        if arr[num_end] > res_end {\n            res_end = arr[num_end]\n\
    \        }\n        num_start += 1\n        num_end -= 1\n    }\n    return res_start\
    \ < res_end\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr: [3,\
    \ 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpp3r55580/tmpp3r55580.swift:58: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adbfbccec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adbfb9c5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adbfb9c5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adbfb9c47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp3r55580                        0x0000560a30c9b63b <unavailable> + 5691

    5    libc.so.6                          0x00002adbfbeba460 __libc_start_main +
    245

    6    tmpp3r55580                        0x0000560a30c9b019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1660028332
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n\treturn false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr: [4, 3, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr:\
    \ [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpxr0c25uo/tmpxr0c25uo.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adcd804ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adcd7d41b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adcd7d41988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adcd7d407b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxr0c25uo                        0x00005605c0e8030a <unavailable> + 4874

    5    libc.so.6                          0x00002adcd8236460 __libc_start_main +
    245

    6    tmpxr0c25uo                        0x00005605c0e7ff69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660028332
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n  // TODO: Implement me!\n  return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmp7fysxxf5/tmp7fysxxf5.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3dee49ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3dee195b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3dee195988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3dee1947b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7fysxxf5                        0x000055aa1b55d30a <unavailable> + 4874

    5    libc.so.6                          0x00002b3dee68a460 __libc_start_main +
    245

    6    tmp7fysxxf5                        0x000055aa1b55cf69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660028332
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n\tvar ret = true\n\tvar arr = arr\n\t\
    let n = arr.count\n\t// Check if the given array is empty\n\tif n == 0 {\n\t\t\
    return ret\n\t}\n\tif n == 1 {\n\t\treturn ret\n\t}\n\t// Right shift the given\
    \ array by one position\n\t// and check if it results in non-decreasing order\n\
    \tfor _ in 1...n {\n\t\tarr.append(arr.removeFirst())\n\t\tvar i = 0\n\t\twhile\
    \ i < n-1 {\n\t\t\tif arr[i] > arr[i+1] {\n\t\t\t\tret = false\n\t\t\t\tbreak\n\
    \t\t\t}\n\t\t\ti += 1\n\t\t}\n\t\tif ret == true {\n\t\t\tbreak\n\t\t}\n\t}\n\t\
    return ret\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr: [3,\
    \ 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpdw34fgos/tmpdw34fgos.swift:66: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b86da441c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b86da138b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b86da138988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b86da1377b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdw34fgos                        0x000055a3227c563a <unavailable> + 5690

    5    libc.so.6                          0x00002b86da62d460 __libc_start_main +
    245

    6    tmpdw34fgos                        0x000055a3227c5299 <unavailable> + 4761

    '
  stdout: ''
  timestamp: 1660028332
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    guard arr.count > 0 else { return\
    \ true }\n    var sortedArr = arr.sorted()\n    var res = false\n    for i in\
    \ 0..<arr.count {\n        if arr[i] == sortedArr[i] {\n            res = true\n\
    \        } else {\n            res = false\n            break\n        }\n   \
    \ }\n    return res\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmphvb16rpc/tmphvb16rpc.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ade3a48ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ade3a181b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ade3a181988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ade3a1807b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphvb16rpc                        0x0000556dbfb585ea <unavailable> + 5610

    5    libc.so.6                          0x00002ade3a676460 __libc_start_main +
    245

    6    tmphvb16rpc                        0x0000556dbfb58249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1660028332
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n\tguard arr.count > 0 else {\n\t\treturn\
    \ true\n\t}\n\tvar maxElement = arr[0]\n\tfor i in 1..<arr.count {\n\t\tif arr[i]\
    \ < maxElement {\n\t\t\treturn false\n\t\t}\n\t\tif arr[i] > maxElement {\n\t\t\
    \tmaxElement = arr[i]\n\t\t}\n\t}\n\treturn true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr: [4, 3, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr:\
    \ [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpb2qb7zgs/tmpb2qb7zgs.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7877edfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7877bd6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7877bd6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7877bd57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb2qb7zgs                        0x0000555d105fc54a <unavailable> + 5450

    5    libc.so.6                          0x00002b78780cb460 __libc_start_main +
    245

    6    tmpb2qb7zgs                        0x0000555d105fc1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660028332
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n  // TODO: Implement code to solve this\
    \ challenge\n  return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpfwqt57_7/tmpfwqt57_7.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3c2a89ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3c2a595b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3c2a595988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3c2a5947b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfwqt57_7                        0x000055a0d1bdc30a <unavailable> + 4874

    5    libc.so.6                          0x00002b3c2aa8a460 __libc_start_main +
    245

    6    tmpfwqt57_7                        0x000055a0d1bdbf69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660028332
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n  var arr = arr\n  var i = arr.count\
    \ - 1\n  // Find the first index where the element is greater than the previous\n\
    \  // element, that is the first index that has to be shifted to the right\n \
    \ while i > 0 && arr[i] > arr[i - 1] {\n    i -= 1\n  }\n  // Shift all elements\
    \ in the array from index 'i' to the end of the array\n  // towards the right\
    \ side.\n  for j in i..<arr.count {\n    let temp = arr[j]\n    arr[j] = arr[i\
    \ - 1]\n    arr[i - 1] = temp\n    i += 1\n  }\n  for j in 1..<arr.count {\n \
    \   if arr[j] < arr[j - 1] {\n      return false\n    }\n  }\n  return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpn3jv9oa5/tmpn3jv9oa5.swift:60: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4b77ca0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4b77997b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4b77997988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4b779967b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn3jv9oa5                        0x000056075a9ea59a <unavailable> + 5530

    5    libc.so.6                          0x00002b4b77e8c460 __libc_start_main +
    245

    6    tmpn3jv9oa5                        0x000056075a9ea1f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1660028332
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n\n    if arr.count == 1 {\n        return true\n    }\n\n    for\
    \ index in 0..<arr.count - 1 {\n        if arr[index] > arr[index + 1] {\n   \
    \         return false\n        }\n    }\n\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr: [4, 3, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr:\
    \ [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpzcm0uv68/tmpzcm0uv68.swift:54: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad8e3e54c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad8e3b4bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad8e3b4b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad8e3b4a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzcm0uv68                        0x000055f0bd38f54a <unavailable> + 5450

    5    libc.so.6                          0x00002ad8e4040460 __libc_start_main +
    245

    6    tmpzcm0uv68                        0x000055f0bd38f1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660028332
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var sortedArray = arr.sorted()\n    var matches = 0\n    for\
    \ i in 0..<arr.count {\n        if arr[i] == sortedArray[i] {\n            matches\
    \ += 1\n        }\n    }\n    return matches == 1\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr: [4, 3, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr:\
    \ [] as [Int]) == true)"
  status: Exception
  stderr: 'tmp14jfl44p/tmp14jfl44p.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b92d44f1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b92d41e8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b92d41e8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b92d41e77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp14jfl44p                        0x0000555689a5d5ea <unavailable> + 5610

    5    libc.so.6                          0x00002b92d46dd460 __libc_start_main +
    245

    6    tmp14jfl44p                        0x0000555689a5d249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1660028332
- exit_code: 1
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    var arr = arr\n    for _ in 0..<arr.count\
    \ {\n        if isSorted(arr: arr) {\n            return true\n        }\n   \
    \     let last = arr.removeLast()\n        arr.insert(last, at: 0)\n    }\n  \
    \  return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpfrymkkrt.swift:26:12: error: cannot find 'isSorted' in scope\n\
    \        if isSorted(arr: arr) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660028332
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var minIndex = 0\n    for i in 0..<arr.count {\n        if\
    \ arr[i] < arr[minIndex] {\n            minIndex = i\n        }\n    }\n    if\
    \ minIndex == 0 {\n        return true\n    }\n    for i in 0..<arr.count {\n\
    \        if arr[i] > arr[minIndex] {\n            return false\n        }\n  \
    \  }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpzcjncyu7/tmpzcjncyu7.swift:57: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9f4deb9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9f4dbb0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9f4dbb0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9f4dbaf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzcjncyu7                        0x000055d071ed554a <unavailable> + 5450

    5    libc.so.6                          0x00002b9f4e0a5460 __libc_start_main +
    245

    6    tmpzcjncyu7                        0x000055d071ed51a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660028332
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count < 2 {\n        return\
    \ true\n    }\n    var max_val = arr[0]\n    for index in 1..<arr.count {\n  \
    \      if arr[index] < max_val {\n            return false\n        }\n      \
    \  if arr[index] > max_val {\n            max_val = arr[index]\n        }\n  \
    \  }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpfcjlf8n1/tmpfcjlf8n1.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b43c494fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b43c4646b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b43c4646988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b43c46457b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfcjlf8n1                        0x0000564f230db54a <unavailable> + 5450

    5    libc.so.6                          0x00002b43c4b3b460 __libc_start_main +
    245

    6    tmpfcjlf8n1                        0x0000564f230db1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660028332
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    if arr.count == 1 {\n        return true\n    }\n    if arr.count\
    \ == 2 {\n        return arr[0] <= arr[1]\n    }\n    if arr.count == 3 {\n  \
    \      return arr[0] <= arr[1] && arr[1] <= arr[2]\n    }\n    var tempArr = arr\n\
    \    var isNonDecending = false\n    while !isNonDecending {\n        isNonDecending\
    \ = true\n        for i in 0..<(tempArr.count - 1) {\n            if tempArr[i]\
    \ > tempArr[i + 1] {\n                tempArr[i] = tempArr[i] ^ tempArr[i + 1]\n\
    \                tempArr[i + 1] = tempArr[i] ^ tempArr[i + 1]\n              \
    \  tempArr[i] = tempArr[i] ^ tempArr[i + 1]\n                isNonDecending =\
    \ false\n            }\n        }\n    }\n    return isNonDecending\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmp3thzrgxm/tmp3thzrgxm.swift:67: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abe59916c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abe5960db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abe5960d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abe5960c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3thzrgxm                        0x0000555a704b672e <unavailable> + 5934

    5    libc.so.6                          0x00002abe59b02460 __libc_start_main +
    245

    6    tmp3thzrgxm                        0x0000555a704b61f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1660028332
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    return arr.sorted() == arr\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmp7rfeicch/tmp7rfeicch.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1e19b3ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1e19831b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1e19831988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1e198307b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7rfeicch                        0x000055f33a1a941a <unavailable> + 5146

    5    libc.so.6                          0x00002b1e19d26460 __libc_start_main +
    245

    6    tmp7rfeicch                        0x000055f33a1a9079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660028332
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n  var arr = arr\n  var count = 0\n \
    \ let totalCount = arr.count\n  guard arr.count > 1 else { return true }\n  while\
    \ true {\n    if count >= totalCount {\n      return true\n    }\n    var index\
    \ = arr.index(arr.startIndex, offsetBy: totalCount - 1)\n    arr.insert(arr.remove(at:\
    \ index), at: arr.startIndex)\n    var isSorted = true\n    while index > arr.startIndex\
    \ {\n      if arr[index] < arr[index - 1] {\n        isSorted = false\n      \
    \  break\n      }\n      index = arr.index(before: index)\n    }\n    if isSorted\
    \ {\n      return true\n    }\n    count += 1\n  }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr: [4, 3, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr:\
    \ [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpqpv7gp2h/tmpqpv7gp2h.swift:64: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab56c240c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab56bf37b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab56bf37988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab56bf367b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqpv7gp2h                        0x000055beefd0371e <unavailable> + 5918

    5    libc.so.6                          0x00002ab56c42c460 __libc_start_main +
    245

    6    tmpqpv7gp2h                        0x000055beefd031e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1660028332
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    // TODO: Implement\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmp4ny5yuth/tmp4ny5yuth.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b034d3c9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b034d0c0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b034d0c0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b034d0bf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4ny5yuth                        0x0000563ec3af730a <unavailable> + 4874

    5    libc.so.6                          0x00002b034d5b5460 __libc_start_main +
    245

    6    tmp4ny5yuth                        0x0000563ec3af6f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660028332
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    // your code goes here\n    guard\
    \ arr.count > 0 else { return true }\n    var newArr = arr\n    var i = 0\n  \
    \  while i < newArr.count - 1 {\n        if newArr[i] > newArr[i + 1] {\n    \
    \        newArr.remove(at: i)\n            let last = newArr.removeLast()\n  \
    \          newArr.insert(last, at: 0)\n            i = 0\n        } else {\n \
    \           i += 1\n        }\n    }\n    return newArr == newArr.sorted()\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmp6nr3xo7z/tmp6nr3xo7z.swift:56: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6eb2570c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6eb2267b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6eb2267988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6eb22667b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6nr3xo7z                        0x000055b7aa5c27ee <unavailable> + 6126

    5    libc.so.6                          0x00002b6eb275c460 __libc_start_main +
    245

    6    tmp6nr3xo7z                        0x000055b7aa5c22b9 <unavailable> + 4793

    '
  stdout: ''
  timestamp: 1660028332
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count < 2 {\n        return\
    \ true\n    }\n    var sortedArr = arr.sorted()\n    for i in 0..<arr.count {\n\
    \        if arr[i] != sortedArr[i] {\n            return false\n        }\n  \
    \  }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpqt_ni2zu/tmpqt_ni2zu.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9756f06c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9756bfdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9756bfd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9756bfc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqt_ni2zu                        0x000055e6494055ea <unavailable> + 5610

    5    libc.so.6                          0x00002b97570f2460 __libc_start_main +
    245

    6    tmpqt_ni2zu                        0x000055e649405249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1660028332
- exit_code: 1
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n  guard arr.count > 1 else { return\
    \ true }\n  var max: Int = arr[0]\n  for i in 1..<arr.count {\n    if arr[i] <\
    \ max { return false }\n    max = max(max, arr[i])\n  }\n  return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [] as [Int]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpovbvb1g9.swift:28:11: error: cannot call value of non-function\
    \ type 'Int'\n    max = max(max, arr[i])\n          ^\n"
  stdout: ''
  timestamp: 1660028332
- exit_code: 1
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    var num_right_shifts = 0\n    var\
    \ sorted_arr = arr.sorted()\n    while sorted_arr != arr {\n        num_right_shifts\
    \ += 1\n        arr.rotate(shiftingToStart: 1)\n    }\n    if num_right_shifts\
    \ == arr.count {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr: [4, 3, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr:\
    \ [] as [Int]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpwa4yylr9.swift:28:13: error: value of type '[Int]' has no member\
    \ 'rotate'\n        arr.rotate(shiftingToStart: 1)\n        ~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660028332
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr: [4, 3, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr:\
    \ [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpp7jvskwh/tmpp7jvskwh.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac9a2213c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac9a1f0ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac9a1f0a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac9a1f097b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp7jvskwh                        0x000055a2d631449e <unavailable> + 5278

    5    libc.so.6                          0x00002ac9a23ff460 __libc_start_main +
    245

    6    tmpp7jvskwh                        0x000055a2d6313f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660028331
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    // Base case if array is empty\n\
    \    if arr.count == 0 {\n        return true\n    }\n    // Base case if sorted\n\
    \    if arr.sorted() == arr {\n        return true\n    }\n    // Create array\
    \ of right shifts\n    var right_shifts = [Int]()\n    for index in 0..<arr.count\
    \ {\n        // Create array of right shifts\n        right_shifts.append(arr[index])\n\
    \        // Check if array is sorted\n        if right_shifts.sorted() == right_shifts\
    \ {\n            return true\n        }\n    }\n    return false\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmp6fd7hw22/tmp6fd7hw22.swift:60: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b528e2c9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b528dfc0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b528dfc0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b528dfbf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6fd7hw22                        0x000055b937d0e88e <unavailable> + 6286

    5    libc.so.6                          0x00002b528e4b5460 __libc_start_main +
    245

    6    tmp6fd7hw22                        0x000055b937d0e359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660028332
- exit_code: 1
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    var moved = true\n    for i in 0..<arr.count-1\
    \ {\n        if arr[i] > arr[i+1] {\n            moved = false\n            let\
    \ temp = arr[i]\n            arr[i] = arr[i+1]\n            arr[i+1] = temp\n\
    \        }\n    }\n    if moved {\n        return true\n    } else {\n       \
    \ return move_one_ball(arr: arr)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr: [4, 3, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr:\
    \ [] as [Int]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp9c9_1ov4.swift:29:16: error: cannot assign through subscript: 'arr'\
    \ is a 'let' constant\n            arr[i] = arr[i+1]\n            ~~~^\n/tmp/tmp9c9_1ov4.swift:30:16:\
    \ error: cannot assign through subscript: 'arr' is a 'let' constant\n        \
    \    arr[i+1] = temp\n            ~~~^\n"
  stdout: ''
  timestamp: 1660028332
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    guard arr.count > 0 else {\n   \
    \     return true\n    }\n    let sortedArr = arr.sorted()\n    var index = 0\n\
    \    for i in arr {\n        if sortedArr[index] == i {\n            index +=\
    \ 1\n        }\n    }\n    return index == arr.count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr: [4, 3, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr:\
    \ [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpzwbjp3h5/tmpzwbjp3h5.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b57d4124c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b57d3e1bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b57d3e1b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b57d3e1a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzwbjp3h5                        0x00005615ac4095ca <unavailable> + 5578

    5    libc.so.6                          0x00002b57d4310460 __libc_start_main +
    245

    6    tmpzwbjp3h5                        0x00005615ac409229 <unavailable> + 4649

    '
  stdout: ''
  timestamp: 1660028332
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    var a = arr\n    for _ in 0..<a.count\
    \ {\n        var s = a.sorted()\n        if a == s {\n            return true\n\
    \        }\n        let x = a.remove(at: a.count - 1)\n        a.insert(x, at:\
    \ 0)\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmp213rbhsl/tmp213rbhsl.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3262cbfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b32629b6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b32629b6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b32629b57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp213rbhsl                        0x0000556f422ba9e3 <unavailable> + 6627

    5    libc.so.6                          0x00002b3262eab460 __libc_start_main +
    245

    6    tmp213rbhsl                        0x0000556f422ba309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1660028332
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    guard arr.count > 0 else {\n   \
    \     return true\n    }\n    var arr = arr\n    var minElement = arr[0]\n   \
    \ var maxElement = arr[0]\n    for element in arr {\n        if element < minElement\
    \ {\n            minElement = element\n        }\n        if element > maxElement\
    \ {\n            maxElement = element\n        }\n    }\n    if maxElement ==\
    \ arr[0] {\n        var temp = arr[0]\n        for i in 1..<arr.count {\n    \
    \        arr[i - 1] = arr[i]\n        }\n        arr[arr.count - 1] = temp\n \
    \       return move_one_ball(arr: arr)\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr: [4, 3, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr:\
    \ [] as [Int]) == true)"
  status: Exception
  stderr: 'tmppwci3bbb/tmppwci3bbb.swift:64: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7ed86ecc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7ed83e3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7ed83e3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7ed83e27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppwci3bbb                        0x000055e68c6d788e <unavailable> + 6286

    5    libc.so.6                          0x00002b7ed88d8460 __libc_start_main +
    245

    6    tmppwci3bbb                        0x000055e68c6d7359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660028332
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    let n = arr.count\n    // base cases\n\
    \    if n <= 0 {\n        return true\n    }\n    if n == 1 {\n        return\
    \ true\n    }\n    // Check if it is possible to get non-decreasing order by performing\n\
    \    // n-1 right shift operations\n    for i in 0...n-2 {\n        if (arr[i]\
    \ < arr[i+1]) {\n            continue\n        }\n        // check if it is possible\
    \ to get non-decreasing order by performing\n        // n-2 right shift operations\n\
    \        for j in 0...n-2 {\n            if (j+1 != i && arr[j] < arr[j+1]) {\n\
    \                continue\n            }\n            if (j+1 == i && arr[j] <\
    \ arr[j+2]) {\n                continue\n            }\n            // not possible\
    \ to obtain non-decreasing order\n            return false\n        }\n      \
    \  // it is possible to obtain non-decreasing order\n        return true\n   \
    \ }\n    // no operation required, already sorted\n    return true\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpttfnnnt7/tmpttfnnnt7.swift:70: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae9a25cac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae9a22c1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae9a22c1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae9a22c07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpttfnnnt7                        0x0000560ecd66154a <unavailable> + 5450

    5    libc.so.6                          0x00002ae9a27b6460 __libc_start_main +
    245

    6    tmpttfnnnt7                        0x0000560ecd6611a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660028332
- exit_code: -1
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var sortedArr = arr.sorted()\n    if sortedArr == arr {\n \
    \       return true\n    }\n    var ballMoved = false\n    var idx = 0\n    while\
    \ idx < arr.count - 1 {\n        if arr[idx] > arr[idx + 1] {\n            ballMoved\
    \ = true\n            break\n        }\n        idx += 1\n    }\n    if !ballMoved\
    \ {\n        return false\n    }\n    var newArr = arr\n    var i = newArr.count\
    \ - 1\n    let movedBall = newArr[i]\n    while i > 0 {\n        newArr[i] = newArr[i\
    \ - 1]\n        i -= 1\n    }\n    newArr[0] = movedBall\n    return move_one_ball(arr:\
    \ newArr)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr: [3,\
    \ 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660028338
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    var num = 0\n    for i in 1..<arr.count\
    \ {\n        if arr[i-1] < arr[i] {\n            num += 1\n        }\n    }\n\
    \    if num == arr.count - 1 {\n        return true\n    }\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmp4cx98sgw/tmp4cx98sgw.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b97b94acc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b97b91a3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b97b91a3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b97b91a27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4cx98sgw                        0x0000556966bfc54a <unavailable> + 5450

    5    libc.so.6                          0x00002b97b9698460 __libc_start_main +
    245

    6    tmp4cx98sgw                        0x0000556966bfc1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660028332
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    // if empty\n    if arr.count ==\
    \ 0 {\n        return true\n    }\n    // start at 0, end at end\n    var start:\
    \ Int = 0\n    var end: Int = arr.count - 1\n    // while start < end\n    while\
    \ start < end {\n        // if start < end\n        if arr[start] < arr[end] {\n\
    \            // start++\n            start += 1\n        } else {\n          \
    \  // end--\n            end -= 1\n        }\n    }\n    // if start > 0 and arr[start\
    \ - 1] > arr[start]\n    if start > 0 && arr[start - 1] > arr[start] {\n     \
    \   // return false\n        return false\n    }\n    // return true\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr: [3,\
    \ 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpuhzsamkt/tmpuhzsamkt.swift:66: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5666aa6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b566679db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b566679d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b566679c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuhzsamkt                        0x000056545e2c654e <unavailable> + 5454

    5    libc.so.6                          0x00002b5666c92460 __libc_start_main +
    245

    6    tmpuhzsamkt                        0x000056545e2c6019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1660028332
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n\n    if arr.sorted() == arr {\n        return true\n    }\n\n\
    \    var maxValue = Int.min\n    var minValue = Int.max\n    var maxIndex = 0\n\
    \    var minIndex = 0\n\n    for (index, value) in arr.enumerated() {\n      \
    \  if value > maxValue {\n            maxValue = value\n            maxIndex =\
    \ index\n        }\n\n        if value < minValue {\n            minValue = value\n\
    \            minIndex = index\n        }\n    }\n\n    if minIndex != 0 && maxIndex\
    \ > minIndex {\n        return false\n    }\n\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr: [4, 3, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr:\
    \ [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpifwlliki/tmpifwlliki.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1d43591c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1d43288b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1d43288988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1d432877b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpifwlliki                        0x000056097591280e <unavailable> + 6158

    5    libc.so.6                          0x00002b1d4377d460 __libc_start_main +
    245

    6    tmpifwlliki                        0x00005609759122d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660028332
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n  guard arr.count > 0 else { return\
    \ true }\n  var arr = arr\n  arr.sort()\n  for index in 0..<arr.count {\n    if\
    \ arr[index] != index+1 {\n      return false\n    }\n  }\n  return true\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpys8034b6/tmpys8034b6.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b20d0b62c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b20d0859b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b20d0859988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b20d08587b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpys8034b6                        0x00005635619cc737 <unavailable> + 5943

    5    libc.so.6                          0x00002b20d0d4e460 __libc_start_main +
    245

    6    tmpys8034b6                        0x00005635619cc2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660028332
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n\tvar max: Int = Int.min\n\tfor i in\
    \ arr {\n\t\tif i > max {\n\t\t\tmax = i\n\t\t}\n\t}\n\tvar count: Int = 0\n\t\
    for i in arr {\n\t\tif i == max {\n\t\t\tcount += 1\n\t\t}\n\t}\n\tif count >\
    \ 1 {\n\t\treturn false\n\t}\n\treturn true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr: [4, 3, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr:\
    \ [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpe_3db1xf/tmpe_3db1xf.swift:57: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae304c84c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae30497bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae30497b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae30497a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe_3db1xf                        0x0000564ab4dfc60e <unavailable> + 5646

    5    libc.so.6                          0x00002ae304e70460 __libc_start_main +
    245

    6    tmpe_3db1xf                        0x0000564ab4dfc0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660028332
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    // Empty array\n    if arr.count\
    \ == 0 {\n        return true\n    }\n    // Single element array\n    if arr.count\
    \ == 1 {\n        return true\n    }\n    // Find the number of right shifts required\
    \ to get an increasing array\n    var count = 0\n    for i in 1..<arr.count {\n\
    \        if arr[i] < arr[i-1] {\n            count += 1\n        }\n    }\n  \
    \  // Check if the number of right shifts required is less than the length of\
    \ the array\n    if count < arr.count {\n        return true\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr: [3,\
    \ 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpcn0wad3k/tmpcn0wad3k.swift:61: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6a1dbd4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6a1d8cbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6a1d8cb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6a1d8ca7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcn0wad3k                        0x000055b0009ac6de <unavailable> + 5854

    5    libc.so.6                          0x00002b6a1ddc0460 __libc_start_main +
    245

    6    tmpcn0wad3k                        0x000055b0009ac1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660028332
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    guard arr.count > 0 else {\n   \
    \     return true\n    }\n    var l = arr.count - 1\n    var r = arr.count - 1\n\
    \    while l > 0 && arr[l] < arr[l - 1] {\n        l -= 1\n    }\n    for i in\
    \ l..<r {\n        if arr[i] > arr[i + 1] {\n            return false\n      \
    \  }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmp06pmtmvk/tmp06pmtmvk.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b986cbd4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b986c8cbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b986c8cb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b986c8ca7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp06pmtmvk                        0x0000555b62b146de <unavailable> + 5854

    5    libc.so.6                          0x00002b986cdc0460 __libc_start_main +
    245

    6    tmp06pmtmvk                        0x0000555b62b141a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660028333
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var i = 0\n    var j = 0\n    for _ in 0..<arr.count {\n  \
    \      if arr[i] > arr[j] {\n            i = j\n        }\n        j += 1\n  \
    \  }\n    var k = i\n    for _ in 0..<arr.count {\n        if arr[k] > arr[i]\
    \ {\n            return false\n        }\n        k += 1\n        if k == arr.count\
    \ {\n            k = 0\n        }\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr: [4, 3, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr:\
    \ [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpwjibwp7g/tmpwjibwp7g.swift:61: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7ec20cbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7ec1dc2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7ec1dc2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7ec1dc17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwjibwp7g                        0x000055b42da1f54a <unavailable> + 5450

    5    libc.so.6                          0x00002b7ec22b7460 __libc_start_main +
    245

    6    tmpwjibwp7g                        0x000055b42da1f1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660028333
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    // Check if array is empty. If yes\
    \ then return true\n    if arr.isEmpty {\n        return true\n    }\n    // Check\
    \ if array has only one element. If yes then return true\n    if arr.count ==\
    \ 1 {\n        return true\n    }\n    // Store the last element of array in 'min'\
    \ variable\n    let min = arr[arr.count - 1]\n    // Check if all elements in\
    \ the array are greater than or equal to 'min' variable.\n    // If yes then return\
    \ true\n    if arr.filter({ $0 >= min }).count == arr.count {\n        return\
    \ true\n    }\n    // Store last element of array in 'max' variable\n    let max\
    \ = arr[0]\n    // Check if all elements in the array are less than or equal to\
    \ 'max' variable.\n    // If yes then return true\n    if arr.filter({ $0 <= max\
    \ }).count == arr.count {\n        return true\n    }\n    // If none of the above\
    \ conditions is satisfied then return false\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr: [4, 3, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr:\
    \ [] as [Int]) == true)"
  status: Exception
  stderr: 'tmp2iaze3mx/tmp2iaze3mx.swift:63: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0d8e3b9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0d8e0b0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0d8e0b0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0d8e0af7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2iaze3mx                        0x000056007e13151a <unavailable> + 5402

    5    libc.so.6                          0x00002b0d8e5a5460 __libc_start_main +
    245

    6    tmp2iaze3mx                        0x000056007e131179 <unavailable> + 4473

    '
  stdout: ''
  timestamp: 1660028333
- exit_code: 1
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    guard arr.count > 0 else { return\
    \ true }\n    var n = arr.count - 1\n    var i = n - 1\n    while i >= 0 {\n \
    \       if arr[i] > arr[i + 1] {\n            while n > i && arr[n] <= arr[i]\
    \ {\n                n -= 1\n            }\n            if n <= i {\n        \
    \        return false\n            }\n            swap(&arr, i, n)\n        }\n\
    \        i -= 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr: [4, 3, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr:\
    \ [] as [Int]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpuopbqsf1.swift:35:27: error: extra argument in call\n         \
    \   swap(&arr, i, n)\n                ~~~~~~~~~~^~\n/tmp/tmpuopbqsf1.swift:35:24:\
    \ error: cannot convert value of type 'Int' to expected argument type '[Int]'\n\
    \            swap(&arr, i, n)\n                       ^\n/tmp/tmpuopbqsf1.swift:35:18:\
    \ error: cannot pass immutable value as inout argument: 'arr' is a 'let' constant\n\
    \            swap(&arr, i, n)\n                 ^~~~\n"
  stdout: ''
  timestamp: 1660028332
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var max_ = arr[0]\n    var count = 0\n    for i in 0..<arr.count\
    \ - 1 {\n        if arr[i + 1] < max_ {\n            count += 1\n        }\n \
    \       if arr[i + 1] > max_ {\n            max_ = arr[i + 1]\n        }\n   \
    \ }\n    return count <= 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpp97bnmwk/tmpp97bnmwk.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b44e0adac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b44e07d1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b44e07d1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b44e07d07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp97bnmwk                        0x000055fc747d654a <unavailable> + 5450

    5    libc.so.6                          0x00002b44e0cc6460 __libc_start_main +
    245

    6    tmpp97bnmwk                        0x000055fc747d61a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660028333
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    let s = arr.sorted()\n    return\
    \ arr == s\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr: [3,\
    \ 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpu4u2a9lj/tmpu4u2a9lj.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad442662c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad442359b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad442359988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad4423587b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu4u2a9lj                        0x000055e8d775641a <unavailable> + 5146

    5    libc.so.6                          0x00002ad44284e460 __libc_start_main +
    245

    6    tmpu4u2a9lj                        0x000055e8d7756079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660028332
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    var sortedArr = arr.sorted()\n \
    \   for i in 0..<arr.count {\n        if arr[i] != sortedArr[i] {\n          \
    \  return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr: [4, 3, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr:\
    \ [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpply7egt7/tmpply7egt7.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abf4b0cac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abf4adc1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abf4adc1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abf4adc07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpply7egt7                        0x000055dccdc1e5ea <unavailable> + 5610

    5    libc.so.6                          0x00002abf4b2b6460 __libc_start_main +
    245

    6    tmpply7egt7                        0x000055dccdc1e249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1660028333
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    guard arr.count > 1 else { return\
    \ true }\n    var max_num = arr[0]\n    for i in 1..<arr.count {\n        if arr[i]\
    \ < max_num {\n            return false\n        }\n        max_num = max(max_num,\
    \ arr[i])\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmp3dyfsvhl/tmp3dyfsvhl.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6f43718c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6f4340fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6f4340f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6f4340e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3dyfsvhl                        0x000055d919e265da <unavailable> + 5594

    5    libc.so.6                          0x00002b6f43904460 __libc_start_main +
    245

    6    tmp3dyfsvhl                        0x000055d919e26239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1660028333
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    let empty: [Int] = []\n    if arr\
    \ == empty {\n        return true\n    }\n    var sorted_arr = arr.sorted()\n\
    \    let count: Int = sorted_arr.count\n    var counter: Int = 0\n    for i in\
    \ 0..<count {\n        if sorted_arr[i] == arr[i] {\n            counter += 1\n\
    \        }\n    }\n    if counter == count - 1 {\n        return true\n    }\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmp8xxq2ovu/tmp8xxq2ovu.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aef10f4fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aef10c46b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aef10c46988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aef10c457b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8xxq2ovu                        0x000055c1c824264a <unavailable> + 5706

    5    libc.so.6                          0x00002aef1113b460 __libc_start_main +
    245

    6    tmp8xxq2ovu                        0x000055c1c82422a9 <unavailable> + 4777

    '
  stdout: ''
  timestamp: 1660028333
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    // TODO: Implement this function\
    \ here\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpwci73g44/tmpwci73g44.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8c1d0e9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8c1cde0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8c1cde0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8c1cddf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwci73g44                        0x00005584e3d0830a <unavailable> + 4874

    5    libc.so.6                          0x00002b8c1d2d5460 __libc_start_main +
    245

    6    tmpwci73g44                        0x00005584e3d07f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660028333
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    var min = Int.max\n    var current\
    \ = Int.max\n    var n = 0\n    var i = arr.count - 1\n    while i >= 0 {\n  \
    \      if arr[i] < current {\n            current = arr[i]\n            n += 1\n\
    \        }\n        if arr[i] > min {\n            return false\n        }\n \
    \       min = arr[i]\n        i -= 1\n    }\n    return n == arr.count\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmp13s9dj1a/tmp13s9dj1a.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2418b5ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2418851b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2418851988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b24188507b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp13s9dj1a                        0x000055d959c8a3ba <unavailable> + 5050

    5    libc.so.6                          0x00002b2418d46460 __libc_start_main +
    245

    6    tmp13s9dj1a                        0x000055d959c8a019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1660028333
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    var count = 0\n    for i in 1..<arr.count\
    \ {\n        if arr[i] < arr[i-1] {\n            count += 1\n        }\n    }\n\
    \    return count <= 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b4e13aabc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4e137a2561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b4e137a2286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b4e137a213c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b4e137a1bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpv8_iyw3z                        0x00005590372a1992 <unavailable> + 6546

    6    tmpv8_iyw3z                        0x00005590372a17ee <unavailable> + 6126

    7    libc.so.6                          0x00002b4e13c97460 __libc_start_main +
    245

    8    tmpv8_iyw3z                        0x00005590372a11a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660028333
- exit_code: 0
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n\tif arr.count < 1 {\n\t\treturn true\n\
    \t}\n\tvar counter = 0\n\tfor index in 0..<arr.count - 1 {\n\t\tif arr[index]\
    \ > arr[index + 1] {\n\t\t\tcounter += 1\n\t\t}\n\t}\n\treturn counter <= 1\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [] as [Int]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028333
- exit_code: -1
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var arr = arr\n    var i = 0\n    while i < arr.count - 1 {\n\
    \        if arr[i] > arr[i + 1] {\n            arr.append(arr.removeFirst())\n\
    \            i = 0\n        } else {\n            i += 1\n        }\n    }\n \
    \   return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660028338
- exit_code: 0
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count < 2 {\n        return\
    \ true\n    }\n    var sortedArr = arr.sorted()\n    for _ in 0..<arr.count {\n\
    \        if sortedArr == arr {\n            return true\n        }\n        if\
    \ sortedArr[0] == arr[0] {\n            return false\n        }\n        sortedArr.insert(sortedArr.remove(at:\
    \ sortedArr.count - 1), at: 0)\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr: [4, 3, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr:\
    \ [] as [Int]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028333
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n  if arr.count < 2 {\n    return true\n\
    \  }\n  let minNum = arr.min()!\n  let index = arr.firstIndex(of: minNum)!\n \
    \ if index == 0 {\n    return true\n  }\n  var num = 0\n  for i in 1..<arr.count\
    \ {\n    if arr[i] < arr[i - 1] {\n      num += 1\n    }\n  }\n  return num ==\
    \ index\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr: [3,\
    \ 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpi2onah1q/tmpi2onah1q.swift:54: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abea68dfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abea65d6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abea65d6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abea65d57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi2onah1q                        0x0000559921f5769a <unavailable> + 5786

    5    libc.so.6                          0x00002abea6acb460 __libc_start_main +
    245

    6    tmpi2onah1q                        0x0000559921f572f9 <unavailable> + 4857

    '
  stdout: ''
  timestamp: 1660028333
- exit_code: 0
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    guard arr.count > 1 else { return\
    \ true }\n    var arr = arr\n    var j = 0\n    while (j < arr.count - 1) {\n\
    \        if arr[j] <= arr[j + 1] {\n            j += 1\n        } else {\n   \
    \         arr.insert(arr.removeLast(), at: 0)\n        }\n    }\n    return arr\
    \ == arr.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028333
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    var min: Int = Int.max\n    var\
    \ max: Int = Int.min\n    var increasing_order: Bool = true\n    var decreasing_order:\
    \ Bool = true\n    for (i, num) in arr.enumerated() {\n        if num > max {\n\
    \            max = num\n        }\n        if num < min {\n            min = num\n\
    \        }\n        if i > 0 {\n            if arr[i] < arr[i - 1] {\n       \
    \         increasing_order = false\n            }\n            if arr[i] > arr[i\
    \ - 1] {\n                decreasing_order = false\n            }\n        }\n\
    \    }\n    if increasing_order || decreasing_order {\n        return true\n \
    \   }\n    return min == 1 && max == arr.count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr: [4, 3, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr:\
    \ [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpjfoswj6v/tmpjfoswj6v.swift:64: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae971855c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae97154cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae97154c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae97154b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjfoswj6v                        0x0000558fbed446a7 <unavailable> + 5799

    5    libc.so.6                          0x00002ae971a41460 __libc_start_main +
    245

    6    tmpjfoswj6v                        0x0000558fbed44239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1660028333
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    let sorted = arr.sorted()\n    var\
    \ difference = 0\n    for (index, item) in arr.enumerated() {\n        if item\
    \ != sorted[index] {\n            difference += 1\n        }\n    }\n    return\
    \ difference == 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmppygb5lbq/tmppygb5lbq.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2759164c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2758e5bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2758e5b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2758e5a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppygb5lbq                        0x000055b1eb7ad61a <unavailable> + 5658

    5    libc.so.6                          0x00002b2759350460 __libc_start_main +
    245

    6    tmppygb5lbq                        0x000055b1eb7ad279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1660028333
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    // Add code here\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpbaislj_c/tmpbaislj_c.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7d74c5ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7d74951b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7d74951988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7d749507b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbaislj_c                        0x0000563fcf16630a <unavailable> + 4874

    5    libc.so.6                          0x00002b7d74e46460 __libc_start_main +
    245

    6    tmpbaislj_c                        0x0000563fcf165f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660028333
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    // Your code here\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpfv_rjwp9/tmpfv_rjwp9.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b72721e2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7271ed9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7271ed9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7271ed87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfv_rjwp9                        0x000055bdda6ed30a <unavailable> + 4874

    5    libc.so.6                          0x00002b72723ce460 __libc_start_main +
    245

    6    tmpfv_rjwp9                        0x000055bdda6ecf69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660028331
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var newArr = arr\n    var maxElement = newArr[0]\n    var ans\
    \ = true\n    for i in 1..<newArr.count {\n        if maxElement <= newArr[i]\
    \ {\n            maxElement = newArr[i]\n        } else {\n            newArr[i]\
    \ = maxElement\n            ans = false\n        }\n    }\n    return ans\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpqxb1gadd/tmpqxb1gadd.swift:54: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4b9ee34c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4b9eb2bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4b9eb2b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4b9eb2a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqxb1gadd                        0x0000555de28e659a <unavailable> + 5530

    5    libc.so.6                          0x00002b4b9f020460 __libc_start_main +
    245

    6    tmpqxb1gadd                        0x0000555de28e61f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1660028333
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    return arr.sorted() == arr\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmp7rfeicch/tmp7rfeicch.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1e19b3ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1e19831b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1e19831988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1e198307b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7rfeicch                        0x000055f33a1a941a <unavailable> + 5146

    5    libc.so.6                          0x00002b1e19d26460 __libc_start_main +
    245

    6    tmp7rfeicch                        0x000055f33a1a9079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660028332
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n  return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr: [4, 3, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr:\
    \ [] as [Int]) == true)"
  status: Exception
  stderr: 'tmp8eyqhp5b/tmp8eyqhp5b.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba1b50d1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba1b4dc8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba1b4dc8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba1b4dc77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8eyqhp5b                        0x000055b4278d430a <unavailable> + 4874

    5    libc.so.6                          0x00002ba1b52bd460 __libc_start_main +
    245

    6    tmp8eyqhp5b                        0x000055b4278d3f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660028333
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    for i in 0..<arr.count-1 {\n        if arr[i] > arr[i+1] {\n\
    \            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr: [4, 3, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr:\
    \ [] as [Int]) == true)"
  status: Exception
  stderr: 'tmp5fyk87kb/tmp5fyk87kb.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b23e0663c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b23e035ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b23e035a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b23e03597b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5fyk87kb                        0x00005654fd6d654a <unavailable> + 5450

    5    libc.so.6                          0x00002b23e084f460 __libc_start_main +
    245

    6    tmp5fyk87kb                        0x00005654fd6d61a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660028333
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    guard arr.count > 1 else { return\
    \ true }\n    var end = arr.count - 1\n    while end >= 0 {\n        if arr[end]\
    \ != arr.count {\n            break\n        }\n        end -= 1\n    }\n    if\
    \ end == -1 { return true }\n    var i = end\n    while i >= 0 {\n        if arr[i]\
    \ > arr[i + 1] {\n            break\n        }\n        i -= 1\n    }\n    return\
    \ i == -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr: [3,\
    \ 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ae0af3c8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae0af0bf561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ae0af0bf286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ae0af0bf13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ae0af0bebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ae0aeebee83 <unavailable> + 188035

    6    tmppl_u01vu                        0x00005559101ce849 <unavailable> + 6217

    7    tmppl_u01vu                        0x00005559101ce345 <unavailable> + 4933

    8    libc.so.6                          0x00002ae0af5b4460 __libc_start_main +
    245

    9    tmppl_u01vu                        0x00005559101ce019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1660028333
- exit_code: -1
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    guard arr.count > 0 else { return\
    \ true }\n    guard arr.count > 1 else { return true }\n    var arr = arr\n  \
    \  let sorted = arr.sorted()\n    var i = 0\n    while i < arr.count {\n     \
    \   if arr[i] != sorted[i] {\n            arr.insert(arr.remove(at: i), at: 0)\n\
    \        } else {\n            i += 1\n        }\n    }\n    return arr == sorted\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [] as [Int]) == true)"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660028338
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    let count = arr.count\n    if count\
    \ == 0 {\n        return true\n    }\n    var sortedArray = arr.sorted()\n   \
    \ var shift = 0\n    for i in 0..<count {\n        if arr[i] != sortedArray[i]\
    \ {\n            shift += 1\n        }\n    }\n    return shift < 3\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpcm5e_tqo/tmpcm5e_tqo.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba49b4fcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba49b1f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba49b1f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba49b1f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcm5e_tqo                        0x000055c4f16a75ea <unavailable> + 5610

    5    libc.so.6                          0x00002ba49b6e8460 __libc_start_main +
    245

    6    tmpcm5e_tqo                        0x000055c4f16a7249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1660028333
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr: [4, 3, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr:\
    \ [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpp7jvskwh/tmpp7jvskwh.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac9a2213c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac9a1f0ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac9a1f0a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac9a1f097b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp7jvskwh                        0x000055a2d631449e <unavailable> + 5278

    5    libc.so.6                          0x00002ac9a23ff460 __libc_start_main +
    245

    6    tmpp7jvskwh                        0x000055a2d6313f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660028331
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    guard arr.count > 0 else { return\
    \ true }\n    guard arr.count > 1 else { return true }\n    guard arr.count >\
    \ 2 else { return arr[0] <= arr[1] }\n    var newArr = arr\n    for i in (1..<newArr.count)\
    \ {\n        if newArr[i] < newArr[i-1] {\n            let temp = newArr[i]\n\
    \            newArr[i] = newArr[i-1]\n            newArr[i-1] = temp\n       \
    \ }\n    }\n    for i in (1..<newArr.count) {\n        if newArr[i] < newArr[i-1]\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpwzr4lkbp/tmpwzr4lkbp.swift:56: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac899f6cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac899c63b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac899c63988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac899c627b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwzr4lkbp                        0x0000559bb8fee59a <unavailable> + 5530

    5    libc.so.6                          0x00002ac89a158460 __libc_start_main +
    245

    6    tmpwzr4lkbp                        0x0000559bb8fee1f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1660028333
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    let n = arr.count\n    var count\
    \ = 0\n    var min = 0\n    for i in 0...n-1 {\n        if arr[i] < arr[min] {\n\
    \            min = i\n        }\n        if arr[i] < arr[i+1] {\n            count\
    \ += 1\n        }\n    }\n    if count == 0 {\n        return true\n    }\n  \
    \  if min == 0 || min == n-1 {\n        return true\n    }\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b161b567c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b161b25e561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b161b25e286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b161b25e13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b161b25dbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b161b05de83 <unavailable> + 188035

    6    tmpvw1o3rl3                        0x000056325806eae2 <unavailable> + 6882

    7    tmpvw1o3rl3                        0x000056325806e4d5 <unavailable> + 5333

    8    libc.so.6                          0x00002b161b753460 __libc_start_main +
    245

    9    tmpvw1o3rl3                        0x000056325806e1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660028333
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    var result = false\n    var temp_arr\
    \ = arr\n    // If the current ball is less than the next ball in line then we\
    \ can swap\n    // them, so we will count and keep track of the number of balls\
    \ that can be\n    // swapped, if we have more than 3 balls that can be swapped\
    \ then the \n    // array can be re-ordered.\n    var arr_len = arr.count\n  \
    \  // We check the balls in pairs.\n    for i in 0..<arr_len-1 {\n        if temp_arr[i]\
    \ < temp_arr[i+1] {\n            result = true\n        } else {\n           \
    \ result = false\n            break\n        }\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmp8hgczf5f/tmp8hgczf5f.swift:56: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acb33761c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acb33458b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acb33458988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acb334577b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8hgczf5f                        0x000055e09a80b54a <unavailable> + 5450

    5    libc.so.6                          0x00002acb3394d460 __libc_start_main +
    245

    6    tmp8hgczf5f                        0x000055e09a80b1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660028333
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n  if arr.count < 2 {\n    return true\n\
    \  }\n  var ascending = false\n  var descending = false\n  var is_sorted = true\n\
    \  for i in 0..<arr.count - 1 {\n    if arr[i] < arr[i + 1] {\n      ascending\
    \ = true\n    }\n    if arr[i] > arr[i + 1] {\n      descending = true\n    }\n\
    \    if ascending && descending {\n      is_sorted = false\n      break\n    }\n\
    \  }\n  return is_sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpsiy3qd8z/tmpsiy3qd8z.swift:58: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6395999c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6395690b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6395690988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b639568f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsiy3qd8z                        0x0000559e9731054a <unavailable> + 5450

    5    libc.so.6                          0x00002b6395b85460 __libc_start_main +
    245

    6    tmpsiy3qd8z                        0x0000559e973101a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660028333
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    // Edge Cases\n    if arr.count\
    \ == 0 {\n        return true\n    }\n    // We assume the first element to be\
    \ the smallest so far in the array\n    // and assume we have not found the first\
    \ element that is smaller than\n    // the smallest so far.\n    var smallest_so_far\
    \ = arr[0]\n    var found_smaller = false\n    // We iterate through all the elements\
    \ in the array excluding the first\n    // element.\n    for index in 1...arr.count\
    \ - 1 {\n        let current_element = arr[index]\n        // If the smallest\
    \ so far is equal to the current element then we\n        // know we still have\
    \ not found the first element that is smaller\n        // than the smallest so\
    \ far.\n        if smallest_so_far == current_element {\n            continue\n\
    \        }\n        // If the smallest so far is greater than the current element\
    \ then\n        // we know we have found the first element that is smaller than\
    \ the\n        // smallest so far.\n        if smallest_so_far > current_element\
    \ {\n            found_smaller = true\n        }\n        // If we have found\
    \ the first element that is smaller than the\n        // smallest so far and the\
    \ current element is less than the smallest\n        // so far then we know it\
    \ is not possible to get a non-decreasing\n        // order of the array by performing\
    \ right shift operations.\n        if found_smaller && current_element < smallest_so_far\
    \ {\n            return false\n        }\n        // Otherwise we update the smallest\
    \ so far to be the current element.\n        smallest_so_far = current_element\n\
    \    }\n    // If we make it to the end of the for loop then it means we have\
    \ been\n    // able to get a non-decreasing order of the array by performing right\n\
    \    // shift operations.\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr: [4, 3, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr:\
    \ [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpp4lqxxt7/tmpp4lqxxt7.swift:78: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab13f235c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab13ef2cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab13ef2c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab13ef2b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp4lqxxt7                        0x000055e37668854a <unavailable> + 5450

    5    libc.so.6                          0x00002ab13f421460 __libc_start_main +
    245

    6    tmpp4lqxxt7                        0x000055e3766881a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660028333
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count < 2 {\n        return\
    \ true\n    }\n    var smallest = arr[0]\n    var secondSmallest = arr[1]\n  \
    \  var rightShifts = 0\n    for i in 1..<arr.count {\n        if arr[i] < smallest\
    \ {\n            rightShifts += 1\n            if rightShifts > 1 {\n        \
    \        return false\n            }\n            secondSmallest = smallest\n\
    \            smallest = arr[i]\n        } else if arr[i] < secondSmallest {\n\
    \            secondSmallest = arr[i]\n        }\n    }\n    return true\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpwinw9chy/tmpwinw9chy.swift:61: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b92d61c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b92d5eb9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b92d5eb9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b92d5eb87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwinw9chy                        0x00005640ac0037cb <unavailable> + 6091

    5    libc.so.6                          0x00002b92d63ae460 __libc_start_main +
    245

    6    tmpwinw9chy                        0x00005640ac0031a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660028333
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n  // Implement your solution here\n\
    \  if arr.count == 0 {\n    return true\n  }\n  var newArr = arr\n  var done =\
    \ false\n  while !done {\n    var swapped = false\n    for i in 1..<newArr.count\
    \ {\n      if newArr[i-1] > newArr[i] {\n        var temp = newArr[i-1]\n    \
    \    newArr[i-1] = newArr[i]\n        newArr[i] = temp\n        swapped = true\n\
    \      }\n    }\n    if !swapped {\n      done = true\n    }\n  }\n  for i in\
    \ 1..<newArr.count {\n    if newArr[i-1] > newArr[i] {\n      return false\n \
    \   }\n  }\n  return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpan8v_xx6/tmpan8v_xx6.swift:67: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adcf5994c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adcf568bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adcf568b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adcf568a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpan8v_xx6                        0x0000559a0b6dd72e <unavailable> + 5934

    5    libc.so.6                          0x00002adcf5b80460 __libc_start_main +
    245

    6    tmpan8v_xx6                        0x0000559a0b6dd1f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1660028333
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr: [4, 3, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr:\
    \ [] as [Int]) == true)"
  status: Exception
  stderr: 'tmp095ydet8/tmp095ydet8.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab085df2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab085ae9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab085ae9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab085ae87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp095ydet8                        0x00005564dacac30a <unavailable> + 4874

    5    libc.so.6                          0x00002ab085fde460 __libc_start_main +
    245

    6    tmp095ydet8                        0x00005564dacabf69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660028331
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    // CODE\n    return false\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpm9rur_r4/tmpm9rur_r4.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b280e2fec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b280dff5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b280dff5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b280dff47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpm9rur_r4                        0x000055e02a35630a <unavailable> + 4874

    5    libc.so.6                          0x00002b280e4ea460 __libc_start_main +
    245

    6    tmpm9rur_r4                        0x000055e02a355f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660028333
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    let N = arr.count\n    var min:\
    \ Int = arr[0]\n    for i in 1..<N {\n        if arr[i] < min {\n            return\
    \ false\n        }\n        min = arr[i]\n    }\n    return true\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpwxyy2301/tmpwxyy2301.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5a439e1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5a436d8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5a436d8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5a436d77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwxyy2301                        0x000055d5353b854a <unavailable> + 5450

    5    libc.so.6                          0x00002b5a43bcd460 __libc_start_main +
    245

    6    tmpwxyy2301                        0x000055d5353b81a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660028333
- exit_code: 0
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    guard arr.count > 1 else {\n   \
    \     return true\n    }\n    var right_shifts_count = 0\n    var index = arr.count\
    \ - 1\n    while index > 0 {\n        if arr[index] < arr[index - 1] {\n     \
    \       right_shifts_count += 1\n        }\n        index -= 1\n    }\n    return\
    \ right_shifts_count <= 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028333
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    // Write your code here\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr: [3,\
    \ 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpuvfunwyw/tmpuvfunwyw.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac25d07bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac25cd72b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac25cd72988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac25cd717b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuvfunwyw                        0x00005600e121430a <unavailable> + 4874

    5    libc.so.6                          0x00002ac25d267460 __libc_start_main +
    245

    6    tmpuvfunwyw                        0x00005600e1213f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660028332
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    // TODO: Implement\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmp4ny5yuth/tmp4ny5yuth.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b034d3c9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b034d0c0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b034d0c0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b034d0bf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4ny5yuth                        0x0000563ec3af730a <unavailable> + 4874

    5    libc.so.6                          0x00002b034d5b5460 __libc_start_main +
    245

    6    tmp4ny5yuth                        0x0000563ec3af6f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660028332
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr: [4, 3, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr:\
    \ [] as [Int]) == true)"
  status: Exception
  stderr: 'tmp095ydet8/tmp095ydet8.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab085df2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab085ae9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab085ae9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab085ae87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp095ydet8                        0x00005564dacac30a <unavailable> + 4874

    5    libc.so.6                          0x00002ab085fde460 __libc_start_main +
    245

    6    tmp095ydet8                        0x00005564dacabf69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660028331
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n  return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr: [4, 3, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr:\
    \ [] as [Int]) == true)"
  status: Exception
  stderr: 'tmp0hqvytd1/tmp0hqvytd1.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b019abcac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b019a8c1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b019a8c1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b019a8c07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0hqvytd1                        0x0000556425a0349e <unavailable> + 5278

    5    libc.so.6                          0x00002b019adb6460 __libc_start_main +
    245

    6    tmp0hqvytd1                        0x0000556425a02f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660028333
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    var arr = arr\n    if arr.count\
    \ <= 1 {\n        return true\n    }\n    let max_num = arr.reduce(arr[0], {max($0,\
    \ $1)})\n    let max_num_idx = arr.index(of: max_num)!\n    var prev_num = arr[0]\n\
    \    var count = 0\n    for num in arr[1..<max_num_idx+1] {\n        if num <\
    \ prev_num {\n            count += 1\n        }\n        prev_num = num\n    }\n\
    \    return count < 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmp000hzw1x/tmp000hzw1x.swift:56: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae580b26c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae58081db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae58081d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae58081c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp000hzw1x                        0x000055a5937749ae <unavailable> + 6574

    5    libc.so.6                          0x00002ae580d12460 __libc_start_main +
    245

    6    tmp000hzw1x                        0x000055a593774479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660028333
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    var moved = [Int]()\n    var temp\
    \ = arr\n    for i in (0..<arr.count).reversed() {\n        moved.append(temp.removeLast())\n\
    \        if temp == temp.sorted() {\n            return true\n        }\n    }\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmp42opczgt/tmp42opczgt.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1512c2ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1512921b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1512921988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b15129207b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp42opczgt                        0x000056114eb0daee <unavailable> + 6894

    5    libc.so.6                          0x00002b1512e16460 __libc_start_main +
    245

    6    tmp42opczgt                        0x000056114eb0d5b9 <unavailable> + 5561

    '
  stdout: ''
  timestamp: 1660028333
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    // TODO: Write your code here\n\
    \    var minVal = Int.max\n    var minValIndex = -1\n    for i in 0..<arr.count\
    \ {\n        if arr[i] < minVal {\n            minVal = arr[i]\n            minValIndex\
    \ = i\n        }\n    }\n    let sortedArr = arr.sorted()\n    var arrIndex =\
    \ 0\n    for i in 0..<arr.count {\n        if minValIndex == i {\n           \
    \ continue\n        }\n        if arr[i] != sortedArr[arrIndex] {\n          \
    \  return false\n        }\n        arrIndex += 1\n    }\n    return true\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmp07aweytp/tmp07aweytp.swift:60: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aba5d99ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aba5d695b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aba5d695988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aba5d6947b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp07aweytp                        0x0000562da2ad75ea <unavailable> + 5610

    5    libc.so.6                          0x00002aba5db8a460 __libc_start_main +
    245

    6    tmp07aweytp                        0x0000562da2ad7249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1660028333
- exit_code: 0
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    guard arr.count > 0 else { return\
    \ true }\n    var copy_arr = arr\n    var counter = 0\n    for i in 0..<copy_arr.count\
    \ - 1 {\n        if arr[i] > arr[i + 1] {\n            counter += 1\n        }\n\
    \    }\n    if counter == 1 {\n        return true\n    }\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [] as [Int]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028333
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    var a = arr\n    var lastNumber\
    \ = a.last!\n    for i in 0..<a.count {\n        if a[i] < lastNumber {\n    \
    \        return false\n        }\n        lastNumber = a[i]\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr: [3,\
    \ 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmp9omc0bar/tmp9omc0bar.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17fe512c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17fe209b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17fe209988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17fe2087b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9omc0bar                        0x0000555de7d3a5da <unavailable> + 5594

    5    libc.so.6                          0x00002b17fe6fe460 __libc_start_main +
    245

    6    tmp9omc0bar                        0x0000555de7d3a239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1660028333
- exit_code: -1
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n  var tempArr = arr\n  var cycles =\
    \ 0\n  var ball = 0\n  var done = false\n  while !done {\n    let ballAt = tempArr[ball]\n\
    \    var count = 0\n    var ballAtLoc = ball\n    while count < tempArr.count\
    \ && ballAtLoc < tempArr.count {\n      if tempArr[ballAtLoc] == ballAt {\n  \
    \      ballAtLoc += 1\n      }\n      count += 1\n    }\n    if ballAtLoc == ball\
    \ {\n      if ball == tempArr.count - 1 {\n        done = true\n      } else {\n\
    \        ball += 1\n      }\n    } else {\n      tempArr.remove(at: ballAtLoc\
    \ - 1)\n      tempArr.insert(ballAt, at: ball)\n      cycles += 1\n    }\n  }\n\
    \  return cycles <= 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660028338
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    var arr = arr\n    arr.sort()\n\
    \    var biggest_diff = 0\n    for i in 0..<arr.count - 1 {\n        let diff\
    \ = arr[i + 1] - arr[i]\n        if diff > biggest_diff {\n            biggest_diff\
    \ = diff\n        }\n    }\n    return biggest_diff <= 1\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr: [4, 3, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr:\
    \ [] as [Int]) == true)"
  status: Exception
  stderr: 'tmp1yr6jq2s/tmp1yr6jq2s.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b26bdea8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b26bdb9fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b26bdb9f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b26bdb9e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1yr6jq2s                        0x000056194de4f737 <unavailable> + 5943

    5    libc.so.6                          0x00002b26be094460 __libc_start_main +
    245

    6    tmp1yr6jq2s                        0x000056194de4f2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660028333
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr: [4, 3, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr:\
    \ [] as [Int]) == true)"
  status: Exception
  stderr: 'tmp095ydet8/tmp095ydet8.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab085df2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab085ae9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab085ae9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab085ae87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp095ydet8                        0x00005564dacac30a <unavailable> + 4874

    5    libc.so.6                          0x00002ab085fde460 __libc_start_main +
    245

    6    tmp095ydet8                        0x00005564dacabf69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660028331
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    // your code goes here\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr: [3,\
    \ 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmp3cd5va9a/tmp3cd5va9a.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b910088cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9100583b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9100583988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b91005827b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3cd5va9a                        0x000056243ed4430a <unavailable> + 4874

    5    libc.so.6                          0x00002b9100a78460 __libc_start_main +
    245

    6    tmp3cd5va9a                        0x000056243ed43f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660028333
- exit_code: 0
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    var arr = arr\n    guard arr.count\
    \ > 1 else {\n        return true\n    }\n    for i in 1...arr.count {\n     \
    \   if arr.last! < arr[i-1] {\n            arr.insert(arr.removeLast(), at: 0)\n\
    \        }\n        if arr == arr.sorted() {\n            return true\n      \
    \  }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028333
- exit_code: 1
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    guard arr.count > 0 else {\n   \
    \     return true\n    }\n    var arr = arr\n    var i = arr.count - 1\n    while\
    \ i > 0 {\n        var j = i - 1\n        while j >= 0 {\n            if arr[j]\
    \ > arr[i] {\n                arr[j], arr[i] = arr[i], arr[j]\n              \
    \  i = j\n            }\n            j -= 1\n        }\n        i -= 1\n    }\n\
    \    return arr == arr.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp8juvf3md.swift:33:23: error: consecutive statements on a line must\
    \ be separated by ';'\n                arr[j], arr[i] = arr[i], arr[j]\n     \
    \                 ^\n                      ;\n/tmp/tmp8juvf3md.swift:33:23: error:\
    \ expected expression\n                arr[j], arr[i] = arr[i], arr[j]\n     \
    \                 ^\n/tmp/tmp8juvf3md.swift:33:20: warning: subscript is accessed\
    \ but result is unused\n                arr[j], arr[i] = arr[i], arr[j]\n    \
    \            ~~~^~~\n/tmp/tmp8juvf3md.swift:27:9: warning: variable 'arr' was\
    \ never mutated; consider changing to 'let' constant\n    var arr = arr\n    ~~~\
    \ ^\n    let\n"
  stdout: ''
  timestamp: 1660028333
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    // Not in order if at least one\
    \ consecutive pair of elements is out of order.\n    for i in 0..<arr.count-1\
    \ {\n        if arr[i] > arr[i+1] {\n            return false\n        }\n   \
    \ }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpjvuajq74/tmpjvuajq74.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abb4ca34c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abb4c72bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abb4c72b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abb4c72a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjvuajq74                        0x000055b5ba1fb54a <unavailable> + 5450

    5    libc.so.6                          0x00002abb4cc20460 __libc_start_main +
    245

    6    tmpjvuajq74                        0x000055b5ba1fb1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660028333
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    if arr.count == 1 {\n        return true\n    }\n    for index\
    \ in 1...arr.count-1 {\n        if arr[index] < arr[index-1] {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr: [4, 3, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr:\
    \ [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpy5jwkcv9/tmpy5jwkcv9.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4406fd1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4406cc8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4406cc8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4406cc77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy5jwkcv9                        0x0000562a2c6f154a <unavailable> + 5450

    5    libc.so.6                          0x00002b44071bd460 __libc_start_main +
    245

    6    tmpy5jwkcv9                        0x0000562a2c6f11a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660028333
- exit_code: 0
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    var new_arr = arr\n    var sorted\
    \ = arr.sorted()\n    var num_shifts = 0\n    while new_arr != sorted {\n    \
    \    new_arr.append(new_arr.removeFirst())\n        num_shifts += 1\n        if\
    \ num_shifts > new_arr.count {\n            return false\n        }\n    }\n \
    \   return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028333
- exit_code: 0
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count < 1 {\n        return\
    \ true\n    }\n    var count = 0\n    for i in 0...arr.count - 2 {\n        if\
    \ arr[i] > arr[i + 1] {\n            count += 1\n        }\n    }\n    return\
    \ count < 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr: [3,\
    \ 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028333
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    let correct_order = arr.sorted()\n    var copy = arr\n    var\
    \ temp: Int\n    var min = arr[0]\n    while copy != correct_order {\n       \
    \ temp = copy[0]\n        if temp <= min {\n            min = temp\n        }\n\
    \        for i in 1..<copy.count {\n            copy[i - 1] = copy[i]\n      \
    \  }\n        copy[copy.count - 1] = temp\n        if copy[0] > min {\n      \
    \      return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr: [4, 3, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr:\
    \ [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpqqa51k4i/tmpqqa51k4i.swift:60: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b27528d1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b27525c8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b27525c8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b27525c77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqqa51k4i                        0x00005649b7b2069a <unavailable> + 5786

    5    libc.so.6                          0x00002b2752abd460 __libc_start_main +
    245

    6    tmpqqa51k4i                        0x00005649b7b202f9 <unavailable> + 4857

    '
  stdout: ''
  timestamp: 1660028333
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count < 1 {\n        return\
    \ true\n    }\n    var min_number = arr[0]\n    for i in 1...arr.count - 1 {\n\
    \        if arr[i] < min_number {\n            return false\n        }\n     \
    \   min_number = min(min_number, arr[i])\n    }\n    return true\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmp1abz6mz7/tmp1abz6mz7.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b160e544c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b160e23bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b160e23b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b160e23a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1abz6mz7                        0x000055e3046725da <unavailable> + 5594

    5    libc.so.6                          0x00002b160e730460 __libc_start_main +
    245

    6    tmp1abz6mz7                        0x000055e304672239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1660028333
- exit_code: 1
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    var min_val = Int.max\n    var start_index\
    \ = 0\n    for i in 0..<arr.count {\n        if arr[i] < min_val {\n         \
    \   min_val = arr[i]\n            start_index = i\n        }\n    }\n    var new_arr\
    \ = Array(repeating: 0, count: arr.count)\n    var k = 0\n    for i in start_index..<arr.count\
    \ {\n        new_arr[k] = arr[i]\n        k += 1\n    }\n    for i in 0..<start_index\
    \ {\n        new_arr[k] = arr[i]\n        k += 1\n    }\n    return is_sorted(arr:\
    \ new_arr)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr: [3,\
    \ 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp12prla9r.swift:42:12: error: cannot find 'is_sorted' in scope\n\
    \    return is_sorted(arr: new_arr)\n           ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660028333
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr: [4, 3, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr:\
    \ [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpp7jvskwh/tmpp7jvskwh.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac9a2213c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac9a1f0ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac9a1f0a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac9a1f097b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp7jvskwh                        0x000055a2d631449e <unavailable> + 5278

    5    libc.so.6                          0x00002ac9a23ff460 __libc_start_main +
    245

    6    tmpp7jvskwh                        0x000055a2d6313f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660028331
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    let N = arr.count\n    if N == 0\
    \ {\n        return true\n    }\n    var indexOfFirstMaximum = 0\n    var indexOfSecondMaximum\
    \ = 0\n    var firstMaximum = arr[0]\n    var secondMaximum = arr[0]\n    for\
    \ i in 1..<N {\n        if arr[i] > firstMaximum {\n            indexOfSecondMaximum\
    \ = indexOfFirstMaximum\n            secondMaximum = firstMaximum\n          \
    \  indexOfFirstMaximum = i\n            firstMaximum = arr[i]\n        } else\
    \ if arr[i] > secondMaximum {\n            indexOfSecondMaximum = i\n        \
    \    secondMaximum = arr[i]\n        }\n    }\n    return indexOfFirstMaximum\
    \ == 0 || indexOfSecondMaximum == N - 1\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr: [4, 3, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr:\
    \ [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpg6f3wk18/tmpg6f3wk18.swift:59: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8ad6320c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8ad6017b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8ad6017988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8ad60167b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg6f3wk18                        0x0000562a1375454a <unavailable> + 5450

    5    libc.so.6                          0x00002b8ad650c460 __libc_start_main +
    245

    6    tmpg6f3wk18                        0x0000562a137541a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660028333
- exit_code: 1
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    if isIncreasing(arr: arr) {\n        return true\n    }\n \
    \   return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpxla4x9l8.swift:27:8: error: cannot find 'isIncreasing' in scope\n\
    \    if isIncreasing(arr: arr) {\n       ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660028333
- exit_code: 0
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    if arr.count == 1 {\n        return true\n    }\n    var arr\
    \ = arr\n    var moves = 0\n    while arr != arr.sorted() {\n        if moves\
    \ > arr.count {\n            return false\n        }\n        arr.insert(arr.popLast()!,\
    \ at: 0)\n        moves += 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr: [4, 3, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr:\
    \ [] as [Int]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028333
- exit_code: -1
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count < 2 {\n        return\
    \ true\n    }\n    var original = arr\n    var shifted = Array(arr[1..<arr.count])\n\
    \    shifted.append(arr[0])\n    if move_one_ball(arr: shifted) {\n        return\
    \ true\n    }\n    shifted = Array(arr[arr.count - 1..<arr.count])\n    shifted.append(contentsOf:\
    \ arr[0..<arr.count - 1])\n    if move_one_ball(arr: shifted) {\n        return\
    \ true\n    }\n    shifted = Array(arr[0..<arr.count - 1])\n    shifted.insert(arr[arr.count\
    \ - 1], at: 0)\n    if move_one_ball(arr: shifted) {\n        return true\n  \
    \  }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660028339
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr: [4, 3, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr:\
    \ [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpp7jvskwh/tmpp7jvskwh.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac9a2213c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac9a1f0ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac9a1f0a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac9a1f097b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp7jvskwh                        0x000055a2d631449e <unavailable> + 5278

    5    libc.so.6                          0x00002ac9a23ff460 __libc_start_main +
    245

    6    tmpp7jvskwh                        0x000055a2d6313f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660028331
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    // TODO\n    return false\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmp67co_p4s/tmp67co_p4s.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b296a32fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b296a026b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b296a026988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b296a0257b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp67co_p4s                        0x00005618e63e630a <unavailable> + 4874

    5    libc.so.6                          0x00002b296a51b460 __libc_start_main +
    245

    6    tmp67co_p4s                        0x00005618e63e5f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660028331
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    guard arr.count > 1 else { return\
    \ true }\n    var tmp: [Int] = arr\n    tmp.sort()\n    var i = 0\n    while tmp[i]\
    \ == arr[i] {\n        i += 1\n    }\n    while tmp[i] == arr[i+1] {\n       \
    \ i += 1\n    }\n    if tmp[i] == arr[0] {\n        return true\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr: [3,\
    \ 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmp4xj2ojcs/tmp4xj2ojcs.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b96b4387c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b96b407eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b96b407e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b96b407d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4xj2ojcs                        0x000055dd6c1c84da <unavailable> + 5338

    5    libc.so.6                          0x00002b96b4573460 __libc_start_main +
    245

    6    tmp4xj2ojcs                        0x000055dd6c1c8139 <unavailable> + 4409

    '
  stdout: ''
  timestamp: 1660028334
- exit_code: 1
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    return is_sorted(arr: arr)\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [] as [Int]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpyoqal_xy.swift:24:12: error: cannot find 'is_sorted' in scope\n\
    \    return is_sorted(arr: arr)\n           ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660028333
- exit_code: 1
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    // Enter your code here\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [] as [Int]) == true)"
  status: SyntaxError
  stderr: '/tmp/tmpmjgjfgp8.swift:25:1: error: missing return in global function expected
    to return ''Bool''

    }

    ^

    '
  stdout: ''
  timestamp: 1660028333
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count < 2 {\n        return\
    \ true\n    }\n    var arr = arr\n    var head = arr[0]\n    var tail = arr[arr.count\
    \ - 1]\n    var i = 1\n    var j = arr.count - 2\n    while i < j {\n        if\
    \ arr[i] > head {\n            return false\n        }\n        if arr[j] < tail\
    \ {\n            return false\n        }\n        head = min(head, arr[i])\n \
    \       tail = max(tail, arr[j])\n        i += 1\n        j -= 1\n    }\n    if\
    \ i == j {\n        if arr[i] < tail && arr[i] > head {\n            return false\n\
    \        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr: [4, 3, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr:\
    \ [] as [Int]) == true)"
  status: Exception
  stderr: 'tmp075rirxt/tmp075rirxt.swift:65: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b93ed5f8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b93ed2efb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b93ed2ef988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b93ed2ee7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp075rirxt                        0x000055762e0904aa <unavailable> + 5290

    5    libc.so.6                          0x00002b93ed7e4460 __libc_start_main +
    245

    6    tmp075rirxt                        0x000055762e090109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660028334
- exit_code: 1
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count < 1 {\n        return\
    \ true\n    }\n    var lastIndex = arr.count - 1\n    while lastIndex >= 0 &&\
    \ arr[lastIndex] == arr.count {\n        lastIndex -= 1\n    }\n    if lastIndex\
    \ == -1 {\n        return true\n    }\n    if arr[lastIndex] != lastIndex + 1\
    \ {\n        return false\n    }\n    return move_one_ball(arr: arr[0...lastIndex\
    \ - 1])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr: [3,\
    \ 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpa5scgvfm.swift:37:34: error: cannot convert value of type 'ArraySlice<Int>'\
    \ to expected argument type '[Int]'\n    return move_one_ball(arr: arr[0...lastIndex\
    \ - 1])\n                                 ^\n"
  stdout: ''
  timestamp: 1660028333
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    guard arr.count > 1 else { return\
    \ true }\n    let unordered = arr.sorted()\n    var sorted = unordered\n    var\
    \ rightShifts = 0\n    while sorted.first != arr.first {\n        rightShifts\
    \ += 1\n        let first = sorted.removeLast()\n        sorted.insert(first,\
    \ at: 0)\n    }\n    return rightShifts < sorted.count - 1\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr: [4, 3, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr:\
    \ [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpxy4a1axs/tmpxy4a1axs.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adc398a5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adc3959cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adc3959c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adc3959b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxy4a1axs                        0x0000564713f8677e <unavailable> + 6014

    5    libc.so.6                          0x00002adc39a91460 __libc_start_main +
    245

    6    tmpxy4a1axs                        0x0000564713f86249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1660028334
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n  return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr: [4, 3, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr:\
    \ [] as [Int]) == true)"
  status: Exception
  stderr: 'tmp0hqvytd1/tmp0hqvytd1.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b019abcac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b019a8c1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b019a8c1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b019a8c07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0hqvytd1                        0x0000556425a0349e <unavailable> + 5278

    5    libc.so.6                          0x00002b019adb6460 __libc_start_main +
    245

    6    tmp0hqvytd1                        0x0000556425a02f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660028333
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    // make a copy of arr\n    var copy\
    \ = arr\n    // if arr is not empty, then start sorting\n    if !arr.isEmpty {\n\
    \        // loop over each element in copy\n        for _ in 0..<copy.count {\n\
    \            // perform bubble sort on each element in the array\n           \
    \ for j in 0..<copy.count - 1 {\n                // each time there is a swap,\
    \ perform right shift\n                if copy[j] > copy[j + 1] {\n          \
    \          let temp = copy[j]\n                    copy[j] = copy[j + 1]\n   \
    \                 copy[j + 1] = temp\n                    copy.insert(copy.removeLast(),\
    \ at: 0)\n                }\n            }\n        }\n    }\n    // check if\
    \ copy is sorted\n    return copy == copy.sorted()\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr: [4, 3, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr:\
    \ [] as [Int]) == true)"
  status: Exception
  stderr: 'tmpztqj4zvh/tmpztqj4zvh.swift:59: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abe832d0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abe82fc7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abe82fc7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abe82fc67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpztqj4zvh                        0x0000563edf74787a <unavailable> + 6266

    5    libc.so.6                          0x00002abe834bc460 __libc_start_main +
    245

    6    tmpztqj4zvh                        0x0000563edf7474d9 <unavailable> + 5337

    '
  stdout: ''
  timestamp: 1660028334
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return\
    \ true\n    }\n    var arr = arr\n    var i = 0\n    while i < arr.count - 1 {\n\
    \        if arr[i] > arr[i + 1] {\n            let tmp = arr[i]\n            arr[i]\
    \ = arr[i + 1]\n            arr[i + 1] = tmp\n            i = 0\n        } else\
    \ {\n            i += 1\n        }\n    }\n    for i in 0..<arr.count - 1 {\n\
    \        if arr[i] > arr[i + 1] {\n            return false\n        }\n    }\n\
    \    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(move_one_ball(arr:\
    \ [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr: [3, 5, 10, 1, 2]) == true)\n\
    assert(move_one_ball(arr: [4, 3, 1, 2]) == false)\nassert(move_one_ball(arr: [3,\
    \ 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr: [] as [Int]) == true)"
  status: Exception
  stderr: 'tmp061tu8zd/tmp061tu8zd.swift:62: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae307e4dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae307b44b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae307b44988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae307b437b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp061tu8zd                        0x000055a0e6b3f72e <unavailable> + 5934

    5    libc.so.6                          0x00002ae308039460 __libc_start_main +
    245

    6    tmp061tu8zd                        0x000055a0e6b3f1f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1660028334
- exit_code: -4
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n\tvar arr = arr\n\tlet count = arr.count\n\
    \tif count <= 1 {\n\t\treturn true\n\t}\n\tvar tmp = -1\n\tfor index in 0..<count\
    \ {\n\t\tif arr[index] > arr[index + 1] {\n\t\t\ttmp = index\n\t\t\tbreak\n\t\t\
    }\n\t}\n\tif tmp < 0 {\n\t\treturn true\n\t}\n\tarr.remove(at: tmp)\n\tarr.insert(arr[tmp],\
    \ at: 0)\n\tfor index in 0..<count - 1 {\n\t\tif arr[index] > arr[index + 1] {\n\
    \t\t\treturn false\n\t\t}\n\t}\n\treturn true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr: [4, 3, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr:\
    \ [] as [Int]) == true)"
  status: Exception
  stderr: 'tmp0ce1qlpv/tmp0ce1qlpv.swift:62: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad7c315cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad7c2e53b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad7c2e53988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad7c2e527b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0ce1qlpv                        0x000055ac560505fa <unavailable> + 5626

    5    libc.so.6                          0x00002ad7c3348460 __libc_start_main +
    245

    6    tmp0ce1qlpv                        0x000055ac56050259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1660028334
- exit_code: 0
  program: "\n/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    /// numbers in the array will be randomly ordered. Your task is to determine if\n\
    /// it is possible to get an array sorted in non-decreasing order by performing\
    \ \n/// the following operation on the given array:\n/// You are allowed to perform\
    \ right shift operation any number of times.\n/// One right shift operation means\
    \ shifting all elements of the array by one\n/// position in the right direction.\
    \ The last element of the array will be moved to\n/// the starting position in\
    \ the array i.e. 0th index. \n/// If it is possible to obtain the sorted array\
    \ by performing the above operation\n/// then return true else return false.\n\
    /// If the given array is empty then return true.\n/// Note: The given array is\
    \ guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr:\
    \ [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr:\
    \ [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n/// array by performing any number of right shift operations.\n\
    func move_one_ball(arr: [Int]) -> Bool {\n    guard arr.count > 0 else { return\
    \ true }\n    var arr = arr\n    var count = 0\n    for i in 0..<arr.count {\n\
    \        if i < arr.count - 1 && arr[i] > arr[i + 1] {\n            count += 1\n\
    \        }\n    }\n    return count <= 1\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(move_one_ball(arr: [3, 4, 5, 1, 2]) == true)\nassert(move_one_ball(arr:\
    \ [3, 5, 10, 1, 2]) == true)\nassert(move_one_ball(arr: [4, 3, 1, 2]) == false)\n\
    assert(move_one_ball(arr: [3, 5, 4, 1, 2]) == false)\nassert(move_one_ball(arr:\
    \ [] as [Int]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028334
