name: HumanEval_30_get_positive
language: swift
prompt: "\n/// Return only positive numbers in the array.\n/// >>> get_positive(l:\
  \ [-1, 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive(l: [5, 3, -5, 2, -3, 3,\
  \ 9, 0, 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfunc get_positive(l: [Int])\
  \ -> [Int] {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4,\
  \ 5, 6])\nassert(get_positive(l: [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5,\
  \ 3, 2, 3, 3, 9, 123, 1])\nassert(get_positive(l: [-1, -2]) == [] as [Int])\nassert(get_positive(l:\
  \ [] as [Int]) == [] as [Int])"
completions: ["    var l_positive = [Int]()\n    for i in l {\n        if i > 0 {\n\
    \            l_positive.append(i)\n        }\n    }\n    return l_positive", '    return
    l.filter({$0 > 0})', "    var positiveNumbers = [Int]()\n    for number in l {\n\
    \        if number > 0 {\n            positiveNumbers.append(number)\n       \
    \ }\n    }\n    return positiveNumbers", "    // Your code here\n    return l.filter({\
    \ num in\n        return num > 0\n    })", '    return l.filter({$0 > 0})', '    return
    l.filter { $0 > 0 }', "    // your code here\n    return l.filter({number in number\
    \ > 0})", "    var result = [Int]()\n    for i in l {\n        if i > 0 {\n  \
    \          result.append(i)\n        }\n    }\n    return result", "    var result:\
    \ [Int] = []\n    for num in l {\n        if num > 0 {\n            result.append(num)\n\
    \        }\n    }\n    return result", "    var ll: [Int] = []\n    for i in l\
    \ {\n        if i > 0 {\n            ll.append(i)\n        }\n    }\n    return\
    \ ll", "    var result: [Int] = []\n    for n in l {\n        if n > 0 {\n   \
    \         result.append(n)\n        }\n    }\n    return result", '    return
    l.filter{ $0 > 0 }', "    var positiveList: [Int] = []\n    for item in l {\n\
    \        if item > 0 {\n            positiveList.append(item)\n        }\n   \
    \ }\n    return positiveList", '    return l.filter { $0 > 0 }', '    return l.filter({$0
    > 0})', '    return l.filter { $0 > 0 }', '    return l.filter({$0 > 0})', " \
    \   var result = [Int]()\n    for number in l {\n        if number > 0 {\n   \
    \         result.append(number)\n        }\n    }\n    return result", "    var\
    \ result = [Int]()\n    for element in l {\n        if element > 0 {\n       \
    \     result.append(element)\n        }\n    }\n    return result", "    var res\
    \ = [Int]()\n    for i in l {\n        if i > 0 {\n            res.append(i)\n\
    \        }\n    }\n    return res", "    var res = [Int]()\n    for num in l {\n\
    \        if num > 0 {\n            res.append(num)\n        }\n    }\n    return\
    \ res", '    return l.filter({ n in n > 0 })', "\treturn l.filter{$0 > 0}", " \
    \   var new_list: [Int] = []\n    for num in l {\n        if num > 0 {\n     \
    \       new_list.append(num)\n        }\n    }\n    return new_list", '    return
    l.filter({ $0 > 0 })', "    var result: [Int] = []\n    for num in l {\n     \
    \   if num > 0 {\n            result.append(num)\n        }\n    }\n    return\
    \ result", '    return l.filter { $0 > 0 }', "    var result = [Int]()\n    for\
    \ number in l {\n        if number > 0 {\n            result.append(number)\n\
    \        }\n    }\n    return result", "    var ans = [Int]()\n    for i in l\
    \ {\n        if i > 0 {\n            ans.append(i)\n        }\n    }\n    return\
    \ ans", "    var res = [Int]()\n    for i in l {\n        if i > 0 {\n       \
    \     res.append(i)\n        }\n    }\n    return res", "    var res = [Int]()\n\
    \    for i in l {\n        if i > 0 {\n            res.append(i)\n        }\n\
    \    }\n    return res", "    return l.filter {\n        $0 > 0\n    }", "   \
    \ var res: [Int] = []\n    for i in l {\n        if i > 0 {\n            res.append(i)\n\
    \        }\n    }\n    return res", '    return l.filter { $0 > 0 }', "    var\
    \ result: [Int] = []\n    for i in l {\n        if i > 0 {\n            result.append(i)\n\
    \        }\n    }\n    return result", "    var l2 = [Int]()\n    for i in l {\n\
    \        if i > 0 {\n            l2.append(i)\n        }\n    }\n    return l2",
  '    return l.filter{$0 > 0}', '    return l.filter({ $0 > 0 })', '    return l.filter
    { x in x > 0 }', "    var positives = [Int]()\n    for i in l {\n        if i\
    \ > 0 {\n            positives.append(i)\n        }\n    }\n    return positives",
  "\tvar result: [Int] = []\n\tfor item in l {\n\t\tif item > 0 {\n\t\t\tresult.append(item)\n\
    \t\t}\n\t}\n\treturn result", "    return l.filter({\n        if $0 > 0 {\n  \
    \          return true\n        }\n        return false\n    })", '    return
    l.filter{$0 > 0}', '    return []', "    var positiveArr: [Int] = []\n    for\
    \ x in l {\n        if x > 0 {\n            positiveArr.append(x)\n        }\n\
    \    }\n    return positiveArr", '    return l.filter { $0 > 0 }', "    return\
    \ l.filter {\n        $0 > 0\n    }", "    var result: [Int] = []\n    for i in\
    \ l {\n        if i > 0 {\n            result.append(i)\n        }\n    }\n  \
    \  return result", '    return l.filter{$0 > 0}', "    var result: [Int] = []\n\
    \    for num in l {\n        if num > 0 {\n            result.append(num)\n  \
    \      }\n    }\n    return result", '    return l.filter { $0 > 0 }', "    var\
    \ newArray = [Int]()\n    for num in l {\n        if num > 0 {\n            newArray.append(num)\n\
    \        }\n    }\n    return newArray", '    return l.filter { x in x > 0 }',
  "    return l.filter({ (number) -> Bool in\n        number > 0\n    })", "    var\
    \ res = [Int]()\n    for i in l {\n        if i > 0 {\n            res.append(i)\n\
    \        }\n    }\n    return res", '    return l.filter { $0 > 0 }', "    var\
    \ res: [Int] = []\n    for i in l {\n        if i > 0 {\n            res.append(i)\n\
    \        }\n    }\n    return res", '    return []', "    var positives: [Int]\
    \ = []\n    for number in l {\n        if number > 0 {\n            positives.append(number)\n\
    \        }\n    }\n    return positives", '    return l.filter { $0 > 0 }', "\t\
    // Put your code here\n\treturn []", "    var positive : [Int] = []\n    for i\
    \ in l {\n        if i > 0 {\n            positive.append(i)\n        }\n    }\n\
    \    return positive", '    return l.filter { $0 > 0 }', "    var results = [Int]()\n\
    \    for number in l {\n        if number > 0 {\n            results.append(number)\n\
    \        }\n    }\n    return results", "    var p: [Int] = []\n    for a in l\
    \ {\n        if a > 0 {\n            p.append(a)\n        }\n    }\n    return\
    \ p", '  l.filter{$0 > 0}', "    let positive_list = l.filter({$0 > 0})\n    return\
    \ positive_list", "\tvar res: [Int] = []\n\tfor i in l {\n\t\tif i > 0 {\n\t\t\
    \tres.append(i)\n\t\t}\n\t}\n\treturn res", "    var result = [Int]()\n    for\
    \ i in l {\n        if i > 0 {\n            result.append(i)\n        }\n    }\n\
    \    return result", "    var new_list: [Int] = []\n    for i in l {\n       \
    \ if i > 0 {\n            new_list.append(i)\n        }\n    }\n    return new_list",
  "    var result: [Int] = []\n    for i in l {\n        if i > 0 {\n            result.append(i)\n\
    \        }\n    }\n    return result", '    return []', '    return l.filter({x
    in x >= 0})', "    var positives: [Int] = []\n    for number in l {\n        if\
    \ number > 0 {\n            positives.append(number)\n        }\n    }\n    return\
    \ positives", "\treturn l.filter({x in x > 0})", '    return l.filter({ return
    $0 > 0 })', '    return l.filter { $0 > 0 }', "    let positives = l.filter({$0\
    \ > 0})\n    return positives", "    var positive_list = [Int]()\n    for n in\
    \ l {\n        if n > 0 {\n            positive_list.append(n)\n        }\n  \
    \  }\n    return positive_list", "    var a = [Int]()\n    for i in l {\n    \
    \    if i > 0 {\n            a.append(i)\n        }\n    }\n    return a", '    return
    l.filter({$0 > 0})', '  return l.filter { $0 > 0 }', "  var positives: [Int] =\
    \ []\n  for num in l {\n    if num > 0 {\n      positives.append(num)\n    }\n\
    \  }\n  return positives", "    var result: [Int] = []\n    for i in l {\n   \
    \     if i > 0 {\n            result.append(i)\n        }\n    }\n    return result",
  '    return l.filter{ $0 > 0 }', "    // write your code here\n    return l.filter{$0\
    \ > 0}", '  return l.filter { $0 > 0 }', "    let positives = l.filter { $0 >\
    \ 0 }\n    return positives", "    // TODO: Implement!\n    var newList = [Int]()\n\
    \    for number in l {\n        if number > 0 {\n            newList.append(number)\n\
    \        }\n    }\n    return newList", "    var numbers: [Int] = []\n    for\
    \ number in l {\n        if number > 0 {\n            numbers.append(number)\n\
    \        }\n    }\n    return numbers", "    var res = [Int]()\n    for i in l\
    \ {\n        if i > 0 {\n            res.append(i)\n        }\n    }\n    return\
    \ res", "    var p_arr: [Int] = []\n    for i in l {\n        if i > 0 {\n   \
    \         p_arr.append(i)\n        }\n    }\n    return p_arr", "    var res:\
    \ [Int] = []\n    for i in l {\n        if i > 0 {\n            res.append(i)\n\
    \        }\n    }\n    return res", "    // Your code goes here\n    var list\
    \ = [Int]()\n    for x in l {\n        if x > 0 {\n            list.append(x)\n\
    \        }\n    }\n    return list", "    var new_l = [Int]()\n    for number\
    \ in l {\n        if number > 0 {\n            new_l.append(number)\n        }\n\
    \    }\n    return new_l", "    var positiveList = [Int]()\n    for item in l\
    \ {\n        if item > 0 {\n            positiveList.append(item)\n        }\n\
    \    }\n    return positiveList", "    var new_list = [Int]()\n    for i in l\
    \ {\n        if i > 0 {\n            new_list.append(i)\n        }\n    }\n  \
    \  return new_list", '    return []', "    var result = [Int]()\n    for x in\
    \ l {\n        if x > 0 {\n            result.append(x)\n        }\n    }\n  \
    \  return result", "    var new = [Int]()\n    for number in l {\n        if number\
    \ > 0 {\n            new.append(number)\n        }\n    }\n    return new", " \
    \   var new_list = [Int]()\n    for elem in l {\n        if elem > 0 {\n     \
    \       new_list.append(elem)\n        }\n    }\n    return new_list", "    let\
    \ positiveNumbers = l.filter { $0 > 0 }\n    return positiveNumbers", "    var\
    \ positives: [Int] = []\n    for number in l {\n        if number > 0 {\n    \
    \        positives.append(number)\n        }\n    }\n    return positives", " \
    \   var new_l: [Int] = []\n    for number in l {\n        if number > 0 {\n  \
    \          new_l.append(number)\n        }\n    }\n    return new_l", '    return
    l.filter { $0 > 0 }', '    return l.filter({$0 > 0})', '    return l.filter {
    $0 > 0 }', '    return l.filter {$0 >= 0}', '    return []', '    return l.filter({
    $0 > 0 })', "\tvar result: [Int] = []\n\tfor n in l {\n\t\tif n > 0 {\n\t\t\t\
    result.append(n)\n\t\t}\n\t}\n\treturn result", "    var positive = [Int]()\n\
    \    for num in l {\n        if num > 0 {\n            positive.append(num)\n\
    \        }\n    }\n    return positive", '    return l.filter {x in x > 0}', " \
    \   let result = l.filter { $0 > 0 }\n    return result", '  return l.filter {
    $0 > 0 }', "  var res = [Int]()\n  for i in l {\n    if i > 0 {\n      res.append(i)\n\
    \    }\n  }\n  return res", "    return l.filter({ (num) -> Bool in\n        num\
    \ > 0\n    })", "    var positives = [Int]()\n    for num in l {\n        if num\
    \ > 0 {\n            positives.append(num)\n        }\n    }\n    return positives",
  "\treturn l.filter{$0 >= 0}", "    var result: [Int] = []\n    for i in l {\n  \
    \      if i > 0 {\n            result.append(i)\n        }\n    }\n    return\
    \ result", '    return l.filter { $0 > 0 }', "    var positiveNumbers = [Int]()\n\
    \    for i in l {\n        if i > 0 {\n            positiveNumbers.append(i)\n\
    \        }\n    }\n    return positiveNumbers", '    return l.filter({$0 > 0})',
  '    return l.filter{$0 > 0}', '    return l.filter{$0 > 0}', '    return l.filter
    { $0 > 0 }', "    var i = 0\n    var result = [Int]()\n    while i < l.count {\n\
    \        if l[i] > 0 {\n            result.append(l[i])\n        }\n        i\
    \ += 1\n    }\n    return result", "    var result: [Int] = []\n    for item in\
    \ l {\n        if item > 0 {\n            result.append(item)\n        }\n   \
    \ }\n    return result", "    var newList: [Int] = []\n    for item in l {\n \
    \       if item > 0 {\n            newList.append(item)\n        }\n    }\n  \
    \  return newList", '    return l.filter({x in x > 0})', "    // CODING PART\n\
    \    return l.filter({$0 >= 0})", "    var result: [Int] = []\n    for element\
    \ in l {\n        if element > 0 {\n            result.append(element)\n     \
    \   }\n    }\n    return result", '    return []', '    return l.filter { $0 >
    0 }', "    var pos_l = [Int]()\n    for num in l {\n        if num > 0 {\n   \
    \         pos_l.append(num)\n        }\n    }\n    return pos_l", '    return
    l.filter({ $0 > 0 })', '    return l.filter { $0 > 0 }', '    return l.filter
    { $0 > 0 }', "    var positiveNums = [Int]()\n    for num in l {\n        if num\
    \ > 0 {\n            positiveNums.append(num)\n        }\n    }\n    return positiveNums",
  '    return l.filter({ (n) -> Bool in n > 0 })', "    let posOnly: [Int] = l.filter\
    \ { $0 > 0 }\n    return posOnly", "    var result: [Int] = []\n    for i in l\
    \ {\n        if i > 0 {\n            result.append(i)\n        }\n    }\n    return\
    \ result", "    // Write your code below this line\n    \n    \n    // Write your\
    \ code above this line", '    return []', '    return l.filter{ return $0 > 0
    }', "\treturn l.filter { $0 > 0 }", '    return l.filter{$0 >= 0}', "    var result:\
    \ [Int] = []\n    for num in l {\n        if num > 0 {\n            result.append(num)\n\
    \        }\n    }\n    return result", "    var res: [Int] = []\n    for i in\
    \ l {\n        if i > 0 {\n            res.append(i)\n        }\n    }\n    return\
    \ res", "\treturn l.filter({ x in x > 0 })", '    return l.filter({$0 > 0})',
  "    var result: [Int] = []\n    for i in l {\n        if i > 0 {\n            result.append(i)\n\
    \        }\n    }\n    return result", "    // TODO your code here\n    return\
    \ []", '    return l.filter { $0 > 0 }', '    return l.filter { $0 > 0 }', "\t\
    var positiveArray = [Int]()\n\tfor item in l {\n\t\tif item > 0 {\n\t\t\tpositiveArray.append(item)\n\
    \t\t}\n\t}\n\treturn positiveArray", "    var positives: [Int] = []\n    for i\
    \ in l {\n        if i > 0 {\n            positives.append(i)\n        }\n   \
    \ }\n    return positives", "    let result = l.filter { $0 > 0 }\n    return\
    \ result", '    return l.filter({$0 > 0})', '    return l.filter({ return $0 >
    0 })', "    var res = [Int]()\n    for i in l {\n        if i > 0 {\n        \
    \    res.append(i)\n        }\n    }\n    return res", '  return l.filter({$0
    > 0})', '    return l.filter({ $0 > 0 })', '    return l.filter { $0 > 0 }', '    return
    l.filter({ $0 > 0 })', "    let l1 = l.filter{$0 > 0}\n    return l1", '    return
    l.filter{ $0 > 0 }', "    var result = [Int]()\n    for number in l {\n      \
    \  if number > 0 {\n            result.append(number)\n        }\n    }\n    return\
    \ result", '    return l.filter {$0 > 0}', "    var result: [Int] = []\n    for\
    \ i in l {\n        if i > 0 {\n            result.append(i)\n        }\n    }\n\
    \    return result", '    return l.filter { $0 > 0 }', '    return l.filter {
    $0 > 0 }', '    return l.filter { $0 > 0 }', "    var arr: [Int] = []\n    for\
    \ i in l {\n        if i > 0 {\n            arr.append(i)\n        }\n    }\n\
    \    return arr", "    var positives: [Int] = []\n    for value in l {\n     \
    \   if value > 0 {\n            positives.append(value)\n        }\n    }\n  \
    \  return positives", "    var p_l: [Int] = []\n    for i in l {\n        if i\
    \ > 0 {\n            p_l.append(i)\n        }\n    }\n    return p_l", '  return
    l.filter{x in x > 0}', '    return l.filter {$0 > 0}', "    var result: [Int]\
    \ = []\n    for number in l {\n        if number > 0 {\n            result.append(number)\n\
    \        }\n    }\n    return result", '    return l.filter({ $0 > 0 })', "  \
    \  var result = [Int]()\n    for i in l {\n        if i > 0 {\n            result.append(i)\n\
    \        }\n    }\n    return result", "    var arr = [Int]()\n    for i in l\
    \ {\n        if i > 0 {\n            arr.append(i)\n        }\n    }\n    return\
    \ arr", "\treturn l.filter({x in x > 0})", "    var lst: [Int] = []\n    for item\
    \ in l {\n        if item > 0 {\n            lst.append(item)\n        }\n   \
    \ }\n    return lst", '    return l.filter {$0 > 0}', "    var new_l = [Int]()\n\
    \    for i in l {\n        if i > 0 {\n            new_l.append(i)\n        }\n\
    \    }\n    return new_l", "    var result = [Int]()\n    for x in l {\n     \
    \   if x > 0 {\n            result.append(x)\n        }\n    }\n    return result",
  "    var result = [Int]()\n    for i in l {\n        if i > 0 {\n            result.append(i)\n\
    \        }\n    }\n    return result", '    return []', "    var result = [Int]()\n\
    \    for i in l {\n        if i > 0 {\n            result.append(i)\n        }\n\
    \    }\n    return result", '    return l.filter { $0 > 0 }', '    return l.filter({$0
    > 0})', '    return l.filter { $0 > 0 }', '    return l.filter { $0 > 0 }', " \
    \   return l.filter({ (num) -> Bool in\n        num > 0\n    })", "    return\
    \ l.filter { (el) -> Bool in\n        return el > 0\n    }", "    // your code\
    \ here\n    return l.filter {x in x >= 0}", "    var result: [Int] = []\n    for\
    \ item in l {\n        if item > 0 {\n            result.append(item)\n      \
    \  }\n    }\n    return result", "    var pos: [Int] = []\n    for n in l {\n\
    \        if n > 0 {\n            pos.append(n)\n        }\n    }\n    return pos",
  "    var result: [Int] = []\n    for x in l {\n        if x > 0 {\n            result.append(x)\n\
    \        }\n    }\n    return result"]
stop_tokens:
- "\n}"
