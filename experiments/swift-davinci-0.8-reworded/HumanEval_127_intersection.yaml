name: HumanEval_127_intersection
language: swift
prompt: "\n/// You are given two intervals,\n/// where each interval is a pair of\
  \ integers. For example, interval = (start, end) = (1, 2).\n/// The given intervals\
  \ are closed which means that the interval (start, end)\n/// includes both start\
  \ and end.\n/// For each given interval, it is assumed that its start is less or\
  \ equal its end.\n/// Your task is to determine whether the length of intersection\
  \ of these two \n/// intervals is a prime number.\n/// Example, the intersection\
  \ of the intervals (1, 3), (2, 4) is (2, 3)\n/// which its length is 1, which not\
  \ a prime number.\n/// If the length of the intersection is a prime number, return\
  \ \"YES\",\n/// otherwise, return \"NO\".\n/// If the two intervals don't intersect,\
  \ return \"NO\".\n/// [input/output] samples:\n/// >>> intersection(interval1: (1,\
  \ 2), interval2: (2, 3))\n/// \"NO\"\n/// >>> intersection(interval1: (-1, 1), interval2:\
  \ (0, 4))\n/// \"NO\"\n/// >>> intersection(interval1: (-3, -1), interval2: (-5,\
  \ 5))\n/// \"YES\"\nfunc intersection(interval1: (Int, Int), interval2: (Int, Int))\
  \ -> String {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(intersection(interval1: (1, 2), interval2:\
  \ (2, 3)) == \"NO\")\nassert(intersection(interval1: (-1, 1), interval2: (0, 4))\
  \ == \"NO\")\nassert(intersection(interval1: (-3, -1), interval2: (-5, 5)) == \"\
  YES\")\nassert(intersection(interval1: (-2, 2), interval2: (-4, 0)) == \"YES\")\n\
  assert(intersection(interval1: (-11, 2), interval2: (-1, -1)) == \"NO\")\nassert(intersection(interval1:\
  \ (1, 2), interval2: (3, 5)) == \"NO\")\nassert(intersection(interval1: (1, 2),\
  \ interval2: (1, 2)) == \"NO\")\nassert(intersection(interval1: (-2, -2), interval2:\
  \ (-3, -2)) == \"NO\")"
completions: ["    let (start1, end1) = interval1\n    let (start2, end2) = interval2\n\
    \    let minStart = min(start1, start2)\n    let maxEnd = max(end1, end2)\n  \
    \  let intersectionStart = max(start1, start2)\n    let intersectionEnd = min(end1,\
    \ end2)\n    let intersection = (intersectionStart, intersectionEnd)\n    if intersectionStart\
    \ <= intersectionEnd {\n        if isPrime(n: intersection.1 - intersection.0)\
    \ {\n            return \"YES\"\n        }\n    }\n    return \"NO\"", "    if\
    \ interval1.0 > interval2.1 || interval2.0 > interval1.1 {\n        return \"\
    NO\"\n    }\n    let start = max(interval1.0, interval2.0)\n    let end = min(interval1.1,\
    \ interval2.1)\n    let length = end - start + 1\n    let divisorsCount = divisorsCountOf(number:\
    \ length)\n    if divisorsCount == 2 {\n        return \"YES\"\n    }\n    return\
    \ \"NO\"", "    let (start1, end1) = interval1\n    let (start2, end2) = interval2\n\
    \    let (start, end) = max(start1, start2), min(end1, end2)\n    return start\
    \ > end ? \"NO\" : String([\"YES\", \"NO\"][(end - start).isPrime()])", "    var\
    \ inter: (Int, Int) = (0, 0)\n    if interval1.0 > interval2.0 {\n        if interval1.0\
    \ > interval2.1 {\n            return \"NO\"\n        } else {\n            inter.0\
    \ = interval1.0\n            if interval1.1 < interval2.1 {\n                inter.1\
    \ = interval1.1\n            } else {\n                inter.1 = interval2.1\n\
    \            }\n        }\n    } else {\n        if interval2.0 > interval1.1\
    \ {\n            return \"NO\"\n        } else {\n            inter.0 = interval2.0\n\
    \            if interval2.1 < interval1.1 {\n                inter.1 = interval2.1\n\
    \            } else {\n                inter.1 = interval1.1\n            }\n\
    \        }\n    }\n    var i = inter.0\n    while i <= inter.1 {\n        if (inter.1\
    \ - inter.0 + 1) % i == 0 {\n            return \"NO\"\n        }\n        i +=\
    \ 1\n    }\n    return \"YES\"", "    let start = max(interval1.0, interval2.0)\n\
    \    let end = min(interval1.1, interval2.1)\n    let length = end - start\n \
    \   return (length <= 0 || (length != 1 && length.isPrime())) ? \"NO\" : \"YES\"",
  "    let intersect = (max(interval1.0, interval2.0), min(interval1.1, interval2.1))\n\
    \    if intersect.0 <= intersect.1 {\n        return PrimeChecker.isPrime(intersect.1\
    \ - intersect.0 + 1) ? \"YES\" : \"NO\"\n    }\n    return \"NO\"", '    return
    "NO"', "    let (min1, max1) = interval1\n    let (min2, max2) = interval2\n \
    \   let start = max(min1, min2)\n    let end = min(max1, max2)\n    if start >=\
    \ end {\n        return \"NO\"\n    }\n    return isPrime(number: end - start)\
    \ ? \"YES\" : \"NO\"", "    let intersection: (Int, Int) = (max(interval1.0, interval2.0),\
    \ min(interval1.1, interval2.1))\n    if intersection.0 > intersection.1 {\n \
    \       return \"NO\"\n    }\n    if intersection.1 - intersection.0 < 2 {\n \
    \       return \"YES\"\n    }\n    for factor in 2..<intersection.1 {\n      \
    \  if intersection.1 % factor == 0 {\n            return \"NO\"\n        }\n \
    \   }\n    return \"YES\"", "    let common = (max(interval1.0, interval2.0),\
    \ min(interval1.1, interval2.1))\n    if common.0 <= common.1 {\n        return\
    \ isPrime(common.1 - common.0 + 1) ? \"YES\" : \"NO\"\n    }\n    return \"NO\"",
  "  let max1 = max(interval1.0, interval2.0)\n  let min1 = min(interval1.1, interval2.1)\n\
    \  if (max1 < min1) {\n    return isPrime(min1 - max1) ? \"YES\" : \"NO\"\n  }\n\
    \  return \"NO\"", "    // your code here\n    let starts = [interval1.0, interval2.0]\n\
    \    let ends = [interval1.1, interval2.1]\n    let maxStart = starts.max()!\n\
    \    let minEnd = ends.min()!\n    let res = minEnd - maxStart + 1\n    if res\
    \ < 0 {\n        return \"NO\"\n    }\n    return isPrime(num: res) ? \"YES\"\
    \ : \"NO\"", "    var result = 0\n    let (lower1, upper1) = interval1\n    let\
    \ (lower2, upper2) = interval2\n    let start = max(lower1, lower2)\n    let end\
    \ = min(upper1, upper2)\n    result = end - start\n    return (isPrime(Int(result)))\
    \ ? \"YES\" : \"NO\"", "    let x = [interval1.0, interval1.1, interval2.0, interval2.1]\n\
    \    let s = x.sorted()\n    guard s[2] > s[1] else {\n        return \"NO\"\n\
    \    }\n    return isPrime(number: s[2] - s[1]) ? \"YES\" : \"NO\"", "  let maxStart\
    \ = max(interval1.0, interval2.0)\n  let minEnd = min(interval1.1, interval2.1)\n\
    \  let length = minEnd - maxStart\n  return (length > 0 && isPrime(n: length))\
    \ ? \"YES\" : \"NO\"", "    // let (a, b) = interval1\n    // let (c, d) = interval2\n\
    \    let a = interval1.0\n    let b = interval1.1\n    let c = interval2.0\n \
    \   let d = interval2.1\n    let x = max(a, c)\n    let y = min(b, d)\n    if\
    \ x <= y {\n        let length = y - x + 1\n        return isPrime(n: length)\
    \ ? \"YES\" : \"NO\"\n    }\n    return \"NO\"", "    let overlap = max(0, min(interval1.1,\
    \ interval2.1) - max(interval1.0, interval2.0))\n    return isPrime(overlap) ?\
    \ \"YES\" : \"NO\"", "  let start = max(interval1.0, interval2.0)\n  let end =\
    \ min(interval1.1, interval2.1)\n  if start > end {\n    return \"NO\"\n  }\n\
    \  if prime(number: end - start + 1) {\n    return \"YES\"\n  }\n  return \"NO\"",
  "    let (start1, end1) = interval1\n    let (start2, end2) = interval2\n    let\
    \ start = max(start1, start2)\n    let end = min(end1, end2)\n    if start > end\
    \ {\n        return \"NO\"\n    }\n    if start == end {\n        return \"YES\"\
    \n    }\n    if isPrime(num: end - start) {\n        return \"YES\"\n    }\n \
    \   return \"NO\"", "    let (a, b) = interval1\n    let (c, d) = interval2\n\
    \    let maximum = max(a, c)\n    let minimum = min(b, d)\n    let interval3 =\
    \ (maximum, minimum)\n    if interval3.0 < interval3.1 {\n        return isPrime(number:\
    \ interval3.1 - interval3.0) ? \"YES\" : \"NO\"\n    }\n    return \"NO\"", " \
    \ let range1 = Range(interval1.0...interval1.1)\n  let range2 = Range(interval2.0...interval2.1)\n\
    \  let range = range1.intersection(range2)\n  if let range = range {\n    if range.count\
    \ > 1 {\n      for i in 2..<range.count {\n        if range.count % i == 0 {\n\
    \          return \"NO\"\n        }\n      }\n      return \"YES\"\n    }\n  }\n\
    \  return \"NO\"", "    guard interval1.0 <= interval2.1 && interval2.0 <= interval1.1\
    \ else {\n        return \"NO\"\n    }\n    var (start, end) = (interval1.0, interval1.1)\n\
    \    if interval2.0 > start {\n        start = interval2.0\n    }\n    if interval2.1\
    \ < end {\n        end = interval2.1\n    }\n    return isPrime(number: end -\
    \ start + 1) ? \"YES\" : \"NO\"", '    return "NO"', "    if (interval1.0 > interval2.1)\
    \ || (interval2.0 > interval1.1) {\n        return \"NO\"\n    }\n    let start\
    \ = interval1.0 > interval2.0 ? interval1.0 : interval2.0\n    let end = interval1.1\
    \ < interval2.1 ? interval1.1 : interval2.1\n    return isPrime(end - start) ?\
    \ \"YES\" : \"NO\"", "    guard interval1.0 <= interval2.1 && interval2.0 <= interval1.1\
    \ else {\n        return \"NO\"\n    }\n    let start = max(interval1.0, interval2.0)\n\
    \    let end = min(interval1.1, interval2.1)\n    let diff = end - start + 1\n\
    \    for i in 2..<diff {\n        if diff % i == 0 {\n            return \"NO\"\
    \n        }\n    }\n    return \"YES\"", "    let range1 = interval1.0 ... interval1.1\n\
    \    let range2 = interval2.0 ... interval2.1\n    let intersection = range1.intersection(range2)\n\
    \    let distance = intersection.upperBound - intersection.lowerBound\n    if\
    \ distance == 0 {\n        return \"NO\"\n    }\n    for i in 2...(distance-1)\
    \ {\n        if distance % i == 0 {\n            return \"NO\"\n        }\n  \
    \  }\n    return \"YES\"", "    if interval1.0 > interval2.1 || interval2.0 >\
    \ interval1.1 {\n        return \"NO\"\n    }\n    let maxStart = max(interval1.0,\
    \ interval2.0)\n    let minEnd = min(interval1.1, interval2.1)\n    let length\
    \ = minEnd - maxStart + 1\n    if isPrime(n: length) {\n        return \"YES\"\
    \n    }\n    return \"NO\"", "    let num1 = interval1.0 > interval2.0 ? interval1.0\
    \ : interval2.0\n    let num2 = interval1.1 < interval2.1 ? interval1.1 : interval2.1\n\
    \    let result = num2 - num1\n    return (result > 0) && isPrime(result) ? \"\
    YES\" : \"NO\"", "    let (a, b) = interval1\n    let (c, d) = interval2\n   \
    \ let min = max(a, c)\n    let max = min(b, d)\n    if min > max {\n        return\
    \ \"NO\"\n    }\n    if max - min == 1 {\n        return \"YES\"\n    }\n    let\
    \ length = max - min\n    if length == 2 {\n        return \"YES\"\n    }\n  \
    \  if length % 2 == 0 {\n        return \"NO\"\n    }\n    let root = sqrt(Double(length))\n\
    \    if root == Double(Int(root)) {\n        return \"NO\"\n    }\n    for i in\
    \ 2 ..< Int(root) {\n        if length % i == 0 {\n            return \"NO\"\n\
    \        }\n    }\n    return \"YES\"", "    let (start1, end1) = interval1\n\
    \    let (start2, end2) = interval2\n    let start = max(start1, start2)\n   \
    \ let end = min(end1, end2)\n    if start >= end {\n        return \"NO\"\n  \
    \  }\n    return (end - start) == 1 ? \"YES\" : \"NO\"", "    var min = max(interval1.0,\
    \ interval2.0)\n    var max = min(interval1.1, interval2.1)\n    var n = max -\
    \ min + 1\n    if n == 1 { return \"NO\" }\n    var prime = true\n    for i in\
    \ 2..<n {\n        if n % i == 0 {\n            prime = false\n            break\n\
    \        }\n    }\n    return prime ? \"YES\" : \"NO\"", "    let (start1, end1)\
    \ = interval1\n    let (start2, end2) = interval2\n    let start = max(start1,\
    \ start2)\n    let end = min(end1, end2)\n    let length = end - start\n    if\
    \ length > 0 {\n        return length.isPrime ? \"YES\" : \"NO\"\n    }\n    return\
    \ \"NO\"", "    // your code here\n    return \"\"", "    let start1 = interval1.0\n\
    \    let end1 = interval1.1\n    let start2 = interval2.0\n    let end2 = interval2.1\n\
    \    let a = max(start1, start2)\n    let b = min(end1, end2)\n    if b < a {\n\
    \        return \"NO\"\n    }\n    if (b - a + 1).isPrime() {\n        return\
    \ \"YES\"\n    }\n    return \"NO\"", "    if interval1.0 > interval2.1 || interval2.0\
    \ > interval1.1 {\n        return \"NO\"\n    } else {\n        let minValue =\
    \ max(interval1.0, interval2.0)\n        let maxValue = min(interval1.1, interval2.1)\n\
    \        var result = \"NO\"\n        if minValue == maxValue {\n            result\
    \ = \"YES\"\n        } else {\n            for i in 2...maxValue {\n         \
    \       if minValue <= i && i <= maxValue {\n                    if maxValue %\
    \ i == 0 {\n                        result = \"NO\"\n                        break\n\
    \                    } else {\n                        result = \"YES\"\n    \
    \                }\n                }\n            }\n        }\n        return\
    \ result\n    }", "    let result = intersectionLength(interval1: interval1, interval2:\
    \ interval2)\n    return result.isPrime() ? \"YES\" : \"NO\"", "    guard interval1.0\
    \ <= interval2.1 && interval2.0 <= interval1.1 else {\n        return \"NO\"\n\
    \    }\n    let start = max(interval1.0, interval2.0)\n    let end = min(interval1.1,\
    \ interval2.1)\n    let length = end - start + 1\n    guard isPrime(n: length)\
    \ else {\n        return \"NO\"\n    }\n    return \"YES\"", "    guard interval1.0\
    \ <= interval2.1 && interval2.0 <= interval1.1 else {\n        return \"NO\"\n\
    \    }\n    let interval = interval1.0 > interval2.0 ? interval1 : interval2\n\
    \    let otherInterval = interval1.0 <= interval2.0 ? interval1 : interval2\n\
    \    let range = interval.0...interval.1\n    let int = range.contains(otherInterval.0)\
    \ ? otherInterval.0 : otherInterval.1\n    let range2 = otherInterval.0...otherInterval.1\n\
    \    let delta = range2.contains(int) ? 0 : 1\n    let len = interval.1 - int\
    \ + delta\n    return isPrime(number: len) ? \"YES\" : \"NO\"", "    // Check\
    \ for empty interval\n    if interval1.0 > interval1.1 || interval2.0 > interval2.1\
    \ {\n        return \"NO\"\n    }\n    // Find x values that intersect\n    let\
    \ minX = max(interval1.0, interval2.0)\n    let maxX = min(interval1.1, interval2.1)\n\
    \    // Check if the intervals don't intersect\n    if minX > maxX {\n       \
    \ return \"NO\"\n    }\n    // Check if the length of the intersection is a prime\
    \ number\n    if isPrime(number: maxX - minX + 1) {\n        return \"YES\"\n\
    \    }\n    return \"NO\"", "    let start = max(interval1.0, interval2.0)\n \
    \   let end = min(interval1.1, interval2.1)\n    guard start <= end else { return\
    \ \"NO\" }\n    return isPrime(n: end - start + 1) ? \"YES\" : \"NO\"", '    return
    "NO"', "    let (start1, end1) = interval1\n    let (start2, end2) = interval2\n\
    \    if max(start1, start2) > min(end1, end2) {\n        return \"NO\"\n    }\n\
    \    let length = min(end1, end2) - max(start1, start2) + 1\n    return isPrime(n:\
    \ length) ? \"YES\" : \"NO\"", "    let maxStart = max(interval1.0, interval2.0)\n\
    \    let minEnd = min(interval1.1, interval2.1)\n    if maxStart <= minEnd {\n\
    \        let diff = minEnd - maxStart\n        for i in 2..<(diff) {\n       \
    \     if diff % i == 0 {\n                return \"NO\"\n            }\n     \
    \   }\n        return \"YES\"\n    }\n    return \"NO\"", "    let i = (interval1.0\
    \ > interval2.0) ? interval1.0 : interval2.0\n    let j = (interval1.1 < interval2.1)\
    \ ? interval1.1 : interval2.1\n    let k = j - i\n    return (k == 0) ? \"NO\"\
    \ : (isPrime(k)) ? \"YES\" : \"NO\"", "    let start = max(interval1.0, interval2.0)\n\
    \    let end = min(interval1.1, interval2.1)\n    if end < start {\n        return\
    \ \"NO\"\n    }\n    if isPrime(end - start + 1) {\n        return \"YES\"\n \
    \   }\n    return \"NO\"", "    var a = interval1.0\n    var b = interval1.1\n\
    \    var c = interval2.0\n    var d = interval2.1\n    if b < a {\n        a =\
    \ interval1.1\n        b = interval1.0\n    }\n    if d < c {\n        c = interval2.1\n\
    \        d = interval2.0\n    }\n    if a > d || b < c {\n        return \"NO\"\
    \n    }\n    if c > a {\n        a = c\n    }\n    if d < b {\n        b = d\n\
    \    }\n    if isPrime(num: b - a) {\n        return \"YES\"\n    }\n    return\
    \ \"NO\"", "    if interval1.0 > interval2.1 || interval2.0 > interval1.1 {\n\
    \        return \"NO\"\n    }\n    var start = interval1.0\n    var end = interval1.1\n\
    \    if interval1.0 < interval2.0 {\n        start = interval2.0\n    }\n    if\
    \ interval1.1 > interval2.1 {\n        end = interval2.1\n    }\n    return getIsPrime(number:\
    \ end - start) ? \"YES\" : \"NO\"", "    let range1 = interval1.0...interval1.1\n\
    \    let range2 = interval2.0...interval2.1\n    var primes = [Int]()\n    if\
    \ range1.intersection(range2).isEmpty {\n        return \"NO\"\n    } else {\n\
    \        for number in range1.intersection(range2) {\n            if number.isPrime()\
    \ {\n                primes.append(number)\n            }\n        }\n       \
    \ return primes.count > 0 ? \"YES\" : \"NO\"\n    }", "    let list: [Int] = [interval1.0,\
    \ interval1.1, interval2.0, interval2.1]\n    let min = list.min()!\n    let max\
    \ = list.max()!\n    let interval = (min, max)\n    var result = interval1.0 >\
    \ interval2.1 || interval1.1 < interval2.0 ? \"NO\" : \"YES\"\n    for i in interval.0...interval.1\
    \ {\n        if i.isPrime() {\n            result = \"YES\"\n            break\n\
    \        }\n    }\n    return result", "    var str: String = \"NO\"\n    let\
    \ min1 = min(interval1.0, interval1.1)\n    let max1 = max(interval1.0, interval1.1)\n\
    \    let min2 = min(interval2.0, interval2.1)\n    let max2 = max(interval2.0,\
    \ interval2.1)\n    if min1 > max2 || min2 > max1 {\n        return str\n    }\n\
    \    let start = max(min1, min2)\n    let end = min(max1, max2)\n    let len =\
    \ end - start + 1\n    if len > 1 {\n        for i in 2...len-1 {\n          \
    \  if len % i == 0 {\n                return str\n            }\n        }\n \
    \       str = \"YES\"\n    }\n    return str", '  return isPrime(gcd(a: interval1.1
    - interval1.0, b: interval2.1 - interval2.0)) ? "YES" : "NO"', '    return "NO"',
  "    let (i1, i2) = (interval1.0, interval1.1)\n    let (j1, j2) = (interval2.0,\
    \ interval2.1)\n    let intsctn = (i1...i2).intersection(j1...j2)\n    guard !intsctn.isEmpty\
    \ else { return \"NO\" }\n    let len = intsctn.count\n    let divisors = Array(2...len)\n\
    \    for divisor in divisors {\n        if len % divisor == 0 {\n            return\
    \ \"NO\"\n        }\n    }\n    return \"YES\"", "    let intersections = Set(interval1.0...interval1.1).intersection(interval2.0...interval2.1)\n\
    \    let numberOfIntersections = intersections.count\n    if numberOfIntersections\
    \ == 0 {\n        return \"NO\"\n    }\n    for i in 2..<numberOfIntersections\
    \ {\n        if numberOfIntersections % i == 0 {\n            return \"NO\"\n\
    \        }\n    }\n    return \"YES\"", "    let min = max(interval1.0, interval2.0)\n\
    \    let max = min(interval1.1, interval2.1)\n    let result = (max - min)\n \
    \   if result == 0 {\n        return \"NO\"\n    }\n    return isPrime(number:\
    \ result) ? \"YES\" : \"NO\"", "    if interval1.0 > interval2.1 || interval2.0\
    \ > interval1.1 {\n        return \"NO\"\n    }\n    var rightBorder = interval1.1\n\
    \    var leftBorder = interval2.0\n    if interval1.1 > interval2.1 {\n      \
    \  rightBorder = interval2.1\n    }\n    if interval2.0 < interval1.0 {\n    \
    \    leftBorder = interval1.0\n    }\n    let resultInterval = rightBorder - leftBorder\n\
    \    if resultInterval < 2 {\n        return \"NO\"\n    }\n    return isPrime(number:\
    \ resultInterval) ? \"YES\" : \"NO\"", "    var firstInterval = interval1\n  \
    \  var secondInterval = interval2\n    if interval1.0 > interval1.1 {\n      \
    \  firstInterval = (interval1.1, interval1.0)\n    }\n    if interval2.0 > interval2.1\
    \ {\n        secondInterval = (interval2.1, interval2.0)\n    }\n    var temp:\
    \ (Int, Int)\n    if firstInterval.0 > secondInterval.0 {\n        temp = firstInterval\n\
    \        firstInterval = secondInterval\n        secondInterval = temp\n    }\n\
    \    if firstInterval.1 < secondInterval.0 {\n        return \"NO\"\n    }\n \
    \   if firstInterval.1 < secondInterval.1 {\n        temp = (secondInterval.0,\
    \ firstInterval.1)\n    } else {\n        temp = (secondInterval.0, secondInterval.1)\n\
    \    }\n    return isPrime(temp.1 - temp.0 + 1) ? \"YES\" : \"NO\"", "    var\
    \ start = max(interval1.0, interval2.0)\n    var end = min(interval1.1, interval2.1)\n\
    \    if start <= end {\n        if isPrime(start) {\n            return \"YES\"\
    \n        }\n    }\n    return \"NO\"", "    if interval1.0 > interval2.1 || interval2.0\
    \ > interval1.1 {\n        return \"NO\"\n    }\n    let start = max(interval1.0,\
    \ interval2.0)\n    let end = min(interval1.1, interval2.1)\n    var result =\
    \ \"NO\"\n    for i in start...end {\n        if i > 1 {\n            var prime\
    \ = true\n            for j in 2..<i {\n                if i % j == 0 {\n    \
    \                prime = false\n                    break\n                }\n\
    \            }\n            if prime {\n                result = \"YES\"\n   \
    \             break\n            }\n        }\n    }\n    return result", '    //
    your code here', "    let start = max(interval1.0, interval2.0)\n    let end =\
    \ min(interval1.1, interval2.1)\n    let range = end - start\n    let isPrime\
    \ = range > 1 && !(2..<range).contains { range % $0 == 0 }\n    return isPrime\
    \ ? \"YES\" : \"NO\"", "    let start1 = interval1.0 < interval2.0 ? interval2.0\
    \ : interval1.0\n    let end1 = interval1.1 < interval2.1 ? interval1.1 : interval2.1\n\
    \    let result = end1 - start1 + 1\n    if result <= 0 {\n        return \"NO\"\
    \n    }\n    if result < 3 {\n        return \"YES\"\n    }\n    if result % 2\
    \ == 0 {\n        return \"NO\"\n    }\n    let d = Int(ceil(sqrt(Double(result))))\n\
    \    var isPrime = true\n    for i in 3...d {\n        if result % i == 0 {\n\
    \            isPrime = false\n            break\n        }\n    }\n    return\
    \ isPrime ? \"YES\" : \"NO\"", "    var (start, end) = (0, 0)\n    if interval1.0\
    \ > interval2.0 {\n        start = interval1.0\n    } else {\n        start =\
    \ interval2.0\n    }\n    if interval1.1 < interval2.1 {\n        end = interval1.1\n\
    \    } else {\n        end = interval2.1\n    }\n    guard start <= end else {\n\
    \        return \"NO\"\n    }\n    let range = start...end\n    var result = false\n\
    \    for num in range {\n        if isPrime(num) {\n            result = true\n\
    \            break\n        }\n    }\n    return result ? \"YES\" : \"NO\"", " \
    \   if interval1.0 > interval2.1 || interval2.0 > interval1.1 {\n        return\
    \ \"NO\"\n    }\n    let min = max(interval1.0, interval2.0)\n    let max = min(interval1.1,\
    \ interval2.1)\n    let len = max - min + 1\n    let sqrtLen = Int(sqrt(Double(len)))\n\
    \    return len == 2 || len == 3 || (2...sqrtLen).allSatisfy { len % $0 != 0 }\
    \ ? \"YES\" : \"NO\"", "    let start = max(interval1.0, interval2.0)\n    let\
    \ end = min(interval1.1, interval2.1)\n    if end < start {\n        return \"\
    NO\"\n    }\n    return isPrime(number: end - start + 1) ? \"YES\" : \"NO\"",
  '    return ""', "    let min1 = min(interval1.0, interval1.1)\n    let max1 = max(interval1.0,\
    \ interval1.1)\n    let min2 = min(interval2.0, interval2.1)\n    let max2 = max(interval2.0,\
    \ interval2.1)\n    let intervals = (min1, max1, min2, max2)\n    if intervals.1\
    \ < intervals.2 || intervals.0 > intervals.3 {\n        return \"NO\"\n    }\n\
    \    let start = max(intervals.0, intervals.2)\n    let end = min(intervals.1,\
    \ intervals.3)\n    let length = end - start + 1\n    if isPrime(length) {\n \
    \       return \"YES\"\n    }\n    return \"NO\"", "    if interval1.0 > interval2.1\
    \ || interval2.0 > interval1.1 {\n        return \"NO\"\n    }\n    let maxStart\
    \ = max(interval1.0, interval2.0)\n    let minEnd = min(interval1.1, interval2.1)\n\
    \    let diff = minEnd - maxStart + 1\n    if diff == 1 {\n        return \"NO\"\
    \n    }\n    for i in 2..<diff {\n        if diff % i == 0 {\n            return\
    \ \"NO\"\n        }\n    }\n    return \"YES\"", "    let start = max(interval1.0,\
    \ interval2.0)\n    let end = min(interval1.1, interval2.1)\n    if start <= end\
    \ {\n        if isPrime(start, end) {\n            return \"YES\"\n        }\n\
    \    }\n    return \"NO\"", "  let intervalsIntersection = intersectionInterval(interval1:\
    \ interval1, interval2: interval2)\n  if intervalsIntersection.0 > intervalsIntersection.1\
    \ {\n    return \"NO\"\n  }\n  if isPrime(intervalsIntersection.1 - intervalsIntersection.0\
    \ + 1) {\n    return \"YES\"\n  }\n  return \"NO\"", '    // your code here',
  '    return ""', "    let start = max(interval1.0, interval2.0)\n    let end = min(interval1.1,\
    \ interval2.1)\n    if start > end {\n        return \"NO\"\n    }\n    let diff\
    \ = end - start + 1\n    for i in 2..<diff {\n        if diff % i == 0 {\n   \
    \         return \"NO\"\n        }\n    }\n    return \"YES\"", "    if (interval1.0\
    \ > interval2.1) || (interval2.0 > interval1.1) {\n        return \"NO\"\n   \
    \ }\n    let start = max(interval1.0, interval2.0)\n    let end = min(interval1.1,\
    \ interval2.1)\n    return isPrime(num: end - start + 1) ? \"YES\" : \"NO\"",
  "    let (start1, end1) = interval1\n    let (start2, end2) = interval2\n    let\
    \ startMax = Swift.max(start1, start2)\n    let endMin = Swift.min(end1, end2)\n\
    \    let intersectionLength = endMin - startMax\n    if intersectionLength < 1\
    \ {\n        return \"NO\"\n    }\n    if intersectionLength == 1 {\n        return\
    \ \"NO\"\n    }\n    if intersectionLength == 2 {\n        return \"NO\"\n   \
    \ }\n    if intersectionLength == 3 {\n        return \"YES\"\n    }\n    if intersectionLength\
    \ % 2 == 0 {\n        return \"NO\"\n    }\n    if intersectionLength % 3 == 0\
    \ {\n        return \"NO\"\n    }\n    var i = 5\n    while i * i <= intersectionLength\
    \ {\n        if intersectionLength % i == 0 {\n            return \"NO\"\n   \
    \     }\n        if intersectionLength % (i + 2) == 0 {\n            return \"\
    NO\"\n        }\n        i += 6\n    }\n    return \"YES\"", "    var isPrime\
    \ = false\n    var setPrime = Set<Int>()\n    if interval1.0 > interval2.0 {\n\
    \        for n in (interval2.0...interval1.1) {\n            if n == 0 || n ==\
    \ 1 {\n                continue\n            }\n            var isPrimeNumber\
    \ = true\n            for i in 2..<n {\n                if n % i == 0 {\n    \
    \                isPrimeNumber = false\n                    break\n          \
    \      }\n            }\n            if isPrimeNumber {\n                setPrime.insert(n)\n\
    \            }\n        }\n    } else {\n        for n in (interval1.0...interval2.1)\
    \ {\n            if n == 0 || n == 1 {\n                continue\n           \
    \ }\n            var isPrimeNumber = true\n            for i in 2..<n {\n    \
    \            if n % i == 0 {\n                    isPrimeNumber = false\n    \
    \                break\n                }\n            }\n            if isPrimeNumber\
    \ {\n                setPrime.insert(n)\n            }\n        }\n    }\n   \
    \ print(setPrime)\n    return setPrime.count > 0 ? \"YES\" : \"NO\"", "    var\
    \ result: String = \"NO\"\n    let start: Int = max(interval1.0, interval2.0)\n\
    \    let end: Int = min(interval1.1, interval2.1)\n    let length: Int = end -\
    \ start + 1\n    if length > 0 && isPrime(number: length) {\n        result =\
    \ \"YES\"\n    }\n    return result", "    let low = max(interval1.0, interval2.0)\n\
    \    let high = min(interval1.1, interval2.1)\n    let length = high - low\n \
    \   guard length > 0 else { return \"NO\" }\n    for i in 2..<length {\n     \
    \   if length % i == 0 {\n            return \"NO\"\n        }\n    }\n    return\
    \ \"YES\"", "    let start = max(interval1.0, interval2.0)\n    let end = min(interval1.1,\
    \ interval2.1)\n    if start >= end {\n        return \"NO\"\n    }\n    let length\
    \ = end - start\n    return isPrime(length) ? \"YES\" : \"NO\"", "    var arr:\
    \ [Int] = []\n    let start1 = interval1.0\n    let end1 = interval1.1\n    let\
    \ start2 = interval2.0\n    let end2 = interval2.1\n    for i in start1...end1\
    \ {\n        for j in start2...end2 {\n            if i == j {\n             \
    \   arr.append(i)\n            }\n        }\n    }\n    if arr.count == 0 {\n\
    \        return \"NO\"\n    }\n    var s = arr.count - 1\n    while s > 1 {\n\
    \        if arr.count % s == 0 {\n            return \"NO\"\n        }\n     \
    \   s -= 1\n    }\n    return \"YES\"", "    let interval = (max(interval1.0,\
    \ interval2.0), min(interval1.1, interval2.1))\n    return isPrime(interval.1\
    \ - interval.0) ? \"YES\" : \"NO\"", "    let i1 = interval1.0 < interval1.1 ?\
    \ interval1 : (interval1.1, interval1.0)\n    let i2 = interval2.0 < interval2.1\
    \ ? interval2 : (interval2.1, interval2.0)\n    let s1 = i1.0, e1 = i1.1\n   \
    \ let s2 = i2.0, e2 = i2.1\n    if s1 > e2 || s2 > e1 {\n        return \"NO\"\
    \n    }\n    let a = max(s1, s2)\n    let b = min(e1, e2)\n    let c = b - a +\
    \ 1\n    return (c >= 2 && isPrime(c)) ? \"YES\" : \"NO\"", "    let start = Swift.max(interval1.0,\
    \ interval2.0)\n    let end = Swift.min(interval1.1, interval2.1)\n    let length\
    \ = end - start\n    return length > 0 &&\n        ![2, 3, 5, 7].contains(length)\
    \ &&\n        ![4, 6, 8, 9].contains(length % 10) ? \"YES\" : \"NO\"", "    let\
    \ (start1, end1) = interval1\n    let (start2, end2) = interval2\n    let left\
    \ = max(start1, start2)\n    let right = min(end1, end2)\n    if left > right\
    \ {\n        return \"NO\"\n    }\n    if isPrime(right - left + 1) {\n      \
    \  return \"YES\"\n    }\n    return \"NO\"", "    var start = 0\n    var end\
    \ = 0\n    if interval1.0 <= interval2.0 {\n        start = interval2.0\n    }\
    \ else {\n        start = interval1.0\n    }\n    if interval1.1 >= interval2.1\
    \ {\n        end = interval2.1\n    } else {\n        end = interval1.1\n    }\n\
    \    if start > end {\n        return \"NO\"\n    }\n    if start == end {\n \
    \       return \"YES\"\n    }\n    let range = start..<end\n    for i in range\
    \ {\n        if isPrime(n: i) {\n            return \"YES\"\n        }\n    }\n\
    \    return \"NO\"", "  let sorted1 = (interval1.0 < interval1.1) ? interval1\
    \ : (interval1.1, interval1.0)\n  let sorted2 = (interval2.0 < interval2.1) ?\
    \ interval2 : (interval2.1, interval2.0)\n  if (sorted1.1 < sorted2.0) || (sorted2.1\
    \ < sorted1.0) {\n    return \"NO\"\n  }\n  let length = ((sorted1.0 < sorted2.0)\
    \ ? sorted2.0 : sorted1.0) ...\n               ((sorted1.1 < sorted2.1) ? sorted1.1\
    \ : sorted2.1)\n  return isPrime(length.count) ? \"YES\" : \"NO\"", "    // Check\
    \ for non intersecting intervals\n    if interval1.1 < interval2.0 || interval2.1\
    \ < interval1.0 {\n        return \"NO\"\n    }\n    // Get the intersection length\n\
    \    let start = max(interval1.0, interval2.0)\n    let end = min(interval1.1,\
    \ interval2.1)\n    let length = end - start + 1\n    // Check for prime\n   \
    \ return isPrime(number: length) ? \"YES\" : \"NO\"", "\tguard interval1.0 < interval2.1,\
    \ interval2.0 < interval1.1 else { return \"NO\" }\n\tlet a = max(interval1.0,\
    \ interval2.0)\n\tlet b = min(interval1.1, interval2.1)\n\tlet diff = b - a\n\t\
    if diff == 1 { return \"NO\" }\n\treturn isPrime(number: diff) ? \"YES\" : \"\
    NO\"", "    let primeNumbers = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41,\
    \ 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    let minStart = min(interval1.0,\
    \ interval2.0)\n    let maxEnd = max(interval1.1, interval2.1)\n    let range\
    \ = maxEnd - minStart\n    let rangeList = (minStart...maxEnd).map { $0 }\n  \
    \  let resultList = rangeList.filter { (item) -> Bool in\n        return interval1.0\
    \ <= item && item <= interval1.1 && interval2.0 <= item && item <= interval2.1\n\
    \    }\n    let result = resultList.max()! - resultList.min()!\n    if resultList.count\
    \ == 0 {\n        return \"NO\"\n    }\n    for number in primeNumbers {\n   \
    \     if number == result {\n            return \"YES\"\n        }\n    }\n  \
    \  return \"NO\"", '    return String()', "    let min1 = min(interval1.0, interval1.1)\n\
    \    let max1 = max(interval1.0, interval1.1)\n    let min2 = min(interval2.0,\
    \ interval2.1)\n    let max2 = max(interval2.0, interval2.1)\n    let intersectStart\
    \ = max(min1, min2)\n    let intersectEnd = min(max1, max2)\n    if intersectStart\
    \ > intersectEnd {\n        return \"NO\"\n    }\n    if intersectStart == intersectEnd\
    \ {\n        return \"YES\"\n    }\n    let intersectLength = intersectEnd - intersectStart\
    \ + 1\n    return isPrime(n: intersectLength) ? \"YES\" : \"NO\"", "    guard\
    \ let intersection = intersection(interval1: interval1, interval2: interval2)\
    \ else {\n        return \"NO\"\n    }\n    let isPrime = isPrimeNumber(number:\
    \ intersection.length)\n    return isPrime ? \"YES\" : \"NO\"", "    if interval1.0\
    \ > interval2.1 || interval2.0 > interval1.1 {\n        return \"NO\"\n    }\n\
    \    let largestStart = max(interval1.0, interval2.0)\n    let smallestEnd = min(interval1.1,\
    \ interval2.1)\n    let lengthOfIntersection = smallestEnd - largestStart + 1\n\
    \    let isPrime = (2...lengthOfIntersection / 2).filter { lengthOfIntersection\
    \ % $0 == 0 }.isEmpty\n    return isPrime ? \"YES\" : \"NO\"", "  let start =\
    \ max(interval1.0, interval2.0)\n  let end = min(interval1.1, interval2.1)\n \
    \ let length = end - start + 1\n  return length.isPrime() ? \"YES\" : \"NO\"",
  "    var answer = \"NO\"\n    let (min1, max1) = interval1\n    let (min2, max2)\
    \ = interval2\n    if max1 < min2 || max2 < min1 {\n        return answer\n  \
    \  }\n    let minInterval = min(max1, max2)\n    let maxInterval = max(min1, min2)\n\
    \    let diff = maxInterval - minInterval\n    if diff < 2 {\n        return answer\n\
    \    }\n    let isPrime = (2..<diff).map { diff % $0 == 0 }.allSatisfy { $0 ==\
    \ false }\n    if isPrime {\n        answer = \"YES\"\n    }\n    return answer",
  "    let (a, b) = interval1\n    let (c, d) = interval2\n    let start = max(a,\
    \ c)\n    let end = min(b, d)\n    if start > end {\n        return \"NO\"\n \
    \   }\n    let length = end - start + 1\n    return isPrime(number: length) ?\
    \ \"YES\" : \"NO\"", "    let intersection: (Int, Int) = (interval1.0 < interval2.0)\
    \ ? (interval2.0, interval1.1) : (interval1.0, interval2.1)\n    return isPrime(intersection.1\
    \ - intersection.0) ? \"YES\" : \"NO\"", "    let int1 = interval1.0 > interval2.0\
    \ ? interval1 : interval2\n    let int2 = interval1.0 <= interval2.0 ? interval1\
    \ : interval2\n    if int1.0 <= int2.1 {\n        let start = max(int1.0, int2.0)\n\
    \        let end = min(int1.1, int2.1)\n        var count = 0\n        for i in\
    \ start...end {\n            count += 1\n        }\n        if isPrime(number:\
    \ count) {\n            return \"YES\"\n        }\n    }\n    return \"NO\"",
  "    let start = max(interval1.0, interval2.0)\n    let end = min(interval1.1, interval2.1)\n\
    \    let result = end - start\n    return isPrime(n: result) ? \"YES\" : \"NO\"",
  "    // Write your code here\n    var start1 = interval1.0\n    var end1 = interval1.1\n\
    \    var start2 = interval2.0\n    var end2 = interval2.1\n    if start1 > end1\
    \ {\n        start1 = interval1.1\n        end1 = interval1.0\n    }\n    if start2\
    \ > end2 {\n        start2 = interval2.1\n        end2 = interval2.0\n    }\n\
    \    var start = 0\n    var end = 0\n    if start1 <= start2 {\n        start\
    \ = start2\n    } else {\n        start = start1\n    }\n    if end1 >= end2 {\n\
    \        end = end2\n    } else {\n        end = end1\n    }\n    if end - start\
    \ <= 0 {\n        return \"NO\"\n    }\n    if isPrime(number: end - start) {\n\
    \        return \"YES\"\n    }\n    return \"NO\"", "    let primeSet = Set(2...7)\n\
    \    let start = max(interval1.0, interval2.0)\n    let end = min(interval1.1,\
    \ interval2.1)\n    let length = abs(end - start)\n    return primeSet.contains(length)\
    \ ? \"YES\" : \"NO\"", "    let (i1Start, i1End) = interval1\n    let (i2Start,\
    \ i2End) = interval2\n    let is1 = max(i1Start, i2Start)\n    let is2 = min(i1End,\
    \ i2End)\n    let length = is2 - is1\n    if length < 0 {\n        return \"NO\"\
    \n    }\n    return isPrime(length) ? \"YES\" : \"NO\"", "    var res: String\
    \ = \"NO\"\n    if (interval1.0 >= interval2.0 && interval1.0 <= interval2.1)\
    \ ||\n       (interval2.0 >= interval1.0 && interval2.0 <= interval1.1) {\n  \
    \      var start = interval1.0 > interval2.0 ? interval1.0 : interval2.0\n   \
    \     var end = interval1.1 < interval2.1 ? interval1.1 : interval2.1\n      \
    \  let diff = end - start\n        for i in 2..<diff {\n            if diff %\
    \ i == 0 {\n                return res\n            }\n        }\n        res\
    \ = \"YES\"\n    }\n    return res", "    let interval1 = interval1.0 < interval1.1\
    \ ? interval1 : (interval1.1, interval1.0)\n    let interval2 = interval2.0 <\
    \ interval2.1 ? interval2 : (interval2.1, interval2.0)\n    let intersection =\
    \ (max(interval1.0, interval2.0), min(interval1.1, interval2.1))\n    guard intersection.0\
    \ <= intersection.1 else { return \"NO\" }\n    guard intersection.1 - intersection.0\
    \ > 1 else { return \"YES\" }\n    for i in 2..<intersection.1 - intersection.0\
    \ {\n        if (intersection.1 - intersection.0) % i == 0 {\n            return\
    \ \"NO\"\n        }\n    }\n    return \"YES\"", "    var newInterval = (0, 0)\n\
    \    let start = max(interval1.0, interval2.0)\n    let end = min(interval1.1,\
    \ interval2.1)\n    if end < start {\n        return \"NO\"\n    }\n    newInterval.0\
    \ = start\n    newInterval.1 = end\n    let length = newInterval.1 - newInterval.0\
    \ + 1\n    if length == 1 {\n        return \"NO\"\n    }\n    if isPrime(length)\
    \ {\n        return \"YES\"\n    }\n    return \"NO\"", "    guard interval1.0\
    \ <= interval2.1, interval2.0 <= interval1.1 else { return \"NO\" }\n    let (start,\
    \ end) = (max(interval1.0, interval2.0), min(interval1.1, interval2.1))\n    guard\
    \ start != end else { return \"NO\" }\n    return isPrime(abs(start - end)) ?\
    \ \"YES\" : \"NO\"", "    let (x1, y1) = interval1\n    let (x2, y2) = interval2\n\
    \    let maxX = max(x1, x2)\n    let minY = min(y1, y2)\n    if maxX <= minY {\n\
    \        return \"YES\"\n    }\n    return \"NO\"", "    let values = [interval1.0,\
    \ interval1.1, interval2.0, interval2.1]\n    let max = values.max()!\n    let\
    \ min = values.min()!\n    let count = max - min + 1\n    if count == 1 || count\
    \ == 2 {\n        return \"NO\"\n    }\n    return count.isPrime() ? \"YES\" :\
    \ \"NO\"", "    // first check if the two intervals are not intersecting\n   \
    \ if interval1.1 < interval2.0 || interval2.1 < interval1.0 {\n        return\
    \ \"NO\"\n    }\n    let min = max(interval1.0, interval2.0)\n    let max = min(interval1.1,\
    \ interval2.1)\n    let length = max - min + 1\n    if length == 1 {\n       \
    \ return \"NO\"\n    }\n    if length == 2 {\n        return \"YES\"\n    }\n\
    \    if length % 2 == 0 {\n        return \"NO\"\n    }\n    for div in 2...length\
    \ / 2 {\n        if length % div == 0 {\n            return \"NO\"\n        }\n\
    \    }\n    return \"YES\"", "    let i1 = interval1.0 <= interval1.1 ? interval1\
    \ : (interval1.1, interval1.0)\n    let i2 = interval2.0 <= interval2.1 ? interval2\
    \ : (interval2.1, interval2.0)\n    let start = max(i1.0, i2.0)\n    let end =\
    \ min(i1.1, i2.1)\n    return start <= end && isPrime(start-end+1) ? \"YES\" :\
    \ \"NO\"", "    let (start1, end1) = interval1\n    let (start2, end2) = interval2\n\
    \    let left = max(start1, start2)\n    let right = min(end1, end2)\n    if left\
    \ > right {\n        return \"NO\"\n    }\n    return isPrime(right - left + 1)\
    \ ? \"YES\" : \"NO\"", "  let lowerBound = max(interval1.0, interval2.0)\n  let\
    \ upperBound = min(interval1.1, interval2.1)\n  let interval = (lowerBound, upperBound)\n\
    \  if interval.0 > interval.1 {\n    return \"NO\"\n  }\n  return (interval.1\
    \ - interval.0) > 2 && isPrime(interval.1 - interval.0) ? \"YES\" : \"NO\"", " \
    \ guard interval1.0 <= interval2.1 && interval2.0 <= interval1.1 else {\n    return\
    \ \"NO\"\n  }\n  let min = max(interval1.0, interval2.0)\n  let max = min(interval1.1,\
    \ interval2.1)\n  let intervalLength = max - min + 1\n  return isPrime(number:\
    \ intervalLength) ? \"YES\" : \"NO\"", "    // check if the intervals intersect\n\
    \    let start = max(interval1.0, interval2.0)\n    let end = min(interval1.1,\
    \ interval2.1)\n    if start <= end {\n        // the length of the intersection\n\
    \        let len = end - start + 1\n        // check if the length is a prime\
    \ number\n        if len == 2 {\n            return \"YES\"\n        }\n     \
    \   if len % 2 == 0 {\n            return \"NO\"\n        }\n        let sq =\
    \ Int(sqrt(Double(len)))\n        for i in 3...sq {\n            if len % i ==\
    \ 0 {\n                return \"NO\"\n            }\n        }\n        return\
    \ \"YES\"\n    }\n    return \"NO\"", "    let interval = (max(interval1.0, interval2.0),\
    \ min(interval1.1, interval2.1))\n    if interval.0 > interval.1 {\n        return\
    \ \"NO\"\n    }\n    let length = interval.1 - interval.0 + 1\n    let prime =\
    \ [1, 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\
    \ 71, 73, 79, 83, 89, 97]\n    return prime.contains(length) ? \"YES\" : \"NO\"",
  "    let maxLeft = max(interval1.0, interval2.0)\n    let minRight = min(interval1.1,\
    \ interval2.1)\n    if maxLeft <= minRight {\n        if isPrime(number: minRight\
    \ - maxLeft + 1) {\n            return \"YES\"\n        }\n    }\n    return \"\
    NO\"", "    let (a, b) = interval1\n    let (c, d) = interval2\n    let m = a\
    \ > c ? a : c\n    let n = b < d ? b : d\n    if m <= n {\n        return isPrime(n\
    \ - m + 1) ? \"YES\" : \"NO\"\n    }\n    return \"NO\"", "    let (a, b) = interval1\n\
    \    let (c, d) = interval2\n    let left = max(a, c)\n    let right = min(b,\
    \ d)\n    let intersectLength = right - left + 1\n    return isPrime(number: intersectLength)\
    \ ? \"YES\" : \"NO\"", "    var ans = \"NO\"\n    let intersection = (max(interval1.0,\
    \ interval2.0), min(interval1.1, interval2.1))\n    if intersection.0 <= intersection.1\
    \ {\n        ans = isPrime(intersection.1 - intersection.0 + 1) ? \"YES\" : \"\
    NO\"\n    }\n    return ans", "    var crossInterval: (Int, Int) = (0, 0)\n  \
    \  if interval1.0 > interval2.0 {\n        crossInterval.0 = interval1.0\n   \
    \ } else {\n        crossInterval.0 = interval2.0\n    }\n    if interval1.1 <\
    \ interval2.1 {\n        crossInterval.1 = interval1.1\n    } else {\n       \
    \ crossInterval.1 = interval2.1\n    }\n    if crossInterval.0 > crossInterval.1\
    \ {\n        return \"NO\"\n    }\n    if crossInterval.0 == crossInterval.1 {\n\
    \        if isPrime(n: crossInterval.0) {\n            return \"YES\"\n      \
    \  } else {\n            return \"NO\"\n        }\n    }\n    for i in (crossInterval.0\
    \ + 1)...(crossInterval.1 - 1) {\n        if isPrime(n: i) {\n            return\
    \ \"YES\"\n        }\n    }\n    return \"NO\"", "  let (interval1_start, interval1_end)\
    \ = interval1\n  let (interval2_start, interval2_end) = interval2\n  let max_start\
    \ = max(interval1_start, interval2_start)\n  let min_end = min(interval1_end,\
    \ interval2_end)\n  if max_start <= min_end {\n    return isPrime(min_end - max_start\
    \ + 1) ? \"YES\" : \"NO\"\n  }\n  return \"NO\"", "    var lower: Int\n    var\
    \ upper: Int\n    if interval1.0 > interval2.0 {\n        lower = interval1.0\n\
    \    } else {\n        lower = interval2.0\n    }\n    if interval1.1 < interval2.1\
    \ {\n        upper = interval1.1\n    } else {\n        upper = interval2.1\n\
    \    }\n    let intervalLength = upper - lower\n    if intervalLength <= 0 {\n\
    \        return \"NO\"\n    }\n    for i in 2..<intervalLength {\n        if intervalLength\
    \ % i == 0 {\n            return \"NO\"\n        }\n    }\n    return \"YES\"",
  "    let sorted = [interval1, interval2].sorted { $0.0 < $0.1 }\n    let rng = sorted[0].1\
    \ >= sorted[1].0 ? (sorted[1].0, sorted[0].1) : nil\n    if let rng = rng {\n\
    \        let diff = rng.1 - rng.0\n        return isPrime(n: diff) ? \"YES\" :\
    \ \"NO\"\n    }\n    return \"NO\"", "    let firstInterval = (interval1.0, interval1.1)\n\
    \    let secondInterval = (interval2.0, interval2.1)\n    let startOfIntersection\
    \ = max(firstInterval.0, secondInterval.0)\n    let endOfIntersection = min(firstInterval.1,\
    \ secondInterval.1)\n    let lengthOfIntersection = endOfIntersection - startOfIntersection\
    \ + 1\n    if lengthOfIntersection < 1 {\n        return \"NO\"\n    }\n    return\
    \ isPrime(number: lengthOfIntersection) ? \"YES\" : \"NO\"", "    // your code\
    \ here\n    return \"\"", "  var s = max(interval1.0, interval2.0)\n  var e =\
    \ min(interval1.1, interval2.1)\n  if e - s < 0 {\n    return \"NO\"\n  }\n  return\
    \ e - s == 1 ? \"YES\" : \"NO\"", "    let (start1, end1) = interval1\n    let\
    \ (start2, end2) = interval2\n    let intersectionStart = max(start1, start2)\n\
    \    let intersectionEnd = min(end1, end2)\n    if intersectionStart > intersectionEnd\
    \ {\n        return \"NO\"\n    }\n    return isPrime(intersectionEnd - intersectionStart\
    \ + 1) ? \"YES\" : \"NO\"", "\tguard interval1.0 <= interval1.1, interval2.0 <=\
    \ interval2.1 else { return \"NO\" }\n\tlet intersection = (max(interval1.0, interval2.0),\
    \ min(interval1.1, interval2.1))\n\tguard intersection.0 <= intersection.1 else\
    \ { return \"NO\" }\n\treturn isPrime(intersection.1 - intersection.0 + 1) ? \"\
    YES\" : \"NO\"", "    let range1 = interval1.0...interval1.1\n    let range2 =\
    \ interval2.0...interval2.1\n    let intersection = range1.intersection(range2)\n\
    \    if let start = intersection.start, let end = intersection.end {\n       \
    \ let length = end - start + 1\n        return isPrime(n: length) ? \"YES\" :\
    \ \"NO\"\n    }\n    return \"NO\"", "    let (i1Start, i1End) = interval1\n \
    \   let (i2Start, i2End) = interval2\n    let len1 = i1End - i1Start\n    let\
    \ len2 = i2End - i2Start\n    let iStart = max(i1Start, i2Start)\n    let iEnd\
    \ = min(i1End, i2End)\n    let length = iEnd - iStart\n    if length <= 0 {\n\
    \        return \"NO\"\n    }\n    if length == 1 {\n        return \"YES\"\n\
    \    }\n    if length % 2 == 0 {\n        return \"NO\"\n    }\n    if length\
    \ == 5 || length == 3 {\n        return \"YES\"\n    }\n    return \"NO\"", " \
    \   let start = max(interval1.0, interval2.0)\n    let end = min(interval1.1,\
    \ interval2.1)\n    if start >= end {\n        return \"NO\"\n    }\n    if isPrime(start\
    \ + 1) {\n        return \"YES\"\n    }\n    return \"NO\"", "  var int1: (Int,\
    \ Int) = interval1\n  var int2: (Int, Int) = interval2\n  if int1.0 > int1.1 {\n\
    \    int1 = (int1.1, int1.0)\n  }\n  if int2.0 > int2.1 {\n    int2 = (int2.1,\
    \ int2.0)\n  }\n  if int1.1 < int2.0 || int2.1 < int1.0 {\n    return \"NO\"\n\
    \  }\n  if int1.0 < int2.0 {\n    int1 = (int2.0, int1.1)\n  }\n  if int1.1 >\
    \ int2.1 {\n    int1 = (int1.0, int2.1)\n  }\n  if int1.1 - int1.0 == 0 {\n  \
    \  return \"NO\"\n  }\n  if isPrime(number: int1.1 - int1.0) {\n    return \"\
    YES\"\n  }\n  return \"NO\"", "    let (start1, end1) = interval1\n    let (start2,\
    \ end2) = interval2\n    var i = max(start1, start2)\n    var j = min(end1, end2)\n\
    \    let result = isPrime(abs(j - i)) ? \"YES\" : \"NO\"\n    return (i > j) ?\
    \ \"NO\" : result", "    let left = max(interval1.0, interval2.0)\n    let right\
    \ = min(interval1.1, interval2.1)\n    if left > right {\n        return \"NO\"\
    \n    }\n    let length = right - left + 1\n    if length == 1 {\n        return\
    \ \"NO\"\n    }\n    if length == 2 {\n        return \"YES\"\n    }\n    var\
    \ isPrime = true\n    for i in 2...(length - 1) {\n        if length % i == 0\
    \ {\n            isPrime = false\n            break\n        }\n    }\n    return\
    \ isPrime ? \"YES\" : \"NO\"", "    let interval = min(interval1.1, interval2.1)\
    \ - max(interval1.0, interval2.0)\n    guard interval > 0 else { return \"NO\"\
    \ }\n    return isPrime(interval) ? \"YES\" : \"NO\"", "    let start = max(interval1.0,\
    \ interval2.0)\n    let end = min(interval1.1, interval2.1)\n    return start\
    \ < end && (end - start).isPrime() ? \"YES\" : \"NO\"", "    let i1Start = interval1.0\n\
    \    let i1End = interval1.1\n    let i2Start = interval2.0\n    let i2End = interval2.1\n\
    \    var start: Int\n    var end: Int\n    if i1Start < i2Start {\n        start\
    \ = i2Start\n    } else {\n        start = i1Start\n    }\n    if i1End < i2End\
    \ {\n        end = i1End\n    } else {\n        end = i2End\n    }\n    if start\
    \ <= end {\n        let interval = end - start + 1\n        var isPrime = true\n\
    \        for x in 2..<interval {\n            if interval % x == 0 {\n       \
    \         isPrime = false\n                break\n            }\n        }\n \
    \       if isPrime {\n            return \"YES\"\n        } else {\n         \
    \   return \"NO\"\n        }\n    } else {\n        return \"NO\"\n    }", " \
    \   let start = max(interval1.0, interval2.0)\n    let end = min(interval1.1,\
    \ interval2.1)\n    if start > end {\n        return \"NO\"\n    }\n    return\
    \ isPrime(value: end - start + 1) ? \"YES\" : \"NO\"", "    if interval1.0 <=\
    \ interval2.0 && interval2.0 <= interval1.1 && interval1.1 <= interval2.1 {\n\
    \        let length = interval1.1 - interval2.0 + 1\n        return isPrime(number:\
    \ length) ? \"YES\" : \"NO\"\n    } else if interval2.0 <= interval1.0 && interval1.0\
    \ <= interval2.1 && interval2.1 <= interval1.1 {\n        let length = interval2.1\
    \ - interval1.0 + 1\n        return isPrime(number: length) ? \"YES\" : \"NO\"\
    \n    } else if interval1.0 < interval2.0 && interval2.1 < interval1.1 {\n   \
    \     let length = interval2.1 - interval2.0 + 1\n        return isPrime(number:\
    \ length) ? \"YES\" : \"NO\"\n    } else if interval2.0 < interval1.0 && interval1.1\
    \ < interval2.1 {\n        let length = interval1.1 - interval1.0 + 1\n      \
    \  return isPrime(number: length) ? \"YES\" : \"NO\"\n    } else {\n        return\
    \ \"NO\"\n    }", '    return ""', "    let (start1, end1) = interval1\n    let\
    \ (start2, end2) = interval2\n    let min = max(start1, start2)\n    let max =\
    \ min(end1, end2)\n    if max < min {\n        return \"NO\"\n    }\n    let length\
    \ = max - min\n    for number in stride(from: 2, through: length / 2, by: 1) {\n\
    \        if length % number == 0 {\n            return \"NO\"\n        }\n   \
    \ }\n    return \"YES\"", "    let (lo1, hi1) = interval1\n    let (lo2, hi2)\
    \ = interval2\n    var (lower, upper) = (0, 0)\n    if lo1 > lo2 {\n        lower\
    \ = lo1\n    } else {\n        lower = lo2\n    }\n    if hi1 < hi2 {\n      \
    \  upper = hi1\n    } else {\n        upper = hi2\n    }\n    if lower >= upper\
    \ {\n        return \"NO\"\n    }\n    let diff = upper - lower\n    for i in\
    \ 2...diff {\n        if diff % i == 0 {\n            return \"NO\"\n        }\n\
    \    }\n    return \"YES\"", "    let int1 = interval1.0\n    let int2 = interval1.1\n\
    \    let int3 = interval2.0\n    let int4 = interval2.1\n    let low = max(int1,\
    \ int3)\n    let high = min(int2, int4)\n    let intersection = high - low\n \
    \   if intersection > 0 && isPrime(n: intersection) {\n        return \"YES\"\n\
    \    }\n    return \"NO\"", "    let s1 = interval1.0, s2 = interval2.0\n    let\
    \ e1 = interval1.1, e2 = interval2.1\n    let length = max(s1, s2) <= min(e1,\
    \ e2) ? abs(min(e1, e2) - max(s1, s2)) : 0\n    return isPrime(length) ? \"YES\"\
    \ : \"NO\"", "  let intersection = (max(interval1.0, interval2.0), min(interval1.1,\
    \ interval2.1))\n  guard intersection.0 <= intersection.1 else { return \"NO\"\
    \ }\n  return isPrime(intersection.1 - intersection.0 + 1) ? \"YES\" : \"NO\"",
  "    guard isIntersected(interval1: interval1, interval2: interval2) else {\n  \
    \      return \"NO\"\n    }\n    let resultInterval = (Swift.max(interval1.0,\
    \ interval2.0), Swift.min(interval1.1, interval2.1))\n    return isPrime(resultInterval.1\
    \ - resultInterval.0) ? \"YES\" : \"NO\"", "  if interval1.0 > interval2.1 ||\
    \ interval2.0 > interval1.1 {\n    return \"NO\"\n  }\n  let start = max(interval1.0,\
    \ interval2.0)\n  let end = min(interval1.1, interval2.1)\n  return isPrime(n:\
    \ end - start + 1) ? \"YES\" : \"NO\"", "    let intersection = (max(interval1.0,\
    \ interval2.0), min(interval1.1, interval2.1))\n    guard intersection.0 <= intersection.1\
    \ else { return \"NO\" }\n    let length = intersection.1 - intersection.0 + 1\n\
    \    return isPrime(length) ? \"YES\" : \"NO\"", "    let m = interval1.0 > interval2.0\
    \ ? interval1.0 : interval2.0\n    let n = interval1.1 < interval2.1 ? interval1.1\
    \ : interval2.1\n    if m >= n {\n        return \"NO\"\n    }\n    if m == 0\
    \ {\n        return \"NO\"\n    }\n    let diff = abs(n - m)\n    for i in 2...diff\
    \ - 1 {\n        if diff % i == 0 {\n            return \"NO\"\n        }\n  \
    \  }\n    return \"YES\"", "    let maxStart = max(interval1.0, interval2.0)\n\
    \    let minEnd = min(interval1.1, interval2.1)\n    let result = (maxStart...minEnd).count\
    \ - 1\n    return result == 1 ? \"NO\" : (result == 2 || result == 3 || result\
    \ == 5 || result == 7 || result == 11 || result == 13 || result == 17 || result\
    \ == 19) ? \"YES\" : \"NO\"", "    let maxStart = max(interval1.0, interval2.0)\n\
    \    let minEnd = min(interval1.1, interval2.1)\n    let length = minEnd - maxStart\
    \ + 1\n    if length <= 0 {\n        return \"NO\"\n    }\n    return isPrime(n:\
    \ length) ? \"YES\" : \"NO\"", "    let min = max(interval1.0, interval2.0)\n\
    \    let max = min(interval1.1, interval2.1)\n    if min > max {\n        return\
    \ \"NO\"\n    }\n    let intervalLength = max - min + 1\n    return isPrime(intervalLength)\
    \ ? \"YES\" : \"NO\"", "    // Solution\n    let start = max(interval1.0, interval2.0)\n\
    \    let end = min(interval1.1, interval2.1)\n    var length = end - start + 1\n\
    \    if start > end {\n        length = 0\n    }\n    if length == 1 {\n     \
    \   return \"NO\"\n    }\n    for i in 2...length / 2 {\n        if length % i\
    \ == 0 {\n            return \"NO\"\n        }\n    }\n    return \"YES\"", " \
    \ var interval = (start: 0, end: 0)\n  if interval1.0 <= interval2.0 && interval2.0\
    \ <= interval1.1 {\n    interval.start = interval2.0\n  } else if interval2.0\
    \ <= interval1.0 && interval1.0 <= interval2.1 {\n    interval.start = interval1.0\n\
    \  } else {\n    return \"NO\"\n  }\n  if interval1.0 <= interval2.1 && interval2.1\
    \ <= interval1.1 {\n    interval.end = interval2.1\n  } else if interval2.0 <=\
    \ interval1.1 && interval1.1 <= interval2.1 {\n    interval.end = interval1.1\n\
    \  } else {\n    return \"NO\"\n  }\n  return isPrime(n: interval.end - interval.start)\
    \ ? \"YES\" : \"NO\"", "    if interval1.0 > interval2.1 || interval2.0 > interval1.1\
    \ {\n        return \"NO\"\n    } else {\n        var c = 0\n        if interval1.0\
    \ < interval2.0 {\n            c = interval2.0 - interval1.0\n        } else {\n\
    \            c = interval1.0 - interval2.0\n        }\n        if interval1.1\
    \ < interval2.1 {\n            c += interval1.1 - interval2.0\n        } else\
    \ {\n            c += interval2.1 - interval1.0\n        }\n        for i in 2...c\
    \ {\n            if c % i == 0 {\n                return \"NO\"\n            }\n\
    \        }\n        return \"YES\"\n    }", "    let (start1, end1) = interval1\n\
    \    let (start2, end2) = interval2\n    let result = isIntersect(start1: start1,\
    \ end1: end1, start2: start2, end2: end2)\n    if result {\n        let result\
    \ = findIntersection(start1: start1, end1: end1, start2: start2, end2: end2)\n\
    \        let distance = abs(result.0 - result.1)\n        return isPrime(n: distance)\
    \ ? \"YES\" : \"NO\"\n    }\n    return \"NO\"", "    let (x, y) = interval1\n\
    \    let (p, q) = interval2\n    let start = max(x, p)\n    let end = min(y, q)\n\
    \    if start <= end {\n        let intervalLen = end - start + 1\n        return\
    \ intervalLen.isPrime() ? \"YES\" : \"NO\"\n    }\n    return \"NO\"", "    let\
    \ start = max(interval1.0, interval2.0)\n    let end = min(interval1.1, interval2.1)\n\
    \    if start > end {\n        return \"NO\"\n    }\n    if start < end {\n  \
    \      if isPrime(end - start) {\n            return \"YES\"\n        }\n    }\n\
    \    return \"NO\"", "    var interval1 = interval1, interval2 = interval2\n \
    \   let intersection = (max(interval1.0, interval2.0), min(interval1.1, interval2.1))\n\
    \    let intersectionLength = intersection.1 - intersection.0\n    return isPrime(intersectionLength)\
    \ ? \"YES\" : \"NO\"", "    let start = max(interval1.0, interval2.0)\n    let\
    \ end = min(interval1.1, interval2.1)\n    if start <= end {\n        return (end\
    \ - start + 1).isPrime() ? \"YES\" : \"NO\"\n    }\n    return \"NO\"", "    let\
    \ start = max(interval1.0, interval2.0)\n    let end = min(interval1.1, interval2.1)\n\
    \    if end < start {\n        return \"NO\"\n    }\n    return isPrime(number:\
    \ end - start + 1) ? \"YES\" : \"NO\"", "    var a = interval1.0\n    var b =\
    \ interval1.1\n    var c = interval2.0\n    var d = interval2.1\n    if a > b\
    \ {\n        (a, b) = (b, a)\n    }\n    if c > d {\n        (c, d) = (d, c)\n\
    \    }\n    if a > d || b < c {\n        return \"NO\"\n    }\n    if a > c {\n\
    \        c = a\n    }\n    if b < d {\n        d = b\n    }\n    return isPrime(c\
    \ - d + 1) ? \"YES\" : \"NO\"", "    let (a, b) = interval1\n    let (c, d) =\
    \ interval2\n    let start = max(a, c)\n    let end = min(b, d)\n    if start\
    \ > end {\n        return \"NO\"\n    }\n    if start == end {\n        return\
    \ isPrime(start) ? \"YES\" : \"NO\"\n    }\n    return isPrime(end - start + 1)\
    \ ? \"YES\" : \"NO\"", "    let length = getIntersectionLength(interval1: interval1,\
    \ interval2: interval2)\n    return isPrime(n: length) ? \"YES\" : \"NO\"", " \
    \   if interval1.0 > interval2.1 || interval2.0 > interval1.1 {\n        return\
    \ \"NO\"\n    }\n    let start = max(interval1.0, interval2.0)\n    let end =\
    \ min(interval1.1, interval2.1)\n    let prime = end - start + 1\n    for number\
    \ in 2...prime/2 {\n        if prime % number == 0 {\n            return \"NO\"\
    \n        }\n    }\n    return \"YES\"", "    let inter = (max(interval1.0, interval2.0),\
    \ min(interval1.1, interval2.1))\n    if inter.0 <= inter.1 {\n        if inter.1\
    \ - inter.0 == 0 {\n            return \"NO\"\n        }\n        for i in 2..<inter.1\
    \ - inter.0 {\n            if (inter.1 - inter.0) % i == 0 {\n               \
    \ return \"NO\"\n            }\n        }\n        return \"YES\"\n    }\n   \
    \ return \"NO\"", "    let (a, b) = interval1\n    let (c, d) = interval2\n  \
    \  let maxStart = max(a, c)\n    let minEnd = min(b, d)\n    if maxStart >= minEnd\
    \ {\n        return \"NO\"\n    }\n    let length = minEnd - maxStart\n    if\
    \ length == 0 {\n        return \"NO\"\n    }\n    if length == 1 {\n        return\
    \ \"NO\"\n    }\n    for i in 2...length {\n        if length % i == 0 {\n   \
    \         return \"NO\"\n        }\n    }\n    return \"YES\"", "    let start\
    \ = max(interval1.0, interval2.0)\n    let end = min(interval1.1, interval2.1)\n\
    \    if start <= end {\n        return \"YES\"\n    }\n    return \"NO\"", " \
    \   var tempIntersection: (Int, Int) = (0, 0)\n    if interval1.0 < interval2.0\
    \ {\n        tempIntersection.0 = interval2.0\n    } else {\n        tempIntersection.0\
    \ = interval1.0\n    }\n    if interval1.1 < interval2.1 {\n        tempIntersection.1\
    \ = interval1.1\n    } else {\n        tempIntersection.1 = interval2.1\n    }\n\
    \    if tempIntersection.0 > tempIntersection.1 {\n        return \"NO\"\n   \
    \ }\n    var lengthOfIntersection = tempIntersection.1 - tempIntersection.0\n\
    \    if lengthOfIntersection == 0 {\n        return \"YES\"\n    }\n    for i\
    \ in 2..<lengthOfIntersection {\n        if lengthOfIntersection % i == 0 {\n\
    \            return \"NO\"\n        }\n    }\n    return \"YES\"", "    let (start1,\
    \ end1) = interval1\n    let (start2, end2) = interval2\n    let minStart = min(start1,\
    \ start2)\n    let maxEnd = max(end1, end2)\n    let lengths = (maxEnd - minStart)\
    \ + 1\n    if lengths <= 0 {\n        return \"NO\"\n    }\n    for i in 2..<lengths\
    \ {\n        if lengths % i == 0 {\n            return \"NO\"\n        }\n   \
    \ }\n    return \"YES\"", "    var firstInterval = interval1\n    var secondInterval\
    \ = interval2\n    let firstIntervalMin = min(firstInterval.0, firstInterval.1)\n\
    \    let firstIntervalMax = max(firstInterval.0, firstInterval.1)\n    let secondIntervalMin\
    \ = min(secondInterval.0, secondInterval.1)\n    let secondIntervalMax = max(secondInterval.0,\
    \ secondInterval.1)\n    let maxInterval = max(firstIntervalMax, secondIntervalMax)\n\
    \    let minInterval = min(firstIntervalMin, secondIntervalMin)\n    if maxInterval\
    \ <= minInterval {\n        return \"NO\"\n    }\n    var isPrime: Bool = true\n\
    \    let maxNumber = maxInterval - minInterval\n    if maxNumber > 1 {\n     \
    \   for i in 2..<maxNumber {\n            if maxNumber % i == 0 {\n          \
    \      isPrime = false\n                break\n            }\n        }\n    }\n\
    \    return isPrime ? \"YES\" : \"NO\"", "    let one = interval1.0 < interval2.0\
    \ ? interval1 : interval2\n    let two = interval1.0 < interval2.0 ? interval2\
    \ : interval1\n    if one.1 < two.0 {\n        return \"NO\"\n    }\n    if one.1\
    \ < two.1 {\n        return isPrime(num: one.1 - two.0 + 1) ? \"YES\" : \"NO\"\
    \n    }\n    return isPrime(num: two.1 - two.0 + 1) ? \"YES\" : \"NO\"", "   \
    \ let lowerBound = max(interval1.0, interval2.0)\n    let upperBound = min(interval1.1,\
    \ interval2.1)\n    if lowerBound > upperBound {\n        return \"NO\"\n    }\n\
    \    let intersection = abs(lowerBound - upperBound) + 1\n    let result = intersection.isPrime()\
    \ ? \"YES\" : \"NO\"\n    return result", "    let start = max(interval1.0, interval2.0)\n\
    \    let end = min(interval1.1, interval2.1)\n    let length = end - start\n \
    \   if length <= 0 {\n        return \"NO\"\n    }\n    return isPrime(length)\
    \ ? \"YES\" : \"NO\"", "    let a = interval1.0, b = interval1.1\n    let c =\
    \ interval2.0, d = interval2.1\n    // find the lower bound of the intersection\n\
    \    var max1 = a, max2 = c\n    if max1 < max2 { max1 = c; max2 = a }\n    let\
    \ start = max1 > max2 ? max1 : max2\n    // find the upper bound of the intersection\n\
    \    var min1 = b, min2 = d\n    if min1 > min2 { min1 = d; min2 = b }\n    let\
    \ end = min1 < min2 ? min1 : min2\n    if end < start { return \"NO\" } // no\
    \ intersection\n    // check if the length of the intersection is a prime number\n\
    \    var number = end - start + 1\n    if number < 2 { return \"NO\" }\n    while\
    \ number != 1 {\n        if number == 2 { return \"YES\" }\n        let mid =\
    \ number / 2\n        if number % mid == 0 { return \"NO\" }\n        number =\
    \ mid\n    }\n    return \"NO\"", "\t\n\t// 1. There are a few cases where we\
    \ won't have intersection (1) interval1 is left of interval2\n\t// (2) interval1\
    \ is right of interval2 (3) interval1 contains interval2 and (4) interval2 contains\
    \ interval1\n\t// We want to know the bounds of each case so we can calculate\
    \ the intersection length\n\n\t// 1st case: interval1 is to the left of interval2\n\
    \t// bounds will be all the values in interval2 plus 1 extra\n\t// 1 2 3 4 5 6\
    \ 7 8 9\n\t//           ^ ^\n\t//           | |\n\t//         interval2\n\t//\
    \              |\n\t//              v\n\t//              10\n\t//          ^ \
    \  ^\n\t//          |   |\n\t//       interval1\n\t//\n\t// There is no intersection\
    \ in this case so we can do some cheap checks\n\tif interval1.0 > interval2.1\
    \ {\n\t\treturn \"NO\"\n\t}\n\n\t// 2nd case: interval1 is to the right of interval2\n\
    \t// bounds will be all the values in interval1 plus 1 extra\n\t// 1 2 3 4 5 6\
    \ 7 8 9\n\t//           ^ ^\n\t//           | |\n\t//         interval1\n\t//\
    \              |\n\t//              v\n\t//              10\n\t//          ^ \
    \  ^\n\t//          |   |\n\t//       interval2\n\t//\n\t// There is no intersection\
    \ in this case so we can do some cheap checks\n\tif interval1.1 < interval2.0\
    \ {\n\t\treturn \"NO\"\n\t}\n\n\t// 3rd case: interval1 contains interval2\n\t\
    // bounds will be all the values in interval1 plus 1 extra\n\t// 1 2 3 4 5 6 7\
    \ 8 9\n\t//           ^     ^\n\t//           |     |\n\t//         interval1\n\
    \t//              ^   ^\n\t//              |   |\n\t//            interval2\n\t\
    //\n\t// There is an intersection in this case but we have to do additional checks\
    \ to know for sure\n\tif interval1.0 <= interval2.0 && interval1.1 >= interval2.1\
    \ {\n\t\tif interval2.0 - interval1.0 > 1 {\n\t\t\treturn \"NO\"\n\t\t}\n\t\t",
  "    // your code here\n    var isPrime = false\n    var intersection = (0, 0)\n\
    \    if interval1.0 > interval2.0 {\n        intersection.0 = interval1.0\n  \
    \  } else {\n        intersection.0 = interval2.0\n    }\n    if interval1.1 <\
    \ interval2.1 {\n        intersection.1 = interval1.1\n    } else {\n        intersection.1\
    \ = interval2.1\n    }\n    if intersection.0 > intersection.1 {\n        return\
    \ \"NO\"\n    }\n    let length = intersection.1 - intersection.0 + 1\n    for\
    \ i in 2...(length - 1) {\n        if length % i == 0 {\n            isPrime =\
    \ false\n            break\n        } else {\n            isPrime = true\n   \
    \     }\n    }\n    if isPrime {\n        return \"YES\"\n    } else {\n     \
    \   return \"NO\"\n    }", "    let start = max(interval1.0, interval2.0)\n  \
    \  let end = min(interval1.1, interval2.1)\n    if start > end {\n        return\
    \ \"NO\"\n    }\n    let intervalLength = end - start + 1\n    for i in 2..<intervalLength\
    \ {\n        if intervalLength % i == 0 {\n            return \"NO\"\n       \
    \ }\n    }\n    return \"YES\"", "    if interval1.0 > interval2.1 || interval2.0\
    \ > interval1.1 {\n        return \"NO\"\n    }\n    var start: Int\n    var end:\
    \ Int\n    if interval1.0 < interval2.0 {\n        start = interval2.0\n    }\
    \ else {\n        start = interval1.0\n    }\n    if interval1.1 < interval2.1\
    \ {\n        end = interval1.1\n    } else {\n        end = interval2.1\n    }\n\
    \    let distance = end - start\n    if distance < 0 {\n        return \"NO\"\n\
    \    }\n    if distance == 0 {\n        return \"YES\"\n    }\n    if distance\
    \ == 1 {\n        return \"NO\"\n    }\n    if distance == 2 {\n        return\
    \ \"YES\"\n    }\n    if distance % 2 == 0 {\n        return \"NO\"\n    }\n \
    \   if distance % 3 == 0 {\n        return \"NO\"\n    }\n    if distance % 5\
    \ == 0 {\n        return \"NO\"\n    }\n    if distance % 7 == 0 {\n        return\
    \ \"NO\"\n    }\n    if distance % 11 == 0 {\n        return \"NO\"\n    }\n \
    \   return \"YES\"", "    let a = interval1.0 > interval2.0 ? interval1.0 : interval2.0\n\
    \    let b = interval1.1 < interval2.1 ? interval1.1 : interval2.1\n    if a <=\
    \ b {\n        return b - a == 2 ? \"YES\" : \"NO\"\n    }\n    return \"NO\"",
  "    let maxStart = max(interval1.0, interval2.0)\n    let minEnd = min(interval1.1,\
    \ interval2.1)\n    let length = minEnd - maxStart\n    if length > 0 && isPrime(length)\
    \ {\n        return \"YES\"\n    }\n    return \"NO\"", "  let (start1, end1)\
    \ = interval1\n  let (start2, end2) = interval2\n  if end1 < start2 || end2 <\
    \ start1 {\n    return \"NO\"\n  }\n  let minimumStart = start1 > start2 ? start1\
    \ : start2\n  let maximumEnd = end1 < end2 ? end1 : end2\n  let intersectionLength\
    \ = maximumEnd - minimumStart + 1\n  return isPrime(number: intersectionLength)\
    \ ? \"YES\" : \"NO\"", "    let (_, end1) = interval1\n    let (start2, _) = interval2\n\
    \    if end1 < start2 {\n        return \"NO\"\n    }\n    let (_, end2) = interval2\n\
    \    let (start1, _) = interval1\n    if end2 < start1 {\n        return \"NO\"\
    \n    }\n    let maxStart = max(start1, start2)\n    let minEnd = min(end1, end2)\n\
    \    let range = minEnd - maxStart\n    if range < 2 {\n        return \"NO\"\n\
    \    }\n    let isPrime = range.isPrime\n    return isPrime ? \"YES\" : \"NO\"",
  "    var start = 0\n    var end = 0\n    // find the intersection start\n    if\
    \ interval1.0 <= interval2.0 {\n        start = interval2.0\n    } else {\n  \
    \      start = interval1.0\n    }\n    // find the intersection end\n    if interval1.1\
    \ <= interval2.1 {\n        end = interval1.1\n    } else {\n        end = interval2.1\n\
    \    }\n    // if the two intervals don't intersect\n    if start > end {\n  \
    \      return \"NO\"\n    }\n    // check if the length of the intersection is\
    \ a prime number\n    if isPrime(number: end - start + 1) {\n        return \"\
    YES\"\n    }\n    return \"NO\"", "  let start = interval1.0 > interval2.0 ? interval1.0\
    \ : interval2.0\n  let end = interval1.1 < interval2.1 ? interval1.1 : interval2.1\n\
    \  let length = end - start + 1\n  guard length > 0 else { return \"NO\" }\n \
    \ for i in 2..<length {\n    if length % i == 0 {\n      return \"NO\"\n    }\n\
    \  }\n  return \"YES\"", "  let isect = (max(interval1.0, interval2.0), min(interval1.1,\
    \ interval2.1))\n  if isect.0 > isect.1 {\n    return \"NO\"\n  } else {\n   \
    \ return isPrime(number: isect.1 - isect.0 + 1) ? \"YES\" : \"NO\"\n  }", "  \
    \  let sorted = [interval1, interval2].sorted { $0.0 < $0.1 }\n    let (i1l, i1h)\
    \ = sorted[0]\n    let (i2l, i2h) = sorted[1]\n    let min = i1h < i2l ? i1h :\
    \ i2l\n    let max = i1l > i2h ? i1l : i2h\n    let diff = max - min\n    return\
    \ isPrime(n: diff) ? \"YES\" : \"NO\"", "    let intersectionInterval = (interval1.0,\
    \ interval2.1)\n    if intersectionInterval.0 <= intersectionInterval.1 {\n  \
    \      let result = intersectionInterval.1 - intersectionInterval.0 + 1\n    \
    \    if isPrime(result) {\n            return \"YES\"\n        }\n    }\n    return\
    \ \"NO\"", "    let (start1, end1) = interval1\n    let (start2, end2) = interval2\n\
    \    let primeValues = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    if (start1 >= end2) || (start2\
    \ >= end1) {\n        return \"NO\"\n    }\n    let start = max(start1, start2)\n\
    \    let end = min(end1, end2)\n    let length = end - start\n    return primeValues.contains(length)\
    \ ? \"YES\" : \"NO\"", "    var intersect = (0, 0)\n    if interval1.0 < interval2.0\
    \ {\n        intersect.0 = interval2.0\n    } else {\n        intersect.0 = interval1.0\n\
    \    }\n    if interval1.1 < interval2.1 {\n        intersect.1 = interval1.1\n\
    \    } else {\n        intersect.1 = interval2.1\n    }\n    var result = intersect.1\
    \ - intersect.0\n    if intersect.0 > intersect.1 {\n        result = 0\n    }\n\
    \    if result == 0 {\n        return \"NO\"\n    }\n    if result == 1 {\n  \
    \      return \"NO\"\n    }\n    if result == 2 {\n        return \"YES\"\n  \
    \  }\n    var answer = \"NO\"\n    for i in 2..<result {\n        if result %\
    \ i == 0 {\n            answer = \"NO\"\n            break\n        } else {\n\
    \            answer = \"YES\"\n        }\n    }\n    return answer", "    if interval1.0\
    \ >= interval2.1 || interval2.0 >= interval1.1 {\n        return \"NO\"\n    }\n\
    \    let min = max(interval1.0, interval2.0)\n    let max = min(interval1.1, interval2.1)\n\
    \    let interval = (min, max)\n    let result = interval.1 - interval.0\n   \
    \ let primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59,\
    \ 61, 67, 71, 73, 79, 83, 89, 97]\n    return primes.contains(result) ? \"YES\"\
    \ : \"NO\"", "    let start = max(interval1.0, interval2.0)\n    let end = min(interval1.1,\
    \ interval2.1)\n    let intersection = end - start\n    return intersection >\
    \ 0 && isPrime(intersection) ? \"YES\" : \"NO\"", "    let i1 = interval1.0 <\
    \ interval1.1 ? interval1 : (interval1.1, interval1.0)\n    let i2 = interval2.0\
    \ < interval2.1 ? interval2 : (interval2.1, interval2.0)\n    let (l1, r1) = i1\n\
    \    let (l2, r2) = i2\n    let intersect = (l1 > l2 && l1 < r2) || (r1 > l2 &&\
    \ r1 < r2)\n    if intersect {\n        let len = abs(max(l1, l2) - min(r1, r2))\n\
    \        return isPrime(len) ? \"YES\" : \"NO\"\n    }\n    return \"NO\"", " \
    \   let i1 = interval1.0...interval1.1\n    let i2 = interval2.0...interval2.1\n\
    \    let result = Set(i1).intersection(i2)\n    let prime = result.count.isPrime()\n\
    \    switch result.count {\n    case 0:\n        return \"NO\"\n    case 1:\n\
    \        return \"NO\"\n    default:\n        return prime ? \"YES\" : \"NO\"\n\
    \    }", "    guard interval1.0 < interval2.1 else { return \"NO\" }\n    guard\
    \ interval2.0 < interval1.1 else { return \"NO\" }\n    let start = max(interval1.0,\
    \ interval2.0)\n    let end = min(interval1.1, interval2.1)\n    return (start..<end).count.isPrime\
    \ ? \"YES\" : \"NO\"", "    let start = max(interval1.0, interval2.0)\n    let\
    \ end = min(interval1.1, interval2.1)\n    if end < start {\n        return \"\
    NO\"\n    }\n    return isPrime(end - start + 1) ? \"YES\" : \"NO\"", "    if\
    \ interval1.0 > interval2.1 || interval2.0 > interval1.1 {\n        return \"\
    NO\"\n    }\n    let intersection = max(interval1.0, interval2.0)...min(interval1.1,\
    \ interval2.1)\n    let range = Array(intersection)\n    let length = range.count\n\
    \    return length.isPrime ? \"YES\" : \"NO\"", "    let (start1, end1) = interval1\n\
    \    let (start2, end2) = interval2\n    let start = max(start1, start2)\n   \
    \ let end = min(end1, end2)\n    if end <= start {\n        return \"NO\"\n  \
    \  }\n    if isPrime(value: end - start) {\n        return \"YES\"\n    }\n  \
    \  return \"NO\"", "    var result = (min(interval1.1, interval2.1) - max(interval1.0,\
    \ interval2.0)) + 1\n    result = result < 0 ? 0 : result\n    let primes = [2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97]\n    let sorted = primes.sorted()\n    for i in sorted {\n \
    \       if result == i {\n            return \"YES\"\n        }\n    }\n    return\
    \ \"NO\"", "    let intersection = max(interval1.0, interval2.0) ... min(interval1.1,\
    \ interval2.1)\n    return prime(intersection.count) ? \"YES\" : \"NO\""]
stop_tokens:
- "\n}"
