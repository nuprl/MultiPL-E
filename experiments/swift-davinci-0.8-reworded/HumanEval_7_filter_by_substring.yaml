name: HumanEval_7_filter_by_substring
language: swift
prompt: "\n/// Filter an input array of strings only for ones that contain given substring\n\
  /// >>> filter_by_substring(strings: [] as [String], substring: \"a\")\n/// [] as\
  \ [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\", \"cde\", \"\
  array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\nfunc filter_by_substring(strings:\
  \ [String], substring: String) -> [String] {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(filter_by_substring(strings: [] as [String],\
  \ substring: \"john\") == [] as [String])\nassert(filter_by_substring(strings: [\"\
  xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\"\
  ) == [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\"\
  , \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\") ==\
  \ [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
  \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
  grunt\", \"prune\"])"
completions: ['    return strings.filter { s in s.contains(substring) }', '  return
    strings.filter({ s in s.contains(substring) })', '    return strings.filter({
    $0.contains(substring) })', "    return strings.filter { (string) -> Bool in\n\
    \        return string.range(of: substring) != nil\n    }", "    let stringContainsSubstring\
    \ = {(string: String) -> Bool in string.contains(substring)}\n    return strings.filter(stringContainsSubstring)",
  '    return strings.filter {$0.contains(substring)}', "    strings.filter { string\
    \ in\n        string.contains(substring)\n    }", "    var results: [String] =\
    \ []\n    for string in strings {\n        if string.contains(substring) {\n \
    \           results.append(string)\n        }\n    }\n    return results", '    return
    strings.filter({$0.range(of: substring) != nil})', '    return strings.filter
    { $0.contains(substring) }', "  var results: [String] = []\n  for string in strings\
    \ {\n    if string.contains(substring) {\n      results.append(string)\n    }\n\
    \  }\n  return results", "    return strings.filter {\n        $0.range(of: substring)\
    \ != nil\n    }", '  return strings.filter { return $0.range(of: substring) !=
    nil }', "    return strings.filter {\n        $0.contains(substring)\n    }",
  '    return strings.filter { $0.range(of: substring) != nil }', "    // implement\
    \ me!\n    var outputArray : [String] = []\n    for string in strings {\n    \
    \    if (string.contains(substring)) {\n            outputArray.append(string)\n\
    \        }\n    }\n    return outputArray", '    return strings.filter({ $0.contains(substring)
    })', '    return strings.filter { $0.contains(substring) }', "    var result:\
    \ [String] = []\n    for item in strings {\n        if item.range(of: substring)\
    \ != nil {\n            result.append(item)\n        }\n    }\n    return result",
  "    var filtered_array = [String]()\n    for str in strings {\n        if str.range(of:\
    \ substring) != nil {\n            filtered_array.append(str)\n        }\n   \
    \ }\n    return filtered_array", '  return strings.filter { string in string.contains(substring)
    }', "    var filtered = [String]()\n    for string in strings {\n        if string.contains(substring)\
    \ {\n            filtered.append(string)\n        }\n    }\n    return filtered",
  '  return strings.filter({$0.contains(substring)})', '    return strings.filter
    { $0.contains(substring) }', '    return strings.filter { str in str.contains(substring)
    }', "    return strings.filter({ (str) -> Bool in\n        str.contains(substring)\n\
    \    })", '    return strings.filter { elem in elem.contains(substring) }', '    return
    strings.filter { $0.range(of: substring) != nil }', '    return strings.filter
    { $0.contains(substring) }', "    var result: [String] = []\n    for str in strings\
    \ {\n        if str.contains(substring) {\n            result.append(str)\n  \
    \      }\n    }\n    return result", '    return strings.filter { $0.contains(substring)
    }', "    return strings.filter {\n        $0.range(of: substring) != nil\n   \
    \ }", '    return strings.filter { $0.contains(substring) }', '    return strings.filter({$0.contains(substring)})',
  '    return strings.filter { $0.range(of: substring) != nil }', '    return strings.filter
    { (s: String) -> Bool in s.contains(substring) }', '    return strings.filter({$0.contains(substring)})',
  "    var filtered = [String]()\n    for string in strings {\n        if string.range(of:\
    \ substring) != nil {\n            filtered.append(string)\n        }\n    }\n\
    \    return filtered", '    return strings.filter({s in s.contains(substring)})',
  "    var result: [String] = []\n    for s in strings {\n        if (s.contains(substring))\
    \ {\n            result.append(s)\n        }\n    }\n    return result", '    return
    strings.filter({ s in s.contains(substring) })', '    return strings.filter {
    $0.contains(substring) }', '    return strings.filter { $0.contains(substring)
    }', '    return strings.filter({$0.range(of: substring) != nil})', "    var results:\
    \ [String] = []\n    for string in strings {\n        if string.contains(substring)\
    \ {\n            results.append(string)\n        }\n    }\n    return results",
  '  return strings.filter({ return $0.contains(substring) })', '    return strings.filter({
    s in s.contains(substring) })', "    var filtered = [String]()\n    for string\
    \ in strings {\n        if string.contains(substring) {\n            filtered.append(string)\n\
    \        }\n    }\n    return filtered", '    return strings.filter { (s: String)
    -> Bool in s.contains(substring) }', "    var filtered_strings = [String]()\n\
    \    for string in strings {\n        if string.contains(substring) {\n      \
    \      filtered_strings.append(string)\n        }\n    }\n    return filtered_strings",
  '    return strings.filter { $0.contains(substring) }', "    return strings.filter({\n\
    \        return $0.contains(substring)\n    })", '    return strings.filter {
    $0.contains(substring) }', "    return strings.filter { (str) -> Bool in\n   \
    \     str.contains(substring)\n    }", '    return strings.filter { $0.contains(substring)
    }', '    return strings.filter { $0.range(of: substring) != nil }', "  return\
    \ strings.filter { string in\n    return string.range(of: substring) != nil\n\
    \  }", '    return strings.filter{$0.contains(substring)}', '    return strings.filter({$0.range(of:
    substring) != nil})', '    return strings.filter { $0.contains(substring) }',
  "    var filtered_list = [String]()\n    for string in strings {\n        if string.contains(substring)\
    \ {\n            filtered_list.append(string)\n        }\n    }\n    return filtered_list",
  "    var result: [String] = []\n    for string in strings {\n        if string.contains(substring)\
    \ {\n            result.append(string)\n        }\n    }\n    return result",
  "    var result: [String] = []\n    for str in strings {\n        if str.contains(substring)\
    \ {\n            result.append(str)\n        }\n    }\n    return result", " \
    \   var res: [String] = []\n    for string in strings {\n        if string.contains(substring)\
    \ {\n            res.append(string)\n        }\n    }\n    return res", "    var\
    \ result: [String] = []\n    for s in strings {\n        if (s.range(of: substring)\
    \ != nil) {\n            result.append(s)\n        }\n    }\n    return result",
  "    var array: [String] = []\n    for string in strings {\n        if string.contains(substring)\
    \ {\n            array.append(string)\n        }\n    }\n    return array", '    return
    strings.filter{ $0.contains(substring) }', "    var ret = [String]()\n    for\
    \ string in strings {\n        if string.contains(substring) {\n            ret.append(string)\n\
    \        }\n    }\n    return ret", "    return strings.filter { string in\n \
    \       string.contains(substring)\n    }", "    return strings.filter {\n   \
    \     $0.contains(substring)\n    }", '    return strings.filter { $0.contains(substring)
    }', '    return strings.filter({ $0.range(of: substring) != nil })', '    strings.filter
    { $0.contains(substring) }', '    return strings.filter { $0.contains(substring)
    }', '    return strings.filter{$0.contains(substring)}', '    return strings.filter({
    $0.range(of: substring) != nil })', '    return strings.filter { $0.contains(substring)
    }', "    var result: [String] = []\n    for string in strings {\n        if string.contains(substring)\
    \ {\n            result.append(string)\n        }\n    }\n    return result",
  '    return strings.filter { $0.contains(substring) }', "    return strings.filter\
    \ { str in\n        str.contains(substring)\n    }", "    var out_strings = [String]()\n\
    \    for string in strings {\n        if let _ = string.range(of: substring) {\n\
    \            out_strings.append(string)\n        }\n    }\n    return out_strings",
  "    // TODO: Implement\n    return strings.filter({$0.contains(substring)})", '    return
    strings.filter{$0.contains(substring)}', '    return strings.filter { substring.contains($0)
    }', '    return strings.filter { s in s.range(of: substring) != nil }', '    return
    strings.filter{$0.contains(substring)}', '    return strings.filter { $0.contains(substring)
    }', "    var result = [String]()\n    for str in strings {\n        if str.contains(substring)\
    \ {\n            result.append(str)\n        }\n    }\n    return result", " \
    \   var result = [String]()\n    for string in strings {\n        if string.contains(substring)\
    \ {\n            result.append(string)\n        }\n    }\n    return result",
  "    // TODO: Implement\n    return strings.filter({(aString: String) -> Bool in\n\
    \        return aString.range(of: substring) != nil\n    })", '    return strings.filter{
    $0.contains(substring) }', "    return strings.filter({ str in\n        str.range(of:\
    \ substring) != nil\n    })", '    return strings.filter { string in string.contains(substring)
    }', '    return strings.filter { $0.contains(substring) }', '    return strings.filter({
    $0.contains(substring) })', "    var filtered = [String]()\n    for s in strings\
    \ {\n        if s.range(of: substring) != nil {\n            filtered.append(s)\n\
    \        }\n    }\n    return filtered", "    return strings.filter { (s: String)\
    \ -> Bool in\n        return s.contains(substring)\n    }", '    return strings.filter
    { $0.contains(substring) }', '    return strings.filter { $0.contains(substring)
    }', '    return strings.filter { $0.range(of: substring) != nil }', "    var new_list:\
    \ [String] = []\n    for str in strings {\n        if str.contains(substring)\
    \ {\n            new_list.append(str)\n        }\n    }\n    return new_list",
  "    var filtered = [String]()\n    for s in strings {\n        if s.range(of: substring)\
    \ != nil {\n            filtered.append(s)\n        }\n    }\n    return filtered",
  "    return strings.filter {\n        return $0.contains(substring)\n    }", " \
    \   var filtered: [String] = []\n    for string in strings {\n        if string.range(of:\
    \ substring) != nil {\n            filtered.append(string)\n        }\n    }\n\
    \    return filtered", '    return strings.filter({$0.contains(substring)})',
  "    return strings.filter({ (string) -> Bool in\n        string.contains(substring)\n\
    \    })", '    return strings.filter({ $0.range(of: substring) != nil })', '    return
    strings.filter {$0.contains(substring)}', "    let items = strings.filter {\n\
    \        (string: String) -> Bool in\n        string.contains(substring)\n   \
    \ }\n    return items", "    return strings.filter {string in\n        return\
    \ string.contains(substring)\n    }", '    return strings.filter { string in string.contains(substring)
    }', "    var res = [String]()\n    for s in strings {\n        if s.contains(substring)\
    \ {\n            res.append(s)\n        }\n    }\n    return res", '    return
    strings.filter {$0.contains(substring)}', '    return strings.filter({$0.contains(substring)})',
  "    var filteredStrings = [String]()\n    for str in strings {\n        if str.contains(substring)\
    \ {\n            filteredStrings.append(str)\n        }\n    }\n    return filteredStrings",
  "    var substrings = [String]()\n    for string in strings {\n        if string.contains(substring)\
    \ {\n            substrings.append(string)\n        }\n    }\n    return substrings",
  '    return strings.filter({s in s.range(of: substring) != nil})', "    return strings.filter\
    \ {\n        return $0.contains(substring)\n    }", '    return strings.filter({
    $0.contains(substring) })', '    return strings.filter({ $0.contains(substring)
    })', "    // TODO: Implement\n    return strings.filter{$0.contains(substring)}",
  "    var result: [String] = []\n    for str in strings {\n        if str.contains(substring)\
    \ {\n            result.append(str)\n        }\n    }\n    return result", '    return
    strings.filter({ element in element.contains(substring) })', "    var results\
    \ = [String]()\n    for string in strings {\n        if string.range(of: substring)\
    \ != nil {\n            results.append(string)\n        }\n    }\n    return results",
  '  return strings.filter { $0.contains(substring) }', '    return strings.filter
    {$0.contains(substring)}', "  var result: [String] = []\n  for string in strings\
    \ {\n    if string.contains(substring) {\n      result.append(string)\n    }\n\
    \  }\n  return result", "    var ret = [String]()\n    for s in strings {\n  \
    \      if s.contains(substring) {\n            ret.append(s)\n        }\n    }\n\
    \    return ret", '    return strings.filter { string in string.contains(substring)
    }', "    var filtered_strings = [String]()\n    for string in strings {\n    \
    \    if string.contains(substring) {\n            filtered_strings.append(string)\n\
    \        }\n    }\n    return filtered_strings", '    return strings.filter {
    $0.contains(substring) }', "    return strings.filter({ (x: String) -> Bool in\n\
    \        return x.range(of: substring) != nil\n    })", '    return strings.filter{$0.contains(substring)}',
  "    return strings.filter { (string) -> Bool in\n        return string.contains(substring)\n\
    \    }", "    var result: [String] = []\n    for s in strings {\n        if s.contains(substring)\
    \ {\n            result.append(s)\n        }\n    }\n    return result", '    return
    strings.filter {$0.contains(substring)}', "    return strings.filter {\n     \
    \   $0.contains(substring)\n    }", '    strings.filter({$0.contains(substring)})',
  "    var new_strings = [String]()\n    for string in strings {\n        if string.contains(substring)\
    \ {\n            new_strings.append(string)\n        }\n    }\n    return new_strings",
  "    var filtered: [String] = []\n    strings.forEach { if $0.contains(substring)\
    \ { filtered.append($0) } }\n    return filtered", '    return strings.filter({
    $0.contains(substring) })', '    return strings.filter({ $0.contains(substring)
    })', '    return strings.filter { $0.contains(substring) }', "    return strings.filter({\
    \ (string) -> Bool in\n        string.range(of: substring) != nil\n    })", '    return
    strings.filter { $0.contains(substring) }', "    return strings.filter({ (s: String)\
    \ -> Bool in\n        return s.range(of: substring) != nil\n    })", "    var\
    \ ret: [String] = []\n    for str in strings {\n        if (str.contains(substring))\
    \ {\n            ret.append(str)\n        }\n    }\n    return ret", '    return
    strings.filter { $0.contains(substring) }', '    return strings.filter({$0.range(of:
    substring) != nil})', '    return strings.filter({$0.contains(substring)})', " \
    \   return strings.filter { (string) -> Bool in\n        return string.contains(substring)\n\
    \    }", "    var filtered = [String]()\n    for string in strings {\n       \
    \ if string.contains(substring) {\n            filtered.append(string)\n     \
    \   }\n    }\n    return filtered", '  return strings.filter { $0.contains(substring)
    }', "    return strings.filter { (str) -> Bool in\n        return str.range(of:\
    \ substring) != nil\n    }", "  return strings.filter { (string) -> Bool in\n\
    \    return string.contains(substring)\n  }", "    var filter = [String]()\n \
    \   for (index, element) in strings.enumerated() {\n        if element.contains(substring)\
    \ {\n            filter.append(element)\n        }\n    }\n    return filter",
  "    return strings.filter { (s: String) -> Bool in\n        return s.contains(substring)\n\
    \    }", "    var filtered = [String]()\n    for str in strings {\n        if\
    \ str.contains(substring) {\n            filtered.append(str)\n        }\n   \
    \ }\n    return filtered", "    var result = [String]()\n    for string in strings\
    \ {\n        if string.contains(substring) {\n            result.append(string)\n\
    \        }\n    }\n    return result", "    var filtered_strings = [String]()\n\
    \    for string in strings {\n        if string.contains(substring) {\n      \
    \      filtered_strings.append(string)\n        }\n    }\n    return filtered_strings",
  "    var filtered = [String]()\n    for s in strings {\n        if s.range(of: substring)\
    \ != nil {\n            filtered.append(s)\n        }\n    }\n    return filtered",
  "  var filtered = [String]()\n  for s in strings {\n    if s.range(of: substring)\
    \ != nil {\n      filtered.append(s)\n    }\n  }\n  return filtered", "    var\
    \ filtered = [String]()\n    for string in strings {\n        if string.contains(substring)\
    \ {\n            filtered.append(string)\n        }\n    }\n    return filtered",
  "    return strings.filter {\n        $0.range(of: substring) != nil\n    }", '    return
    strings.filter { $0.contains(substring) }', "    return strings.filter({ (string)\
    \ -> Bool in\n        return string.contains(substring)\n    })", '  return strings.filter
    { $0.contains(substring) }', "    return strings.filter {\n        return $0.contains(substring)\n\
    \    }", "  var filtered: [String] = []\n  for string in strings {\n    if (string.contains(substring))\
    \ {\n      filtered.append(string)\n    }\n  }\n  return filtered", '    return
    strings.filter{ $0.range(of: substring) != nil }', '    return strings.filter
    { substring in $0.lowercased().contains(substring.lowercased()) }', "    var result:\
    \ [String] = []\n    for s in strings {\n        if s.contains(substring) {\n\
    \            result.append(s)\n        }\n    }\n    return result", "    let\
    \ v1: [String] = []\n    let v2: [String] = [\"abc\", \"bacd\", \"cde\", \"array\"\
    ]\n    let v3: [String] = [\"abc\", \"bacd\", \"array\"]\n    let v4: [String]\
    \ = [\"bacd\", \"array\"]\n    let v5: [String] = [\"cde\", \"array\"]\n    let\
    \ v6: [String] = [\"cde\"]\n    let v7: [String] = [\"array\"]\n    let v8: [String]\
    \ = []\n    let empty: [String] = []\n    let r1 = filter_by_substring(strings:\
    \ v1, substring: \"a\")\n    let r2 = filter_by_substring(strings: v2, substring:\
    \ \"a\")\n    let r3 = filter_by_substring(strings: v3, substring: \"a\")\n  \
    \  let r4 = filter_by_substring(strings: v4, substring: \"a\")\n    let r5 = filter_by_substring(strings:\
    \ v5, substring: \"a\")\n    let r6 = filter_by_substring(strings: v6, substring:\
    \ \"a\")\n    let r7 = filter_by_substring(strings: v7, substring: \"a\")\n  \
    \  let r8 = filter_by_substring(strings: v8, substring: \"a\")\n    let r9 = filter_by_substring(strings:\
    \ empty, substring: \"a\")\n    let r10 = filter_by_substring(strings: v2, substring:\
    \ \"b\")\n    let r11 = filter_by_substring(strings: v2, substring: \"c\")\n \
    \   let r12 = filter_by_substring(strings: v2, substring: \"d\")\n    let r13\
    \ = filter_by_substring(strings: v2, substring: \"e\")\n    let r14 = filter_by_substring(strings:\
    \ v2, substring: \"z\")\n    assert(r1 == v1)\n    assert(r2 == v3)\n    assert(r3\
    \ == v3)\n    assert(r4 ==", '    return strings.filter({ $0.contains(substring)
    })', "    let filtered = strings.filter({$0.contains(substring)})\n    return\
    \ filtered", "    return strings.filter { string in\n        for char in string\
    \ {\n            if char == Character(substring) {\n                return true\n\
    \            }\n        }\n        return false\n    }", "    // TODO: Use Array.filter()\
    \ to return an array containing only the strings containing the substring\n  \
    \  var filteredArray = [String]()\n    for item in strings {\n        if item.contains(substring)\
    \ {\n            filteredArray.append(item)\n        }\n    }\n    return filteredArray",
  "    return strings.filter { str in\n        str.contains(substring)\n    }", " \
    \   return strings.filter { (s: String) -> Bool in\n        s.contains(substring)\n\
    \    }", '    return strings.filter { $0.contains(substring) }', '    return strings.filter
    {substring.contains($0)}', '    return strings.filter { $0.contains(substring)
    }', "    var result: [String] = []\n    for string in strings {\n        if string.contains(substring)\
    \ {\n            result.append(string)\n        }\n    }\n    return result",
  "  return strings.filter { (string) -> Bool in\n    return string.contains(substring)\n\
    \  }", "    // Create an empty array\n    var substrings: [String] = []\n    //\
    \ Iterate through the input strings\n    for string in strings {\n        // Check\
    \ if the input string contains the given substring\n        if string.contains(substring)\
    \ {\n            // Append string to the array\n            substrings.append(string)\n\
    \        }\n    }\n    // Return the array\n    return substrings", "    var filtered_strings\
    \ = [String]()\n    for string in strings {\n        if string.range(of: substring)\
    \ != nil {\n            filtered_strings.append(string)\n        }\n    }\n  \
    \  return filtered_strings", "    let filtered = strings.filter({\n        $0.contains(substring)\n\
    \    })\n    return filtered", '    strings.filter({ $0.range(of: substring) !=
    nil })', '    return filter(strings, { $0.lowercaseString.rangeOfString(substring.lowercaseString)
    != nil })', '    return strings.filter { $0.range(of: substring) != nil }', '    return
    strings.filter({ $0.contains(substring) })', "    var result: [String] = []\n\
    \    for str in strings {\n        if str.contains(substring) {\n            result.append(str)\n\
    \        }\n    }\n    return result", '    return strings.filter({ $0.contains(substring)
    })', "    var result = [String]()\n    for str in strings {\n        if str.contains(substring)\
    \ {\n            result.append(str)\n        }\n    }\n    return result", '    return
    strings.filter { $0.contains(substring) }', '    return strings.filter({$0.range(of:
    substring) != nil})', '    return strings.filter { substring.count > 0 && $0.contains(substring)
    }', "    return strings.filter { (s: String) -> Bool in\n        return s.contains(substring)\n\
    \    }", '    return strings.filter { $0.contains(substring) }', "    return strings.filter\
    \ {\n        $0.range(of: substring) != nil\n    }"]
stop_tokens:
- "\n}"
