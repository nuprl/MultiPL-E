language: swift
name: HumanEval_83_starts_one_ends
results:
- exit_code: 1
  program: "\n/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfunc starts_one_ends(n: Int)\
    \ -> Int {\n  return Int(Math.pow(10, Double(n - 1))) - 1\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(starts_one_ends(n: 1) == 1)\nassert(starts_one_ends(n:\
    \ 2) == 18)\nassert(starts_one_ends(n: 3) == 180)\nassert(starts_one_ends(n: 4)\
    \ == 1800)\nassert(starts_one_ends(n: 5) == 18000)"
  status: SyntaxError
  stderr: "/tmp/tmpbiul3msz.swift:5:14: error: cannot find 'Math' in scope\n  return\
    \ Int(Math.pow(10, Double(n - 1))) - 1\n             ^~~~\n"
  stdout: ''
  timestamp: 1660012232
- exit_code: 1
  program: "\n/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfunc starts_one_ends(n: Int)\
    \ -> Int {\n    guard n >= 1 else { return 0 }\n    guard n > 1 else { return\
    \ 10 }\n\n    var result = 10\n    var digits = [Int](count: n, repeatedValue:\
    \ 0)\n    fill(digits, start: 1, result: &result)\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(starts_one_ends(n: 1) == 1)\nassert(starts_one_ends(n:\
    \ 2) == 18)\nassert(starts_one_ends(n: 3) == 180)\nassert(starts_one_ends(n: 4)\
    \ == 1800)\nassert(starts_one_ends(n: 5) == 18000)"
  status: SyntaxError
  stderr: "/tmp/tmpefmt9x2s.swift:9:18: error: no exact matches in call to initializer\
    \ \n    var digits = [Int](count: n, repeatedValue: 0)\n                 ^\n/tmp/tmpefmt9x2s.swift:9:18:\
    \ note: candidate has partially matching parameter list (repeating: Int, count:\
    \ Int)\n    var digits = [Int](count: n, repeatedValue: 0)\n                 ^\n\
    /tmp/tmpefmt9x2s.swift:9:18: note: candidate has partially matching parameter\
    \ list (repeating: Int, count: Int)\n    var digits = [Int](count: n, repeatedValue:\
    \ 0)\n                 ^\n/tmp/tmpefmt9x2s.swift:10:5: error: cannot find 'fill'\
    \ in scope\n    fill(digits, start: 1, result: &result)\n    ^~~~\n"
  stdout: ''
  timestamp: 1660012232
- exit_code: 1
  program: "\n/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfunc starts_one_ends(n: Int)\
    \ -> Int {\n    let dp = Array(count: n + 1, repeatedValue: Array(count: 2, repeatedValue:\
    \ 0))\n    dp[1][0] = dp[1][1] = 1\n    for i in 2...n {\n        dp[i][0] = dp[i\
    \ - 1][0] + dp[i - 1][1]\n        dp[i][1] = dp[i - 1][0]\n    }\n    return dp[n][0]\
    \ + dp[n][1]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(starts_one_ends(n:\
    \ 1) == 1)\nassert(starts_one_ends(n: 2) == 18)\nassert(starts_one_ends(n: 3)\
    \ == 180)\nassert(starts_one_ends(n: 4) == 1800)\nassert(starts_one_ends(n: 5)\
    \ == 18000)"
  status: SyntaxError
  stderr: "/tmp/tmpg4nluoc7.swift:5:14: error: no exact matches in call to initializer\
    \ \n    let dp = Array(count: n + 1, repeatedValue: Array(count: 2, repeatedValue:\
    \ 0))\n             ^\n/tmp/tmpg4nluoc7.swift:5:14: note: candidate has partially\
    \ matching parameter list (repeating: _, count: Int)\n    let dp = Array(count:\
    \ n + 1, repeatedValue: Array(count: 2, repeatedValue: 0))\n             ^\n/tmp/tmpg4nluoc7.swift:5:14:\
    \ note: candidate has partially matching parameter list (repeating: _, count:\
    \ Int)\n    let dp = Array(count: n + 1, repeatedValue: Array(count: 2, repeatedValue:\
    \ 0))\n             ^\n/tmp/tmpg4nluoc7.swift:5:80: error: extra argument 'repeatedValue'\
    \ in call\n    let dp = Array(count: n + 1, repeatedValue: Array(count: 2, repeatedValue:\
    \ 0))\n                                                     ~~~~~~~~~~~~~~~~~~~~~~~~~~^~\n\
    /tmp/tmpg4nluoc7.swift:5:55: error: missing argument for parameter 'repeating'\
    \ in call\n    let dp = Array(count: n + 1, repeatedValue: Array(count: 2, repeatedValue:\
    \ 0))\n                                                      ^\n             \
    \                                         repeating: <#_#>, \nSwift.Array:4:23:\
    \ note: 'init(repeating:count:)' declared here\n    @inlinable public init(repeating\
    \ repeatedValue: Element, count: Int)\n                      ^\n"
  stdout: ''
  timestamp: 1660012232
- exit_code: 1
  program: "\n/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfunc starts_one_ends(n: Int)\
    \ -> Int {\n    if n <= 0 {\n        return 0\n    }\n    let dp = Array(count:\
    \ n + 1, repeatedValue: 0)\n    dp[1] = 1\n    for i in 2...n {\n        dp[i]\
    \ = dp[i - 1] * 9 + 10.pow(i - 1)\n    }\n    return dp[n]\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(starts_one_ends(n: 1) == 1)\nassert(starts_one_ends(n:\
    \ 2) == 18)\nassert(starts_one_ends(n: 3) == 180)\nassert(starts_one_ends(n: 4)\
    \ == 1800)\nassert(starts_one_ends(n: 5) == 18000)"
  status: SyntaxError
  stderr: "/tmp/tmp7gtjq5fw.swift:8:14: error: no exact matches in call to initializer\
    \ \n    let dp = Array(count: n + 1, repeatedValue: 0)\n             ^\n/tmp/tmp7gtjq5fw.swift:8:14:\
    \ note: candidate has partially matching parameter list (repeating: _, count:\
    \ Int)\n    let dp = Array(count: n + 1, repeatedValue: 0)\n             ^\n/tmp/tmp7gtjq5fw.swift:8:14:\
    \ note: candidate has partially matching parameter list (repeating: _, count:\
    \ Int)\n    let dp = Array(count: n + 1, repeatedValue: 0)\n             ^\n/tmp/tmp7gtjq5fw.swift:11:36:\
    \ error: value of type 'Int' has no member 'pow'\n        dp[i] = dp[i - 1] *\
    \ 9 + 10.pow(i - 1)\n                                ~~ ^~~\n"
  stdout: ''
  timestamp: 1660012239
- exit_code: 1
  program: "\n/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfunc starts_one_ends(n: Int)\
    \ -> Int {\n    return 1 + starts_one_ends_aux(n: n)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(starts_one_ends(n: 1) == 1)\nassert(starts_one_ends(n: 2)\
    \ == 18)\nassert(starts_one_ends(n: 3) == 180)\nassert(starts_one_ends(n: 4) ==\
    \ 1800)\nassert(starts_one_ends(n: 5) == 18000)"
  status: SyntaxError
  stderr: "/tmp/tmpc_4avxmv.swift:5:16: error: cannot find 'starts_one_ends_aux' in\
    \ scope\n    return 1 + starts_one_ends_aux(n: n)\n               ^~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660012232
- exit_code: 1
  program: "\n/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfunc starts_one_ends(n: Int)\
    \ -> Int {\n    if n == 1 {\n        return 1\n    }\n    let result = starts_one_ends(n\
    \ - 1)\n    return result * 9 + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(starts_one_ends(n:\
    \ 1) == 1)\nassert(starts_one_ends(n: 2) == 18)\nassert(starts_one_ends(n: 3)\
    \ == 180)\nassert(starts_one_ends(n: 4) == 1800)\nassert(starts_one_ends(n: 5)\
    \ == 18000)"
  status: SyntaxError
  stderr: "/tmp/tmpwfx3693k.swift:8:34: error: missing argument label 'n:' in call\n\
    \    let result = starts_one_ends(n - 1)\n                                 ^\n\
    \                                 n: \n"
  stdout: ''
  timestamp: 1660012232
- exit_code: 1
  program: "\n/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfunc starts_one_ends(n: Int)\
    \ -> Int {\n    var count = 0\n    for i in 0..<n {\n        count += 11.to_the(i)\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(starts_one_ends(n:\
    \ 1) == 1)\nassert(starts_one_ends(n: 2) == 18)\nassert(starts_one_ends(n: 3)\
    \ == 180)\nassert(starts_one_ends(n: 4) == 1800)\nassert(starts_one_ends(n: 5)\
    \ == 18000)"
  status: SyntaxError
  stderr: "/tmp/tmp9in8wsnz.swift:7:21: error: value of type 'Int' has no member 'to_the'\n\
    \        count += 11.to_the(i)\n                 ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660012232
- exit_code: 1
  program: "\n/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfunc starts_one_ends(n: Int)\
    \ -> Int {\n    let prefix: [[Int]] = [\n        [1, 2, 3, 4, 5, 6, 7, 8, 9],\n\
    \        [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26,\
    \ 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45,\
    \ 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64,\
    \ 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83,\
    \ 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99],\n        [100,\
    \ 101, 110, 111, 200, 201, 210, 211, 300, 301, 310, 311, 400, 401, 410, 411, 500,\
    \ 501, 510, 511, 600, 601, 610, 611, 700, 701, 710, 711, 800, 801, 810, 811, 900,\
    \ 901, 910, 911]\n    ]\n    let suffix: [[Int]] = [\n        [1, 10, 100, 1000,\
    \ 10000, 100000, 1000000, 10000000, 100000000, 1000000000],\n        [1, 1, 2,\
    \ 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13,\
    \ 14, 14, 15, 15, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22, 23,\
    \ 23, 24, 24, 25, 25, 26, 26, 27, 27, 28, 28, 29, 29, 30, 30, 31, 31, 32, 32,\
    \ 33, 33, 34, 34, 35, 35, 36, 36, 37, 37, 38, 38, 39, 39, 40, 40, 41, 41, 42,\
    \ 42, 43,\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(starts_one_ends(n: 1)\
    \ == 1)\nassert(starts_one_ends(n: 2) == 18)\nassert(starts_one_ends(n: 3) ==\
    \ 180)\nassert(starts_one_ends(n: 4) == 1800)\nassert(starts_one_ends(n: 5) ==\
    \ 18000)"
  status: SyntaxError
  stderr: "/tmp/tmpkqux1ng5.swift:13:1: error: expected expression in container literal\n\
    }\n^\n/tmp/tmpkqux1ng5.swift:5:9: warning: immutable value 'prefix' was never\
    \ used; consider replacing with '_' or removing it\n    let prefix: [[Int]] =\
    \ [\n        ^~~~~~\n        _\n/tmp/tmpkqux1ng5.swift:10:9: warning: immutable\
    \ value 'suffix' was never used; consider replacing with '_' or removing it\n\
    \    let suffix: [[Int]] = [\n        ^~~~~~\n        _\n"
  stdout: ''
  timestamp: 1660012232
- exit_code: 1
  program: "\n/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfunc starts_one_ends(n: Int)\
    \ -> Int {\n    let x: Int = pow(2, n - 1)\n    return x * (x - 1)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(starts_one_ends(n: 1) == 1)\nassert(starts_one_ends(n:\
    \ 2) == 18)\nassert(starts_one_ends(n: 3) == 180)\nassert(starts_one_ends(n: 4)\
    \ == 1800)\nassert(starts_one_ends(n: 5) == 18000)"
  status: SyntaxError
  stderr: "/tmp/tmpaj8q2b8m.swift:5:18: error: cannot find 'pow' in scope\n    let\
    \ x: Int = pow(2, n - 1)\n                 ^~~\n"
  stdout: ''
  timestamp: 1660012232
- exit_code: 1
  program: "\n/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfunc starts_one_ends(n: Int)\
    \ -> Int {\n  let dp = Array(count: n+1, repeatedValue: Array(count: 2, repeatedValue:\
    \ 0))\n  dp[1][0] = 1\n  dp[1][1] = 1\n  for var i = 2; i <= n; i++ {\n    dp[i][0]\
    \ = 10 * dp[i-1][0] + (1 - pow(10, -i+1))\n    dp[i][1] = 10 * dp[i-1][1] + pow(10,\
    \ -i+1)\n  }\n  return dp[n][0] + dp[n][1]\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(starts_one_ends(n: 1) == 1)\nassert(starts_one_ends(n: 2) == 18)\n\
    assert(starts_one_ends(n: 3) == 180)\nassert(starts_one_ends(n: 4) == 1800)\n\
    assert(starts_one_ends(n: 5) == 18000)"
  status: SyntaxError
  stderr: "/tmp/tmppp_g8rcv.swift:8:3: error: C-style for statement has been removed\
    \ in Swift 3\n  for var i = 2; i <= n; i++ {\n  ^   ~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmppp_g8rcv.swift:5:12:\
    \ error: no exact matches in call to initializer \n  let dp = Array(count: n+1,\
    \ repeatedValue: Array(count: 2, repeatedValue: 0))\n           ^\n/tmp/tmppp_g8rcv.swift:5:12:\
    \ note: candidate has partially matching parameter list (repeating: _, count:\
    \ Int)\n  let dp = Array(count: n+1, repeatedValue: Array(count: 2, repeatedValue:\
    \ 0))\n           ^\n/tmp/tmppp_g8rcv.swift:5:12: note: candidate has partially\
    \ matching parameter list (repeating: _, count: Int)\n  let dp = Array(count:\
    \ n+1, repeatedValue: Array(count: 2, repeatedValue: 0))\n           ^\n/tmp/tmppp_g8rcv.swift:5:76:\
    \ error: extra argument 'repeatedValue' in call\n  let dp = Array(count: n+1,\
    \ repeatedValue: Array(count: 2, repeatedValue: 0))\n                        \
    \                         ~~~~~~~~~~~~~~~~~~~~~~~~~~^~\n/tmp/tmppp_g8rcv.swift:5:51:\
    \ error: missing argument for parameter 'repeating' in call\n  let dp = Array(count:\
    \ n+1, repeatedValue: Array(count: 2, repeatedValue: 0))\n                   \
    \                               ^\n                                          \
    \        repeating: <#_#>, \nSwift.Array:4:23: note: 'init(repeating:count:)'\
    \ declared here\n    @inlinable public init(repeating repeatedValue: Element,\
    \ count: Int)\n                      ^\n"
  stdout: ''
  timestamp: 1660012232
- exit_code: -4
  program: "\n/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfunc starts_one_ends(n: Int)\
    \ -> Int {\n  var result = 0\n  var current = 1\n  for i in 0..<n {\n    result\
    \ += current\n    current *= 10\n  }\n  return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(starts_one_ends(n: 1) == 1)\nassert(starts_one_ends(n: 2)\
    \ == 18)\nassert(starts_one_ends(n: 3) == 180)\nassert(starts_one_ends(n: 4) ==\
    \ 1800)\nassert(starts_one_ends(n: 5) == 18000)"
  status: Exception
  stderr: 'tmpt012ggw3/tmpt012ggw3.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7516ad2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b75167c9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b75167c9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b75167c87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt012ggw3                        0x000055ae0adf13b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b7516cbe460 __libc_start_main +
    245

    6    tmpt012ggw3                        0x000055ae0adf0fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660012232
- exit_code: 1
  program: "\n/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfunc starts_one_ends(n: Int)\
    \ -> Int {\n    var count = 0\n    for i in 1..<n {\n        count += pow(2, i\
    \ - 1)\n    }\n    return count * 9 + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(starts_one_ends(n: 1) == 1)\nassert(starts_one_ends(n: 2) == 18)\nassert(starts_one_ends(n:\
    \ 3) == 180)\nassert(starts_one_ends(n: 4) == 1800)\nassert(starts_one_ends(n:\
    \ 5) == 18000)"
  status: SyntaxError
  stderr: "/tmp/tmp4e0fstce.swift:7:18: error: cannot find 'pow' in scope\n      \
    \  count += pow(2, i - 1)\n                 ^~~\n"
  stdout: ''
  timestamp: 1660012232
- exit_code: 1
  program: "\n/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfunc starts_one_ends(n: Int)\
    \ -> Int {\n    // If 1 is the first digit, then there can be `(n-1)` digits after\
    \ the first\n    // digit. Each of those can be [0, 9], so there are `(n-1) *\
    \ 10^(n-1)`\n    // possible numbers.\n    // If 1 is the last digit, then there\
    \ can be `(n-1)` digits before the last\n    // digit. Each of those can be [0,\
    \ 9], so there are `(n-1) * 10^(n-1)`\n    // possible numbers.\n    return 2\
    \ * (n-1) * pow(10, n-1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(starts_one_ends(n:\
    \ 1) == 1)\nassert(starts_one_ends(n: 2) == 18)\nassert(starts_one_ends(n: 3)\
    \ == 180)\nassert(starts_one_ends(n: 4) == 1800)\nassert(starts_one_ends(n: 5)\
    \ == 18000)"
  status: SyntaxError
  stderr: "/tmp/tmpacvbx3zw.swift:11:24: error: cannot find 'pow' in scope\n    return\
    \ 2 * (n-1) * pow(10, n-1)\n                       ^~~\n"
  stdout: ''
  timestamp: 1660012232
- exit_code: 1
  program: "\n/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfunc starts_one_ends(n: Int)\
    \ -> Int {\n    precondition(n > 0)\n    return n * 9 * Int(pow(10.0, Double(n\
    \ - 1)))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(starts_one_ends(n: 1)\
    \ == 1)\nassert(starts_one_ends(n: 2) == 18)\nassert(starts_one_ends(n: 3) ==\
    \ 180)\nassert(starts_one_ends(n: 4) == 1800)\nassert(starts_one_ends(n: 5) ==\
    \ 18000)"
  status: SyntaxError
  stderr: "/tmp/tmpv9umiso4.swift:6:24: error: cannot find 'pow' in scope\n    return\
    \ n * 9 * Int(pow(10.0, Double(n - 1)))\n                       ^~~\n"
  stdout: ''
  timestamp: 1660012232
- exit_code: -4
  program: "\n/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfunc starts_one_ends(n: Int)\
    \ -> Int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n      \
    \  return 3\n    }\n    var answer = 1 // one digit ends with one.\n    var s\
    \ = 0\n    for _ in 0..<n-1 {\n        s += (9 * answer)\n        answer = s\n\
    \    }\n    return s + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(starts_one_ends(n:\
    \ 1) == 1)\nassert(starts_one_ends(n: 2) == 18)\nassert(starts_one_ends(n: 3)\
    \ == 180)\nassert(starts_one_ends(n: 4) == 1800)\nassert(starts_one_ends(n: 5)\
    \ == 18000)"
  status: Exception
  stderr: 'tmpem7kegoa/tmpem7kegoa.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acb6f364c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acb6f05bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acb6f05b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acb6f05a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpem7kegoa                        0x0000559fb38b7335 <unavailable> + 4917

    5    libc.so.6                          0x00002acb6f550460 __libc_start_main +
    245

    6    tmpem7kegoa                        0x0000559fb38b6fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660012232
- exit_code: -4
  program: "\n/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfunc starts_one_ends(n: Int)\
    \ -> Int {\n  var a = [1, 1, 1]\n  for i in 3...n {\n    a[i % 3] = a[(i - 1)\
    \ % 3] + a[(i - 2) % 3]\n  }\n  return a[n % 3]\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(starts_one_ends(n: 1) == 1)\nassert(starts_one_ends(n: 2) == 18)\n\
    assert(starts_one_ends(n: 3) == 180)\nassert(starts_one_ends(n: 4) == 1800)\n\
    assert(starts_one_ends(n: 5) == 18000)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b241e738c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b241e42f561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b241e42f286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b241e42f13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b241e42ebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpktwxahvh                        0x0000556bcace0820 <unavailable> + 6176

    6    tmpktwxahvh                        0x0000556bcace0478 <unavailable> + 5240

    7    libc.so.6                          0x00002b241e924460 __libc_start_main +
    245

    8    tmpktwxahvh                        0x0000556bcace0199 <unavailable> + 4505

    '
  stdout: ''
  timestamp: 1660012232
- exit_code: 1
  program: "\n/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfunc starts_one_ends(n: Int)\
    \ -> Int {\n    return 10*count_digit_no_zero(n: n-1)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(starts_one_ends(n: 1) == 1)\nassert(starts_one_ends(n: 2)\
    \ == 18)\nassert(starts_one_ends(n: 3) == 180)\nassert(starts_one_ends(n: 4) ==\
    \ 1800)\nassert(starts_one_ends(n: 5) == 18000)"
  status: SyntaxError
  stderr: "/tmp/tmp9l1ne0e6.swift:5:15: error: cannot find 'count_digit_no_zero' in\
    \ scope\n    return 10*count_digit_no_zero(n: n-1)\n              ^~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660012232
- exit_code: 1
  program: "\n/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfunc starts_one_ends(n: Int)\
    \ -> Int {\n    if n == 1 {\n        return 1\n    }\n    return 9 * ndigit_integers(n:\
    \ n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(starts_one_ends(n: 1)\
    \ == 1)\nassert(starts_one_ends(n: 2) == 18)\nassert(starts_one_ends(n: 3) ==\
    \ 180)\nassert(starts_one_ends(n: 4) == 1800)\nassert(starts_one_ends(n: 5) ==\
    \ 18000)"
  status: SyntaxError
  stderr: "/tmp/tmpt64juy67.swift:8:16: error: cannot find 'ndigit_integers' in scope\n\
    \    return 9 * ndigit_integers(n: n - 1)\n               ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660012232
- exit_code: 1
  program: "\n/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfunc starts_one_ends(n: Int)\
    \ -> Int {\n    return num_digits(n-1) + num_digits(n-2)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(starts_one_ends(n: 1) == 1)\nassert(starts_one_ends(n:\
    \ 2) == 18)\nassert(starts_one_ends(n: 3) == 180)\nassert(starts_one_ends(n: 4)\
    \ == 1800)\nassert(starts_one_ends(n: 5) == 18000)"
  status: SyntaxError
  stderr: "/tmp/tmpdmm_diip.swift:5:12: error: cannot find 'num_digits' in scope\n\
    \    return num_digits(n-1) + num_digits(n-2)\n           ^~~~~~~~~~\n/tmp/tmpdmm_diip.swift:5:30:\
    \ error: cannot find 'num_digits' in scope\n    return num_digits(n-1) + num_digits(n-2)\n\
    \                             ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660012232
- exit_code: 1
  program: "\n/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfunc starts_one_ends(n: Int)\
    \ -> Int {\n    var nums = 1\n    var numbers = [Int]()\n    var digits = [Int]()\n\
    \    while (nums < pow(10, Double(n))) {\n        digits = digitize(nums)\n  \
    \      if (digits[0] == 1 || digits[digits.count - 1] == 1) {\n            numbers.append(nums)\n\
    \        }\n        nums++\n    }\n    return numbers.count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(starts_one_ends(n: 1) == 1)\nassert(starts_one_ends(n:\
    \ 2) == 18)\nassert(starts_one_ends(n: 3) == 180)\nassert(starts_one_ends(n: 4)\
    \ == 1800)\nassert(starts_one_ends(n: 5) == 18000)"
  status: SyntaxError
  stderr: "/tmp/tmpa0xueby_.swift:8:19: error: cannot find 'pow' in scope\n    while\
    \ (nums < pow(10, Double(n))) {\n                  ^~~\n/tmp/tmpa0xueby_.swift:9:18:\
    \ error: cannot find 'digitize' in scope\n        digits = digitize(nums)\n  \
    \               ^~~~~~~~\n/tmp/tmpa0xueby_.swift:13:13: error: cannot find operator\
    \ '++' in scope; did you mean '+= 1'?\n        nums++\n            ^~\n"
  stdout: ''
  timestamp: 1660012232
- exit_code: 1
  program: "\n/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfunc starts_one_ends(n: Int)\
    \ -> Int {\n    return starts_one_ends_dp(n)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(starts_one_ends(n: 1) == 1)\nassert(starts_one_ends(n: 2) == 18)\n\
    assert(starts_one_ends(n: 3) == 180)\nassert(starts_one_ends(n: 4) == 1800)\n\
    assert(starts_one_ends(n: 5) == 18000)"
  status: SyntaxError
  stderr: "/tmp/tmpdw2kwcdr.swift:5:12: error: cannot find 'starts_one_ends_dp' in\
    \ scope\n    return starts_one_ends_dp(n)\n           ^~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660012232
- exit_code: 1
  program: "\n/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfunc starts_one_ends(n: Int)\
    \ -> Int {\n    // From the book, this is a dynamic programming problem and we\
    \ \n    // let d(i) be the number of i-digit positive integers that start \n \
    \   // or end with 1. We then have a recurrence of the form d(i) = d(i - 1) \n\
    \    // + d(i - 2). We then get an explicit formula as given below.\n    if n\
    \ == 1 {\n        return 2\n    }\n    else if n == 2 {\n        return 4\n  \
    \  }\n    else {\n        return 2 * starts_one_ends(n - 1) - starts_one_ends(n\
    \ - 3)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(starts_one_ends(n:\
    \ 1) == 1)\nassert(starts_one_ends(n: 2) == 18)\nassert(starts_one_ends(n: 3)\
    \ == 180)\nassert(starts_one_ends(n: 4) == 1800)\nassert(starts_one_ends(n: 5)\
    \ == 18000)"
  status: SyntaxError
  stderr: "/tmp/tmpys7zz3qm.swift:16:36: error: missing argument label 'n:' in call\n\
    \        return 2 * starts_one_ends(n - 1) - starts_one_ends(n - 3)\n        \
    \                           ^\n                                   n: \n/tmp/tmpys7zz3qm.swift:16:61:\
    \ error: missing argument label 'n:' in call\n        return 2 * starts_one_ends(n\
    \ - 1) - starts_one_ends(n - 3)\n                                            \
    \                ^\n                                                         \
    \   n: \n"
  stdout: ''
  timestamp: 1660012232
- exit_code: -4
  program: "\n/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfunc starts_one_ends(n: Int)\
    \ -> Int {\n    var result = 1\n    if n > 1 {\n        result += 1\n    }\n \
    \   if n > 2 {\n        result += 9\n    }\n    if n > 3 {\n        result +=\
    \ 9\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(starts_one_ends(n:\
    \ 1) == 1)\nassert(starts_one_ends(n: 2) == 18)\nassert(starts_one_ends(n: 3)\
    \ == 180)\nassert(starts_one_ends(n: 4) == 1800)\nassert(starts_one_ends(n: 5)\
    \ == 18000)"
  status: Exception
  stderr: 'tmp7kkml6w5/tmp7kkml6w5.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab62aabac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab62a7b1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab62a7b1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab62a7b07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7kkml6w5                        0x0000557c44fe2230 <unavailable> + 4656

    5    libc.so.6                          0x00002ab62aca6460 __libc_start_main +
    245

    6    tmp7kkml6w5                        0x0000557c44fe1e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660012232
- exit_code: 1
  program: "\n/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfunc starts_one_ends(n: Int)\
    \ -> Int {\n    var j = Int(pow(Double(10), Double(n - 1)))\n    var count = 0\n\
    \    while j < Int(pow(Double(10), Double(n))) {\n        if j % 10 == 1 {\n \
    \           count += 1\n        }\n        j += 1\n    }\n    return count\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(starts_one_ends(n: 1) == 1)\nassert(starts_one_ends(n:\
    \ 2) == 18)\nassert(starts_one_ends(n: 3) == 180)\nassert(starts_one_ends(n: 4)\
    \ == 1800)\nassert(starts_one_ends(n: 5) == 18000)"
  status: SyntaxError
  stderr: "/tmp/tmp12uidb19.swift:5:17: error: cannot find 'pow' in scope\n    var\
    \ j = Int(pow(Double(10), Double(n - 1)))\n                ^~~\n/tmp/tmp12uidb19.swift:7:19:\
    \ error: cannot find 'pow' in scope\n    while j < Int(pow(Double(10), Double(n)))\
    \ {\n                  ^~~\n"
  stdout: ''
  timestamp: 1660012232
- exit_code: 1
  program: "\n/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfunc starts_one_ends(n: Int)\
    \ -> Int {\n    // return zero for one-digit numbers\n    if n == 1 {\n      \
    \  return 0\n    }\n    // return the count of all numbers if the number of digits\
    \ is not one\n    return pow(10, n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(starts_one_ends(n: 1) == 1)\nassert(starts_one_ends(n: 2) == 18)\nassert(starts_one_ends(n:\
    \ 3) == 180)\nassert(starts_one_ends(n: 4) == 1800)\nassert(starts_one_ends(n:\
    \ 5) == 18000)"
  status: SyntaxError
  stderr: "/tmp/tmpuxp4yazq.swift:10:12: error: cannot find 'pow' in scope\n    return\
    \ pow(10, n - 1)\n           ^~~\n"
  stdout: ''
  timestamp: 1660012232
- exit_code: 1
  program: "\n/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfunc starts_one_ends(n: Int)\
    \ -> Int {\n    if n == 1 {\n        return 2\n    } else if n == 2 {\n      \
    \  return 4\n    } else {\n        return starts_one_ends(n-1) + starts_one_ends(n-2)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(starts_one_ends(n: 1) ==\
    \ 1)\nassert(starts_one_ends(n: 2) == 18)\nassert(starts_one_ends(n: 3) == 180)\n\
    assert(starts_one_ends(n: 4) == 1800)\nassert(starts_one_ends(n: 5) == 18000)"
  status: SyntaxError
  stderr: "/tmp/tmp4hwmi4r1.swift:10:32: error: missing argument label 'n:' in call\n\
    \        return starts_one_ends(n-1) + starts_one_ends(n-2)\n                \
    \               ^\n                               n: \n/tmp/tmp4hwmi4r1.swift:10:55:\
    \ error: missing argument label 'n:' in call\n        return starts_one_ends(n-1)\
    \ + starts_one_ends(n-2)\n                                                   \
    \   ^\n                                                      n: \n"
  stdout: ''
  timestamp: 1660012232
- exit_code: 1
  program: "\n/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfunc starts_one_ends(n: Int)\
    \ -> Int {\n    precondition(n > 0)\n    var last_row = [1]\n    var current_row\
    \ = [1]\n    for _ in 1..<n {\n        current_row = [1]\n        for i in 1..<last_row.count\
    \ {\n            current_row.append(last_row[i-1] + last_row[i])\n        }\n\
    \        current_row.append(1)\n        last_row = current_row\n    }\n    return\
    \ current_row.reduce(0, combine: +)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(starts_one_ends(n: 1) == 1)\nassert(starts_one_ends(n: 2) == 18)\nassert(starts_one_ends(n:\
    \ 3) == 180)\nassert(starts_one_ends(n: 4) == 1800)\nassert(starts_one_ends(n:\
    \ 5) == 18000)"
  status: SyntaxError
  stderr: "/tmp/tmp5wwc10bl.swift:16:30: error: extraneous argument label 'combine:'\
    \ in call\n    return current_row.reduce(0, combine: +)\n                    \
    \         ^   ~~~~~~~~~\n                                 \n"
  stdout: ''
  timestamp: 1660012232
- exit_code: -4
  program: "\n/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfunc starts_one_ends(n: Int)\
    \ -> Int {\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n      \
    \  return 10\n    }\n    var res = 10\n    for _ in 1..<n {\n        res *= 9\n\
    \    }\n    return res\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(starts_one_ends(n:\
    \ 1) == 1)\nassert(starts_one_ends(n: 2) == 18)\nassert(starts_one_ends(n: 3)\
    \ == 180)\nassert(starts_one_ends(n: 4) == 1800)\nassert(starts_one_ends(n: 5)\
    \ == 18000)"
  status: Exception
  stderr: 'tmp7ocz2gsy/tmp7ocz2gsy.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b36decabc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b36de9a2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b36de9a2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b36de9a17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7ocz2gsy                        0x000055fe9911b3b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b36dee97460 __libc_start_main +
    245

    6    tmp7ocz2gsy                        0x000055fe9911afe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660012232
- exit_code: 1
  program: "\n/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfunc starts_one_ends(n: Int)\
    \ -> Int {\n    if n <= 0 {\n        return 0\n    }\n    if n == 1 {\n      \
    \  return 1\n    }\n    if n == 2 {\n        return 9\n    }\n    let ten = Int.ten_power(n\
    \ - 1)\n    return starts_one_ends(n - 1) + 9 * (n - 1) * ten\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(starts_one_ends(n: 1) == 1)\nassert(starts_one_ends(n:\
    \ 2) == 18)\nassert(starts_one_ends(n: 3) == 180)\nassert(starts_one_ends(n: 4)\
    \ == 1800)\nassert(starts_one_ends(n: 5) == 18000)"
  status: SyntaxError
  stderr: "/tmp/tmp9d2poxms.swift:14:19: error: type 'Int' has no member 'ten_power'\n\
    \    let ten = Int.ten_power(n - 1)\n              ~~~ ^~~~~~~~~\n/tmp/tmp9d2poxms.swift:15:28:\
    \ error: missing argument label 'n:' in call\n    return starts_one_ends(n - 1)\
    \ + 9 * (n - 1) * ten\n                           ^\n                        \
    \   n: \n"
  stdout: ''
  timestamp: 1660012232
- exit_code: 1
  program: "\n/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfunc starts_one_ends(n: Int)\
    \ -> Int {\n    let count = Int(pow(Double(10), Double(n-1)))\n    return count\
    \ * 9 + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(starts_one_ends(n: 1)\
    \ == 1)\nassert(starts_one_ends(n: 2) == 18)\nassert(starts_one_ends(n: 3) ==\
    \ 180)\nassert(starts_one_ends(n: 4) == 1800)\nassert(starts_one_ends(n: 5) ==\
    \ 18000)"
  status: SyntaxError
  stderr: "/tmp/tmpixahy445.swift:5:21: error: cannot find 'pow' in scope\n    let\
    \ count = Int(pow(Double(10), Double(n-1)))\n                    ^~~\n"
  stdout: ''
  timestamp: 1660012232
- exit_code: -4
  program: "\n/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfunc starts_one_ends(n: Int)\
    \ -> Int {\n    var dp = [1, 1]\n    for i in 2...n {\n        var num = 2\n \
    \       if i > 2 {\n            num = 2 * dp[i - 2]\n        }\n        dp.append(num\
    \ + 2 * (num - dp[i - 1]))\n    }\n    return dp[n]\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(starts_one_ends(n: 1) == 1)\nassert(starts_one_ends(n: 2)\
    \ == 18)\nassert(starts_one_ends(n: 3) == 180)\nassert(starts_one_ends(n: 4) ==\
    \ 1800)\nassert(starts_one_ends(n: 5) == 18000)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b827728ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8276f85561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b8276f85286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b8276f8513c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b8276f84bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmprg8yqt7t                        0x000055a2d31ab838 <unavailable> + 6200

    6    tmprg8yqt7t                        0x000055a2d31ab488 <unavailable> + 5256

    7    libc.so.6                          0x00002b827747a460 __libc_start_main +
    245

    8    tmprg8yqt7t                        0x000055a2d31ab1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660012232
- exit_code: 1
  program: "\n/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfunc starts_one_ends(n: Int)\
    \ -> Int {\n    if n == 1 {\n        return 2\n    }\n    let tens = Int(pow(10,\
    \ Double(n-1)))\n    let last_digits = starts_one_ends(n-1)\n    let first_digits\
    \ = nonzero_digits(n-1)\n    return tens - last_digits + first_digits\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(starts_one_ends(n: 1) == 1)\nassert(starts_one_ends(n:\
    \ 2) == 18)\nassert(starts_one_ends(n: 3) == 180)\nassert(starts_one_ends(n: 4)\
    \ == 1800)\nassert(starts_one_ends(n: 5) == 18000)"
  status: SyntaxError
  stderr: "/tmp/tmpa8ronqgl.swift:8:20: error: cannot find 'pow' in scope\n    let\
    \ tens = Int(pow(10, Double(n-1)))\n                   ^~~\n/tmp/tmpa8ronqgl.swift:9:39:\
    \ error: missing argument label 'n:' in call\n    let last_digits = starts_one_ends(n-1)\n\
    \                                      ^\n                                   \
    \   n: \n/tmp/tmpa8ronqgl.swift:10:24: error: cannot find 'nonzero_digits' in\
    \ scope\n    let first_digits = nonzero_digits(n-1)\n                       ^~~~~~~~~~~~~~\n\
    /tmp/tmpa8ronqgl.swift:11:31: error: cannot convert return expression of type\
    \ 'Duration' to return type 'Int'\n    return tens - last_digits + first_digits\n\
    \           ~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660012232
- exit_code: 1
  program: "\n/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfunc starts_one_ends(n: Int)\
    \ -> Int {\n    var start_one = 0\n    var end_one = 0\n    var zero_one = 0\n\
    \    var one_zero = 0\n    if n == 1 {\n        return 2\n    } else if n == 2\
    \ {\n        return 4\n    } else {\n        start_one = starts_one_ends(n-1)\n\
    \        end_one = starts_one_ends(n-2)\n        zero_one = start_one + end_one\n\
    \        one_zero = end_one\n        return zero_one + one_zero\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(starts_one_ends(n: 1) == 1)\nassert(starts_one_ends(n:\
    \ 2) == 18)\nassert(starts_one_ends(n: 3) == 180)\nassert(starts_one_ends(n: 4)\
    \ == 1800)\nassert(starts_one_ends(n: 5) == 18000)"
  status: SyntaxError
  stderr: "/tmp/tmpcf2wvi7s.swift:14:37: error: missing argument label 'n:' in call\n\
    \        start_one = starts_one_ends(n-1)\n                                  \
    \  ^\n                                    n: \n/tmp/tmpcf2wvi7s.swift:15:35: error:\
    \ missing argument label 'n:' in call\n        end_one = starts_one_ends(n-2)\n\
    \                                  ^\n                                  n: \n"
  stdout: ''
  timestamp: 1660012232
- exit_code: 1
  program: "\n/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfunc starts_one_ends(n: Int)\
    \ -> Int {\n    var count = 0\n    for i in 1..<(n-1) {\n        count += counts_beginning_one(n:\
    \ i) * counts_ending_one(n: n-i)\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(starts_one_ends(n: 1) == 1)\nassert(starts_one_ends(n:\
    \ 2) == 18)\nassert(starts_one_ends(n: 3) == 180)\nassert(starts_one_ends(n: 4)\
    \ == 1800)\nassert(starts_one_ends(n: 5) == 18000)"
  status: SyntaxError
  stderr: "/tmp/tmpjeoscu98.swift:7:18: error: cannot find 'counts_beginning_one'\
    \ in scope\n        count += counts_beginning_one(n: i) * counts_ending_one(n:\
    \ n-i)\n                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpjeoscu98.swift:7:47: error:\
    \ cannot find 'counts_ending_one' in scope\n        count += counts_beginning_one(n:\
    \ i) * counts_ending_one(n: n-i)\n                                           \
    \   ^~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660012232
- exit_code: 1
  program: "\n/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfunc starts_one_ends(n: Int)\
    \ -> Int {\n    if n == 1 {\n        return 2\n    }\n    let m = n - 1\n    return\
    \ 9 * pow(10, m)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(starts_one_ends(n:\
    \ 1) == 1)\nassert(starts_one_ends(n: 2) == 18)\nassert(starts_one_ends(n: 3)\
    \ == 180)\nassert(starts_one_ends(n: 4) == 1800)\nassert(starts_one_ends(n: 5)\
    \ == 18000)"
  status: SyntaxError
  stderr: "/tmp/tmp4ocxovz6.swift:9:16: error: cannot find 'pow' in scope\n    return\
    \ 9 * pow(10, m)\n               ^~~\n"
  stdout: ''
  timestamp: 1660012232
- exit_code: -4
  program: "\n/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfunc starts_one_ends(n: Int)\
    \ -> Int {\n    var result = 0\n    var multiple = 1\n    if n > 1 {\n       \
    \ for i in 1...n-1 {\n            multiple *= 10\n        }\n        result +=\
    \ multiple\n    }\n    result += 10\n    if n > 2 {\n        var last_digit =\
    \ 10\n        for i in 2...n-1 {\n            last_digit += multiple\n       \
    \     result += last_digit * 9\n            multiple /= 10\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(starts_one_ends(n:\
    \ 1) == 1)\nassert(starts_one_ends(n: 2) == 18)\nassert(starts_one_ends(n: 3)\
    \ == 180)\nassert(starts_one_ends(n: 4) == 1800)\nassert(starts_one_ends(n: 5)\
    \ == 18000)"
  status: Exception
  stderr: 'tmp3dvd_0nc/tmp3dvd_0nc.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adbb7ac7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adbb77beb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adbb77be988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adbb77bd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3dvd_0nc                        0x000056530085f335 <unavailable> + 4917

    5    libc.so.6                          0x00002adbb7cb3460 __libc_start_main +
    245

    6    tmp3dvd_0nc                        0x000056530085efe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660012232
- exit_code: 1
  program: "\n/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfunc starts_one_ends(n: Int)\
    \ -> Int {\n    let all_num = (Int(pow(Double(10), Double(n))) - 1) -\n      \
    \  Int(pow(Double(10), Double(n - 1))) + 1\n    let num_without_ones = Int(pow(Double(9),\
    \ Double(n))) -\n        Int(pow(Double(9), Double(n - 1)))\n    return all_num\
    \ - num_without_ones\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(starts_one_ends(n:\
    \ 1) == 1)\nassert(starts_one_ends(n: 2) == 18)\nassert(starts_one_ends(n: 3)\
    \ == 180)\nassert(starts_one_ends(n: 4) == 1800)\nassert(starts_one_ends(n: 5)\
    \ == 18000)"
  status: SyntaxError
  stderr: "/tmp/tmplsj7cf9x.swift:5:24: error: cannot find 'pow' in scope\n    let\
    \ all_num = (Int(pow(Double(10), Double(n))) - 1) -\n                       ^~~\n\
    /tmp/tmplsj7cf9x.swift:6:13: error: cannot find 'pow' in scope\n        Int(pow(Double(10),\
    \ Double(n - 1))) + 1\n            ^~~\n/tmp/tmplsj7cf9x.swift:7:32: error: cannot\
    \ find 'pow' in scope\n    let num_without_ones = Int(pow(Double(9), Double(n)))\
    \ -\n                               ^~~\n/tmp/tmplsj7cf9x.swift:8:13: error: cannot\
    \ find 'pow' in scope\n        Int(pow(Double(9), Double(n - 1)))\n          \
    \  ^~~\n/tmp/tmplsj7cf9x.swift:9:20: error: cannot convert return expression of\
    \ type 'Duration' to return type 'Int'\n    return all_num - num_without_ones\n\
    \           ~~~~~~~~^~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660012232
- exit_code: 1
  program: "\n/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfunc starts_one_ends(n: Int)\
    \ -> Int {\n    if n == 1 {\n        return 1\n    } else {\n        return starts_one_ends(n\
    \ - 1) + 9 * Int(pow(Double(10), Double(n - 2)))\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(starts_one_ends(n: 1) == 1)\nassert(starts_one_ends(n:\
    \ 2) == 18)\nassert(starts_one_ends(n: 3) == 180)\nassert(starts_one_ends(n: 4)\
    \ == 1800)\nassert(starts_one_ends(n: 5) == 18000)"
  status: SyntaxError
  stderr: "/tmp/tmp3jedfa5r.swift:8:49: error: cannot find 'pow' in scope\n      \
    \  return starts_one_ends(n - 1) + 9 * Int(pow(Double(10), Double(n - 2)))\n \
    \                                               ^~~\n/tmp/tmp3jedfa5r.swift:8:32:\
    \ error: missing argument label 'n:' in call\n        return starts_one_ends(n\
    \ - 1) + 9 * Int(pow(Double(10), Double(n - 2)))\n                           \
    \    ^\n                               n: \n"
  stdout: ''
  timestamp: 1660012232
- exit_code: 1
  program: "\n/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfunc starts_one_ends(n: Int)\
    \ -> Int {\n    var first_digit_ends_one: Int\n    if n == 1 {\n        first_digit_ends_one\
    \ = 1\n    } else {\n        first_digit_ends_one = 9*power(10, n-1)\n    }\n\
    \    var last_digit_starts_one: Int\n    if n == 1 {\n        last_digit_starts_one\
    \ = 1\n    } else {\n        last_digit_starts_one = 9*power(10, n-2)\n    }\n\
    \    return first_digit_ends_one + last_digit_starts_one\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(starts_one_ends(n: 1) == 1)\nassert(starts_one_ends(n:\
    \ 2) == 18)\nassert(starts_one_ends(n: 3) == 180)\nassert(starts_one_ends(n: 4)\
    \ == 1800)\nassert(starts_one_ends(n: 5) == 18000)"
  status: SyntaxError
  stderr: "/tmp/tmpn1n_tttl.swift:9:34: error: cannot find 'power' in scope\n    \
    \    first_digit_ends_one = 9*power(10, n-1)\n                               \
    \  ^~~~~\n/tmp/tmpn1n_tttl.swift:15:35: error: cannot find 'power' in scope\n\
    \        last_digit_starts_one = 9*power(10, n-2)\n                          \
    \        ^~~~~\n"
  stdout: ''
  timestamp: 1660012232
- exit_code: 1
  program: "\n/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfunc starts_one_ends(n: Int)\
    \ -> Int {\n    let dp = Array<Int>(repeating: 0, count: n + 1)\n    dp[1] = 1\n\
    \    for i in 2...n {\n        dp[i] = dp[i - 1] * 10 + pow10(i - 1)\n    }\n\
    \    return dp[n]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(starts_one_ends(n:\
    \ 1) == 1)\nassert(starts_one_ends(n: 2) == 18)\nassert(starts_one_ends(n: 3)\
    \ == 180)\nassert(starts_one_ends(n: 4) == 1800)\nassert(starts_one_ends(n: 5)\
    \ == 18000)"
  status: SyntaxError
  stderr: "/tmp/tmptcqb8ojf.swift:6:7: error: cannot assign through subscript: 'dp'\
    \ is a 'let' constant\n    dp[1] = 1\n    ~~^\n/tmp/tmptcqb8ojf.swift:5:5: note:\
    \ change 'let' to 'var' to make it mutable\n    let dp = Array<Int>(repeating:\
    \ 0, count: n + 1)\n    ^~~\n    var\n/tmp/tmptcqb8ojf.swift:8:34: error: cannot\
    \ find 'pow10' in scope\n        dp[i] = dp[i - 1] * 10 + pow10(i - 1)\n     \
    \                            ^~~~~\n/tmp/tmptcqb8ojf.swift:8:11: error: cannot\
    \ assign through subscript: 'dp' is a 'let' constant\n        dp[i] = dp[i - 1]\
    \ * 10 + pow10(i - 1)\n        ~~^\n/tmp/tmptcqb8ojf.swift:5:5: note: change 'let'\
    \ to 'var' to make it mutable\n    let dp = Array<Int>(repeating: 0, count: n\
    \ + 1)\n    ^~~\n    var\n"
  stdout: ''
  timestamp: 1660012232
- exit_code: 1
  program: "\n/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfunc starts_one_ends(n: Int)\
    \ -> Int {\n  if n == 1 {\n    return 1\n  }\n  if n == 2 {\n    return 1\n  }\n\
    \  return starts_one_ends(n - 1) + starts_one_ends(n - 2)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(starts_one_ends(n: 1) == 1)\nassert(starts_one_ends(n:\
    \ 2) == 18)\nassert(starts_one_ends(n: 3) == 180)\nassert(starts_one_ends(n: 4)\
    \ == 1800)\nassert(starts_one_ends(n: 5) == 18000)"
  status: SyntaxError
  stderr: "/tmp/tmpyorstqq3.swift:11:26: error: missing argument label 'n:' in call\n\
    \  return starts_one_ends(n - 1) + starts_one_ends(n - 2)\n                  \
    \       ^\n                         n: \n/tmp/tmpyorstqq3.swift:11:51: error:\
    \ missing argument label 'n:' in call\n  return starts_one_ends(n - 1) + starts_one_ends(n\
    \ - 2)\n                                                  ^\n                \
    \                                  n: \n"
  stdout: ''
  timestamp: 1660012232
- exit_code: 1
  program: "\n/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfunc starts_one_ends(n: Int)\
    \ -> Int {\n    assert(n > 0, \"n has to be positive\")\n    if n == 1 {\n   \
    \     return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    var count\
    \ = 2\n    for i in 2..<n {\n        count += 9 * Int(pow(Double(10), Double(i\
    \ - 1)))\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(starts_one_ends(n:\
    \ 1) == 1)\nassert(starts_one_ends(n: 2) == 18)\nassert(starts_one_ends(n: 3)\
    \ == 180)\nassert(starts_one_ends(n: 4) == 1800)\nassert(starts_one_ends(n: 5)\
    \ == 18000)"
  status: SyntaxError
  stderr: "/tmp/tmp_xb23b_z.swift:14:26: error: cannot find 'pow' in scope\n     \
    \   count += 9 * Int(pow(Double(10), Double(i - 1)))\n                       \
    \  ^~~\n"
  stdout: ''
  timestamp: 1660012232
- exit_code: 1
  program: "\n/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfunc starts_one_ends(n: Int)\
    \ -> Int {\n    var nums = Array(repeating: 0, count: n + 1)\n    nums[1] = 1\n\
    \    for i in 2...n {\n        nums[i] = nums[i - 1] + 10.power(i - 1)\n    }\n\
    \    return nums[n]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(starts_one_ends(n:\
    \ 1) == 1)\nassert(starts_one_ends(n: 2) == 18)\nassert(starts_one_ends(n: 3)\
    \ == 180)\nassert(starts_one_ends(n: 4) == 1800)\nassert(starts_one_ends(n: 5)\
    \ == 18000)"
  status: SyntaxError
  stderr: "/tmp/tmpjyqt9rdi.swift:8:36: error: value of type 'Int' has no member 'power'\n\
    \        nums[i] = nums[i - 1] + 10.power(i - 1)\n                           \
    \     ~~ ^~~~~\n"
  stdout: ''
  timestamp: 1660012232
- exit_code: 1
  program: "\n/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfunc starts_one_ends(n: Int)\
    \ -> Int {\n  var dp = [Int](count: n+1, repeatedValue: 0)\n  dp[1] = 1\n  dp[2]\
    \ = 2\n  for i in 3...n {\n    dp[i] = dp[i-1] + dp[i-2]\n  }\n  return 2*dp[n-1]\
    \ + dp[n]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(starts_one_ends(n: 1)\
    \ == 1)\nassert(starts_one_ends(n: 2) == 18)\nassert(starts_one_ends(n: 3) ==\
    \ 180)\nassert(starts_one_ends(n: 4) == 1800)\nassert(starts_one_ends(n: 5) ==\
    \ 18000)"
  status: SyntaxError
  stderr: "/tmp/tmppf776wnl.swift:5:12: error: no exact matches in call to initializer\
    \ \n  var dp = [Int](count: n+1, repeatedValue: 0)\n           ^\n/tmp/tmppf776wnl.swift:5:12:\
    \ note: candidate has partially matching parameter list (repeating: Int, count:\
    \ Int)\n  var dp = [Int](count: n+1, repeatedValue: 0)\n           ^\n/tmp/tmppf776wnl.swift:5:12:\
    \ note: candidate has partially matching parameter list (repeating: Int, count:\
    \ Int)\n  var dp = [Int](count: n+1, repeatedValue: 0)\n           ^\n"
  stdout: ''
  timestamp: 1660012232
- exit_code: 1
  program: "\n/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfunc starts_one_ends(n: Int)\
    \ -> Int {\n    if n == 1 {\n        return 1\n    }\n    return 9 * pow10[n -\
    \ 1] + starts_one_ends(n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(starts_one_ends(n:\
    \ 1) == 1)\nassert(starts_one_ends(n: 2) == 18)\nassert(starts_one_ends(n: 3)\
    \ == 180)\nassert(starts_one_ends(n: 4) == 1800)\nassert(starts_one_ends(n: 5)\
    \ == 18000)"
  status: SyntaxError
  stderr: "/tmp/tmp8s1vjv5i.swift:8:16: error: cannot find 'pow10' in scope\n    return\
    \ 9 * pow10[n - 1] + starts_one_ends(n - 1)\n               ^~~~~\n/tmp/tmp8s1vjv5i.swift:8:47:\
    \ error: missing argument label 'n:' in call\n    return 9 * pow10[n - 1] + starts_one_ends(n\
    \ - 1)\n                                              ^\n                    \
    \                          n: \n"
  stdout: ''
  timestamp: 1660012232
- exit_code: 1
  program: "\n/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfunc starts_one_ends(n: Int)\
    \ -> Int {\n    var result = 0\n    for i in 1..<n {\n        result += Int(pow(10,\
    \ Double(i)))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(starts_one_ends(n: 1) == 1)\nassert(starts_one_ends(n: 2) == 18)\nassert(starts_one_ends(n:\
    \ 3) == 180)\nassert(starts_one_ends(n: 4) == 1800)\nassert(starts_one_ends(n:\
    \ 5) == 18000)"
  status: SyntaxError
  stderr: "/tmp/tmppuki_wce.swift:7:23: error: cannot find 'pow' in scope\n      \
    \  result += Int(pow(10, Double(i)))\n                      ^~~\n"
  stdout: ''
  timestamp: 1660012232
- exit_code: 1
  program: "\n/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfunc starts_one_ends(n: Int)\
    \ -> Int {\n    if n == 1 {\n        return 2\n    } else if n == 2 {\n      \
    \  return 4\n    }\n    return starts_one_ends(n - 1) + starts_one_ends(n - 2)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(starts_one_ends(n: 1) == 1)\nassert(starts_one_ends(n:\
    \ 2) == 18)\nassert(starts_one_ends(n: 3) == 180)\nassert(starts_one_ends(n: 4)\
    \ == 1800)\nassert(starts_one_ends(n: 5) == 18000)"
  status: SyntaxError
  stderr: "/tmp/tmp309j_cii.swift:10:28: error: missing argument label 'n:' in call\n\
    \    return starts_one_ends(n - 1) + starts_one_ends(n - 2)\n                \
    \           ^\n                           n: \n/tmp/tmp309j_cii.swift:10:53: error:\
    \ missing argument label 'n:' in call\n    return starts_one_ends(n - 1) + starts_one_ends(n\
    \ - 2)\n                                                    ^\n              \
    \                                      n: \n"
  stdout: ''
  timestamp: 1660012232
- exit_code: 1
  program: "\n/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfunc starts_one_ends(n: Int)\
    \ -> Int {\n    // Base case: 1 digit\n    if n == 1 {\n        return 2\n   \
    \ }\n    // Recursive case: n digits\n    // For a number that starts with 1 and\
    \ has n digits, the remaining digits\n    // can be anything. The number of ways\
    \ to do that is `starts_one_ends(n-1)`.\n    // For a number that ends with 1\
    \ and has n digits, the first digit can be\n    // anything and the remaining\
    \ digits can be anything except 1.  There are\n    // 9 choices for the first\
    \ digit and `starts_one_ends(n-1) - 1` choices for\n    // the remaining digits.\n\
    \    return starts_one_ends(n-1) + 9 * (starts_one_ends(n-1) - 1)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(starts_one_ends(n: 1) == 1)\nassert(starts_one_ends(n:\
    \ 2) == 18)\nassert(starts_one_ends(n: 3) == 180)\nassert(starts_one_ends(n: 4)\
    \ == 1800)\nassert(starts_one_ends(n: 5) == 18000)"
  status: SyntaxError
  stderr: "/tmp/tmp1g0vv_28.swift:16:28: error: missing argument label 'n:' in call\n\
    \    return starts_one_ends(n-1) + 9 * (starts_one_ends(n-1) - 1)\n          \
    \                 ^\n                           n: \n/tmp/tmp1g0vv_28.swift:16:56:\
    \ error: missing argument label 'n:' in call\n    return starts_one_ends(n-1)\
    \ + 9 * (starts_one_ends(n-1) - 1)\n                                         \
    \              ^\n                                                       n: \n"
  stdout: ''
  timestamp: 1660012232
- exit_code: 1
  program: "\n/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfunc starts_one_ends(n: Int)\
    \ -> Int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n      \
    \  return 2 * 3\n    }\n    return starts_one_ends(n - 1) + 2 * (n - 1) * starts_one_ends(n\
    \ - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(starts_one_ends(n: 1) ==\
    \ 1)\nassert(starts_one_ends(n: 2) == 18)\nassert(starts_one_ends(n: 3) == 180)\n\
    assert(starts_one_ends(n: 4) == 1800)\nassert(starts_one_ends(n: 5) == 18000)"
  status: SyntaxError
  stderr: "/tmp/tmpgssewfyw.swift:11:28: error: missing argument label 'n:' in call\n\
    \    return starts_one_ends(n - 1) + 2 * (n - 1) * starts_one_ends(n - 2)\n  \
    \                         ^\n                           n: \n/tmp/tmpgssewfyw.swift:11:67:\
    \ error: missing argument label 'n:' in call\n    return starts_one_ends(n - 1)\
    \ + 2 * (n - 1) * starts_one_ends(n - 2)\n                                   \
    \                               ^\n                                          \
    \                        n: \n"
  stdout: ''
  timestamp: 1660012232
- exit_code: 1
  program: "\n/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfunc starts_one_ends(n: Int)\
    \ -> Int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n      \
    \  return 4\n    }\n    return 2 * starts_one_ends(n-1)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(starts_one_ends(n: 1) == 1)\nassert(starts_one_ends(n:\
    \ 2) == 18)\nassert(starts_one_ends(n: 3) == 180)\nassert(starts_one_ends(n: 4)\
    \ == 1800)\nassert(starts_one_ends(n: 5) == 18000)"
  status: SyntaxError
  stderr: "/tmp/tmpoz55c5s7.swift:11:32: error: missing argument label 'n:' in call\n\
    \    return 2 * starts_one_ends(n-1)\n                               ^\n     \
    \                          n: \n"
  stdout: ''
  timestamp: 1660012232
- exit_code: -4
  program: "\n/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfunc starts_one_ends(n: Int)\
    \ -> Int {\n    if n <= 1 {\n        return 0\n    }\n    var c = 0\n    for k\
    \ in 1..<n {\n        c += starts_one_ends(n: k)\n    }\n    if n >= 2 {\n   \
    \     c += 9\n    }\n    return c\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(starts_one_ends(n:\
    \ 1) == 1)\nassert(starts_one_ends(n: 2) == 18)\nassert(starts_one_ends(n: 3)\
    \ == 180)\nassert(starts_one_ends(n: 4) == 1800)\nassert(starts_one_ends(n: 5)\
    \ == 18000)"
  status: Exception
  stderr: 'tmplutrfsz0/tmplutrfsz0.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7c8972fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7c89426b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7c89426988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7c894257b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplutrfsz0                        0x0000565540e91335 <unavailable> + 4917

    5    libc.so.6                          0x00002b7c8991b460 __libc_start_main +
    245

    6    tmplutrfsz0                        0x0000565540e90fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660012232
- exit_code: 1
  program: "\n/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfunc starts_one_ends(n: Int)\
    \ -> Int {\n    let s_pow10: [Int] = [0, 0, 3, 3, 3, 3, 3, 3, 3, 3]\n    let e_pow10:\
    \ [Int] = [0, 0, 3, 3, 3, 3, 3, 3, 3, 3]\n    let o_pow10: [Int] = [0, 0, 0, 0,\
    \ 0, 0, 0, 0, 0, 0]\n    let t_pow10: [Int] = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n\
    \    let pow10: [[Int]] = [s_pow10, e_pow10, o_pow10, t_pow10]\n    var res =\
    \ 0\n    for i in 0..<4 {\n        if pow10[i][n] > 0 {\n            res += pow10[i][n]\
    \ * (n - 1) * pow(10, n - 2)\n        }\n    }\n    return res\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(starts_one_ends(n: 1) == 1)\nassert(starts_one_ends(n:\
    \ 2) == 18)\nassert(starts_one_ends(n: 3) == 180)\nassert(starts_one_ends(n: 4)\
    \ == 1800)\nassert(starts_one_ends(n: 5) == 18000)"
  status: SyntaxError
  stderr: "/tmp/tmpkc5157d1.swift:13:44: error: cannot find 'pow' in scope\n     \
    \       res += pow10[i][n] * (n - 1) * pow(10, n - 2)\n                      \
    \                     ^~~\n"
  stdout: ''
  timestamp: 1660012232
- exit_code: 1
  program: "\n/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfunc starts_one_ends(n: Int)\
    \ -> Int {\n    if n == 1 {\n        return 1\n    } else {\n        return 2\
    \ * starts_one_ends(n-1) + (9-1)*power(10, n-2)\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(starts_one_ends(n: 1) == 1)\nassert(starts_one_ends(n: 2)\
    \ == 18)\nassert(starts_one_ends(n: 3) == 180)\nassert(starts_one_ends(n: 4) ==\
    \ 1800)\nassert(starts_one_ends(n: 5) == 18000)"
  status: SyntaxError
  stderr: "/tmp/tmpna9fwkbp.swift:8:49: error: cannot find 'power' in scope\n    \
    \    return 2 * starts_one_ends(n-1) + (9-1)*power(10, n-2)\n                \
    \                                ^~~~~\n/tmp/tmpna9fwkbp.swift:8:36: error: missing\
    \ argument label 'n:' in call\n        return 2 * starts_one_ends(n-1) + (9-1)*power(10,\
    \ n-2)\n                                   ^\n                               \
    \    n: \n"
  stdout: ''
  timestamp: 1660012234
- exit_code: 1
  program: "\n/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfunc starts_one_ends(n: Int)\
    \ -> Int {\n    precondition(n > 0)\n    return starts_one_ends(n, true)\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(starts_one_ends(n: 1) == 1)\nassert(starts_one_ends(n:\
    \ 2) == 18)\nassert(starts_one_ends(n: 3) == 180)\nassert(starts_one_ends(n: 4)\
    \ == 1800)\nassert(starts_one_ends(n: 5) == 18000)"
  status: SyntaxError
  stderr: "/tmp/tmpj12digq0.swift:6:31: error: extra argument in call\n    return\
    \ starts_one_ends(n, true)\n                          ~~~~^~~~~\n"
  stdout: ''
  timestamp: 1660012232
- exit_code: 1
  program: "\n/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfunc starts_one_ends(n: Int)\
    \ -> Int {\n    if n == 1 {\n        return 2\n    }\n    var ways = [1, 1]\n\
    \    for _ in 1..<n {\n        ways = [ways[1], sum(ways)]\n    }\n    return\
    \ sum(ways)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(starts_one_ends(n: 1)\
    \ == 1)\nassert(starts_one_ends(n: 2) == 18)\nassert(starts_one_ends(n: 3) ==\
    \ 180)\nassert(starts_one_ends(n: 4) == 1800)\nassert(starts_one_ends(n: 5) ==\
    \ 18000)"
  status: SyntaxError
  stderr: "/tmp/tmpodef4wgr.swift:10:26: error: cannot find 'sum' in scope\n     \
    \   ways = [ways[1], sum(ways)]\n                         ^~~\n/tmp/tmpodef4wgr.swift:12:12:\
    \ error: cannot find 'sum' in scope\n    return sum(ways)\n           ^~~\n"
  stdout: ''
  timestamp: 1660012232
- exit_code: 1
  program: "\n/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfunc starts_one_ends(n: Int)\
    \ -> Int {\n    let sqrt_n = sqrt(Double(n))\n    var s = n + 1\n    for i in\
    \ 2..<Int(sqrt_n)+1 {\n        let j = n / i\n        s += i*j + (n % i > 0 ?\
    \ 1 : 0)\n    }\n    return s\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(starts_one_ends(n:\
    \ 1) == 1)\nassert(starts_one_ends(n: 2) == 18)\nassert(starts_one_ends(n: 3)\
    \ == 180)\nassert(starts_one_ends(n: 4) == 1800)\nassert(starts_one_ends(n: 5)\
    \ == 18000)"
  status: SyntaxError
  stderr: "/tmp/tmpglidd97y.swift:5:18: error: cannot find 'sqrt' in scope\n    let\
    \ sqrt_n = sqrt(Double(n))\n                 ^~~~\n"
  stdout: ''
  timestamp: 1660012232
- exit_code: -4
  program: "\n/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfunc starts_one_ends(n: Int)\
    \ -> Int {\n    precondition(n > 0)\n    return 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(starts_one_ends(n: 1) == 1)\nassert(starts_one_ends(n: 2)\
    \ == 18)\nassert(starts_one_ends(n: 3) == 180)\nassert(starts_one_ends(n: 4) ==\
    \ 1800)\nassert(starts_one_ends(n: 5) == 18000)"
  status: Exception
  stderr: 'tmpkigufxt6/tmpkigufxt6.swift:22: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3560850c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3560547b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3560547988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b35605467b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkigufxt6                        0x00005632124731b5 <unavailable> + 4533

    5    libc.so.6                          0x00002b3560a3c460 __libc_start_main +
    245

    6    tmpkigufxt6                        0x0000563212472e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660012232
- exit_code: -4
  program: "\n/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfunc starts_one_ends(n: Int)\
    \ -> Int {\n    if n <= 0 {\n        return 0\n    }\n    var previous = 1\n \
    \   var current = 1\n    for _ in 1 ..< n {\n        let tmp = current\n     \
    \   current = current + previous\n        previous = tmp\n    }\n    return 2\
    \ * current\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(starts_one_ends(n: 1)\
    \ == 1)\nassert(starts_one_ends(n: 2) == 18)\nassert(starts_one_ends(n: 3) ==\
    \ 180)\nassert(starts_one_ends(n: 4) == 1800)\nassert(starts_one_ends(n: 5) ==\
    \ 18000)"
  status: Exception
  stderr: 'tmp9uzvs32c/tmp9uzvs32c.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b577f3b9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b577f0b0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b577f0b0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b577f0af7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9uzvs32c                        0x000055c45335b335 <unavailable> + 4917

    5    libc.so.6                          0x00002b577f5a5460 __libc_start_main +
    245

    6    tmp9uzvs32c                        0x000055c45335afe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660012232
- exit_code: 1
  program: "\n/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfunc starts_one_ends(n: Int)\
    \ -> Int {\n    var count = 0\n\n    if n == 1 {\n        return 10\n    }\n\n\
    \    for d in 1...9 {\n        count += all_n_digit_positive_ints(d: d, n: n)\n\
    \    }\n\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(starts_one_ends(n:\
    \ 1) == 1)\nassert(starts_one_ends(n: 2) == 18)\nassert(starts_one_ends(n: 3)\
    \ == 180)\nassert(starts_one_ends(n: 4) == 1800)\nassert(starts_one_ends(n: 5)\
    \ == 18000)"
  status: SyntaxError
  stderr: "/tmp/tmpcm_1bkeh.swift:12:18: error: cannot find 'all_n_digit_positive_ints'\
    \ in scope\n        count += all_n_digit_positive_ints(d: d, n: n)\n         \
    \        ^~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660012232
- exit_code: -4
  program: "\n/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfunc starts_one_ends(n: Int)\
    \ -> Int {\n  assert(n > 0)\n  // We're going to count up to 2 ^ n - 1.\n  var\
    \ count = 0\n  var value = 0\n  while value < (1 << n) {\n    // See if the ones\
    \ digit is 1.\n    if (value & 1) == 1 {\n      count += 1\n    }\n    // See\
    \ if the most significant digit is 1.\n    if value & (1 << (n - 1)) != 0 {\n\
    \      count += 1\n    }\n    value += 1\n  }\n  return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(starts_one_ends(n: 1) == 1)\nassert(starts_one_ends(n:\
    \ 2) == 18)\nassert(starts_one_ends(n: 3) == 180)\nassert(starts_one_ends(n: 4)\
    \ == 1800)\nassert(starts_one_ends(n: 5) == 18000)"
  status: Exception
  stderr: 'tmp12yh5g9e/tmp12yh5g9e.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b577b45bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b577b152b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b577b152988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b577b1517b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp12yh5g9e                        0x0000559b691001b5 <unavailable> + 4533

    5    libc.so.6                          0x00002b577b647460 __libc_start_main +
    245

    6    tmp12yh5g9e                        0x0000559b690ffe69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660012233
- exit_code: -4
  program: "\n/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfunc starts_one_ends(n: Int)\
    \ -> Int {\n    precondition(n > 0)\n    if n == 1 {\n        return 2\n    }\n\
    \    return 9 * starts_one_ends(n: n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(starts_one_ends(n: 1) == 1)\nassert(starts_one_ends(n: 2) == 18)\n\
    assert(starts_one_ends(n: 3) == 180)\nassert(starts_one_ends(n: 4) == 1800)\n\
    assert(starts_one_ends(n: 5) == 18000)"
  status: Exception
  stderr: 'tmp84z8lxgp/tmp84z8lxgp.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002baa9dc40c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002baa9d937b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002baa9d937988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002baa9d9367b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp84z8lxgp                        0x000055674bf871b5 <unavailable> + 4533

    5    libc.so.6                          0x00002baa9de2c460 __libc_start_main +
    245

    6    tmp84z8lxgp                        0x000055674bf86e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660012233
- exit_code: -4
  program: "\n/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfunc starts_one_ends(n: Int)\
    \ -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(starts_one_ends(n:\
    \ 1) == 1)\nassert(starts_one_ends(n: 2) == 18)\nassert(starts_one_ends(n: 3)\
    \ == 180)\nassert(starts_one_ends(n: 4) == 1800)\nassert(starts_one_ends(n: 5)\
    \ == 18000)"
  status: Exception
  stderr: 'tmpmhqv_km4/tmpmhqv_km4.swift:21: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba812dd5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba812accb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba812acc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba812acb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmhqv_km4                        0x0000561086d891b5 <unavailable> + 4533

    5    libc.so.6                          0x00002ba812fc1460 __libc_start_main +
    245

    6    tmpmhqv_km4                        0x0000561086d88e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660012130
- exit_code: 1
  program: "\n/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfunc starts_one_ends(n: Int)\
    \ -> Int {\n    // See https://en.wikipedia.org/wiki/Harshad_number#Non-trivial_Harshad_numbers.\n\
    \    let power = Int(pow(10.0, Double(n)))\n    let min = Int(pow(10.0, Double(n\
    \ - 1)))\n    var count = 0\n    for i in min..<power {\n        let s = String(i)\n\
    \        if Int(s)! % sum_digits(i) == 0 {\n            if s.hasPrefix(\"1\")\
    \ || s.hasSuffix(\"1\") {\n                count += 1\n            }\n       \
    \ }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(starts_one_ends(n:\
    \ 1) == 1)\nassert(starts_one_ends(n: 2) == 18)\nassert(starts_one_ends(n: 3)\
    \ == 180)\nassert(starts_one_ends(n: 4) == 1800)\nassert(starts_one_ends(n: 5)\
    \ == 18000)"
  status: SyntaxError
  stderr: "/tmp/tmpew64qgeu.swift:6:21: error: cannot find 'pow' in scope\n    let\
    \ power = Int(pow(10.0, Double(n)))\n                    ^~~\n/tmp/tmpew64qgeu.swift:7:19:\
    \ error: cannot find 'pow' in scope\n    let min = Int(pow(10.0, Double(n - 1)))\n\
    \                  ^~~\n"
  stdout: ''
  timestamp: 1660012232
- exit_code: 1
  program: "\n/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfunc starts_one_ends(n: Int)\
    \ -> Int {\n  var count = 0\n  for i in 1..<n {\n    count += Int(pow(Double(10),\
    \ Double(i)))\n  }\n  count *= 2\n  if n > 1 {\n    count += 9 * Int(pow(Double(10),\
    \ Double(n - 1)))\n  }\n  return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(starts_one_ends(n: 1) == 1)\nassert(starts_one_ends(n: 2) == 18)\nassert(starts_one_ends(n:\
    \ 3) == 180)\nassert(starts_one_ends(n: 4) == 1800)\nassert(starts_one_ends(n:\
    \ 5) == 18000)"
  status: SyntaxError
  stderr: "/tmp/tmpclinklwq.swift:7:18: error: cannot find 'pow' in scope\n    count\
    \ += Int(pow(Double(10), Double(i)))\n                 ^~~\n/tmp/tmpclinklwq.swift:11:22:\
    \ error: cannot find 'pow' in scope\n    count += 9 * Int(pow(Double(10), Double(n\
    \ - 1)))\n                     ^~~\n"
  stdout: ''
  timestamp: 1660012232
- exit_code: 1
  program: "\n/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfunc starts_one_ends(n: Int)\
    \ -> Int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n      \
    \  return 3\n    }\n    return starts_one_ends(n - 1) + starts_one_ends(n - 2)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(starts_one_ends(n: 1) == 1)\nassert(starts_one_ends(n:\
    \ 2) == 18)\nassert(starts_one_ends(n: 3) == 180)\nassert(starts_one_ends(n: 4)\
    \ == 1800)\nassert(starts_one_ends(n: 5) == 18000)"
  status: SyntaxError
  stderr: "/tmp/tmpch5qjzzp.swift:11:28: error: missing argument label 'n:' in call\n\
    \    return starts_one_ends(n - 1) + starts_one_ends(n - 2)\n                \
    \           ^\n                           n: \n/tmp/tmpch5qjzzp.swift:11:53: error:\
    \ missing argument label 'n:' in call\n    return starts_one_ends(n - 1) + starts_one_ends(n\
    \ - 2)\n                                                    ^\n              \
    \                                      n: \n"
  stdout: ''
  timestamp: 1660012128
- exit_code: -4
  program: "\n/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfunc starts_one_ends(n: Int)\
    \ -> Int {\n  if n == 1 {\n    return 1\n  }\n  return (n - 1) * 9\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(starts_one_ends(n: 1) == 1)\nassert(starts_one_ends(n:\
    \ 2) == 18)\nassert(starts_one_ends(n: 3) == 180)\nassert(starts_one_ends(n: 4)\
    \ == 1800)\nassert(starts_one_ends(n: 5) == 18000)"
  status: Exception
  stderr: 'tmp6oz4d8sk/tmp6oz4d8sk.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad709d79c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad709a70b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad709a70988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad709a6f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6oz4d8sk                        0x000055cbcb9bd230 <unavailable> + 4656

    5    libc.so.6                          0x00002ad709f65460 __libc_start_main +
    245

    6    tmp6oz4d8sk                        0x000055cbcb9bce69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660012233
- exit_code: 1
  program: "\n/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfunc starts_one_ends(n: Int)\
    \ -> Int {\n    // Let F(k) denote the count of the numbers of k-digit positive\
    \ integers\n    // that start or end with 1. Then F(1) = 1, F(2) = 2, F(3) = 3,\
    \ F(4) = 4,\n    // F(5) = 6, F(6) = 8, F(7) = 11, F(8) = 16, F(9) = 23, F(10)\
    \ = 32, ...\n    //\n    // Let's find a recurrence relationship.\n    //\n  \
    \  // F(k) = 10^(k-1) + 9 * F(k-1)\n    // F(k) - 9 * F(k-1) = 10^(k-1)\n    //\n\
    \    // Let's do some simplifications to make this more computationally efficient.\n\
    \    //\n    // F(k) - 9 * F(k-1) = 10^(k-1)\n    // (10^(k-1) - 9 * F(k-1)) /\
    \ 9 = F(k-1)\n    // F(k-1) = (10^(k-1) - 9 * F(k-1)) / 9\n    // F(k-1) = (10^(k-1)\
    \ - 9 * F(k-1)) / 9\n    // F(k-1) = (10^(k-1) - 9 * (10^(k-2) - 9 * F(k-2)))\
    \ / 9\n    // F(k-1) = (10^(k-1) - 10^(k-2) + 9 * F(k-2)) / 9\n    //\n    //\
    \ Let's do some more simplifications...\n    //\n    // F(k-1) = (10^(k-1) - 10^(k-2)\
    \ + 9 * F(k-2)) / 9\n    // F(k-1) = (10^(k-1) - 10^(k-2) + 9 * (10^(k-3) - 9\
    \ * F(k-3))) / 9\n    // F(k-1) = (10^(k-1) - 10^(k-2) + 10^\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(starts_one_ends(n: 1) == 1)\nassert(starts_one_ends(n:\
    \ 2) == 18)\nassert(starts_one_ends(n: 3) == 180)\nassert(starts_one_ends(n: 4)\
    \ == 1800)\nassert(starts_one_ends(n: 5) == 18000)"
  status: SyntaxError
  stderr: '/tmp/tmpdzhuhk_e.swift:28:1: error: missing return in global function expected
    to return ''Int''

    }

    ^

    '
  stdout: ''
  timestamp: 1660012232
- exit_code: 1
  program: "\n/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfunc starts_one_ends(n: Int)\
    \ -> Int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n      \
    \  return 4\n    }\n    let base = 9 * pow(10, (n - 2))\n    return base * 2 +\
    \ starts_one_ends(n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(starts_one_ends(n:\
    \ 1) == 1)\nassert(starts_one_ends(n: 2) == 18)\nassert(starts_one_ends(n: 3)\
    \ == 180)\nassert(starts_one_ends(n: 4) == 1800)\nassert(starts_one_ends(n: 5)\
    \ == 18000)"
  status: SyntaxError
  stderr: "/tmp/tmp3ou6zhxv.swift:11:20: error: cannot find 'pow' in scope\n    let\
    \ base = 9 * pow(10, (n - 2))\n                   ^~~\n/tmp/tmp3ou6zhxv.swift:12:39:\
    \ error: missing argument label 'n:' in call\n    return base * 2 + starts_one_ends(n\
    \ - 1)\n                                      ^\n                            \
    \          n: \n"
  stdout: ''
  timestamp: 1660012232
- exit_code: -4
  program: "\n/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfunc starts_one_ends(n: Int)\
    \ -> Int {\n    // After a lot of thought, the only way I can think of to find\
    \ the\n    // number of starts or ends 1s in the current level is to check how\n\
    \    // many starts or ends 1s in the previous level.\n    if n == 1 {\n     \
    \   return 2\n    }\n    var prev_level_starts = 1\n    var prev_level_ends =\
    \ 1\n    var curr_level_starts = 2\n    var curr_level_ends = 2\n    for _ in\
    \ 2..<n {\n        let temp = curr_level_starts\n        curr_level_starts = curr_level_starts\
    \ + prev_level_starts\n        prev_level_starts = temp\n        curr_level_ends\
    \ = curr_level_ends + prev_level_ends\n        prev_level_ends = curr_level_ends\n\
    \    }\n    return curr_level_starts + curr_level_ends\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(starts_one_ends(n: 1) == 1)\nassert(starts_one_ends(n: 2)\
    \ == 18)\nassert(starts_one_ends(n: 3) == 180)\nassert(starts_one_ends(n: 4) ==\
    \ 1800)\nassert(starts_one_ends(n: 5) == 18000)"
  status: Exception
  stderr: 'tmp4wd26wng/tmp4wd26wng.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad96027dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad95ff74b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad95ff74988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad95ff737b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4wd26wng                        0x000055be0726f335 <unavailable> + 4917

    5    libc.so.6                          0x00002ad960469460 __libc_start_main +
    245

    6    tmp4wd26wng                        0x000055be0726efe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660012233
- exit_code: 1
  program: "\n/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfunc starts_one_ends(n: Int)\
    \ -> Int {\n  let digits = n - 1\n  return (1...digits).reduce(0) { count, d in\n\
    \    count + _starts_one_ends(n: d)\n  }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(starts_one_ends(n: 1) == 1)\nassert(starts_one_ends(n: 2) == 18)\nassert(starts_one_ends(n:\
    \ 3) == 180)\nassert(starts_one_ends(n: 4) == 1800)\nassert(starts_one_ends(n:\
    \ 5) == 18000)"
  status: SyntaxError
  stderr: "/tmp/tmp86vo2urr.swift:7:13: error: cannot find '_starts_one_ends' in scope\n\
    \    count + _starts_one_ends(n: d)\n            ^~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660012232
- exit_code: 1
  program: "\n/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfunc starts_one_ends(n: Int)\
    \ -> Int {\n    if n == 1 {\n        return 2\n    } else if n == 2 {\n      \
    \  return 4\n    } else {\n        let exp = pow(10, n - 1)\n        return Int(9\
    \ * exp + exp / 9 * 8)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(starts_one_ends(n:\
    \ 1) == 1)\nassert(starts_one_ends(n: 2) == 18)\nassert(starts_one_ends(n: 3)\
    \ == 180)\nassert(starts_one_ends(n: 4) == 1800)\nassert(starts_one_ends(n: 5)\
    \ == 18000)"
  status: SyntaxError
  stderr: "/tmp/tmpui4y4alq.swift:10:19: error: cannot find 'pow' in scope\n     \
    \   let exp = pow(10, n - 1)\n                  ^~~\n"
  stdout: ''
  timestamp: 1660012233
- exit_code: 1
  program: "\n/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfunc starts_one_ends(n: Int)\
    \ -> Int {\n  return solve(n, 0, false, false)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(starts_one_ends(n: 1) == 1)\nassert(starts_one_ends(n: 2) == 18)\n\
    assert(starts_one_ends(n: 3) == 180)\nassert(starts_one_ends(n: 4) == 1800)\n\
    assert(starts_one_ends(n: 5) == 18000)"
  status: SyntaxError
  stderr: "/tmp/tmpfl69p1lz.swift:5:10: error: cannot find 'solve' in scope\n  return\
    \ solve(n, 0, false, false)\n         ^~~~~\n"
  stdout: ''
  timestamp: 1660012232
- exit_code: 1
  program: "\n/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfunc starts_one_ends(n: Int)\
    \ -> Int {\n    if n <= 1 {\n        return n\n    }\n    let digits = 10i.pow(n\
    \ - 1)\n    let d = 9 * digits\n    return 2 * d + starts_one_ends(n - 1)\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(starts_one_ends(n: 1) == 1)\nassert(starts_one_ends(n:\
    \ 2) == 18)\nassert(starts_one_ends(n: 3) == 180)\nassert(starts_one_ends(n: 4)\
    \ == 1800)\nassert(starts_one_ends(n: 5) == 18000)"
  status: SyntaxError
  stderr: "/tmp/tmp2swd810c.swift:8:20: error: 'i' is not a valid digit in integer\
    \ literal\n    let digits = 10i.pow(n - 1)\n                   ^\n/tmp/tmp2swd810c.swift:8:21:\
    \ error: consecutive statements on a line must be separated by ';'\n    let digits\
    \ = 10i.pow(n - 1)\n                    ^\n                    ;\n/tmp/tmp2swd810c.swift:8:22:\
    \ error: reference to member 'pow' cannot be resolved without a contextual type\n\
    \    let digits = 10i.pow(n - 1)\n                    ~^~~\n/tmp/tmp2swd810c.swift:10:36:\
    \ error: missing argument label 'n:' in call\n    return 2 * d + starts_one_ends(n\
    \ - 1)\n                                   ^\n                               \
    \    n: \n"
  stdout: ''
  timestamp: 1660012232
- exit_code: 1
  program: "\n/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfunc starts_one_ends(n: Int)\
    \ -> Int {\n    var count = 0\n    for i in 1..<n {\n        count += count_x(x:\
    \ i, y: 0)\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(starts_one_ends(n: 1) == 1)\nassert(starts_one_ends(n: 2) == 18)\nassert(starts_one_ends(n:\
    \ 3) == 180)\nassert(starts_one_ends(n: 4) == 1800)\nassert(starts_one_ends(n:\
    \ 5) == 18000)"
  status: SyntaxError
  stderr: "/tmp/tmprn7z3w4x.swift:7:18: error: cannot find 'count_x' in scope\n  \
    \      count += count_x(x: i, y: 0)\n                 ^~~~~~~\n"
  stdout: ''
  timestamp: 1660012232
- exit_code: -4
  program: "\n/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfunc starts_one_ends(n: Int)\
    \ -> Int {\n    // Write your solution here...\n    return 0\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(starts_one_ends(n: 1) == 1)\nassert(starts_one_ends(n:\
    \ 2) == 18)\nassert(starts_one_ends(n: 3) == 180)\nassert(starts_one_ends(n: 4)\
    \ == 1800)\nassert(starts_one_ends(n: 5) == 18000)"
  status: Exception
  stderr: 'tmpz5iqtx_q/tmpz5iqtx_q.swift:22: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acc9bde6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acc9baddb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acc9badd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acc9badc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz5iqtx_q                        0x00005599ee1851b5 <unavailable> + 4533

    5    libc.so.6                          0x00002acc9bfd2460 __libc_start_main +
    245

    6    tmpz5iqtx_q                        0x00005599ee184e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660012233
- exit_code: 1
  program: "\n/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfunc starts_one_ends(n: Int)\
    \ -> Int {\n    if n == 1 {\n        return 1\n    } else {\n        return starts_one_ends(n\
    \ - 1) + starts_one_ends(n - 2)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(starts_one_ends(n: 1) == 1)\nassert(starts_one_ends(n: 2) == 18)\nassert(starts_one_ends(n:\
    \ 3) == 180)\nassert(starts_one_ends(n: 4) == 1800)\nassert(starts_one_ends(n:\
    \ 5) == 18000)"
  status: SyntaxError
  stderr: "/tmp/tmpnvf7bk6w.swift:8:32: error: missing argument label 'n:' in call\n\
    \        return starts_one_ends(n - 1) + starts_one_ends(n - 2)\n            \
    \                   ^\n                               n: \n/tmp/tmpnvf7bk6w.swift:8:57:\
    \ error: missing argument label 'n:' in call\n        return starts_one_ends(n\
    \ - 1) + starts_one_ends(n - 2)\n                                            \
    \            ^\n                                                        n: \n"
  stdout: ''
  timestamp: 1660012233
- exit_code: -4
  program: "\n/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfunc starts_one_ends(n: Int)\
    \ -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(starts_one_ends(n:\
    \ 1) == 1)\nassert(starts_one_ends(n: 2) == 18)\nassert(starts_one_ends(n: 3)\
    \ == 180)\nassert(starts_one_ends(n: 4) == 1800)\nassert(starts_one_ends(n: 5)\
    \ == 18000)"
  status: Exception
  stderr: 'tmpmhqv_km4/tmpmhqv_km4.swift:21: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba812dd5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba812accb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba812acc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba812acb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmhqv_km4                        0x0000561086d891b5 <unavailable> + 4533

    5    libc.so.6                          0x00002ba812fc1460 __libc_start_main +
    245

    6    tmpmhqv_km4                        0x0000561086d88e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660012130
- exit_code: 1
  program: "\n/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfunc starts_one_ends(n: Int)\
    \ -> Int {\n    if n == 1 {\n        return 1\n    } else {\n        return (1...9).map({\
    \ digits($0) })\n            .reduce(0, combine: +) * Int(pow(10, Double(n - 1)))\
    \ + starts_one_ends(n - 1)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(starts_one_ends(n:\
    \ 1) == 1)\nassert(starts_one_ends(n: 2) == 18)\nassert(starts_one_ends(n: 3)\
    \ == 180)\nassert(starts_one_ends(n: 4) == 1800)\nassert(starts_one_ends(n: 5)\
    \ == 18000)"
  status: SyntaxError
  stderr: "/tmp/tmp3p0e5s4n.swift:8:30: error: cannot find 'digits' in scope\n   \
    \     return (1...9).map({ digits($0) })\n                             ^~~~~~\n\
    /tmp/tmp3p0e5s4n.swift:9:42: error: cannot find 'pow' in scope\n            .reduce(0,\
    \ combine: +) * Int(pow(10, Double(n - 1))) + starts_one_ends(n - 1)\n       \
    \                                  ^~~\n"
  stdout: ''
  timestamp: 1660012233
- exit_code: 1
  program: "\n/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfunc starts_one_ends(n: Int)\
    \ -> Int {\n    // n = 1: 1\n    // n = 2: 11, 91\n    // n = 3: 111, 911, 191,\
    \ 991\n    // n = 4: 1111, 9111, 1191, 9911, 1911, 9901, 1199, 9919, 9191, 9901,\
    \ 9999\n    // The pattern is immediately obvious:\n    // start_one = 9(10^(n-1))\n\
    \    // end_one = 9(10^(n-1))\n    return 9 * pow(10, n-1) * 2\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(starts_one_ends(n: 1) == 1)\nassert(starts_one_ends(n:\
    \ 2) == 18)\nassert(starts_one_ends(n: 3) == 180)\nassert(starts_one_ends(n: 4)\
    \ == 1800)\nassert(starts_one_ends(n: 5) == 18000)"
  status: SyntaxError
  stderr: "/tmp/tmpnk2gyfhk.swift:12:16: error: cannot find 'pow' in scope\n    return\
    \ 9 * pow(10, n-1) * 2\n               ^~~\n"
  stdout: ''
  timestamp: 1660012233
- exit_code: -4
  program: "\n/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfunc starts_one_ends(n: Int)\
    \ -> Int {\n    var res = 0\n    var start_from = 0\n    var end_to = 0\n    if\
    \ n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 10\n    }\n\
    \    for _ in 0..<n-1 {\n        start_from = start_from * 10 + 1\n        end_to\
    \ = end_to * 10 + 9\n    }\n    var tmp = 0\n    for i in start_from...end_to\
    \ {\n        tmp = i\n        while tmp > 0 {\n            if tmp % 10 == 1 {\n\
    \                res += 1\n            }\n            tmp /= 10\n        }\n \
    \   }\n    return res\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(starts_one_ends(n:\
    \ 1) == 1)\nassert(starts_one_ends(n: 2) == 18)\nassert(starts_one_ends(n: 3)\
    \ == 180)\nassert(starts_one_ends(n: 4) == 1800)\nassert(starts_one_ends(n: 5)\
    \ == 18000)"
  status: Exception
  stderr: 'tmpjy68986q/tmpjy68986q.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4a3faa7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4a3f79eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4a3f79e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4a3f79d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjy68986q                        0x000055ee7af604a0 <unavailable> + 5280

    5    libc.so.6                          0x00002b4a3fc93460 __libc_start_main +
    245

    6    tmpjy68986q                        0x000055ee7af600d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660012233
- exit_code: 1
  program: "\n/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfunc starts_one_ends(n: Int)\
    \ -> Int {\n    // The problem could be transformed to: how many n-digit positive\
    \ integers\n    // are there that end with 1?\n    var count = 0;\n    var a:\
    \ Int = 1;\n    for _ in 1...n-1 {\n        a *= 10;\n    }\n    for var i = a;\
    \ i < a*10; i++ {\n        let last = i % 10;\n        if last == 1 {\n      \
    \      count++;\n        }\n    }\n    return count;\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(starts_one_ends(n: 1) == 1)\nassert(starts_one_ends(n: 2)\
    \ == 18)\nassert(starts_one_ends(n: 3) == 180)\nassert(starts_one_ends(n: 4) ==\
    \ 1800)\nassert(starts_one_ends(n: 5) == 18000)"
  status: SyntaxError
  stderr: "/tmp/tmp65sl9hhd.swift:12:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for var i = a; i < a*10; i++ {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660012233
- exit_code: 1
  program: "\n/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfunc starts_one_ends(n: Int)\
    \ -> Int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n      \
    \  return 3\n    }\n    return starts_one_ends(n - 1) + starts_one_ends(n - 2)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(starts_one_ends(n: 1) == 1)\nassert(starts_one_ends(n:\
    \ 2) == 18)\nassert(starts_one_ends(n: 3) == 180)\nassert(starts_one_ends(n: 4)\
    \ == 1800)\nassert(starts_one_ends(n: 5) == 18000)"
  status: SyntaxError
  stderr: "/tmp/tmpch5qjzzp.swift:11:28: error: missing argument label 'n:' in call\n\
    \    return starts_one_ends(n - 1) + starts_one_ends(n - 2)\n                \
    \           ^\n                           n: \n/tmp/tmpch5qjzzp.swift:11:53: error:\
    \ missing argument label 'n:' in call\n    return starts_one_ends(n - 1) + starts_one_ends(n\
    \ - 2)\n                                                    ^\n              \
    \                                      n: \n"
  stdout: ''
  timestamp: 1660012128
- exit_code: 1
  program: "\n/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfunc starts_one_ends(n: Int)\
    \ -> Int {\n    var table = [Int](count: n + 1, repeatedValue: 0)\n    table[1]\
    \ = 1\n    table[2] = 10\n    table[3] = 100\n    for var i = 4; i <= n; i++ {\n\
    \        table[i] = 10 * table[i - 1] + Int(pow(Double(10), Double(i - 2)))\n\
    \    }\n    return table[n]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(starts_one_ends(n:\
    \ 1) == 1)\nassert(starts_one_ends(n: 2) == 18)\nassert(starts_one_ends(n: 3)\
    \ == 180)\nassert(starts_one_ends(n: 4) == 1800)\nassert(starts_one_ends(n: 5)\
    \ == 18000)"
  status: SyntaxError
  stderr: "/tmp/tmpx5366l_r.swift:9:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for var i = 4; i <= n; i++ {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpx5366l_r.swift:5:17: error: no exact matches in call to initializer \n\
    \    var table = [Int](count: n + 1, repeatedValue: 0)\n                ^\n/tmp/tmpx5366l_r.swift:5:17:\
    \ note: candidate has partially matching parameter list (repeating: Int, count:\
    \ Int)\n    var table = [Int](count: n + 1, repeatedValue: 0)\n              \
    \  ^\n/tmp/tmpx5366l_r.swift:5:17: note: candidate has partially matching parameter\
    \ list (repeating: Int, count: Int)\n    var table = [Int](count: n + 1, repeatedValue:\
    \ 0)\n                ^\n"
  stdout: ''
  timestamp: 1660012233
- exit_code: 1
  program: "\n/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfunc starts_one_ends(n: Int)\
    \ -> Int {\n    let n_str = n.description\n    if n_str[n_str.startIndex] == \"\
    1\" {\n        return Int(pow(10, n - 1))\n    }\n    return Int(pow(10, n - 2))\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(starts_one_ends(n: 1) == 1)\nassert(starts_one_ends(n:\
    \ 2) == 18)\nassert(starts_one_ends(n: 3) == 180)\nassert(starts_one_ends(n: 4)\
    \ == 1800)\nassert(starts_one_ends(n: 5) == 18000)"
  status: SyntaxError
  stderr: "/tmp/tmpwgj9_egl.swift:7:20: error: cannot find 'pow' in scope\n      \
    \  return Int(pow(10, n - 1))\n                   ^~~\n/tmp/tmpwgj9_egl.swift:9:16:\
    \ error: cannot find 'pow' in scope\n    return Int(pow(10, n - 2))\n        \
    \       ^~~\n"
  stdout: ''
  timestamp: 1660012233
- exit_code: -4
  program: "\n/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfunc starts_one_ends(n: Int)\
    \ -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(starts_one_ends(n:\
    \ 1) == 1)\nassert(starts_one_ends(n: 2) == 18)\nassert(starts_one_ends(n: 3)\
    \ == 180)\nassert(starts_one_ends(n: 4) == 1800)\nassert(starts_one_ends(n: 5)\
    \ == 18000)"
  status: Exception
  stderr: 'tmpmhqv_km4/tmpmhqv_km4.swift:21: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba812dd5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba812accb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba812acc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba812acb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmhqv_km4                        0x0000561086d891b5 <unavailable> + 4533

    5    libc.so.6                          0x00002ba812fc1460 __libc_start_main +
    245

    6    tmpmhqv_km4                        0x0000561086d88e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660012130
- exit_code: 1
  program: "\n/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfunc starts_one_ends(n: Int)\
    \ -> Int {\n    assert(n > 0, \"n must be positive\")\n    var dp = [Int](count:\
    \ n + 1, repeatedValue: 0)\n    dp[1] = 2\n    dp[2] = 3\n    for i in 3...n {\n\
    \        dp[i] = dp[i - 1] + dp[i - 2]\n    }\n    return dp[n]\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(starts_one_ends(n: 1) == 1)\nassert(starts_one_ends(n:\
    \ 2) == 18)\nassert(starts_one_ends(n: 3) == 180)\nassert(starts_one_ends(n: 4)\
    \ == 1800)\nassert(starts_one_ends(n: 5) == 18000)"
  status: SyntaxError
  stderr: "/tmp/tmpe9bsalnh.swift:6:14: error: no exact matches in call to initializer\
    \ \n    var dp = [Int](count: n + 1, repeatedValue: 0)\n             ^\n/tmp/tmpe9bsalnh.swift:6:14:\
    \ note: candidate has partially matching parameter list (repeating: Int, count:\
    \ Int)\n    var dp = [Int](count: n + 1, repeatedValue: 0)\n             ^\n/tmp/tmpe9bsalnh.swift:6:14:\
    \ note: candidate has partially matching parameter list (repeating: Int, count:\
    \ Int)\n    var dp = [Int](count: n + 1, repeatedValue: 0)\n             ^\n"
  stdout: ''
  timestamp: 1660012233
- exit_code: 1
  program: "\n/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfunc starts_one_ends(n: Int)\
    \ -> Int {\n  // Fill in your answer here\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(starts_one_ends(n: 1) == 1)\nassert(starts_one_ends(n: 2) == 18)\n\
    assert(starts_one_ends(n: 3) == 180)\nassert(starts_one_ends(n: 4) == 1800)\n\
    assert(starts_one_ends(n: 5) == 18000)"
  status: SyntaxError
  stderr: '/tmp/tmp4yt1azj8.swift:6:1: error: missing return in global function expected
    to return ''Int''

    }

    ^

    '
  stdout: ''
  timestamp: 1660012233
- exit_code: -4
  program: "\n/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfunc starts_one_ends(n: Int)\
    \ -> Int {\n  var index = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n  for _ in 0..<n-1 {\n\
    \    var temp = [Int](repeating: 0, count: 10)\n    for i in 0..<10 {\n      if\
    \ i != 0 {\n        temp[i] += index[i]\n      }\n      if i != 9 {\n        temp[i]\
    \ += index[i+1]\n      }\n    }\n    index = temp\n  }\n  return index[1] + index[0]\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(starts_one_ends(n: 1) == 1)\nassert(starts_one_ends(n:\
    \ 2) == 18)\nassert(starts_one_ends(n: 3) == 180)\nassert(starts_one_ends(n: 4)\
    \ == 1800)\nassert(starts_one_ends(n: 5) == 18000)"
  status: Exception
  stderr: 'tmpquyucul5/tmpquyucul5.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba6bda1cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba6bd713b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba6bd713988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba6bd7127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpquyucul5                        0x00005558e1b04555 <unavailable> + 5461

    5    libc.so.6                          0x00002ba6bdc08460 __libc_start_main +
    245

    6    tmpquyucul5                        0x00005558e1b04209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660012233
- exit_code: 1
  program: "\n/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfunc starts_one_ends(n: Int)\
    \ -> Int {\n  // Solve this problem recursively.\n  precondition(n > 0)\n  return\
    \ starts_one_ends_recursive(n: n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(starts_one_ends(n:\
    \ 1) == 1)\nassert(starts_one_ends(n: 2) == 18)\nassert(starts_one_ends(n: 3)\
    \ == 180)\nassert(starts_one_ends(n: 4) == 1800)\nassert(starts_one_ends(n: 5)\
    \ == 18000)"
  status: SyntaxError
  stderr: "/tmp/tmp4xx7otvy.swift:7:10: error: cannot find 'starts_one_ends_recursive'\
    \ in scope\n  return starts_one_ends_recursive(n: n)\n         ^~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660012233
- exit_code: 1
  program: "\n/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfunc starts_one_ends(n: Int)\
    \ -> Int {\n    var total = 0\n\n    for i in 0..<n {\n        total += base_ten_to_power(n:\
    \ i)\n    }\n\n    return 2 * total\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(starts_one_ends(n: 1) == 1)\nassert(starts_one_ends(n: 2) == 18)\nassert(starts_one_ends(n:\
    \ 3) == 180)\nassert(starts_one_ends(n: 4) == 1800)\nassert(starts_one_ends(n:\
    \ 5) == 18000)"
  status: SyntaxError
  stderr: "/tmp/tmpti8ygkmk.swift:8:18: error: cannot find 'base_ten_to_power' in\
    \ scope\n        total += base_ten_to_power(n: i)\n                 ^~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660012233
- exit_code: -4
  program: "\n/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfunc starts_one_ends(n: Int)\
    \ -> Int {\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n      \
    \  return 11\n    }\n    var ret: [Int] = Array(repeating: 0, count: n + 1)\n\
    \    ret[1] = 1\n    ret[2] = 11\n    for i in 3...n {\n        ret[i] = 9\n \
    \       for j in 1..<i {\n            ret[i] += ret[j] * 9\n        }\n    }\n\
    \    return ret[n]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(starts_one_ends(n:\
    \ 1) == 1)\nassert(starts_one_ends(n: 2) == 18)\nassert(starts_one_ends(n: 3)\
    \ == 180)\nassert(starts_one_ends(n: 4) == 1800)\nassert(starts_one_ends(n: 5)\
    \ == 18000)"
  status: Exception
  stderr: 'tmpinwjp3ey/tmpinwjp3ey.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b72b92cac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b72b8fc1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b72b8fc1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b72b8fc07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpinwjp3ey                        0x000056362d9215c0 <unavailable> + 5568

    5    libc.so.6                          0x00002b72b94b6460 __libc_start_main +
    245

    6    tmpinwjp3ey                        0x000056362d9211f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1660012233
- exit_code: -4
  program: "\n/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfunc starts_one_ends(n: Int)\
    \ -> Int {\n    if n == 1 {\n        return 2\n    } else if n == 2 {\n      \
    \  return 11\n    } else {\n        var ends_with = 1\n        var ends_with_2\
    \ = 9\n        var ends_with_3 = 9\n        for _ in 2..<n {\n            ends_with_3\
    \ = ends_with_2\n            ends_with_2 = ends_with\n            ends_with =\
    \ 10 * ends_with_2 + ends_with_3\n        }\n        return ends_with + ends_with_2\
    \ + ends_with_3\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(starts_one_ends(n:\
    \ 1) == 1)\nassert(starts_one_ends(n: 2) == 18)\nassert(starts_one_ends(n: 3)\
    \ == 180)\nassert(starts_one_ends(n: 4) == 1800)\nassert(starts_one_ends(n: 5)\
    \ == 18000)"
  status: Exception
  stderr: 'tmpnw7n2gfi/tmpnw7n2gfi.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b718bdecc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b718bae3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b718bae3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b718bae27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnw7n2gfi                        0x00005606640e4335 <unavailable> + 4917

    5    libc.so.6                          0x00002b718bfd8460 __libc_start_main +
    245

    6    tmpnw7n2gfi                        0x00005606640e3fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660012233
- exit_code: -4
  program: "\n/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfunc starts_one_ends(n: Int)\
    \ -> Int {\n    // See my previous solution.\n    var count = 1\n    for _ in\
    \ 1..<n {\n        count *= 2\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(starts_one_ends(n: 1) == 1)\nassert(starts_one_ends(n: 2)\
    \ == 18)\nassert(starts_one_ends(n: 3) == 180)\nassert(starts_one_ends(n: 4) ==\
    \ 1800)\nassert(starts_one_ends(n: 5) == 18000)"
  status: Exception
  stderr: 'tmp00bkdvva/tmp00bkdvva.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac5613fac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac5610f1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac5610f1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac5610f07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp00bkdvva                        0x00005624096753b0 <unavailable> + 5040

    5    libc.so.6                          0x00002ac5615e6460 __libc_start_main +
    245

    6    tmp00bkdvva                        0x0000562409674fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660012233
- exit_code: 1
  program: "\n/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfunc starts_one_ends(n: Int)\
    \ -> Int {\n  if n == 1 {\n    return 1\n  }\n  var result = 9 * pow(10, n - 1)\n\
    \  result += starts_one_ends(n - 1)\n  return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(starts_one_ends(n: 1) == 1)\nassert(starts_one_ends(n: 2)\
    \ == 18)\nassert(starts_one_ends(n: 3) == 180)\nassert(starts_one_ends(n: 4) ==\
    \ 1800)\nassert(starts_one_ends(n: 5) == 18000)"
  status: SyntaxError
  stderr: "/tmp/tmptuye_qur.swift:8:20: error: cannot find 'pow' in scope\n  var result\
    \ = 9 * pow(10, n - 1)\n                   ^~~\n/tmp/tmptuye_qur.swift:9:29: error:\
    \ missing argument label 'n:' in call\n  result += starts_one_ends(n - 1)\n  \
    \                          ^\n                            n: \n"
  stdout: ''
  timestamp: 1660012233
- exit_code: 1
  program: "\n/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfunc starts_one_ends(n: Int)\
    \ -> Int {\n  var n = n\n  var result = 0\n  var power = Int(pow(10.0, Double(n\
    \ - 1)))\n  while n > 0 {\n    result += 9 * power\n    power /= 10\n    n -=\
    \ 1\n  }\n  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(starts_one_ends(n:\
    \ 1) == 1)\nassert(starts_one_ends(n: 2) == 18)\nassert(starts_one_ends(n: 3)\
    \ == 180)\nassert(starts_one_ends(n: 4) == 1800)\nassert(starts_one_ends(n: 5)\
    \ == 18000)"
  status: SyntaxError
  stderr: "/tmp/tmpnfuvq2s8.swift:7:19: error: cannot find 'pow' in scope\n  var power\
    \ = Int(pow(10.0, Double(n - 1)))\n                  ^~~\n"
  stdout: ''
  timestamp: 1660012233
- exit_code: 1
  program: "\n/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfunc starts_one_ends(n: Int)\
    \ -> Int {\n    // f(n) = 9 * 10^(n-1) - f(n-1) = 9 * 10^(n-1) - f(n-2)\n    var\
    \ f1 = 1\n    var f2 = 1\n    var f3 = 1\n    for _ in 1...n {\n        f3 = 9\
    \ * pow(10, f1-1) - f2\n        f1 = f2\n        f2 = f3\n    }\n    return f3\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(starts_one_ends(n: 1) == 1)\nassert(starts_one_ends(n:\
    \ 2) == 18)\nassert(starts_one_ends(n: 3) == 180)\nassert(starts_one_ends(n: 4)\
    \ == 1800)\nassert(starts_one_ends(n: 5) == 18000)"
  status: SyntaxError
  stderr: "/tmp/tmpglqd4w1m.swift:10:18: error: cannot find 'pow' in scope\n     \
    \   f3 = 9 * pow(10, f1-1) - f2\n                 ^~~\n"
  stdout: ''
  timestamp: 1660012233
- exit_code: -4
  program: "\n/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfunc starts_one_ends(n: Int)\
    \ -> Int {\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n      \
    \  return 11\n    }\n    var result = 0\n    var previous_start = 1\n    var previous_end\
    \ = 11\n    var current_start = 10\n    var current_end = 9\n    for i in 2...n\
    \ {\n        result = previous_start + previous_end + current_start + current_end\n\
    \        previous_start = current_start\n        previous_end = current_end\n\
    \        current_start = previous_start * 9\n        current_end = previous_end\
    \ * 10\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(starts_one_ends(n:\
    \ 1) == 1)\nassert(starts_one_ends(n: 2) == 18)\nassert(starts_one_ends(n: 3)\
    \ == 180)\nassert(starts_one_ends(n: 4) == 1800)\nassert(starts_one_ends(n: 5)\
    \ == 18000)"
  status: Exception
  stderr: 'tmpk7kkwur8/tmpk7kkwur8.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7c8835cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7c88053b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7c88053988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7c880527b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk7kkwur8                        0x000055fb8bcbe3b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b7c88548460 __libc_start_main +
    245

    6    tmpk7kkwur8                        0x000055fb8bcbdfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660012233
- exit_code: 1
  program: "\n/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfunc starts_one_ends(n: Int)\
    \ -> Int {\n    let min = 1 * Int(pow(10.0, Double(n - 1)))\n    let max = 9 *\
    \ Int(pow(10.0, Double(n - 1)))\n    return max - min + 1\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(starts_one_ends(n: 1) == 1)\nassert(starts_one_ends(n:\
    \ 2) == 18)\nassert(starts_one_ends(n: 3) == 180)\nassert(starts_one_ends(n: 4)\
    \ == 1800)\nassert(starts_one_ends(n: 5) == 18000)"
  status: SyntaxError
  stderr: "/tmp/tmp3n89k8we.swift:5:23: error: cannot find 'pow' in scope\n    let\
    \ min = 1 * Int(pow(10.0, Double(n - 1)))\n                      ^~~\n/tmp/tmp3n89k8we.swift:6:23:\
    \ error: cannot find 'pow' in scope\n    let max = 9 * Int(pow(10.0, Double(n\
    \ - 1)))\n                      ^~~\n/tmp/tmp3n89k8we.swift:7:16: error: cannot\
    \ convert value of type 'Duration' to expected argument type 'Int'\n    return\
    \ max - min + 1\n               ^\n"
  stdout: ''
  timestamp: 1660012233
- exit_code: 1
  program: "\n/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfunc starts_one_ends(n: Int)\
    \ -> Int {\n    if n == 1 {\n        return 1\n    } else {\n        let twos\
    \ = pow(2, n-1)\n        return twos + twos - 2\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(starts_one_ends(n: 1) == 1)\nassert(starts_one_ends(n: 2)\
    \ == 18)\nassert(starts_one_ends(n: 3) == 180)\nassert(starts_one_ends(n: 4) ==\
    \ 1800)\nassert(starts_one_ends(n: 5) == 18000)"
  status: SyntaxError
  stderr: "/tmp/tmp8q6r84m7.swift:8:20: error: cannot find 'pow' in scope\n      \
    \  let twos = pow(2, n-1)\n                   ^~~\n/tmp/tmp8q6r84m7.swift:9:21:\
    \ error: cannot convert value of type 'String' to expected argument type 'Int'\n\
    \        return twos + twos - 2\n                    ^\n"
  stdout: ''
  timestamp: 1660012233
- exit_code: 1
  program: "\n/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfunc starts_one_ends(n: Int)\
    \ -> Int {\n    if n == 1 {\n        return 2\n    } else if n == 2 {\n      \
    \  return 4\n    }\n    return starts_one_ends(n - 1) + starts_one_ends(n - 2)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(starts_one_ends(n: 1) == 1)\nassert(starts_one_ends(n:\
    \ 2) == 18)\nassert(starts_one_ends(n: 3) == 180)\nassert(starts_one_ends(n: 4)\
    \ == 1800)\nassert(starts_one_ends(n: 5) == 18000)"
  status: SyntaxError
  stderr: "/tmp/tmp309j_cii.swift:10:28: error: missing argument label 'n:' in call\n\
    \    return starts_one_ends(n - 1) + starts_one_ends(n - 2)\n                \
    \           ^\n                           n: \n/tmp/tmp309j_cii.swift:10:53: error:\
    \ missing argument label 'n:' in call\n    return starts_one_ends(n - 1) + starts_one_ends(n\
    \ - 2)\n                                                    ^\n              \
    \                                      n: \n"
  stdout: ''
  timestamp: 1660012232
- exit_code: -4
  program: "\n/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfunc starts_one_ends(n: Int)\
    \ -> Int {\n    // TODO: implement\n    return 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(starts_one_ends(n: 1) == 1)\nassert(starts_one_ends(n: 2)\
    \ == 18)\nassert(starts_one_ends(n: 3) == 180)\nassert(starts_one_ends(n: 4) ==\
    \ 1800)\nassert(starts_one_ends(n: 5) == 18000)"
  status: Exception
  stderr: 'tmpkrmbhzfv/tmpkrmbhzfv.swift:22: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b476e86ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b476e561b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b476e561988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b476e5607b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkrmbhzfv                        0x00005654775541b5 <unavailable> + 4533

    5    libc.so.6                          0x00002b476ea56460 __libc_start_main +
    245

    6    tmpkrmbhzfv                        0x0000565477553e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660012233
- exit_code: 1
  program: "\n/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfunc starts_one_ends(n: Int)\
    \ -> Int {\n  let digits = String(repeating: \"*\", count: n).split(separator:\
    \ \"\")\n  var result = 0\n  func recur(idx: Int) {\n    if idx == n {\n     \
    \ result += 1\n      return\n    }\n    if idx == 0 || idx == n - 1 {\n      for\
    \ d in 1...9 {\n        digits[idx] = String(d)\n        recur(idx: idx + 1)\n\
    \      }\n    } else {\n      for d in 0...9 {\n        digits[idx] = String(d)\n\
    \        recur(idx: idx + 1)\n      }\n    }\n  }\n  recur(idx: 0)\n  return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(starts_one_ends(n: 1) == 1)\nassert(starts_one_ends(n:\
    \ 2) == 18)\nassert(starts_one_ends(n: 3) == 180)\nassert(starts_one_ends(n: 4)\
    \ == 1800)\nassert(starts_one_ends(n: 5) == 18000)"
  status: SyntaxError
  stderr: "/tmp/tmpzxtgqr7h.swift:14:15: error: cannot assign through subscript: 'digits'\
    \ is a 'let' constant\n        digits[idx] = String(d)\n        ~~~~~~^\n/tmp/tmpzxtgqr7h.swift:5:3:\
    \ note: change 'let' to 'var' to make it mutable\n  let digits = String(repeating:\
    \ \"*\", count: n).split(separator: \"\")\n  ^~~\n  var\n/tmp/tmpzxtgqr7h.swift:14:23:\
    \ error: cannot assign value of type 'String' to subscript of type 'String.SubSequence'\
    \ (aka 'Substring')\n        digits[idx] = String(d)\n                      ^~~~~~~~~\n\
    /tmp/tmpzxtgqr7h.swift:19:15: error: cannot assign through subscript: 'digits'\
    \ is a 'let' constant\n        digits[idx] = String(d)\n        ~~~~~~^\n/tmp/tmpzxtgqr7h.swift:5:3:\
    \ note: change 'let' to 'var' to make it mutable\n  let digits = String(repeating:\
    \ \"*\", count: n).split(separator: \"\")\n  ^~~\n  var\n/tmp/tmpzxtgqr7h.swift:19:23:\
    \ error: cannot assign value of type 'String' to subscript of type 'String.SubSequence'\
    \ (aka 'Substring')\n        digits[idx] = String(d)\n                      ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660012233
- exit_code: 1
  program: "\n/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfunc starts_one_ends(n: Int)\
    \ -> Int {\n    var count = 0\n    if n <= 1 {\n        return 1\n    }\n    for\
    \ i in 1..<n {\n        if i == 1 {\n            count += 10\n        } else {\n\
    \            count += pow(10, i - 1)\n        }\n    }\n    return count + 1\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(starts_one_ends(n: 1) == 1)\nassert(starts_one_ends(n:\
    \ 2) == 18)\nassert(starts_one_ends(n: 3) == 180)\nassert(starts_one_ends(n: 4)\
    \ == 1800)\nassert(starts_one_ends(n: 5) == 18000)"
  status: SyntaxError
  stderr: "/tmp/tmpuy7yh6c9.swift:13:22: error: cannot find 'pow' in scope\n     \
    \       count += pow(10, i - 1)\n                     ^~~\n"
  stdout: ''
  timestamp: 1660012233
- exit_code: 1
  program: "\n/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfunc starts_one_ends(n: Int)\
    \ -> Int {\n    if n == 1 {\n        return 1\n    } else {\n        return 10\
    \ - 2 + starts_one_ends(n - 1)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(starts_one_ends(n: 1) == 1)\nassert(starts_one_ends(n: 2) == 18)\nassert(starts_one_ends(n:\
    \ 3) == 180)\nassert(starts_one_ends(n: 4) == 1800)\nassert(starts_one_ends(n:\
    \ 5) == 18000)"
  status: SyntaxError
  stderr: "/tmp/tmp2rvh_lyt.swift:8:41: error: missing argument label 'n:' in call\n\
    \        return 10 - 2 + starts_one_ends(n - 1)\n                            \
    \            ^\n                                        n: \n"
  stdout: ''
  timestamp: 1660012233
- exit_code: 1
  program: "\n/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfunc starts_one_ends(n: Int)\
    \ -> Int {\n  precondition(n > 0)\n  var cnt = 0\n  for i in 1...n {\n    let\
    \ i_digits = digits(i)\n    var prefix_one = false\n    var suffix_one = false\n\
    \    for d in i_digits {\n      if d == 1 {\n        suffix_one = true\n     \
    \ } else {\n        suffix_one = false\n      }\n      if prefix_one || suffix_one\
    \ {\n        cnt += 1\n      }\n      prefix_one = suffix_one\n    }\n  }\n  return\
    \ cnt\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(starts_one_ends(n: 1) ==\
    \ 1)\nassert(starts_one_ends(n: 2) == 18)\nassert(starts_one_ends(n: 3) == 180)\n\
    assert(starts_one_ends(n: 4) == 1800)\nassert(starts_one_ends(n: 5) == 18000)"
  status: SyntaxError
  stderr: "/tmp/tmp2hvlp9b9.swift:8:20: error: cannot find 'digits' in scope\n   \
    \ let i_digits = digits(i)\n                   ^~~~~~\n"
  stdout: ''
  timestamp: 1660012233
- exit_code: -4
  program: "\n/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfunc starts_one_ends(n: Int)\
    \ -> Int {\n    guard n > 1 else { return n }\n    var dp = Array(repeating: 0,\
    \ count: n + 1)\n    dp[1] = 1\n    for i in 2...n {\n        dp[i] = dp[i - 1]\
    \ * 10 - dp[i - 2]\n    }\n    return dp[n]\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(starts_one_ends(n: 1) == 1)\nassert(starts_one_ends(n: 2) == 18)\n\
    assert(starts_one_ends(n: 3) == 180)\nassert(starts_one_ends(n: 4) == 1800)\n\
    assert(starts_one_ends(n: 5) == 18000)"
  status: Exception
  stderr: 'tmpn7pusiwa/tmpn7pusiwa.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b821ba4cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b821b743b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b821b743988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b821b7427b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn7pusiwa                        0x000055ca2bf864d0 <unavailable> + 5328

    5    libc.so.6                          0x00002b821bc38460 __libc_start_main +
    245

    6    tmpn7pusiwa                        0x000055ca2bf86109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012233
- exit_code: 1
  program: "\n/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfunc starts_one_ends(n: Int)\
    \ -> Int {\n  return (1...9).reduce(0) { sum, d in\n    let s = String(d)\n  \
    \  let ln = n - 1\n    let reg = \"^\\(s)\\\\d\\(ln)$|^\\\\d\\(ln)\\(s)$\"\n \
    \   var matcher = Regexp(reg)\n    let matched = (1...9).reduce(0) { s, i in\n\
    \      let m = matcher.match(\"\\(i)\")\n      return m ? s + 1 : s\n    }\n \
    \   return sum + matched\n  }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(starts_one_ends(n:\
    \ 1) == 1)\nassert(starts_one_ends(n: 2) == 18)\nassert(starts_one_ends(n: 3)\
    \ == 180)\nassert(starts_one_ends(n: 4) == 1800)\nassert(starts_one_ends(n: 5)\
    \ == 18000)"
  status: SyntaxError
  stderr: "/tmp/tmpbp_6bzh0.swift:9:19: error: cannot find 'Regexp' in scope\n   \
    \ var matcher = Regexp(reg)\n                  ^~~~~~\n"
  stdout: ''
  timestamp: 1660012233
- exit_code: 1
  program: "\n/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfunc starts_one_ends(n: Int)\
    \ -> Int {\n    if n == 1 {\n        return 2\n    } else if n == 2 {\n      \
    \  return 4\n    }\n    return starts_one_ends(n - 1) + starts_one_ends(n - 2)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(starts_one_ends(n: 1) == 1)\nassert(starts_one_ends(n:\
    \ 2) == 18)\nassert(starts_one_ends(n: 3) == 180)\nassert(starts_one_ends(n: 4)\
    \ == 1800)\nassert(starts_one_ends(n: 5) == 18000)"
  status: SyntaxError
  stderr: "/tmp/tmp309j_cii.swift:10:28: error: missing argument label 'n:' in call\n\
    \    return starts_one_ends(n - 1) + starts_one_ends(n - 2)\n                \
    \           ^\n                           n: \n/tmp/tmp309j_cii.swift:10:53: error:\
    \ missing argument label 'n:' in call\n    return starts_one_ends(n - 1) + starts_one_ends(n\
    \ - 2)\n                                                    ^\n              \
    \                                      n: \n"
  stdout: ''
  timestamp: 1660012232
- exit_code: 1
  program: "\n/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfunc starts_one_ends(n: Int)\
    \ -> Int {\n    // first digit: 1 \n    // last digit: 1\n    // n-2 in the middle\
    \ to have n digits\n    return 9 * pow(10, n-2)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(starts_one_ends(n: 1) == 1)\nassert(starts_one_ends(n: 2) == 18)\n\
    assert(starts_one_ends(n: 3) == 180)\nassert(starts_one_ends(n: 4) == 1800)\n\
    assert(starts_one_ends(n: 5) == 18000)"
  status: SyntaxError
  stderr: "/tmp/tmp5pyzchq6.swift:8:16: error: cannot find 'pow' in scope\n    return\
    \ 9 * pow(10, n-2)\n               ^~~\n"
  stdout: ''
  timestamp: 1660012233
- exit_code: -4
  program: "\n/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfunc starts_one_ends(n: Int)\
    \ -> Int {\n    var result = 0\n    var k = 1\n    var i = 1\n    while i <= n\
    \ {\n        result += 10 * k\n        k = 10 * k + 1\n        i += 1\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(starts_one_ends(n:\
    \ 1) == 1)\nassert(starts_one_ends(n: 2) == 18)\nassert(starts_one_ends(n: 3)\
    \ == 180)\nassert(starts_one_ends(n: 4) == 1800)\nassert(starts_one_ends(n: 5)\
    \ == 18000)"
  status: Exception
  stderr: 'tmpthe8vb1i/tmpthe8vb1i.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af6199b5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af6196acb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af6196ac988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af6196ab7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpthe8vb1i                        0x0000555b29d601b5 <unavailable> + 4533

    5    libc.so.6                          0x00002af619ba1460 __libc_start_main +
    245

    6    tmpthe8vb1i                        0x0000555b29d5fe69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660012233
- exit_code: -4
  program: "\n/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfunc starts_one_ends(n: Int)\
    \ -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(starts_one_ends(n:\
    \ 1) == 1)\nassert(starts_one_ends(n: 2) == 18)\nassert(starts_one_ends(n: 3)\
    \ == 180)\nassert(starts_one_ends(n: 4) == 1800)\nassert(starts_one_ends(n: 5)\
    \ == 18000)"
  status: Exception
  stderr: 'tmpmhqv_km4/tmpmhqv_km4.swift:21: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba812dd5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba812accb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba812acc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba812acb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmhqv_km4                        0x0000561086d891b5 <unavailable> + 4533

    5    libc.so.6                          0x00002ba812fc1460 __libc_start_main +
    245

    6    tmpmhqv_km4                        0x0000561086d88e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660012130
- exit_code: -4
  program: "\n/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfunc starts_one_ends(n: Int)\
    \ -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(starts_one_ends(n:\
    \ 1) == 1)\nassert(starts_one_ends(n: 2) == 18)\nassert(starts_one_ends(n: 3)\
    \ == 180)\nassert(starts_one_ends(n: 4) == 1800)\nassert(starts_one_ends(n: 5)\
    \ == 18000)"
  status: Exception
  stderr: 'tmpmhqv_km4/tmpmhqv_km4.swift:21: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba812dd5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba812accb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba812acc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba812acb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmhqv_km4                        0x0000561086d891b5 <unavailable> + 4533

    5    libc.so.6                          0x00002ba812fc1460 __libc_start_main +
    245

    6    tmpmhqv_km4                        0x0000561086d88e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660012130
- exit_code: -4
  program: "\n/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfunc starts_one_ends(n: Int)\
    \ -> Int {\n    // i: length of (n - 1) digit integers that start with 1\n   \
    \ // j: length of (n - 1) digit integers that end with 1\n    var i = 1, j = 1\n\
    \    for _ in 2...n {\n        let prev_i = i\n        i = j\n        j = prev_i\
    \ + j\n    }\n    return i + j\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(starts_one_ends(n:\
    \ 1) == 1)\nassert(starts_one_ends(n: 2) == 18)\nassert(starts_one_ends(n: 3)\
    \ == 180)\nassert(starts_one_ends(n: 4) == 1800)\nassert(starts_one_ends(n: 5)\
    \ == 18000)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b93682a1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9367f98561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b9367f98286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b9367f9813c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b9367f97bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpdhpe7y3j                        0x0000564a2050a649 <unavailable> + 5705

    6    tmpdhpe7y3j                        0x0000564a2050a2c8 <unavailable> + 4808

    7    libc.so.6                          0x00002b936848d460 __libc_start_main +
    245

    8    tmpdhpe7y3j                        0x0000564a20509fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660012233
- exit_code: 1
  program: "\n/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfunc starts_one_ends(n: Int)\
    \ -> Int {\n    assert(n > 0, \"n must be a positive integer\")\n    var count\
    \ = 0\n    for i in 1...n {\n        count += f(i)\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(starts_one_ends(n: 1) == 1)\nassert(starts_one_ends(n:\
    \ 2) == 18)\nassert(starts_one_ends(n: 3) == 180)\nassert(starts_one_ends(n: 4)\
    \ == 1800)\nassert(starts_one_ends(n: 5) == 18000)"
  status: SyntaxError
  stderr: "/tmp/tmpq7550t5r.swift:8:18: error: cannot find 'f' in scope\n        count\
    \ += f(i)\n                 ^\n"
  stdout: ''
  timestamp: 1660012233
- exit_code: 1
  program: "\n/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfunc starts_one_ends(n: Int)\
    \ -> Int {\n  return starts_one_ends_recur(n: n, first: true)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(starts_one_ends(n: 1) == 1)\nassert(starts_one_ends(n:\
    \ 2) == 18)\nassert(starts_one_ends(n: 3) == 180)\nassert(starts_one_ends(n: 4)\
    \ == 1800)\nassert(starts_one_ends(n: 5) == 18000)"
  status: SyntaxError
  stderr: "/tmp/tmpya_h76q1.swift:5:10: error: cannot find 'starts_one_ends_recur'\
    \ in scope\n  return starts_one_ends_recur(n: n, first: true)\n         ^~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660012233
- exit_code: 1
  program: "\n/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfunc starts_one_ends(n: Int)\
    \ -> Int {\n    if n == 1 {\n        return 1\n    }\n    let dp = Array(repeating:\
    \ Array(repeating: 0, count: 2), count: n)\n    dp[0][0] = 0\n    dp[0][1] = 1\n\
    \    for i in 1..<n {\n        for j in 0..<2 {\n            for k in 0..<10 {\n\
    \                if j == 0 && k == 0 {\n                    continue\n       \
    \         }\n                dp[i][j] += dp[i - 1][j]\n            }\n       \
    \ }\n    }\n    return dp[n - 1][0] + dp[n - 1][1]\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(starts_one_ends(n: 1) == 1)\nassert(starts_one_ends(n: 2)\
    \ == 18)\nassert(starts_one_ends(n: 3) == 180)\nassert(starts_one_ends(n: 4) ==\
    \ 1800)\nassert(starts_one_ends(n: 5) == 18000)"
  status: SyntaxError
  stderr: "/tmp/tmpz82skoxp.swift:9:10: error: cannot assign through subscript: 'dp'\
    \ is a 'let' constant\n    dp[0][0] = 0\n    ~~   ^\n/tmp/tmpz82skoxp.swift:8:5:\
    \ note: change 'let' to 'var' to make it mutable\n    let dp = Array(repeating:\
    \ Array(repeating: 0, count: 2), count: n)\n    ^~~\n    var\n/tmp/tmpz82skoxp.swift:10:10:\
    \ error: cannot assign through subscript: 'dp' is a 'let' constant\n    dp[0][1]\
    \ = 1\n    ~~   ^\n/tmp/tmpz82skoxp.swift:8:5: note: change 'let' to 'var' to\
    \ make it mutable\n    let dp = Array(repeating: Array(repeating: 0, count: 2),\
    \ count: n)\n    ^~~\n    var\n/tmp/tmpz82skoxp.swift:17:26: error: left side\
    \ of mutating operator isn't mutable: 'dp' is a 'let' constant\n             \
    \   dp[i][j] += dp[i - 1][j]\n                ~~       ^\n/tmp/tmpz82skoxp.swift:8:5:\
    \ note: change 'let' to 'var' to make it mutable\n    let dp = Array(repeating:\
    \ Array(repeating: 0, count: 2), count: n)\n    ^~~\n    var\n"
  stdout: ''
  timestamp: 1660012233
- exit_code: -4
  program: "\n/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfunc starts_one_ends(n: Int)\
    \ -> Int {\n    var prev: Int = 1\n    var curr: Int = 1\n    for _ in 2...n {\n\
    \        let oldcurr = curr\n        curr = 9 * curr\n        prev = oldcurr +\
    \ curr\n    }\n    return prev\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(starts_one_ends(n:\
    \ 1) == 1)\nassert(starts_one_ends(n: 2) == 18)\nassert(starts_one_ends(n: 3)\
    \ == 180)\nassert(starts_one_ends(n: 4) == 1800)\nassert(starts_one_ends(n: 5)\
    \ == 18000)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002acec5937c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acec562e561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002acec562e286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002acec562e13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002acec562dbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpmyv29d3e                        0x000055cd0c19b649 <unavailable> + 5705

    6    tmpmyv29d3e                        0x000055cd0c19b2c8 <unavailable> + 4808

    7    libc.so.6                          0x00002acec5b23460 __libc_start_main +
    245

    8    tmpmyv29d3e                        0x000055cd0c19afe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660012233
- exit_code: 1
  program: "\n/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfunc starts_one_ends(n: Int)\
    \ -> Int {\n    var count = 0\n    for i in 1..<n {\n        count += 9 * pow_10(i)\n\
    \    }\n    count += pow_10(n - 1)\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(starts_one_ends(n: 1) == 1)\nassert(starts_one_ends(n: 2)\
    \ == 18)\nassert(starts_one_ends(n: 3) == 180)\nassert(starts_one_ends(n: 4) ==\
    \ 1800)\nassert(starts_one_ends(n: 5) == 18000)"
  status: SyntaxError
  stderr: "/tmp/tmp965rmlt4.swift:7:22: error: cannot find 'pow_10' in scope\n   \
    \     count += 9 * pow_10(i)\n                     ^~~~~~\n/tmp/tmp965rmlt4.swift:9:14:\
    \ error: cannot find 'pow_10' in scope\n    count += pow_10(n - 1)\n         \
    \    ^~~~~~\n"
  stdout: ''
  timestamp: 1660012233
- exit_code: -4
  program: "\n/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfunc starts_one_ends(n: Int)\
    \ -> Int {\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(starts_one_ends(n:\
    \ 1) == 1)\nassert(starts_one_ends(n: 2) == 18)\nassert(starts_one_ends(n: 3)\
    \ == 180)\nassert(starts_one_ends(n: 4) == 1800)\nassert(starts_one_ends(n: 5)\
    \ == 18000)"
  status: Exception
  stderr: 'tmp5oqd5mnx/tmp5oqd5mnx.swift:21: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afa35926c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afa3561db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afa3561d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afa3561c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5oqd5mnx                        0x0000559a17ec91b5 <unavailable> + 4533

    5    libc.so.6                          0x00002afa35b12460 __libc_start_main +
    245

    6    tmp5oqd5mnx                        0x0000559a17ec8e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660012233
- exit_code: 1
  program: "\n/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfunc starts_one_ends(n: Int)\
    \ -> Int {\n    //return count_all_n_digits(n: n) - count_n_digits_no_end_one(n:\
    \ n)\n    return count_n_digits_ending_one(n: n)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(starts_one_ends(n: 1) == 1)\nassert(starts_one_ends(n: 2)\
    \ == 18)\nassert(starts_one_ends(n: 3) == 180)\nassert(starts_one_ends(n: 4) ==\
    \ 1800)\nassert(starts_one_ends(n: 5) == 18000)"
  status: SyntaxError
  stderr: "/tmp/tmpvj45akko.swift:6:12: error: cannot find 'count_n_digits_ending_one'\
    \ in scope\n    return count_n_digits_ending_one(n: n)\n           ^~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660012233
- exit_code: 1
  program: "\n/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfunc starts_one_ends(n: Int)\
    \ -> Int {\n    if n == 1 {\n        return 2\n    } else if n == 2 {\n      \
    \  return 2\n    }\n    return starts_one_ends(n-1) + starts_one_ends(n-2)\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(starts_one_ends(n: 1) == 1)\nassert(starts_one_ends(n:\
    \ 2) == 18)\nassert(starts_one_ends(n: 3) == 180)\nassert(starts_one_ends(n: 4)\
    \ == 1800)\nassert(starts_one_ends(n: 5) == 18000)"
  status: SyntaxError
  stderr: "/tmp/tmp78pss0sf.swift:10:28: error: missing argument label 'n:' in call\n\
    \    return starts_one_ends(n-1) + starts_one_ends(n-2)\n                    \
    \       ^\n                           n: \n/tmp/tmp78pss0sf.swift:10:51: error:\
    \ missing argument label 'n:' in call\n    return starts_one_ends(n-1) + starts_one_ends(n-2)\n\
    \                                                  ^\n                       \
    \                           n: \n"
  stdout: ''
  timestamp: 1660012233
- exit_code: 1
  program: "\n/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfunc starts_one_ends(n: Int)\
    \ -> Int {\n    precondition(n > 0)\n    if n == 1 {\n        return 2\n    }\n\
    \    if n == 2 {\n        return 4\n    }\n    let m = n - 1\n    var dp = [Int](count:\
    \ m, repeatedValue: 0)\n    var dp1 = [Int](count: m, repeatedValue: 0)\n    dp[0]\
    \ = 2\n    dp1[0] = 1\n    dp[1] = 3\n    dp1[1] = 2\n    for i in 2..<m {\n \
    \       dp[i] = dp[i - 1] + dp1[i - 1]\n        dp1[i] = dp[i - 1]\n    }\n  \
    \  return dp[m - 1] + dp1[m - 1]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(starts_one_ends(n:\
    \ 1) == 1)\nassert(starts_one_ends(n: 2) == 18)\nassert(starts_one_ends(n: 3)\
    \ == 180)\nassert(starts_one_ends(n: 4) == 1800)\nassert(starts_one_ends(n: 5)\
    \ == 18000)"
  status: SyntaxError
  stderr: "/tmp/tmpzggmnvs4.swift:13:14: error: no exact matches in call to initializer\
    \ \n    var dp = [Int](count: m, repeatedValue: 0)\n             ^\n/tmp/tmpzggmnvs4.swift:13:14:\
    \ note: candidate has partially matching parameter list (repeating: Int, count:\
    \ Int)\n    var dp = [Int](count: m, repeatedValue: 0)\n             ^\n/tmp/tmpzggmnvs4.swift:13:14:\
    \ note: candidate has partially matching parameter list (repeating: Int, count:\
    \ Int)\n    var dp = [Int](count: m, repeatedValue: 0)\n             ^\n/tmp/tmpzggmnvs4.swift:14:15:\
    \ error: no exact matches in call to initializer \n    var dp1 = [Int](count:\
    \ m, repeatedValue: 0)\n              ^\n/tmp/tmpzggmnvs4.swift:14:15: note: candidate\
    \ has partially matching parameter list (repeating: Int, count: Int)\n    var\
    \ dp1 = [Int](count: m, repeatedValue: 0)\n              ^\n/tmp/tmpzggmnvs4.swift:14:15:\
    \ note: candidate has partially matching parameter list (repeating: Int, count:\
    \ Int)\n    var dp1 = [Int](count: m, repeatedValue: 0)\n              ^\n"
  stdout: ''
  timestamp: 1660012233
- exit_code: -4
  program: "\n/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfunc starts_one_ends(n: Int)\
    \ -> Int {\n  // How many numbers starting with one.\n  var count = 1\n  for _\
    \ in 1..<n {\n    count *= 10\n  }\n  // How many numbers ending with one.\n \
    \ count += n\n  return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(starts_one_ends(n:\
    \ 1) == 1)\nassert(starts_one_ends(n: 2) == 18)\nassert(starts_one_ends(n: 3)\
    \ == 180)\nassert(starts_one_ends(n: 4) == 1800)\nassert(starts_one_ends(n: 5)\
    \ == 18000)"
  status: Exception
  stderr: 'tmp6u4qz_r5/tmp6u4qz_r5.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b29a38a8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b29a359fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b29a359f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b29a359e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6u4qz_r5                        0x0000564883863335 <unavailable> + 4917

    5    libc.so.6                          0x00002b29a3a94460 __libc_start_main +
    245

    6    tmp6u4qz_r5                        0x0000564883862fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660012233
- exit_code: 1
  program: "\n/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfunc starts_one_ends(n: Int)\
    \ -> Int {\n  if n == 1 {\n    return 1\n  }\n\n  let count = starts_one_ends(n-1)\n\
    \  let without_one = pow(9, n-1)\n\n  return count + count - without_one\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(starts_one_ends(n: 1) == 1)\nassert(starts_one_ends(n:\
    \ 2) == 18)\nassert(starts_one_ends(n: 3) == 180)\nassert(starts_one_ends(n: 4)\
    \ == 1800)\nassert(starts_one_ends(n: 5) == 18000)"
  status: SyntaxError
  stderr: "/tmp/tmpjw20m9lw.swift:9:31: error: missing argument label 'n:' in call\n\
    \  let count = starts_one_ends(n-1)\n                              ^\n       \
    \                       n: \n/tmp/tmpjw20m9lw.swift:10:21: error: cannot find\
    \ 'pow' in scope\n  let without_one = pow(9, n-1)\n                    ^~~\n/tmp/tmpjw20m9lw.swift:12:16:\
    \ error: cannot convert value of type 'String' to expected argument type 'Int'\n\
    \  return count + count - without_one\n               ^\n"
  stdout: ''
  timestamp: 1660012233
- exit_code: -4
  program: "\n/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfunc starts_one_ends(n: Int)\
    \ -> Int {\n    guard n > 1 else { return n }\n    var dp = [Int](repeating: 0,\
    \ count: n + 1)\n    dp[1] = 1\n    dp[2] = 10\n    for i in 3...n {\n       \
    \ dp[i] = dp[i - 1] + (dp[i - 1] - dp[i - 2]) * 9\n    }\n    return dp[n]\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(starts_one_ends(n: 1) == 1)\nassert(starts_one_ends(n:\
    \ 2) == 18)\nassert(starts_one_ends(n: 3) == 180)\nassert(starts_one_ends(n: 4)\
    \ == 1800)\nassert(starts_one_ends(n: 5) == 18000)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b1f31d12c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1f31a09561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b1f31a09286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b1f31a0913c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b1f31a08bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp4naqgboa                        0x0000562336387800 <unavailable> + 6144

    6    tmp4naqgboa                        0x0000562336387463 <unavailable> + 5219

    7    libc.so.6                          0x00002b1f31efe460 __libc_start_main +
    245

    8    tmp4naqgboa                        0x0000562336387109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012233
- exit_code: 1
  program: "\n/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfunc starts_one_ends(n: Int)\
    \ -> Int {\n    let numbers = (n - 1) * 9\n    let rest = starts_one_ends(n -\
    \ 1)\n    return numbers + rest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(starts_one_ends(n:\
    \ 1) == 1)\nassert(starts_one_ends(n: 2) == 18)\nassert(starts_one_ends(n: 3)\
    \ == 180)\nassert(starts_one_ends(n: 4) == 1800)\nassert(starts_one_ends(n: 5)\
    \ == 18000)"
  status: SyntaxError
  stderr: "/tmp/tmppmxvi38l.swift:6:32: error: missing argument label 'n:' in call\n\
    \    let rest = starts_one_ends(n - 1)\n                               ^\n   \
    \                            n: \n"
  stdout: ''
  timestamp: 1660012233
- exit_code: 1
  program: "\n/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfunc starts_one_ends(n: Int)\
    \ -> Int {\n    if n == 1 {\n        return 2\n    }\n    return other_nums(n-1)\
    \ + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(starts_one_ends(n: 1) ==\
    \ 1)\nassert(starts_one_ends(n: 2) == 18)\nassert(starts_one_ends(n: 3) == 180)\n\
    assert(starts_one_ends(n: 4) == 1800)\nassert(starts_one_ends(n: 5) == 18000)"
  status: SyntaxError
  stderr: "/tmp/tmpo5bdwupp.swift:8:12: error: cannot find 'other_nums' in scope\n\
    \    return other_nums(n-1) + 1\n           ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660012233
- exit_code: 1
  program: "\n/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfunc starts_one_ends(n: Int)\
    \ -> Int {\n    if n == 1 {\n        return 2\n    } else if n < 1 {\n       \
    \ return 0\n    }\n    return others(n - 1) + starts_one_ends(n - 1)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(starts_one_ends(n: 1) == 1)\nassert(starts_one_ends(n:\
    \ 2) == 18)\nassert(starts_one_ends(n: 3) == 180)\nassert(starts_one_ends(n: 4)\
    \ == 1800)\nassert(starts_one_ends(n: 5) == 18000)"
  status: SyntaxError
  stderr: "/tmp/tmpf8gyq988.swift:10:12: error: cannot find 'others' in scope\n  \
    \  return others(n - 1) + starts_one_ends(n - 1)\n           ^~~~~~\n/tmp/tmpf8gyq988.swift:10:44:\
    \ error: missing argument label 'n:' in call\n    return others(n - 1) + starts_one_ends(n\
    \ - 1)\n                                           ^\n                       \
    \                    n: \n"
  stdout: ''
  timestamp: 1660012233
- exit_code: 1
  program: "\n/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfunc starts_one_ends(n: Int)\
    \ -> Int {\n    // Indices for possible digits.\n    let f_idx = 0\n    let g_idx\
    \ = 1\n    let i_idx = 2\n    let j_idx = 3\n    let n_idx = 4\n    let one_idx\
    \ = 5\n    let zero_idx = 6\n\n    let exp = (1...n).fold(1, combine: *)\n   \
    \ var mods = Array(count: n, repeatedValue: Array(count: 7, repeatedValue: 0))\n\
    \    mods[0][one_idx] = 1\n    mods[0][zero_idx] = 1\n    mods[0][n_idx] = 1\n\
    \n    for i in 1..<n {\n        mods[i][f_idx] = mods[i - 1][g_idx]\n        mods[i][g_idx]\
    \ = (mods[i - 1][f_idx] + mods[i - 1][i_idx] + mods[i - 1][j_idx]) % exp\n   \
    \     mods[i][i_idx] = (mods[i - 1][f_idx] + mods[i - 1][g_idx] + mods[i - 1][n_idx])\
    \ % exp\n        mods[i][j_idx] = (mods[i - 1][g_idx] + mods[i - 1][n_idx]) %\
    \ exp\n        mods[i][n_idx] = (mods[i - 1][f_idx] + mods[i - 1][g_idx] + mods[i\
    \ - 1][i_idx] + mods[i - 1][j_idx]) % exp\n        mods[i][one_idx] = (mods[i\
    \ - 1][one_idx] + mods[i - 1][n_idx]) % exp\n        mods[i][zero_idx] = (mods[i\
    \ - 1][zero_idx] + mods[i - 1][n_idx]) % exp\n    }\n\n    return (mods[n - 1][one_idx]\
    \ + mods[n - 1][zero_idx]) % exp\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(starts_one_ends(n:\
    \ 1) == 1)\nassert(starts_one_ends(n: 2) == 18)\nassert(starts_one_ends(n: 3)\
    \ == 180)\nassert(starts_one_ends(n: 4) == 1800)\nassert(starts_one_ends(n: 5)\
    \ == 18000)"
  status: SyntaxError
  stderr: "/tmp/tmpqqttdk8n.swift:14:23: error: value of type 'ClosedRange<Int>' has\
    \ no member 'fold'\n    let exp = (1...n).fold(1, combine: *)\n              ~~~~~~~\
    \ ^~~~\n/tmp/tmpqqttdk8n.swift:15:16: error: no exact matches in call to initializer\
    \ \n    var mods = Array(count: n, repeatedValue: Array(count: 7, repeatedValue:\
    \ 0))\n               ^\n/tmp/tmpqqttdk8n.swift:15:16: note: candidate has partially\
    \ matching parameter list (repeating: _, count: Int)\n    var mods = Array(count:\
    \ n, repeatedValue: Array(count: 7, repeatedValue: 0))\n               ^\n/tmp/tmpqqttdk8n.swift:15:16:\
    \ note: candidate has partially matching parameter list (repeating: _, count:\
    \ Int)\n    var mods = Array(count: n, repeatedValue: Array(count: 7, repeatedValue:\
    \ 0))\n               ^\n/tmp/tmpqqttdk8n.swift:15:78: error: extra argument 'repeatedValue'\
    \ in call\n    var mods = Array(count: n, repeatedValue: Array(count: 7, repeatedValue:\
    \ 0))\n                                                   ~~~~~~~~~~~~~~~~~~~~~~~~~~^~\n\
    /tmp/tmpqqttdk8n.swift:15:53: error: missing argument for parameter 'repeating'\
    \ in call\n    var mods = Array(count: n, repeatedValue: Array(count: 7, repeatedValue:\
    \ 0))\n                                                    ^\n               \
    \                                     repeating: <#_#>, \nSwift.Array:4:23: note:\
    \ 'init(repeating:count:)' declared here\n    @inlinable public init(repeating\
    \ repeatedValue: Element, count: Int)\n                      ^\n/tmp/tmpqqttdk8n.swift:25:9:\
    \ error: the compiler is unable to type-check this expression in reasonable time;\
    \ try breaking up the expression into distinct sub-expressions\n        mods[i][n_idx]\
    \ = (mods[i - 1][f_idx] + mods[i - 1][g_idx] + mods[i - 1][i_idx] + mods[i - 1][j_idx])\
    \ % exp\n        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660012343
- exit_code: 1
  program: "\n/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfunc starts_one_ends(n: Int)\
    \ -> Int {\n    if n == 1 {\n        return 10\n    } else if n == 2 {\n     \
    \   return 100\n    } else {\n        let leading_ones = 9 * (1..<n).reduce(1,\
    \ combine: { $0 * 10 })\n        let ending_ones = 9 * (1..<n).reduce(1, combine:\
    \ { $0 * 10 }) + 1\n        return leading_ones + ending_ones\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(starts_one_ends(n: 1) == 1)\nassert(starts_one_ends(n:\
    \ 2) == 18)\nassert(starts_one_ends(n: 3) == 180)\nassert(starts_one_ends(n: 4)\
    \ == 1800)\nassert(starts_one_ends(n: 5) == 18000)"
  status: SyntaxError
  stderr: "/tmp/tmpcp_b59j7.swift:10:46: error: extraneous argument label 'combine:'\
    \ in call\n        let leading_ones = 9 * (1..<n).reduce(1, combine: { $0 * 10\
    \ })\n                                             ^   ~~~~~~~~~\n           \
    \                                      \n/tmp/tmpcp_b59j7.swift:10:59: error:\
    \ contextual closure type '(Int, Range<Int>.Element) throws -> Int' (aka '(Int,\
    \ Int) throws -> Int') expects 2 arguments, but 1 was used in closure body\n \
    \       let leading_ones = 9 * (1..<n).reduce(1, combine: { $0 * 10 })\n     \
    \                                                     ^\n/tmp/tmpcp_b59j7.swift:11:45:\
    \ error: extraneous argument label 'combine:' in call\n        let ending_ones\
    \ = 9 * (1..<n).reduce(1, combine: { $0 * 10 }) + 1\n                        \
    \                    ^   ~~~~~~~~~\n                                         \
    \       \n/tmp/tmpcp_b59j7.swift:11:58: error: contextual closure type '(Int,\
    \ Range<Int>.Element) throws -> Int' (aka '(Int, Int) throws -> Int') expects\
    \ 2 arguments, but 1 was used in closure body\n        let ending_ones = 9 * (1..<n).reduce(1,\
    \ combine: { $0 * 10 }) + 1\n                                                \
    \         ^\n/tmp/tmpcp_b59j7.swift:12:29: error: cannot convert return expression\
    \ of type 'String' to return type 'Int'\n        return leading_ones + ending_ones\n\
    \               ~~~~~~~~~~~~~^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660012233
- exit_code: 1
  program: "\n/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfunc starts_one_ends(n: Int)\
    \ -> Int {\n  if n == 1 {\n    return 2\n  }\n  if n == 2 {\n    return 4\n  }\n\
    \  return 1 + starts_one_ends(n-1) + starts_one_ends(n-2)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(starts_one_ends(n: 1) == 1)\nassert(starts_one_ends(n:\
    \ 2) == 18)\nassert(starts_one_ends(n: 3) == 180)\nassert(starts_one_ends(n: 4)\
    \ == 1800)\nassert(starts_one_ends(n: 5) == 18000)"
  status: SyntaxError
  stderr: "/tmp/tmpwj4seqgn.swift:11:30: error: missing argument label 'n:' in call\n\
    \  return 1 + starts_one_ends(n-1) + starts_one_ends(n-2)\n                  \
    \           ^\n                             n: \n/tmp/tmpwj4seqgn.swift:11:53:\
    \ error: missing argument label 'n:' in call\n  return 1 + starts_one_ends(n-1)\
    \ + starts_one_ends(n-2)\n                                                   \
    \ ^\n                                                    n: \n"
  stdout: ''
  timestamp: 1660012233
- exit_code: 1
  program: "\n/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfunc starts_one_ends(n: Int)\
    \ -> Int {\n    return ends_one_starts(n: n)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(starts_one_ends(n: 1) == 1)\nassert(starts_one_ends(n: 2) == 18)\n\
    assert(starts_one_ends(n: 3) == 180)\nassert(starts_one_ends(n: 4) == 1800)\n\
    assert(starts_one_ends(n: 5) == 18000)"
  status: SyntaxError
  stderr: "/tmp/tmpgon93vw9.swift:5:12: error: cannot find 'ends_one_starts' in scope\n\
    \    return ends_one_starts(n: n)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660012233
- exit_code: -4
  program: "\n/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfunc starts_one_ends(n: Int)\
    \ -> Int {\n  return n * n * n * n * n\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(starts_one_ends(n: 1) == 1)\nassert(starts_one_ends(n: 2) == 18)\nassert(starts_one_ends(n:\
    \ 3) == 180)\nassert(starts_one_ends(n: 4) == 1800)\nassert(starts_one_ends(n:\
    \ 5) == 18000)"
  status: Exception
  stderr: 'tmpz1nik9pz/tmpz1nik9pz.swift:22: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b60c8997c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b60c868eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b60c868e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b60c868d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz1nik9pz                        0x00005576e6075230 <unavailable> + 4656

    5    libc.so.6                          0x00002b60c8b83460 __libc_start_main +
    245

    6    tmpz1nik9pz                        0x00005576e6074e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660012233
- exit_code: 1
  program: "\n/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfunc starts_one_ends(n: Int)\
    \ -> Int {\n    // for n = 1, we have 1 one-digit positive integer that starts\
    \ or ends with 1\n    // for n = 2, we have the two-digit positive integers of\
    \ the form '1x' and 'x1',\n    // where x is any of the 9 other integers.\n  \
    \  // for n = 3, we have the three-digit positive integers of the form '1xx',\
    \ 'x1x',\n    // and 'xx1', where x is any of the 9 other integers.\n    // for\
    \ n = 4, we have the four-digit positive integers of the form '1xxx', 'x1xx',\n\
    \    // 'xx1x', and 'xxx1', where x is any of the 9 other integers.\n    // ...\n\
    \    //\n    // so we can see that the count is the sum of the series 9 * 10 ^\
    \ (i - 1), i = 1, 2, ..., n.\n    var s = 0\n    for i in 1...n {\n        s +=\
    \ 9 * Int(pow(10.0, Double(i - 1)))\n    }\n    return s\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(starts_one_ends(n: 1) == 1)\nassert(starts_one_ends(n:\
    \ 2) == 18)\nassert(starts_one_ends(n: 3) == 180)\nassert(starts_one_ends(n: 4)\
    \ == 1800)\nassert(starts_one_ends(n: 5) == 18000)"
  status: SyntaxError
  stderr: "/tmp/tmp3fygj_wy.swift:17:22: error: cannot find 'pow' in scope\n     \
    \   s += 9 * Int(pow(10.0, Double(i - 1)))\n                     ^~~\n"
  stdout: ''
  timestamp: 1660012233
- exit_code: 1
  program: "\n/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfunc starts_one_ends(n: Int)\
    \ -> Int {\n    var result = n\n    for i in 1 ..< n {\n        result += Int(pow(Double(10),\
    \ Double(i)))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(starts_one_ends(n: 1) == 1)\nassert(starts_one_ends(n: 2) == 18)\nassert(starts_one_ends(n:\
    \ 3) == 180)\nassert(starts_one_ends(n: 4) == 1800)\nassert(starts_one_ends(n:\
    \ 5) == 18000)"
  status: SyntaxError
  stderr: "/tmp/tmp84xgf0ga.swift:7:23: error: cannot find 'pow' in scope\n      \
    \  result += Int(pow(Double(10), Double(i)))\n                      ^~~\n"
  stdout: ''
  timestamp: 1660012233
- exit_code: 1
  program: "\n/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfunc starts_one_ends(n: Int)\
    \ -> Int {\n    var i: Int = 1\n    var count: Int = 0\n    while i <= n {\n \
    \       count += (power_mod(10, n: i - 1, mod: 1000000007) * 9) % 1000000007\n\
    \        i += 1\n    }\n    count += (power_mod(10, n: n - 1, mod: 1000000007)\
    \ - 1) % 1000000007\n    return count % 1000000007\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(starts_one_ends(n: 1) == 1)\nassert(starts_one_ends(n: 2)\
    \ == 18)\nassert(starts_one_ends(n: 3) == 180)\nassert(starts_one_ends(n: 4) ==\
    \ 1800)\nassert(starts_one_ends(n: 5) == 18000)"
  status: SyntaxError
  stderr: "/tmp/tmpsle6qbkp.swift:8:19: error: cannot find 'power_mod' in scope\n\
    \        count += (power_mod(10, n: i - 1, mod: 1000000007) * 9) % 1000000007\n\
    \                  ^~~~~~~~~\n/tmp/tmpsle6qbkp.swift:11:15: error: cannot find\
    \ 'power_mod' in scope\n    count += (power_mod(10, n: n - 1, mod: 1000000007)\
    \ - 1) % 1000000007\n              ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660012233
- exit_code: 1
  program: "\n/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfunc starts_one_ends(n: Int)\
    \ -> Int {\n    if n == 1 {\n        return 2\n    } else if n == 2 {\n      \
    \  return 4\n    }\n    var n = n\n    var digits = [1]\n    var count = 0\n \
    \   repeat {\n        digits.append(1)\n        count += 1\n        n -= 1\n \
    \   } while n > 2\n    count += Int(pow(10, Double(n - 1))) * 2\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(starts_one_ends(n: 1) == 1)\nassert(starts_one_ends(n:\
    \ 2) == 18)\nassert(starts_one_ends(n: 3) == 180)\nassert(starts_one_ends(n: 4)\
    \ == 1800)\nassert(starts_one_ends(n: 5) == 18000)"
  status: SyntaxError
  stderr: "/tmp/tmpgtnvr49i.swift:18:18: error: cannot find 'pow' in scope\n    count\
    \ += Int(pow(10, Double(n - 1))) * 2\n                 ^~~\n"
  stdout: ''
  timestamp: 1660012233
- exit_code: 1
  program: "\n/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfunc starts_one_ends(n: Int)\
    \ -> Int {\n  if n == 1 {\n    return 2\n  }\n  var digits = n-1\n  var result\
    \ = 0\n  while digits > 0 {\n    result += nDigit(digits)*2\n    digits -= 1\n\
    \  }\n  return result + 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(starts_one_ends(n:\
    \ 1) == 1)\nassert(starts_one_ends(n: 2) == 18)\nassert(starts_one_ends(n: 3)\
    \ == 180)\nassert(starts_one_ends(n: 4) == 1800)\nassert(starts_one_ends(n: 5)\
    \ == 18000)"
  status: SyntaxError
  stderr: "/tmp/tmpes81wn8m.swift:11:15: error: cannot find 'nDigit' in scope\n  \
    \  result += nDigit(digits)*2\n              ^~~~~~\n"
  stdout: ''
  timestamp: 1660012233
- exit_code: -4
  program: "\n/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfunc starts_one_ends(n: Int)\
    \ -> Int {\n    // numbers that start with 1\n    var s = 1\n\n    for i in 1...n\
    \ {\n        s *= 9\n    }\n\n    // number that end with 1\n    var e = 1\n\n\
    \    for i in 1...n {\n        e *= 9\n    }\n\n    e -= 9\n\n    // duplicates\n\
    \    var d = 1\n\n    for i in 1...n {\n        d *= 10\n    }\n\n    d -= (n\
    \ + 1)\n\n    return s + e - d\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(starts_one_ends(n:\
    \ 1) == 1)\nassert(starts_one_ends(n: 2) == 18)\nassert(starts_one_ends(n: 3)\
    \ == 180)\nassert(starts_one_ends(n: 4) == 1800)\nassert(starts_one_ends(n: 5)\
    \ == 18000)"
  status: Exception
  stderr: 'tmpjkgbkezc/tmpjkgbkezc.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8b6ae6ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8b6ab61b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8b6ab61988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8b6ab607b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjkgbkezc                        0x000055ed709e43b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b8b6b056460 __libc_start_main +
    245

    6    tmpjkgbkezc                        0x000055ed709e3fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660012233
- exit_code: -4
  program: "\n/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfunc starts_one_ends(n: Int)\
    \ -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(starts_one_ends(n:\
    \ 1) == 1)\nassert(starts_one_ends(n: 2) == 18)\nassert(starts_one_ends(n: 3)\
    \ == 180)\nassert(starts_one_ends(n: 4) == 1800)\nassert(starts_one_ends(n: 5)\
    \ == 18000)"
  status: Exception
  stderr: 'tmpmhqv_km4/tmpmhqv_km4.swift:21: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba812dd5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba812accb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba812acc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba812acb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmhqv_km4                        0x0000561086d891b5 <unavailable> + 4533

    5    libc.so.6                          0x00002ba812fc1460 __libc_start_main +
    245

    6    tmpmhqv_km4                        0x0000561086d88e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660012130
- exit_code: 1
  program: "\n/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfunc starts_one_ends(n: Int)\
    \ -> Int {\n  let result = Array(0...9).reduce(0) { $0 + ends_one($1, n) }\n\n\
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(starts_one_ends(n:\
    \ 1) == 1)\nassert(starts_one_ends(n: 2) == 18)\nassert(starts_one_ends(n: 3)\
    \ == 180)\nassert(starts_one_ends(n: 4) == 1800)\nassert(starts_one_ends(n: 5)\
    \ == 18000)"
  status: SyntaxError
  stderr: "/tmp/tmp8xiz163k.swift:5:46: error: cannot find 'ends_one' in scope\n \
    \ let result = Array(0...9).reduce(0) { $0 + ends_one($1, n) }\n             \
    \                                ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660012233
- exit_code: -4
  program: "\n/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfunc starts_one_ends(n: Int)\
    \ -> Int {\n    if n == 1 {\n        return 1\n    }\n    var (a, b) = (0, 0)\n\
    \    for i in 2...n {\n        (a, b) = (a + b, a)\n    }\n    return a + b +\
    \ 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(starts_one_ends(n: 1) == 1)\n\
    assert(starts_one_ends(n: 2) == 18)\nassert(starts_one_ends(n: 3) == 180)\nassert(starts_one_ends(n:\
    \ 4) == 1800)\nassert(starts_one_ends(n: 5) == 18000)"
  status: Exception
  stderr: 'tmpl46m4m9_/tmpl46m4m9_.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b31dd412c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b31dd109b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b31dd109988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b31dd1087b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpl46m4m9_                        0x00005612a26b63b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b31dd5fe460 __libc_start_main +
    245

    6    tmpl46m4m9_                        0x00005612a26b5fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660012233
- exit_code: 1
  program: "\n/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfunc starts_one_ends(n: Int)\
    \ -> Int {\n    var cache = Array(repeating: Array(repeating: Int(), count: 2),\
    \ count: n)\n    return starts_one_ends(n: n, start: 1, end: 1, &cache)\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(starts_one_ends(n: 1) == 1)\nassert(starts_one_ends(n:\
    \ 2) == 18)\nassert(starts_one_ends(n: 3) == 180)\nassert(starts_one_ends(n: 4)\
    \ == 1800)\nassert(starts_one_ends(n: 5) == 18000)"
  status: SyntaxError
  stderr: "/tmp/tmpfytttzey.swift:6:27: error: extra arguments at positions #2, #3,\
    \ #4 in call\n    return starts_one_ends(n: n, start: 1, end: 1, &cache)\n   \
    \                       ^\n/tmp/tmpfytttzey.swift:4:6: note: 'starts_one_ends(n:)'\
    \ declared here\nfunc starts_one_ends(n: Int) -> Int {\n     ^\n"
  stdout: ''
  timestamp: 1660012233
- exit_code: 1
  program: "\n/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfunc starts_one_ends(n: Int)\
    \ -> Int {\n    return (1..<n).map { (1..<10).map { $0 * pow(10, $0.predecessor())\
    \ }.reduce(0, combine: +) }.reduce(0, combine: +) + 10\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(starts_one_ends(n: 1) == 1)\nassert(starts_one_ends(n: 2)\
    \ == 18)\nassert(starts_one_ends(n: 3) == 180)\nassert(starts_one_ends(n: 4) ==\
    \ 1800)\nassert(starts_one_ends(n: 5) == 18000)"
  status: SyntaxError
  stderr: "/tmp/tmppssxkesg.swift:5:46: error: cannot find 'pow' in scope\n    return\
    \ (1..<n).map { (1..<10).map { $0 * pow(10, $0.predecessor()) }.reduce(0, combine:\
    \ +) }.reduce(0, combine: +) + 10\n                                          \
    \   ^~~\n"
  stdout: ''
  timestamp: 1660012233
- exit_code: 1
  program: "\n/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfunc starts_one_ends(n: Int)\
    \ -> Int {\n  return count_n_digit_integers(\n    pred: { $0 >= 1 },\n    succ:\
    \ { $0 >= 1 },\n    start: 1,\n    end:   10,\n    n:     n)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(starts_one_ends(n: 1) == 1)\nassert(starts_one_ends(n:\
    \ 2) == 18)\nassert(starts_one_ends(n: 3) == 180)\nassert(starts_one_ends(n: 4)\
    \ == 1800)\nassert(starts_one_ends(n: 5) == 18000)"
  status: SyntaxError
  stderr: "/tmp/tmpo6px71wj.swift:5:10: error: cannot find 'count_n_digit_integers'\
    \ in scope\n  return count_n_digit_integers(\n         ^~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660012233
- exit_code: 1
  program: "\n/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfunc starts_one_ends(n: Int)\
    \ -> Int {\n    var count = 0\n\n    for i in 1..<10 {\n        count += count_start_one(n,\
    \ i)\n    }\n\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(starts_one_ends(n:\
    \ 1) == 1)\nassert(starts_one_ends(n: 2) == 18)\nassert(starts_one_ends(n: 3)\
    \ == 180)\nassert(starts_one_ends(n: 4) == 1800)\nassert(starts_one_ends(n: 5)\
    \ == 18000)"
  status: SyntaxError
  stderr: "/tmp/tmpwh_zlv2h.swift:8:18: error: cannot find 'count_start_one' in scope\n\
    \        count += count_start_one(n, i)\n                 ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660012233
- exit_code: 1
  program: "\n/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfunc starts_one_ends(n: Int)\
    \ -> Int {\n    if n <= 0 {\n        return 0\n    }\n    if n == 1 {\n      \
    \  return 1\n    }\n    return starts_one_ends(n - 1) + 9 * starts_one_ends(n\
    \ - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(starts_one_ends(n: 1) ==\
    \ 1)\nassert(starts_one_ends(n: 2) == 18)\nassert(starts_one_ends(n: 3) == 180)\n\
    assert(starts_one_ends(n: 4) == 1800)\nassert(starts_one_ends(n: 5) == 18000)"
  status: SyntaxError
  stderr: "/tmp/tmptbfrhk4l.swift:11:28: error: missing argument label 'n:' in call\n\
    \    return starts_one_ends(n - 1) + 9 * starts_one_ends(n - 2)\n            \
    \               ^\n                           n: \n/tmp/tmptbfrhk4l.swift:11:57:\
    \ error: missing argument label 'n:' in call\n    return starts_one_ends(n - 1)\
    \ + 9 * starts_one_ends(n - 2)\n                                             \
    \           ^\n                                                        n: \n"
  stdout: ''
  timestamp: 1660012233
- exit_code: -4
  program: "\n/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfunc starts_one_ends(n: Int)\
    \ -> Int {\n    var (result, d, pd) = (0, 1, 1)\n    for i in 2...n {\n      \
    \  (result, d, pd) = (pd + d + result, pd, result)\n    }\n    return result +\
    \ d\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(starts_one_ends(n: 1) == 1)\n\
    assert(starts_one_ends(n: 2) == 18)\nassert(starts_one_ends(n: 3) == 180)\nassert(starts_one_ends(n:\
    \ 4) == 1800)\nassert(starts_one_ends(n: 5) == 18000)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002ba1a4340c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba1a4037561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ba1a4037286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ba1a403713c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ba1a4036bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp8qzzxtg4                        0x0000564f97db7661 <unavailable> + 5729

    6    tmp8qzzxtg4                        0x0000564f97db72c8 <unavailable> + 4808

    7    libc.so.6                          0x00002ba1a452c460 __libc_start_main +
    245

    8    tmp8qzzxtg4                        0x0000564f97db6fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660012233
- exit_code: 1
  program: "\n/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfunc starts_one_ends(n: Int)\
    \ -> Int {\n    if n == 1 {\n        return 2\n    }\n    var v1 = 0, v2 = 0\n\
    \    for var i = 0; i < n; i++ {\n        if i == 0 {\n            v1 = 1\n  \
    \          v2 = 1\n        } else {\n            let tmp = v1\n            v1\
    \ = v1 + v2\n            v2 = tmp * 9\n        }\n    }\n    return v1 + v2\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(starts_one_ends(n: 1) == 1)\nassert(starts_one_ends(n:\
    \ 2) == 18)\nassert(starts_one_ends(n: 3) == 180)\nassert(starts_one_ends(n: 4)\
    \ == 1800)\nassert(starts_one_ends(n: 5) == 18000)"
  status: SyntaxError
  stderr: "/tmp/tmpcih7d2n9.swift:9:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for var i = 0; i < n; i++ {\n    ^   ~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660012233
- exit_code: -4
  program: "\n/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfunc starts_one_ends(n: Int)\
    \ -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(starts_one_ends(n:\
    \ 1) == 1)\nassert(starts_one_ends(n: 2) == 18)\nassert(starts_one_ends(n: 3)\
    \ == 180)\nassert(starts_one_ends(n: 4) == 1800)\nassert(starts_one_ends(n: 5)\
    \ == 18000)"
  status: Exception
  stderr: 'tmpmhqv_km4/tmpmhqv_km4.swift:21: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba812dd5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba812accb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba812acc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba812acb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmhqv_km4                        0x0000561086d891b5 <unavailable> + 4533

    5    libc.so.6                          0x00002ba812fc1460 __libc_start_main +
    245

    6    tmpmhqv_km4                        0x0000561086d88e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660012130
- exit_code: 1
  program: "\n/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfunc starts_one_ends(n: Int)\
    \ -> Int {\n    return count_n_digits(n) - count_no_one(n)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(starts_one_ends(n: 1) == 1)\nassert(starts_one_ends(n:\
    \ 2) == 18)\nassert(starts_one_ends(n: 3) == 180)\nassert(starts_one_ends(n: 4)\
    \ == 1800)\nassert(starts_one_ends(n: 5) == 18000)"
  status: SyntaxError
  stderr: "/tmp/tmpzwrx9fc0.swift:5:12: error: cannot find 'count_n_digits' in scope\n\
    \    return count_n_digits(n) - count_no_one(n)\n           ^~~~~~~~~~~~~~\n/tmp/tmpzwrx9fc0.swift:5:32:\
    \ error: cannot find 'count_no_one' in scope\n    return count_n_digits(n) - count_no_one(n)\n\
    \                               ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660012233
- exit_code: 1
  program: "\n/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfunc starts_one_ends(n: Int)\
    \ -> Int {\n    // The counts for the beginning and end numbers\n    var starts_one\
    \ = 0\n    var ends_one = 0\n    \n    if n == 1 {\n        // If there is only\
    \ one digit, we can only return 1\n        return 1\n    }\n    \n    // The counts\
    \ for the number of numbers of n-digit positive integers that\n    // contain\
    \ one or not. We use 1 for \"contains one\" and 0 for \"doesn't\n    // contain\
    \ one\"\n    var with_one = 0\n    var without_one = 0\n    \n    // If we have\
    \ two digits, we have 2 starting with 1, and 0 ending with 1\n    starts_one =\
    \ 2\n    ends_one = 0\n    \n    // If we have 3 digits, we have 0 starting with\
    \ 1, and 2 ending with 1\n    with_one = 2\n    without_one = 0\n    \n    //\
    \ For the rest of the digits, we have the same formula\n    for _ in 2..<n {\n\
    \        starts_one, with_one = with_one, with_one + with_one + without_one\n\
    \        ends_one, without_one = without_one, with_one + without_one\n    }\n\
    \    \n    // Return the sum of the counts\n    return starts_one + ends_one\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(starts_one_ends(n: 1) == 1)\nassert(starts_one_ends(n:\
    \ 2) == 18)\nassert(starts_one_ends(n: 3) == 180)\nassert(starts_one_ends(n: 4)\
    \ == 1800)\nassert(starts_one_ends(n: 5) == 18000)"
  status: SyntaxError
  stderr: "/tmp/tmpglk2wvim.swift:30:19: error: consecutive statements on a line must\
    \ be separated by ';'\n        starts_one, with_one = with_one, with_one + with_one\
    \ + without_one\n                  ^\n                  ;\n/tmp/tmpglk2wvim.swift:30:19:\
    \ error: expected expression\n        starts_one, with_one = with_one, with_one\
    \ + with_one + without_one\n                  ^\n/tmp/tmpglk2wvim.swift:30:9:\
    \ warning: variable is unused\n        starts_one, with_one = with_one, with_one\
    \ + with_one + without_one\n        ^~~~~~~~~~\n/tmp/tmpglk2wvim.swift:17:9: warning:\
    \ variable 'with_one' was written to, but never read\n    var with_one = 0\n \
    \       ^\n/tmp/tmpglk2wvim.swift:18:9: warning: variable 'without_one' was written\
    \ to, but never read\n    var without_one = 0\n        ^\n"
  stdout: ''
  timestamp: 1660012233
- exit_code: 1
  program: "\n/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfunc starts_one_ends(n: Int)\
    \ -> Int {\n    guard n > 1 else { return 0 }\n    return ((1..<9).map { ten_power($0)\
    \ } + (1..<n-1).map { nine_power($0) }).reduce(0, combine: +)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(starts_one_ends(n: 1) == 1)\nassert(starts_one_ends(n:\
    \ 2) == 18)\nassert(starts_one_ends(n: 3) == 180)\nassert(starts_one_ends(n: 4)\
    \ == 1800)\nassert(starts_one_ends(n: 5) == 18000)"
  status: SyntaxError
  stderr: "/tmp/tmpsvn_k89a.swift:6:27: error: cannot find 'ten_power' in scope\n\
    \    return ((1..<9).map { ten_power($0) } + (1..<n-1).map { nine_power($0) }).reduce(0,\
    \ combine: +)\n                          ^~~~~~~~~\n/tmp/tmpsvn_k89a.swift:6:61:\
    \ error: cannot find 'nine_power' in scope\n    return ((1..<9).map { ten_power($0)\
    \ } + (1..<n-1).map { nine_power($0) }).reduce(0, combine: +)\n              \
    \                                              ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660012233
- exit_code: 1
  program: "\n/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfunc starts_one_ends(n: Int)\
    \ -> Int {\n    return Int(pow(Double(10), Double(n-1))) - Int(pow(Double(9),\
    \ Double(n-1)))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(starts_one_ends(n:\
    \ 1) == 1)\nassert(starts_one_ends(n: 2) == 18)\nassert(starts_one_ends(n: 3)\
    \ == 180)\nassert(starts_one_ends(n: 4) == 1800)\nassert(starts_one_ends(n: 5)\
    \ == 18000)"
  status: SyntaxError
  stderr: "/tmp/tmpdcf7eywx.swift:5:16: error: cannot find 'pow' in scope\n    return\
    \ Int(pow(Double(10), Double(n-1))) - Int(pow(Double(9), Double(n-1)))\n     \
    \          ^~~\n/tmp/tmpdcf7eywx.swift:5:52: error: cannot find 'pow' in scope\n\
    \    return Int(pow(Double(10), Double(n-1))) - Int(pow(Double(9), Double(n-1)))\n\
    \                                                   ^~~\n"
  stdout: ''
  timestamp: 1660012233
- exit_code: 1
  program: "\n/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfunc starts_one_ends(n: Int)\
    \ -> Int {\n    return count_n_digit_numbers(n, 0, 1)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(starts_one_ends(n: 1) == 1)\nassert(starts_one_ends(n: 2)\
    \ == 18)\nassert(starts_one_ends(n: 3) == 180)\nassert(starts_one_ends(n: 4) ==\
    \ 1800)\nassert(starts_one_ends(n: 5) == 18000)"
  status: SyntaxError
  stderr: "/tmp/tmp4_gf_d4z.swift:5:12: error: cannot find 'count_n_digit_numbers'\
    \ in scope\n    return count_n_digit_numbers(n, 0, 1)\n           ^~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660012233
- exit_code: 1
  program: "\n/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfunc starts_one_ends(n: Int)\
    \ -> Int {\n    precondition(n > 0)\n    if n == 1 {\n        return 1\n    }\n\
    \    return fib(n) + fib(n - 1) - 1\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(starts_one_ends(n: 1) == 1)\nassert(starts_one_ends(n: 2) == 18)\nassert(starts_one_ends(n:\
    \ 3) == 180)\nassert(starts_one_ends(n: 4) == 1800)\nassert(starts_one_ends(n:\
    \ 5) == 18000)"
  status: SyntaxError
  stderr: "/tmp/tmpjvivkacf.swift:9:12: error: cannot find 'fib' in scope\n    return\
    \ fib(n) + fib(n - 1) - 1\n           ^~~\n/tmp/tmpjvivkacf.swift:9:21: error:\
    \ cannot find 'fib' in scope\n    return fib(n) + fib(n - 1) - 1\n           \
    \         ^~~\n"
  stdout: ''
  timestamp: 1660012233
- exit_code: 1
  program: "\n/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfunc starts_one_ends(n: Int)\
    \ -> Int {\n    if n == 1 {\n        return 1\n    } else {\n        return Int(pow(10,\
    \ n - 1)) - Int(pow(9, n - 1))\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(starts_one_ends(n: 1) == 1)\nassert(starts_one_ends(n: 2) == 18)\nassert(starts_one_ends(n:\
    \ 3) == 180)\nassert(starts_one_ends(n: 4) == 1800)\nassert(starts_one_ends(n:\
    \ 5) == 18000)"
  status: SyntaxError
  stderr: "/tmp/tmp73cpf7y2.swift:8:20: error: cannot find 'pow' in scope\n      \
    \  return Int(pow(10, n - 1)) - Int(pow(9, n - 1))\n                   ^~~\n/tmp/tmp73cpf7y2.swift:8:42:\
    \ error: cannot find 'pow' in scope\n        return Int(pow(10, n - 1)) - Int(pow(9,\
    \ n - 1))\n                                         ^~~\n"
  stdout: ''
  timestamp: 1660012233
- exit_code: 1
  program: "\n/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfunc starts_one_ends(n: Int)\
    \ -> Int {\n  return count_digits(number: 10, length: n)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(starts_one_ends(n: 1) == 1)\nassert(starts_one_ends(n:\
    \ 2) == 18)\nassert(starts_one_ends(n: 3) == 180)\nassert(starts_one_ends(n: 4)\
    \ == 1800)\nassert(starts_one_ends(n: 5) == 18000)"
  status: SyntaxError
  stderr: "/tmp/tmp5wweqfbf.swift:5:10: error: cannot find 'count_digits' in scope\n\
    \  return count_digits(number: 10, length: n)\n         ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660012233
- exit_code: 1
  program: "\n/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfunc starts_one_ends(n: Int)\
    \ -> Int {\n    var count = 0\n    // count 1-digit numbers\n    count += 1\n\
    \    var i = 1\n    // count 2-digit numbers\n    i = 2\n    count += 10\n   \
    \ while i < n {\n        count += 1\n        count += 9 * pow(10, i - 1)\n   \
    \     i += 1\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(starts_one_ends(n: 1) == 1)\nassert(starts_one_ends(n: 2) == 18)\nassert(starts_one_ends(n:\
    \ 3) == 180)\nassert(starts_one_ends(n: 4) == 1800)\nassert(starts_one_ends(n:\
    \ 5) == 18000)"
  status: SyntaxError
  stderr: "/tmp/tmpew72_4mu.swift:14:22: error: cannot find 'pow' in scope\n     \
    \   count += 9 * pow(10, i - 1)\n                     ^~~\n"
  stdout: ''
  timestamp: 1660012233
- exit_code: 1
  program: "\n/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfunc starts_one_ends(n: Int)\
    \ -> Int {\n    if n <= 0 {\n        return 0\n    }\n\n    if n == 1 {\n    \
    \    return 1\n    }\n\n    var count = 0\n    var i = 1\n    while i < n {\n\
    \        count += pow(10, Double(i))\n        i += 1\n    }\n\n    count += 1\n\
    \    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(starts_one_ends(n:\
    \ 1) == 1)\nassert(starts_one_ends(n: 2) == 18)\nassert(starts_one_ends(n: 3)\
    \ == 180)\nassert(starts_one_ends(n: 4) == 1800)\nassert(starts_one_ends(n: 5)\
    \ == 18000)"
  status: SyntaxError
  stderr: "/tmp/tmp75mgprc7.swift:16:18: error: cannot find 'pow' in scope\n     \
    \   count += pow(10, Double(i))\n                 ^~~\n"
  stdout: ''
  timestamp: 1660012233
- exit_code: 1
  program: "\n/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfunc starts_one_ends(n: Int)\
    \ -> Int {\n  if n == 1 {\n    return 1\n  }\n  let max: Int = Int(pow(10, Double(n))\
    \ - 1)\n  let min: Int = Int(pow(10, Double(n - 1)))\n  var count: Int = 0\n \
    \ for i in min...max {\n    if \"\\(i)\".hasPrefix(\"1\") || \"\\(i)\".hasSuffix(\"\
    1\") {\n      count += 1\n    }\n  }\n  return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(starts_one_ends(n: 1) == 1)\nassert(starts_one_ends(n: 2)\
    \ == 18)\nassert(starts_one_ends(n: 3) == 180)\nassert(starts_one_ends(n: 4) ==\
    \ 1800)\nassert(starts_one_ends(n: 5) == 18000)"
  status: SyntaxError
  stderr: "/tmp/tmpubcd9xwj.swift:8:22: error: cannot find 'pow' in scope\n  let max:\
    \ Int = Int(pow(10, Double(n)) - 1)\n                     ^~~\n/tmp/tmpubcd9xwj.swift:9:22:\
    \ error: cannot find 'pow' in scope\n  let min: Int = Int(pow(10, Double(n - 1)))\n\
    \                     ^~~\n"
  stdout: ''
  timestamp: 1660012233
- exit_code: -4
  program: "\n/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfunc starts_one_ends(n: Int)\
    \ -> Int {\n    var str = String(n)\n    var cnt = 0\n    for _ in 0..<(str.count\
    \ - 1) {\n        str.removeFirst()\n        if str.first == \"1\" {\n       \
    \     cnt += 1\n        }\n    }\n    return cnt\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(starts_one_ends(n: 1) == 1)\nassert(starts_one_ends(n: 2)\
    \ == 18)\nassert(starts_one_ends(n: 3) == 180)\nassert(starts_one_ends(n: 4) ==\
    \ 1800)\nassert(starts_one_ends(n: 5) == 18000)"
  status: Exception
  stderr: 'tmpkmxxch9w/tmpkmxxch9w.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba011a28c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba01171fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba01171f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba01171e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkmxxch9w                        0x0000557978ecc6a5 <unavailable> + 5797

    5    libc.so.6                          0x00002ba011c14460 __libc_start_main +
    245

    6    tmpkmxxch9w                        0x0000557978ecc359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660012233
- exit_code: -4
  program: "\n/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfunc starts_one_ends(n: Int)\
    \ -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(starts_one_ends(n:\
    \ 1) == 1)\nassert(starts_one_ends(n: 2) == 18)\nassert(starts_one_ends(n: 3)\
    \ == 180)\nassert(starts_one_ends(n: 4) == 1800)\nassert(starts_one_ends(n: 5)\
    \ == 18000)"
  status: Exception
  stderr: 'tmpmhqv_km4/tmpmhqv_km4.swift:21: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba812dd5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba812accb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba812acc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba812acb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmhqv_km4                        0x0000561086d891b5 <unavailable> + 4533

    5    libc.so.6                          0x00002ba812fc1460 __libc_start_main +
    245

    6    tmpmhqv_km4                        0x0000561086d88e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660012130
- exit_code: -4
  program: "\n/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfunc starts_one_ends(n: Int)\
    \ -> Int {\n    // TODO: add code\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(starts_one_ends(n: 1) == 1)\nassert(starts_one_ends(n: 2) == 18)\n\
    assert(starts_one_ends(n: 3) == 180)\nassert(starts_one_ends(n: 4) == 1800)\n\
    assert(starts_one_ends(n: 5) == 18000)"
  status: Exception
  stderr: 'tmpr1rr9rks/tmpr1rr9rks.swift:22: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aef3b972c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aef3b669b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aef3b669988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aef3b6687b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr1rr9rks                        0x000055f608ecb1b5 <unavailable> + 4533

    5    libc.so.6                          0x00002aef3bb5e460 __libc_start_main +
    245

    6    tmpr1rr9rks                        0x000055f608ecae69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660012233
- exit_code: 1
  program: "\n/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfunc starts_one_ends(n: Int)\
    \ -> Int {\n    var s = 0\n    let e = 10.pow(n)\n    for i in 1..<e {\n     \
    \   if (i / e) % 10 == 1 || i % 10 == 1 {\n            s += 1\n        }\n   \
    \ }\n    return s\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(starts_one_ends(n:\
    \ 1) == 1)\nassert(starts_one_ends(n: 2) == 18)\nassert(starts_one_ends(n: 3)\
    \ == 180)\nassert(starts_one_ends(n: 4) == 1800)\nassert(starts_one_ends(n: 5)\
    \ == 18000)"
  status: SyntaxError
  stderr: "/tmp/tmpd3q93wwj.swift:6:16: error: value of type 'Int' has no member 'pow'\n\
    \    let e = 10.pow(n)\n            ~~ ^~~\n"
  stdout: ''
  timestamp: 1660012233
- exit_code: 1
  program: "\n/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfunc starts_one_ends(n: Int)\
    \ -> Int {\n    if n == 1 {\n        return 2\n    } else if n == 2 {\n      \
    \  return 9\n    } else {\n        return starts_one_ends(n-1) + 10*(n-1)\n  \
    \  }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(starts_one_ends(n: 1) == 1)\n\
    assert(starts_one_ends(n: 2) == 18)\nassert(starts_one_ends(n: 3) == 180)\nassert(starts_one_ends(n:\
    \ 4) == 1800)\nassert(starts_one_ends(n: 5) == 18000)"
  status: SyntaxError
  stderr: "/tmp/tmpw2dff1im.swift:10:32: error: missing argument label 'n:' in call\n\
    \        return starts_one_ends(n-1) + 10*(n-1)\n                            \
    \   ^\n                               n: \n"
  stdout: ''
  timestamp: 1660012233
- exit_code: 1
  program: "\n/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfunc starts_one_ends(n: Int)\
    \ -> Int {\n    return n == 1 ? 1 : starts_one_ends(n - 1) + n - 1\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(starts_one_ends(n: 1) == 1)\nassert(starts_one_ends(n:\
    \ 2) == 18)\nassert(starts_one_ends(n: 3) == 180)\nassert(starts_one_ends(n: 4)\
    \ == 1800)\nassert(starts_one_ends(n: 5) == 18000)"
  status: SyntaxError
  stderr: "/tmp/tmphwya11p9.swift:5:41: error: missing argument label 'n:' in call\n\
    \    return n == 1 ? 1 : starts_one_ends(n - 1) + n - 1\n                    \
    \                    ^\n                                        n: \n"
  stdout: ''
  timestamp: 1660012233
- exit_code: 1
  program: "\n/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfunc starts_one_ends(n: Int)\
    \ -> Int {\n    let ranges = Int(pow(10, Double(n)))\n    let ones = Int(pow(10,\
    \ Double(n - 1)))\n    let no_ones = Int(pow(10, Double(n - 2)))\n    return ranges\
    \ - ones - no_ones\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(starts_one_ends(n:\
    \ 1) == 1)\nassert(starts_one_ends(n: 2) == 18)\nassert(starts_one_ends(n: 3)\
    \ == 180)\nassert(starts_one_ends(n: 4) == 1800)\nassert(starts_one_ends(n: 5)\
    \ == 18000)"
  status: SyntaxError
  stderr: "/tmp/tmp8n_adaed.swift:5:22: error: cannot find 'pow' in scope\n    let\
    \ ranges = Int(pow(10, Double(n)))\n                     ^~~\n/tmp/tmp8n_adaed.swift:6:20:\
    \ error: cannot find 'pow' in scope\n    let ones = Int(pow(10, Double(n - 1)))\n\
    \                   ^~~\n/tmp/tmp8n_adaed.swift:7:23: error: cannot find 'pow'\
    \ in scope\n    let no_ones = Int(pow(10, Double(n - 2)))\n                  \
    \    ^~~\n/tmp/tmp8n_adaed.swift:8:26: error: cannot convert return expression\
    \ of type 'Duration' to return type 'Int'\n    return ranges - ones - no_ones\n\
    \           ~~~~~~~~~~~~~~^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660012233
- exit_code: -4
  program: "\n/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfunc starts_one_ends(n: Int)\
    \ -> Int {\n    if n == 1 {\n        return 2\n    }\n    var s = 0\n    var f\
    \ = 1\n    var p = 1\n    for _ in 1...n {\n        s += f\n        p *= 10\n\
    \        f = p - f\n    }\n    return s\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(starts_one_ends(n: 1) == 1)\nassert(starts_one_ends(n: 2) == 18)\nassert(starts_one_ends(n:\
    \ 3) == 180)\nassert(starts_one_ends(n: 4) == 1800)\nassert(starts_one_ends(n:\
    \ 5) == 18000)"
  status: Exception
  stderr: 'tmp682kwn8g/tmp682kwn8g.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad469d8bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad469a82b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad469a82988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad469a817b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp682kwn8g                        0x000055f389cc6335 <unavailable> + 4917

    5    libc.so.6                          0x00002ad469f77460 __libc_start_main +
    245

    6    tmp682kwn8g                        0x000055f389cc5fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660012234
- exit_code: -4
  program: "\n/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfunc starts_one_ends(n: Int)\
    \ -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(starts_one_ends(n:\
    \ 1) == 1)\nassert(starts_one_ends(n: 2) == 18)\nassert(starts_one_ends(n: 3)\
    \ == 180)\nassert(starts_one_ends(n: 4) == 1800)\nassert(starts_one_ends(n: 5)\
    \ == 18000)"
  status: Exception
  stderr: 'tmpmhqv_km4/tmpmhqv_km4.swift:21: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba812dd5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba812accb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba812acc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba812acb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmhqv_km4                        0x0000561086d891b5 <unavailable> + 4533

    5    libc.so.6                          0x00002ba812fc1460 __libc_start_main +
    245

    6    tmpmhqv_km4                        0x0000561086d88e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660012130
- exit_code: 1
  program: "\n/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfunc starts_one_ends(n: Int)\
    \ -> Int {\n    if n == 1 {\n        return 2\n    }\n    return starts_one_ends(n\
    \ - 1) + nine(n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(starts_one_ends(n:\
    \ 1) == 1)\nassert(starts_one_ends(n: 2) == 18)\nassert(starts_one_ends(n: 3)\
    \ == 180)\nassert(starts_one_ends(n: 4) == 1800)\nassert(starts_one_ends(n: 5)\
    \ == 18000)"
  status: SyntaxError
  stderr: "/tmp/tmp6zfcxjjd.swift:8:37: error: cannot find 'nine' in scope\n    return\
    \ starts_one_ends(n - 1) + nine(n - 1)\n                                    ^~~~\n\
    /tmp/tmp6zfcxjjd.swift:8:28: error: missing argument label 'n:' in call\n    return\
    \ starts_one_ends(n - 1) + nine(n - 1)\n                           ^\n       \
    \                    n: \n"
  stdout: ''
  timestamp: 1660012233
- exit_code: -4
  program: "\n/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfunc starts_one_ends(n: Int)\
    \ -> Int {\n  if n <= 1 {\n    return 0\n  }\n  if n == 2 {\n    return 9\n  }\n\
    \  var sum = 9\n  var high = 1\n  for _ in 1..<n {\n    high *= 10\n    sum +=\
    \ 10 * high\n  }\n  return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(starts_one_ends(n:\
    \ 1) == 1)\nassert(starts_one_ends(n: 2) == 18)\nassert(starts_one_ends(n: 3)\
    \ == 180)\nassert(starts_one_ends(n: 4) == 1800)\nassert(starts_one_ends(n: 5)\
    \ == 18000)"
  status: Exception
  stderr: 'tmpotgpiyit/tmpotgpiyit.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b86a9d1bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b86a9a12b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b86a9a12988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b86a9a117b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpotgpiyit                        0x0000560bc1ce4335 <unavailable> + 4917

    5    libc.so.6                          0x00002b86a9f07460 __libc_start_main +
    245

    6    tmpotgpiyit                        0x0000560bc1ce3fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660012234
- exit_code: 1
  program: "\n/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfunc starts_one_ends(n: Int)\
    \ -> Int {\n    var total = 0\n    for i in 1...n {\n        total += ends_one(n:\
    \ i)\n    }\n    return total\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(starts_one_ends(n:\
    \ 1) == 1)\nassert(starts_one_ends(n: 2) == 18)\nassert(starts_one_ends(n: 3)\
    \ == 180)\nassert(starts_one_ends(n: 4) == 1800)\nassert(starts_one_ends(n: 5)\
    \ == 18000)"
  status: SyntaxError
  stderr: "/tmp/tmpq_0b2pxi.swift:7:18: error: cannot find 'ends_one' in scope\n \
    \       total += ends_one(n: i)\n                 ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660012233
- exit_code: -4
  program: "\n/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfunc starts_one_ends(n: Int)\
    \ -> Int {\n    precondition(n > 0)\n    if n == 1 {\n        return 1\n    }\n\
    \    var dp = [1, 1]\n    for i in 2...n {\n        dp.append(dp[i - 1] + dp[i\
    \ - 2])\n    }\n    return dp[n]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(starts_one_ends(n:\
    \ 1) == 1)\nassert(starts_one_ends(n: 2) == 18)\nassert(starts_one_ends(n: 3)\
    \ == 180)\nassert(starts_one_ends(n: 4) == 1800)\nassert(starts_one_ends(n: 5)\
    \ == 18000)"
  status: Exception
  stderr: 'tmpn6jbamla/tmpn6jbamla.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aad5ef51c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aad5ec48b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aad5ec48988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aad5ec477b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn6jbamla                        0x000055ac08c78570 <unavailable> + 5488

    5    libc.so.6                          0x00002aad5f13d460 __libc_start_main +
    245

    6    tmpn6jbamla                        0x000055ac08c781a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660012234
- exit_code: 1
  program: "\n/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfunc starts_one_ends(n: Int)\
    \ -> Int {\n  if n == 1 {\n    return 1\n  }\n  let r = starts_one_ends(n - 1)\n\
    \  return r + 9 * r\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(starts_one_ends(n:\
    \ 1) == 1)\nassert(starts_one_ends(n: 2) == 18)\nassert(starts_one_ends(n: 3)\
    \ == 180)\nassert(starts_one_ends(n: 4) == 1800)\nassert(starts_one_ends(n: 5)\
    \ == 18000)"
  status: SyntaxError
  stderr: "/tmp/tmpf_iy_vgx.swift:8:27: error: missing argument label 'n:' in call\n\
    \  let r = starts_one_ends(n - 1)\n                          ^\n             \
    \             n: \n"
  stdout: ''
  timestamp: 1660012233
- exit_code: -4
  program: "\n/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfunc starts_one_ends(n: Int)\
    \ -> Int {\n    // n = 1, only 1.\n    // n = 2, 10 and 11, total 2.\n    // n\
    \ = 3, 100, 101, 110, 111, total 4.\n    // n = 4, 1000, 1001, 1010, 1011, 1100,\
    \ 1101, 1110, 1111, total 8.\n    // so f(n) = f(n-1) + f(n-2)\n    if n == 1\
    \ {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    var\
    \ ans = 0\n    var prev = 2, prev_prev = 1\n    for _ in 3...n {\n        ans\
    \ = prev + prev_prev\n        prev_prev = prev\n        prev = ans\n    }\n  \
    \  return ans\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(starts_one_ends(n:\
    \ 1) == 1)\nassert(starts_one_ends(n: 2) == 18)\nassert(starts_one_ends(n: 3)\
    \ == 180)\nassert(starts_one_ends(n: 4) == 1800)\nassert(starts_one_ends(n: 5)\
    \ == 18000)"
  status: Exception
  stderr: 'tmp93pxkprq/tmp93pxkprq.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b28263e8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b28260dfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b28260df988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b28260de7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp93pxkprq                        0x00005593ef5a83b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b28265d4460 __libc_start_main +
    245

    6    tmp93pxkprq                        0x00005593ef5a7fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660012234
- exit_code: 1
  program: "\n/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfunc starts_one_ends(n: Int)\
    \ -> Int {\n  if n <= 1 {\n    return 0\n  }\n  // It is obvious that for n >\
    \ 1, the answer is 10^(n-1) - 9^(n-1).\n  return power_int(10, n-1) - power_int(9,\
    \ n-1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(starts_one_ends(n: 1) ==\
    \ 1)\nassert(starts_one_ends(n: 2) == 18)\nassert(starts_one_ends(n: 3) == 180)\n\
    assert(starts_one_ends(n: 4) == 1800)\nassert(starts_one_ends(n: 5) == 18000)"
  status: SyntaxError
  stderr: "/tmp/tmplf3q5iv8.swift:9:10: error: cannot find 'power_int' in scope\n\
    \  return power_int(10, n-1) - power_int(9, n-1)\n         ^~~~~~~~~\n/tmp/tmplf3q5iv8.swift:9:31:\
    \ error: cannot find 'power_int' in scope\n  return power_int(10, n-1) - power_int(9,\
    \ n-1)\n                              ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660012234
- exit_code: 1
  program: "\n/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfunc starts_one_ends(n: Int)\
    \ -> Int {\n    let digits = count_digits(n)\n    return (n - digits) * count_digits(n\
    \ - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(starts_one_ends(n: 1) ==\
    \ 1)\nassert(starts_one_ends(n: 2) == 18)\nassert(starts_one_ends(n: 3) == 180)\n\
    assert(starts_one_ends(n: 4) == 1800)\nassert(starts_one_ends(n: 5) == 18000)"
  status: SyntaxError
  stderr: "/tmp/tmp3ljfw24z.swift:5:18: error: cannot find 'count_digits' in scope\n\
    \    let digits = count_digits(n)\n                 ^~~~~~~~~~~~\n/tmp/tmp3ljfw24z.swift:6:27:\
    \ error: cannot find 'count_digits' in scope\n    return (n - digits) * count_digits(n\
    \ - 1)\n                          ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660012234
- exit_code: 1
  program: "\n/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfunc starts_one_ends(n: Int)\
    \ -> Int {\n    if n == 1 {\n        return 1\n    } else {\n        return starts_one_ends(n\
    \ - 1) + 9 * pow(10, n - 2)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(starts_one_ends(n: 1) == 1)\nassert(starts_one_ends(n: 2) == 18)\nassert(starts_one_ends(n:\
    \ 3) == 180)\nassert(starts_one_ends(n: 4) == 1800)\nassert(starts_one_ends(n:\
    \ 5) == 18000)"
  status: SyntaxError
  stderr: "/tmp/tmpddvc37ik.swift:8:45: error: cannot find 'pow' in scope\n      \
    \  return starts_one_ends(n - 1) + 9 * pow(10, n - 2)\n                      \
    \                      ^~~\n/tmp/tmpddvc37ik.swift:8:32: error: missing argument\
    \ label 'n:' in call\n        return starts_one_ends(n - 1) + 9 * pow(10, n -\
    \ 2)\n                               ^\n                               n: \n"
  stdout: ''
  timestamp: 1660012234
- exit_code: 1
  program: "\n/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfunc starts_one_ends(n: Int)\
    \ -> Int {\n    return starts_one_ends_helper(n: n, contains_one: true)\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(starts_one_ends(n: 1) == 1)\nassert(starts_one_ends(n:\
    \ 2) == 18)\nassert(starts_one_ends(n: 3) == 180)\nassert(starts_one_ends(n: 4)\
    \ == 1800)\nassert(starts_one_ends(n: 5) == 18000)"
  status: SyntaxError
  stderr: "/tmp/tmp0lvyrmz_.swift:5:12: error: cannot find 'starts_one_ends_helper'\
    \ in scope\n    return starts_one_ends_helper(n: n, contains_one: true)\n    \
    \       ^~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660012234
- exit_code: 1
  program: "\n/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfunc starts_one_ends(n: Int)\
    \ -> Int {\n    var count = 0\n    var a: [Int] = Array(repeating: 0, count: n\
    \ + 1)\n    var b: [Int] = Array(repeating: 0, count: n + 1)\n    a[1] = b[1]\
    \ = 1\n    for i in 2...n {\n        a[i] = a[i - 1] + b[i - 1]\n        b[i]\
    \ = a[i - 1]\n    }\n    return a[n] + b[n]\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(starts_one_ends(n: 1) == 1)\nassert(starts_one_ends(n: 2) == 18)\n\
    assert(starts_one_ends(n: 3) == 180)\nassert(starts_one_ends(n: 4) == 1800)\n\
    assert(starts_one_ends(n: 5) == 18000)"
  status: SyntaxError
  stderr: "/tmp/tmp3xjdi3wj.swift:8:17: error: cannot assign value of type '()' to\
    \ subscript of type 'Int'\n    a[1] = b[1] = 1\n           ~~~~~^~~\n"
  stdout: ''
  timestamp: 1660012234
- exit_code: 1
  program: "\n/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfunc starts_one_ends(n: Int)\
    \ -> Int {\n    return 10 * count_nums(n - 1) + 9\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(starts_one_ends(n: 1) == 1)\nassert(starts_one_ends(n: 2)\
    \ == 18)\nassert(starts_one_ends(n: 3) == 180)\nassert(starts_one_ends(n: 4) ==\
    \ 1800)\nassert(starts_one_ends(n: 5) == 18000)"
  status: SyntaxError
  stderr: "/tmp/tmp8rlwxoy3.swift:5:17: error: cannot find 'count_nums' in scope\n\
    \    return 10 * count_nums(n - 1) + 9\n                ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660012234
- exit_code: 1
  program: "\n/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfunc starts_one_ends(n: Int)\
    \ -> Int {\n    // count in base 2, then convert to base 10\n    if n == 1 {\n\
    \        return 2\n    }\n    return Int(pow(2, Double(n - 1)))\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(starts_one_ends(n: 1) == 1)\nassert(starts_one_ends(n:\
    \ 2) == 18)\nassert(starts_one_ends(n: 3) == 180)\nassert(starts_one_ends(n: 4)\
    \ == 1800)\nassert(starts_one_ends(n: 5) == 18000)"
  status: SyntaxError
  stderr: "/tmp/tmp5d177lb7.swift:9:16: error: cannot find 'pow' in scope\n    return\
    \ Int(pow(2, Double(n - 1)))\n               ^~~\n"
  stdout: ''
  timestamp: 1660012234
- exit_code: -4
  program: "\n/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfunc starts_one_ends(n: Int)\
    \ -> Int {\n    // TODO\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(starts_one_ends(n: 1) == 1)\nassert(starts_one_ends(n: 2) == 18)\nassert(starts_one_ends(n:\
    \ 3) == 180)\nassert(starts_one_ends(n: 4) == 1800)\nassert(starts_one_ends(n:\
    \ 5) == 18000)"
  status: Exception
  stderr: 'tmph4rjtxvi/tmph4rjtxvi.swift:22: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8b17141c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8b16e38b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8b16e38988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8b16e377b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmph4rjtxvi                        0x000055acf4cfd1b5 <unavailable> + 4533

    5    libc.so.6                          0x00002b8b1732d460 __libc_start_main +
    245

    6    tmph4rjtxvi                        0x000055acf4cfce69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: 1
  program: "\n/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfunc starts_one_ends(n: Int)\
    \ -> Int {\n    if n == 1 {\n        return 10\n    } else if n == 2 {\n     \
    \   return 100\n    } else {\n        return 9 * Int(pow(10.0, Float(n - 1)))\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(starts_one_ends(n: 1) ==\
    \ 1)\nassert(starts_one_ends(n: 2) == 18)\nassert(starts_one_ends(n: 3) == 180)\n\
    assert(starts_one_ends(n: 4) == 1800)\nassert(starts_one_ends(n: 5) == 18000)"
  status: SyntaxError
  stderr: "/tmp/tmpa2dn7wgd.swift:10:24: error: cannot find 'pow' in scope\n     \
    \   return 9 * Int(pow(10.0, Float(n - 1)))\n                       ^~~\n"
  stdout: ''
  timestamp: 1660012234
- exit_code: 1
  program: "\n/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfunc starts_one_ends(n: Int)\
    \ -> Int {\n    return fn_cache(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(starts_one_ends(n: 1) == 1)\nassert(starts_one_ends(n: 2) == 18)\nassert(starts_one_ends(n:\
    \ 3) == 180)\nassert(starts_one_ends(n: 4) == 1800)\nassert(starts_one_ends(n:\
    \ 5) == 18000)"
  status: SyntaxError
  stderr: "/tmp/tmplq8towq_.swift:5:12: error: cannot find 'fn_cache' in scope\n \
    \   return fn_cache(n)\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660012234
- exit_code: 1
  program: "\n/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfunc starts_one_ends(n: Int)\
    \ -> Int {\n    if n == 1 {\n        return 2\n    }\n    return ends_one_ends(n:\
    \ n - 1) + starts_one_ends(n: n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(starts_one_ends(n: 1) == 1)\nassert(starts_one_ends(n: 2) == 18)\nassert(starts_one_ends(n:\
    \ 3) == 180)\nassert(starts_one_ends(n: 4) == 1800)\nassert(starts_one_ends(n:\
    \ 5) == 18000)"
  status: SyntaxError
  stderr: "/tmp/tmpvocaczcy.swift:8:12: error: cannot find 'ends_one_ends' in scope\n\
    \    return ends_one_ends(n: n - 1) + starts_one_ends(n: n - 1)\n           ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660012234
- exit_code: 1
  program: "\n/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfunc starts_one_ends(n: Int)\
    \ -> Int {\n    if n == 1 {\n        return 2\n    }\n    return 10 * starts_one_ends(n\
    \ - 1) - (9 * starts_one_ends(n - 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(starts_one_ends(n: 1) == 1)\nassert(starts_one_ends(n: 2) == 18)\nassert(starts_one_ends(n:\
    \ 3) == 180)\nassert(starts_one_ends(n: 4) == 1800)\nassert(starts_one_ends(n:\
    \ 5) == 18000)"
  status: SyntaxError
  stderr: "/tmp/tmpimummvdp.swift:8:33: error: missing argument label 'n:' in call\n\
    \    return 10 * starts_one_ends(n - 1) - (9 * starts_one_ends(n - 2))\n     \
    \                           ^\n                                n: \n/tmp/tmpimummvdp.swift:8:63:\
    \ error: missing argument label 'n:' in call\n    return 10 * starts_one_ends(n\
    \ - 1) - (9 * starts_one_ends(n - 2))\n                                      \
    \                        ^\n                                                 \
    \             n: \n"
  stdout: ''
  timestamp: 1660012234
- exit_code: 1
  program: "\n/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfunc starts_one_ends(n: Int)\
    \ -> Int {\n    var dp = Array(repeating: 0, count: n + 1)\n    for i in 1...n\
    \ {\n        dp[i] = pow(10, i - 1)\n        if i > 1 {\n            dp[i] +=\
    \ dp[i - 1] * 9\n        }\n    }\n    return dp[n]\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(starts_one_ends(n: 1) == 1)\nassert(starts_one_ends(n: 2)\
    \ == 18)\nassert(starts_one_ends(n: 3) == 180)\nassert(starts_one_ends(n: 4) ==\
    \ 1800)\nassert(starts_one_ends(n: 5) == 18000)"
  status: SyntaxError
  stderr: "/tmp/tmp_rxri_li.swift:7:17: error: cannot find 'pow' in scope\n      \
    \  dp[i] = pow(10, i - 1)\n                ^~~\n"
  stdout: ''
  timestamp: 1660012234
- exit_code: 1
  program: "\n/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfunc starts_one_ends(n: Int)\
    \ -> Int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n      \
    \  return 4\n    }\n    let a = starts_one_ends(n - 1)\n    let b = starts_one_ends(n\
    \ - 2)\n    return a + b\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(starts_one_ends(n:\
    \ 1) == 1)\nassert(starts_one_ends(n: 2) == 18)\nassert(starts_one_ends(n: 3)\
    \ == 180)\nassert(starts_one_ends(n: 4) == 1800)\nassert(starts_one_ends(n: 5)\
    \ == 18000)"
  status: SyntaxError
  stderr: "/tmp/tmp3xulcui_.swift:11:29: error: missing argument label 'n:' in call\n\
    \    let a = starts_one_ends(n - 1)\n                            ^\n         \
    \                   n: \n/tmp/tmp3xulcui_.swift:12:29: error: missing argument\
    \ label 'n:' in call\n    let b = starts_one_ends(n - 2)\n                   \
    \         ^\n                            n: \n/tmp/tmp3xulcui_.swift:13:14: error:\
    \ cannot convert return expression of type 'String' to return type 'Int'\n   \
    \ return a + b\n           ~~^~~\n"
  stdout: ''
  timestamp: 1660012234
- exit_code: -4
  program: "\n/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfunc starts_one_ends(n: Int)\
    \ -> Int {\n  if n <= 1 {\n    return 1\n  }\n\n  var f0 = 1\n  var f1 = 1\n \
    \ var f2 = 1\n  for _ in 2..<n {\n    f2 = f1 + f0\n    f0 = f1\n    f1 = f2\n\
    \  }\n  return f2 + f0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(starts_one_ends(n:\
    \ 1) == 1)\nassert(starts_one_ends(n: 2) == 18)\nassert(starts_one_ends(n: 3)\
    \ == 180)\nassert(starts_one_ends(n: 4) == 1800)\nassert(starts_one_ends(n: 5)\
    \ == 18000)"
  status: Exception
  stderr: 'tmp02lctsa5/tmp02lctsa5.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4431482c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4431179b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4431179988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b44311787b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp02lctsa5                        0x0000563819cf63b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b443166e460 __libc_start_main +
    245

    6    tmp02lctsa5                        0x0000563819cf5fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660012234
- exit_code: -4
  program: "\n/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfunc starts_one_ends(n: Int)\
    \ -> Int {\n    guard n > 1 else { return 0 }\n    return 10 * starts_one_ends(n:\
    \ n - 1) + 9\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(starts_one_ends(n:\
    \ 1) == 1)\nassert(starts_one_ends(n: 2) == 18)\nassert(starts_one_ends(n: 3)\
    \ == 180)\nassert(starts_one_ends(n: 4) == 1800)\nassert(starts_one_ends(n: 5)\
    \ == 18000)"
  status: Exception
  stderr: 'tmp1ok_z_rp/tmp1ok_z_rp.swift:22: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b06137adc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b06134a4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b06134a4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b06134a37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1ok_z_rp                        0x0000562adbbe91b5 <unavailable> + 4533

    5    libc.so.6                          0x00002b0613999460 __libc_start_main +
    245

    6    tmp1ok_z_rp                        0x0000562adbbe8e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660012234
- exit_code: -4
  program: "\n/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfunc starts_one_ends(n: Int)\
    \ -> Int {\n    precondition(n > 0)\n    if n == 1 {\n        return 2\n    }\n\
    \    let nMinusOne = starts_one_ends(n: n - 1)\n    let nMinusTwo = starts_one_ends(n:\
    \ n - 2)\n    return nMinusOne + nMinusTwo\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(starts_one_ends(n: 1) == 1)\nassert(starts_one_ends(n: 2) == 18)\n\
    assert(starts_one_ends(n: 3) == 180)\nassert(starts_one_ends(n: 4) == 1800)\n\
    assert(starts_one_ends(n: 5) == 18000)"
  status: Exception
  stderr: 'tmpu0dztio4/tmpu0dztio4.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad491ac6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad4917bdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad4917bd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad4917bc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu0dztio4                        0x00005638a2c101b5 <unavailable> + 4533

    5    libc.so.6                          0x00002ad491cb2460 __libc_start_main +
    245

    6    tmpu0dztio4                        0x00005638a2c0fe69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660012234
- exit_code: -4
  program: "\n/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfunc starts_one_ends(n: Int)\
    \ -> Int {\n    return 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(starts_one_ends(n:\
    \ 1) == 1)\nassert(starts_one_ends(n: 2) == 18)\nassert(starts_one_ends(n: 3)\
    \ == 180)\nassert(starts_one_ends(n: 4) == 1800)\nassert(starts_one_ends(n: 5)\
    \ == 18000)"
  status: Exception
  stderr: 'tmp5vsticms/tmp5vsticms.swift:22: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002add13ae8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002add137dfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002add137df988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002add137de7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5vsticms                        0x0000563368d96230 <unavailable> + 4656

    5    libc.so.6                          0x00002add13cd4460 __libc_start_main +
    245

    6    tmp5vsticms                        0x0000563368d95e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660012234
- exit_code: 1
  program: "\n/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfunc starts_one_ends(n: Int)\
    \ -> Int {\n    if n == 1 {\n        return 2\n    } else if n == 2 {\n      \
    \  return 3\n    } else {\n        return starts_one_ends(n-1) + starts_one_ends(n-2)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(starts_one_ends(n: 1) ==\
    \ 1)\nassert(starts_one_ends(n: 2) == 18)\nassert(starts_one_ends(n: 3) == 180)\n\
    assert(starts_one_ends(n: 4) == 1800)\nassert(starts_one_ends(n: 5) == 18000)"
  status: SyntaxError
  stderr: "/tmp/tmp6g5rjfq9.swift:10:32: error: missing argument label 'n:' in call\n\
    \        return starts_one_ends(n-1) + starts_one_ends(n-2)\n                \
    \               ^\n                               n: \n/tmp/tmp6g5rjfq9.swift:10:55:\
    \ error: missing argument label 'n:' in call\n        return starts_one_ends(n-1)\
    \ + starts_one_ends(n-2)\n                                                   \
    \   ^\n                                                      n: \n"
  stdout: ''
  timestamp: 1660012234
- exit_code: 1
  program: "\n/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfunc starts_one_ends(n: Int)\
    \ -> Int {\n    return ends_one_ends(n) + ends_zero_ends(n)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(starts_one_ends(n: 1) == 1)\nassert(starts_one_ends(n:\
    \ 2) == 18)\nassert(starts_one_ends(n: 3) == 180)\nassert(starts_one_ends(n: 4)\
    \ == 1800)\nassert(starts_one_ends(n: 5) == 18000)"
  status: SyntaxError
  stderr: "/tmp/tmpstwp7grg.swift:5:12: error: cannot find 'ends_one_ends' in scope\n\
    \    return ends_one_ends(n) + ends_zero_ends(n)\n           ^~~~~~~~~~~~~\n/tmp/tmpstwp7grg.swift:5:31:\
    \ error: cannot find 'ends_zero_ends' in scope\n    return ends_one_ends(n) +\
    \ ends_zero_ends(n)\n                              ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660012234
- exit_code: 1
  program: "\n/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfunc starts_one_ends(n: Int)\
    \ -> Int {\n    var dp = Array(count: n + 1, repeatedValue: 0)\n    var c = 1\n\
    \    dp[0] = 0\n    dp[1] = 1\n    dp[2] = 10\n    for i in 3...n {\n        c\
    \ *= 10\n        dp[i] = dp[i - 1] * 9 + c\n    }\n    return dp[n]\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(starts_one_ends(n: 1) == 1)\nassert(starts_one_ends(n:\
    \ 2) == 18)\nassert(starts_one_ends(n: 3) == 180)\nassert(starts_one_ends(n: 4)\
    \ == 1800)\nassert(starts_one_ends(n: 5) == 18000)"
  status: SyntaxError
  stderr: "/tmp/tmp8ji9d4va.swift:5:14: error: no exact matches in call to initializer\
    \ \n    var dp = Array(count: n + 1, repeatedValue: 0)\n             ^\n/tmp/tmp8ji9d4va.swift:5:14:\
    \ note: candidate has partially matching parameter list (repeating: _, count:\
    \ Int)\n    var dp = Array(count: n + 1, repeatedValue: 0)\n             ^\n/tmp/tmp8ji9d4va.swift:5:14:\
    \ note: candidate has partially matching parameter list (repeating: _, count:\
    \ Int)\n    var dp = Array(count: n + 1, repeatedValue: 0)\n             ^\n"
  stdout: ''
  timestamp: 1660012234
- exit_code: -4
  program: "\n/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfunc starts_one_ends(n: Int)\
    \ -> Int {\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n      \
    \  return 2\n    }\n    var nums = [Int](repeating: 0, count: n + 1)\n    nums[1]\
    \ = 1\n    nums[2] = 2\n    for i in 3...n {\n        nums[i] = nums[i - 1] +\
    \ nums[i - 2]\n    }\n    return nums[n]\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(starts_one_ends(n: 1) == 1)\nassert(starts_one_ends(n: 2) == 18)\nassert(starts_one_ends(n:\
    \ 3) == 180)\nassert(starts_one_ends(n: 4) == 1800)\nassert(starts_one_ends(n:\
    \ 5) == 18000)"
  status: Exception
  stderr: 'tmpbgoevn4s/tmpbgoevn4s.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b15f50b8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b15f4dafb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b15f4daf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b15f4dae7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbgoevn4s                        0x0000557bb2f0a4d0 <unavailable> + 5328

    5    libc.so.6                          0x00002b15f52a4460 __libc_start_main +
    245

    6    tmpbgoevn4s                        0x0000557bb2f0a109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012234
- exit_code: 1
  program: "\n/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfunc starts_one_ends(n: Int)\
    \ -> Int {\n    var res = 0\n    for len in 1...n {\n        res += starts_one_ends(n:\
    \ n, len: len)\n    }\n    return res\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(starts_one_ends(n: 1) == 1)\nassert(starts_one_ends(n: 2) == 18)\nassert(starts_one_ends(n:\
    \ 3) == 180)\nassert(starts_one_ends(n: 4) == 1800)\nassert(starts_one_ends(n:\
    \ 5) == 18000)"
  status: SyntaxError
  stderr: "/tmp/tmpmxxhnldc.swift:7:43: error: extra argument 'len' in call\n    \
    \    res += starts_one_ends(n: n, len: len)\n                              ~~~~~~~~~~~~^~~~\n"
  stdout: ''
  timestamp: 1660012234
- exit_code: 1
  program: "\n/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfunc starts_one_ends(n: Int)\
    \ -> Int {\n    assert(n > 0, \"Unsupported size\")\n    let count = pow(10, Double(n))\
    \ - pow(9, Double(n))\n    return Int(count)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(starts_one_ends(n: 1) == 1)\nassert(starts_one_ends(n: 2) == 18)\n\
    assert(starts_one_ends(n: 3) == 180)\nassert(starts_one_ends(n: 4) == 1800)\n\
    assert(starts_one_ends(n: 5) == 18000)"
  status: SyntaxError
  stderr: "/tmp/tmpig2mrmu0.swift:6:17: error: cannot find 'pow' in scope\n    let\
    \ count = pow(10, Double(n)) - pow(9, Double(n))\n                ^~~\n/tmp/tmpig2mrmu0.swift:6:38:\
    \ error: cannot find 'pow' in scope\n    let count = pow(10, Double(n)) - pow(9,\
    \ Double(n))\n                                     ^~~\n"
  stdout: ''
  timestamp: 1660012234
