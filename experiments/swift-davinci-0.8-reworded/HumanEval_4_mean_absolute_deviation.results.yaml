language: swift
name: HumanEval_4_mean_absolute_deviation
results:
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n  let mean = average(numbers: numbers)\n  let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n  return average(numbers: absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpg9o9essh.swift:10:14: error: cannot find 'average' in scope\n \
    \ let mean = average(numbers: numbers)\n             ^~~~~~~\n/tmp/tmpg9o9essh.swift:12:10:\
    \ error: cannot find 'average' in scope\n  return average(numbers: absolute_deviations)\n\
    \         ^~~~~~~\n"
  stdout: ''
  timestamp: 1660009080
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    let differences\
    \ = numbers.map({ abs($0 - mean) })\n    return mean_of_numbers(numbers: differences)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpxjattk3g.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmpxjattk3g.swift:12:12: error: cannot find 'mean_of_numbers' in scope\n\
    \    return mean_of_numbers(numbers: differences)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009080
- exit_code: 0
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = numbers.reduce(0, +) / Double(numbers.count)\n \
    \   return numbers.map { abs($0 - mean) }.reduce(0, +) / Double(numbers.count)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009080
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = numbers.mean()\n    let absolute_deviations = numbers.map\
    \ { abs($0 - mean) }\n    return absolute_deviations.mean()\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpitwtxez9.swift:10:24: error: value of type '[Double]' has no member\
    \ 'mean'\n    let mean = numbers.mean()\n               ~~~~~~~ ^~~~\n"
  stdout: ''
  timestamp: 1660009080
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    if numbers.count == 0 {\n        print(\"mean_absolute_deviation()\
    \ called with empty list\")\n        return Double.nan\n    }\n    let mean =\
    \ numbers.mean()\n    let abs_devs = numbers.map({abs($0 - mean)})\n    return\
    \ abs_devs.mean()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp9w9d8_6r.swift:14:24: error: value of type '[Double]' has no member\
    \ 'mean'\n    let mean = numbers.mean()\n               ~~~~~~~ ^~~~\n"
  stdout: ''
  timestamp: 1660009080
- exit_code: 0
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    if numbers.count == 0 {\n        return 0.0\n    }\n    let\
    \ mean = numbers.reduce(0.0, +) / Double(numbers.count)\n    return numbers.map\
    \ { abs($0 - mean) }.reduce(0.0, +) / Double(numbers.count)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009080
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    if numbers.count == 0 {\n        return Double.nan\n    }\n\
    \    let mean = average(numbers: numbers)\n    let absolute_values = numbers.map\
    \ { abs($0 - mean) }\n    return average(numbers: absolute_values)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpvxi5ceg5.swift:13:16: error: cannot find 'average' in scope\n \
    \   let mean = average(numbers: numbers)\n               ^~~~~~~\n/tmp/tmpvxi5ceg5.swift:15:12:\
    \ error: cannot find 'average' in scope\n    return average(numbers: absolute_values)\n\
    \           ^~~~~~~\n"
  stdout: ''
  timestamp: 1660009080
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n  let mean = mean_double(numbers: numbers)\n  var sum = 0.0\n \
    \ for val in numbers {\n    sum += abs(val - mean)\n  }\n  return sum / Double(numbers.count)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpcc63382i.swift:10:14: error: cannot find 'mean_double' in scope\n\
    \  let mean = mean_double(numbers: numbers)\n             ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009080
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let avg = average(numbers: numbers)\n    let differences =\
    \ numbers.map {abs($0 - avg)}\n    return average(numbers: differences)\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpvw5r5ab2.swift:10:15: error: cannot find 'average' in scope\n \
    \   let avg = average(numbers: numbers)\n              ^~~~~~~\n/tmp/tmpvw5r5ab2.swift:12:12:\
    \ error: cannot find 'average' in scope\n    return average(numbers: differences)\n\
    \           ^~~~~~~\n"
  stdout: ''
  timestamp: 1660009080
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_array(numbers: numbers)\n    let mean_difference\
    \ = numbers.map({ abs($0 - mean) })\n    return mean_of_array(numbers: mean_difference)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpjj800_ei.swift:10:16: error: cannot find 'mean_of_array' in scope\n\
    \    let mean = mean_of_array(numbers: numbers)\n               ^~~~~~~~~~~~~\n\
    /tmp/tmpjj800_ei.swift:12:12: error: cannot find 'mean_of_array' in scope\n  \
    \  return mean_of_array(numbers: mean_difference)\n           ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009080
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    var abs_differences:\
    \ [Double] = []\n    for number in numbers {\n        abs_differences.append(abs(number\
    \ - mean))\n    }\n    return mean_of_numbers(numbers: abs_differences)\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp98mdg8ty.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmp98mdg8ty.swift:15:12: error: cannot find 'mean_of_numbers' in scope\n\
    \    return mean_of_numbers(numbers: abs_differences)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009080
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n  if numbers.count == 0 {\n    return 0.0\n  }\n  var total = 0.0\n\
    \  for number in numbers {\n    total += abs(number - mean(numbers: numbers))\n\
    \  }\n  return total / Double(numbers.count)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp_hkopsu6.swift:15:27: error: cannot find 'mean' in scope\n    total\
    \ += abs(number - mean(numbers: numbers))\n                          ^~~~\n"
  stdout: ''
  timestamp: 1660009080
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let length = Double(numbers.count)\n    let mean = arithmetic_mean(numbers:\
    \ numbers)\n    let difference = numbers.map { abs($0 - mean) }\n    return arithmetic_mean(numbers:\
    \ difference)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpc2oe0o9y.swift:11:16: error: cannot find 'arithmetic_mean' in scope\n\
    \    let mean = arithmetic_mean(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmpc2oe0o9y.swift:13:12: error: cannot find 'arithmetic_mean' in scope\n\
    \    return arithmetic_mean(numbers: difference)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009080
- exit_code: 0
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n  let n = Double(numbers.count)\n  let sum = numbers.reduce(0,\
    \ +)\n  let mean = sum / n\n  let abs_diffs_sum = numbers.map { abs($0 - mean)\
    \ }.reduce(0, +)\n  return abs_diffs_sum / n\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009080
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let n = Double(numbers.count)\n    let sum_of_abs = numbers.reduce(0.0,\
    \ { $0 + abs($1) })\n    let mean = sum_of_abs / n\n    let squared_diffs = numbers.map\
    \ { pow($0 - mean, 2.0) }\n    let sum_of_squared_diffs = squared_diffs.reduce(0.0,\
    \ { $0 + $1 })\n    let mean_abs_dev = sqrt(sum_of_squared_diffs / n)\n    return\
    \ mean_abs_dev\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpqhw0xegm.swift:13:39: error: cannot find 'pow' in scope\n    let\
    \ squared_diffs = numbers.map { pow($0 - mean, 2.0) }\n                      \
    \                ^~~\n/tmp/tmpqhw0xegm.swift:15:24: error: cannot find 'sqrt'\
    \ in scope\n    let mean_abs_dev = sqrt(sum_of_squared_diffs / n)\n          \
    \             ^~~~\n"
  stdout: ''
  timestamp: 1660009080
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    return mean_of_magnitudes(numbers: deviation_from_mean(numbers:\
    \ numbers))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpv7023qkj.swift:10:12: error: cannot find 'mean_of_magnitudes' in\
    \ scope\n    return mean_of_magnitudes(numbers: deviation_from_mean(numbers: numbers))\n\
    \           ^~~~~~~~~~~~~~~~~~\n/tmp/tmpv7023qkj.swift:10:40: error: cannot find\
    \ 'deviation_from_mean' in scope\n    return mean_of_magnitudes(numbers: deviation_from_mean(numbers:\
    \ numbers))\n                                       ^~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009080
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = average(numbers: numbers)\n    let deviations =\
    \ numbers.map { abs($0 - mean) }\n    return average(numbers: deviations)\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp0bepx4kx.swift:10:16: error: cannot find 'average' in scope\n \
    \   let mean = average(numbers: numbers)\n               ^~~~~~~\n/tmp/tmp0bepx4kx.swift:12:12:\
    \ error: cannot find 'average' in scope\n    return average(numbers: deviations)\n\
    \           ^~~~~~~\n"
  stdout: ''
  timestamp: 1660009080
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    let absolute_diffs\
    \ = numbers.map{ abs($0 - mean) }\n    return mean_of_numbers(numbers: absolute_diffs)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpkgr01f7o.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmpkgr01f7o.swift:12:12: error: cannot find 'mean_of_numbers' in scope\n\
    \    return mean_of_numbers(numbers: absolute_diffs)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009080
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let dev_from_mean = deviation_from_mean(numbers: numbers)\n\
    \    let mean_abs_dev = mean(numbers: dev_from_mean)\n    return mean_abs_dev\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpu0zbf0id.swift:10:25: error: cannot find 'deviation_from_mean'\
    \ in scope\n    let dev_from_mean = deviation_from_mean(numbers: numbers)\n  \
    \                      ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpu0zbf0id.swift:11:24: error:\
    \ cannot find 'mean' in scope\n    let mean_abs_dev = mean(numbers: dev_from_mean)\n\
    \                       ^~~~\n"
  stdout: ''
  timestamp: 1660009080
- exit_code: 0
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    // return mean(numbers: numbers);\n    let mean = numbers.reduce(0,\
    \ +) / Double(numbers.count)\n    let deviations = numbers.map({ abs($0 - mean)\
    \ })\n    return deviations.reduce(0, +) / Double(deviations.count)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009080
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    \n    let mean = numbers.mean()\n    let absolute_distances\
    \ = numbers.map { abs($0 - mean) }\n    return absolute_distances.mean()\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp4nlsagoi.swift:11:24: error: value of type '[Double]' has no member\
    \ 'mean'\n    let mean = numbers.mean()\n               ~~~~~~~ ^~~~\n"
  stdout: ''
  timestamp: 1660009080
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    guard numbers.count > 0 else {\n        return 0.0\n    }\n\
    \    let x_mean = mean(numbers: numbers)\n    var numerator = 0.0\n    for x in\
    \ numbers {\n        numerator += abs(x - x_mean)\n    }\n    return numerator\
    \ / Double(numbers.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp82gdrh3q.swift:13:18: error: cannot find 'mean' in scope\n    let\
    \ x_mean = mean(numbers: numbers)\n                 ^~~~\n"
  stdout: ''
  timestamp: 1660009080
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    guard numbers.count > 0 else {\n        return 0.0\n    }\n\
    \    let mean = numbers.reduce(0.0, combine: +) / Double(numbers.count)\n    let\
    \ d = numbers.map { abs($0 - mean) }\n    return d.reduce(0.0, combine: +) / Double(d.count)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp5_7abwee.swift:13:30: error: extraneous argument label 'combine:'\
    \ in call\n    let mean = numbers.reduce(0.0, combine: +) / Double(numbers.count)\n\
    \                             ^     ~~~~~~~~~\n                              \
    \     \n"
  stdout: ''
  timestamp: 1660009080
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let x_mean = mean(numbers: numbers)\n    var absolute_differences:\
    \ [Double] = []\n    for number in numbers {\n        absolute_differences.append(abs(number\
    \ - x_mean))\n    }\n    return mean(numbers: absolute_differences)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp9sz63v0p.swift:10:18: error: cannot find 'mean' in scope\n    let\
    \ x_mean = mean(numbers: numbers)\n                 ^~~~\n/tmp/tmp9sz63v0p.swift:15:12:\
    \ error: cannot find 'mean' in scope\n    return mean(numbers: absolute_differences)\n\
    \           ^~~~\n"
  stdout: ''
  timestamp: 1660009080
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n  let mean = numbers.mean()\n  return numbers.map { fabs($0 - mean)\
    \ }.mean()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmps09i9shq.swift:10:22: error: value of type '[Double]' has no member\
    \ 'mean'\n  let mean = numbers.mean()\n             ~~~~~~~ ^~~~\n/tmp/tmps09i9shq.swift:11:24:\
    \ error: cannot find 'fabs' in scope\n  return numbers.map { fabs($0 - mean) }.mean()\n\
    \                       ^~~~\n"
  stdout: ''
  timestamp: 1660009080
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    if numbers.count == 0 {\n        return 0.0\n    }\n    let\
    \ mean = calculate_mean(numbers: numbers)\n    let absolute_deviations = numbers.map\
    \ { abs($0 - mean) }\n    return calculate_mean(numbers: absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpnx0ruvcx.swift:13:16: error: cannot find 'calculate_mean' in scope\n\
    \    let mean = calculate_mean(numbers: numbers)\n               ^~~~~~~~~~~~~~\n\
    /tmp/tmpnx0ruvcx.swift:15:12: error: cannot find 'calculate_mean' in scope\n \
    \   return calculate_mean(numbers: absolute_deviations)\n           ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009080
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    guard numbers.count > 0 else {\n        return 0.0\n    }\n\
    \    let mean = mean_arithmetic(numbers: numbers)\n    let deviations = numbers.map\
    \ { abs($0 - mean) }\n    return mean_arithmetic(numbers: deviations)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpn828chxn.swift:13:16: error: cannot find 'mean_arithmetic' in scope\n\
    \    let mean = mean_arithmetic(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmpn828chxn.swift:15:12: error: cannot find 'mean_arithmetic' in scope\n\
    \    return mean_arithmetic(numbers: deviations)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009080
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = average(numbers: numbers)\n    var sum = 0.0\n \
    \   for number in numbers {\n        sum += abs(number - mean)\n    }\n    return\
    \ sum / Double(numbers.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpw_rjtwdr.swift:10:16: error: cannot find 'average' in scope\n \
    \   let mean = average(numbers: numbers)\n               ^~~~~~~\n"
  stdout: ''
  timestamp: 1660009080
- exit_code: 0
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let sum = numbers.reduce(0, +)\n    let mean = sum / Double(numbers.count)\n\
    \    let deviations = numbers.map { abs($0 - mean) }\n    let sumOfDeviations\
    \ = deviations.reduce(0, +)\n    return sumOfDeviations / Double(numbers.count)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009080
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = average(numbers: numbers)\n    var sum_dist = 0.0\n\
    \    for i in 0 ..< numbers.count {\n        sum_dist += abs(numbers[i] - mean)\n\
    \    }\n    return sum_dist / Double(numbers.count)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp9rs3zh95.swift:10:16: error: cannot find 'average' in scope\n \
    \   let mean = average(numbers: numbers)\n               ^~~~~~~\n"
  stdout: ''
  timestamp: 1660009080
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    return numbers.mean_absolute_deviation\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpur2ul8w1.swift:10:20: error: value of type '[Double]' has no member\
    \ 'mean_absolute_deviation'\n    return numbers.mean_absolute_deviation\n    \
    \       ~~~~~~~ ^~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009080
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = average(numbers: numbers)\n    var abs_deviations\
    \ = [Double]()\n    for num in numbers {\n        abs_deviations.append(abs(num\
    \ - mean))\n    }\n    return average(numbers: abs_deviations)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmplrwdlx96.swift:10:16: error: cannot find 'average' in scope\n \
    \   let mean = average(numbers: numbers)\n               ^~~~~~~\n/tmp/tmplrwdlx96.swift:15:12:\
    \ error: cannot find 'average' in scope\n    return average(numbers: abs_deviations)\n\
    \           ^~~~~~~\n"
  stdout: ''
  timestamp: 1660009080
- exit_code: 0
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let n = Double(numbers.count)\n    let mean = numbers.reduce(0.0,\
    \ +) / n\n    let deviations = numbers.map { abs($0 - mean) }\n    return deviations.reduce(0.0,\
    \ +) / n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009080
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_arithmetic(numbers: numbers)\n    var total:\
    \ Double = 0.0\n    for number in numbers {\n        total += abs(number - mean)\n\
    \    }\n    return total / Double(numbers.count)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp_9_auqzy.swift:10:16: error: cannot find 'mean_arithmetic' in scope\n\
    \    let mean = mean_arithmetic(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009080
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_average(numbers: numbers)\n    let result =\
    \ numbers.map { fabs($0 - mean) }.reduce(0, +) / Double(numbers.count)\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpx3yf4l82.swift:10:16: error: cannot find 'mean_average' in scope\n\
    \    let mean = mean_average(numbers: numbers)\n               ^~~~~~~~~~~~\n\
    /tmp/tmpx3yf4l82.swift:11:32: error: cannot find 'fabs' in scope\n    let result\
    \ = numbers.map { fabs($0 - mean) }.reduce(0, +) / Double(numbers.count)\n   \
    \                            ^~~~\n"
  stdout: ''
  timestamp: 1660009080
- exit_code: -4
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let n = Double(numbers.count)\n    let sum_of_squares = numbers.reduce(0.0)\
    \ { (partialResult, number) -> Double in\n        return partialResult + number\
    \ * number\n    }\n    let mean = sum_of_squares / n\n    let sum_absolute_deviations\
    \ = numbers.reduce(0.0) { (partialResult, number) -> Double in\n        return\
    \ partialResult + abs(number - mean)\n    }\n    return sum_absolute_deviations\
    \ / n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: Exception
  stderr: 'tmpy9rb6j1v/tmpy9rb6j1v.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b421cce5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b421c9dcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b421c9dc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b421c9db7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy9rb6j1v                        0x000055e77c000503 <unavailable> + 5379

    5    libc.so.6                          0x00002b421ced1460 __libc_start_main +
    245

    6    tmpy9rb6j1v                        0x000055e77c000159 <unavailable> + 4441

    '
  stdout: ''
  timestamp: 1660009080
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean: Double = mean_value(numbers: numbers)\n    var deviations:\
    \ [Double] = []\n    for n in numbers {\n        deviations.append(abs(n - mean))\n\
    \    }\n    return mean_value(numbers: deviations)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpr_jcikun.swift:10:24: error: cannot find 'mean_value' in scope\n\
    \    let mean: Double = mean_value(numbers: numbers)\n                       ^~~~~~~~~~\n\
    /tmp/tmpr_jcikun.swift:15:12: error: cannot find 'mean_value' in scope\n    return\
    \ mean_value(numbers: deviations)\n           ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009080
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = average(numbers: numbers)\n    let dev_list = numbers.map\
    \ { (x: Double) -> Double in\n        return abs(x - mean)\n    }\n    return\
    \ average(numbers: dev_list)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpxp5z200h.swift:10:16: error: cannot find 'average' in scope\n \
    \   let mean = average(numbers: numbers)\n               ^~~~~~~\n/tmp/tmpxp5z200h.swift:14:12:\
    \ error: cannot find 'average' in scope\n    return average(numbers: dev_list)\n\
    \           ^~~~~~~\n"
  stdout: ''
  timestamp: 1660009080
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    // average of absolute differences: average(|a - b|)\n    let\
    \ abs_differences = numbers.map { abs($0 - mean(numbers: numbers)) }\n    return\
    \ mean(numbers: abs_differences)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp6t6su01h.swift:11:50: error: cannot find 'mean' in scope\n    let\
    \ abs_differences = numbers.map { abs($0 - mean(numbers: numbers)) }\n       \
    \                                          ^~~~\n/tmp/tmp6t6su01h.swift:12:12:\
    \ error: cannot find 'mean' in scope\n    return mean(numbers: abs_differences)\n\
    \           ^~~~\n"
  stdout: ''
  timestamp: 1660009080
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    return average( numbers.map { abs($0 - average(numbers)) }\
    \ )\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpb5v6wncl.swift:10:12: error: cannot find 'average' in scope\n \
    \   return average( numbers.map { abs($0 - average(numbers)) } )\n           ^~~~~~~\n\
    /tmp/tmpb5v6wncl.swift:10:44: error: cannot find 'average' in scope\n    return\
    \ average( numbers.map { abs($0 - average(numbers)) } )\n                    \
    \                       ^~~~~~~\n"
  stdout: ''
  timestamp: 1660009080
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let center = mean(numbers: numbers)\n    return mean(numbers:\
    \ numbers.map { abs($0 - center) })\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp2qeip8ih.swift:10:18: error: cannot find 'mean' in scope\n    let\
    \ center = mean(numbers: numbers)\n                 ^~~~\n/tmp/tmp2qeip8ih.swift:11:12:\
    \ error: cannot find 'mean' in scope\n    return mean(numbers: numbers.map { abs($0\
    \ - center) })\n           ^~~~\n"
  stdout: ''
  timestamp: 1660009080
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_arr(array: numbers)\n    let diffs = numbers.map\
    \ { abs($0 - mean) }\n    return mean_arr(array: diffs)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmptfp90871.swift:10:16: error: cannot find 'mean_arr' in scope\n\
    \    let mean = mean_arr(array: numbers)\n               ^~~~~~~~\n/tmp/tmptfp90871.swift:12:12:\
    \ error: cannot find 'mean_arr' in scope\n    return mean_arr(array: diffs)\n\
    \           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660009080
- exit_code: 0
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let sum = numbers.reduce(0, +)\n    let mean = sum / Double(numbers.count)\n\
    \    let absolute_differences = numbers.map { abs($0 - mean) }\n    let sum_of_absolute_differences\
    \ = absolute_differences.reduce(0, +)\n    return sum_of_absolute_differences\
    \ / Double(numbers.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009080
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_value(numbers: numbers)\n    let deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_value(numbers: deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpj0_y1rlq.swift:10:16: error: cannot find 'mean_value' in scope\n\
    \    let mean = mean_value(numbers: numbers)\n               ^~~~~~~~~~\n/tmp/tmpj0_y1rlq.swift:12:12:\
    \ error: cannot find 'mean_value' in scope\n    return mean_value(numbers: deviations)\n\
    \           ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009080
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = numbers.mean()\n    let deviations = numbers.map\
    \ { abs($0 - mean) }\n    return deviations.mean()\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp26619om8.swift:10:24: error: value of type '[Double]' has no member\
    \ 'mean'\n    let mean = numbers.mean()\n               ~~~~~~~ ^~~~\n"
  stdout: ''
  timestamp: 1660009080
- exit_code: 0
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let sum = numbers.reduce(0, +)\n    let mean = sum / Double(numbers.count)\n\
    \    let abs_deviations = numbers.map { abs($0 - mean) }\n    let sum_of_abs_deviations\
    \ = abs_deviations.reduce(0, +)\n    return sum_of_abs_deviations / Double(numbers.count)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009080
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    return mean_absolute_deviation(numbers: numbers, average: arithmetic_mean(numbers:\
    \ numbers))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp5nu7a_r6.swift:10:63: error: cannot find 'arithmetic_mean' in scope\n\
    \    return mean_absolute_deviation(numbers: numbers, average: arithmetic_mean(numbers:\
    \ numbers))\n                                                              ^~~~~~~~~~~~~~~\n\
    /tmp/tmp5nu7a_r6.swift:10:63: error: extra argument 'average' in call\n    return\
    \ mean_absolute_deviation(numbers: numbers, average: arithmetic_mean(numbers:\
    \ numbers))\n                                  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009080
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_arithmetic(numbers: numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_arithmetic(numbers: absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpsxlmdp2z.swift:10:16: error: cannot find 'mean_arithmetic' in scope\n\
    \    let mean = mean_arithmetic(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmpsxlmdp2z.swift:12:12: error: cannot find 'mean_arithmetic' in scope\n\
    \    return mean_arithmetic(numbers: absolute_deviations)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009080
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = average(numbers: numbers)\n    let deviations =\
    \ numbers.map { abs($0 - mean) }\n    return average(numbers: deviations)\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp0bepx4kx.swift:10:16: error: cannot find 'average' in scope\n \
    \   let mean = average(numbers: numbers)\n               ^~~~~~~\n/tmp/tmp0bepx4kx.swift:12:12:\
    \ error: cannot find 'average' in scope\n    return average(numbers: deviations)\n\
    \           ^~~~~~~\n"
  stdout: ''
  timestamp: 1660009080
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_array(numbers: numbers)\n    var sum = 0.0\n\
    \    for number in numbers {\n        sum += abs(number - mean)\n    }\n    return\
    \ sum / Double(numbers.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpk1vt_m8l.swift:10:16: error: cannot find 'mean_of_array' in scope\n\
    \    let mean = mean_of_array(numbers: numbers)\n               ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009080
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    if numbers.count == 0 {\n        return 0.0\n    }\n    let\
    \ mean = mean_of_numbers(numbers: numbers)\n    let absolute_values = numbers.map\
    \ { abs($0 - mean) }\n    return mean_of_numbers(numbers: absolute_values)\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmptlqngh40.swift:13:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmptlqngh40.swift:15:12: error: cannot find 'mean_of_numbers' in scope\n\
    \    return mean_of_numbers(numbers: absolute_values)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009080
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = numbers.mean()\n    return numbers.map{ abs($0 -\
    \ mean) }.mean()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpz856uw9a.swift:10:24: error: value of type '[Double]' has no member\
    \ 'mean'\n    let mean = numbers.mean()\n               ~~~~~~~ ^~~~\n/tmp/tmpz856uw9a.swift:11:42:\
    \ error: value of type '[Double]' has no member 'mean'\n    return numbers.map{\
    \ abs($0 - mean) }.mean()\n           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~~~\n"
  stdout: ''
  timestamp: 1660009080
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n  if (numbers.count < 2) {\n    return Double.nan\n  }\n  let mean\
    \ = numbers.average\n  let deviations = numbers.map { abs($0 - mean) }\n  return\
    \ deviations.average\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmppt25tntw.swift:13:22: error: value of type '[Double]' has no member\
    \ 'average'\n  let mean = numbers.average\n             ~~~~~~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1660009080
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n  let mean = mean_value(numbers: numbers)\n  var MAD = 0.0\n  for\
    \ number in numbers {\n    MAD += abs(number - mean)\n  }\n  return MAD / Double(numbers.count)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpr848mrcs.swift:10:14: error: cannot find 'mean_value' in scope\n\
    \  let mean = mean_value(numbers: numbers)\n             ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009080
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    var mad = 0.0\n    let mean = mean_of_numbers(numbers: numbers)\n\
    \    for number in numbers {\n        mad += abs(number - mean)\n    }\n    return\
    \ mad / Double(numbers.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpkck9bywv.swift:11:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009080
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_array(numbers: numbers)\n    let n = Double(numbers.count)\n\
    \    var total = 0.0\n    for number in numbers {\n        total += abs(number\
    \ - mean)\n    }\n    return total / n\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp8ujfas2m.swift:10:16: error: cannot find 'mean_of_array' in scope\n\
    \    let mean = mean_of_array(numbers: numbers)\n               ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009080
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let avg = mean(numbers: numbers)\n    let diff = numbers.map\
    \ { fabs($0 - avg) }\n    return mean(numbers: diff)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpg74kduo9.swift:10:15: error: cannot find 'mean' in scope\n    let\
    \ avg = mean(numbers: numbers)\n              ^~~~\n/tmp/tmpg74kduo9.swift:11:30:\
    \ error: cannot find 'fabs' in scope\n    let diff = numbers.map { fabs($0 - avg)\
    \ }\n                             ^~~~\n/tmp/tmpg74kduo9.swift:12:12: error: cannot\
    \ find 'mean' in scope\n    return mean(numbers: diff)\n           ^~~~\n"
  stdout: ''
  timestamp: 1660009080
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_number(numbers: numbers)\n    let differences\
    \ = numbers.map { abs($0 - mean) }\n    return mean_number(numbers: differences)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpi3sa0zfe.swift:10:16: error: cannot find 'mean_number' in scope\n\
    \    let mean = mean_number(numbers: numbers)\n               ^~~~~~~~~~~\n/tmp/tmpi3sa0zfe.swift:12:12:\
    \ error: cannot find 'mean_number' in scope\n    return mean_number(numbers: differences)\n\
    \           ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009080
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_arithmetic(numbers: numbers)\n    let deviations\
    \ = deviations_from_mean(numbers: numbers, mean: mean)\n    return mean_arithmetic(numbers:\
    \ deviations)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpadldurso.swift:10:16: error: cannot find 'mean_arithmetic' in scope\n\
    \    let mean = mean_arithmetic(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmpadldurso.swift:11:22: error: cannot find 'deviations_from_mean' in scope\n\
    \    let deviations = deviations_from_mean(numbers: numbers, mean: mean)\n   \
    \                  ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpadldurso.swift:12:12: error:\
    \ cannot find 'mean_arithmetic' in scope\n    return mean_arithmetic(numbers:\
    \ deviations)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009080
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    return mean_absolute_deviation(numbers: numbers, mean: mean(numbers:\
    \ numbers))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpxf5725gp.swift:10:60: error: cannot find 'mean' in scope\n    return\
    \ mean_absolute_deviation(numbers: numbers, mean: mean(numbers: numbers))\n  \
    \                                                         ^~~~\n/tmp/tmpxf5725gp.swift:10:60:\
    \ error: extra argument 'mean' in call\n    return mean_absolute_deviation(numbers:\
    \ numbers, mean: mean(numbers: numbers))\n                                  ~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009080
- exit_code: 0
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    // YOUR CODE HERE\n    \n    var total : Double = 0.0\n   \
    \ var mean : Double = 0.0\n    for num in numbers{\n        mean += num\n    }\n\
    \    mean = mean / Double(numbers.count)\n    for num in numbers{\n        total\
    \ += abs(num - mean)\n    }\n    return total / Double(numbers.count)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009080
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = arithmetic_mean(numbers: numbers)\n    let diffs\
    \ = numbers.map { abs($0 - mean) }\n    return arithmetic_mean(numbers: diffs)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp3nmb6xcb.swift:10:16: error: cannot find 'arithmetic_mean' in scope\n\
    \    let mean = arithmetic_mean(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmp3nmb6xcb.swift:12:12: error: cannot find 'arithmetic_mean' in scope\n\
    \    return arithmetic_mean(numbers: diffs)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009080
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_array(numbers: numbers)\n    var deviations:\
    \ [Double] = []\n    for number in numbers {\n        deviations.append(abs(number\
    \ - mean))\n    }\n    return mean_of_array(numbers: deviations)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpz89_e33m.swift:10:16: error: cannot find 'mean_of_array' in scope\n\
    \    let mean = mean_of_array(numbers: numbers)\n               ^~~~~~~~~~~~~\n\
    /tmp/tmpz89_e33m.swift:15:12: error: cannot find 'mean_of_array' in scope\n  \
    \  return mean_of_array(numbers: deviations)\n           ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009080
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_value(numbers: numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_value(numbers: absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmphkpz7tcl.swift:10:16: error: cannot find 'mean_value' in scope\n\
    \    let mean = mean_value(numbers: numbers)\n               ^~~~~~~~~~\n/tmp/tmphkpz7tcl.swift:12:12:\
    \ error: cannot find 'mean_value' in scope\n    return mean_value(numbers: absolute_deviations)\n\
    \           ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009080
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_array(numbers: numbers)\n    let deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_array(numbers: deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmphco580xl.swift:10:16: error: cannot find 'mean_of_array' in scope\n\
    \    let mean = mean_of_array(numbers: numbers)\n               ^~~~~~~~~~~~~\n\
    /tmp/tmphco580xl.swift:12:12: error: cannot find 'mean_of_array' in scope\n  \
    \  return mean_of_array(numbers: deviations)\n           ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009080
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n  let x_mean = mean(numbers: numbers)\n  let numerator = numbers.reduce(0.0)\
    \ { sum, number in\n    return sum + abs(number - x_mean)\n  }\n  return numerator\
    \ / Double(numbers.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp8_h4orhi.swift:10:16: error: cannot find 'mean' in scope\n  let\
    \ x_mean = mean(numbers: numbers)\n               ^~~~\n"
  stdout: ''
  timestamp: 1660009080
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    return standard_deviation(numbers: numbers, sample: false)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpcf2pszx7.swift:10:12: error: cannot find 'standard_deviation' in\
    \ scope\n    return standard_deviation(numbers: numbers, sample: false)\n    \
    \       ^~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009080
- exit_code: 0
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    \n    let length = Double(numbers.count)\n    let mean = numbers.reduce(0,\
    \ +) / length\n    let deviation = numbers.map { abs($0 - mean) }\n    return\
    \ deviation.reduce(0, +) / length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009081
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    return standard_deviation(numbers: numbers)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp6_bfszy3.swift:10:12: error: cannot find 'standard_deviation' in\
    \ scope\n    return standard_deviation(numbers: numbers)\n           ^~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009080
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let centerpoint = mean(numbers: numbers)\n    let deviations\
    \ = numbers.map {\n        return abs($0 - centerpoint)\n    }\n    return mean(numbers:\
    \ deviations)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp_epk206u.swift:10:23: error: cannot find 'mean' in scope\n    let\
    \ centerpoint = mean(numbers: numbers)\n                      ^~~~\n/tmp/tmp_epk206u.swift:14:12:\
    \ error: cannot find 'mean' in scope\n    return mean(numbers: deviations)\n \
    \          ^~~~\n"
  stdout: ''
  timestamp: 1660009080
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    var total: Double = 0.0\n    let mean = mean_arithmetic(numbers:\
    \ numbers)\n    for number in numbers {\n        total += abs(number - mean)\n\
    \    }\n    return total / Double(numbers.count)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpnpnr0e7_.swift:11:16: error: cannot find 'mean_arithmetic' in scope\n\
    \    let mean = mean_arithmetic(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009080
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = average(numbers: numbers)\n    let absolute_deviations\
    \ = numbers.map { $0 - mean }.map { abs($0) }\n    return average(numbers: absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpt33kewn6.swift:10:16: error: cannot find 'average' in scope\n \
    \   let mean = average(numbers: numbers)\n               ^~~~~~~\n/tmp/tmpt33kewn6.swift:12:12:\
    \ error: cannot find 'average' in scope\n    return average(numbers: absolute_deviations)\n\
    \           ^~~~~~~\n"
  stdout: ''
  timestamp: 1660009080
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let n = Double(numbers.count)\n    let average = mean(numbers:\
    \ numbers)\n    let total = numbers.reduce(0) { $0 + abs($1 - average) }\n   \
    \ return total / n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp8ky6v6ao.swift:11:19: error: cannot find 'mean' in scope\n    let\
    \ average = mean(numbers: numbers)\n                  ^~~~\n"
  stdout: ''
  timestamp: 1660009080
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_values(numbers: numbers)\n    let absolute_differences:\
    \ [Double] = numbers.map({ abs($0 - mean) })\n    return mean_of_values(numbers:\
    \ absolute_differences)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpvrwnnlll.swift:10:16: error: cannot find 'mean_of_values' in scope\n\
    \    let mean = mean_of_values(numbers: numbers)\n               ^~~~~~~~~~~~~~\n\
    /tmp/tmpvrwnnlll.swift:12:12: error: cannot find 'mean_of_values' in scope\n \
    \   return mean_of_values(numbers: absolute_differences)\n           ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009081
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = average(numbers: numbers)\n    let diffs = numbers.map\
    \ { abs($0 - mean) }\n    return average(numbers: diffs)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmplozctq9n.swift:10:16: error: cannot find 'average' in scope\n \
    \   let mean = average(numbers: numbers)\n               ^~~~~~~\n/tmp/tmplozctq9n.swift:12:12:\
    \ error: cannot find 'average' in scope\n    return average(numbers: diffs)\n\
    \           ^~~~~~~\n"
  stdout: ''
  timestamp: 1660009080
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_list(numbers: numbers)\n    var abs_list:\
    \ [Double] = []\n    for i in numbers {\n        abs_list.append(abs(i - mean))\n\
    \    }\n    return mean_of_list(numbers: abs_list)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpefg6osm_.swift:10:16: error: cannot find 'mean_of_list' in scope\n\
    \    let mean = mean_of_list(numbers: numbers)\n               ^~~~~~~~~~~~\n\
    /tmp/tmpefg6osm_.swift:15:12: error: cannot find 'mean_of_list' in scope\n   \
    \ return mean_of_list(numbers: abs_list)\n           ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009080
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    return absolute_deviation(numbers: numbers).mean\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpoy2menmq.swift:10:12: error: cannot find 'absolute_deviation' in\
    \ scope\n    return absolute_deviation(numbers: numbers).mean\n           ^~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009080
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    return mean_squared_deviation(numbers: numbers).sqrt()\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpwbr47z8_.swift:10:12: error: cannot find 'mean_squared_deviation'\
    \ in scope\n    return mean_squared_deviation(numbers: numbers).sqrt()\n     \
    \      ^~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009080
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    if numbers.count < 2 {\n        return 0.0\n    }\n    let\
    \ mean = numbers.reduce(0.0, combine: +) / Double(numbers.count)\n    return numbers.map\
    \ { abs($0 - mean) }.reduce(0.0, combine: +) / Double(numbers.count)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpjny0svqc.swift:13:30: error: extraneous argument label 'combine:'\
    \ in call\n    let mean = numbers.reduce(0.0, combine: +) / Double(numbers.count)\n\
    \                             ^     ~~~~~~~~~\n                              \
    \     \n/tmp/tmpjny0svqc.swift:14:49: error: extraneous argument label 'combine:'\
    \ in call\n    return numbers.map { abs($0 - mean) }.reduce(0.0, combine: +) /\
    \ Double(numbers.count)\n                                                ^   \
    \  ~~~~~~~~~\n                                                      \n"
  stdout: ''
  timestamp: 1660009081
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let x_mean = mean(numbers: numbers)\n    let differences =\
    \ numbers.map{ abs($0 - x_mean) }\n    return mean(numbers: differences)\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpxytztdqh.swift:10:18: error: cannot find 'mean' in scope\n    let\
    \ x_mean = mean(numbers: numbers)\n                 ^~~~\n/tmp/tmpxytztdqh.swift:12:12:\
    \ error: cannot find 'mean' in scope\n    return mean(numbers: differences)\n\
    \           ^~~~\n"
  stdout: ''
  timestamp: 1660009080
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = numbers.mean()\n    return numbers.map{abs($0 -\
    \ mean)}.mean()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpuu4i97f9.swift:10:24: error: value of type '[Double]' has no member\
    \ 'mean'\n    let mean = numbers.mean()\n               ~~~~~~~ ^~~~\n/tmp/tmpuu4i97f9.swift:11:40:\
    \ error: value of type '[Double]' has no member 'mean'\n    return numbers.map{abs($0\
    \ - mean)}.mean()\n           ~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~~~\n"
  stdout: ''
  timestamp: 1660009080
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    if numbers.count == 0 {\n        return 0.0\n    }\n    let\
    \ mean = average(numbers: numbers)\n    let deviations = numbers.map { abs($0\
    \ - mean) }\n    return average(numbers: deviations)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpy05touzq.swift:13:16: error: cannot find 'average' in scope\n \
    \   let mean = average(numbers: numbers)\n               ^~~~~~~\n/tmp/tmpy05touzq.swift:15:12:\
    \ error: cannot find 'average' in scope\n    return average(numbers: deviations)\n\
    \           ^~~~~~~\n"
  stdout: ''
  timestamp: 1660009081
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean: Double = average(numbers: numbers)\n    var absolute_deviations:\
    \ [Double] = []\n    for number in numbers {\n        absolute_deviations.append(abs(number\
    \ - mean))\n    }\n    return average(numbers: absolute_deviations)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmprdeb9llj.swift:10:24: error: cannot find 'average' in scope\n \
    \   let mean: Double = average(numbers: numbers)\n                       ^~~~~~~\n\
    /tmp/tmprdeb9llj.swift:15:12: error: cannot find 'average' in scope\n    return\
    \ average(numbers: absolute_deviations)\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1660009081
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = numbers.mean()\n    return mean_absolute_deviation(numbers:\
    \ numbers, around: mean)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpu3crbqtv.swift:10:24: error: value of type '[Double]' has no member\
    \ 'mean'\n    let mean = numbers.mean()\n               ~~~~~~~ ^~~~\n/tmp/tmpu3crbqtv.swift:11:62:\
    \ error: extra argument 'around' in call\n    return mean_absolute_deviation(numbers:\
    \ numbers, around: mean)\n                                  ~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~\n"
  stdout: ''
  timestamp: 1660009081
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    return mean_absolute_deviation(numbers: numbers, of_mean: mean(numbers:\
    \ numbers))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpx_ft7lua.swift:10:63: error: cannot find 'mean' in scope\n    return\
    \ mean_absolute_deviation(numbers: numbers, of_mean: mean(numbers: numbers))\n\
    \                                                              ^~~~\n/tmp/tmpx_ft7lua.swift:10:63:\
    \ error: extra argument 'of_mean' in call\n    return mean_absolute_deviation(numbers:\
    \ numbers, of_mean: mean(numbers: numbers))\n                                \
    \  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009081
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let numbers_mean = mean(numbers: numbers)\n    let deviations\
    \ = numbers.map { $0 - numbers_mean }\n    let abs_deviations = deviations.map\
    \ { abs($0) }\n    return mean(numbers: abs_deviations)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp_6xgw332.swift:10:24: error: cannot find 'mean' in scope\n    let\
    \ numbers_mean = mean(numbers: numbers)\n                       ^~~~\n/tmp/tmp_6xgw332.swift:13:12:\
    \ error: cannot find 'mean' in scope\n    return mean(numbers: abs_deviations)\n\
    \           ^~~~\n"
  stdout: ''
  timestamp: 1660009081
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    let absolute_differences\
    \ = difference_between_numbers_and_a_value(numbers: numbers, value: mean)\n  \
    \  let mean_absolute_difference = mean_of_numbers(numbers: absolute_differences)\n\
    \    return mean_absolute_difference\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpgu70o_fp.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmpgu70o_fp.swift:11:32: error: cannot find 'difference_between_numbers_and_a_value'\
    \ in scope\n    let absolute_differences = difference_between_numbers_and_a_value(numbers:\
    \ numbers, value: mean)\n                               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpgu70o_fp.swift:12:36: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean_absolute_difference = mean_of_numbers(numbers: absolute_differences)\n\
    \                                   ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009081
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_values(numbers: numbers)\n    let diffs\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_values(numbers: diffs)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpajh3mwag.swift:10:16: error: cannot find 'mean_of_values' in scope\n\
    \    let mean = mean_of_values(numbers: numbers)\n               ^~~~~~~~~~~~~~\n\
    /tmp/tmpajh3mwag.swift:12:12: error: cannot find 'mean_of_values' in scope\n \
    \   return mean_of_values(numbers: diffs)\n           ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009081
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    guard numbers.count > 0 else {\n        return 0.0\n    }\n\
    \    let mean = mean_arithmetic(numbers: numbers)\n    var sum_of_absolute_deviations\
    \ = 0.0\n    for number in numbers {\n        sum_of_absolute_deviations += abs(number\
    \ - mean)\n    }\n    return sum_of_absolute_deviations / Double(numbers.count)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpbgqx9jxu.swift:13:16: error: cannot find 'mean_arithmetic' in scope\n\
    \    let mean = mean_arithmetic(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009081
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = average(numbers: numbers)\n    var absolute_deviations\
    \ = [Double]()\n    for number in numbers {\n        absolute_deviations.append(abs(number\
    \ - mean))\n    }\n    return average(numbers: absolute_deviations)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpgqjk4m99.swift:10:16: error: cannot find 'average' in scope\n \
    \   let mean = average(numbers: numbers)\n               ^~~~~~~\n/tmp/tmpgqjk4m99.swift:15:12:\
    \ error: cannot find 'average' in scope\n    return average(numbers: absolute_deviations)\n\
    \           ^~~~~~~\n"
  stdout: ''
  timestamp: 1660009081
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_list(list: numbers)\n    var sum: Double\
    \ = 0.0\n    for i in 0 ..< numbers.count {\n        sum += abs(numbers[i] - mean)\n\
    \    }\n    return sum / Double(numbers.count)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpsez1ah1l.swift:10:16: error: cannot find 'mean_of_list' in scope\n\
    \    let mean = mean_of_list(list: numbers)\n               ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009081
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let sum = numbers.reduce(0.0, +)\n    let mean = sum / Double(numbers.count)\n\
    \    let squaredDeviations = numbers.map { pow($0 - mean, 2.0) }\n    let variance\
    \ = squaredDeviations.reduce(0.0, +) / Double(numbers.count)\n    return sqrt(variance)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpdmcycqj7.swift:12:43: error: cannot find 'pow' in scope\n    let\
    \ squaredDeviations = numbers.map { pow($0 - mean, 2.0) }\n                  \
    \                        ^~~\n/tmp/tmpdmcycqj7.swift:14:12: error: cannot find\
    \ 'sqrt' in scope\n    return sqrt(variance)\n           ^~~~\n"
  stdout: ''
  timestamp: 1660009081
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = average(numbers: numbers)\n    let deviations =\
    \ numbers.map { abs($0 - mean) }\n    return average(numbers: deviations)\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp0bepx4kx.swift:10:16: error: cannot find 'average' in scope\n \
    \   let mean = average(numbers: numbers)\n               ^~~~~~~\n/tmp/tmp0bepx4kx.swift:12:12:\
    \ error: cannot find 'average' in scope\n    return average(numbers: deviations)\n\
    \           ^~~~~~~\n"
  stdout: ''
  timestamp: 1660009080
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    var absolute_deviations\
    \ = [Double]()\n    for number in numbers {\n        absolute_deviations.append(fabs(number\
    \ - mean))\n    }\n    return mean_of_numbers(numbers: absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp549iwzj4.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmp549iwzj4.swift:13:36: error: cannot find 'fabs' in scope\n        absolute_deviations.append(fabs(number\
    \ - mean))\n                                   ^~~~\n/tmp/tmp549iwzj4.swift:15:12:\
    \ error: cannot find 'mean_of_numbers' in scope\n    return mean_of_numbers(numbers:\
    \ absolute_deviations)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009081
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    let deviations\
    \ = numbers.map({return abs($0 - mean)})\n    return mean_of_numbers(numbers:\
    \ deviations)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpo2trktj2.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmpo2trktj2.swift:12:12: error: cannot find 'mean_of_numbers' in scope\n\
    \    return mean_of_numbers(numbers: deviations)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009081
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = average(numbers: numbers)\n    let median = median_low(numbers:\
    \ numbers)\n    return average(numbers: numbers.map({ (x) -> Double in\n     \
    \   return abs(x - median)\n    }))\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp4ri1gf3z.swift:10:16: error: cannot find 'average' in scope\n \
    \   let mean = average(numbers: numbers)\n               ^~~~~~~\n/tmp/tmp4ri1gf3z.swift:11:18:\
    \ error: cannot find 'median_low' in scope\n    let median = median_low(numbers:\
    \ numbers)\n                 ^~~~~~~~~~\n/tmp/tmp4ri1gf3z.swift:12:12: error:\
    \ cannot find 'average' in scope\n    return average(numbers: numbers.map({ (x)\
    \ -> Double in\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1660009081
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n  let mean = mean_of_numbers(numbers: numbers)\n  let absolute_deviations\
    \ = absolute_deviations_from_mean(numbers: numbers, mean: mean)\n  return mean_of_numbers(numbers:\
    \ absolute_deviations)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmplzje0jrr.swift:10:14: error: cannot find 'mean_of_numbers' in scope\n\
    \  let mean = mean_of_numbers(numbers: numbers)\n             ^~~~~~~~~~~~~~~\n\
    /tmp/tmplzje0jrr.swift:11:29: error: cannot find 'absolute_deviations_from_mean'\
    \ in scope\n  let absolute_deviations = absolute_deviations_from_mean(numbers:\
    \ numbers, mean: mean)\n                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmplzje0jrr.swift:12:10: error: cannot find 'mean_of_numbers' in scope\n\
    \  return mean_of_numbers(numbers: absolute_deviations)\n         ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009081
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n  let mean = arithmetic_mean(numbers: numbers)\n  let deviations\
    \ = numbers.map { abs($0 - mean) }\n  return arithmetic_mean(numbers: deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpffz7_oj8.swift:10:14: error: cannot find 'arithmetic_mean' in scope\n\
    \  let mean = arithmetic_mean(numbers: numbers)\n             ^~~~~~~~~~~~~~~\n\
    /tmp/tmpffz7_oj8.swift:12:10: error: cannot find 'arithmetic_mean' in scope\n\
    \  return arithmetic_mean(numbers: deviations)\n         ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009081
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mad = mean(numbers: numbers) { x in abs(x) }\n    return\
    \ mad\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp_mgne4br.swift:10:15: error: cannot find 'mean' in scope\n    let\
    \ mad = mean(numbers: numbers) { x in abs(x) }\n              ^~~~\n"
  stdout: ''
  timestamp: 1660009081
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    \n    let average = mean(numbers: numbers)\n    var sum = 0.0\n\
    \    for num in numbers {\n        sum += abs(num - average)\n    }\n    return\
    \ sum / Double(numbers.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpnn0t29m8.swift:11:19: error: cannot find 'mean' in scope\n    let\
    \ average = mean(numbers: numbers)\n                  ^~~~\n"
  stdout: ''
  timestamp: 1660009081
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = numbers.mean()\n    let absolute_differences = numbers.map\
    \ { abs($0 - mean) }\n    return absolute_differences.mean()\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpk029jqge.swift:10:24: error: value of type '[Double]' has no member\
    \ 'mean'\n    let mean = numbers.mean()\n               ~~~~~~~ ^~~~\n"
  stdout: ''
  timestamp: 1660009081
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    if numbers.count <= 1 {\n        return 0.0\n    }\n    let\
    \ mean = average(numbers: numbers)\n    var absolute_deviations = [Double]()\n\
    \    for number in numbers {\n        absolute_deviations.append(abs(number -\
    \ mean))\n    }\n    return average(numbers: absolute_deviations)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp5fmtyhj0.swift:13:16: error: cannot find 'average' in scope\n \
    \   let mean = average(numbers: numbers)\n               ^~~~~~~\n/tmp/tmp5fmtyhj0.swift:18:12:\
    \ error: cannot find 'average' in scope\n    return average(numbers: absolute_deviations)\n\
    \           ^~~~~~~\n"
  stdout: ''
  timestamp: 1660009081
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_array(numbers: numbers)\n    var sum: Double\
    \ = 0.0\n    for number in numbers {\n        sum += abs(number - mean)\n    }\n\
    \    return sum / Double(numbers.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp4jq5bp7u.swift:10:16: error: cannot find 'mean_of_array' in scope\n\
    \    let mean = mean_of_array(numbers: numbers)\n               ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009081
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    if numbers.count < 2 {\n        return 0.0\n    }\n    return\
    \ mean(numbers: abs(numbers - mean(numbers: numbers)))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpxskfwglz.swift:13:12: error: cannot find 'mean' in scope\n    return\
    \ mean(numbers: abs(numbers - mean(numbers: numbers)))\n           ^~~~\n/tmp/tmpxskfwglz.swift:13:40:\
    \ error: cannot find 'mean' in scope\n    return mean(numbers: abs(numbers - mean(numbers:\
    \ numbers)))\n                                       ^~~~\n"
  stdout: ''
  timestamp: 1660009081
- exit_code: 0
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let sum = numbers.reduce(0, +)\n    let mean = sum / Double(numbers.count)\n\
    \    let deviations = numbers.map { abs($0 - mean) }\n    let sum_deviations =\
    \ deviations.reduce(0, +)\n    return sum_deviations / Double(numbers.count)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009081
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = average(numbers: numbers)\n    var sum = 0.0\n \
    \   for number in numbers {\n        sum += abs(number - mean)\n    }\n    return\
    \ sum / Double(numbers.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpw_rjtwdr.swift:10:16: error: cannot find 'average' in scope\n \
    \   let mean = average(numbers: numbers)\n               ^~~~~~~\n"
  stdout: ''
  timestamp: 1660009080
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_average(numbers: numbers)\n    var diff: [Double]\
    \ = []\n    for number in numbers {\n        diff.append(abs(number - mean))\n\
    \    }\n    return mean_average(numbers: diff)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp531jqxah.swift:10:16: error: cannot find 'mean_average' in scope\n\
    \    let mean = mean_average(numbers: numbers)\n               ^~~~~~~~~~~~\n\
    /tmp/tmp531jqxah.swift:15:12: error: cannot find 'mean_average' in scope\n   \
    \ return mean_average(numbers: diff)\n           ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009081
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_arithmetic(numbers: numbers)\n    let absolute_deviations\
    \ = numbers.map { fabs($0 - mean) }\n    return mean_arithmetic(numbers: absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpjy4k5c3z.swift:10:16: error: cannot find 'mean_arithmetic' in scope\n\
    \    let mean = mean_arithmetic(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmpjy4k5c3z.swift:11:45: error: cannot find 'fabs' in scope\n    let absolute_deviations\
    \ = numbers.map { fabs($0 - mean) }\n                                        \
    \    ^~~~\n/tmp/tmpjy4k5c3z.swift:12:12: error: cannot find 'mean_arithmetic'\
    \ in scope\n    return mean_arithmetic(numbers: absolute_deviations)\n       \
    \    ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009081
- exit_code: -4
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    // TODO: Your code here!\n    return 0.0\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: Exception
  stderr: 'tmph2oy5vnb/tmph2oy5vnb.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af10a38bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af10a082b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af10a082988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af10a0817b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmph2oy5vnb                        0x000055bf26826353 <unavailable> + 4947

    5    libc.so.6                          0x00002af10a577460 __libc_start_main +
    245

    6    tmph2oy5vnb                        0x000055bf26825fa9 <unavailable> + 4009

    '
  stdout: ''
  timestamp: 1660009081
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_arithmetic(numbers: numbers)\n    let result\
    \ = numbers.map({ abs($0 - mean) }).reduce(0, +) / Double(numbers.count)\n   \
    \ return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpf57kvjxz.swift:10:16: error: cannot find 'mean_arithmetic' in scope\n\
    \    let mean = mean_arithmetic(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009081
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let average = mean(numbers: numbers)\n    let absolute_differences\
    \ = numbers.map({ abs($0 - average) })\n    return mean(numbers: absolute_differences)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpebx7yr8d.swift:10:19: error: cannot find 'mean' in scope\n    let\
    \ average = mean(numbers: numbers)\n                  ^~~~\n/tmp/tmpebx7yr8d.swift:12:12:\
    \ error: cannot find 'mean' in scope\n    return mean(numbers: absolute_differences)\n\
    \           ^~~~\n"
  stdout: ''
  timestamp: 1660009081
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let centerpoint = mean(numbers: numbers)\n    let deviations\
    \ = numbers.map { abs($0 - centerpoint) }\n    return mean(numbers: deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpzx2eftd1.swift:10:23: error: cannot find 'mean' in scope\n    let\
    \ centerpoint = mean(numbers: numbers)\n                      ^~~~\n/tmp/tmpzx2eftd1.swift:12:12:\
    \ error: cannot find 'mean' in scope\n    return mean(numbers: deviations)\n \
    \          ^~~~\n"
  stdout: ''
  timestamp: 1660009081
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let n = Double(numbers.count)\n    let mean = numbers.mean()\n\
    \    return (1.0 / n) * numbers.reduce(0) {\n        $0 + fabs($1 - mean)\n  \
    \  }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpjs9k8l_c.swift:11:24: error: value of type '[Double]' has no member\
    \ 'mean'\n    let mean = numbers.mean()\n               ~~~~~~~ ^~~~\n/tmp/tmpjs9k8l_c.swift:13:14:\
    \ error: cannot find 'fabs' in scope\n        $0 + fabs($1 - mean)\n         \
    \    ^~~~\n"
  stdout: ''
  timestamp: 1660009081
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_array(numbers: numbers)\n    let abs_differences\
    \ = numbers.map{ abs($0 - mean) }\n    return mean_of_array(numbers: abs_differences)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp9mzx_rmb.swift:10:16: error: cannot find 'mean_of_array' in scope\n\
    \    let mean = mean_of_array(numbers: numbers)\n               ^~~~~~~~~~~~~\n\
    /tmp/tmp9mzx_rmb.swift:12:12: error: cannot find 'mean_of_array' in scope\n  \
    \  return mean_of_array(numbers: abs_differences)\n           ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009081
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    // calculate the mean\n    let mean = sum(numbers) / Double(numbers.count)\n\
    \    // find absolute difference between each number and the mean\n    let abs_diff\
    \ = numbers.map({ abs($0 - mean) })\n    // return the mean of the absolute differences\n\
    \    return sum(abs_diff) / Double(abs_diff.count)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpueogidrh.swift:11:16: error: cannot find 'sum' in scope\n    let\
    \ mean = sum(numbers) / Double(numbers.count)\n               ^~~\n/tmp/tmpueogidrh.swift:15:12:\
    \ error: cannot find 'sum' in scope\n    return sum(abs_diff) / Double(abs_diff.count)\n\
    \           ^~~\n"
  stdout: ''
  timestamp: 1660009081
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let x_mean = mean(numbers: numbers)\n    let absolute_differences\
    \ = numbers.map { abs($0 - x_mean) }\n    return mean(numbers: absolute_differences)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp4hq0xfj8.swift:10:18: error: cannot find 'mean' in scope\n    let\
    \ x_mean = mean(numbers: numbers)\n                 ^~~~\n/tmp/tmp4hq0xfj8.swift:12:12:\
    \ error: cannot find 'mean' in scope\n    return mean(numbers: absolute_differences)\n\
    \           ^~~~\n"
  stdout: ''
  timestamp: 1660009081
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_arithmetic(numbers: numbers)\n    let diffs\
    \ = numbers.map { abs($0 - mean) }\n    return mean_arithmetic(numbers: diffs)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpd_gwdcpu.swift:10:16: error: cannot find 'mean_arithmetic' in scope\n\
    \    let mean = mean_arithmetic(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmpd_gwdcpu.swift:12:12: error: cannot find 'mean_arithmetic' in scope\n\
    \    return mean_arithmetic(numbers: diffs)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009081
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_average(numbers: numbers)\n    let deviations\
    \ = numbers.map{ abs($0 - mean) }\n    return sum(values: deviations) / Double(numbers.count)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpjq1gwmva.swift:10:16: error: cannot find 'mean_average' in scope\n\
    \    let mean = mean_average(numbers: numbers)\n               ^~~~~~~~~~~~\n\
    /tmp/tmpjq1gwmva.swift:12:12: error: cannot find 'sum' in scope\n    return sum(values:\
    \ deviations) / Double(numbers.count)\n           ^~~\n"
  stdout: ''
  timestamp: 1660009081
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    return mean_absolute_deviation(numbers: numbers, about_mean:\
    \ mean(numbers: numbers))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp2vz8zu2y.swift:10:66: error: cannot find 'mean' in scope\n    return\
    \ mean_absolute_deviation(numbers: numbers, about_mean: mean(numbers: numbers))\n\
    \                                                                 ^~~~\n/tmp/tmp2vz8zu2y.swift:10:66:\
    \ error: extra argument 'about_mean' in call\n    return mean_absolute_deviation(numbers:\
    \ numbers, about_mean: mean(numbers: numbers))\n                             \
    \     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009081
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let x_mean = mean(numbers: numbers)\n    let x_deviations =\
    \ numbers.map { abs($0 - x_mean) }\n    return mean(numbers: x_deviations)\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpsrzg6i3k.swift:10:18: error: cannot find 'mean' in scope\n    let\
    \ x_mean = mean(numbers: numbers)\n                 ^~~~\n/tmp/tmpsrzg6i3k.swift:12:12:\
    \ error: cannot find 'mean' in scope\n    return mean(numbers: x_deviations)\n\
    \           ^~~~\n"
  stdout: ''
  timestamp: 1660009081
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n  let mean = mean_of_array(numbers: numbers)\n  let num_elements\
    \ = Double(numbers.count)\n  var total_difference: Double = 0.0\n  for i in 0..<numbers.count\
    \ {\n    total_difference += abs(numbers[i] - mean)\n  }\n  return total_difference\
    \ / num_elements\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpul1i5xrd.swift:10:14: error: cannot find 'mean_of_array' in scope\n\
    \  let mean = mean_of_array(numbers: numbers)\n             ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009081
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_value(numbers: numbers)\n    let mads = numbers.map\
    \ { abs($0 - mean) }\n    return mean_value(numbers: mads)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpuwl8e89h.swift:10:16: error: cannot find 'mean_value' in scope\n\
    \    let mean = mean_value(numbers: numbers)\n               ^~~~~~~~~~\n/tmp/tmpuwl8e89h.swift:12:12:\
    \ error: cannot find 'mean_value' in scope\n    return mean_value(numbers: mads)\n\
    \           ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009081
- exit_code: 0
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    // Calculate the mean\n    let mean = numbers.reduce(0, +)\
    \ / Double(numbers.count)\n    // Calculate the average distance between each\
    \ element and the mean\n    return numbers.map { abs($0 - mean) }.reduce(0, +)\
    \ / Double(numbers.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009081
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let nums = Array(numbers)\n    let mean = mean(numbers: nums)\n\
    \    let absolute_deviations = nums.map { abs($0 - mean) }\n    return mean(numbers:\
    \ absolute_deviations)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpyxoga6_u.swift:11:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers: nums)\n               ^\n/tmp/tmpyxoga6_u.swift:11:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers: nums)\n        ^\n"
  stdout: ''
  timestamp: 1660009081
- exit_code: 0
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = numbers.reduce(0, +) / Double(numbers.count)\n \
    \   let deviations = numbers.map { abs($0 - mean) }\n    return deviations.reduce(0,\
    \ +) / Double(deviations.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009081
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = average(numbers: numbers)\n    let deviations =\
    \ numbers.map {\n        abs($0 - mean)\n    }\n    return average(numbers: deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp4wn96dtt.swift:10:16: error: cannot find 'average' in scope\n \
    \   let mean = average(numbers: numbers)\n               ^~~~~~~\n/tmp/tmp4wn96dtt.swift:14:12:\
    \ error: cannot find 'average' in scope\n    return average(numbers: deviations)\n\
    \           ^~~~~~~\n"
  stdout: ''
  timestamp: 1660009081
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let average: Double = numbers.average()\n    let absolute_deviations:\
    \ [Double] = numbers.map({ abs($0 - average) })\n    return absolute_deviations.average()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpr175vw1b.swift:10:35: error: value of type '[Double]' has no member\
    \ 'average'\n    let average: Double = numbers.average()\n                   \
    \       ~~~~~~~ ^~~~~~~\n/tmp/tmpr175vw1b.swift:12:32: error: value of type '[Double]'\
    \ has no member 'average'\n    return absolute_deviations.average()\n        \
    \   ~~~~~~~~~~~~~~~~~~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1660009081
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    \n    //let n = numbers.count\n    let mean = average(numbers:\
    \ numbers)\n    var sum = 0.0\n    for num in numbers {\n        sum += abs(num\
    \ - mean)\n    }\n    return sum / Double(numbers.count)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp4kmcdx68.swift:12:16: error: cannot find 'average' in scope\n \
    \   let mean = average(numbers: numbers)\n               ^~~~~~~\n"
  stdout: ''
  timestamp: 1660009081
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let x_bar = mean(numbers: numbers)\n    var diffs = [Double]()\n\
    \    for value in numbers {\n        diffs.append(abs(value - x_bar))\n    }\n\
    \    return mean(numbers: diffs)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpyzxcgf9x.swift:10:17: error: cannot find 'mean' in scope\n    let\
    \ x_bar = mean(numbers: numbers)\n                ^~~~\n/tmp/tmpyzxcgf9x.swift:15:12:\
    \ error: cannot find 'mean' in scope\n    return mean(numbers: diffs)\n      \
    \     ^~~~\n"
  stdout: ''
  timestamp: 1660009081
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let x_mean = average(numbers: numbers)\n    let numerator =\
    \ sum(numbers: numbers.map({ abs($0 - x_mean) }))\n    return numerator / Double(numbers.count)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpgyovxmf3.swift:10:18: error: cannot find 'average' in scope\n \
    \   let x_mean = average(numbers: numbers)\n                 ^~~~~~~\n/tmp/tmpgyovxmf3.swift:11:21:\
    \ error: cannot find 'sum' in scope\n    let numerator = sum(numbers: numbers.map({\
    \ abs($0 - x_mean) }))\n                    ^~~\n"
  stdout: ''
  timestamp: 1660009081
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_average(numbers: numbers)\n    let mean_absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_average(numbers: mean_absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp77lwyx79.swift:10:16: error: cannot find 'mean_average' in scope\n\
    \    let mean = mean_average(numbers: numbers)\n               ^~~~~~~~~~~~\n\
    /tmp/tmp77lwyx79.swift:12:12: error: cannot find 'mean_average' in scope\n   \
    \ return mean_average(numbers: mean_absolute_deviations)\n           ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009081
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    // Get the mean of the array:\n    let mean = mean_function(numbers:\
    \ numbers)\n    // Subtract the mean from every element and get the absolute value:\n\
    \    var values = [Double]()\n    for i in 0..<numbers.count {\n        values.append(fabs(numbers[i]\
    \ - mean))\n    }\n    // Average the values:\n    return mean_function(numbers:\
    \ values)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp4mupqrjn.swift:11:16: error: cannot find 'mean_function' in scope\n\
    \    let mean = mean_function(numbers: numbers)\n               ^~~~~~~~~~~~~\n\
    /tmp/tmp4mupqrjn.swift:15:23: error: cannot find 'fabs' in scope\n        values.append(fabs(numbers[i]\
    \ - mean))\n                      ^~~~\n/tmp/tmp4mupqrjn.swift:18:12: error: cannot\
    \ find 'mean_function' in scope\n    return mean_function(numbers: values)\n \
    \          ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009081
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let x_mean = average(numbers: numbers)\n    let diffs = numbers.map{\
    \ abs($0 - x_mean) }\n    return average(numbers: diffs)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpdal_06gj.swift:10:18: error: cannot find 'average' in scope\n \
    \   let x_mean = average(numbers: numbers)\n                 ^~~~~~~\n/tmp/tmpdal_06gj.swift:12:12:\
    \ error: cannot find 'average' in scope\n    return average(numbers: diffs)\n\
    \           ^~~~~~~\n"
  stdout: ''
  timestamp: 1660009081
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    return mean_absolute_deviation(numbers: numbers, mean: nil)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpbagh0f1n.swift:10:60: error: extra argument 'mean' in call\n  \
    \  return mean_absolute_deviation(numbers: numbers, mean: nil)\n             \
    \                     ~~~~~~~~~~~~~~~~~~~~~~~~~^~~~\n/tmp/tmpbagh0f1n.swift:10:60:\
    \ error: 'nil' requires a contextual type\n    return mean_absolute_deviation(numbers:\
    \ numbers, mean: nil)\n                                                      \
    \     ^\n"
  stdout: ''
  timestamp: 1660009081
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_value(numbers: numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_value(numbers: absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmphkpz7tcl.swift:10:16: error: cannot find 'mean_value' in scope\n\
    \    let mean = mean_value(numbers: numbers)\n               ^~~~~~~~~~\n/tmp/tmphkpz7tcl.swift:12:12:\
    \ error: cannot find 'mean_value' in scope\n    return mean_value(numbers: absolute_deviations)\n\
    \           ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009080
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = average(numbers: numbers)\n    var deviations: [Double]\
    \ = []\n    for number in numbers {\n        deviations.append(fabs(number - mean))\n\
    \    }\n    return average(numbers: deviations)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpbdu313_1.swift:10:16: error: cannot find 'average' in scope\n \
    \   let mean = average(numbers: numbers)\n               ^~~~~~~\n/tmp/tmpbdu313_1.swift:13:27:\
    \ error: cannot find 'fabs' in scope\n        deviations.append(fabs(number -\
    \ mean))\n                          ^~~~\n/tmp/tmpbdu313_1.swift:15:12: error:\
    \ cannot find 'average' in scope\n    return average(numbers: deviations)\n  \
    \         ^~~~~~~\n"
  stdout: ''
  timestamp: 1660009081
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = average(numbers: numbers)\n    let deviations =\
    \ numbers.map { abs($0 - mean) }\n    return average(numbers: deviations)\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp0bepx4kx.swift:10:16: error: cannot find 'average' in scope\n \
    \   let mean = average(numbers: numbers)\n               ^~~~~~~\n/tmp/tmp0bepx4kx.swift:12:12:\
    \ error: cannot find 'average' in scope\n    return average(numbers: deviations)\n\
    \           ^~~~~~~\n"
  stdout: ''
  timestamp: 1660009080
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = average(values: numbers)\n    let absolute_deviations\
    \ = numbers.map { fabs($0 - mean) }\n    return average(values: absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpiyi8jrs_.swift:10:16: error: cannot find 'average' in scope\n \
    \   let mean = average(values: numbers)\n               ^~~~~~~\n/tmp/tmpiyi8jrs_.swift:11:45:\
    \ error: cannot find 'fabs' in scope\n    let absolute_deviations = numbers.map\
    \ { fabs($0 - mean) }\n                                            ^~~~\n/tmp/tmpiyi8jrs_.swift:12:12:\
    \ error: cannot find 'average' in scope\n    return average(values: absolute_deviations)\n\
    \           ^~~~~~~\n"
  stdout: ''
  timestamp: 1660009081
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let x_mean = mean(numbers: numbers)\n    let absolute_differences\
    \ = numbers.map { abs($0 - x_mean) }\n    return mean(numbers: absolute_differences)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp4hq0xfj8.swift:10:18: error: cannot find 'mean' in scope\n    let\
    \ x_mean = mean(numbers: numbers)\n                 ^~~~\n/tmp/tmp4hq0xfj8.swift:12:12:\
    \ error: cannot find 'mean' in scope\n    return mean(numbers: absolute_differences)\n\
    \           ^~~~\n"
  stdout: ''
  timestamp: 1660009081
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    return mean_absolute_deviation(numbers: numbers, central_point:\
    \ nil)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp51ja7rde.swift:10:69: error: extra argument 'central_point' in\
    \ call\n    return mean_absolute_deviation(numbers: numbers, central_point: nil)\n\
    \                                  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~\n/tmp/tmp51ja7rde.swift:10:69:\
    \ error: 'nil' requires a contextual type\n    return mean_absolute_deviation(numbers:\
    \ numbers, central_point: nil)\n                                             \
    \                       ^\n"
  stdout: ''
  timestamp: 1660009081
- exit_code: 0
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n  let mean = numbers.reduce(0.0, +) / Double(numbers.count)\n \
    \ let deviations = numbers.map { abs($0 - mean) }\n  return deviations.reduce(0.0,\
    \ +) / Double(deviations.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009081
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mad = numbers.map { $0 - numbers.mean() }.map { abs($0)\
    \ }.mean()\n    return mad\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpem1hg412.swift:10:42: error: value of type '[Double]' has no member\
    \ 'mean'\n    let mad = numbers.map { $0 - numbers.mean() }.map { abs($0) }.mean()\n\
    \                                 ~~~~~~~ ^~~~\n/tmp/tmpem1hg412.swift:10:67:\
    \ error: value of type '[Double]' has no member 'mean'\n    let mad = numbers.map\
    \ { $0 - numbers.mean() }.map { abs($0) }.mean()\n              ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~~~\n"
  stdout: ''
  timestamp: 1660009081
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_array(numbers: numbers)\n    let diffs =\
    \ numbers.map { abs($0 - mean) }\n    return mean_of_array(numbers: diffs)\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmper_5b9kl.swift:10:16: error: cannot find 'mean_of_array' in scope\n\
    \    let mean = mean_of_array(numbers: numbers)\n               ^~~~~~~~~~~~~\n\
    /tmp/tmper_5b9kl.swift:12:12: error: cannot find 'mean_of_array' in scope\n  \
    \  return mean_of_array(numbers: diffs)\n           ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009081
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    // calculate mean\n    let mean = average(numbers: numbers)\n\
    \    // calculate absolute difference of each number from mean\n    let diff =\
    \ numbers.map({ fabs($0 - mean) })\n    // calculate mean of absolute differences\n\
    \    return average(numbers: diff)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpnmo23s00.swift:11:16: error: cannot find 'average' in scope\n \
    \   let mean = average(numbers: numbers)\n               ^~~~~~~\n/tmp/tmpnmo23s00.swift:13:30:\
    \ error: cannot find 'fabs' in scope\n    let diff = numbers.map({ fabs($0 - mean)\
    \ })\n                             ^~~~\n/tmp/tmpnmo23s00.swift:15:12: error:\
    \ cannot find 'average' in scope\n    return average(numbers: diff)\n        \
    \   ^~~~~~~\n"
  stdout: ''
  timestamp: 1660009081
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = arithmetic_mean(numbers: numbers)\n    let absolute_differences\
    \ = numbers.map { $0 - mean }.map { abs($0) }\n    return arithmetic_mean(numbers:\
    \ absolute_differences)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpdcbi8ddt.swift:10:16: error: cannot find 'arithmetic_mean' in scope\n\
    \    let mean = arithmetic_mean(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmpdcbi8ddt.swift:12:12: error: cannot find 'arithmetic_mean' in scope\n\
    \    return arithmetic_mean(numbers: absolute_differences)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009081
- exit_code: 0
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n  let n: Double = Double(numbers.count)\n  let sum: Double = numbers.reduce(0,\
    \ +)\n  let mean: Double = sum / n\n  let deviations: [Double] = numbers.map({$0\
    \ - mean})\n  let deviations_abs: [Double] = deviations.map({abs($0)})\n  let\
    \ deviations_abs_sum: Double = deviations_abs.reduce(0, +)\n  let mean_abs_deviation:\
    \ Double = deviations_abs_sum / n\n  return mean_abs_deviation\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009081
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_value(numbers: numbers)\n    let deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_value(numbers: deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpj0_y1rlq.swift:10:16: error: cannot find 'mean_value' in scope\n\
    \    let mean = mean_value(numbers: numbers)\n               ^~~~~~~~~~\n/tmp/tmpj0_y1rlq.swift:12:12:\
    \ error: cannot find 'mean_value' in scope\n    return mean_value(numbers: deviations)\n\
    \           ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009080
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    if numbers.count == 0 {\n        return 0.0\n    }\n    let\
    \ mean = mean_of_numbers(numbers: numbers)\n    let deviations = numbers.map {\
    \ (element) -> Double in\n        return abs(element - mean)\n    }\n    return\
    \ mean_of_numbers(numbers: deviations)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpc13l_8gq.swift:13:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmpc13l_8gq.swift:17:12: error: cannot find 'mean_of_numbers' in scope\n\
    \    return mean_of_numbers(numbers: deviations)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009081
- exit_code: 0
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = numbers.reduce(0, +) / Double(numbers.count)\n \
    \   let absolute_diffs = numbers.map { abs($0 - mean) }\n    return absolute_diffs.reduce(0,\
    \ +) / Double(absolute_diffs.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009081
- exit_code: 0
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let n = Double(numbers.count)\n    let mean = numbers.reduce(0.0,\
    \ +) / n\n    let sum = numbers.reduce(0.0) { acc, x in\n        return acc +\
    \ abs(x - mean)\n    }\n    return sum / n\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009081
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    return fabs(mean(numbers: numbers))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpxm8lzq7o.swift:10:12: error: cannot find 'fabs' in scope\n    return\
    \ fabs(mean(numbers: numbers))\n           ^~~~\n/tmp/tmpxm8lzq7o.swift:10:17:\
    \ error: cannot find 'mean' in scope\n    return fabs(mean(numbers: numbers))\n\
    \                ^~~~\n"
  stdout: ''
  timestamp: 1660009081
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = average(numbers: numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return average(numbers: absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpmnfqa4od.swift:10:16: error: cannot find 'average' in scope\n \
    \   let mean = average(numbers: numbers)\n               ^~~~~~~\n/tmp/tmpmnfqa4od.swift:12:12:\
    \ error: cannot find 'average' in scope\n    return average(numbers: absolute_deviations)\n\
    \           ^~~~~~~\n"
  stdout: ''
  timestamp: 1660009081
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let sum: Double = numbers.reduce(0, +)\n    let mean: Double\
    \ = sum / Double(numbers.count)\n    var absolute_deviations: [Double] = []\n\
    \    for num in numbers {\n        absolute_deviations.append(fabs(num - mean))\n\
    \    }\n    let deviation_sum: Double = absolute_deviations.reduce(0, +)\n   \
    \ return deviation_sum / Double(absolute_deviations.count)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp06qbl65m.swift:14:36: error: cannot find 'fabs' in scope\n    \
    \    absolute_deviations.append(fabs(num - mean))\n                          \
    \         ^~~~\n"
  stdout: ''
  timestamp: 1660009081
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    if numbers.count < 2 {\n        print(\"mean_absolute_deviation()\
    \ requires at least 2 values in input array.\")\n        return Double.nan\n \
    \   }\n    let dMean = mean(numbers: numbers)\n    let sums = numbers.map({ fabs($0\
    \ - dMean) })\n    return mean(numbers: sums)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp2l8u2xdg.swift:14:17: error: cannot find 'mean' in scope\n    let\
    \ dMean = mean(numbers: numbers)\n                ^~~~\n/tmp/tmp2l8u2xdg.swift:15:30:\
    \ error: cannot find 'fabs' in scope\n    let sums = numbers.map({ fabs($0 - dMean)\
    \ })\n                             ^~~~\n/tmp/tmp2l8u2xdg.swift:16:12: error:\
    \ cannot find 'mean' in scope\n    return mean(numbers: sums)\n           ^~~~\n"
  stdout: ''
  timestamp: 1660009081
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_value(numbers: numbers)\n    var deviation\
    \ = [Double]()\n    for number in numbers {\n        deviation.append(abs(number\
    \ - mean))\n    }\n    return mean_value(numbers: deviation)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpg9qovppw.swift:10:16: error: cannot find 'mean_value' in scope\n\
    \    let mean = mean_value(numbers: numbers)\n               ^~~~~~~~~~\n/tmp/tmpg9qovppw.swift:15:12:\
    \ error: cannot find 'mean_value' in scope\n    return mean_value(numbers: deviation)\n\
    \           ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009081
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    var mad = 0.0\n    let mean = average(numbers: numbers)\n \
    \   mad = average(numbers: numbers.map { abs($0 - mean) })\n    return mad\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmphg2nvs_m.swift:11:16: error: cannot find 'average' in scope\n \
    \   let mean = average(numbers: numbers)\n               ^~~~~~~\n/tmp/tmphg2nvs_m.swift:12:11:\
    \ error: cannot find 'average' in scope\n    mad = average(numbers: numbers.map\
    \ { abs($0 - mean) })\n          ^~~~~~~\n"
  stdout: ''
  timestamp: 1660009081
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_double_array(numbers: numbers)\n    let\
    \ deviations: [Double] = deviations_from_double_array(numbers: numbers,\n    \
    \                                                        mean: mean)\n    return\
    \ mean_of_double_array(numbers: deviations)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpeuiyj71c.swift:10:16: error: cannot find 'mean_of_double_array'\
    \ in scope\n    let mean = mean_of_double_array(numbers: numbers)\n          \
    \     ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpeuiyj71c.swift:11:32: error: cannot find 'deviations_from_double_array'\
    \ in scope\n    let deviations: [Double] = deviations_from_double_array(numbers:\
    \ numbers,\n                               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpeuiyj71c.swift:13:12:\
    \ error: cannot find 'mean_of_double_array' in scope\n    return mean_of_double_array(numbers:\
    \ deviations)\n           ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009081
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_arithmetic(numbers: numbers)\n    let absolute_differences\
    \ = numbers.map { abs($0 - mean) }\n    return mean_arithmetic(numbers: absolute_differences)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpis03scrf.swift:10:16: error: cannot find 'mean_arithmetic' in scope\n\
    \    let mean = mean_arithmetic(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmpis03scrf.swift:12:12: error: cannot find 'mean_arithmetic' in scope\n\
    \    return mean_arithmetic(numbers: absolute_differences)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009081
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n  let count = Double(numbers.count)\n  let mean = numbers.reduce(0.0,\
    \ combine: +) / count\n  return numbers.reduce(0.0, combine: {$0 + abs($1 - mean)})\
    \ / count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpmifo7b8c.swift:11:28: error: extraneous argument label 'combine:'\
    \ in call\n  let mean = numbers.reduce(0.0, combine: +) / count\n            \
    \               ^     ~~~~~~~~~\n                                 \n/tmp/tmpmifo7b8c.swift:12:24:\
    \ error: extraneous argument label 'combine:' in call\n  return numbers.reduce(0.0,\
    \ combine: {$0 + abs($1 - mean)}) / count\n                       ^     ~~~~~~~~~\n\
    \                             \n"
  stdout: ''
  timestamp: 1660009081
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    return average(numbers: absolute_difference(numbers: numbers,\n\
    \                                                center: mean(numbers: numbers)))\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpncrs5996.swift:10:12: error: cannot find 'average' in scope\n \
    \   return average(numbers: absolute_difference(numbers: numbers,\n          \
    \ ^~~~~~~\n/tmp/tmpncrs5996.swift:10:29: error: cannot find 'absolute_difference'\
    \ in scope\n    return average(numbers: absolute_difference(numbers: numbers,\n\
    \                            ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpncrs5996.swift:11:57:\
    \ error: cannot find 'mean' in scope\n                                       \
    \         center: mean(numbers: numbers)))\n                                 \
    \                       ^~~~\n"
  stdout: ''
  timestamp: 1660009081
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_dataset(numbers: numbers)\n    let abs_diffs:\
    \ [Double] = numbers.map { abs($0 - mean) }\n    return mean_of_dataset(numbers:\
    \ abs_diffs)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpctq2ldj6.swift:10:16: error: cannot find 'mean_of_dataset' in scope\n\
    \    let mean = mean_of_dataset(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmpctq2ldj6.swift:12:12: error: cannot find 'mean_of_dataset' in scope\n\
    \    return mean_of_dataset(numbers: abs_diffs)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009081
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n  let mean = numbers.mean()\n  return numbers.map { abs($0 - mean)\
    \ }.mean()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpl38x4d5t.swift:10:22: error: value of type '[Double]' has no member\
    \ 'mean'\n  let mean = numbers.mean()\n             ~~~~~~~ ^~~~\n/tmp/tmpl38x4d5t.swift:11:41:\
    \ error: value of type '[Double]' has no member 'mean'\n  return numbers.map {\
    \ abs($0 - mean) }.mean()\n         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~~~\n"
  stdout: ''
  timestamp: 1660009081
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let average = mean(numbers: numbers)\n    let squared_error\
    \ = numbers.map { abs($0 - average) }\n    return mean(numbers: squared_error)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpavrxeona.swift:10:19: error: cannot find 'mean' in scope\n    let\
    \ average = mean(numbers: numbers)\n                  ^~~~\n/tmp/tmpavrxeona.swift:12:12:\
    \ error: cannot find 'mean' in scope\n    return mean(numbers: squared_error)\n\
    \           ^~~~\n"
  stdout: ''
  timestamp: 1660009081
- exit_code: 0
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let sum = numbers.reduce(0.0, +)\n    let mean = sum / Double(numbers.count)\n\
    \    let deviations = numbers.map { abs($0 - mean) }\n    let sum_of_deviations\
    \ = deviations.reduce(0.0, +)\n    return sum_of_deviations / Double(numbers.count)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009081
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    // TODO: Write your implementation here\n    let mean = average(numbers:\
    \ numbers)\n    let difs = numbers.map { abs($0 - mean) }\n    return average(numbers:\
    \ difs)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpt8l1qn5r.swift:11:16: error: cannot find 'average' in scope\n \
    \   let mean = average(numbers: numbers)\n               ^~~~~~~\n/tmp/tmpt8l1qn5r.swift:13:12:\
    \ error: cannot find 'average' in scope\n    return average(numbers: difs)\n \
    \          ^~~~~~~\n"
  stdout: ''
  timestamp: 1660009081
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let average = mean(numbers: numbers)\n    var sum_difference\
    \ = 0.0\n    for number in numbers {\n        sum_difference += abs(number - average)\n\
    \    }\n    return sum_difference / Double(numbers.count)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp7d74ch0g.swift:10:19: error: cannot find 'mean' in scope\n    let\
    \ average = mean(numbers: numbers)\n                  ^~~~\n"
  stdout: ''
  timestamp: 1660009081
- exit_code: -4
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let N = Double(numbers.count)\n    let sum_x = numbers.reduce(0,\
    \ +)\n    let sum_abs_x = numbers.reduce(0, {sum, number in sum + abs(number)})\n\
    \    let x_mean = sum_x / N\n    let mad = (sum_abs_x - N * abs(x_mean)) / (N\
    \ - 1)\n    return mad\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: Exception
  stderr: 'tmpt7czwqeg/tmpt7czwqeg.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8741a5ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8741751b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8741751988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b87417507b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt7czwqeg                        0x000055b5c1a86503 <unavailable> + 5379

    5    libc.so.6                          0x00002b8741c46460 __libc_start_main +
    245

    6    tmpt7czwqeg                        0x000055b5c1a86159 <unavailable> + 4441

    '
  stdout: ''
  timestamp: 1660009081
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_array(numbers: numbers)\n    let abs_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_array(numbers: abs_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpf2o5hqdk.swift:10:16: error: cannot find 'mean_of_array' in scope\n\
    \    let mean = mean_of_array(numbers: numbers)\n               ^~~~~~~~~~~~~\n\
    /tmp/tmpf2o5hqdk.swift:12:12: error: cannot find 'mean_of_array' in scope\n  \
    \  return mean_of_array(numbers: abs_deviations)\n           ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009081
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    var diff\
    \ = [Double]()\n    for number in numbers {\n        diff.append(fabs(number -\
    \ mean))\n    }\n    return mean_of_numbers(numbers: diff)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp05akvhd1.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmp05akvhd1.swift:13:21: error: cannot find 'fabs' in scope\n        diff.append(fabs(number\
    \ - mean))\n                    ^~~~\n/tmp/tmp05akvhd1.swift:15:12: error: cannot\
    \ find 'mean_of_numbers' in scope\n    return mean_of_numbers(numbers: diff)\n\
    \           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009081
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let centerpoint = mean(numbers: numbers)\n    let devs = numbers.map\
    \ { abs($0 - centerpoint) }\n    return mean(numbers: devs)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpce90o5x4.swift:10:23: error: cannot find 'mean' in scope\n    let\
    \ centerpoint = mean(numbers: numbers)\n                      ^~~~\n/tmp/tmpce90o5x4.swift:12:12:\
    \ error: cannot find 'mean' in scope\n    return mean(numbers: devs)\n       \
    \    ^~~~\n"
  stdout: ''
  timestamp: 1660009081
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    var vals = numbers.map { abs($0 - mean(numbers: numbers)) }\n\
    \    return vals.reduce(0, +) / Double(vals.count)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp6nn00xxf.swift:10:39: error: cannot find 'mean' in scope\n    var\
    \ vals = numbers.map { abs($0 - mean(numbers: numbers)) }\n                  \
    \                    ^~~~\n"
  stdout: ''
  timestamp: 1660009082
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_arithmetic(numbers: numbers)\n    var sum:\
    \ Double = 0.0\n    for number in numbers {\n        sum += abs(number - mean)\n\
    \    }\n    return sum / Double(numbers.count)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpu16lo9gf.swift:10:16: error: cannot find 'mean_arithmetic' in scope\n\
    \    let mean = mean_arithmetic(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009081
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    return numbers.map { abs($0 - mean(numbers: numbers)) }.reduce(0,\
    \ +) / Double(numbers.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmplg4if1na.swift:10:35: error: cannot find 'mean' in scope\n    return\
    \ numbers.map { abs($0 - mean(numbers: numbers)) }.reduce(0, +) / Double(numbers.count)\n\
    \                                  ^~~~\n"
  stdout: ''
  timestamp: 1660009081
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let n = Double(numbers.count)\n    let mean = mean(numbers:\
    \ numbers)\n    let diff_sum = numbers.reduce(0.0) { $0 + abs($1 - mean) }\n \
    \   return diff_sum / n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmppo9f3mrx.swift:11:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers: numbers)\n               ^\n/tmp/tmppo9f3mrx.swift:11:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers: numbers)\n        ^\n"
  stdout: ''
  timestamp: 1660009081
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = VectorCalculations.mean(numbers: numbers)\n    let\
    \ deviations = numbers.map({ abs($0 - mean) })\n    return VectorCalculations.mean(numbers:\
    \ deviations)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpe4osgrtz.swift:10:16: error: cannot find 'VectorCalculations' in\
    \ scope\n    let mean = VectorCalculations.mean(numbers: numbers)\n          \
    \     ^~~~~~~~~~~~~~~~~~\n/tmp/tmpe4osgrtz.swift:12:12: error: cannot find 'VectorCalculations'\
    \ in scope\n    return VectorCalculations.mean(numbers: deviations)\n        \
    \   ^~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009081
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let sum_abs_diff_to_mean = numbers.reduce(0.0) { sum, num in\n\
    \        sum + abs(num - numbers.mean())\n    }\n    return sum_abs_diff_to_mean\
    \ / Double(numbers.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpp2e179ft.swift:11:33: error: value of type '[Double]' has no member\
    \ 'mean'\n        sum + abs(num - numbers.mean())\n                        ~~~~~~~\
    \ ^~~~\n"
  stdout: ''
  timestamp: 1660009081
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let numbers = numbers.filter { $0.isFinite }\n    let mean\
    \ = numbers.mean\n    let absolute_differences = numbers.map { abs($0 - mean)\
    \ }\n    return absolute_differences.mean\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpjejsb_lq.swift:11:24: error: value of type '[Double]' has no member\
    \ 'mean'\n    let mean = numbers.mean\n               ~~~~~~~ ^~~~\n"
  stdout: ''
  timestamp: 1660009081
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = numbers.mean()\n    let deviations = numbers.map\
    \ { abs($0 - mean) }\n    return deviations.mean()\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp26619om8.swift:10:24: error: value of type '[Double]' has no member\
    \ 'mean'\n    let mean = numbers.mean()\n               ~~~~~~~ ^~~~\n"
  stdout: ''
  timestamp: 1660009080
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_numbers(numbers: numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_numbers(numbers: absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpxh5944ai.swift:10:16: error: cannot find 'mean_numbers' in scope\n\
    \    let mean = mean_numbers(numbers: numbers)\n               ^~~~~~~~~~~~\n\
    /tmp/tmpxh5944ai.swift:12:12: error: cannot find 'mean_numbers' in scope\n   \
    \ return mean_numbers(numbers: absolute_deviations)\n           ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009081
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = arithmetic_mean(numbers: numbers)\n    let absolute_differences\
    \ = numbers.map { fabs($0 - mean) }\n    return arithmetic_mean(numbers: absolute_differences)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpg5y0k8sj.swift:10:16: error: cannot find 'arithmetic_mean' in scope\n\
    \    let mean = arithmetic_mean(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmpg5y0k8sj.swift:11:46: error: cannot find 'fabs' in scope\n    let absolute_differences\
    \ = numbers.map { fabs($0 - mean) }\n                                        \
    \     ^~~~\n/tmp/tmpg5y0k8sj.swift:12:12: error: cannot find 'arithmetic_mean'\
    \ in scope\n    return arithmetic_mean(numbers: absolute_differences)\n      \
    \     ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009081
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    guard !numbers.isEmpty else { return 0.0 }\n    var sum = 0.0\n\
    \    for number in numbers {\n        sum += abs(number - numbers.mean())\n  \
    \  }\n    return sum / Double(numbers.count)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpcxd_1kl0.swift:13:37: error: value of type '[Double]' has no member\
    \ 'mean'\n        sum += abs(number - numbers.mean())\n                      \
    \      ~~~~~~~ ^~~~\n"
  stdout: ''
  timestamp: 1660009081
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let count = Double(numbers.count)\n    let mean = mean(numbers:\
    \ numbers)\n    let deviations = numbers.map { abs($0 - mean) }\n    return (deviations.reduce(0.0,\
    \ +) / count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpq5wfp26c.swift:11:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers: numbers)\n               ^\n/tmp/tmpq5wfp26c.swift:11:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers: numbers)\n        ^\n"
  stdout: ''
  timestamp: 1660009081
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = numbers.mean()\n    return numbers.map { abs($0\
    \ - mean) }.mean()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpo0o57mi5.swift:10:24: error: value of type '[Double]' has no member\
    \ 'mean'\n    let mean = numbers.mean()\n               ~~~~~~~ ^~~~\n/tmp/tmpo0o57mi5.swift:11:43:\
    \ error: value of type '[Double]' has no member 'mean'\n    return numbers.map\
    \ { abs($0 - mean) }.mean()\n           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~~~\n"
  stdout: ''
  timestamp: 1660009081
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    if numbers.count == 0 {\n        return 0.0\n    }\n    let\
    \ mean = mean_of_array(numbers: numbers)\n    let absolute_deviations = numbers.map({\
    \ abs($0 - mean) })\n    return mean_of_array(numbers: absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmphe2q_d17.swift:13:16: error: cannot find 'mean_of_array' in scope\n\
    \    let mean = mean_of_array(numbers: numbers)\n               ^~~~~~~~~~~~~\n\
    /tmp/tmphe2q_d17.swift:15:12: error: cannot find 'mean_of_array' in scope\n  \
    \  return mean_of_array(numbers: absolute_deviations)\n           ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009082
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    return mean_absolute_error(numbers: numbers, center: mean(numbers:\
    \ numbers))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmprer9zj1p.swift:10:12: error: cannot find 'mean_absolute_error'\
    \ in scope\n    return mean_absolute_error(numbers: numbers, center: mean(numbers:\
    \ numbers))\n           ^~~~~~~~~~~~~~~~~~~\n/tmp/tmprer9zj1p.swift:10:58: error:\
    \ cannot find 'mean' in scope\n    return mean_absolute_error(numbers: numbers,\
    \ center: mean(numbers: numbers))\n                                          \
    \               ^~~~\n"
  stdout: ''
  timestamp: 1660009081
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = numbers.mean()\n    let squared_deviations = numbers.map\
    \ { pow($0 - mean, 2) }\n    return sqrt(squared_deviations.mean())\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpm3vpsn39.swift:10:24: error: value of type '[Double]' has no member\
    \ 'mean'\n    let mean = numbers.mean()\n               ~~~~~~~ ^~~~\n/tmp/tmpm3vpsn39.swift:11:44:\
    \ error: cannot find 'pow' in scope\n    let squared_deviations = numbers.map\
    \ { pow($0 - mean, 2) }\n                                           ^~~\n/tmp/tmpm3vpsn39.swift:12:12:\
    \ error: cannot find 'sqrt' in scope\n    return sqrt(squared_deviations.mean())\n\
    \           ^~~~\n"
  stdout: ''
  timestamp: 1660009082
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let n = Double(numbers.count)\n    let mean = average(numbers:\
    \ numbers)\n    var sum: Double = 0.0\n    for number in numbers {\n        sum\
    \ += abs(number - mean)\n    }\n    return sum / n\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpqpww8qv5.swift:11:16: error: cannot find 'average' in scope\n \
    \   let mean = average(numbers: numbers)\n               ^~~~~~~\n"
  stdout: ''
  timestamp: 1660009082
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    let deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(numbers: deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpijf5yr3q.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmpijf5yr3q.swift:12:12: error: cannot find 'mean_of_numbers' in scope\n\
    \    return mean_of_numbers(numbers: deviations)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009082
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    \n    let theMean = mean(numbers: numbers)\n    let theAbsoluteDeviations\
    \ = numbers.map({ abs($0 - theMean) })\n    return mean(numbers: theAbsoluteDeviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpuo3x2bqu.swift:11:19: error: cannot find 'mean' in scope\n    let\
    \ theMean = mean(numbers: numbers)\n                  ^~~~\n/tmp/tmpuo3x2bqu.swift:13:12:\
    \ error: cannot find 'mean' in scope\n    return mean(numbers: theAbsoluteDeviations)\n\
    \           ^~~~\n"
  stdout: ''
  timestamp: 1660009081
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let average = mean(numbers: numbers)\n    var dev_sum = 0.0\n\
    \    for index in 0..<numbers.count {\n        dev_sum += abs(numbers[index] -\
    \ average)\n    }\n    return dev_sum / Double(numbers.count)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpmai6f08w.swift:10:19: error: cannot find 'mean' in scope\n    let\
    \ average = mean(numbers: numbers)\n                  ^~~~\n"
  stdout: ''
  timestamp: 1660009082
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = array_mean(array: numbers)\n    let diffs = numbers.map\
    \ { $0 - mean }\n    let absoluteDiffs = diffs.map { abs($0) }\n    return array_mean(array:\
    \ absoluteDiffs)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp8v3xxflc.swift:10:16: error: cannot find 'array_mean' in scope\n\
    \    let mean = array_mean(array: numbers)\n               ^~~~~~~~~~\n/tmp/tmp8v3xxflc.swift:13:12:\
    \ error: cannot find 'array_mean' in scope\n    return array_mean(array: absoluteDiffs)\n\
    \           ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009081
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let mean = mean_of_numbers(numbers: numbers)\n    let absolute_differences\
    \ = numbers.map({ abs($0 - mean) })\n    return mean_of_numbers(numbers: absolute_differences)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpe3koqkgg.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmpe3koqkgg.swift:12:12: error: cannot find 'mean_of_numbers' in scope\n\
    \    return mean_of_numbers(numbers: absolute_differences)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009082
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let x_mean = mean(numbers: numbers)\n    let differences =\
    \ numbers.map { abs($0 - x_mean) }\n    return mean(numbers: differences)\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmphdts9_f9.swift:10:18: error: cannot find 'mean' in scope\n    let\
    \ x_mean = mean(numbers: numbers)\n                 ^~~~\n/tmp/tmphdts9_f9.swift:12:12:\
    \ error: cannot find 'mean' in scope\n    return mean(numbers: differences)\n\
    \           ^~~~\n"
  stdout: ''
  timestamp: 1660009082
- exit_code: 0
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let average = (numbers.reduce(0.0, +)) / Double(numbers.count)\n\
    \    let deviations = numbers.map({ abs($0 - average) })\n    return (deviations.reduce(0.0,\
    \ +)) / Double(deviations.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009082
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let avg: Double = mean(numbers: numbers)\n    let differences:\
    \ [Double] = numbers.map { abs($0 - avg) }\n    return mean(numbers: differences)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmplbft0nhj.swift:10:23: error: cannot find 'mean' in scope\n    let\
    \ avg: Double = mean(numbers: numbers)\n                      ^~~~\n/tmp/tmplbft0nhj.swift:12:12:\
    \ error: cannot find 'mean' in scope\n    return mean(numbers: differences)\n\
    \           ^~~~\n"
  stdout: ''
  timestamp: 1660009082
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    let numbers_sum = sum(array: numbers)\n    let numbers_mean\
    \ = numbers_sum / Double(numbers.count)\n    var numbers_deviations = [Double]()\n\
    \    for number in numbers {\n        numbers_deviations.append(abs(number - numbers_mean))\n\
    \    }\n    return sum(array: numbers_deviations) / Double(numbers.count)\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmph9v6y3zo.swift:10:23: error: cannot find 'sum' in scope\n    let\
    \ numbers_sum = sum(array: numbers)\n                      ^~~\n/tmp/tmph9v6y3zo.swift:16:12:\
    \ error: cannot find 'sum' in scope\n    return sum(array: numbers_deviations)\
    \ / Double(numbers.count)\n           ^~~\n"
  stdout: ''
  timestamp: 1660009082
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    return abs_deviation(numbers: numbers).reduce(0, +) / Double(numbers.count)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp0752pfb5.swift:10:12: error: cannot find 'abs_deviation' in scope\n\
    \    return abs_deviation(numbers: numbers).reduce(0, +) / Double(numbers.count)\n\
    \           ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009082
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    return mean_absolute_deviation(numbers: numbers, centerpoint:\
    \ mean(numbers: numbers))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpwa61xiij.swift:10:67: error: cannot find 'mean' in scope\n    return\
    \ mean_absolute_deviation(numbers: numbers, centerpoint: mean(numbers: numbers))\n\
    \                                                                  ^~~~\n/tmp/tmpwa61xiij.swift:10:67:\
    \ error: extra argument 'centerpoint' in call\n    return mean_absolute_deviation(numbers:\
    \ numbers, centerpoint: mean(numbers: numbers))\n                            \
    \      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009082
- exit_code: 1
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n  let mean = mean_of_array(numbers: numbers)\n  let absolute_differences\
    \ = numbers.map { abs($0 - mean) }\n  return mean_of_array(numbers: absolute_differences)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp5bg92a0p.swift:10:14: error: cannot find 'mean_of_array' in scope\n\
    \  let mean = mean_of_array(numbers: numbers)\n             ^~~~~~~~~~~~~\n/tmp/tmp5bg92a0p.swift:12:10:\
    \ error: cannot find 'mean_of_array' in scope\n  return mean_of_array(numbers:\
    \ absolute_differences)\n         ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009082
- exit_code: 0
  program: "\n/// For a given array of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double])\
    \ -> Double {\n    if numbers.count == 0 {\n        return Double.nan\n    }\n\
    \    let mean = numbers.reduce(0.0, +) / Double(numbers.count)\n    return numbers.map\
    \ { abs($0 - mean) }.reduce(0.0, +) / Double(numbers.count)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009082
