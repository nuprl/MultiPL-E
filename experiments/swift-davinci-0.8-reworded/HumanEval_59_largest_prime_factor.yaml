name: HumanEval_59_largest_prime_factor
language: swift
prompt: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
  /// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n:\
  \ 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
  \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
  \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
completions: ["    var lastFactor = 1\n    var target = n\n    if target % 2 == 0\
    \ {\n        lastFactor = 2\n        while target % 2 == 0 {\n            target\
    \ /= 2\n        }\n    }\n    var factor = 3\n    var maxFactor = Int(sqrt(Double(target)))\n\
    \    while target > 1 && factor <= maxFactor {\n        if target % factor ==\
    \ 0 {\n            target /= factor\n            lastFactor = factor\n       \
    \     while target % factor == 0 {\n                target /= factor\n       \
    \     }\n            maxFactor = Int(sqrt(Double(target)))\n        }\n      \
    \  factor += 2\n    }\n    if target == 1 {\n        return lastFactor\n    }\
    \ else {\n        return target\n    }", "    var largest_prime = 2\n    var cn\
    \ = n\n    while cn % 2 == 0 {\n        cn /= 2\n    }\n    for i in stride(from:\
    \ 3, through: n/2, by: 2) {\n        while cn % i == 0 {\n            largest_prime\
    \ = i\n            cn /= i\n        }\n    }\n    return largest_prime", '    return
    prime_factors(n: n).max()!', "    if is_prime(n: n) {\n        return n\n    }\n\
    \    var max = 0\n    var p = primes()\n    while n > 1 {\n        if n % p.next()!\
    \ == 0 {\n            max = p.next()!\n            n /= p.next()!\n        }\n\
    \    }\n    return max", '    return largest_prime_factor(n: n, from: 2)', " \
    \   var n = n\n    var i = 2\n    while i <= n {\n        if is_prime(n: i) &&\
    \ n % i == 0 {\n            n /= i\n        } else {\n            i += 1\n   \
    \     }\n    }\n    return i", "    // TODO\n    return 0", '    return 0', " \
    \ var m = n\n  for i in 2..<Int(sqrt(Double(n))) {\n    while m % i == 0 {\n \
    \     m /= i\n    }\n  }\n  return m", "    if n % 2 == 0 {\n        return largest_prime_factor(n:\
    \ n / 2)\n    }\n    for i in stride(from: 3, through: Int(sqrt(Double(n))), by:\
    \ 2) {\n        if n % i == 0 {\n            return largest_prime_factor(n: n\
    \ / i)\n        }\n    }\n    return n", "    var n = n\n    var f = 2\n    while\
    \ n > 1 {\n        if n % f == 0 {\n            while n % f == 0 {\n         \
    \       n /= f\n            }\n        }\n        f += 1\n    }\n    return f\
    \ - 1", "  let n = n.abs()\n  let sqrt_n = Int(sqrt(Double(n)))\n  var max_factor\
    \ = 1\n  var primes = [2]\n  var i = 3\n  while i <= sqrt_n {\n    let is_prime\
    \ = !primes.contains { i % $0 == 0 }\n    if is_prime {\n      primes.append(i)\n\
    \      if n % i == 0 {\n        max_factor = i\n      }\n    }\n    i += 2\n \
    \ }\n  return max_factor", "    var n = n\n    var i = 2\n    while i * i <= n\
    \ {\n        if n % i == 0 {\n            n /= i\n        } else {\n         \
    \   i += 1\n        }\n    }\n    return n", "    var n = n\n    var factor =\
    \ 2\n    while n > 1 {\n        if n % factor == 0 {\n            n /= factor\n\
    \        } else {\n            factor += 1\n        }\n    }\n    return factor",
  '    return -1', "    var factors = [Int]()\n    var current = n\n    for i in 2...n\
    \ {\n        if current % i == 0 {\n            factors.append(i)\n          \
    \  current /= i\n        }\n    }\n    return factors.last!", "    var n = n\n\
    \    var i = 2\n    while i * i <= n {\n        if n % i == 0 {\n            n\
    \ /= i\n        } else {\n            i += 1\n        }\n    }\n    return n",
  "    var p = 2\n    var r = n\n    while r > 1 {\n        while r % p == 0 {\n \
    \           r /= p\n        }\n        p += 1\n    }\n    return p - 1", "   \
    \ assert(n > 1)\n    var largest = 2\n    for i in (2...n).reversed() {\n    \
    \    if n % i == 0 && is_prime(n: i) {\n            largest = i\n            break\n\
    \        }\n    }\n    return largest", "    if is_prime(n: n) {\n        return\
    \ n\n    }\n    var p = largest_prime_factor(n: n - 1)\n    while (n % p != 0)\
    \ {\n        p = largest_prime_factor(n: p - 1)\n    }\n    return p", "    var\
    \ i = 2\n    var n = n\n    while i * i <= n {\n        if n % i == 0 {\n    \
    \        n /= i\n        } else {\n            i += 1\n        }\n    }\n    return\
    \ n", "\tvar nn = n\n\tvar d = 2\n\tvar factors = [Int]()\n\twhile nn > 1 {\n\t\
    \tif nn % d == 0 {\n\t\t\tfactors.append(d)\n\t\t\tnn /= d\n\t\t} else {\n\t\t\
    \td += 1\n\t\t}\n\t}\n\treturn factors.last!", "    if n % 2 == 0 {\n        return\
    \ largest_prime_factor(n: n / 2)\n    }\n    for i in stride(from: 3, through:\
    \ Int(sqrt(Double(n))), by: 2) {\n        if n % i == 0 {\n            return\
    \ largest_prime_factor(n: n / i)\n        }\n    }\n    return n", "  var n =\
    \ n\n  var i = 2\n  while i <= n / i {\n    while n % i == 0 {\n      n /= i\n\
    \    }\n    i += 1\n  }\n  return n", "    var factors = [Int]()\n    var last_factor\
    \ = 0\n    var quotient = n\n    while true {\n        if is_prime(n: quotient)\
    \ {\n            last_factor = quotient\n            break\n        }\n      \
    \  for factor in 2...Int(sqrt(Double(quotient))) {\n            if quotient %\
    \ factor == 0 {\n                factors.append(factor)\n                quotient\
    \ /= factor\n                break\n            }\n        }\n    }\n    print(factors)\n\
    \    return last_factor", "\tif n % 2 == 0 {\n\t\treturn largest_prime_factor(n:\
    \ n / 2)\n\t}\n\tfor factor in stride(from: 3, through: Int(sqrt(Double(n))),\
    \ by: 2) {\n\t\tif n % factor == 0 {\n\t\t\treturn largest_prime_factor(n: n /\
    \ factor)\n\t\t}\n\t}\n\treturn n", "    var n = n\n    var largest = 0\n    for\
    \ prime in prime_generator() {\n        if n % prime == 0 {\n            largest\
    \ = prime\n            while n % prime == 0 {\n                n /= prime\n  \
    \          }\n        }\n        if n == 1 {\n            break\n        }\n \
    \   }\n    return largest", "    var factor = 2\n    var factors = [Int]()\n \
    \   var dividend = n\n    while true {\n        while dividend % factor == 0 {\n\
    \            factors.append(factor)\n            dividend /= factor\n        }\n\
    \        factor += 1\n        if factor > dividend {\n            break\n    \
    \    }\n    }\n    return factors.max()!", "    var largest_factor = 1\n    var\
    \ current_prime = 2\n    var upper_bound = Int(sqrt(Double(n)))\n    var temp\
    \ = n\n    while temp > 1 {\n        while temp % current_prime == 0 {\n     \
    \       temp /= current_prime\n            largest_factor = current_prime\n  \
    \      }\n        current_prime += 1\n        if current_prime > upper_bound {\n\
    \            break\n        }\n    }\n    return largest_factor", "    // is_prime\
    \ method failed for n = 5915587277, where n = 4 * 15 * 5 * 17 * 23 * 29 * 31 *\
    \ 37 * 41\n    // so we need to check if n is divisible by each of these prime\
    \ numbers\n    // 104743\n    let primes = [ 2, 3, 5, 7, 11, 13, 17, 19, 23, 29,\
    \ 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109,\
    \ 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197,\
    \ 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283,\
    \ 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389,\
    \ 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487,\
    \ 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599,\
    \ 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691,\
    \ 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811,\
    \ 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919,\
    \ 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021,\
    \ 1031, 1033, 1039, 1049, 1051, 1061", "  var n = n\n  if n % 2 == 0 {\n    n\
    \ /= 2\n  }\n  for var i = 3; i < Int(sqrt(Double(n))); i += 2 {\n    if n % i\
    \ == 0 {\n      n /= i\n    }\n  }\n  return n", '    return 0', "    for i in\
    \ stride(from: Int(sqrt(Double(n))), through: 2, by: -1) {\n        if n % i ==\
    \ 0 && is_prime(n: i) {\n            return i\n        }\n    }\n    return 1",
  "    var n = n\n    var largest = 1\n    var i = 2\n    while i <= n {\n       \
    \ if n % i == 0 {\n            largest = i\n            n /= i\n        } else\
    \ {\n            i += 1\n        }\n    }\n    return largest", "    var n = n\n\
    \    var divisor = 2\n    while n > 1 {\n        while n % divisor == 0 {\n  \
    \          n /= divisor\n        }\n        divisor += 1\n    }\n    return divisor\
    \ - 1", "    for i in 2..<n {\n        if n % i == 0 {\n            return largest_prime_factor(n:\
    \ n / i)\n        }\n    }\n    return n", "    let half = Int(ceil(sqrt(Double(n))))\n\
    \    for p in 2...half {\n        if n % p == 0 {\n            return largest_prime_factor(n:\
    \ n / p)\n        }\n    }\n    return n", "    var primes = [Int]()\n    var\
    \ p = 2\n    var m = n\n    while m > 1 {\n        while m % p == 0 {\n      \
    \      primes.append(p)\n            m /= p\n        }\n        p += 1\n    }\n\
    \    return primes.last!", "    var n = n\n    var i = 2\n    while i <= n / i\
    \ {\n        if n % i == 0 {\n            n /= i\n        } else {\n         \
    \   i += 1\n        }\n    }\n    return n", "    for var i = 2; i <= n; ++i {\n\
    \        if n % i == 0 {\n            var p = n / i\n            if is_prime(p)\
    \ {\n                return p\n            }\n        }\n    }\n    return 0",
  "    var x = 2\n    var largest = 0\n    while x <= n {\n        if (n % x == 0)\
    \ {\n            largest = x\n            n /= x\n        } else {\n         \
    \   x += 1\n        }\n    }\n    return largest", "    var primes = [Int]()\n\
    \    var remaining = n\n    var next_prime = 2\n    while remaining > 1 {\n  \
    \      if remaining % next_prime == 0 {\n            primes.append(next_prime)\n\
    \            remaining /= next_prime\n        } else {\n            next_prime\
    \ += 1\n        }\n    }\n    return primes.last!", "    var largest_prime_factor\
    \ = 1\n    var p = 2\n    while n > 1 {\n        if n % p == 0 {\n           \
    \ largest_prime_factor = p\n            n /= p\n        } else {\n           \
    \ p += 1\n        }\n    }\n    return largest_prime_factor", "    // TODO: implement\
    \ the function\n    return 0", "    var divisor = 2\n    var result = 0\n    while\
    \ (n > 1) {\n        if (n % divisor == 0) {\n            n /= divisor\n     \
    \       result = divisor\n        } else {\n            divisor += 1\n       \
    \ }\n    }\n    return result", "    var n = n\n    var prime = 2\n    while n\
    \ % prime != 0 {\n        prime += 1\n    }\n    while n % prime == 0 {\n    \
    \    n /= prime\n    }\n    return n", '    return 0', "    let factors = prime_factors(n:\
    \ n)\n    return factors[factors.count - 1]", '    return 0', "    var k = n /\
    \ 2\n    for i in (2...k).reversed() {\n        if n % i == 0 && is_prime(n: i)\
    \ {\n            return i\n        }\n    }\n    return 0", "    var largest_prime\
    \ = 0\n    let n = n\n    if n == 2 {\n        return n\n    }\n    for i in 2...n\
    \ {\n        if n % i == 0 {\n            if is_prime(n: i) {\n              \
    \  largest_prime = i\n            }\n        }\n    }\n    return largest_prime",
  "    var largest = 0\n    for i in stride(from: 2, through: n/2, by: 1) {\n    \
    \    if n % i == 0 {\n            if is_prime(n: i) {\n                largest\
    \ = i\n            }\n        }\n    }\n    return largest", "    let max = Int(ceil(sqrt(Double(n))))\n\
    \    var largest = 0\n    for i in 2...max {\n        if n % i == 0 {\n      \
    \      largest = i\n            break\n        }\n    }\n    if largest > 0 {\n\
    \        return largest_prime_factor(n: n / largest)\n    }\n    return n", '    return
    0', "    // TODO: Implement.\n    var r = n\n    var i = 2\n    while r > 1 {\n\
    \        if r % i == 0 {\n            r /= i\n        } else {\n            i\
    \ += 1\n        }\n    }\n    return i", "    let sqrtn = Int(sqrt(Double(n)))\n\
    \    for i in stride(from: sqrtn, through: 2, by: -1) {\n        if n % i == 0\
    \ && is_prime(i) {\n            return i\n        }\n    }\n    return 1", " \
    \   var n = n\n    var largest = 0\n    while n % 2 == 0 {\n        largest =\
    \ 2\n        n /= 2\n    }\n    for i in stride(from: 3, through: Int(sqrt(Double(n))),\
    \ by: 2) {\n        while n % i == 0 {\n            largest = i\n            n\
    \ /= i\n        }\n    }\n    if n > 2 {\n        largest = n\n    }\n    return\
    \ largest", "    for var i = 2; i < n; i++ {\n        if n % i == 0 {\n      \
    \      return largest_prime_factor(n/i)\n        }\n    }\n    return n", "  var\
    \ factors = prime_factors(n: n)\n  return factors[factors.count - 1]", "    var\
    \ primes = [2]\n    var factors = [Int]()\n    var n = n\n    while n > 1 {\n\
    \        var new_prime = true\n        for p in primes {\n            if n % p\
    \ == 0 {\n                factors.append(p)\n                n /= p\n        \
    \        new_prime = false\n                break\n            }\n        }\n\
    \        if new_prime {\n            let p = primes.last! + 1\n            while\
    \ !is_prime(n: p) {\n                primes.append(p)\n            }\n       \
    \ }\n    }\n    return factors.max()!", "    var n = n\n    var i = 2\n    while\
    \ i * i <= n {\n        if n % i == 0 {\n            n /= i\n        } else {\n\
    \            i += 1\n        }\n    }\n    return n", "    var max_factor = 2\n\
    \    var num = n\n    while num % 2 == 0 {\n        num /= 2\n    }\n    var factor\
    \ = 3\n    while Double(factor) * Double(factor) <= Double(num) {\n        if\
    \ num % factor == 0 {\n            num /= factor\n            max_factor = factor\n\
    \        } else {\n            factor += 2\n        }\n    }\n    if num > 2 {\n\
    \        max_factor = num\n    }\n    return max_factor", "    var n = n\n   \
    \ var i = 2\n    while n != 1 {\n        if n % i == 0 {\n            n /= i\n\
    \        } else {\n            i += 1\n        }\n    }\n    return i", "    if\
    \ n % 2 == 0 {\n        return largest_prime_factor(n: n / 2)\n    }\n    var\
    \ i = 3\n    while i <= sqrt(n) {\n        if n % i == 0 {\n            return\
    \ largest_prime_factor(n: n / i)\n        }\n        i += 2\n    }\n    return\
    \ n", '    return factors(n: n).filter(is_prime).last!', "    assert(n > 1)\n\
    \    var prime_factors = [Int]()\n    var n = n\n    for x in 2..<n {\n      \
    \  if n % x == 0 {\n            n /= x\n            prime_factors.append(x)\n\
    \        }\n    }\n    assert(prime_factors.count > 0)\n    return prime_factors.last!",
  "    var factor = 1\n    var dividend = n\n    while dividend % 2 == 0 {\n     \
    \   factor = 2\n        dividend /= 2\n    }\n    let limit = Int(sqrt(Double(dividend)))\n\
    \    var i = 3\n    while i <= limit {\n        if dividend % i == 0 {\n     \
    \       factor = i\n            dividend /= i\n        } else {\n            i\
    \ += 2\n        }\n    }\n    if dividend > 2 {\n        factor = dividend\n \
    \   }\n    return factor", "    var i = 2\n    var product = 1\n    while i <=\
    \ n {\n        // special case for 2\n        if n % i == 0 {\n            product\
    \ *= i\n            if product == n {\n                return i\n            }\n\
    \        }\n        // special case for odd numbers\n        if i == 2 {\n   \
    \         i += 1\n        } else {\n            i += 2\n        }\n    }\n   \
    \ return n", "    var n = n\n    var i = 2\n    while i * i <= n {\n        if\
    \ n % i == 0 {\n            n /= i\n        } else {\n            i += 1\n   \
    \     }\n    }\n    return n", "    assert(n > 1)\n    var r = n\n    var i =\
    \ 2\n    while r > 1 {\n        while r % i == 0 {\n            r /= i\n     \
    \   }\n        i += 1\n    }\n    return i - 1", "    var prime_factors = [Int]()\n\
    \    var num = n\n    var factor = 2\n    while factor <= num {\n        if num\
    \ % factor == 0 {\n            prime_factors.append(factor)\n            num /=\
    \ factor\n        } else {\n            factor += 1\n        }\n    }\n    return\
    \ prime_factors.last!", "    let n = n\n    var factor = 2\n    while n > 1 {\n\
    \        if n % factor == 0 {\n            n /= factor\n        } else {\n   \
    \         factor += 1\n        }\n    }\n    return factor", "    var n = n\n\
    \    var prime_factors = [Int]()\n    let primes = primes_up_to(n: n)\n    while\
    \ primes.last! < n {\n        let largest_prime = primes.last!\n        if n %\
    \ largest_prime == 0 {\n            prime_factors.append(largest_prime)\n    \
    \        n /= largest_prime\n        }\n    }\n    return n", "    let p = smallest_prime_factor(n:\
    \ n)\n    if n == p {\n        return n\n    }\n    return largest_prime_factor(n:\
    \ n / p)", "    for p in 2...n {\n        if n % p == 0 {\n            return\
    \ largest_prime_factor(n: n / p)\n        }\n    }\n    return n", "    let sqrtN\
    \ = Int(sqrt(Double(n)))\n    for i in stride(from: sqrtN, through: 2, by: -1)\
    \ {\n        if n % i == 0 && is_prime(i) {\n            return i\n        }\n\
    \    }\n    return n", "    var number = n\n    var divisor = 2\n    while number\
    \ > 1 {\n        while number % divisor == 0 {\n            number /= divisor\n\
    \        }\n        divisor += 1\n    }\n    return divisor - 1", "    var n =\
    \ n\n    var i = 2\n    while i * i <= n {\n        if n % i == 0 {\n        \
    \    n /= i\n        } else {\n            i += 1\n        }\n    }\n    return\
    \ n", '    return 0', "    var prime = 2\n    var divisor = 2\n    var quotient\
    \ = n\n    while (divisor * divisor <= quotient) {\n        if (quotient % divisor\
    \ == 0) {\n            prime = divisor\n            quotient /= divisor\n    \
    \    } else {\n            divisor += 1\n        }\n    }\n    if (quotient >\
    \ prime) {\n        prime = quotient\n    }\n    return prime", '    return prime_factors(n:
    n).last!', "    if n <= 1 {\n        fatalError(\"n must be greater than 1\")\n\
    \    }\n    if is_prime(n: n) {\n        fatalError(\"n must not be a prime\"\
    )\n    }\n    var res = 0\n    for i in 1 ... Int(sqrt(Double(n))) {\n       \
    \ if n % i == 0 {\n            if is_prime(n: i) {\n                res = i\n\
    \            }\n        }\n    }\n    return res", "  var number = n\n  var factor\
    \ = 2\n  while number != 1 {\n    if number % factor == 0 {\n      number /= factor\n\
    \    } else {\n      factor += 1\n    }\n  }\n  return factor", "    var n = n\n\
    \    var f = 2\n    while n > 1 {\n        while n % f == 0 {\n            n /=\
    \ f\n        }\n        f += 1\n    }\n    return f - 1", "    for i in 2..<n\
    \ {\n        if n % i == 0 {\n            return max(i, largest_prime_factor(n:\
    \ n / i))\n        }\n    }\n    return n", "    var number = n\n    var i = 2\n\
    \    while i < number {\n        if number % i == 0 {\n            number /= i\n\
    \        } else {\n            i += 1\n        }\n    }\n    return number", " \
    \   let sqrt_n = Int(sqrt(Double(n)))\n    var primes = sieve_of_eratosthenes(n:\
    \ sqrt_n)\n    primes.removeLast()\n    var factors = Set<Int>()\n    var temp\
    \ = n\n    while temp > 1 {\n        for p in primes {\n            if temp %\
    \ p == 0 {\n                factors.insert(p)\n                temp /= p\n   \
    \             break\n            }\n        }\n    }\n    return factors.max()!",
  "    var factors = [Int]()\n    var prime_factors = [Int]()\n    var factor = 2\n\
    \    while n > 1 {\n        while n % factor == 0 {\n            factors.append(factor)\n\
    \            n /= factor\n        }\n        factor += 1\n    }\n    for n in\
    \ factors {\n        if is_prime(n: n) {\n            prime_factors.append(n)\n\
    \        }\n    }\n    return prime_factors.max()!", "    if (n % 2 == 0) {\n\
    \        return largest_prime_factor(n: n / 2)\n    }\n    for i in stride(from:\
    \ 3, through: sqrt(Double(n)), by: 2) {\n        if (n % Int(i) == 0) {\n    \
    \        return largest_prime_factor(n: n / Int(i))\n        }\n    }\n    return\
    \ n", "\treturn 0", '    return factor(n: n).last!', "    var x = 2\n    var f\
    \ = n\n    while f % x == 0 {\n        f /= x\n    }\n    x += 1\n    while x\
    \ < f {\n        while f % x == 0 {\n            f /= x\n        }\n        x\
    \ += 2\n    }\n    return f", "    var factor = 0\n    var m = n\n    var d =\
    \ 2\n    while d * d <= m {\n        if m % d == 0 {\n            factor = d\n\
    \            m /= d\n        } else {\n            d += 1\n        }\n    }\n\
    \    return m > 1 ? m : factor", "    // TODO\n    var largest = 1\n    for i\
    \ in 2...n {\n        if n % i == 0 {\n            largest = i\n        }\n  \
    \  }\n    return largest", '    return prime_factors(n: n).last!', "    var (m,\
    \ d) = (n, 2)\n    while m > 1 {\n        while m % d == 0 {\n            m /=\
    \ d\n        }\n        d += 1\n    }\n    return d - 1", "  var max: Int = 1\n\
    \  var n = n\n  for p in [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\
    \ 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97] {\n    while n % p == 0 {\n    \
    \  n /= p\n      max = p\n    }\n  }\n  return max", "    var factors = [Int]()\n\
    \    var n = n\n    for factor in 2...n {\n        if n%factor == 0 {\n      \
    \      factors.append(factor)\n            n /= factor\n        }\n    }\n   \
    \ return factors.last!", "    // TODO: Write this function\n    return 0", " \
    \   var factor = 2\n    var largest_factor = 0\n    while factor <= n {\n    \
    \    if n % factor == 0 {\n            var is_prime = true\n            for var\
    \ i = 2; i < factor; i++ {\n                if factor % i == 0 {\n           \
    \         is_prime = false\n                    break\n                }\n   \
    \         }\n            if is_prime {\n                largest_factor = factor\n\
    \            }\n        }\n        factor++\n    }\n    return largest_factor",
  "    var nn = n\n    var factor = 2\n    while nn > 1 {\n        while nn % factor\
    \ == 0 {\n            nn /= factor\n        }\n        factor += 1\n    }\n  \
    \  return factor - 1", "    var lpf = 1\n    var i = 2\n    while i <= n {\n \
    \       if n % i == 0 {\n            lpf = i\n            n /= i\n        } else\
    \ {\n            i += 1\n        }\n    }\n    return lpf", "    var n = n\n \
    \   var i = 2\n    while i <= n {\n        if n % i == 0 {\n            n /= i\n\
    \        } else {\n            i += 1\n        }\n    }\n    return i", '  return
    0', "  var num = n\n  var prime = 2\n  while num > 1 {\n    while num % prime\
    \ == 0 {\n      num /= prime\n    }\n    prime += 1\n  }\n  return prime - 1",
  "  var factor = 2, end = Int(sqrt(Double(n)))\n  while factor <= end {\n    if n\
    \ % factor == 0 {\n      n /= factor\n      end = Int(sqrt(Double(n)))\n    }\
    \ else {\n      factor += 1\n    }\n  }\n  return n", "    var i = 2\n    var\
    \ result = 1\n    while i * i <= n {\n        if n % i == 0 {\n            n /=\
    \ i\n            result = i\n        } else {\n            i += 1\n        }\n\
    \    }\n    if n > 1 {\n        result = n\n    }\n    return result", "    var\
    \ divisor = 2\n    var factor = n\n    while (factor > 1) {\n        if (factor\
    \ % divisor == 0) {\n            factor /= divisor\n        } else {\n       \
    \     divisor += 1\n        }\n    }\n    return divisor", "    var (n, largest)\
    \ = (n, 1)\n    while n % 2 == 0 { n /= 2 }\n    for p in stride(from: 3, through:\
    \ Int(sqrt(Double(n))), by: 2) {\n        while n % p == 0 {\n            n /=\
    \ p\n            largest = p\n        }\n    }\n    return largest", "    let\
    \ end = Int(sqrt(Double(n)))\n    var i = 2\n    while i <= end {\n        if\
    \ n % i == 0 {\n            return largest_prime_factor(n: n / i)\n        }\n\
    \        i += 1\n    }\n    return n", "    var largest_prime_factor = 1\n   \
    \ var current_factor = 2\n    var number = n\n    while number > 1 {\n       \
    \ while number % current_factor == 0 {\n            largest_prime_factor = current_factor\n\
    \            number /= current_factor\n        }\n        current_factor += 1\n\
    \    }\n    return largest_prime_factor", "    var n = n\n    var num = 2\n  \
    \  while n > 1 {\n        if n % num == 0 {\n            n /= num\n        } else\
    \ {\n            num += 1\n        }\n    }\n    return num", "    var n = n\n\
    \    var x = 2\n    while x * x <= n {\n        if n % x == 0 {\n            n\
    \ /= x\n        } else {\n            x += 1\n        }\n    }\n    return n",
  "    var p = 1, q = n\n    while q % 2 == 0 {\n        p = 2\n        q /= 2\n \
    \   }\n    var f = 3\n    while q != 1 {\n        while q % f == 0 {\n       \
    \     p = f\n            q /= f\n        }\n        f += 2\n    }\n    return\
    \ p", "    var factor = 2\n    var largest = 2\n    while n > 1 {\n        if\
    \ n % factor == 0 {\n            largest = factor\n            n /= factor\n \
    \       } else {\n            factor += 1\n        }\n    }\n    return largest",
  "    var p = 2\n    var n = n\n    while n != 1 {\n        if n % p == 0 {\n   \
    \         n /= p\n        } else {\n            p += 1\n        }\n    }\n   \
    \ return p", "    var prime = 2\n    while (prime * prime <= n) {\n        if\
    \ (n % prime == 0) {\n            return largest_prime_factor(n: n / prime)\n\
    \        }\n        prime += 1\n    }\n    return n", "    var number = n\n  \
    \  var i = 2\n    while i * i <= number {\n        if number % i == 0 {\n    \
    \        number /= i\n        } else {\n            i += 1\n        }\n    }\n\
    \    return number", "    var largest = 0\n    var target = n\n    var dividend\
    \ = 2\n    while target > 1 {\n        if target % dividend == 0 {\n         \
    \   largest = dividend\n            target /= dividend\n        } else {\n   \
    \         dividend += 1\n        }\n    }\n    return largest", "\tvar factor\
    \ = 1\n\tvar num = n\n\tvar i = 2\n\t\n\twhile i * i <= num {\n\t\tif num % i\
    \ == 0 {\n\t\t\tfactor = i\n\t\t\tnum /= i\n\t\t} else {\n\t\t\ti += 1\n\t\t}\n\
    \t}\n\t\n\tif num > 1 {\n\t\tfactor = num\n\t}\n\t\n\treturn factor", "    let\
    \ prime_numbers = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53,\
    \ 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    var max_prime = 1\n    var np = n\n\
    \    while np > 1 {\n        for p in prime_numbers {\n            if np % p ==\
    \ 0 {\n                np /= p\n                max_prime = p\n              \
    \  break\n            }\n        }\n    }\n    return max_prime", "    var n =\
    \ n\n    var p = 2\n    while n > 1 {\n        while n % p == 0 {\n          \
    \  n /= p\n        }\n        p += 1\n    }\n    return p", "    var largest_prime\
    \ = 0\n    var i = 2\n    while i * i <= n {\n        if n % i == 0 {\n      \
    \      n /= i\n            largest_prime = i\n        } else {\n            i\
    \ += 1\n        }\n    }\n    if n > largest_prime {\n        largest_prime =\
    \ n\n    }\n    return largest_prime", "    var n = n\n    var f = 2\n    while\
    \ n > 1 {\n        if n % f == 0 {\n            n /= f\n        } else {\n   \
    \         f += 1\n        }\n    }\n    return f", '    return 0', "    // Check\
    \ factors up to n\n    var current = n\n    var i = 2\n    while i < current {\n\
    \        // If factor, update n and exit loop\n        if current % i == 0 {\n\
    \            current = current / i\n            break\n        }\n        i +=\
    \ 1\n    }\n    // If n is still equal to original n, n is a prime, so return\
    \ n\n    if current == n {\n        return n\n    }\n    // Otherwise, continue\
    \ recursively\n    return largest_prime_factor(n: current)", "  var n = n\n  var\
    \ i = 2\n  while i * i <= n {\n    while n % i == 0 {\n      n /= i\n    }\n \
    \   i += 1\n  }\n  return n", "    var x = n\n    var factors = [Int]()\n    while\
    \ x % 2 == 0 {\n        factors.append(2)\n        x /= 2\n    }\n    var i =\
    \ 3\n    while i <= x {\n        if x % i == 0 {\n            factors.append(i)\n\
    \            x /= i\n        } else {\n            i += 2\n        }\n    }\n\
    \    return factors.last!", "  var prime_factor = 2\n  while n > prime_factor\
    \ {\n    if n % prime_factor == 0 {\n      n /= prime_factor\n    } else {\n \
    \     prime_factor += 1\n    }\n  }\n  return prime_factor", "    var m = n\n\
    \    var p = 2\n    while p * p <= m {\n        if m % p == 0 {\n            m\
    \ /= p\n        } else {\n            p += 1\n        }\n    }\n    return m",
  '    return primes(n: n).max()!', "    var n = n\n    var largest = 2\n    if n\
    \ % 2 == 0 {\n        largest = 2\n        while n % 2 == 0 {\n            n /=\
    \ 2\n        }\n    }\n    for i in 3.stride(through: n, by: 2) {\n        if\
    \ n % i == 0 {\n            largest = i\n            while n % i == 0 {\n    \
    \            n /= i\n            }\n        }\n    }\n    return largest", " \
    \   var n = n\n    var i = 2\n    while i < n {\n        if n % i == 0 {\n   \
    \         n /= i\n        } else {\n            i += 1\n        }\n    }\n   \
    \ return n", "    // initialize primes to an array of all primes less than n.\n\
    \    var primes = [Int]()\n    for i in stride(from: 2, to: n, by: 1) {\n    \
    \    if is_prime(n: i) {\n            primes.append(i)\n        }\n    }\n   \
    \ // if n < largest_prime then it must be prime\n    var largest_prime = primes.last!\n\
    \    if n > largest_prime {\n        // iterate over primes in reverse order.\n\
    \        for prime in primes.reversed() {\n            if n % prime == 0 {\n \
    \               largest_prime = prime\n                break\n            }\n\
    \        }\n    }\n    return largest_prime", "    guard n > 1 else {\n      \
    \  return 0\n    }\n    var n = n\n    var lpf = 0\n    for i in 2...n {\n   \
    \     guard is_prime(i) else {\n            continue\n        }\n        while\
    \ n % i == 0 {\n            n /= i\n            lpf = i\n        }\n    }\n  \
    \  return lpf", "    var n = n\n    var largest_factor = 1\n    for i in 2...n\
    \ {\n        if n % i == 0 {\n            largest_factor = i\n            n /=\
    \ i\n        }\n    }\n    return largest_factor", "    var factors = [Int]()\n\
    \    var remainder = n\n    var factor = 2\n    while remainder % factor == 0\
    \ {\n        factors.append(factor)\n        remainder /= factor\n    }\n    factor\
    \ += 1\n    while remainder > 1 {\n        while remainder % factor == 0 {\n \
    \           factors.append(factor)\n            remainder /= factor\n        }\n\
    \        factor += 2\n    }\n    return factors.last!", "    if n <= 3 {\n   \
    \     return n\n    }\n    var n = n\n    var largestPrime = 2\n    while n %\
    \ 2 == 0 {\n        n /= 2\n    }\n    let max = Int(sqrt(Double(n)))\n    var\
    \ i = 3\n    while i <= max {\n        while n % i == 0 {\n            n /= i\n\
    \            largestPrime = i\n        }\n        i += 2\n    }\n    if n > 2\
    \ {\n        largestPrime = n\n    }\n    return largestPrime", "    var p = n\n\
    \    var d = 2\n    while p % d == 0 {\n        p /= d\n    }\n    d += 1\n  \
    \  while p % d != 0 {\n        d += 2\n    }\n    return p / d", "    var factor\
    \ = 2\n    var n = n\n    while n > 1 {\n        if n % factor == 0 {\n      \
    \      n /= factor\n        } else {\n            factor += 1\n        }\n   \
    \ }\n    return factor", "    var n = n\n    var factor = 2\n    while n != 1\
    \ {\n        if n % factor == 0 {\n            n /= factor\n        } else {\n\
    \            factor += 1\n        }\n    }\n    return factor", "    var max:\
    \ Int = -1\n\n    for i in 2..<n {\n        if n % i == 0 {\n            max =\
    \ i\n            break\n        }\n    }\n\n    if max == -1 {\n        return\
    \ max\n    }\n\n    if max == n {\n        return max\n    }\n\n    return largest_prime_factor(n:\
    \ n / max)", '    return 1', "    var n = n\n    var prime = 2\n    while n >\
    \ 1 {\n        if n % prime == 0 {\n            n /= prime\n        } else {\n\
    \            prime += 1\n        }\n    }\n    return prime", "    guard n > 1\
    \ else {\n        print(\"Input must be greater than 1\")\n        return -1\n\
    \    }\n    var n = n\n    var largest = -1\n    while n % 2 == 0 {\n        largest\
    \ = 2\n        n /= 2\n    }\n    for i in stride(from: 3, through: Int(sqrt(Double(n))),\
    \ by: 2) {\n        while n % i == 0 {\n            largest = i\n            n\
    \ /= i\n        }\n    }\n    if n > 2 {\n        largest = n\n    }\n    return\
    \ largest", "    var i = 2\n    var largestPrime = 1\n    while n > 1 {\n    \
    \    if n % i == 0 {\n            largestPrime = i\n            n /= i\n     \
    \       continue\n        }\n        i += 1\n    }\n    return largestPrime",
  "    var largest_prime = 1\n    var i = 2\n    while i * i <= n {\n        if n\
    \ % i == 0 {\n            largest_prime = i\n            n /= i\n        } else\
    \ {\n            i += 1\n        }\n    }\n    if n > 1 {\n        largest_prime\
    \ = n\n    }\n    return largest_prime", "    var n = n\n    var largest_prime\
    \ = 0\n    var p = 2\n    while n > 1 {\n        if n % p == 0 {\n           \
    \ n /= p\n            largest_prime = p\n        } else {\n            p += 1\n\
    \        }\n    }\n    return largest_prime", "    var num = n\n    var factor\
    \ = 2\n    while num > 1 {\n        if num % factor == 0 {\n            num /=\
    \ factor\n        } else {\n            factor += 1\n        }\n    }\n    return\
    \ factor", "    var largest_factor = 2\n    var factor = 2\n    while n > 1 {\n\
    \        while n % factor == 0 {\n            n /= factor\n            largest_factor\
    \ = factor\n        }\n        factor += 1\n    }\n    return largest_factor",
  "  var factor = 2\n  var max_factor = 1\n  while factor <= n {\n    if n % factor\
    \ == 0 {\n      n /= factor\n      max_factor = factor\n    } else {\n      factor\
    \ += 1\n    }\n  }\n  return max_factor", "    var largest_factor = 1\n    var\
    \ i = 2\n    while i <= n {\n        if n % i == 0 {\n            largest_factor\
    \ = i\n            n /= i\n        } else {\n            i += 1\n        }\n \
    \   }\n    return largest_factor", "    var i = 2\n    var primeFactor = 1\n \
    \   while i * i <= n {\n        if n % i == 0 {\n            primeFactor = i\n\
    \            n /= i\n        } else {\n            i += 1\n        }\n    }\n\
    \    if n > 1 {\n        primeFactor = n\n    }\n    return primeFactor", "  \
    \  var i = 2\n    var n = n\n    while i * i <= n {\n        if n % i == 0 {\n\
    \            n /= i\n        } else {\n            i += 1\n        }\n    }\n\
    \    return n", "    if n <= 1 {\n        return 0\n    }\n\n    var largestPrimeFactor\
    \ = 1\n    var n = n\n    for factor in primes_up_to(n: n) {\n        while n\
    \ % factor == 0 {\n            largestPrimeFactor = factor\n            n /= factor\n\
    \        }\n    }\n    return largestPrimeFactor", '    return largest_prime_factor_helper(n:
    n, f: 2)', "    assert(n > 1)\n    for i in (2..<n).reversed() {\n        if n\
    \ % i == 0 && is_prime(n: i) {\n            return i\n        }\n    }\n    assert(false)\n\
    \    return 0", "    var factor = 0\n    var number = n\n    for i in (2...number)\
    \ {\n        if is_prime(i) {\n            while number % i == 0 {\n         \
    \       factor = i\n                number /= i\n            }\n        }\n  \
    \  }\n    return factor", "    var i = 2\n    var r = n\n    while i < r {\n \
    \       while r % i == 0 {\n            r /= i\n        }\n        i += 1\n  \
    \  }\n    return r", "    if is_prime(n: n) {\n        return n\n    }\n\n   \
    \ for p in primes_gen(max: n) {\n        if n % p == 0 {\n            return p\n\
    \        }\n    }\n\n    return n", "    var d = 2\n    var p = n\n    while p\
    \ > 1 {\n        if p % d == 0 {\n            p /= d\n        } else {\n     \
    \       d += 1\n        }\n    }\n    return d", "  var x = n\n  var d = 2\n \
    \ while x > 1 {\n    while x % d == 0 {\n      x /= d\n    }\n    d += 1\n  }\n\
    \  return d - 1", "  // Find the largest prime factor of n.\n  return 0", "  \
    \  var largest = 0, n = n\n    for i in 2 ..< n {\n        if n % i == 0 {\n \
    \           largest = i\n            while n % i == 0 {\n                n /=\
    \ i\n            }\n        }\n    }\n    return n == 1 ? largest : n", "    if\
    \ n % 2 == 0 {\n        return largest_prime_factor(n: n / 2)\n    }\n    for\
    \ i in stride(from: 3, through: Int(sqrt(Double(n))), by: 2) {\n        if n %\
    \ i == 0 {\n            return largest_prime_factor(n: n / i)\n        }\n   \
    \ }\n    return n", "    var factor = 0\n    var i = 2\n    while (i * i <= n)\
    \ {\n        if (n % i == 0) {\n            factor = i\n            n /= i\n \
    \       } else {\n            i += 1\n        }\n    }\n    if (n > 1) {\n   \
    \     factor = n\n    }\n    return factor", "\tfor num in 1...n {\n\t\tif n %\
    \ num == 0 {\n\t\t\tif is_prime(n: num) {\n\t\t\t\treturn num\n\t\t\t}\n\t\t}\n\
    \t}\n\treturn 0", "    guard n > 1 && !is_prime(n: n) else { return n }\n    return\
    \ (2..<Int(sqrt(Double(n)))).filter({ n % $0 == 0 }).map({ n / $0 }).filter({\
    \ is_prime(n: $0) }).max()!", '    return 0', "    for i in stride(from: 2, through:\
    \ Int(sqrt(Double(n))), by: 1) {\n        if n % i == 0 {\n            return\
    \ largest_prime_factor(n: n / i)\n        }\n    }\n    return n", "    assert(n\
    \ > 1)\n    var primes = [2]\n    var factor: Int\n    var num = n\n    repeat\
    \ {\n        for p in primes {\n            factor = n / p\n            if n %\
    \ p == 0 {\n                num = n / p\n                break\n            }\n\
    \        }\n        primes.append(factor)\n    } while factor != num\n    return\
    \ num", "    var largest_prime_factor = 1\n    var x = n\n    for i in 2..<x {\n\
    \        if x % i == 0 {\n            largest_prime_factor = i\n            x\
    \ /= i\n        }\n    }\n    return largest_prime_factor", "    // Fill me in!\n\
    \    if n == 2 {\n        return 2\n    }\n    var primeFactors = [Int]()\n  \
    \  var remainingNumber = n\n    var prime = 2\n    while remainingNumber > 1 {\n\
    \        while remainingNumber % prime == 0 {\n            primeFactors.append(prime)\n\
    \            remainingNumber /= prime\n        }\n        prime += 1\n    }\n\
    \    return primeFactors.last!", '    return 0', "    let sqrt_n = Int(Double(n).squareRoot())\n\
    \    return (2...sqrt_n).filter { n % $0 == 0 }.reduce(1) {\n        max($0, largest_prime_factor(n:\
    \ n / $0))\n    }", "    var n = n\n    var i = 2\n    while i * i <= n {\n  \
    \      if n % i == 0 {\n            n /= i\n        } else {\n            i +=\
    \ 1\n        }\n    }\n    return n", "    assert(n > 1, \"n must be > 1\")\n\
    \    var factor = 2\n    var value = n\n    while factor < value {\n        if\
    \ value % factor == 0 {\n            value /= factor\n        } else {\n     \
    \       factor += 1\n        }\n    }\n    return factor", "    var i = 2\n  \
    \  var largest_factor = 1\n    var number = n\n    while i * i <= number {\n \
    \       if number % i == 0 {\n            largest_factor = i\n            number\
    \ /= i\n        } else {\n            i += 1\n        }\n    }\n    if number\
    \ > 1 {\n        largest_factor = number\n    }\n    return largest_factor", " \
    \   var factor = 2\n    var largest_factor = 1\n    while factor * factor <= n\
    \ {\n        if n % factor == 0 {\n            while n % factor == 0 {\n     \
    \           n /= factor\n            }\n            largest_factor = factor\n\
    \        }\n        factor += 1\n    }\n    if n > 1 {\n        largest_factor\
    \ = n\n    }\n    return largest_factor", "    var factor: Int = 2\n    var prime:\
    \ Int = 1\n    var half: Int = n / 2\n\n    for var i = factor; i <= half; i++\
    \ {\n        if n % i == 0 {\n            prime = i\n            while n % i ==\
    \ 0 {\n                n /= i\n            }\n            half = n / 2\n     \
    \   }\n    }\n\n    if n > 1 {\n        prime = n\n    }\n\n    return prime",
  "    var n = n\n    var i = 2\n    while n > 1 {\n        if n % i == 0 {\n    \
    \        n /= i\n        } else {\n            i += 1\n        }\n    }\n    return\
    \ i", "    if is_prime(n: n) {\n        return n\n    }\n    for p in primes(from:\
    \ 2, to: Int(sqrt(Double(n))) + 1) {\n        if n % p == 0 {\n            return\
    \ largest_prime_factor(n: n / p)\n        }\n    }\n    return 1", '    return
    0', "    if n < 1 {\n        fatalError(\"Unsupported input: \\(n)\")\n    }\n\
    \    if n == 1 {\n        return 1\n    }\n    if is_prime(n: n) {\n        return\
    \ n\n    }\n    let s = Int(sqrt(Double(n)))\n    let q = Int(pow(Double(s), Double(s)))\n\
    \    var i = s\n    while i > 1 {\n        if n % i == 0 {\n            if is_prime(n:\
    \ i) {\n                return i\n            }\n        }\n        i -= 1\n \
    \   }\n    return -1", '    return 0', "    if n == 2 {\n        return 2\n  \
    \  }\n    if n == 3 {\n        return 3\n    }\n    if n == 5 {\n        return\
    \ 5\n    }\n    let factors = prime_factors(n: n)\n    let max_factor = factors.max()!\n\
    \    return max_factor", "    var k = 2\n    var m = n\n    while k * k <= m {\n\
    \        if m % k == 0 {\n            m /= k\n        } else {\n            k\
    \ += 1\n        }\n    }\n    return m", "    let sqrtN = Int(Double(n).squareRoot())\n\
    \    var i = sqrtN\n    while (i > 1) {\n        if (n % i == 0) {\n         \
    \   if (is_prime(n: i)) {\n                return i\n            }\n        }\n\
    \        i -= 1\n    }\n    return -1", "    if n % 2 == 0 {\n        return largest_prime_factor(n:\
    \ n / 2)\n    }\n    for i in stride(from: 3, through: sqrt(Double(n)), by: 2)\
    \ {\n        if n % Int(i) == 0 {\n            return largest_prime_factor(n:\
    \ n / Int(i))\n        }\n    }\n    return n", "  var largest: Int = 0\n  var\
    \ i: Int = 2\n  while i <= n {\n    if n % i == 0 {\n      n /= i\n      largest\
    \ = i\n    } else {\n      i += 1\n    }\n  }\n  return largest", "    // if n\
    \ is even, the largest prime factor is 2\n    if n % 2 == 0 {\n        return\
    \ largest_prime_factor(n: n / 2)\n    }\n    // if n is odd, first we check if\
    \ the largest factor is 3\n    if n % 3 == 0 {\n        return largest_prime_factor(n:\
    \ n / 3)\n    }\n    // now we skip even numbers and check only odd numbers\n\
    \    var i = 5\n    while true {\n        // if i is a factor\n        if n %\
    \ i == 0 {\n            // largest prime factor of n is i\n            return\
    \ largest_prime_factor(n: n / i)\n        }\n        // if i is not a factor,\
    \ check next number\n        i += 2\n    }", "    if n < 2 {\n        return 0\n\
    \    }\n    return n.prime_factors().max()!", "    var n = n\n    var f = 2\n\
    \    while n % f == 0 {\n        n /= f\n    }\n    f += 1\n    while f * f <=\
    \ n {\n        while n % f == 0 {\n            n /= f\n        }\n        f +=\
    \ 2\n    }\n    return n", "    var (largestPrime, p) = (1, 2)\n    while n >\
    \ 1 {\n        while n % p == 0 {\n            largestPrime = p\n            n\
    \ /= p\n        }\n        p += 1\n    }\n    return largestPrime", "    var divisor\
    \ = 2\n    var factor = n\n    while factor > 1 {\n        if factor % divisor\
    \ == 0 {\n            factor /= divisor\n        } else {\n            divisor\
    \ += 1\n        }\n    }\n    return divisor", "    var largest_prime_factor =\
    \ 0\n    var smallest_factor = 2\n    var current_number = n\n    while current_number\
    \ > 1 {\n        if current_number % smallest_factor == 0 {\n            largest_prime_factor\
    \ = smallest_factor\n            current_number /= smallest_factor\n        }\
    \ else {\n            smallest_factor += 1\n        }\n    }\n    return largest_prime_factor",
  "    var k = 2\n    var p = n\n    while k * k <= p {\n        if p % k == 0 {\n\
    \            p /= k\n        } else {\n            k += 1\n        }\n    }\n\
    \    return p", "    if n <= 1 {\n        return -1\n    }\n\n    if is_prime(n:\
    \ n) {\n        return n\n    }\n\n    var i = 2\n    while n % i != 0 {\n   \
    \     i += 1\n    }\n\n    return max(i, largest_prime_factor(n: n / i))", " \
    \   let factors = factor(n: n)\n    return factors[factors.count - 1]", "    var\
    \ div = 2\n    var factor = n\n    while factor > 1 {\n        if factor % div\
    \ == 0 {\n            factor /= div\n        } else {\n            div += 1\n\
    \        }\n    }\n    return div"]
stop_tokens:
- "\n}"
