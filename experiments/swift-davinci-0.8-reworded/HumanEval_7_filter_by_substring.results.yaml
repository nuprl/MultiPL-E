language: swift
name: HumanEval_7_filter_by_substring
results:
- exit_code: 0
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    return strings.filter { s in s.contains(substring) }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_substring(strings: [] as [String], substring:\
    \ \"john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") ==\
    \ [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\"\
    , \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\")\
    \ == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013446
- exit_code: 0
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \  return strings.filter({ s in s.contains(substring) })\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_substring(strings: [] as [String], substring:\
    \ \"john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") ==\
    \ [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\"\
    , \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\")\
    \ == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013447
- exit_code: 0
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    return strings.filter({ $0.contains(substring) })\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(filter_by_substring(strings: [] as [String], substring: \"\
    john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\") == [\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"grunt\", \"\
    prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013337
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    return strings.filter { (string) -> Bool in\n        return string.range(of:\
    \ substring) != nil\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(filter_by_substring(strings:\
    \ [] as [String], substring: \"john\") == [] as [String])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring:\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmpd4pfvdn6.swift:9:23: error: value of type 'String' has no member\
    \ 'range'\n        return string.range(of: substring) != nil\n               ~~~~~~\
    \ ^~~~~\n"
  stdout: ''
  timestamp: 1660013446
- exit_code: 0
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    let stringContainsSubstring = {(string: String) -> Bool in string.contains(substring)}\n\
    \    return strings.filter(stringContainsSubstring)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(filter_by_substring(strings: [] as [String], substring: \"\
    john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\") == [\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"grunt\", \"\
    prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013447
- exit_code: 0
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    return strings.filter {$0.contains(substring)}\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(filter_by_substring(strings: [] as [String], substring: \"\
    john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\") == [\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"grunt\", \"\
    prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013447
- exit_code: 0
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    strings.filter { string in\n        string.contains(substring)\n    }\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_by_substring(strings: [] as [String], substring:\
    \ \"john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") ==\
    \ [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\"\
    , \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\")\
    \ == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013447
- exit_code: 0
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var results: [String] = []\n    for string in strings {\n        if string.contains(substring)\
    \ {\n            results.append(string)\n        }\n    }\n    return results\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_by_substring(strings: [] as [String], substring:\
    \ \"john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") ==\
    \ [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\"\
    , \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\")\
    \ == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013447
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    return strings.filter({$0.range(of: substring) != nil})\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_substring(strings: [] as [String], substring:\
    \ \"john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") ==\
    \ [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\"\
    , \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\")\
    \ == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmpk94v3v1b.swift:8:31: error: value of type 'String' has no member\
    \ 'range'\n    return strings.filter({$0.range(of: substring) != nil})\n     \
    \                      ~~ ^~~~~\n"
  stdout: ''
  timestamp: 1660013446
- exit_code: 0
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    return strings.filter { $0.contains(substring) }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(filter_by_substring(strings: [] as [String], substring: \"\
    john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\") == [\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"grunt\", \"\
    prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013337
- exit_code: 0
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \  var results: [String] = []\n  for string in strings {\n    if string.contains(substring)\
    \ {\n      results.append(string)\n    }\n  }\n  return results\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_substring(strings: [] as [String], substring:\
    \ \"john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") ==\
    \ [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\"\
    , \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\")\
    \ == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013447
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    return strings.filter {\n        $0.range(of: substring) != nil\n    }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_by_substring(strings: [] as [String], substring:\
    \ \"john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") ==\
    \ [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\"\
    , \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\")\
    \ == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmp9vth3tve.swift:9:12: error: value of type 'String' has no member\
    \ 'range'\n        $0.range(of: substring) != nil\n        ~~ ^~~~~\n"
  stdout: ''
  timestamp: 1660013446
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \  return strings.filter { return $0.range(of: substring) != nil }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_by_substring(strings: [] as [String], substring:\
    \ \"john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") ==\
    \ [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\"\
    , \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\")\
    \ == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmp_lreiwgt.swift:8:37: error: value of type 'String' has no member\
    \ 'range'\n  return strings.filter { return $0.range(of: substring) != nil }\n\
    \                                 ~~ ^~~~~\n"
  stdout: ''
  timestamp: 1660013446
- exit_code: 0
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    return strings.filter {\n        $0.contains(substring)\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_by_substring(strings: [] as [String], substring:\
    \ \"john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") ==\
    \ [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\"\
    , \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\")\
    \ == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013447
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    return strings.filter { $0.range(of: substring) != nil }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_substring(strings: [] as [String], substring:\
    \ \"john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") ==\
    \ [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\"\
    , \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\")\
    \ == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmp1nwaafqt.swift:8:32: error: value of type 'String' has no member\
    \ 'range'\n    return strings.filter { $0.range(of: substring) != nil }\n    \
    \                        ~~ ^~~~~\n"
  stdout: ''
  timestamp: 1660013446
- exit_code: 0
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    // implement me!\n    var outputArray : [String] = []\n    for string in\
    \ strings {\n        if (string.contains(substring)) {\n            outputArray.append(string)\n\
    \        }\n    }\n    return outputArray\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(filter_by_substring(strings: [] as [String], substring: \"john\"\
    ) == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\", \"\
    xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") == [\"xxx\", \"\
    xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\") == [\"xxx\",\
    \ \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"grunt\", \"\
    prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013447
- exit_code: 0
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    return strings.filter({ $0.contains(substring) })\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(filter_by_substring(strings: [] as [String], substring: \"\
    john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\") == [\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"grunt\", \"\
    prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013337
- exit_code: 0
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    return strings.filter { $0.contains(substring) }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(filter_by_substring(strings: [] as [String], substring: \"\
    john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\") == [\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"grunt\", \"\
    prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013337
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var result: [String] = []\n    for item in strings {\n        if item.range(of:\
    \ substring) != nil {\n            result.append(item)\n        }\n    }\n   \
    \ return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(filter_by_substring(strings:\
    \ [] as [String], substring: \"john\") == [] as [String])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring:\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmp2gv2v4ow.swift:10:17: error: value of type 'String' has no member\
    \ 'range'\n        if item.range(of: substring) != nil {\n           ~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1660013446
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered_array = [String]()\n    for str in strings {\n        if str.range(of:\
    \ substring) != nil {\n            filtered_array.append(str)\n        }\n   \
    \ }\n    return filtered_array\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(filter_by_substring(strings:\
    \ [] as [String], substring: \"john\") == [] as [String])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring:\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmpkolweljz.swift:10:16: error: value of type 'String' has no member\
    \ 'range'\n        if str.range(of: substring) != nil {\n           ~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1660013446
- exit_code: 0
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \  return strings.filter { string in string.contains(substring) }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_by_substring(strings: [] as [String], substring:\
    \ \"john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") ==\
    \ [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\"\
    , \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\")\
    \ == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013447
- exit_code: 0
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered = [String]()\n    for string in strings {\n        if string.contains(substring)\
    \ {\n            filtered.append(string)\n        }\n    }\n    return filtered\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_by_substring(strings: [] as [String], substring:\
    \ \"john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") ==\
    \ [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\"\
    , \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\")\
    \ == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013337
- exit_code: 0
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \  return strings.filter({$0.contains(substring)})\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(filter_by_substring(strings: [] as [String], substring: \"\
    john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\") == [\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"grunt\", \"\
    prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013447
- exit_code: 0
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    return strings.filter { $0.contains(substring) }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(filter_by_substring(strings: [] as [String], substring: \"\
    john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\") == [\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"grunt\", \"\
    prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013337
- exit_code: 0
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    return strings.filter { str in str.contains(substring) }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_substring(strings: [] as [String], substring:\
    \ \"john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") ==\
    \ [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\"\
    , \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\")\
    \ == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013447
- exit_code: 0
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    return strings.filter({ (str) -> Bool in\n        str.contains(substring)\n\
    \    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(filter_by_substring(strings:\
    \ [] as [String], substring: \"john\") == [] as [String])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring:\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013447
- exit_code: 0
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    return strings.filter { elem in elem.contains(substring) }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_substring(strings: [] as [String], substring:\
    \ \"john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") ==\
    \ [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\"\
    , \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\")\
    \ == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013447
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    return strings.filter { $0.range(of: substring) != nil }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_substring(strings: [] as [String], substring:\
    \ \"john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") ==\
    \ [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\"\
    , \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\")\
    \ == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmp1nwaafqt.swift:8:32: error: value of type 'String' has no member\
    \ 'range'\n    return strings.filter { $0.range(of: substring) != nil }\n    \
    \                        ~~ ^~~~~\n"
  stdout: ''
  timestamp: 1660013446
- exit_code: 0
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    return strings.filter { $0.contains(substring) }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(filter_by_substring(strings: [] as [String], substring: \"\
    john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\") == [\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"grunt\", \"\
    prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013337
- exit_code: 0
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var result: [String] = []\n    for str in strings {\n        if str.contains(substring)\
    \ {\n            result.append(str)\n        }\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_by_substring(strings: [] as [String], substring:\
    \ \"john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") ==\
    \ [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\"\
    , \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\")\
    \ == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013447
- exit_code: 0
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    return strings.filter { $0.contains(substring) }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(filter_by_substring(strings: [] as [String], substring: \"\
    john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\") == [\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"grunt\", \"\
    prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013337
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    return strings.filter {\n        $0.range(of: substring) != nil\n    }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_by_substring(strings: [] as [String], substring:\
    \ \"john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") ==\
    \ [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\"\
    , \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\")\
    \ == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmp9vth3tve.swift:9:12: error: value of type 'String' has no member\
    \ 'range'\n        $0.range(of: substring) != nil\n        ~~ ^~~~~\n"
  stdout: ''
  timestamp: 1660013446
- exit_code: 0
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    return strings.filter { $0.contains(substring) }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(filter_by_substring(strings: [] as [String], substring: \"\
    john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\") == [\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"grunt\", \"\
    prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013337
- exit_code: 0
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    return strings.filter({$0.contains(substring)})\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(filter_by_substring(strings: [] as [String], substring: \"\
    john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\") == [\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"grunt\", \"\
    prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013337
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    return strings.filter { $0.range(of: substring) != nil }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_substring(strings: [] as [String], substring:\
    \ \"john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") ==\
    \ [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\"\
    , \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\")\
    \ == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmp1nwaafqt.swift:8:32: error: value of type 'String' has no member\
    \ 'range'\n    return strings.filter { $0.range(of: substring) != nil }\n    \
    \                        ~~ ^~~~~\n"
  stdout: ''
  timestamp: 1660013446
- exit_code: 0
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    return strings.filter { (s: String) -> Bool in s.contains(substring) }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_by_substring(strings: [] as [String], substring:\
    \ \"john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") ==\
    \ [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\"\
    , \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\")\
    \ == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013447
- exit_code: 0
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    return strings.filter({$0.contains(substring)})\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(filter_by_substring(strings: [] as [String], substring: \"\
    john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\") == [\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"grunt\", \"\
    prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013337
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered = [String]()\n    for string in strings {\n        if string.range(of:\
    \ substring) != nil {\n            filtered.append(string)\n        }\n    }\n\
    \    return filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(filter_by_substring(strings:\
    \ [] as [String], substring: \"john\") == [] as [String])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring:\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmp6t2ja68j.swift:10:19: error: value of type 'String' has no member\
    \ 'range'\n        if string.range(of: substring) != nil {\n           ~~~~~~\
    \ ^~~~~\n"
  stdout: ''
  timestamp: 1660013447
- exit_code: 0
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    return strings.filter({s in s.contains(substring)})\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_substring(strings: [] as [String], substring:\
    \ \"john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") ==\
    \ [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\"\
    , \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\")\
    \ == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013447
- exit_code: 0
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var result: [String] = []\n    for s in strings {\n        if (s.contains(substring))\
    \ {\n            result.append(s)\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_by_substring(strings: [] as [String], substring:\
    \ \"john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") ==\
    \ [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\"\
    , \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\")\
    \ == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013447
- exit_code: 0
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    return strings.filter({ s in s.contains(substring) })\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_substring(strings: [] as [String], substring:\
    \ \"john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") ==\
    \ [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\"\
    , \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\")\
    \ == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013447
- exit_code: 0
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    return strings.filter { $0.contains(substring) }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(filter_by_substring(strings: [] as [String], substring: \"\
    john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\") == [\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"grunt\", \"\
    prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013337
- exit_code: 0
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    return strings.filter { $0.contains(substring) }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(filter_by_substring(strings: [] as [String], substring: \"\
    john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\") == [\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"grunt\", \"\
    prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013337
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    return strings.filter({$0.range(of: substring) != nil})\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_substring(strings: [] as [String], substring:\
    \ \"john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") ==\
    \ [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\"\
    , \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\")\
    \ == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmpk94v3v1b.swift:8:31: error: value of type 'String' has no member\
    \ 'range'\n    return strings.filter({$0.range(of: substring) != nil})\n     \
    \                      ~~ ^~~~~\n"
  stdout: ''
  timestamp: 1660013446
- exit_code: 0
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var results: [String] = []\n    for string in strings {\n        if string.contains(substring)\
    \ {\n            results.append(string)\n        }\n    }\n    return results\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_by_substring(strings: [] as [String], substring:\
    \ \"john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") ==\
    \ [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\"\
    , \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\")\
    \ == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013447
- exit_code: 0
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \  return strings.filter({ return $0.contains(substring) })\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_substring(strings: [] as [String], substring:\
    \ \"john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") ==\
    \ [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\"\
    , \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\")\
    \ == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013447
- exit_code: 0
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    return strings.filter({ s in s.contains(substring) })\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_substring(strings: [] as [String], substring:\
    \ \"john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") ==\
    \ [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\"\
    , \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\")\
    \ == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013447
- exit_code: 0
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered = [String]()\n    for string in strings {\n        if string.contains(substring)\
    \ {\n            filtered.append(string)\n        }\n    }\n    return filtered\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_by_substring(strings: [] as [String], substring:\
    \ \"john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") ==\
    \ [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\"\
    , \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\")\
    \ == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013337
- exit_code: 0
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    return strings.filter { (s: String) -> Bool in s.contains(substring) }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_by_substring(strings: [] as [String], substring:\
    \ \"john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") ==\
    \ [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\"\
    , \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\")\
    \ == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013447
- exit_code: 0
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered_strings = [String]()\n    for string in strings {\n        if\
    \ string.contains(substring) {\n            filtered_strings.append(string)\n\
    \        }\n    }\n    return filtered_strings\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(filter_by_substring(strings: [] as [String], substring: \"john\"\
    ) == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\", \"\
    xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") == [\"xxx\", \"\
    xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\") == [\"xxx\",\
    \ \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"grunt\", \"\
    prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013337
- exit_code: 0
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    return strings.filter { $0.contains(substring) }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(filter_by_substring(strings: [] as [String], substring: \"\
    john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\") == [\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"grunt\", \"\
    prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013337
- exit_code: 0
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    return strings.filter({\n        return $0.contains(substring)\n    })\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_by_substring(strings: [] as [String], substring:\
    \ \"john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") ==\
    \ [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\"\
    , \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\")\
    \ == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013447
- exit_code: 0
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    return strings.filter { $0.contains(substring) }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(filter_by_substring(strings: [] as [String], substring: \"\
    john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\") == [\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"grunt\", \"\
    prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013337
- exit_code: 0
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    return strings.filter { (str) -> Bool in\n        str.contains(substring)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(filter_by_substring(strings:\
    \ [] as [String], substring: \"john\") == [] as [String])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring:\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013447
- exit_code: 0
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    return strings.filter { $0.contains(substring) }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(filter_by_substring(strings: [] as [String], substring: \"\
    john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\") == [\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"grunt\", \"\
    prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013337
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    return strings.filter { $0.range(of: substring) != nil }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_substring(strings: [] as [String], substring:\
    \ \"john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") ==\
    \ [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\"\
    , \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\")\
    \ == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmp1nwaafqt.swift:8:32: error: value of type 'String' has no member\
    \ 'range'\n    return strings.filter { $0.range(of: substring) != nil }\n    \
    \                        ~~ ^~~~~\n"
  stdout: ''
  timestamp: 1660013446
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \  return strings.filter { string in\n    return string.range(of: substring) !=\
    \ nil\n  }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(filter_by_substring(strings:\
    \ [] as [String], substring: \"john\") == [] as [String])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring:\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmpny8wafld.swift:9:19: error: value of type 'String' has no member\
    \ 'range'\n    return string.range(of: substring) != nil\n           ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1660013447
- exit_code: 0
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    return strings.filter{$0.contains(substring)}\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(filter_by_substring(strings: [] as [String], substring: \"\
    john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\") == [\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"grunt\", \"\
    prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013447
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    return strings.filter({$0.range(of: substring) != nil})\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_substring(strings: [] as [String], substring:\
    \ \"john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") ==\
    \ [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\"\
    , \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\")\
    \ == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmpk94v3v1b.swift:8:31: error: value of type 'String' has no member\
    \ 'range'\n    return strings.filter({$0.range(of: substring) != nil})\n     \
    \                      ~~ ^~~~~\n"
  stdout: ''
  timestamp: 1660013446
- exit_code: 0
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    return strings.filter { $0.contains(substring) }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(filter_by_substring(strings: [] as [String], substring: \"\
    john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\") == [\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"grunt\", \"\
    prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013337
- exit_code: 0
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered_list = [String]()\n    for string in strings {\n        if string.contains(substring)\
    \ {\n            filtered_list.append(string)\n        }\n    }\n    return filtered_list\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_by_substring(strings: [] as [String], substring:\
    \ \"john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") ==\
    \ [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\"\
    , \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\")\
    \ == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013447
- exit_code: 0
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var result: [String] = []\n    for string in strings {\n        if string.contains(substring)\
    \ {\n            result.append(string)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_by_substring(strings: [] as [String], substring:\
    \ \"john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") ==\
    \ [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\"\
    , \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\")\
    \ == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013337
- exit_code: 0
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var result: [String] = []\n    for str in strings {\n        if str.contains(substring)\
    \ {\n            result.append(str)\n        }\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_by_substring(strings: [] as [String], substring:\
    \ \"john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") ==\
    \ [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\"\
    , \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\")\
    \ == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013447
- exit_code: 0
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var res: [String] = []\n    for string in strings {\n        if string.contains(substring)\
    \ {\n            res.append(string)\n        }\n    }\n    return res\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_by_substring(strings: [] as [String], substring:\
    \ \"john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") ==\
    \ [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\"\
    , \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\")\
    \ == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013447
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var result: [String] = []\n    for s in strings {\n        if (s.range(of:\
    \ substring) != nil) {\n            result.append(s)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(filter_by_substring(strings:\
    \ [] as [String], substring: \"john\") == [] as [String])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring:\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmp4jnppcgx.swift:10:15: error: value of type 'String' has no member\
    \ 'range'\n        if (s.range(of: substring) != nil) {\n            ~ ^~~~~\n"
  stdout: ''
  timestamp: 1660013447
- exit_code: 0
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var array: [String] = []\n    for string in strings {\n        if string.contains(substring)\
    \ {\n            array.append(string)\n        }\n    }\n    return array\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_by_substring(strings: [] as [String], substring:\
    \ \"john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") ==\
    \ [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\"\
    , \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\")\
    \ == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013447
- exit_code: 0
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    return strings.filter{ $0.contains(substring) }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(filter_by_substring(strings: [] as [String], substring: \"\
    john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\") == [\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"grunt\", \"\
    prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013447
- exit_code: 0
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var ret = [String]()\n    for string in strings {\n        if string.contains(substring)\
    \ {\n            ret.append(string)\n        }\n    }\n    return ret\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_by_substring(strings: [] as [String], substring:\
    \ \"john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") ==\
    \ [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\"\
    , \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\")\
    \ == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013447
- exit_code: 0
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    return strings.filter { string in\n        string.contains(substring)\n \
    \   }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(filter_by_substring(strings:\
    \ [] as [String], substring: \"john\") == [] as [String])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring:\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013447
- exit_code: 0
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    return strings.filter {\n        $0.contains(substring)\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_by_substring(strings: [] as [String], substring:\
    \ \"john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") ==\
    \ [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\"\
    , \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\")\
    \ == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013447
- exit_code: 0
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    return strings.filter { $0.contains(substring) }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(filter_by_substring(strings: [] as [String], substring: \"\
    john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\") == [\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"grunt\", \"\
    prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013337
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    return strings.filter({ $0.range(of: substring) != nil })\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_substring(strings: [] as [String], substring:\
    \ \"john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") ==\
    \ [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\"\
    , \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\")\
    \ == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmpof8qk77t.swift:8:32: error: value of type 'String' has no member\
    \ 'range'\n    return strings.filter({ $0.range(of: substring) != nil })\n   \
    \                         ~~ ^~~~~\n"
  stdout: ''
  timestamp: 1660013447
- exit_code: 0
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    strings.filter { $0.contains(substring) }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(filter_by_substring(strings: [] as [String], substring: \"john\"\
    ) == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\", \"\
    xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") == [\"xxx\", \"\
    xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\") == [\"xxx\",\
    \ \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"grunt\", \"\
    prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013447
- exit_code: 0
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    return strings.filter { $0.contains(substring) }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(filter_by_substring(strings: [] as [String], substring: \"\
    john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\") == [\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"grunt\", \"\
    prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013337
- exit_code: 0
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    return strings.filter{$0.contains(substring)}\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(filter_by_substring(strings: [] as [String], substring: \"\
    john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\") == [\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"grunt\", \"\
    prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013447
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    return strings.filter({ $0.range(of: substring) != nil })\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_substring(strings: [] as [String], substring:\
    \ \"john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") ==\
    \ [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\"\
    , \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\")\
    \ == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmpof8qk77t.swift:8:32: error: value of type 'String' has no member\
    \ 'range'\n    return strings.filter({ $0.range(of: substring) != nil })\n   \
    \                         ~~ ^~~~~\n"
  stdout: ''
  timestamp: 1660013447
- exit_code: 0
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    return strings.filter { $0.contains(substring) }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(filter_by_substring(strings: [] as [String], substring: \"\
    john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\") == [\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"grunt\", \"\
    prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013337
- exit_code: 0
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var result: [String] = []\n    for string in strings {\n        if string.contains(substring)\
    \ {\n            result.append(string)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_by_substring(strings: [] as [String], substring:\
    \ \"john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") ==\
    \ [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\"\
    , \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\")\
    \ == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013337
- exit_code: 0
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    return strings.filter { $0.contains(substring) }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(filter_by_substring(strings: [] as [String], substring: \"\
    john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\") == [\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"grunt\", \"\
    prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013337
- exit_code: 0
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    return strings.filter { str in\n        str.contains(substring)\n    }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_by_substring(strings: [] as [String], substring:\
    \ \"john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") ==\
    \ [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\"\
    , \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\")\
    \ == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013447
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var out_strings = [String]()\n    for string in strings {\n        if let\
    \ _ = string.range(of: substring) {\n            out_strings.append(string)\n\
    \        }\n    }\n    return out_strings\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(filter_by_substring(strings: [] as [String], substring: \"john\"\
    ) == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\", \"\
    xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") == [\"xxx\", \"\
    xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\") == [\"xxx\",\
    \ \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"grunt\", \"\
    prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmpj8dgv3nd.swift:10:27: error: value of type 'String' has no member\
    \ 'range'\n        if let _ = string.range(of: substring) {\n                \
    \   ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1660013447
- exit_code: 0
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    // TODO: Implement\n    return strings.filter({$0.contains(substring)})\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_by_substring(strings: [] as [String], substring:\
    \ \"john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") ==\
    \ [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\"\
    , \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\")\
    \ == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013447
- exit_code: 0
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    return strings.filter{$0.contains(substring)}\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(filter_by_substring(strings: [] as [String], substring: \"\
    john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\") == [\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"grunt\", \"\
    prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013447
- exit_code: -4
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    return strings.filter { substring.contains($0) }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(filter_by_substring(strings: [] as [String], substring: \"\
    john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\") == [\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"grunt\", \"\
    prune\"])"
  status: Exception
  stderr: 'tmpaob8tqb9/tmpaob8tqb9.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae236a8ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae236785b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae236785988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae2367847b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpaob8tqb9                        0x000055c3e05838b7 <unavailable> + 6327

    5    libc.so.6                          0x00002ae236c7a460 __libc_start_main +
    245

    6    tmpaob8tqb9                        0x000055c3e0583239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1660013447
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    return strings.filter { s in s.range(of: substring) != nil }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_by_substring(strings: [] as [String], substring:\
    \ \"john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") ==\
    \ [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\"\
    , \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\")\
    \ == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmpm56yswkk.swift:8:36: error: value of type 'String' has no member\
    \ 'range'\n    return strings.filter { s in s.range(of: substring) != nil }\n\
    \                                 ~ ^~~~~\n"
  stdout: ''
  timestamp: 1660013447
- exit_code: 0
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    return strings.filter{$0.contains(substring)}\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(filter_by_substring(strings: [] as [String], substring: \"\
    john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\") == [\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"grunt\", \"\
    prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013447
- exit_code: 0
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    return strings.filter { $0.contains(substring) }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(filter_by_substring(strings: [] as [String], substring: \"\
    john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\") == [\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"grunt\", \"\
    prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013337
- exit_code: 0
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var result = [String]()\n    for str in strings {\n        if str.contains(substring)\
    \ {\n            result.append(str)\n        }\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_by_substring(strings: [] as [String], substring:\
    \ \"john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") ==\
    \ [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\"\
    , \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\")\
    \ == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013447
- exit_code: 0
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var result = [String]()\n    for string in strings {\n        if string.contains(substring)\
    \ {\n            result.append(string)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_by_substring(strings: [] as [String], substring:\
    \ \"john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") ==\
    \ [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\"\
    , \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\")\
    \ == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013337
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    // TODO: Implement\n    return strings.filter({(aString: String) -> Bool\
    \ in\n        return aString.range(of: substring) != nil\n    })\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_by_substring(strings: [] as [String], substring:\
    \ \"john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") ==\
    \ [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\"\
    , \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\")\
    \ == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmp50h0gsvf.swift:10:24: error: value of type 'String' has no member\
    \ 'range'\n        return aString.range(of: substring) != nil\n              \
    \ ~~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1660013447
- exit_code: 0
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    return strings.filter{ $0.contains(substring) }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(filter_by_substring(strings: [] as [String], substring: \"\
    john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\") == [\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"grunt\", \"\
    prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013447
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    return strings.filter({ str in\n        str.range(of: substring) != nil\n\
    \    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(filter_by_substring(strings:\
    \ [] as [String], substring: \"john\") == [] as [String])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring:\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmp0kzgnfvj.swift:9:13: error: value of type 'String' has no member\
    \ 'range'\n        str.range(of: substring) != nil\n        ~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1660013447
- exit_code: 0
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    return strings.filter { string in string.contains(substring) }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_by_substring(strings: [] as [String], substring:\
    \ \"john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") ==\
    \ [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\"\
    , \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\")\
    \ == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013447
- exit_code: 0
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    return strings.filter { $0.contains(substring) }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(filter_by_substring(strings: [] as [String], substring: \"\
    john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\") == [\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"grunt\", \"\
    prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013337
- exit_code: 0
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    return strings.filter({ $0.contains(substring) })\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(filter_by_substring(strings: [] as [String], substring: \"\
    john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\") == [\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"grunt\", \"\
    prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013337
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered = [String]()\n    for s in strings {\n        if s.range(of:\
    \ substring) != nil {\n            filtered.append(s)\n        }\n    }\n    return\
    \ filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(filter_by_substring(strings:\
    \ [] as [String], substring: \"john\") == [] as [String])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring:\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmphxtr9igf.swift:10:14: error: value of type 'String' has no member\
    \ 'range'\n        if s.range(of: substring) != nil {\n           ~ ^~~~~\n"
  stdout: ''
  timestamp: 1660013447
- exit_code: 0
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    return strings.filter { (s: String) -> Bool in\n        return s.contains(substring)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(filter_by_substring(strings:\
    \ [] as [String], substring: \"john\") == [] as [String])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring:\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013447
- exit_code: 0
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    return strings.filter { $0.contains(substring) }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(filter_by_substring(strings: [] as [String], substring: \"\
    john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\") == [\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"grunt\", \"\
    prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013337
- exit_code: 0
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    return strings.filter { $0.contains(substring) }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(filter_by_substring(strings: [] as [String], substring: \"\
    john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\") == [\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"grunt\", \"\
    prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013337
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    return strings.filter { $0.range(of: substring) != nil }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_substring(strings: [] as [String], substring:\
    \ \"john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") ==\
    \ [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\"\
    , \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\")\
    \ == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmp1nwaafqt.swift:8:32: error: value of type 'String' has no member\
    \ 'range'\n    return strings.filter { $0.range(of: substring) != nil }\n    \
    \                        ~~ ^~~~~\n"
  stdout: ''
  timestamp: 1660013446
- exit_code: 0
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var new_list: [String] = []\n    for str in strings {\n        if str.contains(substring)\
    \ {\n            new_list.append(str)\n        }\n    }\n    return new_list\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_by_substring(strings: [] as [String], substring:\
    \ \"john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") ==\
    \ [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\"\
    , \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\")\
    \ == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013447
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered = [String]()\n    for s in strings {\n        if s.range(of:\
    \ substring) != nil {\n            filtered.append(s)\n        }\n    }\n    return\
    \ filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(filter_by_substring(strings:\
    \ [] as [String], substring: \"john\") == [] as [String])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring:\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmphxtr9igf.swift:10:14: error: value of type 'String' has no member\
    \ 'range'\n        if s.range(of: substring) != nil {\n           ~ ^~~~~\n"
  stdout: ''
  timestamp: 1660013447
- exit_code: 0
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    return strings.filter {\n        return $0.contains(substring)\n    }\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_by_substring(strings: [] as [String], substring:\
    \ \"john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") ==\
    \ [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\"\
    , \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\")\
    \ == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013447
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered: [String] = []\n    for string in strings {\n        if string.range(of:\
    \ substring) != nil {\n            filtered.append(string)\n        }\n    }\n\
    \    return filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(filter_by_substring(strings:\
    \ [] as [String], substring: \"john\") == [] as [String])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring:\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmpjhkr1kdx.swift:10:19: error: value of type 'String' has no member\
    \ 'range'\n        if string.range(of: substring) != nil {\n           ~~~~~~\
    \ ^~~~~\n"
  stdout: ''
  timestamp: 1660013447
- exit_code: 0
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    return strings.filter({$0.contains(substring)})\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(filter_by_substring(strings: [] as [String], substring: \"\
    john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\") == [\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"grunt\", \"\
    prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013337
- exit_code: 0
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    return strings.filter({ (string) -> Bool in\n        string.contains(substring)\n\
    \    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(filter_by_substring(strings:\
    \ [] as [String], substring: \"john\") == [] as [String])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring:\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013447
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    return strings.filter({ $0.range(of: substring) != nil })\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_substring(strings: [] as [String], substring:\
    \ \"john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") ==\
    \ [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\"\
    , \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\")\
    \ == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmpof8qk77t.swift:8:32: error: value of type 'String' has no member\
    \ 'range'\n    return strings.filter({ $0.range(of: substring) != nil })\n   \
    \                         ~~ ^~~~~\n"
  stdout: ''
  timestamp: 1660013447
- exit_code: 0
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    return strings.filter {$0.contains(substring)}\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(filter_by_substring(strings: [] as [String], substring: \"\
    john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\") == [\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"grunt\", \"\
    prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013447
- exit_code: 0
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    let items = strings.filter {\n        (string: String) -> Bool in\n     \
    \   string.contains(substring)\n    }\n    return items\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_substring(strings: [] as [String], substring:\
    \ \"john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") ==\
    \ [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\"\
    , \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\")\
    \ == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013447
- exit_code: 0
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    return strings.filter {string in\n        return string.contains(substring)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(filter_by_substring(strings:\
    \ [] as [String], substring: \"john\") == [] as [String])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring:\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013447
- exit_code: 0
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    return strings.filter { string in string.contains(substring) }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_by_substring(strings: [] as [String], substring:\
    \ \"john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") ==\
    \ [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\"\
    , \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\")\
    \ == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013447
- exit_code: 0
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var res = [String]()\n    for s in strings {\n        if s.contains(substring)\
    \ {\n            res.append(s)\n        }\n    }\n    return res\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_by_substring(strings: [] as [String], substring:\
    \ \"john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") ==\
    \ [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\"\
    , \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\")\
    \ == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013447
- exit_code: 0
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    return strings.filter {$0.contains(substring)}\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(filter_by_substring(strings: [] as [String], substring: \"\
    john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\") == [\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"grunt\", \"\
    prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013447
- exit_code: 0
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    return strings.filter({$0.contains(substring)})\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(filter_by_substring(strings: [] as [String], substring: \"\
    john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\") == [\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"grunt\", \"\
    prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013337
- exit_code: 0
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filteredStrings = [String]()\n    for str in strings {\n        if str.contains(substring)\
    \ {\n            filteredStrings.append(str)\n        }\n    }\n    return filteredStrings\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_by_substring(strings: [] as [String], substring:\
    \ \"john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") ==\
    \ [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\"\
    , \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\")\
    \ == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013447
- exit_code: 0
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var substrings = [String]()\n    for string in strings {\n        if string.contains(substring)\
    \ {\n            substrings.append(string)\n        }\n    }\n    return substrings\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_by_substring(strings: [] as [String], substring:\
    \ \"john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") ==\
    \ [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\"\
    , \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\")\
    \ == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013447
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    return strings.filter({s in s.range(of: substring) != nil})\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_by_substring(strings: [] as [String], substring:\
    \ \"john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") ==\
    \ [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\"\
    , \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\")\
    \ == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmpy8j8zr7l.swift:8:35: error: value of type 'String' has no member\
    \ 'range'\n    return strings.filter({s in s.range(of: substring) != nil})\n \
    \                               ~ ^~~~~\n"
  stdout: ''
  timestamp: 1660013447
- exit_code: 0
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    return strings.filter {\n        return $0.contains(substring)\n    }\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_by_substring(strings: [] as [String], substring:\
    \ \"john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") ==\
    \ [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\"\
    , \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\")\
    \ == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013447
- exit_code: 0
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    return strings.filter({ $0.contains(substring) })\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(filter_by_substring(strings: [] as [String], substring: \"\
    john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\") == [\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"grunt\", \"\
    prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013337
- exit_code: 0
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    return strings.filter({ $0.contains(substring) })\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(filter_by_substring(strings: [] as [String], substring: \"\
    john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\") == [\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"grunt\", \"\
    prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013337
- exit_code: 0
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    // TODO: Implement\n    return strings.filter{$0.contains(substring)}\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_by_substring(strings: [] as [String], substring:\
    \ \"john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") ==\
    \ [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\"\
    , \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\")\
    \ == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013447
- exit_code: 0
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var result: [String] = []\n    for str in strings {\n        if str.contains(substring)\
    \ {\n            result.append(str)\n        }\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_by_substring(strings: [] as [String], substring:\
    \ \"john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") ==\
    \ [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\"\
    , \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\")\
    \ == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013447
- exit_code: 0
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    return strings.filter({ element in element.contains(substring) })\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_by_substring(strings: [] as [String], substring:\
    \ \"john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") ==\
    \ [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\"\
    , \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\")\
    \ == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013447
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var results = [String]()\n    for string in strings {\n        if string.range(of:\
    \ substring) != nil {\n            results.append(string)\n        }\n    }\n\
    \    return results\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(filter_by_substring(strings:\
    \ [] as [String], substring: \"john\") == [] as [String])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring:\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmp8akelgec.swift:10:19: error: value of type 'String' has no member\
    \ 'range'\n        if string.range(of: substring) != nil {\n           ~~~~~~\
    \ ^~~~~\n"
  stdout: ''
  timestamp: 1660013447
- exit_code: 0
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \  return strings.filter { $0.contains(substring) }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(filter_by_substring(strings: [] as [String], substring: \"\
    john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\") == [\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"grunt\", \"\
    prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013448
- exit_code: 0
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    return strings.filter {$0.contains(substring)}\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(filter_by_substring(strings: [] as [String], substring: \"\
    john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\") == [\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"grunt\", \"\
    prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013447
- exit_code: 0
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \  var result: [String] = []\n  for string in strings {\n    if string.contains(substring)\
    \ {\n      result.append(string)\n    }\n  }\n  return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_substring(strings: [] as [String], substring:\
    \ \"john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") ==\
    \ [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\"\
    , \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\")\
    \ == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013448
- exit_code: 0
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var ret = [String]()\n    for s in strings {\n        if s.contains(substring)\
    \ {\n            ret.append(s)\n        }\n    }\n    return ret\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_by_substring(strings: [] as [String], substring:\
    \ \"john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") ==\
    \ [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\"\
    , \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\")\
    \ == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013447
- exit_code: 0
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    return strings.filter { string in string.contains(substring) }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_by_substring(strings: [] as [String], substring:\
    \ \"john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") ==\
    \ [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\"\
    , \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\")\
    \ == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013447
- exit_code: 0
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered_strings = [String]()\n    for string in strings {\n        if\
    \ string.contains(substring) {\n            filtered_strings.append(string)\n\
    \        }\n    }\n    return filtered_strings\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(filter_by_substring(strings: [] as [String], substring: \"john\"\
    ) == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\", \"\
    xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") == [\"xxx\", \"\
    xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\") == [\"xxx\",\
    \ \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"grunt\", \"\
    prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013337
- exit_code: 0
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    return strings.filter { $0.contains(substring) }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(filter_by_substring(strings: [] as [String], substring: \"\
    john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\") == [\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"grunt\", \"\
    prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013337
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    return strings.filter({ (x: String) -> Bool in\n        return x.range(of:\
    \ substring) != nil\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(filter_by_substring(strings:\
    \ [] as [String], substring: \"john\") == [] as [String])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring:\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmptf6d96ej.swift:9:18: error: value of type 'String' has no member\
    \ 'range'\n        return x.range(of: substring) != nil\n               ~ ^~~~~\n"
  stdout: ''
  timestamp: 1660013447
- exit_code: 0
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    return strings.filter{$0.contains(substring)}\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(filter_by_substring(strings: [] as [String], substring: \"\
    john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\") == [\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"grunt\", \"\
    prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013447
- exit_code: 0
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    return strings.filter { (string) -> Bool in\n        return string.contains(substring)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(filter_by_substring(strings:\
    \ [] as [String], substring: \"john\") == [] as [String])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring:\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013337
- exit_code: 0
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var result: [String] = []\n    for s in strings {\n        if s.contains(substring)\
    \ {\n            result.append(s)\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_by_substring(strings: [] as [String], substring:\
    \ \"john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") ==\
    \ [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\"\
    , \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\")\
    \ == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013448
- exit_code: 0
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    return strings.filter {$0.contains(substring)}\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(filter_by_substring(strings: [] as [String], substring: \"\
    john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\") == [\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"grunt\", \"\
    prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013447
- exit_code: 0
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    return strings.filter {\n        $0.contains(substring)\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_by_substring(strings: [] as [String], substring:\
    \ \"john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") ==\
    \ [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\"\
    , \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\")\
    \ == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013447
- exit_code: 0
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    strings.filter({$0.contains(substring)})\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(filter_by_substring(strings: [] as [String], substring: \"john\"\
    ) == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\", \"\
    xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") == [\"xxx\", \"\
    xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\") == [\"xxx\",\
    \ \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"grunt\", \"\
    prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013447
- exit_code: 0
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var new_strings = [String]()\n    for string in strings {\n        if string.contains(substring)\
    \ {\n            new_strings.append(string)\n        }\n    }\n    return new_strings\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_by_substring(strings: [] as [String], substring:\
    \ \"john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") ==\
    \ [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\"\
    , \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\")\
    \ == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013448
- exit_code: 0
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered: [String] = []\n    strings.forEach { if $0.contains(substring)\
    \ { filtered.append($0) } }\n    return filtered\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(filter_by_substring(strings: [] as [String], substring: \"\
    john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\") == [\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"grunt\", \"\
    prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013448
- exit_code: 0
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    return strings.filter({ $0.contains(substring) })\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(filter_by_substring(strings: [] as [String], substring: \"\
    john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\") == [\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"grunt\", \"\
    prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013337
- exit_code: 0
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    return strings.filter({ $0.contains(substring) })\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(filter_by_substring(strings: [] as [String], substring: \"\
    john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\") == [\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"grunt\", \"\
    prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013337
- exit_code: 0
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    return strings.filter { $0.contains(substring) }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(filter_by_substring(strings: [] as [String], substring: \"\
    john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\") == [\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"grunt\", \"\
    prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013337
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    return strings.filter({ (string) -> Bool in\n        string.range(of: substring)\
    \ != nil\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(filter_by_substring(strings:\
    \ [] as [String], substring: \"john\") == [] as [String])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring:\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmpa8kbmq6t.swift:9:16: error: value of type 'String' has no member\
    \ 'range'\n        string.range(of: substring) != nil\n        ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1660013447
- exit_code: 0
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    return strings.filter { $0.contains(substring) }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(filter_by_substring(strings: [] as [String], substring: \"\
    john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\") == [\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"grunt\", \"\
    prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013337
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    return strings.filter({ (s: String) -> Bool in\n        return s.range(of:\
    \ substring) != nil\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(filter_by_substring(strings:\
    \ [] as [String], substring: \"john\") == [] as [String])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring:\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmp_1ucgco8.swift:9:18: error: value of type 'String' has no member\
    \ 'range'\n        return s.range(of: substring) != nil\n               ~ ^~~~~\n"
  stdout: ''
  timestamp: 1660013447
- exit_code: 0
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var ret: [String] = []\n    for str in strings {\n        if (str.contains(substring))\
    \ {\n            ret.append(str)\n        }\n    }\n    return ret\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_by_substring(strings: [] as [String], substring:\
    \ \"john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") ==\
    \ [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\"\
    , \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\")\
    \ == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013448
- exit_code: 0
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    return strings.filter { $0.contains(substring) }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(filter_by_substring(strings: [] as [String], substring: \"\
    john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\") == [\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"grunt\", \"\
    prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013337
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    return strings.filter({$0.range(of: substring) != nil})\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_substring(strings: [] as [String], substring:\
    \ \"john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") ==\
    \ [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\"\
    , \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\")\
    \ == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmpk94v3v1b.swift:8:31: error: value of type 'String' has no member\
    \ 'range'\n    return strings.filter({$0.range(of: substring) != nil})\n     \
    \                      ~~ ^~~~~\n"
  stdout: ''
  timestamp: 1660013446
- exit_code: 0
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    return strings.filter({$0.contains(substring)})\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(filter_by_substring(strings: [] as [String], substring: \"\
    john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\") == [\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"grunt\", \"\
    prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013337
- exit_code: 0
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    return strings.filter { (string) -> Bool in\n        return string.contains(substring)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(filter_by_substring(strings:\
    \ [] as [String], substring: \"john\") == [] as [String])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring:\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013337
- exit_code: 0
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered = [String]()\n    for string in strings {\n        if string.contains(substring)\
    \ {\n            filtered.append(string)\n        }\n    }\n    return filtered\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_by_substring(strings: [] as [String], substring:\
    \ \"john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") ==\
    \ [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\"\
    , \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\")\
    \ == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013337
- exit_code: 0
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \  return strings.filter { $0.contains(substring) }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(filter_by_substring(strings: [] as [String], substring: \"\
    john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\") == [\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"grunt\", \"\
    prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013448
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    return strings.filter { (str) -> Bool in\n        return str.range(of: substring)\
    \ != nil\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(filter_by_substring(strings:\
    \ [] as [String], substring: \"john\") == [] as [String])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring:\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmpwdr1tkvp.swift:9:20: error: value of type 'String' has no member\
    \ 'range'\n        return str.range(of: substring) != nil\n               ~~~\
    \ ^~~~~\n"
  stdout: ''
  timestamp: 1660013448
- exit_code: 0
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \  return strings.filter { (string) -> Bool in\n    return string.contains(substring)\n\
    \  }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(filter_by_substring(strings:\
    \ [] as [String], substring: \"john\") == [] as [String])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring:\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013448
- exit_code: 0
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filter = [String]()\n    for (index, element) in strings.enumerated()\
    \ {\n        if element.contains(substring) {\n            filter.append(element)\n\
    \        }\n    }\n    return filter\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_by_substring(strings: [] as [String], substring: \"john\") == []\
    \ as [String])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\", \"aaaxxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\") == [\"xxx\", \"aaaxxy\"\
    , \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"grunt\", \"trumpet\"\
    , \"prune\", \"gruesome\"], substring: \"run\") == [\"grunt\", \"prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013448
- exit_code: 0
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    return strings.filter { (s: String) -> Bool in\n        return s.contains(substring)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(filter_by_substring(strings:\
    \ [] as [String], substring: \"john\") == [] as [String])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring:\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013447
- exit_code: 0
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered = [String]()\n    for str in strings {\n        if str.contains(substring)\
    \ {\n            filtered.append(str)\n        }\n    }\n    return filtered\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_by_substring(strings: [] as [String], substring:\
    \ \"john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") ==\
    \ [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\"\
    , \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\")\
    \ == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013448
- exit_code: 0
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var result = [String]()\n    for string in strings {\n        if string.contains(substring)\
    \ {\n            result.append(string)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_by_substring(strings: [] as [String], substring:\
    \ \"john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") ==\
    \ [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\"\
    , \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\")\
    \ == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013337
- exit_code: 0
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered_strings = [String]()\n    for string in strings {\n        if\
    \ string.contains(substring) {\n            filtered_strings.append(string)\n\
    \        }\n    }\n    return filtered_strings\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(filter_by_substring(strings: [] as [String], substring: \"john\"\
    ) == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\", \"\
    xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") == [\"xxx\", \"\
    xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\") == [\"xxx\",\
    \ \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"grunt\", \"\
    prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013337
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered = [String]()\n    for s in strings {\n        if s.range(of:\
    \ substring) != nil {\n            filtered.append(s)\n        }\n    }\n    return\
    \ filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(filter_by_substring(strings:\
    \ [] as [String], substring: \"john\") == [] as [String])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring:\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmphxtr9igf.swift:10:14: error: value of type 'String' has no member\
    \ 'range'\n        if s.range(of: substring) != nil {\n           ~ ^~~~~\n"
  stdout: ''
  timestamp: 1660013447
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \  var filtered = [String]()\n  for s in strings {\n    if s.range(of: substring)\
    \ != nil {\n      filtered.append(s)\n    }\n  }\n  return filtered\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_by_substring(strings: [] as [String], substring:\
    \ \"john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") ==\
    \ [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\"\
    , \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\")\
    \ == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmpye2jtt8j.swift:10:10: error: value of type 'String' has no member\
    \ 'range'\n    if s.range(of: substring) != nil {\n       ~ ^~~~~\n"
  stdout: ''
  timestamp: 1660013448
- exit_code: 0
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered = [String]()\n    for string in strings {\n        if string.contains(substring)\
    \ {\n            filtered.append(string)\n        }\n    }\n    return filtered\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_by_substring(strings: [] as [String], substring:\
    \ \"john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") ==\
    \ [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\"\
    , \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\")\
    \ == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013337
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    return strings.filter {\n        $0.range(of: substring) != nil\n    }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_by_substring(strings: [] as [String], substring:\
    \ \"john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") ==\
    \ [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\"\
    , \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\")\
    \ == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmp9vth3tve.swift:9:12: error: value of type 'String' has no member\
    \ 'range'\n        $0.range(of: substring) != nil\n        ~~ ^~~~~\n"
  stdout: ''
  timestamp: 1660013446
- exit_code: 0
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    return strings.filter { $0.contains(substring) }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(filter_by_substring(strings: [] as [String], substring: \"\
    john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\") == [\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"grunt\", \"\
    prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013337
- exit_code: 0
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    return strings.filter({ (string) -> Bool in\n        return string.contains(substring)\n\
    \    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(filter_by_substring(strings:\
    \ [] as [String], substring: \"john\") == [] as [String])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring:\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013337
- exit_code: 0
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \  return strings.filter { $0.contains(substring) }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(filter_by_substring(strings: [] as [String], substring: \"\
    john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\") == [\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"grunt\", \"\
    prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013448
- exit_code: 0
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    return strings.filter {\n        return $0.contains(substring)\n    }\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_by_substring(strings: [] as [String], substring:\
    \ \"john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") ==\
    \ [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\"\
    , \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\")\
    \ == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013447
- exit_code: 0
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \  var filtered: [String] = []\n  for string in strings {\n    if (string.contains(substring))\
    \ {\n      filtered.append(string)\n    }\n  }\n  return filtered\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_by_substring(strings: [] as [String], substring:\
    \ \"john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") ==\
    \ [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\"\
    , \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\")\
    \ == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013448
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    return strings.filter{ $0.range(of: substring) != nil }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_substring(strings: [] as [String], substring:\
    \ \"john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") ==\
    \ [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\"\
    , \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\")\
    \ == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmpxsfcmzwz.swift:8:31: error: value of type 'String' has no member\
    \ 'range'\n    return strings.filter{ $0.range(of: substring) != nil }\n     \
    \                      ~~ ^~~~~\n"
  stdout: ''
  timestamp: 1660013448
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    return strings.filter { substring in $0.lowercased().contains(substring.lowercased())\
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(filter_by_substring(strings:\
    \ [] as [String], substring: \"john\") == [] as [String])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring:\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmpgsyac4b5.swift:8:42: error: anonymous closure arguments cannot\
    \ be used inside a closure that has explicit arguments; did you mean 'substring'?\n\
    \    return strings.filter { substring in $0.lowercased().contains(substring.lowercased())\
    \ }\n                                         ^~\n                           \
    \              substring\n"
  stdout: ''
  timestamp: 1660013448
- exit_code: 0
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var result: [String] = []\n    for s in strings {\n        if s.contains(substring)\
    \ {\n            result.append(s)\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_by_substring(strings: [] as [String], substring:\
    \ \"john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") ==\
    \ [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\"\
    , \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\")\
    \ == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013448
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    let v1: [String] = []\n    let v2: [String] = [\"abc\", \"bacd\", \"cde\"\
    , \"array\"]\n    let v3: [String] = [\"abc\", \"bacd\", \"array\"]\n    let v4:\
    \ [String] = [\"bacd\", \"array\"]\n    let v5: [String] = [\"cde\", \"array\"\
    ]\n    let v6: [String] = [\"cde\"]\n    let v7: [String] = [\"array\"]\n    let\
    \ v8: [String] = []\n    let empty: [String] = []\n    let r1 = filter_by_substring(strings:\
    \ v1, substring: \"a\")\n    let r2 = filter_by_substring(strings: v2, substring:\
    \ \"a\")\n    let r3 = filter_by_substring(strings: v3, substring: \"a\")\n  \
    \  let r4 = filter_by_substring(strings: v4, substring: \"a\")\n    let r5 = filter_by_substring(strings:\
    \ v5, substring: \"a\")\n    let r6 = filter_by_substring(strings: v6, substring:\
    \ \"a\")\n    let r7 = filter_by_substring(strings: v7, substring: \"a\")\n  \
    \  let r8 = filter_by_substring(strings: v8, substring: \"a\")\n    let r9 = filter_by_substring(strings:\
    \ empty, substring: \"a\")\n    let r10 = filter_by_substring(strings: v2, substring:\
    \ \"b\")\n    let r11 = filter_by_substring(strings: v2, substring: \"c\")\n \
    \   let r12 = filter_by_substring(strings: v2, substring: \"d\")\n    let r13\
    \ = filter_by_substring(strings: v2, substring: \"e\")\n    let r14 = filter_by_substring(strings:\
    \ v2, substring: \"z\")\n    assert(r1 == v1)\n    assert(r2 == v3)\n    assert(r3\
    \ == v3)\n    assert(r4 ==\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(filter_by_substring(strings:\
    \ [] as [String], substring: \"john\") == [] as [String])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring:\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmpkesf7_gb.swift:35:1: error: expected expression after operator\n\
    }\n^\n/tmp/tmpkesf7_gb.swift:34:15: error: missing argument for parameter #1 in\
    \ call\n    assert(r4 ==\n              ^\n              <#Bool#>\nSwift.assert:1:13:\
    \ note: 'assert(_:_:file:line:)' declared here\npublic func assert(_ condition:\
    \ @autoclosure () -> Bool, _ message: @autoclosure () -> String = String(), file:\
    \ StaticString = #file, line: UInt = #line)\n            ^\n"
  stdout: ''
  timestamp: 1660013448
- exit_code: 0
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    return strings.filter({ $0.contains(substring) })\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(filter_by_substring(strings: [] as [String], substring: \"\
    john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\") == [\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"grunt\", \"\
    prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013337
- exit_code: 0
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    let filtered = strings.filter({$0.contains(substring)})\n    return filtered\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_by_substring(strings: [] as [String], substring:\
    \ \"john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") ==\
    \ [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\"\
    , \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\")\
    \ == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013448
- exit_code: -4
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    return strings.filter { string in\n        for char in string {\n       \
    \     if char == Character(substring) {\n                return true\n       \
    \     }\n        }\n        return false\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(filter_by_substring(strings: [] as [String], substring: \"john\"\
    ) == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\", \"\
    xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") == [\"xxx\", \"\
    xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\") == [\"xxx\",\
    \ \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"grunt\", \"\
    prune\"])"
  status: Exception
  stderr: 'Swift/Character.swift:177: Fatal error: Can''t form a Character from a
    String containing more than one extended grapheme cluster

    Current stack trace:

    0    libswiftCore.so                    0x00002acc5d010c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acc5cd07561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002acc5cd07286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002acc5cd0713c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002acc5cd06bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftCore.so                    0x00002acc5cd06f2c <unavailable> + 1433388

    6    libswiftCore.so                    0x00002acc5cd14090 Character.init(_:)
    + 275

    7    tmpqs1k8x6f                        0x000055aacd97a137 <unavailable> + 8503

    8    tmpqs1k8x6f                        0x000055aacd97a5f4 <unavailable> + 9716

    9    libswiftCore.so                    0x00002acc5cd046e0 _ArrayProtocol.filter(_:)
    + 518

    10   tmpqs1k8x6f                        0x000055aacd979fa7 <unavailable> + 8103

    11   tmpqs1k8x6f                        0x000055aacd979809 <unavailable> + 6153

    12   libc.so.6                          0x00002acc5d1fc460 __libc_start_main +
    245

    13   tmpqs1k8x6f                        0x000055aacd9792e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1660013448
- exit_code: 0
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    // TODO: Use Array.filter() to return an array containing only the strings\
    \ containing the substring\n    var filteredArray = [String]()\n    for item in\
    \ strings {\n        if item.contains(substring) {\n            filteredArray.append(item)\n\
    \        }\n    }\n    return filteredArray\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(filter_by_substring(strings: [] as [String], substring: \"john\"\
    ) == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\", \"\
    xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") == [\"xxx\", \"\
    xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\") == [\"xxx\",\
    \ \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"grunt\", \"\
    prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013448
- exit_code: 0
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    return strings.filter { str in\n        str.contains(substring)\n    }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_by_substring(strings: [] as [String], substring:\
    \ \"john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") ==\
    \ [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\"\
    , \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\")\
    \ == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013447
- exit_code: 0
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    return strings.filter { (s: String) -> Bool in\n        s.contains(substring)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(filter_by_substring(strings:\
    \ [] as [String], substring: \"john\") == [] as [String])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring:\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013448
- exit_code: 0
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    return strings.filter { $0.contains(substring) }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(filter_by_substring(strings: [] as [String], substring: \"\
    john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\") == [\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"grunt\", \"\
    prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013337
- exit_code: -4
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    return strings.filter {substring.contains($0)}\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(filter_by_substring(strings: [] as [String], substring: \"\
    john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\") == [\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"grunt\", \"\
    prune\"])"
  status: Exception
  stderr: 'tmpn6xr599q/tmpn6xr599q.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac0168c3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac0165bab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac0165ba988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac0165b97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn6xr599q                        0x0000560afc5e98b7 <unavailable> + 6327

    5    libc.so.6                          0x00002ac016aaf460 __libc_start_main +
    245

    6    tmpn6xr599q                        0x0000560afc5e9239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1660013448
- exit_code: 0
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    return strings.filter { $0.contains(substring) }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(filter_by_substring(strings: [] as [String], substring: \"\
    john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\") == [\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"grunt\", \"\
    prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013337
- exit_code: 0
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var result: [String] = []\n    for string in strings {\n        if string.contains(substring)\
    \ {\n            result.append(string)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_by_substring(strings: [] as [String], substring:\
    \ \"john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") ==\
    \ [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\"\
    , \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\")\
    \ == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013337
- exit_code: 0
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \  return strings.filter { (string) -> Bool in\n    return string.contains(substring)\n\
    \  }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(filter_by_substring(strings:\
    \ [] as [String], substring: \"john\") == [] as [String])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring:\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013448
- exit_code: 0
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    // Create an empty array\n    var substrings: [String] = []\n    // Iterate\
    \ through the input strings\n    for string in strings {\n        // Check if\
    \ the input string contains the given substring\n        if string.contains(substring)\
    \ {\n            // Append string to the array\n            substrings.append(string)\n\
    \        }\n    }\n    // Return the array\n    return substrings\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_by_substring(strings: [] as [String], substring:\
    \ \"john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") ==\
    \ [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\"\
    , \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\")\
    \ == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013448
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var filtered_strings = [String]()\n    for string in strings {\n        if\
    \ string.range(of: substring) != nil {\n            filtered_strings.append(string)\n\
    \        }\n    }\n    return filtered_strings\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(filter_by_substring(strings: [] as [String], substring: \"john\"\
    ) == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\", \"\
    xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") == [\"xxx\", \"\
    xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\") == [\"xxx\",\
    \ \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"grunt\", \"\
    prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmp49dph6ip.swift:10:19: error: value of type 'String' has no member\
    \ 'range'\n        if string.range(of: substring) != nil {\n           ~~~~~~\
    \ ^~~~~\n"
  stdout: ''
  timestamp: 1660013448
- exit_code: 0
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    let filtered = strings.filter({\n        $0.contains(substring)\n    })\n\
    \    return filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(filter_by_substring(strings:\
    \ [] as [String], substring: \"john\") == [] as [String])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring:\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013448
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    strings.filter({ $0.range(of: substring) != nil })\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_substring(strings: [] as [String], substring:\
    \ \"john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") ==\
    \ [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\"\
    , \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\")\
    \ == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmp92fuhl4i.swift:8:25: error: value of type 'String' has no member\
    \ 'range'\n    strings.filter({ $0.range(of: substring) != nil })\n          \
    \           ~~ ^~~~~\n"
  stdout: ''
  timestamp: 1660013448
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    return filter(strings, { $0.lowercaseString.rangeOfString(substring.lowercaseString)\
    \ != nil })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(filter_by_substring(strings:\
    \ [] as [String], substring: \"john\") == [] as [String])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring:\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmpounfsz_p.swift:8:12: error: cannot find 'filter' in scope\n   \
    \ return filter(strings, { $0.lowercaseString.rangeOfString(substring.lowercaseString)\
    \ != nil })\n           ^~~~~~\n/tmp/tmpounfsz_p.swift:8:73: error: value of type\
    \ 'String' has no member 'lowercaseString'\n    return filter(strings, { $0.lowercaseString.rangeOfString(substring.lowercaseString)\
    \ != nil })\n                                                              ~~~~~~~~~\
    \ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013448
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    return strings.filter { $0.range(of: substring) != nil }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_substring(strings: [] as [String], substring:\
    \ \"john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") ==\
    \ [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\"\
    , \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\")\
    \ == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmp1nwaafqt.swift:8:32: error: value of type 'String' has no member\
    \ 'range'\n    return strings.filter { $0.range(of: substring) != nil }\n    \
    \                        ~~ ^~~~~\n"
  stdout: ''
  timestamp: 1660013446
- exit_code: 0
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    return strings.filter({ $0.contains(substring) })\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(filter_by_substring(strings: [] as [String], substring: \"\
    john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\") == [\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"grunt\", \"\
    prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013337
- exit_code: 0
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var result: [String] = []\n    for str in strings {\n        if str.contains(substring)\
    \ {\n            result.append(str)\n        }\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_by_substring(strings: [] as [String], substring:\
    \ \"john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") ==\
    \ [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\"\
    , \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\")\
    \ == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013447
- exit_code: 0
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    return strings.filter({ $0.contains(substring) })\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(filter_by_substring(strings: [] as [String], substring: \"\
    john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\") == [\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"grunt\", \"\
    prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013337
- exit_code: 0
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    var result = [String]()\n    for str in strings {\n        if str.contains(substring)\
    \ {\n            result.append(str)\n        }\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_by_substring(strings: [] as [String], substring:\
    \ \"john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") ==\
    \ [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\"\
    , \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\")\
    \ == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013447
- exit_code: 0
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    return strings.filter { $0.contains(substring) }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(filter_by_substring(strings: [] as [String], substring: \"\
    john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\") == [\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"grunt\", \"\
    prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013337
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    return strings.filter({$0.range(of: substring) != nil})\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_substring(strings: [] as [String], substring:\
    \ \"john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") ==\
    \ [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\"\
    , \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\")\
    \ == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmpk94v3v1b.swift:8:31: error: value of type 'String' has no member\
    \ 'range'\n    return strings.filter({$0.range(of: substring) != nil})\n     \
    \                      ~~ ^~~~~\n"
  stdout: ''
  timestamp: 1660013446
- exit_code: 0
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    return strings.filter { substring.count > 0 && $0.contains(substring) }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_by_substring(strings: [] as [String], substring:\
    \ \"john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") ==\
    \ [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\"\
    , \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\")\
    \ == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013448
- exit_code: 0
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    return strings.filter { (s: String) -> Bool in\n        return s.contains(substring)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(filter_by_substring(strings:\
    \ [] as [String], substring: \"john\") == [] as [String])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring:\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013447
- exit_code: 0
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    return strings.filter { $0.contains(substring) }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(filter_by_substring(strings: [] as [String], substring: \"\
    john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\") == [\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"grunt\", \"\
    prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013337
- exit_code: 1
  program: "\n/// Filter an input array of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"\
    a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\"\
    , \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\n\
    func filter_by_substring(strings: [String], substring: String) -> [String] {\n\
    \    return strings.filter {\n        $0.range(of: substring) != nil\n    }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_by_substring(strings: [] as [String], substring:\
    \ \"john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") ==\
    \ [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\"\
    , \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\")\
    \ == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmp9vth3tve.swift:9:12: error: value of type 'String' has no member\
    \ 'range'\n        $0.range(of: substring) != nil\n        ~~ ^~~~~\n"
  stdout: ''
  timestamp: 1660013446
