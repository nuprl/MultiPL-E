language: swift
name: HumanEval_35_max_element
results:
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    var max: Int = l[0]\n    for\
    \ i in l {\n        if i > max {\n            max = i\n        }\n    }\n    return\
    \ max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(max_element(l: [1, 2, 3])\
    \ == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978427
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    var max = l[0]\n    for e in\
    \ l {\n        if e > max {\n            max = e\n        }\n    }\n    return\
    \ max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(max_element(l: [1, 2, 3])\
    \ == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978427
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    var max: Int = l[0]\n    for\
    \ i in 1..<l.count {\n        if l[i] > max {\n            max = l[i]\n      \
    \  }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(max_element(l:\
    \ [1, 2, 3]) == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10])\
    \ == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978427
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    var max: Int = l[0]\n    for\
    \ e in l {\n        if e > max {\n            max = e\n        }\n    }\n    return\
    \ max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(max_element(l: [1, 2, 3])\
    \ == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978427
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    var max = l[0]\n    for x in\
    \ l {\n        if x > max {\n            max = x\n        }\n    }\n    return\
    \ max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(max_element(l: [1, 2, 3])\
    \ == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978427
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    var max: Int = l[0]\n    for\
    \ item in l {\n        if item > max {\n            max = item\n        }\n  \
    \  }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(max_element(l:\
    \ [1, 2, 3]) == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10])\
    \ == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978427
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    var max = l[0]\n    for x in\
    \ l {\n        if x > max {\n            max = x\n        }\n    }\n    return\
    \ max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(max_element(l: [1, 2, 3])\
    \ == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978427
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    var n = l[0]\n    for i in 1..<l.count\
    \ {\n        if l[i] > n {\n            n = l[i]\n        }\n    }\n    return\
    \ n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(max_element(l: [1, 2, 3]) ==\
    \ 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978427
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n  var max = l[0]\n  for i in l {\n\
    \    if i > max {\n      max = i\n    }\n  }\n  return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978427
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    var result = l[0]\n    for v\
    \ in l {\n        if v > result {\n            result = v\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(max_element(l: [1,\
    \ 2, 3]) == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10])\
    \ == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978427
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    return l.max()!\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978427
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    var max = l[0]\n    for x in\
    \ l {\n        if x > max {\n            max = x\n        }\n    }\n    return\
    \ max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(max_element(l: [1, 2, 3])\
    \ == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978427
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    var result = l[0]\n    for element\
    \ in l {\n        if result < element {\n            result = element\n      \
    \  }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(max_element(l:\
    \ [1, 2, 3]) == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10])\
    \ == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978427
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    var max = l[0]\n    for i in\
    \ 1..<l.count {\n        if l[i] > max {\n            max = l[i]\n        }\n\
    \    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(max_element(l:\
    \ [1, 2, 3]) == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10])\
    \ == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978427
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    return l.reduce(l[0], { max($0,\
    \ $1) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(max_element(l: [1, 2,\
    \ 3]) == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) ==\
    \ 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978427
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    return l.reduce(Int.min, max)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978427
- exit_code: -4
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    // TODO: Implement max_element\n\
    \    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(max_element(l: [1,\
    \ 2, 3]) == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10])\
    \ == 124)"
  status: Exception
  stderr: 'tmpx10ig4kx/tmpx10ig4kx.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3b072a7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3b06f9eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3b06f9e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3b06f9d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx10ig4kx                        0x0000556bd55de2ff <unavailable> + 4863

    5    libc.so.6                          0x00002b3b07493460 __libc_start_main +
    245

    6    tmpx10ig4kx                        0x0000556bd55ddf69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659978427
- exit_code: 1
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    return l.reduce(l[0], combine:\
    \ { max($0, $1) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(max_element(l: [1,\
    \ 2, 3]) == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10])\
    \ == 124)"
  status: SyntaxError
  stderr: "/tmp/tmpmor__n4g.swift:8:20: error: extraneous argument label 'combine:'\
    \ in call\n    return l.reduce(l[0], combine: { max($0, $1) })\n             \
    \      ^      ~~~~~~~~~\n                          \n"
  stdout: ''
  timestamp: 1659978427
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    var m = l[0]\n    for e in l\
    \ {\n        if e > m {\n            m = e\n        }\n    }\n    return m\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978427
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    return l.reduce(l[0], { max($0,\
    \ $1) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(max_element(l: [1, 2,\
    \ 3]) == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) ==\
    \ 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978427
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    var max = l[0]\n    for i in\
    \ l {\n        if i > max {\n            max = i\n        }\n    }\n    return\
    \ max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(max_element(l: [1, 2, 3])\
    \ == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978427
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    assert(l.count > 0)\n    var\
    \ m = l[0]\n    for i in 1..<l.count {\n        if l[i] > m {\n            m =\
    \ l[i]\n        }\n    }\n    return m\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l: [5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10]) == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978427
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    return l.max()!\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978427
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    var max = l[0]\n    for e in\
    \ l {\n        if max < e {\n            max = e\n        }\n    }\n    return\
    \ max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(max_element(l: [1, 2, 3])\
    \ == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978427
- exit_code: -4
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    return 0\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: Exception
  stderr: 'tmpy24jusi6/tmpy24jusi6.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b99b3817c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b99b350eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b99b350e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b99b350d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy24jusi6                        0x0000555a4866b2ff <unavailable> + 4863

    5    libc.so.6                          0x00002b99b3a03460 __libc_start_main +
    245

    6    tmpy24jusi6                        0x0000555a4866af69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659978427
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    if l.count == 0 {\n        return\
    \ 0\n    }\n    if l.count == 1 {\n        return l[0]\n    }\n    var max = l[0]\n\
    \    for element in l {\n        if element > max {\n            max = element\n\
    \        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(max_element(l:\
    \ [1, 2, 3]) == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10])\
    \ == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978427
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    var max = l[0]\n    for i in\
    \ l {\n        if i > max {\n            max = i\n        }\n    }\n    return\
    \ max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(max_element(l: [1, 2, 3])\
    \ == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978427
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    var max = l[0]\n    for n in\
    \ l {\n        if max < n {\n            max = n\n        }\n    }\n    return\
    \ max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(max_element(l: [1, 2, 3])\
    \ == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978427
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    return l.max()!\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978427
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    if (l.count == 0) {\n      \
    \  return 0\n    }\n    var max = l[0]\n    for i in l {\n        if i > max {\n\
    \            max = i\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l: [5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978427
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    var max = l[0]\n    for i in\
    \ l {\n        if i > max {\n            max = i\n        }\n    }\n    return\
    \ max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(max_element(l: [1, 2, 3])\
    \ == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978427
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    var cur_max = l[0]\n    for\
    \ i in 1..<l.count {\n        if l[i] > cur_max {\n            cur_max = l[i]\n\
    \        }\n    }\n    return cur_max\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l: [5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10]) == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978427
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    var max: Int = l[0]\n    for\
    \ num in l {\n        if max < num {\n            max = num\n        }\n    }\n\
    \    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(max_element(l: [1,\
    \ 2, 3]) == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10])\
    \ == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978427
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    var max = l[0]\n    for i in\
    \ 1..<l.count {\n        if l[i] > max {\n            max = l[i]\n        }\n\
    \    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(max_element(l:\
    \ [1, 2, 3]) == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10])\
    \ == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978427
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    var max = l[0]\n    for e in\
    \ l {\n        if max < e {\n            max = e\n        }\n    }\n    return\
    \ max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(max_element(l: [1, 2, 3])\
    \ == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978427
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    var max = l[0]\n    for val\
    \ in l {\n        if val > max {\n            max = val\n        }\n    }\n  \
    \  return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(max_element(l: [1,\
    \ 2, 3]) == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10])\
    \ == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978427
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    return l.max()!\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978427
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    var max = l[0]\n    for i in\
    \ l {\n        if i > max {\n            max = i\n        }\n    }\n    return\
    \ max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(max_element(l: [1, 2, 3])\
    \ == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978427
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    var max: Int = l[0]\n    for\
    \ i in l {\n        if i > max {\n            max = i\n        }\n    }\n    return\
    \ max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(max_element(l: [1, 2, 3])\
    \ == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978427
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    var max = l[0]\n    for x in\
    \ l {\n        if x > max {\n            max = x\n        }\n    }\n    return\
    \ max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(max_element(l: [1, 2, 3])\
    \ == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978427
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    var m = l[0]\n    for i in l\
    \ {\n        if i > m {\n            m = i\n        }\n    }\n    return m\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978427
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    return l.max()!\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978427
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    var max = l[0]\n    for e in\
    \ l {\n        if max < e {\n            max = e\n        }\n    }\n    return\
    \ max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(max_element(l: [1, 2, 3])\
    \ == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978427
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    var res = l[0]\n    for i in\
    \ 1..<l.count {\n        if l[i] > res {\n            res = l[i]\n        }\n\
    \    }\n    return res\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(max_element(l:\
    \ [1, 2, 3]) == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10])\
    \ == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978427
- exit_code: 1
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    return reduce(l, minElement(l),\
    \ { x, y in max(x, y) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(max_element(l:\
    \ [1, 2, 3]) == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10])\
    \ == 124)"
  status: SyntaxError
  stderr: "/tmp/tmpuotdt3fy.swift:8:12: error: cannot find 'reduce' in scope\n   \
    \ return reduce(l, minElement(l), { x, y in max(x, y) })\n           ^~~~~~\n\
    /tmp/tmpuotdt3fy.swift:8:22: error: cannot find 'minElement' in scope\n    return\
    \ reduce(l, minElement(l), { x, y in max(x, y) })\n                     ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978427
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    return l.max()!\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978427
- exit_code: 1
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    return max_element(l: l, right:\
    \ l.count - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(max_element(l: [1,\
    \ 2, 3]) == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10])\
    \ == 124)"
  status: SyntaxError
  stderr: "/tmp/tmpepihz2eg.swift:8:45: error: extra argument 'right' in call\n  \
    \  return max_element(l: l, right: l.count - 1)\n                      ~~~~~~~~~~~~~~~~~~~~~~^~~~\n"
  stdout: ''
  timestamp: 1659978427
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    var m = l[0]\n    for i in l\
    \ {\n        if m < i {\n            m = i\n        }\n    }\n    return m\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978427
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    var max = l[0]\n    for i in\
    \ l {\n        if i > max {\n            max = i\n        }\n    }\n    return\
    \ max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(max_element(l: [1, 2, 3])\
    \ == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978427
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n  var maximum = l[0]\n  for i in\
    \ 1..<l.count {\n    if l[i] > maximum {\n      maximum = l[i]\n    }\n  }\n \
    \ return maximum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(max_element(l: [1,\
    \ 2, 3]) == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10])\
    \ == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978427
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    if l.count == 0 {\n        print(\"\
    Error: empty array.\")\n        return 0\n    }\n    var result = l[0]\n    for\
    \ i in 1..<l.count {\n        if l[i] > result {\n            result = l[i]\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l: [5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10]) == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978427
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    var m = l[0]\n    for element\
    \ in l {\n        if m < element {\n            m = element\n        }\n    }\n\
    \    return m\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(max_element(l: [1,\
    \ 2, 3]) == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10])\
    \ == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978428
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    var max: Int = l[0]\n    for\
    \ i in l {\n        if i > max {\n            max = i\n        }\n    }\n    return\
    \ max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(max_element(l: [1, 2, 3])\
    \ == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978427
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    return l.max()!\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978427
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    var max = l[0]\n    for i in\
    \ l {\n        if i > max {\n            max = i\n        }\n    }\n    return\
    \ max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(max_element(l: [1, 2, 3])\
    \ == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978427
- exit_code: 1
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n  var i = 1\n  var max = l[0]\n\
    \  while i < l.count {\n    max = max(max, l[i])\n    i += 1\n  }\n  return max\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: SyntaxError
  stderr: "/tmp/tmp79usds8z.swift:11:11: error: cannot call value of non-function\
    \ type 'Int'\n    max = max(max, l[i])\n          ^\n"
  stdout: ''
  timestamp: 1659978427
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n  var max = l[0]\n  for i in l {\n\
    \    if i > max {\n      max = i\n    }\n  }\n  return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978427
- exit_code: 1
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n  if l.count == 0 {\n    return\
    \ Int.min\n  }\n  return max_element(l: l, idx: 0, max: l[0])\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: SyntaxError
  stderr: "/tmp/tmpc7x3_9ja.swift:11:21: error: extra arguments at positions #2, #3\
    \ in call\n  return max_element(l: l, idx: 0, max: l[0])\n                   \
    \ ^\n/tmp/tmpc7x3_9ja.swift:7:6: note: 'max_element(l:)' declared here\nfunc max_element(l:\
    \ [Int]) -> Int {\n     ^\n"
  stdout: ''
  timestamp: 1659978427
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    var m = l[0]\n    for x in l\
    \ {\n        if m < x {\n            m = x\n        }\n    }\n    return m\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978427
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    return l.max()!\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978427
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    var max = Int.min\n    for x\
    \ in l {\n        if x > max {\n            max = x\n        }\n    }\n    return\
    \ max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(max_element(l: [1, 2, 3])\
    \ == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978427
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    var max: Int = 0\n    if l.count\
    \ > 0 {\n        max = l[0]\n        for i in l {\n            if i > max {\n\
    \                max = i\n            }\n        }\n    }\n    return max\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978427
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    return l.max()!\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978427
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    var max = l[0]\n    for i in\
    \ l {\n        if i > max {\n            max = i\n        }\n    }\n    return\
    \ max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(max_element(l: [1, 2, 3])\
    \ == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978427
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    var max = l[0]\n    for i in\
    \ 1..<l.count {\n        if max < l[i] {\n            max = l[i]\n        }\n\
    \    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(max_element(l:\
    \ [1, 2, 3]) == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10])\
    \ == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978427
- exit_code: -4
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    return 0\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: Exception
  stderr: 'tmpy24jusi6/tmpy24jusi6.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b99b3817c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b99b350eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b99b350e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b99b350d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy24jusi6                        0x0000555a4866b2ff <unavailable> + 4863

    5    libc.so.6                          0x00002b99b3a03460 __libc_start_main +
    245

    6    tmpy24jusi6                        0x0000555a4866af69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659978427
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    var m = Int.min\n    for i in\
    \ l {\n        if i > m {\n            m = i\n        }\n    }\n    return m\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978428
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    return l.reduce(Int.min, max)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978427
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    if l.count == 0 {\n        return\
    \ Int.min\n    }\n    return l.reduce(l[0]) { max($0, $1) }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978428
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n  var max: Int = l[0]\n  for x in\
    \ l {\n    if x > max {\n      max = x\n    }\n  }\n  return max\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978427
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    var max = l[0]\n    for i in\
    \ 1..<l.count {\n        if l[i] > max {\n            max = l[i]\n        }\n\
    \    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(max_element(l:\
    \ [1, 2, 3]) == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10])\
    \ == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978427
- exit_code: 1
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    return reduce(l, l[0], {max($0,\
    \ $1)})\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(max_element(l: [1, 2, 3])\
    \ == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: SyntaxError
  stderr: "/tmp/tmpk_a3jen7.swift:8:12: error: cannot find 'reduce' in scope\n   \
    \ return reduce(l, l[0], {max($0, $1)})\n           ^~~~~~\n"
  stdout: ''
  timestamp: 1659978427
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    assert(l.count > 0)\n    var\
    \ m = l[0]\n    for i in 1..<l.count {\n        if l[i] > m {\n            m =\
    \ l[i]\n        }\n    }\n    return m\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l: [5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10]) == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978427
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n  var max = l[0]\n  for num in l\
    \ {\n    if num > max {\n      max = num\n    }\n  }\n  return max\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978427
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    var max = l[0]\n    for i in\
    \ 1..<l.count {\n        if l[i] > max {\n            max = l[i]\n        }\n\
    \    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(max_element(l:\
    \ [1, 2, 3]) == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10])\
    \ == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978427
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    return l.reduce(Int.min, max)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978427
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    var max = l[0]\n    for i in\
    \ 1..<l.count {\n        if max < l[i] {\n            max = l[i]\n        }\n\
    \    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(max_element(l:\
    \ [1, 2, 3]) == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10])\
    \ == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978427
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    assert(l.count != 0)\n    var\
    \ max_elem = l[0]\n    for e in l {\n        if max_elem < e {\n            max_elem\
    \ = e\n        }\n    }\n    return max_elem\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l: [5, 3, -5,\
    \ 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978428
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    var max = l[0]\n    for item\
    \ in l {\n        if max < item {\n            max = item\n        }\n    }\n\
    \    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(max_element(l: [1,\
    \ 2, 3]) == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10])\
    \ == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978428
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    var max = l[0]\n    for x in\
    \ l {\n        if x > max {\n            max = x\n        }\n    }\n    return\
    \ max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(max_element(l: [1, 2, 3])\
    \ == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978427
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    var max = l[0]\n    for e in\
    \ l {\n        if e > max {\n            max = e\n        }\n    }\n    return\
    \ max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(max_element(l: [1, 2, 3])\
    \ == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978427
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    var max = l[0]\n    for i in\
    \ l {\n        if i > max {\n            max = i\n        }\n    }\n    return\
    \ max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(max_element(l: [1, 2, 3])\
    \ == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978427
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    // Put code here\n    var max\
    \ : Int = l[0]\n    for i in l {\n        if max < i {\n            max = i\n\
    \        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(max_element(l:\
    \ [1, 2, 3]) == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10])\
    \ == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978428
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    var result = l[0]\n    for i\
    \ in l {\n        if i > result {\n            result = i\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(max_element(l: [1,\
    \ 2, 3]) == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10])\
    \ == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978428
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    var maxValue = Int.min\n   \
    \ for i in l {\n        if i > maxValue {\n            maxValue = i\n        }\n\
    \    }\n    return maxValue\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(max_element(l:\
    \ [1, 2, 3]) == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10])\
    \ == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978428
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    var max = l[0]\n    for i in\
    \ l {\n        if max < i {\n            max = i\n        }\n    }\n    return\
    \ max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(max_element(l: [1, 2, 3])\
    \ == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978428
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    var max = l[0]\n    for item\
    \ in l {\n        if item > max {\n            max = item\n        }\n    }\n\
    \    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(max_element(l: [1,\
    \ 2, 3]) == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10])\
    \ == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978428
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    if l.count == 0 {\n        return\
    \ 0\n    }\n    var max = l[0]\n    for i in 1..<l.count {\n        if l[i] >\
    \ max {\n            max = l[i]\n        }\n    }\n    return max\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978428
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    if l.count == 0 {\n        return\
    \ 0\n    }\n    var m = l[0]\n    for i in 1..<l.count {\n        if l[i] > m\
    \ {\n            m = l[i]\n        }\n    }\n    return m\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978428
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    if l.count == 0 {\n        return\
    \ 0\n    }\n    var max = l[0]\n    for i in 1..<l.count {\n        if l[i] >\
    \ max {\n            max = l[i]\n        }\n    }\n    return max\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978428
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    var result = l[0]\n    for i\
    \ in 1 ..< l.count {\n        if l[i] > result {\n            result = l[i]\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l: [5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10]) == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978428
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    return l.max()!\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978427
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    var max = l[0]\n    for e in\
    \ l {\n        if max < e {\n            max = e\n        }\n    }\n    return\
    \ max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(max_element(l: [1, 2, 3])\
    \ == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978427
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    var max = l[0]\n    for i in\
    \ 1..<l.count {\n        if l[i] > max {\n            max = l[i]\n        }\n\
    \    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(max_element(l:\
    \ [1, 2, 3]) == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10])\
    \ == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978427
- exit_code: -4
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    // TODO\n    return 0\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: Exception
  stderr: 'tmpvh1v1x6n/tmpvh1v1x6n.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af8c1727c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af8c141eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af8c141e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af8c141d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvh1v1x6n                        0x00005595ed80c2ff <unavailable> + 4863

    5    libc.so.6                          0x00002af8c1913460 __libc_start_main +
    245

    6    tmpvh1v1x6n                        0x00005595ed80bf69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659978428
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    if l.count == 0 {\n        return\
    \ 0\n    }\n    return l.reduce(l[0]) { (max, item) in\n        return max > item\
    \ ? max : item\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(max_element(l:\
    \ [1, 2, 3]) == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10])\
    \ == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978428
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    var maximum = l[0]\n    for\
    \ i in 1..<l.count {\n        if maximum < l[i] {\n            maximum = l[i]\n\
    \        }\n    }\n    return maximum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l: [5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10]) == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978428
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    var max: Int = l[0]\n    for\
    \ i in 1..<l.count {\n        if l[i] > max {\n            max = l[i]\n      \
    \  }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(max_element(l:\
    \ [1, 2, 3]) == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10])\
    \ == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978427
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n  var max = l[0]\n  for element\
    \ in l {\n    if element > max {\n      max = element\n    }\n  }\n  return max\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978428
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    // TODO\n    var max = 0\n \
    \   for n in l {\n        if n > max {\n            max = n\n        }\n    }\n\
    \    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(max_element(l: [1,\
    \ 2, 3]) == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10])\
    \ == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978428
- exit_code: 1
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    return _max_element(l, l.count)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: SyntaxError
  stderr: "/tmp/tmp1o5wqr7g.swift:8:12: error: cannot find '_max_element' in scope\n\
    \    return _max_element(l, l.count)\n           ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978428
- exit_code: 1
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n  return reduce(l, start: l[0],\
    \ f: {x, y in max(x, y)})\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(max_element(l:\
    \ [1, 2, 3]) == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10])\
    \ == 124)"
  status: SyntaxError
  stderr: "/tmp/tmp96e7mggq.swift:8:10: error: cannot find 'reduce' in scope\n  return\
    \ reduce(l, start: l[0], f: {x, y in max(x, y)})\n         ^~~~~~\n"
  stdout: ''
  timestamp: 1659978428
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    return l.max()!\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978427
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    var max = l[0]\n    for i in\
    \ 1..<l.count {\n        if max < l[i] {\n            max = l[i]\n        }\n\
    \    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(max_element(l:\
    \ [1, 2, 3]) == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10])\
    \ == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978427
- exit_code: -4
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    return 0\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: Exception
  stderr: 'tmpy24jusi6/tmpy24jusi6.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b99b3817c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b99b350eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b99b350e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b99b350d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy24jusi6                        0x0000555a4866b2ff <unavailable> + 4863

    5    libc.so.6                          0x00002b99b3a03460 __libc_start_main +
    245

    6    tmpy24jusi6                        0x0000555a4866af69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659978427
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    var max = l[0]\n    for x in\
    \ l {\n        if x > max {\n            max = x\n        }\n    }\n    return\
    \ max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(max_element(l: [1, 2, 3])\
    \ == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978427
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    var m = l[0]\n    for a in l\
    \ {\n        if a > m {\n            m = a\n        }\n    }\n    return m\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978428
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    var m = l[0]\n    for x in l\
    \ {\n        if x > m {\n            m = x\n        }\n    }\n    return m\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978428
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    var max_el = l[0]\n    for i\
    \ in l {\n        if i > max_el {\n            max_el = i\n        }\n    }\n\
    \    return max_el\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(max_element(l: [1,\
    \ 2, 3]) == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10])\
    \ == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978428
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    var max = l[0]\n    for i in\
    \ l {\n        if max < i {\n            max = i\n        }\n    }\n    return\
    \ max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(max_element(l: [1, 2, 3])\
    \ == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978428
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    var max = l[0]\n    for element\
    \ in l {\n        if element > max {\n            max = element\n        }\n \
    \   }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(max_element(l:\
    \ [1, 2, 3]) == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10])\
    \ == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978428
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n  return l.max()!\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978428
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    var max = l[0]\n    for elem\
    \ in l {\n        if elem > max {\n            max = elem\n        }\n    }\n\
    \    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(max_element(l: [1,\
    \ 2, 3]) == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10])\
    \ == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978428
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    var max: Int = 0\n    for i\
    \ in l {\n        if i > max {\n            max = i\n        }\n    }\n    return\
    \ max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(max_element(l: [1, 2, 3])\
    \ == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978428
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    assert(l.count > 0)\n    return\
    \ l.reduce(l[0], { max($0, $1) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(max_element(l:\
    \ [1, 2, 3]) == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10])\
    \ == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978428
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    var max = l[0]\n    for e in\
    \ l {\n        if e > max {\n            max = e\n        }\n    }\n    return\
    \ max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(max_element(l: [1, 2, 3])\
    \ == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978427
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    var max = l[0]\n    for i in\
    \ 1..<l.count {\n        if l[i] > max {\n            max = l[i]\n        }\n\
    \    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(max_element(l:\
    \ [1, 2, 3]) == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10])\
    \ == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978427
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    var max = l[0]\n    for i in\
    \ 1..<l.count {\n        if l[i] > max {\n            max = l[i]\n        }\n\
    \    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(max_element(l:\
    \ [1, 2, 3]) == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10])\
    \ == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978427
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    assert(l.count > 0)\n    var\
    \ max: Int = l[0]\n    for i in 1..<l.count {\n        if l[i] > max {\n     \
    \       max = l[i]\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l: [5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978428
- exit_code: 1
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    return l.reduce(l[0], combine:\
    \ { max($0, $1) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(max_element(l: [1,\
    \ 2, 3]) == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10])\
    \ == 124)"
  status: SyntaxError
  stderr: "/tmp/tmpmor__n4g.swift:8:20: error: extraneous argument label 'combine:'\
    \ in call\n    return l.reduce(l[0], combine: { max($0, $1) })\n             \
    \      ^      ~~~~~~~~~\n                          \n"
  stdout: ''
  timestamp: 1659978427
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    var max = l[0]\n    for item\
    \ in l {\n        if item > max {\n            max = item\n        }\n    }\n\
    \    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(max_element(l: [1,\
    \ 2, 3]) == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10])\
    \ == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978428
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    var max = l[0]\n    for i in\
    \ l {\n        if i > max {\n            max = i\n        }\n    }\n    return\
    \ max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(max_element(l: [1, 2, 3])\
    \ == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978427
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    var maxElement = Int.min\n \
    \   for element in l {\n        if maxElement < element {\n            maxElement\
    \ = element\n        }\n    }\n    return maxElement\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l: [5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978428
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    guard !l.isEmpty else { return\
    \ 0 }\n    var max_elem = l[0]\n    for elem in l {\n        if elem > max_elem\
    \ {\n            max_elem = elem\n        }\n    }\n    return max_elem\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978428
- exit_code: -4
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n  return 0\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: Exception
  stderr: 'tmpt3ievf79/tmpt3ievf79.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6c6cf34c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6c6cc2bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6c6cc2b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6c6cc2a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt3ievf79                        0x000056117762c2ff <unavailable> + 4863

    5    libc.so.6                          0x00002b6c6d120460 __libc_start_main +
    245

    6    tmpt3ievf79                        0x000056117762bf69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659978428
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    var temp = l[0]\n    for item\
    \ in l {\n        if item > temp {\n            temp = item\n        }\n    }\n\
    \    return temp\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(max_element(l: [1,\
    \ 2, 3]) == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10])\
    \ == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978428
- exit_code: -4
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    // TODO: implement here\n  \
    \  return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(max_element(l: [1, 2,\
    \ 3]) == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) ==\
    \ 124)"
  status: Exception
  stderr: 'tmpzb79zzmx/tmpzb79zzmx.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae8021dfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae801ed6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae801ed6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae801ed57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzb79zzmx                        0x000055acde4fb2ff <unavailable> + 4863

    5    libc.so.6                          0x00002ae8023cb460 __libc_start_main +
    245

    6    tmpzb79zzmx                        0x000055acde4faf69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659978428
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    if let m = l.max() {\n     \
    \   return m\n    }\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(max_element(l:\
    \ [1, 2, 3]) == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10])\
    \ == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978428
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    var max_element = l[0]\n   \
    \ for element in l {\n        if element > max_element {\n            max_element\
    \ = element\n        }\n    }\n    return max_element\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l: [5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978428
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    var max = l[0]\n    for element\
    \ in l {\n        if element > max {\n            max = element\n        }\n \
    \   }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(max_element(l:\
    \ [1, 2, 3]) == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10])\
    \ == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978428
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    return l.max()!\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978427
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    var max = l[0]\n    for i in\
    \ l {\n        if i > max {\n            max = i\n        }\n    }\n    return\
    \ max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(max_element(l: [1, 2, 3])\
    \ == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978427
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    var max_element = l[0]\n   \
    \ for x in l {\n        if x > max_element {\n            max_element = x\n  \
    \      }\n    }\n    return max_element\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l: [5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10]) == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978428
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    return l.reduce(l[0], { $0 >\
    \ $1 ? $0 : $1 })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(max_element(l: [1,\
    \ 2, 3]) == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10])\
    \ == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978428
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    assert(l.count > 0)\n    var\
    \ max = l[0]\n    for i in l {\n        if i > max {\n            max = i\n  \
    \      }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(max_element(l:\
    \ [1, 2, 3]) == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10])\
    \ == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978428
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n  var max = l[0]\n  for num in l\
    \ {\n    if num > max {\n      max = num\n    }\n  }\n  return max\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978427
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    assert(l.count > 0)\n    var\
    \ max = l[0]\n    for i in 1..<l.count {\n        if l[i] > max {\n          \
    \  max = l[i]\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l: [5, 3, -5,\
    \ 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978428
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    var max = l[0]\n    for val\
    \ in l {\n        if val > max {\n            max = val\n        }\n    }\n  \
    \  return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(max_element(l: [1,\
    \ 2, 3]) == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10])\
    \ == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978427
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    var max = l[0]\n    for item\
    \ in l {\n        if item > max {\n            max = item\n        }\n    }\n\
    \    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(max_element(l: [1,\
    \ 2, 3]) == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10])\
    \ == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978428
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    var max = l[0]\n    for e in\
    \ l {\n        if e > max {\n            max = e\n        }\n    }\n    return\
    \ max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(max_element(l: [1, 2, 3])\
    \ == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978427
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    if l.count == 0 {\n        return\
    \ 0\n    }\n    var max = l[0]\n    for i in l {\n        if i > max {\n     \
    \       max = i\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l: [5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978428
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    var max = l[0]\n    for i in\
    \ l {\n        if i > max {\n            max = i\n        }\n    }\n    return\
    \ max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(max_element(l: [1, 2, 3])\
    \ == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978427
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    var result = Int.min\n    for\
    \ item in l {\n        if item > result {\n            result = item\n       \
    \ }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(max_element(l:\
    \ [1, 2, 3]) == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10])\
    \ == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978428
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    var max = l[0]\n    for i in\
    \ 1..<l.count {\n        if max < l[i] {\n            max = l[i]\n        }\n\
    \    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(max_element(l:\
    \ [1, 2, 3]) == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10])\
    \ == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978427
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    var max = l[0]\n    for e in\
    \ l {\n        if max < e {\n            max = e\n        }\n    }\n    return\
    \ max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(max_element(l: [1, 2, 3])\
    \ == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978427
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    var max = l[0]\n    for i in\
    \ 1..<l.count {\n        if l[i] > max {\n            max = l[i]\n        }\n\
    \    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(max_element(l:\
    \ [1, 2, 3]) == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10])\
    \ == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978427
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n  var m = l[0]\n  for i in 1..<l.count\
    \ {\n    if m < l[i] {\n      m = l[i]\n    }\n  }\n  return m\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978428
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    var max = l[0]\n    for i in\
    \ 1..<l.count {\n        if max < l[i] {\n            max = l[i]\n        }\n\
    \    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(max_element(l:\
    \ [1, 2, 3]) == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10])\
    \ == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978427
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    guard l.count > 0 else { return\
    \ 0 }\n    var num = l[0]\n    for value in l {\n        if value > num {\n  \
    \          num = value\n        }\n    }\n    return num\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978428
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    var m = l[0]\n    for e in l\
    \ {\n        if e > m {\n            m = e\n        }\n    }\n    return m\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978427
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    guard l.count > 0 else {\n \
    \       print(\"Error: empty list\")\n        return -1\n    }\n    var max =\
    \ l[0]\n    for num in l {\n        if num > max {\n            max = num\n  \
    \      }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(max_element(l:\
    \ [1, 2, 3]) == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10])\
    \ == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978428
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    return l.reduce(Int.min, max)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978427
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    var max = l[0]\n    for e in\
    \ l {\n        if e > max {\n            max = e\n        }\n    }\n    return\
    \ max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(max_element(l: [1, 2, 3])\
    \ == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978427
- exit_code: 1
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    if l.count == 0 {\n        return\
    \ nil\n    }\n    var maximum = l[0]\n    for i in 1..<l.count {\n        if l[i]\
    \ > maximum {\n            maximum = l[i]\n        }\n    }\n    return maximum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: SyntaxError
  stderr: "/tmp/tmpsf5t7553.swift:9:16: error: 'nil' is incompatible with return type\
    \ 'Int'\n        return nil\n               ^\n"
  stdout: ''
  timestamp: 1659978428
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    var res = l[0]\n    for i in\
    \ l {\n        if res < i {\n            res = i\n        }\n    }\n    return\
    \ res\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(max_element(l: [1, 2, 3])\
    \ == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978428
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    var max = l[0]\n    for el in\
    \ l {\n        if el > max {\n            max = el\n        }\n    }\n    return\
    \ max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(max_element(l: [1, 2, 3])\
    \ == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978428
- exit_code: 1
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    return max_element(l: l, lo:\
    \ 0, hi: l.count - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(max_element(l:\
    \ [1, 2, 3]) == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10])\
    \ == 124)"
  status: SyntaxError
  stderr: "/tmp/tmp7_j5shyc.swift:8:23: error: extra arguments at positions #2, #3\
    \ in call\n    return max_element(l: l, lo: 0, hi: l.count - 1)\n            \
    \          ^\n/tmp/tmp7_j5shyc.swift:7:6: note: 'max_element(l:)' declared here\n\
    func max_element(l: [Int]) -> Int {\n     ^\n"
  stdout: ''
  timestamp: 1659978428
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    var max = l[0]\n    for elem\
    \ in l {\n        if elem > max {\n            max = elem\n        }\n    }\n\
    \    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(max_element(l: [1,\
    \ 2, 3]) == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10])\
    \ == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978428
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    var m = l[0]\n    for e in l\
    \ {\n        if e > m {\n            m = e\n        }\n    }\n    return m\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978427
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n  var max = l[0]\n  for i in 1..<l.count\
    \ {\n    if l[i] > max {\n      max = l[i]\n    }\n  }\n  return max\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978428
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n  var maximum: Int = l[0]\n  for\
    \ i in l {\n    if i > maximum {\n      maximum = i\n    }\n  }\n  return maximum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978428
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    return l.max()!\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978427
- exit_code: 1
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    return l.reduce(l[0], combine:\
    \ {max($0, $1)})\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(max_element(l: [1,\
    \ 2, 3]) == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10])\
    \ == 124)"
  status: SyntaxError
  stderr: "/tmp/tmpoz6m3y_b.swift:8:20: error: extraneous argument label 'combine:'\
    \ in call\n    return l.reduce(l[0], combine: {max($0, $1)})\n               \
    \    ^      ~~~~~~~~~\n                          \n"
  stdout: ''
  timestamp: 1659978428
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    return l.reduce(Int.min, {$0\
    \ > $1 ? $0 : $1})\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(max_element(l: [1,\
    \ 2, 3]) == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10])\
    \ == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978428
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    var max_value = l[0]\n    for\
    \ i in 1..<l.count {\n        if l[i] > max_value {\n            max_value = l[i]\n\
    \        }\n    }\n    return max_value\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l: [5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10]) == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978428
- exit_code: 1
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    return max_element(l: l, start:\
    \ 0, end: l.count - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(max_element(l:\
    \ [1, 2, 3]) == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10])\
    \ == 124)"
  status: SyntaxError
  stderr: "/tmp/tmpvb1lhfef.swift:8:23: error: extra arguments at positions #2, #3\
    \ in call\n    return max_element(l: l, start: 0, end: l.count - 1)\n        \
    \              ^\n/tmp/tmpvb1lhfef.swift:7:6: note: 'max_element(l:)' declared\
    \ here\nfunc max_element(l: [Int]) -> Int {\n     ^\n"
  stdout: ''
  timestamp: 1659978428
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    var max = l[0]\n    for i in\
    \ l {\n        if i > max {\n            max = i\n        }\n    }\n    return\
    \ max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(max_element(l: [1, 2, 3])\
    \ == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978427
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    return l.max()!\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978427
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    var max = l[0]\n    for i in\
    \ l {\n        if max < i {\n            max = i\n        }\n    }\n    return\
    \ max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(max_element(l: [1, 2, 3])\
    \ == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978428
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    var max: Int = l[0]\n    for\
    \ n in l {\n        if max < n {\n            max = n\n        }\n    }\n    return\
    \ max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(max_element(l: [1, 2, 3])\
    \ == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978428
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    var result = l[0]\n    for i\
    \ in 1..<l.count {\n        if l[i] > result {\n            result = l[i]\n  \
    \      }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l: [5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10]) == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978428
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    return l.max()!\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978427
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    var max = Int.min\n    for i\
    \ in l {\n        if i > max {\n            max = i\n        }\n    }\n    return\
    \ max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(max_element(l: [1, 2, 3])\
    \ == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978428
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    if l.count == 0 {\n        print(\"\
    The array is empty\")\n        return 0\n    }\n    var max_elem = l[0]\n    for\
    \ elem in l {\n        if elem > max_elem {\n            max_elem = elem\n   \
    \     }\n    }\n    return max_elem\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l: [5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10]) == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978428
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    return l.reduce(l[0], { max($0,\
    \ $1) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(max_element(l: [1, 2,\
    \ 3]) == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) ==\
    \ 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978427
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    if let f = l.first {\n     \
    \   return l.reduce(f) { $0 > $1 ? $0 : $1 }\n    }\n    return 0\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978428
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    var max = l[0]\n    for i in\
    \ l {\n        if i > max {\n            max = i\n        }\n    }\n    return\
    \ max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(max_element(l: [1, 2, 3])\
    \ == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978427
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    var max = l[0]\n    for i in\
    \ 1..<l.count {\n        if l[i] > max {\n            max = l[i]\n        }\n\
    \    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(max_element(l:\
    \ [1, 2, 3]) == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10])\
    \ == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978427
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    var max: Int = l[0]\n    for\
    \ i in 1..<l.count {\n        if l[i] > max {\n            max = l[i]\n      \
    \  }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(max_element(l:\
    \ [1, 2, 3]) == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10])\
    \ == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978427
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    var max = l[0]\n    for i in\
    \ 1..<l.count {\n        if l[i] > max {\n            max = l[i]\n        }\n\
    \    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(max_element(l:\
    \ [1, 2, 3]) == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10])\
    \ == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978427
- exit_code: 1
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    return reduce(l, l[0], { max($0,\
    \ $1) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(max_element(l: [1, 2,\
    \ 3]) == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) ==\
    \ 124)"
  status: SyntaxError
  stderr: "/tmp/tmphrbi9tp2.swift:8:12: error: cannot find 'reduce' in scope\n   \
    \ return reduce(l, l[0], { max($0, $1) })\n           ^~~~~~\n"
  stdout: ''
  timestamp: 1659978428
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    var maxValue = l[0]\n    for\
    \ i in 1..<l.count {\n        if maxValue < l[i] {\n            maxValue = l[i]\n\
    \        }\n    }\n    return maxValue\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l: [5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10]) == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978428
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n  if l.count == 0 {\n    return\
    \ Int.min\n  }\n\n  return l.reduce(Int.min) { (x, y) in\n    max(x, y)\n  }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978428
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    var max = l[0]\n    for i in\
    \ l {\n        if i > max {\n            max = i\n        }\n    }\n    return\
    \ max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(max_element(l: [1, 2, 3])\
    \ == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978427
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    if l.count == 0 {\n        return\
    \ 0\n    }\n    var m = l[0]\n    for i in l {\n        if i > m {\n         \
    \   m = i\n        }\n    }\n    return m\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l: [5, 3, -5,\
    \ 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978428
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    var m = Int.min\n    for x in\
    \ l {\n        if x > m {\n            m = x\n        }\n    }\n    return m\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978428
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    if l.count < 1 {\n        return\
    \ 0\n    }\n    var max = l[0]\n    for i in 1..<l.count {\n        if l[i] >\
    \ max {\n            max = l[i]\n        }\n    }\n    return max\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978428
- exit_code: 1
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    return max(l, by: { $0 < $1\
    \ }) ?? 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(max_element(l: [1, 2,\
    \ 3]) == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) ==\
    \ 124)"
  status: SyntaxError
  stderr: "/tmp/tmp6r6x0mtx.swift:8:39: error: cannot convert value of type 'Int'\
    \ to expected argument type '(((), ()) -> Bool)?'\n    return max(l, by: { $0\
    \ < $1 }) ?? 0\n                                      ^\n/tmp/tmp6r6x0mtx.swift:8:36:\
    \ error: no '??' candidates produce the expected contextual result type 'Int'\n\
    \    return max(l, by: { $0 < $1 }) ?? 0\n                                   ^\n\
    Swift.??:1:13: note: '??' produces '(((), ()) -> Bool)?', not the expected contextual\
    \ result type 'Int'\npublic func ?? <T>(optional: T?, defaultValue: @autoclosure\
    \ () throws -> T?) rethrows -> T?\n            ^\nSwift.??:1:13: note: '??' produces\
    \ '((Character, Character) -> Bool)?', not the expected contextual result type\
    \ 'Int'\npublic func ?? <T>(optional: T?, defaultValue: @autoclosure () throws\
    \ -> T?) rethrows -> T?\n            ^\nSwift.??:1:13: note: '??' produces '((AnyIndex,\
    \ AnyIndex) -> Bool)?', not the expected contextual result type 'Int'\npublic\
    \ func ?? <T>(optional: T?, defaultValue: @autoclosure () throws -> T?) rethrows\
    \ -> T?\n            ^\nSwift.??:1:13: note: '??' produces '((Unicode.Scalar,\
    \ Unicode.Scalar) -> Bool)?', not the expected contextual result type 'Int'\n\
    public func ?? <T>(optional: T?, defaultValue: @autoclosure () throws -> T?) rethrows\
    \ -> T?\n            ^\nSwift.??:1:13: note: '??' produces '((ObjectIdentifier,\
    \ ObjectIdentifier) -> Bool)?', not the expected contextual result type 'Int'\n\
    public func ?? <T>(optional: T?, defaultValue: @autoclosure () throws -> T?) rethrows\
    \ -> T?\n            ^\nSwift.??:1:13: note: '??' produces '((Never, Never) ->\
    \ Bool)?', not the expected contextual result type 'Int'\npublic func ?? <T>(optional:\
    \ T?, defaultValue: @autoclosure () throws -> T?) rethrows -> T?\n           \
    \ ^\nSwift.??:1:13: note: '??' produces '((String, String) -> Bool)?', not the\
    \ expected contextual result type 'Int'\npublic func ?? <T>(optional: T?, defaultValue:\
    \ @autoclosure () throws -> T?) rethrows -> T?\n            ^\nSwift.??:1:13:\
    \ note: '??' produces '((String.Index, String.Index) -> Bool)?', not the expected\
    \ contextual"
  stdout: ''
  timestamp: 1659978428
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    var m: Int = l[0]\n    for i\
    \ in l {\n        if i > m {\n            m = i\n        }\n    }\n    return\
    \ m\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(max_element(l: [1, 2, 3]) ==\
    \ 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978428
- exit_code: -4
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    return 0\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: Exception
  stderr: 'tmpy24jusi6/tmpy24jusi6.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b99b3817c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b99b350eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b99b350e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b99b350d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy24jusi6                        0x0000555a4866b2ff <unavailable> + 4863

    5    libc.so.6                          0x00002b99b3a03460 __libc_start_main +
    245

    6    tmpy24jusi6                        0x0000555a4866af69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659978427
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    var max = l[0]\n    for n in\
    \ l {\n        if n > max {\n            max = n\n        }\n    }\n    return\
    \ max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(max_element(l: [1, 2, 3])\
    \ == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978428
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    return l.max()!\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978427
- exit_code: 1
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    return reduce(l, l[0], {max($0,\
    \ $1)})\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(max_element(l: [1, 2, 3])\
    \ == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: SyntaxError
  stderr: "/tmp/tmpk_a3jen7.swift:8:12: error: cannot find 'reduce' in scope\n   \
    \ return reduce(l, l[0], {max($0, $1)})\n           ^~~~~~\n"
  stdout: ''
  timestamp: 1659978427
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    var res = l[0]\n    for element\
    \ in l {\n        if res < element {\n            res = element\n        }\n \
    \   }\n    return res\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(max_element(l:\
    \ [1, 2, 3]) == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10])\
    \ == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978428
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    var maxElement = l[0]\n    for\
    \ i in l {\n        if maxElement < i {\n            maxElement = i\n        }\n\
    \    }\n    return maxElement\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(max_element(l:\
    \ [1, 2, 3]) == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10])\
    \ == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978428
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    if (l.count == 0) {\n      \
    \  return 0\n    }\n    var max = l[0]\n    for e in l {\n        if (e > max)\
    \ {\n            max = e\n        }\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978428
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    var max = l[0]\n    for i in\
    \ 1..<l.count {\n        if l[i] > max {\n            max = l[i]\n        }\n\
    \    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(max_element(l:\
    \ [1, 2, 3]) == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10])\
    \ == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978427
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    var arr = l\n    var max: Int\
    \ = arr[0]\n    var i: Int = 0\n    while i < arr.count {\n        if arr[i] >\
    \ max {\n            max = arr[i]\n        }\n        i += 1\n    }\n    return\
    \ max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(max_element(l: [1, 2, 3])\
    \ == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978428
- exit_code: 1
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    return l.reduce(l[0], combine:\
    \ {max($0, $1)})\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(max_element(l: [1,\
    \ 2, 3]) == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10])\
    \ == 124)"
  status: SyntaxError
  stderr: "/tmp/tmpoz6m3y_b.swift:8:20: error: extraneous argument label 'combine:'\
    \ in call\n    return l.reduce(l[0], combine: {max($0, $1)})\n               \
    \    ^      ~~~~~~~~~\n                          \n"
  stdout: ''
  timestamp: 1659978428
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    if l.count == 0 {\n        return\
    \ Int.min\n    }\n    var largest = l[0]\n    for i in l {\n        if i > largest\
    \ {\n            largest = i\n        }\n    }\n    return largest\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978428
