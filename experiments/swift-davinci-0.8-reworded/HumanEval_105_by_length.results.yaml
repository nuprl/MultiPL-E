language: swift
name: HumanEval_105_by_length
results:
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    var nums = [Int]()\n\
    \    for n in arr {\n        if n > 0 && n < 10 {\n            nums.append(n)\n\
    \        }\n    }\n    nums.sort()\n    var result = [String]()\n    var numss\
    \ = nums.reversed()\n    for n in numss {\n        if n == 1 {\n            result.append(\"\
    One\")\n        } else if n == 2 {\n            result.append(\"Two\")\n     \
    \   } else if n == 3 {\n            result.append(\"Three\")\n        } else if\
    \ n == 4 {\n            result.append(\"Four\")\n        } else if n == 5 {\n\
    \            result.append(\"Five\")\n        } else if n == 6 {\n           \
    \ result.append(\"Six\")\n        } else if n == 7 {\n            result.append(\"\
    Seven\")\n        } else if n == 8 {\n            result.append(\"Eight\")\n \
    \       } else if n == 9 {\n            result.append(\"Nine\")\n        }\n \
    \   }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014071
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    return arr.filter({$0\
    \ >= 1 && $0 <= 9}).sorted().reversed().map({String($0)})\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmp4ycayqf1/tmp4ycayqf1.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b089838ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0898081b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0898081988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b08980807b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4ycayqf1                        0x000055b4a02d99d1 <unavailable> + 6609

    5    libc.so.6                          0x00002b0898576460 __libc_start_main +
    245

    6    tmp4ycayqf1                        0x000055b4a02d9479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660014071
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    var result: [String]\
    \ = []\n    var nums: [Int] = []\n    for el in arr {\n        if el > 0 && el\
    \ < 10 {\n            nums.append(el)\n        }\n    }\n    nums.sort()\n   \
    \ nums.reverse()\n    for el in nums {\n        switch el {\n        case 1:\n\
    \            result.append(\"One\")\n        case 2:\n            result.append(\"\
    Two\")\n        case 3:\n            result.append(\"Three\")\n        case 4:\n\
    \            result.append(\"Four\")\n        case 5:\n            result.append(\"\
    Five\")\n        case 6:\n            result.append(\"Six\")\n        case 7:\n\
    \            result.append(\"Seven\")\n        case 8:\n            result.append(\"\
    Eight\")\n        case 9:\n            result.append(\"Nine\")\n        default:\n\
    \            print(\"\")\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014071
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    return arr.filter\
    \ { $0 > 0 && $0 < 10 }.sorted().reversed().map { Array([\"One\", \"Two\", \"\
    Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"])[$0 - 1]\
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5,\
    \ 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"\
    One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr:\
    \ [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\"\
    , \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014071
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let filtered = arr.filter({$0\
    \ >= 1 && $0 <= 9})\n    let sorted = filtered.sorted()\n    let reversed = sorted.reversed()\n\
    \    return reversed.map({\n        switch $0 {\n        case 1:\n           \
    \ return \"One\"\n        case 2:\n            return \"Two\"\n        case 3:\n\
    \            return \"Three\"\n        case 4:\n            return \"Four\"\n\
    \        case 5:\n            return \"Five\"\n        case 6:\n            return\
    \ \"Six\"\n        case 7:\n            return \"Seven\"\n        case 8:\n  \
    \          return \"Eight\"\n        case 9:\n            return \"Nine\"\n  \
    \      default:\n            return \"\"\n        }\n    })\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014071
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    return []\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: Exception
  stderr: 'tmpl4uzplmu/tmpl4uzplmu.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b98fac9fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b98fa996b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b98fa996988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b98fa9957b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpl4uzplmu                        0x0000555967468621 <unavailable> + 5665

    5    libc.so.6                          0x00002b98fae8b460 __libc_start_main +
    245

    6    tmpl4uzplmu                        0x00005559674680c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1660013892
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    var sortedArr = arr.filter\
    \ { $0 >= 1 && $0 <= 9 }.sorted()\n    sortedArr.reverse()\n    return sortedArr.map\
    \ { \"\\($0)\" }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(by_length(arr: [2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmppyuoxxl4/tmppyuoxxl4.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6f963b3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6f960aab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6f960aa988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6f960a97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppyuoxxl4                        0x00005645cf969b71 <unavailable> + 7025

    5    libc.so.6                          0x00002b6f9659f460 __libc_start_main +
    245

    6    tmppyuoxxl4                        0x00005645cf969619 <unavailable> + 5657

    '
  stdout: ''
  timestamp: 1660014071
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    return arr.filter\
    \ { $0 > 0 && $0 < 10 }.sorted().reversed().map { map_number(number: $0) }\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmp01he3xfr.swift:15:71: error: cannot find 'map_number' in scope\n\
    \    return arr.filter { $0 > 0 && $0 < 10 }.sorted().reversed().map { map_number(number:\
    \ $0) }\n                                                                    \
    \  ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014071
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    var newArr = arr.filter\
    \ { (x) -> Bool in\n        return x > 0 && x < 10\n    }\n    newArr.sort()\n\
    \    newArr.reverse()\n    return newArr.map { (x) -> String in\n        switch\
    \ x {\n        case 1:\n            return \"One\"\n        case 2:\n        \
    \    return \"Two\"\n        case 3:\n            return \"Three\"\n        case\
    \ 4:\n            return \"Four\"\n        case 5:\n            return \"Five\"\
    \n        case 6:\n            return \"Six\"\n        case 7:\n            return\
    \ \"Seven\"\n        case 8:\n            return \"Eight\"\n        case 9:\n\
    \            return \"Nine\"\n        default:\n            return \"\"\n    \
    \    }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(by_length(arr: [2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014071
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    var digits = [String]()\n\
    \    let numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    arr.forEach { (num) in\n \
    \       guard numbers.contains(num) else { return }\n        let text = String(num)\n\
    \        let digit = text.digit()\n        digits.append(digit)\n    }\n    digits.sort()\n\
    \    digits.reverse()\n    return digits\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as\
    \ [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"])\n\
    assert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpgz6bv6e_.swift:20:26: error: value of type 'String' has no member\
    \ 'digit'\n        let digit = text.digit()\n                    ~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1660014071
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    return arr.filter\
    \ { $0 > 0 && $0 < 10 }.sorted(by: >).map { digits[$0 - 1] }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpxih41e1o.swift:15:65: error: cannot find 'digits' in scope\n  \
    \  return arr.filter { $0 > 0 && $0 < 10 }.sorted(by: >).map { digits[$0 - 1]\
    \ }\n                                                                ^~~~~~\n"
  stdout: ''
  timestamp: 1660014071
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    return sort_array(arr:\
    \ arr).reversed().map { to_name(digit: $0) }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmp7xkccqa4.swift:15:12: error: cannot find 'sort_array' in scope\n\
    \    return sort_array(arr: arr).reversed().map { to_name(digit: $0) }\n     \
    \      ^~~~~~~~~~\n/tmp/tmp7xkccqa4.swift:15:50: error: cannot find 'to_name'\
    \ in scope\n    return sort_array(arr: arr).reversed().map { to_name(digit: $0)\
    \ }\n                                                 ^~~~~~~\n"
  stdout: ''
  timestamp: 1660014071
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    if !arr.isEmpty {\n\
    \        let validArray = arr.filter({ $0 > 0 && $0 < 10})\n        let reverse\
    \ = validArray.reversed()\n        let dict = [1: \"One\", 2: \"Two\", 3: \"Three\"\
    , 4: \"Four\", 5: \"Five\", 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"\
    ]\n        return reverse.map { dict[$0]! }\n    }\n    return []\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: Exception
  stderr: 'tmpl71df8lk/tmpl71df8lk.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b91be2abc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b91bdfa2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b91bdfa2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b91bdfa17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpl71df8lk                        0x000055669e8f4a91 <unavailable> + 6801

    5    libc.so.6                          0x00002b91be497460 __libc_start_main +
    245

    6    tmpl71df8lk                        0x000055669e8f4539 <unavailable> + 5433

    '
  stdout: ''
  timestamp: 1660014071
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    return arr.filter\
    \ { $0 >= 1 && $0 <= 9 }.sorted().reversed().map { String($0) }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmpiv6mfkm0/tmpiv6mfkm0.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aef5d826c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aef5d51db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aef5d51d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aef5d51c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpiv6mfkm0                        0x000055b6c749e9d1 <unavailable> + 6609

    5    libc.so.6                          0x00002aef5da12460 __libc_start_main +
    245

    6    tmpiv6mfkm0                        0x000055b6c749e479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660013893
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n  let sorted_array =\
    \ arr.filter({$0 <= 9 && $0 >= 1}).sorted().reversed()\n  let final_array = sorted_array.map\
    \ { (number) -> String in\n    switch number {\n    case 1:\n      return \"One\"\
    \n    case 2:\n      return \"Two\"\n    case 3:\n      return \"Three\"\n   \
    \ case 4:\n      return \"Four\"\n    case 5:\n      return \"Five\"\n    case\
    \ 6:\n      return \"Six\"\n    case 7:\n      return \"Seven\"\n    case 8:\n\
    \      return \"Eight\"\n    case 9:\n      return \"Nine\"\n    default:\n  \
    \    return \"\"\n    }\n  }\n  return final_array\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014071
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    var output = [String]()\n\
    \    let letters = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\",\
    \ \"Seven\", \"Eight\", \"Nine\"]\n    var filtered = arr.filter{ $0 < 10 && $0\
    \ > 0}\n    filtered.sort()\n    for i in filtered.reversed() {\n        output.append(letters[i\
    \ - 1])\n    }\n    return output\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014071
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    if arr.isEmpty {\n\
    \        return []\n    }\n    let sortedArr = arr.filter { $0 >= 1 && $0 <= 9\
    \ }.sorted()\n    return sortedArr.reversed().map { \"\\($0)\".capitalized }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpxlsvb8nk.swift:19:47: error: value of type 'String' has no member\
    \ 'capitalized'\n    return sortedArr.reversed().map { \"\\($0)\".capitalized\
    \ }\n                                      ~~~~~~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014071
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let nums = arr.filter({$0\
    \ > 0 && $0 < 10})\n    let sorted = nums.sorted()\n    let inversed = sorted.reversed()\n\
    \    return inversed.map {\n        switch $0 {\n        case 1:\n           \
    \ return \"One\"\n        case 2:\n            return \"Two\"\n        case 3:\n\
    \            return \"Three\"\n        case 4:\n            return \"Four\"\n\
    \        case 5:\n            return \"Five\"\n        case 6:\n            return\
    \ \"Six\"\n        case 7:\n            return \"Seven\"\n        case 8:\n  \
    \          return \"Eight\"\n        case 9:\n            return \"Nine\"\n  \
    \      default:\n            return \"\"\n        }\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014071
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n  return []\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: Exception
  stderr: 'tmpqu3zd3sc/tmpqu3zd3sc.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4f0e5fbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4f0e2f2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4f0e2f2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4f0e2f17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqu3zd3sc                        0x000055aa76b3a621 <unavailable> + 5665

    5    libc.so.6                          0x00002b4f0e7e7460 __libc_start_main +
    245

    6    tmpqu3zd3sc                        0x000055aa76b3a0c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1660014071
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    var result: [String]\
    \ = []\n    var validNumbers: [Int] = []\n    var dictionary: [Int: String] =\
    \ [:]\n    dictionary[1] = \"One\"\n    dictionary[2] = \"Two\"\n    dictionary[3]\
    \ = \"Three\"\n    dictionary[4] = \"Four\"\n    dictionary[5] = \"Five\"\n  \
    \  dictionary[6] = \"Six\"\n    dictionary[7] = \"Seven\"\n    dictionary[8] =\
    \ \"Eight\"\n    dictionary[9] = \"Nine\"\n    \n    for number in arr {\n   \
    \     if (number > 0 && number < 10) {\n            validNumbers.append(number)\n\
    \        }\n    }\n    \n    validNumbers.sort()\n    validNumbers.reverse()\n\
    \    \n    for number in validNumbers {\n        result.append(dictionary[number]!)\n\
    \    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014071
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let words = [\"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    ]\n    return arr.filter({ $0 > 0 && $0 < 10 }).sorted().reversed().map({ words[$0\
    \ - 1] })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(by_length(arr: [2, 1,\
    \ 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014071
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    \n    return arr.filter({\
    \ $0 >= 1 && $0 <= 9 }).sorted(by: >).map({ String($0) })\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmp6uuszx_s/tmp6uuszx_s.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abd30f96c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abd30c8db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abd30c8d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abd30c8c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6uuszx_s                        0x00005594aa0dd8d1 <unavailable> + 6353

    5    libc.so.6                          0x00002abd31182460 __libc_start_main +
    245

    6    tmp6uuszx_s                        0x00005594aa0dd379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660014071
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    // Write your code\
    \ below this line\n    let validNumbers = arr.filter{ (num) -> Bool in\n     \
    \   num >= 1 && num <= 9\n    }\n    let sortedNumbers = validNumbers.sorted()\n\
    \    var numberNames = [String]()\n    for number in sortedNumbers {\n       \
    \ switch number {\n        case 1:\n            numberNames.append(\"One\")\n\
    \        case 2:\n            numberNames.append(\"Two\")\n        case 3:\n \
    \           numberNames.append(\"Three\")\n        case 4:\n            numberNames.append(\"\
    Four\")\n        case 5:\n            numberNames.append(\"Five\")\n        case\
    \ 6:\n            numberNames.append(\"Six\")\n        case 7:\n            numberNames.append(\"\
    Seven\")\n        case 8:\n            numberNames.append(\"Eight\")\n       \
    \ case 9:\n            numberNames.append(\"Nine\")\n        default:\n      \
    \      print(\"Error\")\n        }\n    }\n    return numberNames.reversed()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014071
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter({$0\
    \ >= 1 && $0 <= 9}).sorted().reversed()\n    return sorted.map({numberToString(number:\
    \ $0)})\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(by_length(arr: [2, 1, 1,\
    \ 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpwet121lu.swift:16:24: error: cannot find 'numberToString' in scope\n\
    \    return sorted.map({numberToString(number: $0)})\n                       ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014071
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let valid = arr.filter({\
    \ $0 > 0 && $0 < 10 })\n    let names = valid.sorted().reversed().map({ switch\
    \ $0 {\n        case 1: return \"One\"\n        case 2: return \"Two\"\n     \
    \   case 3: return \"Three\"\n        case 4: return \"Four\"\n        case 5:\
    \ return \"Five\"\n        case 6: return \"Six\"\n        case 7: return \"Seven\"\
    \n        case 8: return \"Eight\"\n        case 9: return \"Nine\"\n        default:\
    \ fatalError()\n    }})\n    return names\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014071
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n  // your code here\n\
    \  return []\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(by_length(arr: [2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmpepd5bswf/tmpepd5bswf.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2abf8a3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2abf59ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2abf59a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2abf5997b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpepd5bswf                        0x000055b294884621 <unavailable> + 5665

    5    libc.so.6                          0x00002b2abfa8f460 __libc_start_main +
    245

    6    tmpepd5bswf                        0x000055b2948840c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1660014071
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    return []\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: Exception
  stderr: 'tmpl4uzplmu/tmpl4uzplmu.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b98fac9fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b98fa996b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b98fa996988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b98fa9957b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpl4uzplmu                        0x0000555967468621 <unavailable> + 5665

    5    libc.so.6                          0x00002b98fae8b460 __libc_start_main +
    245

    6    tmpl4uzplmu                        0x00005559674680c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1660013892
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    // write your code\
    \ here\n    var numberNames: [String] = []\n    let numberToName = [1: \"One\"\
    , 2: \"Two\", 3: \"Three\", 4: \"Four\", 5: \"Five\", 6: \"Six\", 7: \"Seven\"\
    , 8: \"Eight\", 9: \"Nine\"]\n    var result: [String] = []\n    for value in\
    \ arr {\n        if value >= 1 && value <= 9 {\n            numberNames.append(numberToName[value]!)\n\
    \        }\n    }\n    numberNames.sort(by: <)\n    for value in numberNames.reversed()\
    \ {\n        result.append(value)\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmphnyugpm_/tmphnyugpm_.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba8840ebc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba883de2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba883de2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba883de17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphnyugpm_                        0x000055bd158c4c51 <unavailable> + 7249

    5    libc.so.6                          0x00002ba8842d7460 __libc_start_main +
    245

    6    tmphnyugpm_                        0x000055bd158c46f9 <unavailable> + 5881

    '
  stdout: ''
  timestamp: 1660014071
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter({$0\
    \ >= 1 && $0 <= 9}).sorted(by: {$0 < $1})\n    return sorted.map({String($0)})\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: Exception
  stderr: 'tmpnpwtixed/tmpnpwtixed.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b26b838cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b26b8083b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b26b8083988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b26b80827b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnpwtixed                        0x00005577ecf398d1 <unavailable> + 6353

    5    libc.so.6                          0x00002b26b8578460 __libc_start_main +
    245

    6    tmpnpwtixed                        0x00005577ecf39379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660014071
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    return []\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: Exception
  stderr: 'tmpl4uzplmu/tmpl4uzplmu.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b98fac9fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b98fa996b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b98fa996988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b98fa9957b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpl4uzplmu                        0x0000555967468621 <unavailable> + 5665

    5    libc.so.6                          0x00002b98fae8b460 __libc_start_main +
    245

    6    tmpl4uzplmu                        0x00005559674680c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1660013892
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter\
    \ { $0 > 0 && $0 < 10 }.sorted(by: <)\n    let reversed = sorted.reversed()\n\
    \    return reversed.map { String($0) }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as\
    \ [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"])\n\
    assert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmpmex4rf57/tmpmex4rf57.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba5393afc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba5390a6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba5390a6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba5390a57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmex4rf57                        0x000055c6098e19a1 <unavailable> + 6561

    5    libc.so.6                          0x00002ba53959b460 __libc_start_main +
    245

    6    tmpmex4rf57                        0x000055c6098e1449 <unavailable> + 5193

    '
  stdout: ''
  timestamp: 1660014071
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    // write your code\
    \ here\n    return []\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmpj87543e_/tmpj87543e_.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeab2cc0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeab29b7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeab29b7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeab29b67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj87543e_                        0x000055c304b70621 <unavailable> + 5665

    5    libc.so.6                          0x00002aeab2eac460 __libc_start_main +
    245

    6    tmpj87543e_                        0x000055c304b700c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1660014071
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n  var newArr: [String]\
    \ = []\n  let nums = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n  let names = [\"One\", \"Two\"\
    , \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n  for\
    \ num in arr {\n    if nums.contains(num) {\n      newArr.append(names[nums.index(of:\
    \ num)!])\n    }\n  }\n  newArr.sort()\n  newArr.reverse()\n  return newArr\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: Exception
  stderr: 'tmpy6ako4lc/tmpy6ako4lc.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1e877afc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1e874a6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1e874a6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1e874a57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy6ako4lc                        0x000055dfd5c07b61 <unavailable> + 7009

    5    libc.so.6                          0x00002b1e8799b460 __libc_start_main +
    245

    6    tmpy6ako4lc                        0x000055dfd5c07609 <unavailable> + 5641

    '
  stdout: ''
  timestamp: 1660014071
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    return arr.filter({$0\
    \ >= 1 && $0 <= 9}).sorted().reversed().map({num in\n        switch num {\n  \
    \      case 1:\n            return \"One\"\n        case 2:\n            return\
    \ \"Two\"\n        case 3:\n            return \"Three\"\n        case 4:\n  \
    \          return \"Four\"\n        case 5:\n            return \"Five\"\n   \
    \     case 6:\n            return \"Six\"\n        case 7:\n            return\
    \ \"Seven\"\n        case 8:\n            return \"Eight\"\n        case 9:\n\
    \            return \"Nine\"\n        default:\n            return \"\"\n    \
    \    }\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(by_length(arr: [2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014071
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let numbers = [1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9]\n    let names = [\"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    let result = arr.filter\
    \ { numbers.contains($0) }.sorted()\n    return result.reversed().map { names[numbers.firstIndex(of:\
    \ $0)!] }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(by_length(arr: [2, 1,\
    \ 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014071
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    var result = arr.filter({\
    \ $0 > 0 && $0 < 10 })\n    result.sort()\n    result.reverse()\n    return result.map({\n\
    \        switch $0 {\n        case 1: return \"One\"\n        case 2: return \"\
    Two\"\n        case 3: return \"Three\"\n        case 4: return \"Four\"\n   \
    \     case 5: return \"Five\"\n        case 6: return \"Six\"\n        case 7:\
    \ return \"Seven\"\n        case 8: return \"Eight\"\n        case 9: return \"\
    Nine\"\n        default: return \"\"\n        }\n    })\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014071
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n  var result = [String]()\n\
    \  let digitCount = 9\n  var digitCounts = [Int](repeating: 0, count: digitCount\
    \ + 1)\n  var seen = [Bool](repeating: false, count: digitCount + 1)\n  for i\
    \ in arr {\n    if i >= 1 && i <= digitCount {\n      digitCounts[i] += 1\n  \
    \    seen[i] = true\n    }\n  }\n  for i in 1...digitCount {\n    if seen[i] {\n\
    \      for _ in 0..<digitCounts[i] {\n        result.append(numberToString(i))\n\
    \      }\n    }\n  }\n  return result.reversed()\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpmt7cglv5.swift:28:23: error: cannot find 'numberToString' in scope\n\
    \        result.append(numberToString(i))\n                      ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014071
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    var inter = [Int]()\n\
    \    var out = [String]()\n    for i in arr {\n        if i <= 9 && i >= 1 {\n\
    \            inter.append(i)\n        }\n    }\n    inter.sort()\n    for i in\
    \ inter.reversed() {\n        switch i {\n        case 1:\n            out.append(\"\
    One\")\n        case 2:\n            out.append(\"Two\")\n        case 3:\n  \
    \          out.append(\"Three\")\n        case 4:\n            out.append(\"Four\"\
    )\n        case 5:\n            out.append(\"Five\")\n        case 6:\n      \
    \      out.append(\"Six\")\n        case 7:\n            out.append(\"Seven\"\
    )\n        case 8:\n            out.append(\"Eight\")\n        case 9:\n     \
    \       out.append(\"Nine\")\n        default:\n            break\n        }\n\
    \    }\n    return out\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014071
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    return arr.filter\
    \ {$0 > 0 && $0 < 10}\n        .sorted()\n        .reversed()\n        .map {\
    \ num in\n            switch num {\n            case 1: return \"One\"\n     \
    \       case 2: return \"Two\"\n            case 3: return \"Three\"\n       \
    \     case 4: return \"Four\"\n            case 5: return \"Five\"\n         \
    \   case 6: return \"Six\"\n            case 7: return \"Seven\"\n           \
    \ case 8: return \"Eight\"\n            case 9: return \"Nine\"\n            default:\
    \ return \"\"\n            }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as\
    \ [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"])\n\
    assert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014071
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let names = [\"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    ]\n    return arr.filter({ $0 >= 1 && $0 <= 9 }).sorted().reversed().map({ names[$0\
    \ - 1] })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(by_length(arr: [2, 1,\
    \ 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014071
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    // your code here\n\
    \    return []\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(by_length(arr: [2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmpluoqkt6k/tmpluoqkt6k.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba0fda83c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba0fd77ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba0fd77a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba0fd7797b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpluoqkt6k                        0x0000556384fd6621 <unavailable> + 5665

    5    libc.so.6                          0x00002ba0fdc6f460 __libc_start_main +
    245

    6    tmpluoqkt6k                        0x0000556384fd60c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1660013893
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let invalidRange\
    \ = Set(1...9)\n    let strArray = arr.filter { invalidRange.contains($0) }.sorted(by:\
    \ >).map { \"\\($0)\" }\n    return strArray\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmpmi71woa9/tmpmi71woa9.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b721f10bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b721ee02b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b721ee02988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b721ee017b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmi71woa9                        0x0000563b49b94c31 <unavailable> + 7217

    5    libc.so.6                          0x00002b721f2f7460 __libc_start_main +
    245

    6    tmpmi71woa9                        0x0000563b49b946d9 <unavailable> + 5849

    '
  stdout: ''
  timestamp: 1660014071
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    return \"\"\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpirmamaqf.swift:15:12: error: cannot convert return expression of\
    \ type 'String' to return type '[String]'\n    return \"\"\n           ^~\n"
  stdout: ''
  timestamp: 1660014071
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    // Write your code\
    \ here.\n    let num_array = arr.filter { $0 <= 9 && $0 >= 1 }\n    return [\"\
    One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\",\
    \ \"Nine\"]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(by_length(arr: [2, 1,\
    \ 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmp7chynz6p/tmp7chynz6p.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8887520c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8887217b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8887217988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b88872167b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7chynz6p                        0x000055f1eedba6e1 <unavailable> + 5857

    5    libc.so.6                          0x00002b888770c460 __libc_start_main +
    245

    6    tmp7chynz6p                        0x000055f1eedba189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660014071
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let N = [\"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    ]\n    let sorted = arr.filter({ $0 > 0 && $0 < 10 }).sorted()\n    return sorted.reversed().map\
    \ { N[$0 - 1] }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(by_length(arr: [2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014071
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let results = arr.filter\
    \ { (number) -> Bool in\n        return number <= 9 && number >= 1\n    }.sorted().reversed().map\
    \ { (number) -> String in\n        return number.toString()\n    }\n    return\
    \ results\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(by_length(arr: [2, 1,\
    \ 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmprno209_8.swift:18:23: error: value of type 'ReversedCollection<[Int]>.Element'\
    \ (aka 'Int') has no member 'toString'\n        return number.toString()\n   \
    \            ~~~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660014071
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    // FIXME: Implement\
    \ me!\n    return []\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmprq_rje4s/tmprq_rje4s.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b74e18e2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b74e15d9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b74e15d9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b74e15d87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprq_rje4s                        0x0000558438489621 <unavailable> + 5665

    5    libc.so.6                          0x00002b74e1ace460 __libc_start_main +
    245

    6    tmprq_rje4s                        0x00005584384890c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1660014071
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    if arr.isEmpty {\n\
    \        return []\n    }\n    let sorted = arr.filter { $0 <= 9 && $0 >= 1 }.sorted()\n\
    \    return sorted.map { String(describing: Numeral.init(number: $0)) }.reversed()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmps3cd2m9c.swift:19:44: error: cannot find 'Numeral' in scope\n \
    \   return sorted.map { String(describing: Numeral.init(number: $0)) }.reversed()\n\
    \                                           ^~~~~~~\n"
  stdout: ''
  timestamp: 1660014071
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    var sorted_arr =\
    \ arr.filter {\n        $0 > 0 && $0 < 10\n    }.sorted()\n    sorted_arr.reverse()\n\
    \    return sorted_arr.map {\n        switch $0 {\n        case 1:\n         \
    \   return \"One\"\n        case 2:\n            return \"Two\"\n        case\
    \ 3:\n            return \"Three\"\n        case 4:\n            return \"Four\"\
    \n        case 5:\n            return \"Five\"\n        case 6:\n            return\
    \ \"Six\"\n        case 7:\n            return \"Seven\"\n        case 8:\n  \
    \          return \"Eight\"\n        case 9:\n            return \"Nine\"\n  \
    \      default:\n            return \"\"\n        }\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014071
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let validDigits =\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    let validDigitsSet = Set(validDigits)\n   \
    \ let names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\"]\n    let sorted = arr.filter {validDigitsSet.contains($0)}.sorted()\n\
    \    let reversed = sorted.reversed()\n    let namesArr = reversed.map {names[$0\
    \ - 1]}\n    return namesArr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014071
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    return arr.filter\
    \ { $0 >= 1 && $0 <= 9 }.sorted().reversed().map { String($0) }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmpiv6mfkm0/tmpiv6mfkm0.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aef5d826c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aef5d51db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aef5d51d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aef5d51c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpiv6mfkm0                        0x000055b6c749e9d1 <unavailable> + 6609

    5    libc.so.6                          0x00002aef5da12460 __libc_start_main +
    245

    6    tmpiv6mfkm0                        0x000055b6c749e479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660013893
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let sortedArray =\
    \ arr.filter { $0 >= 1 && $0 <= 9 }.sorted()\n    return sortedArray.map { String(describing:\
    \ $0) }.reversed()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(by_length(arr: [2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmpaom5loqo/tmpaom5loqo.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acc354c4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acc351bbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acc351bb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acc351ba7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpaom5loqo                        0x000056120e774961 <unavailable> + 6497

    5    libc.so.6                          0x00002acc356b0460 __libc_start_main +
    245

    6    tmpaom5loqo                        0x000056120e774409 <unavailable> + 5129

    '
  stdout: ''
  timestamp: 1660014071
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    return arr.sorted().reversed().filter\
    \ { 0..<10 ~= $0 }.map {\n        switch $0 {\n        case 1: return \"One\"\n\
    \        case 2: return \"Two\"\n        case 3: return \"Three\"\n        case\
    \ 4: return \"Four\"\n        case 5: return \"Five\"\n        case 6: return\
    \ \"Six\"\n        case 7: return \"Seven\"\n        case 8: return \"Eight\"\n\
    \        case 9: return \"Nine\"\n        default: fatalError()\n        }\n \
    \   }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(by_length(arr: [2, 1, 1,\
    \ 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014072
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let lower = 1\n \
    \   let upper = 9\n    var numbers = [Int]()\n    var counter = 0\n    for i in\
    \ arr {\n        if i >= lower && i <= upper {\n            numbers.append(i)\n\
    \        }\n    }\n    numbers.sort()\n    numbers.reverse()\n    var result =\
    \ [String]()\n    for i in numbers {\n        switch i {\n        case 1:\n  \
    \          result.append(\"One\")\n        case 2:\n            result.append(\"\
    Two\")\n        case 3:\n            result.append(\"Three\")\n        case 4:\n\
    \            result.append(\"Four\")\n        case 5:\n            result.append(\"\
    Five\")\n        case 6:\n            result.append(\"Six\")\n        case 7:\n\
    \            result.append(\"Seven\")\n        case 8:\n            result.append(\"\
    Eight\")\n        case 9:\n            result.append(\"Nine\")\n        default:\n\
    \            counter += 1\n        }\n    }\n    if counter == numbers.count {\n\
    \        return []\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014072
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    return []\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: Exception
  stderr: 'tmpl4uzplmu/tmpl4uzplmu.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b98fac9fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b98fa996b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b98fa996988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b98fa9957b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpl4uzplmu                        0x0000555967468621 <unavailable> + 5665

    5    libc.so.6                          0x00002b98fae8b460 __libc_start_main +
    245

    6    tmpl4uzplmu                        0x00005559674680c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1660013892
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let dict: [Int: String]\
    \ = [1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\", 5: \"Five\", 6: \"Six\"\
    , 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"]\n    let range = 1...9\n    let integerBetweenOneAndNine\
    \ = arr.filter({ range.contains($0) })\n    let sorted = integerBetweenOneAndNine.sorted()\n\
    \    let reversed = sorted.reversed()\n    let words = reversed.map({ dict[$0]!\
    \ })\n    return words\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014072
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    return arr.filter({\
    \ $0 <= 9 && $0 >= 1 }).sorted().reversed().map({ num -> String in\n        switch\
    \ num {\n        case 1:\n            return \"One\"\n        case 2:\n      \
    \      return \"Two\"\n        case 3:\n            return \"Three\"\n       \
    \ case 4:\n            return \"Four\"\n        case 5:\n            return \"\
    Five\"\n        case 6:\n            return \"Six\"\n        case 7:\n       \
    \     return \"Seven\"\n        case 8:\n            return \"Eight\"\n      \
    \  case 9:\n            return \"Nine\"\n        default:\n            return\
    \ \"\"\n        }\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014072
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    return arr.filter\
    \ {\n        $0 >= 1 && $0 <= 9\n    }.sorted(by: >).map {\n        digitToString($0)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(by_length(arr: [2, 1, 1,\
    \ 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpfbta7wdj.swift:18:9: error: cannot find 'digitToString' in scope\n\
    \        digitToString($0)\n        ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014071
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let acceptableNumbers\
    \ = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    let filtered = arr.filter { acceptableNumbers.contains($0)\
    \ }\n    let sorted = filtered.sorted { $0 < $1 }\n    let reversed = sorted.reversed()\n\
    \    let strings = reversed.map { number -> String in\n        switch number {\n\
    \        case 1:\n            return \"One\"\n        case 2:\n            return\
    \ \"Two\"\n        case 3:\n            return \"Three\"\n        case 4:\n  \
    \          return \"Four\"\n        case 5:\n            return \"Five\"\n   \
    \     case 6:\n            return \"Six\"\n        case 7:\n            return\
    \ \"Seven\"\n        case 8:\n            return \"Eight\"\n        case 9:\n\
    \            return \"Nine\"\n        default:\n            fatalError(\"This\
    \ shouldn't happen\")\n        }\n    }\n    return strings\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014072
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    // your code here\n\
    \    var arrs = arr.filter {$0 <= 9 && $0 >= 1}\n    var nums = [\"One\", \"Two\"\
    , \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n  \
    \  arrs.sort()\n    arrs = arrs.reversed()\n    return arrs.map { nums[$0 - 1]\
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5,\
    \ 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"\
    One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr:\
    \ [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\"\
    , \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014072
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    return []\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: Exception
  stderr: 'tmpl4uzplmu/tmpl4uzplmu.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b98fac9fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b98fa996b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b98fa996988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b98fa9957b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpl4uzplmu                        0x0000555967468621 <unavailable> + 5665

    5    libc.so.6                          0x00002b98fae8b460 __libc_start_main +
    245

    6    tmpl4uzplmu                        0x00005559674680c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1660013892
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    return arr.sorted().reversed().filter({\
    \ $0 >= 1 && $0 <= 9 }).map({\n        switch $0 {\n        case 1: return \"\
    One\"\n        case 2: return \"Two\"\n        case 3: return \"Three\"\n    \
    \    case 4: return \"Four\"\n        case 5: return \"Five\"\n        case 6:\
    \ return \"Six\"\n        case 7: return \"Seven\"\n        case 8: return \"\
    Eight\"\n        case 9: return \"Nine\"\n        default: return \"\"\n     \
    \   }\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(by_length(arr: [2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014072
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let words = [\"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    ]\n    var result = [String]()\n    for item in arr {\n        if item > 0 &&\
    \ item < 10 {\n            result.append(words[item - 1])\n        }\n    }\n\
    \    return result.reversed()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmprazb72v5/tmprazb72v5.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab3ffd84c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab3ffa7bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab3ffa7b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab3ffa7a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprazb72v5                        0x00005566f54fa8f1 <unavailable> + 6385

    5    libc.so.6                          0x00002ab3fff70460 __libc_start_main +
    245

    6    tmprazb72v5                        0x00005566f54fa399 <unavailable> + 5017

    '
  stdout: ''
  timestamp: 1660014072
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    return []\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: Exception
  stderr: 'tmpl4uzplmu/tmpl4uzplmu.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b98fac9fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b98fa996b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b98fa996988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b98fa9957b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpl4uzplmu                        0x0000555967468621 <unavailable> + 5665

    5    libc.so.6                          0x00002b98fae8b460 __libc_start_main +
    245

    6    tmpl4uzplmu                        0x00005559674680c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1660013892
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    \n    var numberArray:\
    \ [Int] = arr.filter{ $0 > 0 && $0 < 10 }\n    numberArray.sort()\n    let resultArray\
    \ = numberArray.map { $0.string }\n    return resultArray.reversed()\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpqsgsg4mi.swift:18:44: error: value of type 'Int' has no member\
    \ 'string'\n    let resultArray = numberArray.map { $0.string }\n            \
    \                            ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660014071
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    return arr.filter({$0\
    \ >= 1 && $0 <= 9}).sorted(by: { $0 > $1 }).map({ String($0) })\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmp67bt3qkq/tmp67bt3qkq.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aacdfbf3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aacdf8eab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aacdf8ea988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aacdf8e97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp67bt3qkq                        0x000055e5a98ce8d1 <unavailable> + 6353

    5    libc.so.6                          0x00002aacdfddf460 __libc_start_main +
    245

    6    tmp67bt3qkq                        0x000055e5a98ce379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660014072
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let invalid: [Int]\
    \ = []\n    let sortedArr = arr.filter { $0 > 0 && $0 < 10 }.sorted()\n    let\
    \ reversedArr = sortedArr.reversed()\n    var names: [String] = []\n    for number\
    \ in reversedArr {\n        switch number {\n        case 1:\n            names.append(\"\
    One\")\n        case 2:\n            names.append(\"Two\")\n        case 3:\n\
    \            names.append(\"Three\")\n        case 4:\n            names.append(\"\
    Four\")\n        case 5:\n            names.append(\"Five\")\n        case 6:\n\
    \            names.append(\"Six\")\n        case 7:\n            names.append(\"\
    Seven\")\n        case 8:\n            names.append(\"Eight\")\n        case 9:\n\
    \            names.append(\"Nine\")\n        default:\n            names.append(\"\
    Invalid Number!\")\n        }\n    }\n    return names\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014072
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n  let ones = [\"\", \"\
    One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\",\
    \ \"Nine\"]\n  let sorted = arr.filter { $0 >= 1 && $0 <= 9 }.sorted()\n  return\
    \ sorted.reversed().map { ones[$0] }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as\
    \ [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"])\n\
    assert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014072
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let ret = sort_by_length(arr:\
    \ arr)\n    return get_names(arr: ret)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as\
    \ [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"])\n\
    assert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpkvp53z2z.swift:15:15: error: cannot find 'sort_by_length' in scope\n\
    \    let ret = sort_by_length(arr: arr)\n              ^~~~~~~~~~~~~~\n/tmp/tmpkvp53z2z.swift:16:12:\
    \ error: cannot find 'get_names' in scope\n    return get_names(arr: ret)\n  \
    \         ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014072
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    let words = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"\
    Seven\", \"Eight\", \"Nine\"]\n    for number in arr {\n        if 1...9 ~= number\
    \ {\n            result.append(words[number - 1])\n        }\n    }\n    return\
    \ result.reversed()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(by_length(arr: [2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmp6y3k229a/tmp6y3k229a.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab717bc8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab7178bfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab7178bf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab7178be7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6y3k229a                        0x00005607d9dfc991 <unavailable> + 6545

    5    libc.so.6                          0x00002ab717db4460 __libc_start_main +
    245

    6    tmp6y3k229a                        0x00005607d9dfc439 <unavailable> + 5177

    '
  stdout: ''
  timestamp: 1660014072
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    var newArray = arr.filter\
    \ {$0 < 10 && $0 > 0}\n    newArray.sort()\n    newArray.reverse()\n    return\
    \ newArray.map {String(characters: $0.description)}\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpabs50mdb.swift:18:26: error: no exact matches in call to initializer\
    \ \n    return newArray.map {String(characters: $0.description)}\n           \
    \              ^\nSwift.String:4:23: note: incorrect labels for candidate (have:\
    \ '(characters:)', expected: '(_:)')\n    @inlinable public init<T>(_ value: T)\
    \ where T : LosslessStringConvertible\n                      ^\nSwift.String:3:12:\
    \ note: incorrect labels for candidate (have: '(characters:)', expected: '(_:)')\n\
    \    public init<S>(_ other: S) where S : LosslessStringConvertible, S : Sequence,\
    \ S.Element == Character\n           ^\nSwift.String:4:12: note: incorrect labels\
    \ for candidate (have: '(characters:)', expected: '(_:)')\n    public init<S>(_\
    \ characters: S) where S : Sequence, S.Element == Character\n           ^\nSwift.RangeReplaceableCollection:3:23:\
    \ note: incorrect labels for candidate (have: '(characters:)', expected: '(_:)')\n\
    \    @inlinable public init<S>(_ elements: S) where S : Sequence, Self.Element\
    \ == S.Element\n                      ^\n"
  stdout: ''
  timestamp: 1660014072
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let numbers = arr.filter\
    \ { num in\n        num >= 1 && num <= 9\n    }\n    let sortedNumbers = numbers.sorted()\n\
    \    let reversedNumbers = sortedNumbers.reversed()\n    let numbersArray = reversedNumbers.map\
    \ { (number) -> String in\n        switch number {\n        case 1:\n        \
    \    return \"One\"\n        case 2:\n            return \"Two\"\n        case\
    \ 3:\n            return \"Three\"\n        case 4:\n            return \"Four\"\
    \n        case 5:\n            return \"Five\"\n        case 6:\n            return\
    \ \"Six\"\n        case 7:\n            return \"Seven\"\n        case 8:\n  \
    \          return \"Eight\"\n        case 9:\n            return \"Nine\"\n  \
    \      default:\n            return \"\"\n        }\n    }\n    return numbersArray\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014072
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    var str = [String]()\n\
    \    for i in arr {\n        if i == 1 {\n            str.append(\"One\")\n  \
    \      } else if i == 2 {\n            str.append(\"Two\")\n        } else if\
    \ i == 3 {\n            str.append(\"Three\")\n        } else if i == 4 {\n  \
    \          str.append(\"Four\")\n        } else if i == 5 {\n            str.append(\"\
    Five\")\n        } else if i == 6 {\n            str.append(\"Six\")\n       \
    \ } else if i == 7 {\n            str.append(\"Seven\")\n        } else if i ==\
    \ 8 {\n            str.append(\"Eight\")\n        } else if i == 9 {\n       \
    \     str.append(\"Nine\")\n        }\n    }\n    str.sort()\n    return str.reversed()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: Exception
  stderr: 'tmpmezhi93a/tmpmezhi93a.swift:54: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b16f7ce1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b16f79d8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b16f79d8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b16f79d77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmezhi93a                        0x00005556339a09c1 <unavailable> + 6593

    5    libc.so.6                          0x00002b16f7ecd460 __libc_start_main +
    245

    6    tmpmezhi93a                        0x00005556339a0469 <unavailable> + 5225

    '
  stdout: ''
  timestamp: 1660014072
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    return arr.filter\
    \ { $0 >= 1 && $0 <= 9 }.sorted().reversed().map { NumberToWord(rawValue: $0)?.description\
    \ ?? \"\" }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(by_length(arr: [2, 1,\
    \ 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpt5g8sya2.swift:15:72: error: cannot find 'NumberToWord' in scope\n\
    \    return arr.filter { $0 >= 1 && $0 <= 9 }.sorted().reversed().map { NumberToWord(rawValue:\
    \ $0)?.description ?? \"\" }\n                                               \
    \                        ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014072
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    return []\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: Exception
  stderr: 'tmpl4uzplmu/tmpl4uzplmu.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b98fac9fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b98fa996b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b98fa996988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b98fa9957b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpl4uzplmu                        0x0000555967468621 <unavailable> + 5665

    5    libc.so.6                          0x00002b98fae8b460 __libc_start_main +
    245

    6    tmpl4uzplmu                        0x00005559674680c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1660013892
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n  let sortedArr = arr.filter({\
    \ $0 >= 1 && $0 <= 9 }).sorted(by: >)\n  let intNames = [1: \"One\", 2: \"Two\"\
    , 3: \"Three\", 4: \"Four\", 5: \"Five\", 6: \"Six\", 7: \"Seven\", 8: \"Eight\"\
    , 9: \"Nine\"]\n  return sortedArr.map({ intNames[$0]! })\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014072
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    var tmp = [Int]()\n\
    \    var tmp2 = [String]()\n    for i in arr {\n        if i > 0 && i < 10 {\n\
    \            tmp.append(i)\n        }\n    }\n    tmp.sort()\n    for i in tmp.reversed()\
    \ {\n        switch i {\n        case 1:\n            tmp2.append(\"One\")\n \
    \       case 2:\n            tmp2.append(\"Two\")\n        case 3:\n         \
    \   tmp2.append(\"Three\")\n        case 4:\n            tmp2.append(\"Four\"\
    )\n        case 5:\n            tmp2.append(\"Five\")\n        case 6:\n     \
    \       tmp2.append(\"Six\")\n        case 7:\n            tmp2.append(\"Seven\"\
    )\n        case 8:\n            tmp2.append(\"Eight\")\n        case 9:\n    \
    \        tmp2.append(\"Nine\")\n        default:\n            tmp2.append(\"\"\
    )\n        }\n    }\n    return tmp2\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as\
    \ [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"])\n\
    assert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014072
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    // Implement your\
    \ solution here!\n    return arr.filter { $0 >= 1 && $0 <= 9 }.sorted().reversed().map\
    \ { return String(describing: $0) }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as\
    \ [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"])\n\
    assert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmph74j2qh_/tmph74j2qh_.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b66f70ccc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b66f6dc3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b66f6dc3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b66f6dc27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmph74j2qh_                        0x000055c0eda289d1 <unavailable> + 6609

    5    libc.so.6                          0x00002b66f72b8460 __libc_start_main +
    245

    6    tmph74j2qh_                        0x000055c0eda28479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660014072
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    return arr.filter\
    \ { x in x >= 1 && x <= 9 }.sorted().reversed().map { $0.digit }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpd8ipytoa.swift:15:78: error: value of type 'ReversedCollection<[Int]>.Element'\
    \ (aka 'Int') has no member 'digit'\n    return arr.filter { x in x >= 1 && x\
    \ <= 9 }.sorted().reversed().map { $0.digit }\n                              \
    \                                            ~~ ^~~~~\n"
  stdout: ''
  timestamp: 1660014072
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let tmp = arr.filter\
    \ { (arg) -> Bool in\n        let (value) = arg\n        return value > 0 && value\
    \ < 10\n    }.sorted { (value1, value2) -> Bool in\n        return value1 > value2\n\
    \    }\n    var result: [String] = []\n    tmp.forEach { (value) in\n        switch\
    \ value {\n        case 1:\n            result.append(\"One\")\n        case 2:\n\
    \            result.append(\"Two\")\n        case 3:\n            result.append(\"\
    Three\")\n        case 4:\n            result.append(\"Four\")\n        case 5:\n\
    \            result.append(\"Five\")\n        case 6:\n            result.append(\"\
    Six\")\n        case 7:\n            result.append(\"Seven\")\n        case 8:\n\
    \            result.append(\"Eight\")\n        case 9:\n            result.append(\"\
    Nine\")\n        default:\n            break\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014072
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    var arr = arr.filter\
    \ { $0 >= 1 && $0 <= 9 }\n    arr.sort()\n    arr.reverse()\n    return arr.map\
    \ { stringify($0) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(by_length(arr: [2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpmhnjzvk1.swift:18:22: error: cannot find 'stringify' in scope\n\
    \    return arr.map { stringify($0) }\n                     ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014072
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let words = [\"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    ]\n    let valid = arr.filter { (val) -> Bool in\n        return val > 0 && val\
    \ < 10\n    }\n    let sorted = valid.sorted()\n    return sorted.reversed().map({\
    \ (val) -> String in\n        return words[val - 1]\n    })\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014072
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    // your code here\n\
    \    return []\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(by_length(arr: [2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmpluoqkt6k/tmpluoqkt6k.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba0fda83c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba0fd77ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba0fd77a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba0fd7797b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpluoqkt6k                        0x0000556384fd6621 <unavailable> + 5665

    5    libc.so.6                          0x00002ba0fdc6f460 __libc_start_main +
    245

    6    tmpluoqkt6k                        0x0000556384fd60c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1660013893
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    \n    // TODO\n \
    \   var numbers = [String]()\n    for number in arr {\n        switch number {\n\
    \        case 1:\n            numbers.append(\"One\")\n        case 2:\n     \
    \       numbers.append(\"Two\")\n        case 3:\n            numbers.append(\"\
    Three\")\n        case 4:\n            numbers.append(\"Four\")\n        case\
    \ 5:\n            numbers.append(\"Five\")\n        case 6:\n            numbers.append(\"\
    Six\")\n        case 7:\n            numbers.append(\"Seven\")\n        case 8:\n\
    \            numbers.append(\"Eight\")\n        case 9:\n            numbers.append(\"\
    Nine\")\n        default:\n            break\n        }\n    }\n    numbers.sort()\n\
    \    return numbers.reversed()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmpw_o2l3dy/tmpw_o2l3dy.swift:59: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9efb683c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9efb37ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9efb37a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9efb3797b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw_o2l3dy                        0x000055cf244199c1 <unavailable> + 6593

    5    libc.so.6                          0x00002b9efb86f460 __libc_start_main +
    245

    6    tmpw_o2l3dy                        0x000055cf24419469 <unavailable> + 5225

    '
  stdout: ''
  timestamp: 1660014072
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let result: [String]\
    \ = arr.filter { $0 > 0 && $0 < 10 }.sorted().reversed().map { String($0) }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(by_length(arr: [2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmpyk2n2x8a/tmpyk2n2x8a.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b627738ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6277081b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6277081988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b62770807b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyk2n2x8a                        0x000056375f29d9d1 <unavailable> + 6609

    5    libc.so.6                          0x00002b6277576460 __libc_start_main +
    245

    6    tmpyk2n2x8a                        0x000056375f29d479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660014072
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    var newArr: [String]\
    \ = []\n    for num in arr {\n        switch num {\n        case 1:\n        \
    \    newArr.append(\"One\")\n        case 2:\n            newArr.append(\"Two\"\
    )\n        case 3:\n            newArr.append(\"Three\")\n        case 4:\n  \
    \          newArr.append(\"Four\")\n        case 5:\n            newArr.append(\"\
    Five\")\n        case 6:\n            newArr.append(\"Six\")\n        case 7:\n\
    \            newArr.append(\"Seven\")\n        case 8:\n            newArr.append(\"\
    Eight\")\n        case 9:\n            newArr.append(\"Nine\")\n        default:\n\
    \            break\n        }\n    }\n    newArr.sort()\n    newArr.reverse()\n\
    \    return newArr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(by_length(arr: [2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmp5s1m6sro/tmp5s1m6sro.swift:58: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aca4b5c8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aca4b2bfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aca4b2bf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aca4b2be7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5s1m6sro                        0x00005643d2d669a1 <unavailable> + 6561

    5    libc.so.6                          0x00002aca4b7b4460 __libc_start_main +
    245

    6    tmp5s1m6sro                        0x00005643d2d66449 <unavailable> + 5193

    '
  stdout: ''
  timestamp: 1660014072
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    return []\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: Exception
  stderr: 'tmpl4uzplmu/tmpl4uzplmu.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b98fac9fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b98fa996b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b98fa996988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b98fa9957b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpl4uzplmu                        0x0000555967468621 <unavailable> + 5665

    5    libc.so.6                          0x00002b98fae8b460 __libc_start_main +
    245

    6    tmpl4uzplmu                        0x00005559674680c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1660013892
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    for num in arr where (1...9).contains(num) {\n        switch num {\n    \
    \    case 1:\n            result.append(\"One\")\n        case 2:\n          \
    \  result.append(\"Two\")\n        case 3:\n            result.append(\"Three\"\
    )\n        case 4:\n            result.append(\"Four\")\n        case 5:\n   \
    \         result.append(\"Five\")\n        case 6:\n            result.append(\"\
    Six\")\n        case 7:\n            result.append(\"Seven\")\n        case 8:\n\
    \            result.append(\"Eight\")\n        case 9:\n            result.append(\"\
    Nine\")\n        default:\n            break\n        }\n    }\n    return result.reversed()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: Exception
  stderr: 'tmpmx7cmr6j/tmpmx7cmr6j.swift:56: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b66f8059c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b66f7d50b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b66f7d50988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b66f7d4f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmx7cmr6j                        0x00005618a76198f1 <unavailable> + 6385

    5    libc.so.6                          0x00002b66f8245460 __libc_start_main +
    245

    6    tmpmx7cmr6j                        0x00005618a7619399 <unavailable> + 5017

    '
  stdout: ''
  timestamp: 1660014072
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    // your code here\n\
    \    return []\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(by_length(arr: [2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmpluoqkt6k/tmpluoqkt6k.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba0fda83c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba0fd77ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba0fd77a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba0fd7797b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpluoqkt6k                        0x0000556384fd6621 <unavailable> + 5665

    5    libc.so.6                          0x00002ba0fdc6f460 __libc_start_main +
    245

    6    tmpluoqkt6k                        0x0000556384fd60c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1660013893
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let words = [ \"\
    One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\",\
    \ \"Nine\" ]\n    return arr.filter { $0 >= 1 && $0 <= 9 }.sorted().reversed().map\
    \ { words[$0 - 1] }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(by_length(arr: [2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014072
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    \n    let actualNumber\
    \ = arr.filter({\n        return $0 >= 1 && $0 <= 9\n    })\n    \n    let sortedNumber\
    \ = actualNumber.sorted()\n    \n    let reversedNumber = sortedNumber.reversed()\n\
    \    \n    var stringNumbers = [String]()\n    \n    for number in reversedNumber\
    \ {\n        switch number {\n        case 1:\n            stringNumbers.append(\"\
    One\")\n        case 2:\n            stringNumbers.append(\"Two\")\n        case\
    \ 3:\n            stringNumbers.append(\"Three\")\n        case 4:\n         \
    \   stringNumbers.append(\"Four\")\n        case 5:\n            stringNumbers.append(\"\
    Five\")\n        case 6:\n            stringNumbers.append(\"Six\")\n        case\
    \ 7:\n            stringNumbers.append(\"Seven\")\n        case 8:\n         \
    \   stringNumbers.append(\"Eight\")\n        case 9:\n            stringNumbers.append(\"\
    Nine\")\n        default:\n            break\n        }\n    }\n    \n    return\
    \ stringNumbers\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(by_length(arr: [2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014072
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    if arr.isEmpty {\n\
    \        return []\n    }\n    else {\n        let numbers = arr.filter { $0 >=\
    \ 1 && $0 <= 9 }.sorted()\n        let words = numbers.map { (number) -> String\
    \ in\n            switch number {\n            case 1:\n                return\
    \ \"One\"\n            case 2:\n                return \"Two\"\n            case\
    \ 3:\n                return \"Three\"\n            case 4:\n                return\
    \ \"Four\"\n            case 5:\n                return \"Five\"\n           \
    \ case 6:\n                return \"Six\"\n            case 7:\n             \
    \   return \"Seven\"\n            case 8:\n                return \"Eight\"\n\
    \            case 9:\n                return \"Nine\"\n            default:\n\
    \                return \"\"\n            }\n        }\n        return words.reversed()\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(by_length(arr: [2, 1, 1,\
    \ 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014072
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    // your code here\n\
    \    return []\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(by_length(arr: [2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmpluoqkt6k/tmpluoqkt6k.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba0fda83c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba0fd77ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba0fd77a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba0fd7797b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpluoqkt6k                        0x0000556384fd6621 <unavailable> + 5665

    5    libc.so.6                          0x00002ba0fdc6f460 __libc_start_main +
    245

    6    tmpluoqkt6k                        0x0000556384fd60c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1660013893
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let allowed: Set<Int>\
    \ = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    let sorted = arr.filter {allowed.contains($0)}.sorted()\n\
    \    let reversed = sorted.reversed()\n    let words = reversed.map {\n      \
    \  switch $0 {\n        case 1: return \"One\"\n        case 2: return \"Two\"\
    \n        case 3: return \"Three\"\n        case 4: return \"Four\"\n        case\
    \ 5: return \"Five\"\n        case 6: return \"Six\"\n        case 7: return \"\
    Seven\"\n        case 8: return \"Eight\"\n        case 9: return \"Nine\"\n \
    \       default: return \"\"\n        }\n    }\n    return words\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014072
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    // your code goes\
    \ here\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(by_length(arr: [2, 1, 1,\
    \ 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: '/tmp/tmphhxld817.swift:16:1: error: missing return in global function expected
    to return ''[String]''

    }

    ^

    '
  stdout: ''
  timestamp: 1660014072
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter({$0\
    \ > 0 && $0 < 10}).sorted().reversed()\n    let map = [\"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    return sorted.map({\
    \ map[$0 - 1] })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(by_length(arr: [2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014072
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    var result: [String]\
    \ = []\n    let numToString = [1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\"\
    , 5: \"Five\", 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"]\n    for num\
    \ in arr {\n        if num <= 9 && num >= 1 {\n            result.append(numToString[num]!)\n\
    \        }\n    }\n    return result.sorted().reversed()\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmpr2u2utaa/tmpr2u2utaa.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5b052e1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5b04fd8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5b04fd8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5b04fd77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr2u2utaa                        0x000055d9bd997a81 <unavailable> + 6785

    5    libc.so.6                          0x00002b5b054cd460 __libc_start_main +
    245

    6    tmpr2u2utaa                        0x000055d9bd997529 <unavailable> + 5417

    '
  stdout: ''
  timestamp: 1660014072
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    return []\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: Exception
  stderr: 'tmpl4uzplmu/tmpl4uzplmu.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b98fac9fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b98fa996b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b98fa996988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b98fa9957b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpl4uzplmu                        0x0000555967468621 <unavailable> + 5665

    5    libc.so.6                          0x00002b98fae8b460 __libc_start_main +
    245

    6    tmpl4uzplmu                        0x00005559674680c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1660013892
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    if arr.isEmpty {\n\
    \        return []\n    }\n    var sortedArr = arr.filter({ $0 > 0 && $0 < 10}).sorted()\n\
    \    if sortedArr.isEmpty {\n        return [\"\"]\n    }\n    for (index, val)\
    \ in sortedArr.enumerated() {\n        switch val {\n        case 1:\n       \
    \     sortedArr[index] = \"One\"\n        case 2:\n            sortedArr[index]\
    \ = \"Two\"\n        case 3:\n            sortedArr[index] = \"Three\"\n     \
    \   case 4:\n            sortedArr[index] = \"Four\"\n        case 5:\n      \
    \      sortedArr[index] = \"Five\"\n        case 6:\n            sortedArr[index]\
    \ = \"Six\"\n        case 7:\n            sortedArr[index] = \"Seven\"\n     \
    \   case 8:\n            sortedArr[index] = \"Eight\"\n        case 9:\n     \
    \       sortedArr[index] = \"Nine\"\n        default:\n            print(\"error\"\
    )\n        }\n    }\n    return sortedArr.reversed()\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpg5ceh977.swift:25:32: error: cannot assign value of type 'String'\
    \ to subscript of type 'Int'\n            sortedArr[index] = \"One\"\n       \
    \                        ^~~~~\n/tmp/tmpg5ceh977.swift:27:32: error: cannot assign\
    \ value of type 'String' to subscript of type 'Int'\n            sortedArr[index]\
    \ = \"Two\"\n                               ^~~~~\n/tmp/tmpg5ceh977.swift:29:32:\
    \ error: cannot assign value of type 'String' to subscript of type 'Int'\n   \
    \         sortedArr[index] = \"Three\"\n                               ^~~~~~~\n\
    /tmp/tmpg5ceh977.swift:31:32: error: cannot assign value of type 'String' to subscript\
    \ of type 'Int'\n            sortedArr[index] = \"Four\"\n                   \
    \            ^~~~~~\n/tmp/tmpg5ceh977.swift:33:32: error: cannot assign value\
    \ of type 'String' to subscript of type 'Int'\n            sortedArr[index] =\
    \ \"Five\"\n                               ^~~~~~\n/tmp/tmpg5ceh977.swift:35:32:\
    \ error: cannot assign value of type 'String' to subscript of type 'Int'\n   \
    \         sortedArr[index] = \"Six\"\n                               ^~~~~\n/tmp/tmpg5ceh977.swift:37:32:\
    \ error: cannot assign value of type 'String' to subscript of type 'Int'\n   \
    \         sortedArr[index] = \"Seven\"\n                               ^~~~~~~\n\
    /tmp/tmpg5ceh977.swift:39:32: error: cannot assign value of type 'String' to subscript\
    \ of type 'Int'\n            sortedArr[index] = \"Eight\"\n                  \
    \             ^~~~~~~\n/tmp/tmpg5ceh977.swift:41:32: error: cannot assign value\
    \ of type 'String' to subscript of type 'Int'\n            sortedArr[index] =\
    \ \"Nine\"\n                               ^~~~~~\n/tmp/tmpg5ceh977.swift:46:22:\
    \ error: no 'reversed' candidates produce the expected contextual result type\
    \ '[String]'\n    return sortedArr.reversed()\n                     ^\nSwift.Sequence:2:40:\
    \ note: 'reversed()' produces '[Int]', not the expected contextual result type\
    \ '[String]'\n    @inlinable public __consuming func reversed() -> [Self.Element]\n\
    \                                       ^\nSwift.BidirectionalCollection:2:40:\
    \ note: 'reversed()' produces '"
  stdout: ''
  timestamp: 1660014072
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    return arr.filter({\
    \ $0 >= 1 && $0 <= 9}).sorted().reversed().map({ String($0) })\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmpr4okh_kw/tmpr4okh_kw.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abc16d23c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abc16a1ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abc16a1a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abc16a197b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr4okh_kw                        0x000055f2e02059d1 <unavailable> + 6609

    5    libc.so.6                          0x00002abc16f0f460 __libc_start_main +
    245

    6    tmpr4okh_kw                        0x000055f2e0205479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660014072
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    var numbersInRange = [Int]()\n    for number in arr {\n        if number\
    \ >= 1 && number <= 9 {\n            numbersInRange.append(number)\n        }\n\
    \    }\n    numbersInRange.sort()\n    for number in numbersInRange.reversed()\
    \ {\n        if number == 1 {\n            result.append(\"One\")\n        } else\
    \ if number == 2 {\n            result.append(\"Two\")\n        } else if number\
    \ == 3 {\n            result.append(\"Three\")\n        } else if number == 4\
    \ {\n            result.append(\"Four\")\n        } else if number == 5 {\n  \
    \          result.append(\"Five\")\n        } else if number == 6 {\n        \
    \    result.append(\"Six\")\n        } else if number == 7 {\n            result.append(\"\
    Seven\")\n        } else if number == 8 {\n            result.append(\"Eight\"\
    )\n        } else if number == 9 {\n            result.append(\"Nine\")\n    \
    \    }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014072
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    var list = [String]()\n\
    \    var sorted = arr.sorted()\n    let dictionary = [1:\"One\", 2:\"Two\", 3:\"\
    Three\", 4:\"Four\", 5:\"Five\", 6:\"Six\", 7:\"Seven\", 8:\"Eight\", 9:\"Nine\"\
    ]\n    for i in sorted {\n        if i <= 9 && i >= 1 {\n            list.append(dictionary[i]!)\n\
    \        }\n    }\n    return list.reversed()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014072
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    var names: [String]\
    \ = []\n    for num in arr {\n        switch num {\n        case 1:\n        \
    \    names.append(\"One\")\n        case 2:\n            names.append(\"Two\"\
    )\n        case 3:\n            names.append(\"Three\")\n        case 4:\n   \
    \         names.append(\"Four\")\n        case 5:\n            names.append(\"\
    Five\")\n        case 6:\n            names.append(\"Six\")\n        case 7:\n\
    \            names.append(\"Seven\")\n        case 8:\n            names.append(\"\
    Eight\")\n        case 9:\n            names.append(\"Nine\")\n        default:\n\
    \            continue\n        }\n    }\n    names.sort()\n    names.reverse()\n\
    \    return names\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(by_length(arr: [2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmpyh5y_2rb/tmpyh5y_2rb.swift:58: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acad5d40c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acad5a37b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acad5a37988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acad5a367b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyh5y_2rb                        0x0000557a8a2da9a1 <unavailable> + 6561

    5    libc.so.6                          0x00002acad5f2c460 __libc_start_main +
    245

    6    tmpyh5y_2rb                        0x0000557a8a2da449 <unavailable> + 5193

    '
  stdout: ''
  timestamp: 1660014072
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let digits = [1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9]\n    let names = [\"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    var result = [String]()\n\
    \    var digits_matching = [Int]()\n    for number in arr {\n        for digit\
    \ in digits {\n            if number == digit {\n                digits_matching.append(number)\n\
    \            }\n        }\n    }\n    digits_matching.sort()\n    for digit in\
    \ digits_matching.reversed() {\n        for (index, number) in digits.enumerated()\
    \ {\n            if digit == number {\n                result.append(names[index])\n\
    \            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014072
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter\
    \ { 1...9 ~= $0 }.sorted()\n    let name = [\"\", \"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    return sorted.reversed().map\
    \ { name[$0] }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(by_length(arr: [2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014072
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n  let dic: [Int: String]\
    \ = [1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\", 5: \"Five\", 6: \"Six\"\
    , 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"]\n  var sortedArr = arr.filter({ (element)\
    \ -> Bool in\n    return element > 0 && element < 10\n  }).sorted()\n  if sortedArr.count\
    \ < 1 {\n    return []\n  }\n  return sortedArr.reversed().map({ (element) ->\
    \ String in\n    return dic[element]!\n  })\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014072
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    var arr = arr.filter\
    \ { $0 >= 1 && $0 <= 9 }\n    arr.sort()\n    var result = [String]()\n    for\
    \ num in arr.reversed() {\n        result.append(digitToString(digit: num))\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpfc5put86.swift:19:23: error: cannot find 'digitToString' in scope\n\
    \        result.append(digitToString(digit: num))\n                      ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014072
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    var names: [String]\
    \ = []\n    for num in arr {\n        switch num {\n        case 1:\n        \
    \    names.append(\"One\")\n        case 2:\n            names.append(\"Two\"\
    )\n        case 3:\n            names.append(\"Three\")\n        case 4:\n   \
    \         names.append(\"Four\")\n        case 5:\n            names.append(\"\
    Five\")\n        case 6:\n            names.append(\"Six\")\n        case 7:\n\
    \            names.append(\"Seven\")\n        case 8:\n            names.append(\"\
    Eight\")\n        case 9:\n            names.append(\"Nine\")\n        default:\n\
    \            break\n        }\n    }\n    return names.sorted().reversed()\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: Exception
  stderr: 'tmpu_5k6gei/tmpu_5k6gei.swift:56: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b04f73e3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b04f70dab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b04f70da988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b04f70d97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu_5k6gei                        0x000055ea3a1c48f1 <unavailable> + 6385

    5    libc.so.6                          0x00002b04f75cf460 __libc_start_main +
    245

    6    tmpu_5k6gei                        0x000055ea3a1c4399 <unavailable> + 5017

    '
  stdout: ''
  timestamp: 1660014072
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    return arr.filter\
    \ { $0 > 0 && $0 < 10 }.sorted().reversed().map { \"\\($0)\" }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmplvpb823d/tmplvpb823d.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad56d1d0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad56cec7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad56cec7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad56cec67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplvpb823d                        0x000055841d556b71 <unavailable> + 7025

    5    libc.so.6                          0x00002ad56d3bc460 __libc_start_main +
    245

    6    tmplvpb823d                        0x000055841d556619 <unavailable> + 5657

    '
  stdout: ''
  timestamp: 1660014072
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let oneThroughNine:\
    \ [Int] = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    var strings: [String] = []\n    let\
    \ filteredNumbers = arr.filter({ (int) -> Bool in\n        return oneThroughNine.contains(int)\n\
    \    })\n    let sortedNumbers = filteredNumbers.sorted()\n    let reversedNumbers\
    \ = sortedNumbers.reversed()\n    for number in reversedNumbers {\n        switch\
    \ number {\n        case 1:\n            strings.append(\"One\")\n        case\
    \ 2:\n            strings.append(\"Two\")\n        case 3:\n            strings.append(\"\
    Three\")\n        case 4:\n            strings.append(\"Four\")\n        case\
    \ 5:\n            strings.append(\"Five\")\n        case 6:\n            strings.append(\"\
    Six\")\n        case 7:\n            strings.append(\"Seven\")\n        case 8:\n\
    \            strings.append(\"Eight\")\n        case 9:\n            strings.append(\"\
    Nine\")\n        default:\n            print(\"default\")\n        }\n    }\n\
    \    return strings\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(by_length(arr: [2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014072
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let nums = [1, 2,\
    \ 3, 4, 5, 6, 7, 8, 9]\n    let text = [\"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    var result = [String]()\n\
    \    for i in arr {\n        if nums.contains(i) {\n            for index in 0...text.count\
    \ - 1 {\n                if nums[index] == i {\n                    result.append(text[index])\n\
    \                }\n            }\n        }\n    }\n    return result.reversed()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: Exception
  stderr: 'tmpr9e8ams5/tmpr9e8ams5.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9d79ee3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9d79bdab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9d79bda988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9d79bd97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr9e8ams5                        0x00005640e600db91 <unavailable> + 7057

    5    libc.so.6                          0x00002b9d7a0cf460 __libc_start_main +
    245

    6    tmpr9e8ams5                        0x00005640e600d639 <unavailable> + 5689

    '
  stdout: ''
  timestamp: 1660014073
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n  var result = [String]()\n\
    \  let valid = Array(1...9)\n  let words = [\"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n  for number in arr {\n\
    \    guard valid.contains(number) else { continue }\n    result.append(words[number\
    \ - 1])\n  }\n  return result.reversed()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as\
    \ [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"])\n\
    assert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmp24mm8k5f/tmp24mm8k5f.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b95104b8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b95101afb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b95101af988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b95101ae7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp24mm8k5f                        0x000055fd8e5ada91 <unavailable> + 6801

    5    libc.so.6                          0x00002b95106a4460 __libc_start_main +
    245

    6    tmp24mm8k5f                        0x000055fd8e5ad539 <unavailable> + 5433

    '
  stdout: ''
  timestamp: 1660014073
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let map = [1:\"One\"\
    , 2:\"Two\", 3:\"Three\", 4:\"Four\", 5:\"Five\", 6:\"Six\", 7:\"Seven\", 8:\"\
    Eight\", 9:\"Nine\"]\n    let a = arr.filter({$0 > 0 && $0 < 10}).sorted()\n \
    \   return a.reversed().map({map[$0]!})\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as\
    \ [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"])\n\
    assert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014073
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let numbers = arr.filter({$0\
    \ > 0 && $0 < 10})\n    var numbersSorted = numbers.sorted()\n    numbersSorted.reverse()\n\
    \    var result = [String]()\n    for number in numbersSorted {\n        switch\
    \ number {\n        case 1:\n            result.append(\"One\")\n        case\
    \ 2:\n            result.append(\"Two\")\n        case 3:\n            result.append(\"\
    Three\")\n        case 4:\n            result.append(\"Four\")\n        case 5:\n\
    \            result.append(\"Five\")\n        case 6:\n            result.append(\"\
    Six\")\n        case 7:\n            result.append(\"Seven\")\n        case 8:\n\
    \            result.append(\"Eight\")\n        case 9:\n            result.append(\"\
    Nine\")\n        default:\n            print(\"Error\")\n        }\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(by_length(arr: [2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014073
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    // your code here\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: '/tmp/tmp6gjw0epc.swift:16:1: error: missing return in global function expected
    to return ''[String]''

    }

    ^

    '
  stdout: ''
  timestamp: 1660014072
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    return arr.sorted().reversed().map\
    \ {\n        switch $0 {\n        case 1: return \"One\"\n        case 2: return\
    \ \"Two\"\n        case 3: return \"Three\"\n        case 4: return \"Four\"\n\
    \        case 5: return \"Five\"\n        case 6: return \"Six\"\n        case\
    \ 7: return \"Seven\"\n        case 8: return \"Eight\"\n        case 9: return\
    \ \"Nine\"\n        default: return \"\"\n        }\n    }.filter { $0 != \"\"\
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5,\
    \ 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"\
    One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr:\
    \ [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\"\
    , \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014073
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    return []\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: Exception
  stderr: 'tmpl4uzplmu/tmpl4uzplmu.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b98fac9fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b98fa996b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b98fa996988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b98fa9957b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpl4uzplmu                        0x0000555967468621 <unavailable> + 5665

    5    libc.so.6                          0x00002b98fae8b460 __libc_start_main +
    245

    6    tmpl4uzplmu                        0x00005559674680c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1660013892
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let _ = arr.sorted().filter\
    \ { $0 >= 1 && $0 <= 9 }.reversed().map { [\"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"][$0 - 1] }\n    return []\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: Exception
  stderr: 'tmppgqej_o5/tmppgqej_o5.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba252c59c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba252950b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba252950988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba25294f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppgqej_o5                        0x00005586ee91c961 <unavailable> + 6497

    5    libc.so.6                          0x00002ba252e45460 __libc_start_main +
    245

    6    tmppgqej_o5                        0x00005586ee91c409 <unavailable> + 5129

    '
  stdout: ''
  timestamp: 1660014073
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let valid = arr.filter({$0\
    \ >= 1 && $0 <= 9})\n    let result = valid.sorted().reversed().map({String($0)})\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(by_length(arr: [2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmpe2kaz9ha/tmpe2kaz9ha.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac1401aec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac13fea5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac13fea5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac13fea47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe2kaz9ha                        0x000056330f6459d1 <unavailable> + 6609

    5    libc.so.6                          0x00002ac14039a460 __libc_start_main +
    245

    6    tmpe2kaz9ha                        0x000056330f645479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660014073
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    return arr.sorted(by:\
    \ <).filter({$0 >= 1 && $0 <= 9}).reversed().map({\n        switch $0 {\n    \
    \    case 1:\n            return \"One\"\n        case 2:\n            return\
    \ \"Two\"\n        case 3:\n            return \"Three\"\n        case 4:\n  \
    \          return \"Four\"\n        case 5:\n            return \"Five\"\n   \
    \     case 6:\n            return \"Six\"\n        case 7:\n            return\
    \ \"Seven\"\n        case 8:\n            return \"Eight\"\n        case 9:\n\
    \            return \"Nine\"\n        default:\n            return \"\"\n    \
    \    }\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(by_length(arr: [2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014073
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let ints = arr.filter({\
    \ $0 > 0 && $0 < 10 })\n    let sortedInts = ints.sorted()\n    let reversedInts\
    \ = sortedInts.reversed()\n    let stringDigits = reversedInts.map({ \"\\($0)\"\
    \ })\n    let intDigits = stringDigits.map({ Int($0) })\n    let numberNames =\
    \ intDigits.map({ getNumberName(number: $0!) })\n    return numberNames\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmp6_8g7oz3.swift:20:39: error: cannot find 'getNumberName' in scope\n\
    \    let numberNames = intDigits.map({ getNumberName(number: $0!) })\n       \
    \                               ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014073
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n  return []\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: Exception
  stderr: 'tmpqu3zd3sc/tmpqu3zd3sc.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4f0e5fbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4f0e2f2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4f0e2f2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4f0e2f17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqu3zd3sc                        0x000055aa76b3a621 <unavailable> + 5665

    5    libc.so.6                          0x00002b4f0e7e7460 __libc_start_main +
    245

    6    tmpqu3zd3sc                        0x000055aa76b3a0c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1660014071
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    var output = [String]()\n\
    \    var numbers = arr.filter { $0 > 0 && $0 < 10 }\n    if numbers.count > 0\
    \ {\n        numbers.sort()\n        numbers.reverse()\n        for number in\
    \ numbers {\n            switch number {\n            case 1:\n              \
    \  output.append(\"One\")\n            case 2:\n                output.append(\"\
    Two\")\n            case 3:\n                output.append(\"Three\")\n      \
    \      case 4:\n                output.append(\"Four\")\n            case 5:\n\
    \                output.append(\"Five\")\n            case 6:\n              \
    \  output.append(\"Six\")\n            case 7:\n                output.append(\"\
    Seven\")\n            case 8:\n                output.append(\"Eight\")\n    \
    \        case 9:\n                output.append(\"Nine\")\n            default:\n\
    \                break\n            }\n        }\n    }\n    return output\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014073
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let digits = [0:\"\
    Zero\", 1:\"One\", 2:\"Two\", 3:\"Three\", 4:\"Four\", 5:\"Five\", 6:\"Six\",\
    \ 7:\"Seven\", 8:\"Eight\", 9:\"Nine\"]\n    let a = arr.filter({$0 >= 1 && $0\
    \ <= 9}).sorted()\n    var result = [String]()\n    for num in a.reversed() {\n\
    \        if let digit = digits[num] {\n            result.append(digit)\n    \
    \    }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014073
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    return []\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: Exception
  stderr: 'tmpl4uzplmu/tmpl4uzplmu.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b98fac9fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b98fa996b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b98fa996988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b98fa9957b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpl4uzplmu                        0x0000555967468621 <unavailable> + 5665

    5    libc.so.6                          0x00002b98fae8b460 __libc_start_main +
    245

    6    tmpl4uzplmu                        0x00005559674680c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1660013892
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    // TODO: Implement\
    \ by_length(_:)\n    return arr.sorted(by: <).filter { $0 > 0 && $0 < 10 }.reversed().map\
    \ {\n        switch $0 {\n        case 1:\n            return \"One\"\n      \
    \  case 2:\n            return \"Two\"\n        case 3:\n            return \"\
    Three\"\n        case 4:\n            return \"Four\"\n        case 5:\n     \
    \       return \"Five\"\n        case 6:\n            return \"Six\"\n       \
    \ case 7:\n            return \"Seven\"\n        case 8:\n            return \"\
    Eight\"\n        case 9:\n            return \"Nine\"\n        default:\n    \
    \        return \"Some other number\"\n        }\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014073
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    if (arr.isEmpty)\
    \ {\n        return [];\n    }\n    var output: [String] = [];\n    let sortedArray\
    \ = arr.sorted(by: { $0 < $1 });\n    for i in sortedArray {\n        switch i\
    \ {\n        case 1:\n            output.append(\"One\");\n        case 2:\n \
    \           output.append(\"Two\");\n        case 3:\n            output.append(\"\
    Three\");\n        case 4:\n            output.append(\"Four\");\n        case\
    \ 5:\n            output.append(\"Five\");\n        case 6:\n            output.append(\"\
    Six\");\n        case 7:\n            output.append(\"Seven\");\n        case\
    \ 8:\n            output.append(\"Eight\");\n        case 9:\n            output.append(\"\
    Nine\");\n        default:\n            break;\n        }\n    }\n    output.reverse();\n\
    \    return output;\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(by_length(arr: [2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014073
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    return arr.filter\
    \ { $0 > 0 && $0 < 10 }.sorted().reversed().map { _ in \"\" }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmpvrbme6ya/tmpvrbme6ya.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4dcc4fcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4dcc1f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4dcc1f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4dcc1f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvrbme6ya                        0x00005634ffb93911 <unavailable> + 6417

    5    libc.so.6                          0x00002b4dcc6e8460 __libc_start_main +
    245

    6    tmpvrbme6ya                        0x00005634ffb933b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660014073
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    if arr.isEmpty {\n\
    \        return []\n    }\n    return arr.filter { $0 > 0 && $0 < 10 }.sorted().reversed().map\
    \ { String(describing: Number(rawValue: $0)!) }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpv1hfwarq.swift:18:90: error: cannot find 'Number' in scope\n  \
    \  return arr.filter { $0 > 0 && $0 < 10 }.sorted().reversed().map { String(describing:\
    \ Number(rawValue: $0)!) }\n                                                 \
    \                                        ^~~~~~\n"
  stdout: ''
  timestamp: 1660014073
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let allWords = [\"\
    One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\",\
    \ \"Nine\"]\n    var newArray = [String]()\n    for item in arr {\n        if\
    \ allWords.contains(allWords[item-1]){\n            newArray.append(allWords[item-1])\n\
    \        }\n    }\n    return newArray.reversed()\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmpj50xkmfu/tmpj50xkmfu.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7146f48c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7146c3fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7146c3f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7146c3e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj50xkmfu                        0x00005590c167d951 <unavailable> + 6481

    5    libc.so.6                          0x00002b7147134460 __libc_start_main +
    245

    6    tmpj50xkmfu                        0x00005590c167d3f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1660014073
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let rtn: [String]\
    \ = []\n    return rtn\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmp5z12y948/tmp5z12y948.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2fbde59c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2fbdb50b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2fbdb50988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2fbdb4f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5z12y948                        0x000055821fa99621 <unavailable> + 5665

    5    libc.so.6                          0x00002b2fbe045460 __libc_start_main +
    245

    6    tmp5z12y948                        0x000055821fa990c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1660014073
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let validDigits =\
    \ arr.filter({ $0 >= 1 && $0 <= 9 })\n    let namesOfDigits = validDigits.map({\
    \ digitToName(digit: $0) })\n    return namesOfDigits.reversed()\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpepdih5ha.swift:16:43: error: cannot find 'digitToName' in scope\n\
    \    let namesOfDigits = validDigits.map({ digitToName(digit: $0) })\n       \
    \                                   ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014073
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let dict = [1: \"\
    One\", 2: \"Two\", 3: \"Three\", 4: \"Four\", 5: \"Five\", 6: \"Six\", 7: \"Seven\"\
    , 8: \"Eight\", 9: \"Nine\"]\n    let sorted = arr.filter({dict[$0] != nil}).sorted()\n\
    \    return sorted.map({dict[$0]!}).reversed()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014073
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let temp = arr.filter({$0\
    \ > 0 && $0 < 10}).sorted(by: >)\n    return temp.map({String($0)})\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: Exception
  stderr: 'tmp8hrgqgec/tmp8hrgqgec.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6b9be37c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6b9bb2eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6b9bb2e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6b9bb2d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8hrgqgec                        0x00005570d39458d1 <unavailable> + 6353

    5    libc.so.6                          0x00002b6b9c023460 __libc_start_main +
    245

    6    tmp8hrgqgec                        0x00005570d3945379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660014073
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let sortedByLength\
    \ = arr.filter { $0 >= 1 && $0 <= 9 }.sorted()\n    let words = sortedByLength.map\
    \ { $0.getWord() }\n    return words.reversed()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpg695w0g_.swift:16:41: error: value of type 'Int' has no member\
    \ 'getWord'\n    let words = sortedByLength.map { $0.getWord() }\n           \
    \                          ~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1660014073
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let sorted_arr =\
    \ arr.filter({$0 >= 1 && $0 <= 9}).sorted(by: {$0 < $1})\n    let reversed_arr\
    \ = sorted_arr.reversed()\n    let arr_of_strings = reversed_arr.map({String($0)})\n\
    \    let result_arr = arr_of_strings.map({Int($0)!})\n    \n    var new_arr: [String]\
    \ = []\n    \n    for i in result_arr {\n        switch i {\n        case 1:\n\
    \            new_arr.append(\"One\")\n        case 2:\n            new_arr.append(\"\
    Two\")\n        case 3:\n            new_arr.append(\"Three\")\n        case 4:\n\
    \            new_arr.append(\"Four\")\n        case 5:\n            new_arr.append(\"\
    Five\")\n        case 6:\n            new_arr.append(\"Six\")\n        case 7:\n\
    \            new_arr.append(\"Seven\")\n        case 8:\n            new_arr.append(\"\
    Eight\")\n        case 9:\n            new_arr.append(\"Nine\")\n        default:\n\
    \            new_arr.append(\"\")\n        }\n    }\n    return new_arr\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014073
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    return arr.filter\
    \ { $0 > 0 && $0 < 10 }.sorted(by: >).map { digitToWord(digit: $0) }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpaxmqg00c.swift:15:65: error: cannot find 'digitToWord' in scope\n\
    \    return arr.filter { $0 > 0 && $0 < 10 }.sorted(by: >).map { digitToWord(digit:\
    \ $0) }\n                                                                ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014073
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    var sortedArray =\
    \ arr.filter { $0 >= 1 && $0 <= 9 }.sorted(by: >)\n    let namesArray = [\"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    ]\n    return sortedArray.map { (number) -> String in\n        let index = number\
    \ - 1\n        return namesArray[index]\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014073
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n  return []\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: Exception
  stderr: 'tmpqu3zd3sc/tmpqu3zd3sc.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4f0e5fbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4f0e2f2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4f0e2f2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4f0e2f17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqu3zd3sc                        0x000055aa76b3a621 <unavailable> + 5665

    5    libc.so.6                          0x00002b4f0e7e7460 __libc_start_main +
    245

    6    tmpqu3zd3sc                        0x000055aa76b3a0c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1660014071
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let digits = arr.filter\
    \ { number in\n        return number > 0 && number < 10\n    }\n    let sorted\
    \ = digits.sorted { $0 < $1 }\n    let reversed = sorted.reversed()\n    return\
    \ reversed.map { number in\n        return String(number)\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: Exception
  stderr: 'tmpejgjff0c/tmpejgjff0c.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acea0d64c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acea0a5bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acea0a5b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acea0a5a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpejgjff0c                        0x000055c69a7479a1 <unavailable> + 6561

    5    libc.so.6                          0x00002acea0f50460 __libc_start_main +
    245

    6    tmpejgjff0c                        0x000055c69a747449 <unavailable> + 5193

    '
  stdout: ''
  timestamp: 1660014073
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    return []\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: Exception
  stderr: 'tmpl4uzplmu/tmpl4uzplmu.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b98fac9fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b98fa996b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b98fa996988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b98fa9957b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpl4uzplmu                        0x0000555967468621 <unavailable> + 5665

    5    libc.so.6                          0x00002b98fae8b460 __libc_start_main +
    245

    6    tmpl4uzplmu                        0x00005559674680c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1660013892
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let words = [\"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    ]\n    var result = arr.filter({(x: Int) -> Bool in x > 0 && x < 10}).sorted(by:\
    \ >).map({(x: Int) -> String in words[x - 1]})\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014073
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    // Implement me!\n\
    \    var result: [String] = []\n    let input = arr.filter{$0 > 0 && $0 < 10}\n\
    \    for item in input {\n        switch item {\n        case 1:\n           \
    \ result.append(\"One\")\n        case 2:\n            result.append(\"Two\")\n\
    \        case 3:\n            result.append(\"Three\")\n        case 4:\n    \
    \        result.append(\"Four\")\n        case 5:\n            result.append(\"\
    Five\")\n        case 6:\n            result.append(\"Six\")\n        case 7:\n\
    \            result.append(\"Seven\")\n        case 8:\n            result.append(\"\
    Eight\")\n        case 9:\n            result.append(\"Nine\")\n        default:\n\
    \            print(\"Wrong!\")\n        }\n    }\n    return result.sorted().reversed()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: Exception
  stderr: 'tmpxxepgr0r/tmpxxepgr0r.swift:58: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abaaa545c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abaaa23cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abaaa23c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abaaa23b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxxepgr0r                        0x0000563a9e5fbad1 <unavailable> + 6865

    5    libc.so.6                          0x00002abaaa731460 __libc_start_main +
    245

    6    tmpxxepgr0r                        0x0000563a9e5fb579 <unavailable> + 5497

    '
  stdout: ''
  timestamp: 1660014073
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    // Write the code\
    \ here\n    let validArray = arr.filter { (number) -> Bool in\n        return\
    \ number > 0 && number < 10\n    }\n    let mapArray = validArray.map { (number)\
    \ -> String in\n        switch number {\n        case 1:\n            return \"\
    One\"\n        case 2:\n            return \"Two\"\n        case 3:\n        \
    \    return \"Three\"\n        case 4:\n            return \"Four\"\n        case\
    \ 5:\n            return \"Five\"\n        case 6:\n            return \"Six\"\
    \n        case 7:\n            return \"Seven\"\n        case 8:\n           \
    \ return \"Eight\"\n        case 9:\n            return \"Nine\"\n        default:\n\
    \            return \"\"\n        }\n    }\n    return mapArray.sorted(by: {$0\
    \ > $1})\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(by_length(arr: [2, 1,\
    \ 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmpkxgk77qd/tmpkxgk77qd.swift:59: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b25ae342c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b25ae039b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b25ae039988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b25ae0387b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkxgk77qd                        0x000055fb526f7891 <unavailable> + 6289

    5    libc.so.6                          0x00002b25ae52e460 __libc_start_main +
    245

    6    tmpkxgk77qd                        0x000055fb526f7339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1660014073
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let range = 1...9\n\
    \    let int2string = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\"\
    , \"Seven\", \"Eight\", \"Nine\"]\n    let s = arr.filter({ range.contains($0)\
    \ }).sorted().map({ int2string[$0 - 1] }).reversed()\n    return s\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmp9hfc3tft.swift:18:12: error: cannot convert return expression of\
    \ type 'ReversedCollection<[String]>' to return type '[String]'\n    return s\n\
    \           ^\n"
  stdout: ''
  timestamp: 1660014073
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    if arr.isEmpty {\n\
    \        return []\n    }\n    return arr.filter { $0 >= 1 && $0 <= 9 }.sorted().reversed().map\
    \ { String(describing: Digit(rawValue: $0)!) }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpqwbapbcg.swift:18:91: error: cannot find 'Digit' in scope\n   \
    \ return arr.filter { $0 >= 1 && $0 <= 9 }.sorted().reversed().map { String(describing:\
    \ Digit(rawValue: $0)!) }\n                                                  \
    \                                        ^~~~~\n"
  stdout: ''
  timestamp: 1660014073
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    var res: [String]\
    \ = []\n    let dict: [Int: String] = [1: \"One\", 2: \"Two\", 3: \"Three\", 4:\
    \ \"Four\", 5: \"Five\", 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"]\n\
    \    for digit in arr {\n        if dict[digit] != nil {\n            res.append(dict[digit]!)\n\
    \        }\n    }\n    res.sort()\n    return res.reversed()\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmpcm_juq70/tmpcm_juq70.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b310bff8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b310bcefb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b310bcef988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b310bcee7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcm_juq70                        0x0000563407070af1 <unavailable> + 6897

    5    libc.so.6                          0x00002b310c1e4460 __libc_start_main +
    245

    6    tmpcm_juq70                        0x0000563407070599 <unavailable> + 5529

    '
  stdout: ''
  timestamp: 1660014073
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    return arr.filter\
    \ { $0 > 0 && $0 < 10 }.sorted(by: <).reversed().map { \"\\($0)\" }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: Exception
  stderr: 'tmp2_j_7qhw/tmp2_j_7qhw.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af8fe0d0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af8fddc7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af8fddc7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af8fddc67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2_j_7qhw                        0x000055f180f1eb41 <unavailable> + 6977

    5    libc.so.6                          0x00002af8fe2bc460 __libc_start_main +
    245

    6    tmp2_j_7qhw                        0x000055f180f1e5e9 <unavailable> + 5609

    '
  stdout: ''
  timestamp: 1660014073
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    // your code here\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: '/tmp/tmp6gjw0epc.swift:16:1: error: missing return in global function expected
    to return ''[String]''

    }

    ^

    '
  stdout: ''
  timestamp: 1660014072
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let set = Set(arr)\n\
    \    if set.isEmpty {\n        return []\n    }\n    let sortedSet = set.sorted()\n\
    \    let validIntegers = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    var validArray = [Int]()\n\
    \    var result: [String] = []\n    for int in sortedSet {\n        if validIntegers.contains(int)\
    \ {\n            validArray.append(int)\n        }\n    }\n    for number in validArray.reversed()\
    \ {\n        switch number {\n        case 1:\n            result.append(\"One\"\
    )\n        case 2:\n            result.append(\"Two\")\n        case 3:\n    \
    \        result.append(\"Three\")\n        case 4:\n            result.append(\"\
    Four\")\n        case 5:\n            result.append(\"Five\")\n        case 6:\n\
    \            result.append(\"Six\")\n        case 7:\n            result.append(\"\
    Seven\")\n        case 8:\n            result.append(\"Eight\")\n        case\
    \ 9:\n            result.append(\"Nine\")\n        default:\n            print(\"\
    Something wrong\")\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmpbix322rw/tmpbix322rw.swift:68: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af596523c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af59621ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af59621a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af5962197b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbix322rw                        0x000055945b997e01 <unavailable> + 7681

    5    libc.so.6                          0x00002af59670f460 __libc_start_main +
    245

    6    tmpbix322rw                        0x000055945b9978a9 <unavailable> + 6313

    '
  stdout: ''
  timestamp: 1660014073
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let digit = [1:\"\
    One\", 2:\"Two\", 3:\"Three\", 4:\"Four\", 5:\"Five\", 6:\"Six\", 7:\"Seven\"\
    , 8:\"Eight\", 9:\"Nine\"]\n    let sorted = arr.filter{ $0 >= 1 && $0 <= 9 }.sorted()\n\
    \    return sorted.reversed().map{ digit[$0]! }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014073
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let digits = [\n\
    \        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"\
    Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n  \
    \      8: \"Eight\",\n        9: \"Nine\"\n    ]\n    let sortArray = arr.filter({\
    \ (element) -> Bool in\n        return element >= 1 && element <= 9\n    }).sorted()\n\
    \    let reverseArray = sortArray.reversed()\n    let result = reverseArray.map({\
    \ (element) -> String in\n        return digits[element]!\n    })\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(by_length(arr: [2, 1,\
    \ 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014073
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    return arr.filter\
    \ {\n        $0 >= 1 && $0 <= 9\n    }.sorted().reversed().map {\n        String($0)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(by_length(arr: [2, 1, 1,\
    \ 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmp_tjxb6ll/tmp_tjxb6ll.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b49406c8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b49403bfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b49403bf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b49403be7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_tjxb6ll                        0x000055e9163cc9d1 <unavailable> + 6609

    5    libc.so.6                          0x00002b49408b4460 __libc_start_main +
    245

    6    tmp_tjxb6ll                        0x000055e9163cc479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660014073
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter\
    \ { $0 >= 1 && $0 <= 9 }.sorted()\n    let reversed = sorted.reversed()\n    let\
    \ mapped = reversed.map { String($0) }\n    return mapped\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmp8ivev5sl/tmp8ivev5sl.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b11dc4ebc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b11dc1e2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b11dc1e2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b11dc1e17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8ivev5sl                        0x000055eb46c949d1 <unavailable> + 6609

    5    libc.so.6                          0x00002b11dc6d7460 __libc_start_main +
    245

    6    tmp8ivev5sl                        0x000055eb46c94479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660013892
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter\
    \ { $0 >= 1 && $0 <= 9 }.sorted()\n    return sorted.map { String($0) }.reversed()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: Exception
  stderr: 'tmpou05c_bs/tmpou05c_bs.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5780817c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b578050eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b578050e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b578050d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpou05c_bs                        0x00005566bb813961 <unavailable> + 6497

    5    libc.so.6                          0x00002b5780a03460 __libc_start_main +
    245

    6    tmpou05c_bs                        0x00005566bb813409 <unavailable> + 5129

    '
  stdout: ''
  timestamp: 1660013893
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    return []\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: Exception
  stderr: 'tmpl4uzplmu/tmpl4uzplmu.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b98fac9fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b98fa996b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b98fa996988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b98fa9957b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpl4uzplmu                        0x0000555967468621 <unavailable> + 5665

    5    libc.so.6                          0x00002b98fae8b460 __libc_start_main +
    245

    6    tmpl4uzplmu                        0x00005559674680c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1660013892
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    // Fill in your code\
    \ here:\n    var result: [String] = []\n    for number in arr {\n        switch\
    \ number {\n        case 1:\n            result.append(\"One\")\n        case\
    \ 2:\n            result.append(\"Two\")\n        case 3:\n            result.append(\"\
    Three\")\n        case 4:\n            result.append(\"Four\")\n        case 5:\n\
    \            result.append(\"Five\")\n        case 6:\n            result.append(\"\
    Six\")\n        case 7:\n            result.append(\"Seven\")\n        case 8:\n\
    \            result.append(\"Eight\")\n        case 9:\n            result.append(\"\
    Nine\")\n        default:\n            break\n        }\n    }\n    return result.sorted().reversed()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: Exception
  stderr: 'tmpwsidot3o/tmpwsidot3o.swift:57: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b29bef65c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b29bec5cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b29bec5c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b29bec5b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwsidot3o                        0x0000561650ede8f1 <unavailable> + 6385

    5    libc.so.6                          0x00002b29bf151460 __libc_start_main +
    245

    6    tmpwsidot3o                        0x0000561650ede399 <unavailable> + 5017

    '
  stdout: ''
  timestamp: 1660014073
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let array = arr.filter\
    \ { $0 >= 1 && $0 <= 9 }.sorted()\n    let reversed = array.reversed()\n    return\
    \ reversed.map { String($0) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmp_giyqko5/tmp_giyqko5.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b55d7a66c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b55d775db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b55d775d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b55d775c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_giyqko5                        0x0000558e032709d1 <unavailable> + 6609

    5    libc.so.6                          0x00002b55d7c52460 __libc_start_main +
    245

    6    tmp_giyqko5                        0x0000558e03270479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660014073
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    var arr = arr.filter({(i:\
    \ Int) -> Bool in i >= 1 && i <= 9}).sorted().reversed()\n    for i in 0..<arr.count\
    \ {\n        switch arr[i] {\n        case 1:\n            arr[i] = \"One\"\n\
    \        case 2:\n            arr[i] = \"Two\"\n        case 3:\n            arr[i]\
    \ = \"Three\"\n        case 4:\n            arr[i] = \"Four\"\n        case 5:\n\
    \            arr[i] = \"Five\"\n        case 6:\n            arr[i] = \"Six\"\n\
    \        case 7:\n            arr[i] = \"Seven\"\n        case 8:\n          \
    \  arr[i] = \"Eight\"\n        case 9:\n            arr[i] = \"Nine\"\n      \
    \  default:\n            break\n        }\n    }\n    return arr\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpoxh9j2p1.swift:17:19: error: no exact matches in call to subscript\
    \ \n        switch arr[i] {\n                  ^\nSwift.ReversedCollection:9:23:\
    \ note: candidate expects value of type 'ReversedCollection<[Int]>.Index' for\
    \ parameter #1 (got 'Int')\n    @inlinable public subscript(position: ReversedCollection<Base>.Index)\
    \ -> ReversedCollection<Base>.Element { get }\n                      ^\nSwift.Collection:2:23:\
    \ note: candidate expects value of type 'Range<ReversedCollection<[Int]>.Index>'\
    \ for parameter #1 (got 'Int')\n    @inlinable public subscript(bounds: Range<Self.Index>)\
    \ -> Slice<Self> { get }\n                      ^\nSwift.Collection:3:23: note:\
    \ candidate expects value of type '(UnboundedRange_) -> ()' for parameter #1 (got\
    \ 'Int')\n    @inlinable public subscript(x: (UnboundedRange_) -> ()) -> Self.SubSequence\
    \ { get }\n                      ^\n/tmp/tmpoxh9j2p1.swift:19:16: error: no exact\
    \ matches in call to subscript \n            arr[i] = \"One\"\n              \
    \ ^\n/tmp/tmpoxh9j2p1.swift:19:16: note: found candidate with type '(ReversedCollection<[Int]>.Index)\
    \ -> Int'\n            arr[i] = \"One\"\n               ^\n/tmp/tmpoxh9j2p1.swift:19:16:\
    \ note: found candidate with type '(Range<ReversedCollection<[Int]>.Index>) ->\
    \ Slice<ReversedCollection<[Int]>>'\n            arr[i] = \"One\"\n          \
    \     ^\n/tmp/tmpoxh9j2p1.swift:19:16: note: found candidate with type '((UnboundedRange_)\
    \ -> ()) -> Slice<ReversedCollection<[Int]>>'\n            arr[i] = \"One\"\n\
    \               ^\n/tmp/tmpoxh9j2p1.swift:21:16: error: no exact matches in call\
    \ to subscript \n            arr[i] = \"Two\"\n               ^\n/tmp/tmpoxh9j2p1.swift:21:16:\
    \ note: found candidate with type '(ReversedCollection<[Int]>.Index) -> Int'\n\
    \            arr[i] = \"Two\"\n               ^\n/tmp/tmpoxh9j2p1.swift:21:16:\
    \ note: found candidate with type '(Range<ReversedCollection<[Int]>.Index>) ->\
    \ Slice<ReversedCollection<[Int]>>'\n            arr[i] = \"Two\"\n          \
    \     ^\n/tmp/tmpoxh9j2p1.swift:21:16: note: found candidate with type '((UnboundedRange_)\
    \ -> ()) -> Slice<ReversedColle"
  stdout: ''
  timestamp: 1660014073
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    return arr.filter({\
    \ $0 > 0 && $0 < 10 }).sorted().reversed().map({ String($0) })\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmp559dts12/tmp559dts12.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1bad026c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1bacd1db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1bacd1d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1bacd1c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp559dts12                        0x00005629822539d1 <unavailable> + 6609

    5    libc.so.6                          0x00002b1bad212460 __libc_start_main +
    245

    6    tmp559dts12                        0x0000562982253479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660013892
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    // your code here\n\
    \    var newArray: [String] = []\n    for i in arr {\n        switch i {\n   \
    \     case 1:\n            newArray.append(\"One\")\n        case 2:\n       \
    \     newArray.append(\"Two\")\n        case 3:\n            newArray.append(\"\
    Three\")\n        case 4:\n            newArray.append(\"Four\")\n        case\
    \ 5:\n            newArray.append(\"Five\")\n        case 6:\n            newArray.append(\"\
    Six\")\n        case 7:\n            newArray.append(\"Seven\")\n        case\
    \ 8:\n            newArray.append(\"Eight\")\n        case 9:\n            newArray.append(\"\
    Nine\")\n        default:\n            break\n        }\n    }\n    return newArray.sorted(by:\
    \ >)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5,\
    \ 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"\
    One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr:\
    \ [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\"\
    , \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: Exception
  stderr: 'tmp_id6_zk3/tmp_id6_zk3.swift:57: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b48e333dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b48e3034b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b48e3034988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b48e30337b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_id6_zk3                        0x00005597987268b1 <unavailable> + 6321

    5    libc.so.6                          0x00002b48e3529460 __libc_start_main +
    245

    6    tmp_id6_zk3                        0x0000559798726359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660014073
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    var str_arr = [String]()\n\
    \    var int_arr = [Int]()\n    for item in arr {\n        if item >= 1 && item\
    \ <= 9 {\n            int_arr.append(item)\n        }\n    }\n    int_arr.sort()\n\
    \    int_arr.reverse()\n    for item in int_arr {\n        switch item {\n   \
    \     case 1:\n            str_arr.append(\"One\")\n        case 2:\n        \
    \    str_arr.append(\"Two\")\n        case 3:\n            str_arr.append(\"Three\"\
    )\n        case 4:\n            str_arr.append(\"Four\")\n        case 5:\n  \
    \          str_arr.append(\"Five\")\n        case 6:\n            str_arr.append(\"\
    Six\")\n        case 7:\n            str_arr.append(\"Seven\")\n        case 8:\n\
    \            str_arr.append(\"Eight\")\n        case 9:\n            str_arr.append(\"\
    Nine\")\n        default:\n            print(\"\")\n        }\n    }\n    return\
    \ str_arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(by_length(arr: [2, 1,\
    \ 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014073
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter\
    \ { $0 >= 1 && $0 <= 9 }.sorted()\n    let reversed = sorted.reversed()\n    let\
    \ text = reversed.map {\n        switch $0 {\n        case 1: return \"One\"\n\
    \        case 2: return \"Two\"\n        case 3: return \"Three\"\n        case\
    \ 4: return \"Four\"\n        case 5: return \"Five\"\n        case 6: return\
    \ \"Six\"\n        case 7: return \"Seven\"\n        case 8: return \"Eight\"\n\
    \        case 9: return \"Nine\"\n        default: return \"Something went wrong\"\
    \n        }\n    }\n    return text\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as\
    \ [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"])\n\
    assert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014073
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    // Int => String\n\
    \    let numbersDictionary = [\n        1: \"One\",\n        2: \"Two\",\n   \
    \     3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6: \"\
    Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\"\n  \
    \  ]\n    \n    let filteredArr = arr.filter { $0 > 0 && $0 < 10 }\n    let sortedArr\
    \ = filteredArr.sorted { $0 < $1 }\n    let reversedArr = sortedArr.reversed()\n\
    \    let mappedArr = reversedArr.map { String(numbersDictionary[$0]!) }\n    \n\
    \    return mappedArr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014073
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    // your code here\n\
    \    return []\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(by_length(arr: [2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmpluoqkt6k/tmpluoqkt6k.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba0fda83c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba0fd77ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba0fd77a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba0fd7797b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpluoqkt6k                        0x0000556384fd6621 <unavailable> + 5665

    5    libc.so.6                          0x00002ba0fdc6f460 __libc_start_main +
    245

    6    tmpluoqkt6k                        0x0000556384fd60c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1660013893
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let valid = arr.filter\
    \ { $0 >= 1 && $0 <= 9 }\n    return valid.sorted().reversed().map { \"One\",\
    \ \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    \ }[$0 - 1]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(by_length(arr: [2, 1,\
    \ 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpjpkx65vf.swift:16:49: error: consecutive statements on a line must\
    \ be separated by ';'\n    return valid.sorted().reversed().map { \"One\", \"\
    Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    \ }[$0 - 1]\n                                                ^\n             \
    \                                   ;\n/tmp/tmpjpkx65vf.swift:16:49: error: expected\
    \ expression\n    return valid.sorted().reversed().map { \"One\", \"Two\", \"\
    Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\" }[$0 - 1]\n\
    \                                                ^\n/tmp/tmpjpkx65vf.swift:16:117:\
    \ error: anonymous closure argument not contained in a closure\n    return valid.sorted().reversed().map\
    \ { \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\"\
    , \"Nine\" }[$0 - 1]\n                                                       \
    \                                                             ^\n/tmp/tmpjpkx65vf.swift:16:42:\
    \ error: contextual type for closure argument list expects 1 argument, which cannot\
    \ be implicitly ignored\n    return valid.sorted().reversed().map { \"One\", \"\
    Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    \ }[$0 - 1]\n                                         ^\n                    \
    \                       _ in\n"
  stdout: ''
  timestamp: 1660014073
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    \n    // TODO: -\
    \ write some code to solve this coding challenge\n    \n    return []\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: Exception
  stderr: 'tmp206z85q7/tmp206z85q7.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b905c165c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b905be5cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b905be5c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b905be5b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp206z85q7                        0x00005654651e5621 <unavailable> + 5665

    5    libc.so.6                          0x00002b905c351460 __libc_start_main +
    245

    6    tmp206z85q7                        0x00005654651e50c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1660014073
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    return arr.filter\
    \ { $0 > 0 && $0 < 10 }.sorted().reversed().map { get_number_name(number: $0)\
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5,\
    \ 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"\
    One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr:\
    \ [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\"\
    , \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpyjs_ok7z.swift:15:71: error: cannot find 'get_number_name' in scope\n\
    \    return arr.filter { $0 > 0 && $0 < 10 }.sorted().reversed().map { get_number_name(number:\
    \ $0) }\n                                                                    \
    \  ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014073
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let copy = arr.filter\
    \ { $0 >= 1 && $0 <= 9 }\n    let res = copy.sorted().reversed().map { num ->\
    \ String in\n        switch num {\n        case 1:\n            return \"One\"\
    \n        case 2:\n            return \"Two\"\n        case 3:\n            return\
    \ \"Three\"\n        case 4:\n            return \"Four\"\n        case 5:\n \
    \           return \"Five\"\n        case 6:\n            return \"Six\"\n   \
    \     case 7:\n            return \"Seven\"\n        case 8:\n            return\
    \ \"Eight\"\n        case 9:\n            return \"Nine\"\n        default:\n\
    \            return \"\"\n        }\n    }\n    return res\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014073
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    \n    let sortedNums\
    \ = arr.filter { (num) -> Bool in\n        if num > 0 && num < 10 {\n        \
    \    return true\n        }\n        return false\n    }.sorted { (first, second)\
    \ -> Bool in\n        return first < second\n    }\n    \n    let reversedNums\
    \ = sortedNums.reversed()\n    \n    let result = reversedNums.map { (num) ->\
    \ String in\n        switch num {\n        case 1:\n            return \"One\"\
    \n        case 2:\n            return \"Two\"\n        case 3:\n            return\
    \ \"Three\"\n        case 4:\n            return \"Four\"\n        case 5:\n \
    \           return \"Five\"\n        case 6:\n            return \"Six\"\n   \
    \     case 7:\n            return \"Seven\"\n        case 8:\n            return\
    \ \"Eight\"\n        case 9:\n            return \"Nine\"\n        default:\n\
    \            return \"\"\n        }\n    }\n    \n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014073
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    return []\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: Exception
  stderr: 'tmpl4uzplmu/tmpl4uzplmu.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b98fac9fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b98fa996b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b98fa996988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b98fa9957b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpl4uzplmu                        0x0000555967468621 <unavailable> + 5665

    5    libc.so.6                          0x00002b98fae8b460 __libc_start_main +
    245

    6    tmpl4uzplmu                        0x00005559674680c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1660013892
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let filtered = arr.filter\
    \ { $0 >= 1 && $0 <= 9 }\n    let sorted = filtered.sorted()\n    let reversed\
    \ = sorted.reversed()\n    let names = reversed.map { num in\n        switch num\
    \ {\n        case 1: return \"One\"\n        case 2: return \"Two\"\n        case\
    \ 3: return \"Three\"\n        case 4: return \"Four\"\n        case 5: return\
    \ \"Five\"\n        case 6: return \"Six\"\n        case 7: return \"Seven\"\n\
    \        case 8: return \"Eight\"\n        case 9: return \"Nine\"\n        default:\
    \ return \"\"\n        }\n    }\n    return names\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014074
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    var arr = arr.filter\
    \ { $0 >= 1 && $0 <= 9 }\n    arr.sort()\n    arr.reverse()\n    return arr.map\
    \ { \"\\($0)\" }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(by_length(arr: [2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmpab2twm8k/tmpab2twm8k.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac084605c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac0842fcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac0842fc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac0842fb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpab2twm8k                        0x000055faf91debb1 <unavailable> + 7089

    5    libc.so.6                          0x00002ac0847f1460 __libc_start_main +
    245

    6    tmpab2twm8k                        0x000055faf91de659 <unavailable> + 5721

    '
  stdout: ''
  timestamp: 1660014074
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    \n    //Create filtered\
    \ array containing only numbers between 1 and 9\n    let inBounds = arr.filter({\
    \ (number) -> Bool in\n        number > 0 && number < 10\n    })\n    \n    //create\
    \ dictionary of numbers\n    let numDict = [1: \"One\", 2: \"Two\", 3: \"Three\"\
    , 4: \"Four\", 5: \"Five\", 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"\
    ]\n    \n    //reverse array of numbers from 1 to 9\n    let arrayReversed = inBounds.reversed()\n\
    \    \n    //map to return the values of dictionary for the keys in reversed array\n\
    \    let mappedArr = arrayReversed.map({ (number) -> String in\n        numDict[number]!\n\
    \    })\n    \n    return mappedArr\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as\
    \ [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"])\n\
    assert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmpkmwgvvv4/tmpkmwgvvv4.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af2756abc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af2753a2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af2753a2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af2753a17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkmwgvvv4                        0x00005585f98739f1 <unavailable> + 6641

    5    libc.so.6                          0x00002af275897460 __libc_start_main +
    245

    6    tmpkmwgvvv4                        0x00005585f9873499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1660014074
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let numbers = arr.filter\
    \ { $0 > 0 && $0 < 10 }\n    let sorted = numbers.sorted(by: >)\n    let names\
    \ = [\"\", \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\"]\n    return sorted.map { names[$0] }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014074
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    if arr.isEmpty {\n\
    \        return []\n    }\n    let sortedArr = arr.filter { $0 >= 1 && $0 <= 9\
    \ }.sorted()\n    return sortedArr.map { digitName($0) }.reversed()\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpknrrmqp_.swift:19:28: error: cannot find 'digitName' in scope\n\
    \    return sortedArr.map { digitName($0) }.reversed()\n                     \
    \      ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014073
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let arr1 = arr.filter\
    \ { $0 >= 1 && $0 <= 9 }\n    let arr2 = arr1.sorted { $0 < $1 }\n    let arr3\
    \ = arr2.reversed()\n    let numberNames = [\"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    let arr4 = arr3.map\
    \ { numberNames[$0 - 1] }\n    return arr4\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014074
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    var result: [String]\
    \ = []\n    if arr.count == 0 {\n        return result\n    }\n    var sortedArr\
    \ = arr.filter { $0 >= 1 && $0 <= 9 }.sorted()\n    sortedArr.reverse()\n    for\
    \ item in sortedArr {\n        switch item {\n        case 1:\n            result.append(\"\
    One\")\n        case 2:\n            result.append(\"Two\")\n        case 3:\n\
    \            result.append(\"Three\")\n        case 4:\n            result.append(\"\
    Four\")\n        case 5:\n            result.append(\"Five\")\n        case 6:\n\
    \            result.append(\"Six\")\n        case 7:\n            result.append(\"\
    Seven\")\n        case 8:\n            result.append(\"Eight\")\n        case\
    \ 9:\n            result.append(\"Nine\")\n        default:\n            result.append(\"\
    \")\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as\
    \ [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"])\n\
    assert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014074
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let arrSorted = arr.filter\
    \ { $0 >= 1 && $0 <= 9 }.sorted().reversed()\n    return arrSorted.map { dict[$0]!\
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5,\
    \ 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"\
    One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr:\
    \ [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\"\
    , \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpbpl_o208.swift:16:28: error: cannot find 'dict' in scope\n    return\
    \ arrSorted.map { dict[$0]! }\n                           ^~~~\n"
  stdout: ''
  timestamp: 1660014073
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let names = [\"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    ]\n    let sorted = arr.filter { $0 >= 1 && $0 <= 9 }.sorted().reversed()\n  \
    \  return sorted.map { names[$0 - 1] }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as\
    \ [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"])\n\
    assert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014074
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    \n    let result\
    \ = arr.filter({$0 >= 1 && $0 <= 9}).sorted().reversed().map({String(describing:\
    \ $0)})\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmp_wquvfrt/tmp_wquvfrt.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1db3e6fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1db3b66b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1db3b66988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1db3b657b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_wquvfrt                        0x000055ce23e019d1 <unavailable> + 6609

    5    libc.so.6                          0x00002b1db405b460 __libc_start_main +
    245

    6    tmp_wquvfrt                        0x000055ce23e01479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660014074
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    // [1, -1, 55] ->\
    \ [1]\n    let sorted: [Int] = arr.filter { $0 <= 9 && $0 >= 1 }.sorted()\n  \
    \  // [1] -> [\"One\"]\n    let reversed: [String] = sorted.reversed().map { num\
    \ in\n        switch num {\n        case 1:\n            return \"One\"\n    \
    \    case 2:\n            return \"Two\"\n        case 3:\n            return\
    \ \"Three\"\n        case 4:\n            return \"Four\"\n        case 5:\n \
    \           return \"Five\"\n        case 6:\n            return \"Six\"\n   \
    \     case 7:\n            return \"Seven\"\n        case 8:\n            return\
    \ \"Eight\"\n        case 9:\n            return \"Nine\"\n        default:\n\
    \            return \"\"\n        }\n    }\n    return reversed\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014074
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    var result: [String]\
    \ = []\n    for n in arr {\n        if n >= 1 && n <= 9 {\n            result.append(String(n))\n\
    \        }\n    }\n    result.sort(by: <)\n    var res: [String] = []\n    let\
    \ words = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\"]\n    for s in result {\n        res.append(words[Int(s)!\
    \ - 1])\n    }\n    return res.reversed()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014074
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    return sort(arr:\
    \ arr, operation: \"a\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpsowhj5nb.swift:15:12: error: cannot find 'sort' in scope\n    return\
    \ sort(arr: arr, operation: \"a\")\n           ^~~~\n"
  stdout: ''
  timestamp: 1660014073
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    \n    var newArr:\
    \ [Int] = []\n    var resultArr: [String] = []\n    \n    for element in arr {\n\
    \        if element >= 1 && element <= 9 {\n            newArr.append(element)\n\
    \        }\n    }\n    \n    if newArr.count == 0 {\n        return []\n    }\n\
    \    \n    newArr.sort()\n    newArr.reverse()\n    \n    for element in newArr\
    \ {\n        resultArr.append(numberToString(number: element))\n    }\n    \n\
    \    return resultArr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpr4q3qifd.swift:33:26: error: cannot find 'numberToString' in scope\n\
    \        resultArr.append(numberToString(number: element))\n                 \
    \        ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014073
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    // Your code here\n\
    \    return []\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(by_length(arr: [2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmp6pcl52pj/tmp6pcl52pj.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7ec4570c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7ec4267b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7ec4267988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7ec42667b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6pcl52pj                        0x0000559ca620b621 <unavailable> + 5665

    5    libc.so.6                          0x00002b7ec475c460 __libc_start_main +
    245

    6    tmp6pcl52pj                        0x0000559ca620b0c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1660014074
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let numbers = [1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9]\n    let names = [\"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    var result = [String]()\n\
    \    for number in arr {\n        for index in 0..<numbers.count {\n         \
    \   if number == numbers[index] {\n                result.append(names[index])\n\
    \            }\n        }\n    }\n    return result.reversed()\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmp_nosa9gv/tmp_nosa9gv.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8f5b33dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8f5b034b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8f5b034988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8f5b0337b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_nosa9gv                        0x0000555f2bc6cb21 <unavailable> + 6945

    5    libc.so.6                          0x00002b8f5b529460 __libc_start_main +
    245

    6    tmp_nosa9gv                        0x0000555f2bc6c5c9 <unavailable> + 5577

    '
  stdout: ''
  timestamp: 1660014074
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    // Implement your\
    \ solution here.\n    var result = [String]()\n    var filteredNumbers = [Int]()\n\
    \    for number in arr {\n        if number > 0 && number < 10 {\n           \
    \ filteredNumbers.append(number)\n        }\n    }\n    filteredNumbers.sort(by:\
    \ <)\n    for number in filteredNumbers.reversed() {\n        switch number {\n\
    \        case 1:\n            result.append(\"One\")\n        case 2:\n      \
    \      result.append(\"Two\")\n        case 3:\n            result.append(\"Three\"\
    )\n        case 4:\n            result.append(\"Four\")\n        case 5:\n   \
    \         result.append(\"Five\")\n        case 6:\n            result.append(\"\
    Six\")\n        case 7:\n            result.append(\"Seven\")\n        case 8:\n\
    \            result.append(\"Eight\")\n        case 9:\n            result.append(\"\
    Nine\")\n        default:\n            break\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014074
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    return []\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: Exception
  stderr: 'tmpl4uzplmu/tmpl4uzplmu.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b98fac9fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b98fa996b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b98fa996988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b98fa9957b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpl4uzplmu                        0x0000555967468621 <unavailable> + 5665

    5    libc.so.6                          0x00002b98fae8b460 __libc_start_main +
    245

    6    tmpl4uzplmu                        0x00005559674680c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1660013892
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    return [\"One\"]\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: Exception
  stderr: 'tmpz6ldjitp/tmpz6ldjitp.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b079d5e6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b079d2ddb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b079d2dd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b079d2dc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz6ldjitp                        0x00005623d2360621 <unavailable> + 5665

    5    libc.so.6                          0x00002b079d7d2460 __libc_start_main +
    245

    6    tmpz6ldjitp                        0x00005623d23600c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1660014074
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    \n    var output:\
    \ [String] = []\n    var arr = arr\n    \n    // Sort the integers from 1 to 9\n\
    \    arr.sort()\n    \n    // Extracting all the integers from 1 to 9\n    for\
    \ number in arr {\n        if number > 0 && number < 10 {\n            output.append(String(number))\n\
    \        }\n    }\n    \n    // Replace each digit by its corresponding name from\
    \ \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\"\
    , \"Nine\"\n    for (index, number) in output.enumerated() {\n        switch number\
    \ {\n        case \"1\":\n            output[index] = \"One\"\n        case \"\
    2\":\n            output[index] = \"Two\"\n        case \"3\":\n            output[index]\
    \ = \"Three\"\n        case \"4\":\n            output[index] = \"Four\"\n   \
    \     case \"5\":\n            output[index] = \"Five\"\n        case \"6\":\n\
    \            output[index] = \"Six\"\n        case \"7\":\n            output[index]\
    \ = \"Seven\"\n        case \"8\":\n            output[index] = \"Eight\"\n  \
    \      case \"9\":\n            output[index] = \"Nine\"\n        default:\n \
    \           break\n        }\n    }\n    \n    // Reverse the resulting array\n\
    \    output = output.reversed()\n    \n    return output\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014074
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    var sortedArr = arr.filter\
    \ { $0 > 0 && $0 < 10 }.sorted()\n    sortedArr.reverse()\n    return sortedArr.map\
    \ { numbers[$0] }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(by_length(arr: [2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmp2eybzvy8.swift:17:28: error: cannot find 'numbers' in scope\n \
    \   return sortedArr.map { numbers[$0] }\n                           ^~~~~~~\n"
  stdout: ''
  timestamp: 1660014074
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    return []\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: Exception
  stderr: 'tmpl4uzplmu/tmpl4uzplmu.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b98fac9fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b98fa996b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b98fa996988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b98fa9957b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpl4uzplmu                        0x0000555967468621 <unavailable> + 5665

    5    libc.so.6                          0x00002b98fae8b460 __libc_start_main +
    245

    6    tmpl4uzplmu                        0x00005559674680c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1660013892
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    // Your code goes\
    \ here!\n    return []\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmpkpvyfrkr/tmpkpvyfrkr.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aab1c351c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aab1c048b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aab1c048988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aab1c0477b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkpvyfrkr                        0x0000557ec96ec621 <unavailable> + 5665

    5    libc.so.6                          0x00002aab1c53d460 __libc_start_main +
    245

    6    tmpkpvyfrkr                        0x0000557ec96ec0c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1660014074
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let sortArr = arr.filter({\
    \ $0 > 0 && $0 < 10 }).sorted()\n    let reverseSortArr = sortArr.reversed()\n\
    \    var result: [String] = []\n    for item in reverseSortArr {\n        switch\
    \ item {\n        case 1:\n            result.append(\"One\")\n        case 2:\n\
    \            result.append(\"Two\")\n        case 3:\n            result.append(\"\
    Three\")\n        case 4:\n            result.append(\"Four\")\n        case 5:\n\
    \            result.append(\"Five\")\n        case 6:\n            result.append(\"\
    Six\")\n        case 7:\n            result.append(\"Seven\")\n        case 8:\n\
    \            result.append(\"Eight\")\n        case 9:\n            result.append(\"\
    Nine\")\n        default:\n            break\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014074
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let names = [\"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    ]\n    return arr.sorted().filter({ $0 > 0 && $0 < 10 }).reversed().map({ names[$0\
    \ - 1] })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(by_length(arr: [2, 1,\
    \ 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014074
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let realNumber =\
    \ arr.filter {$0 >= 1 && $0 <= 9}\n    var cDict = [Int: String]()\n    cDict[1]\
    \ = \"One\"\n    cDict[2] = \"Two\"\n    cDict[3] = \"Three\"\n    cDict[4] =\
    \ \"Four\"\n    cDict[5] = \"Five\"\n    cDict[6] = \"Six\"\n    cDict[7] = \"\
    Seven\"\n    cDict[8] = \"Eight\"\n    cDict[9] = \"Nine\"\n    return realNumber.sorted().reversed().map{cDict[$0]!}\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014074
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    return arr.filter\
    \ {$0 >= 1 && $0 <= 9}.sorted().reversed().map {String($0)}\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmpg13gsv7_/tmpg13gsv7_.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4af31d8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4af2ecfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4af2ecf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4af2ece7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg13gsv7_                        0x00005649b5bab9d1 <unavailable> + 6609

    5    libc.so.6                          0x00002b4af33c4460 __libc_start_main +
    245

    6    tmpg13gsv7_                        0x00005649b5bab479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660014074
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    return []\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: Exception
  stderr: 'tmpl4uzplmu/tmpl4uzplmu.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b98fac9fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b98fa996b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b98fa996988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b98fa9957b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpl4uzplmu                        0x0000555967468621 <unavailable> + 5665

    5    libc.so.6                          0x00002b98fae8b460 __libc_start_main +
    245

    6    tmpl4uzplmu                        0x00005559674680c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1660013892
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the\
    \ array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n\
    /// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    return []\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: Exception
  stderr: 'tmpl4uzplmu/tmpl4uzplmu.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b98fac9fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b98fa996b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b98fa996988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b98fa9957b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpl4uzplmu                        0x0000555967468621 <unavailable> + 5665

    5    libc.so.6                          0x00002b98fae8b460 __libc_start_main +
    245

    6    tmpl4uzplmu                        0x00005559674680c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1660013892
