language: swift
name: HumanEval_16_count_distinct_characters
results:
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    let lowercase = string.lowercased()\n    var seenChars\
    \ = Set<Character>()\n    for char in lowercase {\n        seenChars.insert(char)\n\
    \    }\n    return seenChars.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014132
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var s: Set<Character> = []\n    for c in string {\n  \
    \      s.insert(c)\n    }\n    return s.count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmpabzkxscp/tmpabzkxscp.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9175865c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b917555cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b917555c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b917555b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpabzkxscp                        0x0000559ef77c7671 <unavailable> + 5745

    5    libc.so.6                          0x00002b9175a51460 __libc_start_main +
    245

    6    tmpabzkxscp                        0x0000559ef77c71a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660014132
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return Set(string.characters.map { $0.lowercased() }).count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_distinct_characters(string: \"\") == 0)\n\
    assert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpkxvemoi2.swift:8:23: error: 'characters' is unavailable: Please\
    \ use String directly\n    return Set(string.characters.map { $0.lowercased()\
    \ }).count\n                      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1660014132
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n  // your code here!\n  return 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmpnqm9i3b7/tmpnqm9i3b7.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5592015c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5591d0cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5591d0c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5591d0b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnqm9i3b7                        0x000055630551b30a <unavailable> + 4874

    5    libc.so.6                          0x00002b5592201460 __libc_start_main +
    245

    6    tmpnqm9i3b7                        0x000055630551aee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1660014132
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return Set(string.lowercased()).count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014023
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    var dict = [Character: Int]()\n   \
    \ for character in string {\n        if dict[character] == nil {\n           \
    \ dict[character] = 1\n            count += 1\n        }\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_distinct_characters(string: \"\") == 0)\n\
    assert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmp3932jc2p/tmp3932jc2p.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1b66dacc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1b66aa3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1b66aa3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1b66aa27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3932jc2p                        0x000055f3bdf955d1 <unavailable> + 5585

    5    libc.so.6                          0x00002b1b66f98460 __libc_start_main +
    245

    6    tmp3932jc2p                        0x000055f3bdf95109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660014132
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    // Make string lowercase\n    let stringLower = string.lowercased()\n\
    \    // Create empty set for characters\n    var characters: Set<Character> =\
    \ []\n    // Iterate over string and add each character to the set\n    for char\
    \ in stringLower {\n        characters.insert(char)\n    }\n    // Return the\
    \ number of characters in the set\n    return characters.count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014132
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var char_set = Set<Character>()\n    for c in string {\n\
    \        char_set.insert(c)\n    }\n    return char_set.count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmphwmba_mc/tmphwmba_mc.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7b4755ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7b47251b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7b47251988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7b472507b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphwmba_mc                        0x000055cd781e05f1 <unavailable> + 5617

    5    libc.so.6                          0x00002b7b47746460 __libc_start_main +
    245

    6    tmphwmba_mc                        0x000055cd781e0129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014132
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return string.lowercased().count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmp4lr0fcvf/tmp4lr0fcvf.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b51c78c3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b51c75bab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b51c75ba988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b51c75b97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4lr0fcvf                        0x000055af414d5461 <unavailable> + 5217

    5    libc.so.6                          0x00002b51c7aaf460 __libc_start_main +
    245

    6    tmp4lr0fcvf                        0x000055af414d4f99 <unavailable> + 3993

    '
  stdout: ''
  timestamp: 1660014023
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return Array(Set(string.lowercased())).count\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_distinct_characters(string: \"\") == 0)\n\
    assert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014078
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    if string.count < 2 {\n        return string.count\n \
    \   }\n    var chars = string.map { String($0).lowercased() }\n    var count =\
    \ chars.count\n    var set = Set<String>()\n    set.insert(chars[0])\n    for\
    \ i in 1..<chars.count {\n        if set.contains(chars[i]) {\n            count\
    \ -= 1\n        } else {\n            set.insert(chars[i])\n        }\n    }\n\
    \    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_distinct_characters(string:\
    \ \"\") == 0)\nassert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014132
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    let lowercased = string.lowercased()\n    let distinct\
    \ = Set(lowercased)\n    return distinct.count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014132
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    var s = string.lowercased()\n    for\
    \ i in 0..<string.count {\n        let index = s.index(s.startIndex, offsetBy:\
    \ i)\n        if let range = s.range(of: String(s[index]), options: .caseInsensitive,\
    \ range: nil, locale: nil) {\n            count += 1\n            s.removeSubrange(range)\n\
    \        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpx1tno_v1.swift:12:26: error: value of type 'String' has no member\
    \ 'range'\n        if let range = s.range(of: String(s[index]), options: .caseInsensitive,\
    \ range: nil, locale: nil) {\n                       ~ ^~~~~\n/tmp/tmpx1tno_v1.swift:12:64:\
    \ error: cannot infer contextual base in reference to member 'caseInsensitive'\n\
    \        if let range = s.range(of: String(s[index]), options: .caseInsensitive,\
    \ range: nil, locale: nil) {\n                                               \
    \               ~^~~~~~~~~~~~~~~\n/tmp/tmpx1tno_v1.swift:12:88: error: 'nil' requires\
    \ a contextual type\n        if let range = s.range(of: String(s[index]), options:\
    \ .caseInsensitive, range: nil, locale: nil) {\n                             \
    \                                                          ^\n/tmp/tmpx1tno_v1.swift:12:101:\
    \ error: 'nil' requires a contextual type\n        if let range = s.range(of:\
    \ String(s[index]), options: .caseInsensitive, range: nil, locale: nil) {\n  \
    \                                                                            \
    \                      ^\n"
  stdout: ''
  timestamp: 1660014132
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    // use Set to remove duplicates and then return the length\n\
    \    return Set(string.lowercased()).count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014132
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return [Character](string.lowercased()).count\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_distinct_characters(string: \"\") == 0)\n\
    assert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmpzxrx2jna/tmpzxrx2jna.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b359a60dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b359a304b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b359a304988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b359a3037b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzxrx2jna                        0x00005591b13ca581 <unavailable> + 5505

    5    libc.so.6                          0x00002b359a7f9460 __libc_start_main +
    245

    6    tmpzxrx2jna                        0x00005591b13ca0b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1660014132
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return Array(Set(string.lowercased())).count\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_distinct_characters(string: \"\") == 0)\n\
    assert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014078
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var distinct = [Character]()\n    for char in string {\n\
    \        if !distinct.contains(char) {\n            distinct.append(char)\n  \
    \      }\n    }\n    return distinct.count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmplewody1g/tmplewody1g.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae13036bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae130062b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae130062988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae1300617b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplewody1g                        0x000056189ce29661 <unavailable> + 5729

    5    libc.so.6                          0x00002ae130557460 __libc_start_main +
    245

    6    tmplewody1g                        0x000056189ce29199 <unavailable> + 4505

    '
  stdout: ''
  timestamp: 1660014132
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return Set(string.lowercased()).count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014023
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var set = Set<Character>()\n    for char in string {\n\
    \        set.insert(char)\n    }\n    return set.count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmp6b5yjfok/tmp6b5yjfok.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b47892e9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4788fe0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4788fe0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4788fdf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6b5yjfok                        0x000055e82cd9c5f1 <unavailable> + 5617

    5    libc.so.6                          0x00002b47894d5460 __libc_start_main +
    245

    6    tmp6b5yjfok                        0x000055e82cd9c129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014023
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    let string = string.lowercased()\n    var characters =\
    \ Set<Character>()\n    for char in string {\n        characters.insert(char)\n\
    \    }\n    return characters.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014132
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    let characters = string.lowercased().map { $0 }\n    let\
    \ distinctCharacters = Array(Set(characters))\n    return distinctCharacters.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_distinct_characters(string: \"\") == 0)\n\
    assert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014132
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var distinct_chars = [Character]()\n    for char in string\
    \ {\n        if !distinct_chars.contains(char) {\n            distinct_chars.append(char)\n\
    \        }\n    }\n    return distinct_chars.count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmpuds4r2cy/tmpuds4r2cy.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae2211a3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae220e9ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae220e9a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae220e997b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuds4r2cy                        0x000055b291bf8661 <unavailable> + 5729

    5    libc.so.6                          0x00002ae22138f460 __libc_start_main +
    245

    6    tmpuds4r2cy                        0x000055b291bf8199 <unavailable> + 4505

    '
  stdout: ''
  timestamp: 1660014132
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    //put your code here\n    return 0\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmpm8gl19k5/tmpm8gl19k5.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3919374c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b391906bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b391906b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b391906a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpm8gl19k5                        0x000055aa6a78730a <unavailable> + 4874

    5    libc.so.6                          0x00002b3919560460 __libc_start_main +
    245

    6    tmpm8gl19k5                        0x000055aa6a786ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1660014132
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var c = 0\n    var current = \"\"\n    for i in string\
    \ {\n        let s = String(i).lowercased()\n        if current.contains(s) {\n\
    \            continue\n        }\n        c += 1\n        current.append(s)\n\
    \    }\n    return c\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_distinct_characters(string:\
    \ \"\") == 0)\nassert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014132
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return Set(string.lowercased()).count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014023
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return Set(string.lowercased()).count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014023
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return string.count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmpbqinyz_w/tmpbqinyz_w.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b20c9d16c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b20c9a0db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b20c9a0d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b20c9a0c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbqinyz_w                        0x000055a5865fb411 <unavailable> + 5137

    5    libc.so.6                          0x00002b20c9f02460 __libc_start_main +
    245

    6    tmpbqinyz_w                        0x000055a5865faf49 <unavailable> + 3913

    '
  stdout: ''
  timestamp: 1660014132
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    let mySet = Set(string.lowercased())\n    return mySet.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_distinct_characters(string: \"\") == 0)\n\
    assert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014132
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(count_distinct_characters(string:\
    \ \"\") == 0)\nassert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmp726wp290/tmp726wp290.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aed9bd4dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aed9ba44b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aed9ba44988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aed9ba437b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp726wp290                        0x000056218599030a <unavailable> + 4874

    5    libc.so.6                          0x00002aed9bf39460 __libc_start_main +
    245

    6    tmp726wp290                        0x000056218598fee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1660014132
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    // YOUR CODE GOES HERE\n    let characterSet = Set(string.lowercased())\n\
    \    return characterSet.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(count_distinct_characters(string:\
    \ \"\") == 0)\nassert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014132
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    let lowered = string.lowercased()\n    var dict = [Character:\
    \ Bool]()\n    for char in lowered {\n        dict[char] = true\n    }\n    return\
    \ dict.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_distinct_characters(string:\
    \ \"\") == 0)\nassert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014132
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    // convert string to lower case\n    let lowercaseString\
    \ = string.lowercased()\n    let length = lowercaseString.count\n    //var distinctChars\
    \ = [Character]()\n    var distinctChars = Set<Character>()\n    for index in\
    \ 0..<length {\n        let currentChar = lowercaseString[lowercaseString.index(lowercaseString.startIndex,\
    \ offsetBy: index)]\n        if !distinctChars.contains(currentChar) {\n     \
    \       distinctChars.insert(currentChar)\n        }\n    }\n    return distinctChars.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_distinct_characters(string: \"\") == 0)\n\
    assert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014132
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var distinct: Set<Character> = []\n    for char in string\
    \ {\n        distinct.insert(char)\n    }\n    return distinct.count\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_distinct_characters(string: \"\") == 0)\n\
    assert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmp11ejn7cg/tmp11ejn7cg.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba17e837c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba17e52eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba17e52e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba17e52d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp11ejn7cg                        0x00005622f6b62671 <unavailable> + 5745

    5    libc.so.6                          0x00002ba17ea23460 __libc_start_main +
    245

    6    tmp11ejn7cg                        0x00005622f6b621a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660014132
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    let lowercaseString = string.lowercased()\n    let characters\
    \ = Array(lowercaseString)\n    let setOfCharacters = Set(characters)\n    return\
    \ setOfCharacters.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_distinct_characters(string:\
    \ \"\") == 0)\nassert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014132
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return string.count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmpbqinyz_w/tmpbqinyz_w.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b20c9d16c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b20c9a0db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b20c9a0d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b20c9a0c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbqinyz_w                        0x000055a5865fb411 <unavailable> + 5137

    5    libc.so.6                          0x00002b20c9f02460 __libc_start_main +
    245

    6    tmpbqinyz_w                        0x000055a5865faf49 <unavailable> + 3913

    '
  stdout: ''
  timestamp: 1660014132
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var seen = Set<Character>()\n    for letter in string\
    \ {\n        seen.insert(letter)\n    }\n    return seen.count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmp_r7ztz4o/tmp_r7ztz4o.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afbc963dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afbc9334b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afbc9334988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afbc93337b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_r7ztz4o                        0x0000564a82ac35f1 <unavailable> + 5617

    5    libc.so.6                          0x00002afbc9829460 __libc_start_main +
    245

    6    tmp_r7ztz4o                        0x0000564a82ac3129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014132
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var uniqueCharacters: Set<Character> = []\n    for char\
    \ in string {\n        uniqueCharacters.insert(char)\n    }\n    return uniqueCharacters.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_distinct_characters(string: \"\") == 0)\n\
    assert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmpks2y8_sy/tmpks2y8_sy.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab91e069c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab91dd60b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab91dd60988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab91dd5f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpks2y8_sy                        0x00005629ac744671 <unavailable> + 5745

    5    libc.so.6                          0x00002ab91e255460 __libc_start_main +
    245

    6    tmpks2y8_sy                        0x00005629ac7441a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660014132
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return Set(string.lowercased()).count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014023
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return Set(string.lowercased()).count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014023
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return string.reduce(into: Set<Character>()) {\n     \
    \   $0.insert($1)\n    }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(count_distinct_characters(string:\
    \ \"\") == 0)\nassert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmpr6m1ask9/tmpr6m1ask9.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0c5e1dec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0c5ded5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0c5ded5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0c5ded47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr6m1ask9                        0x0000563754765621 <unavailable> + 5665

    5    libc.so.6                          0x00002b0c5e3ca460 __libc_start_main +
    245

    6    tmpr6m1ask9                        0x0000563754765159 <unavailable> + 4441

    '
  stdout: ''
  timestamp: 1660014132
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return string.lowercased().characters.reduce(into: Set<Character>())\
    \ { $0.insert($1) }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_distinct_characters(string:\
    \ \"\") == 0)\nassert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpcyvfm4us.swift:8:32: error: 'characters' is unavailable: Please\
    \ use String directly\n    return string.lowercased().characters.reduce(into:\
    \ Set<Character>()) { $0.insert($1) }.count\n                               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660014132
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    // todo: Write some code to compute the answer\n    var\
    \ chars: [Character] = []\n    for i in string {\n        if !chars.contains(i)\
    \ {\n            chars.append(i)\n        }\n    }\n    return chars.count\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_distinct_characters(string: \"\") == 0)\n\
    assert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmpouv7hzpx/tmpouv7hzpx.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abbee9e9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abbee6e0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abbee6e0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abbee6df7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpouv7hzpx                        0x0000562309c296c1 <unavailable> + 5825

    5    libc.so.6                          0x00002abbeebd5460 __libc_start_main +
    245

    6    tmpouv7hzpx                        0x0000562309c291f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1660014132
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(count_distinct_characters(string:\
    \ \"\") == 0)\nassert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmp726wp290/tmp726wp290.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aed9bd4dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aed9ba44b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aed9ba44988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aed9ba437b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp726wp290                        0x000056218599030a <unavailable> + 4874

    5    libc.so.6                          0x00002aed9bf39460 __libc_start_main +
    245

    6    tmp726wp290                        0x000056218598fee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1660014132
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n  var uniqueCharCount = 0\n  var characterSet = Set<Character>()\n\
    \  for char in string {\n    if characterSet.insert(char).inserted {\n      uniqueCharCount\
    \ += 1\n    }\n  }\n  return uniqueCharCount\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmpk9rhlnnz/tmpk9rhlnnz.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab643a55c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab64374cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab64374c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab64374b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk9rhlnnz                        0x00005634fe4d95a1 <unavailable> + 5537

    5    libc.so.6                          0x00002ab643c41460 __libc_start_main +
    245

    6    tmpk9rhlnnz                        0x00005634fe4d90d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014132
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    let lowercased = string.lowercased()\n    let set = Set(lowercased)\n\
    \    return set.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_distinct_characters(string:\
    \ \"\") == 0)\nassert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014132
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var charSet = Set<Character>()\n    let lowerCased = string.lowercased()\n\
    \    for char in lowerCased {\n        charSet.insert(char)\n    }\n    return\
    \ charSet.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_distinct_characters(string:\
    \ \"\") == 0)\nassert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014132
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n  var count = 0\n  var distinct = [Character]()\n  for char\
    \ in string {\n    if !distinct.contains(char) {\n      distinct.append(char)\n\
    \      count += 1\n    }\n  }\n  return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmp321w0vap/tmp321w0vap.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9fabe2cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9fabb23b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9fabb23988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9fabb227b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp321w0vap                        0x0000561fc23b9611 <unavailable> + 5649

    5    libc.so.6                          0x00002b9fac018460 __libc_start_main +
    245

    6    tmp321w0vap                        0x0000561fc23b9149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1660014132
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    let charSet = Set(string.uppercased())\n    return charSet.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_distinct_characters(string: \"\") == 0)\n\
    assert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014132
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return Set(string.lowercased()).count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014023
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    // TODO: Implement this\n    return 0\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmpzm2_odo5/tmpzm2_odo5.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b744a630c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b744a327b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b744a327988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b744a3267b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzm2_odo5                        0x00005623a107630a <unavailable> + 4874

    5    libc.so.6                          0x00002b744a81c460 __libc_start_main +
    245

    6    tmpzm2_odo5                        0x00005623a1075ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1660014132
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    let set = Set(string.uppercased())\n    return set.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_distinct_characters(string: \"\") == 0)\n\
    assert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014132
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var res = 0\n    for ch in string {\n        if !ch.isLetter\
    \ {\n            continue\n        }\n        let lower = String(ch).lowercased()\n\
    \        if !string.lowercased().contains(lower) {\n            res += 1\n   \
    \     }\n    }\n    return res\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(count_distinct_characters(string:\
    \ \"\") == 0)\nassert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmp7uvgcjk3/tmp7uvgcjk3.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af2db329c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af2db020b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af2db020988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af2db01f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7uvgcjk3                        0x00005606d1cfe59a <unavailable> + 5530

    5    libc.so.6                          0x00002af2db515460 __libc_start_main +
    245

    6    tmp7uvgcjk3                        0x00005606d1cfe179 <unavailable> + 4473

    '
  stdout: ''
  timestamp: 1660014132
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    \n    var char: [Character] = []\n    \n    for letter\
    \ in string {\n        if !char.contains(letter) {\n            char.append(letter)\n\
    \        }\n    }\n    \n    return char.count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmpyqdu5nr4/tmpyqdu5nr4.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2940edbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2940bd2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2940bd2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2940bd17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyqdu5nr4                        0x00005631105916c1 <unavailable> + 5825

    5    libc.so.6                          0x00002b29410c7460 __libc_start_main +
    245

    6    tmpyqdu5nr4                        0x00005631105911f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1660014132
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    //write your code here\n    return 0\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmp1j5qj6s7/tmp1j5qj6s7.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b03affc5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b03afcbcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b03afcbc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b03afcbb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1j5qj6s7                        0x000055f628c4b30a <unavailable> + 4874

    5    libc.so.6                          0x00002b03b01b1460 __libc_start_main +
    245

    6    tmp1j5qj6s7                        0x000055f628c4aee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1660014132
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    let sortedString = string.sorted()\n    return Set(sortedString).count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_distinct_characters(string: \"\") == 0)\n\
    assert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmpbr4spm4d/tmpbr4spm4d.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2e428f6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2e425edb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2e425ed988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2e425ec7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbr4spm4d                        0x000055fdef43a651 <unavailable> + 5713

    5    libc.so.6                          0x00002b2e42ae2460 __libc_start_main +
    245

    6    tmpbr4spm4d                        0x000055fdef43a189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660014132
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var charMap = [Character: Bool]()\n    let lowercased\
    \ = string.lowercased()\n    for char in lowercased {\n        charMap[char] =\
    \ true\n    }\n    return charMap.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014132
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    let lowercase = string.lowercased()\n    var character_counts\
    \ = [Character: Int]()\n    for character in lowercase {\n        character_counts[character]\
    \ = (character_counts[character] ?? 0) + 1\n    }\n    return character_counts.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_distinct_characters(string: \"\") == 0)\n\
    assert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014132
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var dict = [Character: Bool]()\n    for c in string {\n\
    \        dict[c] = true\n    }\n    return dict.count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmp01ayx8w5/tmp01ayx8w5.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aff780ecc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aff77de3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aff77de3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aff77de27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp01ayx8w5                        0x0000555d0caa4611 <unavailable> + 5649

    5    libc.so.6                          0x00002aff782d8460 __libc_start_main +
    245

    6    tmp01ayx8w5                        0x0000555d0caa4149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1660014132
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var chars: [Character] = []\n    for char in string {\n\
    \        if !chars.contains(char) {\n            chars.append(char)\n        }\n\
    \    }\n    return chars.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(count_distinct_characters(string:\
    \ \"\") == 0)\nassert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmp144tuo3q/tmp144tuo3q.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af71a030c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af719d27b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af719d27988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af719d267b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp144tuo3q                        0x000056282a3286c1 <unavailable> + 5825

    5    libc.so.6                          0x00002af71a21c460 __libc_start_main +
    245

    6    tmp144tuo3q                        0x000056282a3281f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1660014078
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return Set(string.lowercased()).count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014023
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    // TODO: Write implementation here\n    return 0\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_distinct_characters(string: \"\") == 0)\n\
    assert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmptscniy8t/tmptscniy8t.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af7043eec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af7040e5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af7040e5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af7040e47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptscniy8t                        0x00005557aa09330a <unavailable> + 4874

    5    libc.so.6                          0x00002af7045da460 __libc_start_main +
    245

    6    tmptscniy8t                        0x00005557aa092ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1660014132
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return Set(string.lowercased()).count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014023
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    // Fill in your code here\n    var count = 0\n    var\
    \ charSet = Set<Character>()\n    for char in string {\n        charSet.insert(char)\n\
    \    }\n    count = charSet.count\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmpt1vil3fq/tmpt1vil3fq.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1c28eebc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1c28be2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1c28be2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1c28be17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt1vil3fq                        0x00005576d69175f1 <unavailable> + 5617

    5    libc.so.6                          0x00002b1c290d7460 __libc_start_main +
    245

    6    tmpt1vil3fq                        0x00005576d6917129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014132
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    // Convert string to lowercase and split it\n    let lowerCaseString\
    \ = string.lowercased()\n    let stringArray = Array(lowerCaseString)\n    \n\
    \    // Use a set to store unique characters\n    var charactersSet = Set<Character>()\n\
    \    \n    // Iterate through stringArray and add each character to charactersSet\n\
    \    for character in stringArray {\n        charactersSet.insert(character)\n\
    \    }\n    \n    // Return the count of characters in the set\n    return charactersSet.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_distinct_characters(string: \"\") == 0)\n\
    assert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014132
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    let loweredString = string.lowercased()\n    var result\
    \ = [Character]()\n    for character in loweredString {\n        if !result.contains(character)\
    \ {\n            result.append(character)\n        }\n    }\n    return result.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_distinct_characters(string: \"\") == 0)\n\
    assert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014132
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return Set(string.lowercased()).count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014023
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var set: Set<Character> = []\n    for char in string {\n\
    \        set.insert(char)\n    }\n    return set.count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmpxpafujbb/tmpxpafujbb.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aca5bf9cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aca5bc93b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aca5bc93988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aca5bc927b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxpafujbb                        0x000055ddf907a671 <unavailable> + 5745

    5    libc.so.6                          0x00002aca5c188460 __libc_start_main +
    245

    6    tmpxpafujbb                        0x000055ddf907a1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660014132
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var set = Set<Character>()\n    let upperString = string.uppercased()\n\
    \    for c in upperString {\n        set.insert(c)\n    }\n    return set.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_distinct_characters(string: \"\") == 0)\n\
    assert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014132
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(count_distinct_characters(string:\
    \ \"\") == 0)\nassert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmp726wp290/tmp726wp290.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aed9bd4dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aed9ba44b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aed9ba44988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aed9ba437b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp726wp290                        0x000056218599030a <unavailable> + 4874

    5    libc.so.6                          0x00002aed9bf39460 __libc_start_main +
    245

    6    tmp726wp290                        0x000056218598fee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1660014132
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    \n    var chars = [Character]()\n    \n    for char in\
    \ string.characters {\n        if !chars.contains(char) {\n            chars.append(char)\n\
    \        }\n    }\n    \n    return chars.count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpuv5dmmdt.swift:11:24: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in string.characters {\n                 \
    \      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660014132
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return Array(Set(string.lowercased())).count\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_distinct_characters(string: \"\") == 0)\n\
    assert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014078
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n  return string.lowercased().count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmpeh3t2u6f/tmpeh3t2u6f.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad40ab55c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad40a84cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad40a84c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad40a84b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeh3t2u6f                        0x000055c12d0f2461 <unavailable> + 5217

    5    libc.so.6                          0x00002ad40ad41460 __libc_start_main +
    245

    6    tmpeh3t2u6f                        0x000055c12d0f1f99 <unavailable> + 3993

    '
  stdout: ''
  timestamp: 1660014132
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    let str = string.lowercased()\n    var set = Set<Character>()\n\
    \    for char in str {\n        set.insert(char)\n    }\n    return set.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_distinct_characters(string: \"\") == 0)\n\
    assert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014132
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return string.lowercased().reduce(into: Set<Character>())\
    \ { $0.insert($1) }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_distinct_characters(string:\
    \ \"\") == 0)\nassert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014133
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return Set(string.lowercased()).count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014023
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var result: Int = 0\n    var characters: Set<Character>\
    \ = []\n    string.forEach({ character in\n        if !characters.contains(character)\
    \ {\n            characters.insert(character)\n            result += 1\n     \
    \   }\n    })\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(count_distinct_characters(string:\
    \ \"\") == 0)\nassert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmpz8g3fh56/tmpz8g3fh56.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8dfc44fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8dfc146b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8dfc146988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8dfc1457b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz8g3fh56                        0x00005606770c26a1 <unavailable> + 5793

    5    libc.so.6                          0x00002b8dfc63b460 __libc_start_main +
    245

    6    tmpz8g3fh56                        0x00005606770c21d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1660014133
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var arr = string.lowercased().compactMap{ $0.asciiValue\
    \ }\n    arr.sort()\n    var count = 1\n    for index in 1..<arr.count {\n   \
    \     if arr[index] != arr[index-1] {\n            count += 1\n        }\n   \
    \ }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_distinct_characters(string:\
    \ \"\") == 0)\nassert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b89729f7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b89726ee561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b89726ee286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b89726ee13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b89726edbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpa82basjs                        0x0000563b81348ce4 <unavailable> + 7396

    6    tmpa82basjs                        0x0000563b813487b5 <unavailable> + 6069

    7    libc.so.6                          0x00002b8972be3460 __libc_start_main +
    245

    8    tmpa82basjs                        0x0000563b813484b9 <unavailable> + 5305

    '
  stdout: ''
  timestamp: 1660014133
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    // Implement your solution here\n    return 0\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_distinct_characters(string: \"\") == 0)\n\
    assert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmp4q53nxgw/tmp4q53nxgw.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adadc060c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adadbd57b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adadbd57988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adadbd567b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4q53nxgw                        0x000055b7bc22f30a <unavailable> + 4874

    5    libc.so.6                          0x00002adadc24c460 __libc_start_main +
    245

    6    tmp4q53nxgw                        0x000055b7bc22eee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1660014132
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    // TODO: implement me!\n    var num: Int = 0\n    var\
    \ myDict: [Character: Int] = [:]\n    let newString = string.lowercased()\n  \
    \  for letter in newString {\n        if myDict[letter] == nil {\n           \
    \ myDict[letter] = 1\n            num += 1\n        }\n    }\n    return num\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_distinct_characters(string: \"\") == 0)\n\
    assert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014133
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(count_distinct_characters(string:\
    \ \"\") == 0)\nassert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmp726wp290/tmp726wp290.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aed9bd4dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aed9ba44b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aed9ba44988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aed9ba437b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp726wp290                        0x000056218599030a <unavailable> + 4874

    5    libc.so.6                          0x00002aed9bf39460 __libc_start_main +
    245

    6    tmp726wp290                        0x000056218598fee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1660014132
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    \n    let characters = Array(string)\n    let upper_characters\
    \ = characters.map { $0.uppercased() }\n    let distinct_upper_characters = Set(upper_characters)\n\
    \    return distinct_upper_characters.count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014132
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    // TODO: Please implement the method\n    return 0\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_distinct_characters(string: \"\") == 0)\n\
    assert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmpfy78lqpf/tmpfy78lqpf.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b541d56fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b541d266b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b541d266988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b541d2657b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfy78lqpf                        0x000055dd05e2d30a <unavailable> + 4874

    5    libc.so.6                          0x00002b541d75b460 __libc_start_main +
    245

    6    tmpfy78lqpf                        0x000055dd05e2cee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1660014132
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    let lowerCaseString = string.lowercased()\n    let charSet\
    \ = Set(lowerCaseString)\n    return charSet.count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014133
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return string.lowercased().count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmp4lr0fcvf/tmp4lr0fcvf.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b51c78c3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b51c75bab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b51c75ba988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b51c75b97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4lr0fcvf                        0x000055af414d5461 <unavailable> + 5217

    5    libc.so.6                          0x00002b51c7aaf460 __libc_start_main +
    245

    6    tmp4lr0fcvf                        0x000055af414d4f99 <unavailable> + 3993

    '
  stdout: ''
  timestamp: 1660014023
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var set = Set<Character>()\n    for i in string {\n  \
    \      set.insert(i)\n    }\n    return set.count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmp7vmez2eu/tmp7vmez2eu.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad276a8ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad276781b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad276781988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad2767807b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7vmez2eu                        0x000055b8de8835f1 <unavailable> + 5617

    5    libc.so.6                          0x00002ad276c76460 __libc_start_main +
    245

    6    tmp7vmez2eu                        0x000055b8de883129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014132
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var distinct = [Character]()\n    for character in string\
    \ {\n        if !distinct.contains(character) {\n            distinct.append(character)\n\
    \        }\n    }\n    return distinct.count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmp0edk1l_t/tmp0edk1l_t.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae1801bdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae17feb4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae17feb4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae17feb37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0edk1l_t                        0x00005622bfaf4661 <unavailable> + 5729

    5    libc.so.6                          0x00002ae1803a9460 __libc_start_main +
    245

    6    tmp0edk1l_t                        0x00005622bfaf4199 <unavailable> + 4505

    '
  stdout: ''
  timestamp: 1660014133
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var resultSet = Set<Character>()\n    for char in string\
    \ {\n        resultSet.insert(char)\n    }\n    return resultSet.count\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_distinct_characters(string: \"\") == 0)\n\
    assert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmpxxy5nk5c/tmpxxy5nk5c.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af4f96a2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af4f9399b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af4f9399988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af4f93987b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxxy5nk5c                        0x000055c4385145f1 <unavailable> + 5617

    5    libc.so.6                          0x00002af4f988e460 __libc_start_main +
    245

    6    tmpxxy5nk5c                        0x000055c438514129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014133
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return string.lowercased().count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmp4lr0fcvf/tmp4lr0fcvf.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b51c78c3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b51c75bab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b51c75ba988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b51c75b97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4lr0fcvf                        0x000055af414d5461 <unavailable> + 5217

    5    libc.so.6                          0x00002b51c7aaf460 __libc_start_main +
    245

    6    tmp4lr0fcvf                        0x000055af414d4f99 <unavailable> + 3993

    '
  stdout: ''
  timestamp: 1660014023
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    // Step 1. Convert the string to lowercase.\n    let lowercasedString\
    \ = string.lowercased()\n    \n    // Step 2. Use reduce() to create a dictionary\
    \ with distinct characters as keys and their counts as values.\n    let characterCounts\
    \ = lowercasedString.reduce(into: [:]) { counts, character in\n        counts[character,\
    \ default: 0] += 1\n    }\n    \n    // Step 3. Use reduce() to sum the dictionary\
    \ values.\n    return characterCounts.reduce(0) { $0 + $1.value }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_distinct_characters(string: \"\") == 0)\n\
    assert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmpuvcdxz62/tmpuvcdxz62.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae445ba3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae44589ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae44589a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae4458997b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuvcdxz62                        0x000056475afc8841 <unavailable> + 6209

    5    libc.so.6                          0x00002ae445d8f460 __libc_start_main +
    245

    6    tmpuvcdxz62                        0x000056475afc8379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660014133
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return Set(string.lowercased()).count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014023
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    \n    var dict: [Character: Int] = [:]\n    \n    for\
    \ c in string {\n        dict[c] = 1\n    }\n    \n    return dict.count\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_distinct_characters(string: \"\") == 0)\n\
    assert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmp_zls__w4/tmp_zls__w4.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b83d03c6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b83d00bdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b83d00bd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b83d00bc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_zls__w4                        0x0000565393500661 <unavailable> + 5729

    5    libc.so.6                          0x00002b83d05b2460 __libc_start_main +
    245

    6    tmp_zls__w4                        0x0000565393500199 <unavailable> + 4505

    '
  stdout: ''
  timestamp: 1660014133
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    let stringLowercase = string.lowercased()\n    let result\
    \ = Array(Set(stringLowercase))\n    return result.count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014133
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var charSet = Set<Character>()\n    for char in string\
    \ {\n        charSet.insert(char)\n    }\n    return charSet.count\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_distinct_characters(string: \"\") == 0)\n\
    assert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmp6ev1c36r/tmp6ev1c36r.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b56a5d79c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b56a5a70b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b56a5a70988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b56a5a6f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6ev1c36r                        0x00005592200ab5f1 <unavailable> + 5617

    5    libc.so.6                          0x00002b56a5f65460 __libc_start_main +
    245

    6    tmp6ev1c36r                        0x00005592200ab129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014078
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n  var lowercase = Set<Character>()\n  var uppercase = Set<Character>()\n\
    \  for char in string {\n    if char.isUppercase {\n      uppercase.insert(char)\n\
    \    } else {\n      lowercase.insert(char)\n    }\n  }\n  return lowercase.count\
    \ + uppercase.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_distinct_characters(string:\
    \ \"\") == 0)\nassert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmp_ixzmq97/tmp_ixzmq97.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abd92732c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abd92429b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abd92429988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abd924287b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_ixzmq97                        0x00005571262ab651 <unavailable> + 5713

    5    libc.so.6                          0x00002abd9291e460 __libc_start_main +
    245

    6    tmp_ixzmq97                        0x00005571262ab189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660014133
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return Set(string.lowercased()).count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014023
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    // TODO: Write count_distinct_characters function here\n\
    \    var set1: Set<Character> = []\n    for i in string.lowercased(){\n      \
    \  set1.insert(i)\n    }\n    return set1.count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014133
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    // Write your code here\n    var result = 0\n    var checkSet:\
    \ Set<Character> = Set()\n    let cleanString = string.lowercased()\n    for letter\
    \ in cleanString {\n        checkSet.insert(letter)\n    }\n    result = checkSet.count\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_distinct_characters(string:\
    \ \"\") == 0)\nassert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014133
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    // do your magic here\n    return 0\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmp_tg0c0aa/tmp_tg0c0aa.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8052c93c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b805298ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b805298a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b80529897b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_tg0c0aa                        0x000055de1772230a <unavailable> + 4874

    5    libc.so.6                          0x00002b8052e7f460 __libc_start_main +
    245

    6    tmp_tg0c0aa                        0x000055de17721ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1660014133
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return Array(Set(string.lowercased())).count\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_distinct_characters(string: \"\") == 0)\n\
    assert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014078
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    let set = Set(string.lowercased())\n    return set.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_distinct_characters(string: \"\") == 0)\n\
    assert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014023
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    \n    let strLowerCase = string.lowercased()\n    let\
    \ set = Set(strLowerCase)\n    return set.count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014133
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return Set(string.lowercased()).count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014023
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return Set(string.lowercased()).count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014023
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n  return Set(string.lowercased()).count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014133
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    let lowercaseString = string.lowercased()\n    var characters:\
    \ [Character] = []\n    for character in lowercaseString {\n        if !characters.contains(character)\
    \ {\n            characters.append(character)\n        }\n    }\n    return characters.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_distinct_characters(string: \"\") == 0)\n\
    assert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014133
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    let stringLowerCase = string.lowercased()\n    let arrayOfCharacters\
    \ = Array(stringLowerCase)\n    var count = 0\n    var setCharacters: Set<Character>\
    \ = []\n    for i in arrayOfCharacters {\n        setCharacters.insert(i)\n  \
    \  }\n    count = setCharacters.count\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014133
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    // TODO: Your implementation here\n    return -1\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_distinct_characters(string: \"\") == 0)\n\
    assert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmp8uwc3u38/tmp8uwc3u38.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0f6ca33c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0f6c72ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0f6c72a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0f6c7297b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8uwc3u38                        0x000055b45da0b263 <unavailable> + 4707

    5    libc.so.6                          0x00002b0f6cc1f460 __libc_start_main +
    245

    6    tmp8uwc3u38                        0x000055b45da0aee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1660014133
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    \n    return 1\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmp6em7vbfb/tmp6em7vbfb.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abf6653bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abf66232b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abf66232988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abf662317b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6em7vbfb                        0x0000559d42f07263 <unavailable> + 4707

    5    libc.so.6                          0x00002abf66727460 __libc_start_main +
    245

    6    tmp6em7vbfb                        0x0000559d42f06ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1660014133
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var dic = [Character: Int]()\n    for char in string {\n\
    \        dic[char] = 1\n    }\n    return dic.count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmp_z8dp0vl/tmp_z8dp0vl.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aedee4e5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aedee1dcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aedee1dc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aedee1db7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_z8dp0vl                        0x000055d238c5c5d1 <unavailable> + 5585

    5    libc.so.6                          0x00002aedee6d1460 __libc_start_main +
    245

    6    tmp_z8dp0vl                        0x000055d238c5c109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660014133
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n  let set = Set(string.lowercased())\n  return set.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_distinct_characters(string: \"\") == 0)\n\
    assert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014133
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var charSet = Set<Character>()\n    for char in string\
    \ {\n        charSet.insert(char)\n    }\n    return charSet.count\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_distinct_characters(string: \"\") == 0)\n\
    assert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmp6ev1c36r/tmp6ev1c36r.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b56a5d79c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b56a5a70b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b56a5a70988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b56a5a6f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6ev1c36r                        0x00005592200ab5f1 <unavailable> + 5617

    5    libc.so.6                          0x00002b56a5f65460 __libc_start_main +
    245

    6    tmp6ev1c36r                        0x00005592200ab129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014078
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n  let s = string.uppercased()\n  var dict = Dictionary<Character,\
    \ Int>()\n  for c in s {\n    dict[c] = (dict[c] ?? 0) + 1\n  }\n  return dict.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_distinct_characters(string: \"\") == 0)\n\
    assert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014133
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    let str = string.lowercased()\n    var dict: [Character:\
    \ Int] = [:]\n    for char in str {\n        dict[char] = dict[char, default:\
    \ 0] + 1\n    }\n    return dict.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014133
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    let charSet = Set(string.lowercased())\n    return charSet.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_distinct_characters(string: \"\") == 0)\n\
    assert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014133
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return Set(string.lowercased()).count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014023
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    let result = string.filter { !string.lowercased().contains($0.lowercased())\
    \ }\n    return result.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(count_distinct_characters(string:\
    \ \"\") == 0)\nassert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmp72gkyz4k/tmp72gkyz4k.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8d0b01bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8d0ad12b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8d0ad12988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8d0ad117b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp72gkyz4k                        0x000055a98a5e458a <unavailable> + 5514

    5    libc.so.6                          0x00002b8d0b207460 __libc_start_main +
    245

    6    tmp72gkyz4k                        0x000055a98a5e4169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660014133
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    let newArray = string.lowercased().map({$0})\n    let\
    \ set = Set(newArray)\n    let array2 = Array(set)\n    return array2.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_distinct_characters(string: \"\") == 0)\n\
    assert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014133
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    let lowercase = Set(string.lowercased())\n    return lowercase.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_distinct_characters(string: \"\") == 0)\n\
    assert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014133
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    let jerry = string.lowercased()\n    var count = 0\n \
    \   for ch in jerry {\n        if !jerry.contains(where: { $0 == ch }) {\n   \
    \         count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmpown55ec6/tmpown55ec6.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7ee6f0fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7ee6c06b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7ee6c06988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7ee6c057b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpown55ec6                        0x000055a479c9055a <unavailable> + 5466

    5    libc.so.6                          0x00002b7ee70fb460 __libc_start_main +
    245

    6    tmpown55ec6                        0x000055a479c90139 <unavailable> + 4409

    '
  stdout: ''
  timestamp: 1660014133
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var set = Set<Character>()\n    for c in string {\n  \
    \      set.insert(c)\n    }\n    return set.count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmpp0yhnlr0/tmpp0yhnlr0.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002add467aac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002add464a1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002add464a1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002add464a07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp0yhnlr0                        0x0000561cd44c15f1 <unavailable> + 5617

    5    libc.so.6                          0x00002add46996460 __libc_start_main +
    245

    6    tmpp0yhnlr0                        0x0000561cd44c1129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014023
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return string.lowercased().count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmp4lr0fcvf/tmp4lr0fcvf.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b51c78c3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b51c75bab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b51c75ba988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b51c75b97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4lr0fcvf                        0x000055af414d5461 <unavailable> + 5217

    5    libc.so.6                          0x00002b51c7aaf460 __libc_start_main +
    245

    6    tmp4lr0fcvf                        0x000055af414d4f99 <unavailable> + 3993

    '
  stdout: ''
  timestamp: 1660014023
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return Set(string.lowercased()).count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014023
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return Set(string.uppercased()).count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014133
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return Array(Set(string.lowercased())).count\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_distinct_characters(string: \"\") == 0)\n\
    assert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014078
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return Array(Set(string.lowercased())).count\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_distinct_characters(string: \"\") == 0)\n\
    assert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014078
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    // TODO: Write a function count_distinct_characters(string:)\
    \ that return the count of distinct characters in given string.\n    var chars:\
    \ [Character] = []\n    for char in string {\n        if !chars.contains(char)\
    \ {\n            chars.append(char)\n        }\n    }\n    return chars.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_distinct_characters(string: \"\") == 0)\n\
    assert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmp2v9m8df4/tmp2v9m8df4.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aab9d1dec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aab9ced5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aab9ced5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aab9ced47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2v9m8df4                        0x000055ee332646c1 <unavailable> + 5825

    5    libc.so.6                          0x00002aab9d3ca460 __libc_start_main +
    245

    6    tmp2v9m8df4                        0x000055ee332641f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1660014133
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return Set(string.lowercased()).count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014023
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return Array(Set(string.characters.map{ Character(String($0).lowercased())\
    \ })).count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(count_distinct_characters(string:\
    \ \"\") == 0)\nassert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmp_ryxheyl.swift:8:29: error: 'characters' is unavailable: Please\
    \ use String directly\n    return Array(Set(string.characters.map{ Character(String($0).lowercased())\
    \ })).count\n                            ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n"
  stdout: ''
  timestamp: 1660014133
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    let arrString = Array(string)\n    var charSet = Set<Character>()\n\
    \    for char in arrString {\n        charSet.insert(char)\n    }\n    return\
    \ charSet.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_distinct_characters(string:\
    \ \"\") == 0)\nassert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmp51lh5vhe/tmp51lh5vhe.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b066ae67c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b066ab5eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b066ab5e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b066ab5d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp51lh5vhe                        0x0000563583a7a7e1 <unavailable> + 6113

    5    libc.so.6                          0x00002b066b053460 __libc_start_main +
    245

    6    tmp51lh5vhe                        0x0000563583a7a319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660014133
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    let lower = string.lowercased()\n    var counted = Set<Character>()\n\
    \    for ch in lower {\n        counted.insert(ch)\n    }\n    return counted.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_distinct_characters(string: \"\") == 0)\n\
    assert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014133
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return string.count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmpbqinyz_w/tmpbqinyz_w.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b20c9d16c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b20c9a0db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b20c9a0d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b20c9a0c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbqinyz_w                        0x000055a5865fb411 <unavailable> + 5137

    5    libc.so.6                          0x00002b20c9f02460 __libc_start_main +
    245

    6    tmpbqinyz_w                        0x000055a5865faf49 <unavailable> + 3913

    '
  stdout: ''
  timestamp: 1660014132
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var distinct_characters: Set<Character> = []\n    for\
    \ character in string {\n        distinct_characters.insert(character)\n    }\n\
    \    return distinct_characters.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmppc6x161h/tmppc6x161h.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0e52160c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0e51e57b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0e51e57988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0e51e567b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppc6x161h                        0x000056034687b671 <unavailable> + 5745

    5    libc.so.6                          0x00002b0e5234c460 __libc_start_main +
    245

    6    tmppc6x161h                        0x000056034687b1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660014023
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return Set(string.lowercased()).count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014023
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    let characterSet = NSCharacterSet(charactersIn: string)\n\
    \    return characterSet.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(count_distinct_characters(string:\
    \ \"\") == 0)\nassert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpybg8rqst.swift:8:24: error: cannot find 'NSCharacterSet' in scope\n\
    \    let characterSet = NSCharacterSet(charactersIn: string)\n               \
    \        ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014133
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return Array(Set(string.lowercased())).count\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_distinct_characters(string: \"\") == 0)\n\
    assert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014078
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(count_distinct_characters(string:\
    \ \"\") == 0)\nassert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmp726wp290/tmp726wp290.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aed9bd4dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aed9ba44b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aed9ba44988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aed9ba437b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp726wp290                        0x000056218599030a <unavailable> + 4874

    5    libc.so.6                          0x00002aed9bf39460 __libc_start_main +
    245

    6    tmp726wp290                        0x000056218598fee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1660014132
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var distinct = 0\n    let stringA = string.lowercased()\n\
    \    for char in stringA {\n        var count = 0\n        for charA in stringA\
    \ {\n            if char == charA {\n                count += 1\n            }\n\
    \        }\n        if count == 1 {\n            distinct += 1\n        }\n  \
    \  }\n    return distinct\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_distinct_characters(string:\
    \ \"\") == 0)\nassert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmpe66xq5_2/tmpe66xq5_2.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adbee738c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adbee42fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adbee42f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adbee42e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe66xq5_2                        0x0000555a5368d521 <unavailable> + 5409

    5    libc.so.6                          0x00002adbee924460 __libc_start_main +
    245

    6    tmpe66xq5_2                        0x0000555a5368d059 <unavailable> + 4185

    '
  stdout: ''
  timestamp: 1660014133
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    // <#Code Here#>\n    let stringLowerCase = string.lowercased()\n\
    \    var set = Set<Character>()\n    for char in stringLowerCase {\n        set.insert(char)\n\
    \    }\n    return set.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(count_distinct_characters(string:\
    \ \"\") == 0)\nassert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014133
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(count_distinct_characters(string:\
    \ \"\") == 0)\nassert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmp726wp290/tmp726wp290.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aed9bd4dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aed9ba44b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aed9ba44988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aed9ba437b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp726wp290                        0x000056218599030a <unavailable> + 4874

    5    libc.so.6                          0x00002aed9bf39460 __libc_start_main +
    245

    6    tmp726wp290                        0x000056218598fee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1660014132
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var chars = Set<Character>()\n    for char in string {\n\
    \        chars.insert(char)\n    }\n    return chars.count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmp_gyxnrs1/tmp_gyxnrs1.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b92f2149c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b92f1e40b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b92f1e40988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b92f1e3f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_gyxnrs1                        0x000055673e8205f1 <unavailable> + 5617

    5    libc.so.6                          0x00002b92f2335460 __libc_start_main +
    245

    6    tmp_gyxnrs1                        0x000055673e820129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014133
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(count_distinct_characters(string:\
    \ \"\") == 0)\nassert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmp726wp290/tmp726wp290.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aed9bd4dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aed9ba44b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aed9ba44988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aed9ba437b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp726wp290                        0x000056218599030a <unavailable> + 4874

    5    libc.so.6                          0x00002aed9bf39460 __libc_start_main +
    245

    6    tmp726wp290                        0x000056218598fee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1660014132
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    var alphabet = [String]()\n    for\
    \ char in string {\n        let char = String(char)\n        if !alphabet.contains(char.lowercased())\
    \ {\n            alphabet.append(char.lowercased())\n            count += 1\n\
    \        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014133
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return string.lowercased().count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmp4lr0fcvf/tmp4lr0fcvf.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b51c78c3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b51c75bab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b51c75ba988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b51c75b97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4lr0fcvf                        0x000055af414d5461 <unavailable> + 5217

    5    libc.so.6                          0x00002b51c7aaf460 __libc_start_main +
    245

    6    tmp4lr0fcvf                        0x000055af414d4f99 <unavailable> + 3993

    '
  stdout: ''
  timestamp: 1660014023
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var characterDict = [Character: Int]()\n    for character\
    \ in string {\n        characterDict[character] = (characterDict[character] ??\
    \ 0) + 1\n    }\n    return characterDict.count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmpc7b491tk/tmpc7b491tk.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acb9cc36c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acb9c92db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acb9c92d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acb9c92c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc7b491tk                        0x000056320cd77621 <unavailable> + 5665

    5    libc.so.6                          0x00002acb9ce22460 __libc_start_main +
    245

    6    tmpc7b491tk                        0x000056320cd77159 <unavailable> + 4441

    '
  stdout: ''
  timestamp: 1660014133
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return string.uppercased().map{ String($0) }.reduce(into:\
    \ []) { dict, char in\n        dict[char] = true\n    }.count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpdfdnahh5.swift:9:14: error: cannot convert value of type 'String'\
    \ to expected argument type 'Int'\n        dict[char] = true\n             ^\n"
  stdout: ''
  timestamp: 1660014133
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return Set(string.lowercased()).count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014023
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    let characters = string.lowercased().characters\n    let\
    \ distinctCharacters = Set(characters)\n    return distinctCharacters.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_distinct_characters(string: \"\") == 0)\n\
    assert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpa54e4g8g.swift:8:42: error: 'characters' is unavailable: Please\
    \ use String directly\n    let characters = string.lowercased().characters\n \
    \                                        ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n"
  stdout: ''
  timestamp: 1660014133
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var occurences = [Character: Int]()\n    for character\
    \ in string {\n        occurences[character, default: 0] += 1\n    }\n    return\
    \ occurences.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_distinct_characters(string:\
    \ \"\") == 0)\nassert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmpgbm41xcn/tmpgbm41xcn.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b01aa06cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b01a9d63b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b01a9d63988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b01a9d627b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgbm41xcn                        0x0000563690d0b6c1 <unavailable> + 5825

    5    libc.so.6                          0x00002b01aa258460 __libc_start_main +
    245

    6    tmpgbm41xcn                        0x0000563690d0b1f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1660014133
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var set = Set<Character>()\n    for char in string {\n\
    \        set.insert(char)\n    }\n    return set.count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmp6b5yjfok/tmp6b5yjfok.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b47892e9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4788fe0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4788fe0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4788fdf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6b5yjfok                        0x000055e82cd9c5f1 <unavailable> + 5617

    5    libc.so.6                          0x00002b47894d5460 __libc_start_main +
    245

    6    tmp6b5yjfok                        0x000055e82cd9c129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014023
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    let lowerCaseString = string.lowercased()\n    var distinctDict:\
    \ [Character: Bool] = [:]\n    for character in lowerCaseString {\n        distinctDict[character]\
    \ = true\n    }\n    return distinctDict.count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014133
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var set = Set<Character>()\n    string.forEach { char\
    \ in\n        set.insert(char)\n    }\n    return set.count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmp3dfj5wao/tmp3dfj5wao.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adbad7c0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adbad4b7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adbad4b7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adbad4b67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3dfj5wao                        0x000055d7041cc611 <unavailable> + 5649

    5    libc.so.6                          0x00002adbad9ac460 __libc_start_main +
    245

    6    tmp3dfj5wao                        0x000055d7041cc149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1660014133
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    let characters = Array(string.lowercased())\n    var counted\
    \ = Set<Character>()\n    for c in characters {\n        counted.insert(c)\n \
    \   }\n    return counted.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(count_distinct_characters(string:\
    \ \"\") == 0)\nassert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014133
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return string.lowercased().characters.count\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_distinct_characters(string: \"\") == 0)\n\
    assert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpismj3cn0.swift:8:32: error: 'characters' is unavailable: Please\
    \ use String directly\n    return string.lowercased().characters.count\n     \
    \                          ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was\
    \ obsoleted in Swift 5.0\n    public var characters: String { get set }\n    \
    \           ^\n"
  stdout: ''
  timestamp: 1660014022
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var charSet = Set<Character>()\n    for char in string\
    \ {\n        charSet.insert(char)\n    }\n    return charSet.count\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_distinct_characters(string: \"\") == 0)\n\
    assert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmp6ev1c36r/tmp6ev1c36r.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b56a5d79c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b56a5a70b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b56a5a70988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b56a5a6f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6ev1c36r                        0x00005592200ab5f1 <unavailable> + 5617

    5    libc.so.6                          0x00002b56a5f65460 __libc_start_main +
    245

    6    tmp6ev1c36r                        0x00005592200ab129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014078
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var dict: [Character: Bool] = [:]\n    for char in string\
    \ {\n        dict[char] = true\n    }\n    return dict.count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmppzcr4ww4/tmppzcr4ww4.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2c090d2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2c08dc9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2c08dc9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2c08dc87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppzcr4ww4                        0x0000564b36c5b6a1 <unavailable> + 5793

    5    libc.so.6                          0x00002b2c092be460 __libc_start_main +
    245

    6    tmppzcr4ww4                        0x0000564b36c5b1d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1660014133
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return Set(string.lowercased()).count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014023
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return string.lowercased().count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmp4lr0fcvf/tmp4lr0fcvf.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b51c78c3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b51c75bab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b51c75ba988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b51c75b97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4lr0fcvf                        0x000055af414d5461 <unavailable> + 5217

    5    libc.so.6                          0x00002b51c7aaf460 __libc_start_main +
    245

    6    tmp4lr0fcvf                        0x000055af414d4f99 <unavailable> + 3993

    '
  stdout: ''
  timestamp: 1660014023
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var c_set = Set<Character>()\n    for c in string {\n\
    \        c_set.insert(c)\n    }\n    return c_set.count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmpjhbt720n/tmpjhbt720n.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b640df86c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b640dc7db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b640dc7d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b640dc7c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjhbt720n                        0x000055c7c33115f1 <unavailable> + 5617

    5    libc.so.6                          0x00002b640e172460 __libc_start_main +
    245

    6    tmpjhbt720n                        0x000055c7c3311129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014133
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var result = 0\n    var isListed = [Character: Bool]()\n\
    \    for eachChar in string {\n        if isListed[eachChar] == nil {\n      \
    \      isListed[eachChar] = true\n            result += 1\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_distinct_characters(string:\
    \ \"\") == 0)\nassert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmpd7_wu1d2/tmpd7_wu1d2.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b19e13acc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b19e10a3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b19e10a3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b19e10a27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd7_wu1d2                        0x0000558bad4f0611 <unavailable> + 5649

    5    libc.so.6                          0x00002b19e1598460 __libc_start_main +
    245

    6    tmpd7_wu1d2                        0x0000558bad4f0149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1660014133
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n  // TODO: Complete this function.\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: '/tmp/tmp9vr0ivw1.swift:9:1: error: missing return in global function expected
    to return ''Int''

    }

    ^

    '
  stdout: ''
  timestamp: 1660014133
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    let lower = string.lowercased()\n    var set = Set<Character>()\n\
    \    for c in lower {\n        set.insert(c)\n    }\n    return set.count\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_distinct_characters(string: \"\") == 0)\n\
    assert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014133
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var dict = [Character: Int]()\n    for c in string {\n\
    \        if dict[c] == nil {\n            dict[c] = 1\n        } else {\n    \
    \        dict[c]! += 1\n        }\n    }\n    return dict.count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmpckzid1xg/tmpckzid1xg.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abe29276c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abe28f6db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abe28f6d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abe28f6c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpckzid1xg                        0x000055a81ce89711 <unavailable> + 5905

    5    libc.so.6                          0x00002abe29462460 __libc_start_main +
    245

    6    tmpckzid1xg                        0x000055a81ce89249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1660014133
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    // 1) compose a dictionary that records all distinct characters\
    \ for string\n    // 1a) compose a set\n    // 2) return the size of the dictionary\n\
    \    // 3) return the size of the set\n    var set: Set<Character> = []\n    for\
    \ character in string {\n        set.insert(character)\n    }\n    return set.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_distinct_characters(string: \"\") == 0)\n\
    assert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmpsp7q3b2n/tmpsp7q3b2n.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4598f52c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4598c49b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4598c49988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4598c487b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsp7q3b2n                        0x00005590cd163671 <unavailable> + 5745

    5    libc.so.6                          0x00002b459913e460 __libc_start_main +
    245

    6    tmpsp7q3b2n                        0x00005590cd1631a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660014133
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    let charSet = NSCharacterSet(charactersIn: string)\n \
    \   return charSet.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_distinct_characters(string:\
    \ \"\") == 0)\nassert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpo85e60ye.swift:8:19: error: cannot find 'NSCharacterSet' in scope\n\
    \    let charSet = NSCharacterSet(charactersIn: string)\n                  ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014133
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    let strings = string.lowercased()\n    let array = Array(strings)\n\
    \    var character : Set<Character> = []\n    for a in array {\n        character.insert(a)\n\
    \    }\n    return character.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014133
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var distinct_characters = Set<Character>()\n    for character\
    \ in string {\n        distinct_characters.insert(character)\n    }\n    return\
    \ distinct_characters.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(count_distinct_characters(string:\
    \ \"\") == 0)\nassert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmp6yn5uwzr/tmp6yn5uwzr.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2dda902c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2dda5f9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2dda5f9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2dda5f87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6yn5uwzr                        0x00005597bd2715f1 <unavailable> + 5617

    5    libc.so.6                          0x00002b2ddaaee460 __libc_start_main +
    245

    6    tmp6yn5uwzr                        0x00005597bd271129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014023
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    // Initialize the return value\n    var ret = 0\n    \n\
    \    // Convert string to lowercase\n    let lowercaseString = string.lowercased()\n\
    \    \n    // Use a Set to keep track of unique characters\n    var uniqueCharacters\
    \ = Set<Character>()\n    \n    // Loop through all characters of the string\n\
    \    for character in lowercaseString {\n        uniqueCharacters.insert(character)\n\
    \    }\n    \n    // Return the count of unique characters\n    ret = uniqueCharacters.count\n\
    \    \n    return ret\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_distinct_characters(string:\
    \ \"\") == 0)\nassert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014133
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var dictionary = [Character: Bool]()\n    for c in string\
    \ {\n        dictionary[c] = true\n    }\n    return dictionary.count\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_distinct_characters(string: \"\") == 0)\n\
    assert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmp3uh5txga/tmp3uh5txga.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b538a254c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5389f4bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5389f4b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5389f4a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3uh5txga                        0x00005602670cd611 <unavailable> + 5649

    5    libc.so.6                          0x00002b538a440460 __libc_start_main +
    245

    6    tmp3uh5txga                        0x00005602670cd149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1660014133
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return Set(string.lowercased()).count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014023
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return Set(string.lowercased()).count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014023
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return Set(string.lowercased()).count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014023
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return string.lowercased().removeDuplicates().count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_distinct_characters(string: \"\") == 0)\n\
    assert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpmdjh3j89.swift:8:32: error: value of type 'String' has no member\
    \ 'removeDuplicates'\n    return string.lowercased().removeDuplicates().count\n\
    \           ~~~~~~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014133
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return Set(string.lowercased()).count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014023
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n  return Set(string.lowercased()).count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014133
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var set = Set<Character>()\n    let lowercased = string.lowercased()\n\
    \    for char in lowercased {\n        set.insert(char)\n    }\n    return set.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_distinct_characters(string: \"\") == 0)\n\
    assert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014133
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(count_distinct_characters(string:\
    \ \"\") == 0)\nassert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmp726wp290/tmp726wp290.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aed9bd4dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aed9ba44b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aed9ba44988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aed9ba437b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp726wp290                        0x000056218599030a <unavailable> + 4874

    5    libc.so.6                          0x00002aed9bf39460 __libc_start_main +
    245

    6    tmp726wp290                        0x000056218598fee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1660014132
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return Set(string.lowercased()).count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014023
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var temp = [Character]()\n    for char in string {\n \
    \       if !temp.contains(char) {\n            temp.append(char)\n        }\n\
    \    }\n    return temp.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(count_distinct_characters(string:\
    \ \"\") == 0)\nassert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmpw9xs23f_/tmpw9xs23f_.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b91a010ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b919fe05b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b919fe05988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b919fe047b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw9xs23f_                        0x00005624abd5c661 <unavailable> + 5729

    5    libc.so.6                          0x00002b91a02fa460 __libc_start_main +
    245

    6    tmpw9xs23f_                        0x00005624abd5c199 <unavailable> + 4505

    '
  stdout: ''
  timestamp: 1660014133
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return Set(string.lowercased()).count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014023
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    let letters = string.lowercased().characters.map { $0\
    \ }\n    return Set(letters).count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpm740tmgc.swift:8:39: error: 'characters' is unavailable: Please\
    \ use String directly\n    let letters = string.lowercased().characters.map {\
    \ $0 }\n                                      ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n"
  stdout: ''
  timestamp: 1660014133
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    // Convert to lowercase\n    let lowercased = string.lowercased()\n\
    \    // Initialize an empty set\n    var distinctCharacters = Set<Character>()\n\
    \    // Map each character and add them to the set\n    for char in lowercased\
    \ {\n        distinctCharacters.insert(char)\n    }\n    // Return the count of\
    \ distinct characters\n    return distinctCharacters.count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014133
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return Array(Set(string.lowercased())).count\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_distinct_characters(string: \"\") == 0)\n\
    assert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014078
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    let lowercaseString = string.lowercased()\n    var charactersSet\
    \ = Set<Character>()\n    for char in lowercaseString {\n        charactersSet.insert(char)\n\
    \    }\n    return charactersSet.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014133
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    let input = string.lowercased()\n    var characters: [Character]\
    \ = []\n    for character in input {\n        if !characters.contains(character)\
    \ {\n            characters.append(character)\n        }\n    }\n    return characters.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_distinct_characters(string: \"\") == 0)\n\
    assert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014133
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var characters = Set<Character>()\n    for character in\
    \ string {\n        characters.insert(character)\n    }\n    return characters.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_distinct_characters(string: \"\") == 0)\n\
    assert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmpg4m655lr/tmpg4m655lr.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3fe80c3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3fe7dbab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3fe7dba988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3fe7db97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg4m655lr                        0x0000560b746135f1 <unavailable> + 5617

    5    libc.so.6                          0x00002b3fe82af460 __libc_start_main +
    245

    6    tmpg4m655lr                        0x0000560b74613129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014023
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    // setup a dictionary for counting\n    var character_count\
    \ = [Character: Int]()\n    // iterate through each character of the string\n\
    \    for character in string {\n        // extract the lowercase version of the\
    \ character\n        let lowercased_character = character.lowercased()\n     \
    \   // if the character is in the dictionary, add one to the count\n        if\
    \ let current_count = character_count[lowercased_character] {\n            character_count[lowercased_character]\
    \ = current_count + 1\n        } else {\n            // if the character is not\
    \ in the dictionary, add it with a count of 1\n            character_count[lowercased_character]\
    \ = 1\n        }\n    }\n    // return the number of keys in the dictionary\n\
    \    return character_count.keys.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpzvashpmq.swift:15:48: error: cannot convert value of type 'String'\
    \ to expected argument type 'Character'\n        if let current_count = character_count[lowercased_character]\
    \ {\n                                               ^\n/tmp/tmpzvashpmq.swift:16:29:\
    \ error: cannot convert value of type 'String' to expected argument type 'Character'\n\
    \            character_count[lowercased_character] = current_count + 1\n     \
    \                       ^\n/tmp/tmpzvashpmq.swift:19:29: error: cannot convert\
    \ value of type 'String' to expected argument type 'Character'\n            character_count[lowercased_character]\
    \ = 1\n                            ^\n"
  stdout: ''
  timestamp: 1660014133
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var charsSet = Set<Character>()\n    for char in string\
    \ {\n        charsSet.insert(char)\n    }\n    return charsSet.count\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_distinct_characters(string: \"\") == 0)\n\
    assert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmpu7m78nx8/tmpu7m78nx8.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0ee5fb3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0ee5caab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0ee5caa988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0ee5ca97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu7m78nx8                        0x0000555b708b15f1 <unavailable> + 5617

    5    libc.so.6                          0x00002b0ee619f460 __libc_start_main +
    245

    6    tmpu7m78nx8                        0x0000555b708b1129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014133
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n  let lowerString = string.lowercased()\n  var charSet = Set<Character>()\n\
    \  for char in lowerString {\n    charSet.insert(char)\n  }\n  return charSet.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_distinct_characters(string: \"\") == 0)\n\
    assert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014133
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return Set(string.lowercased()).count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014023
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    let charSet = Set(string.lowercased())\n    return charSet.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_distinct_characters(string: \"\") == 0)\n\
    assert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014133
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    // YOUR CODE GOES HERE\n    var result = 0\n    var charArr\
    \ = [Character]()\n    for char in string {\n        if !charArr.contains(char)\
    \ {\n            charArr.append(char)\n            result += 1\n        }\n  \
    \  }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_distinct_characters(string:\
    \ \"\") == 0)\nassert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmp10mdv5_i/tmp10mdv5_i.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b16b6cefc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b16b69e6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b16b69e6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b16b69e57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp10mdv5_i                        0x000055ef0dfd7611 <unavailable> + 5649

    5    libc.so.6                          0x00002b16b6edb460 __libc_start_main +
    245

    6    tmp10mdv5_i                        0x000055ef0dfd7149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1660014133
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return Set(string.lowercased()).count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014023
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return Set(string.lowercased()).count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014023
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(count_distinct_characters(string:\
    \ \"\") == 0)\nassert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmp726wp290/tmp726wp290.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aed9bd4dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aed9ba44b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aed9ba44988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aed9ba437b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp726wp290                        0x000056218599030a <unavailable> + 4874

    5    libc.so.6                          0x00002aed9bf39460 __libc_start_main +
    245

    6    tmp726wp290                        0x000056218598fee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1660014132
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    // TODO: write your code here\n    return 0\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_distinct_characters(string: \"\") == 0)\n\
    assert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmp8c9pbkh4/tmp8c9pbkh4.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab83b470c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab83b167b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab83b167988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab83b1667b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8c9pbkh4                        0x0000555c4398b30a <unavailable> + 4874

    5    libc.so.6                          0x00002ab83b65c460 __libc_start_main +
    245

    6    tmp8c9pbkh4                        0x0000555c4398aee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1660014133
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return Array(Set(string.lowercased())).count\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_distinct_characters(string: \"\") == 0)\n\
    assert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014078
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n  return string.lowercased().characters.reduce(into: Set<Character>())\
    \ { $0.insert($1) }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_distinct_characters(string:\
    \ \"\") == 0)\nassert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpq50ln8za.swift:8:30: error: 'characters' is unavailable: Please\
    \ use String directly\n  return string.lowercased().characters.reduce(into: Set<Character>())\
    \ { $0.insert($1) }.count\n                             ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660014133
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return string.lowercased().characters.uniqued().count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_distinct_characters(string: \"\") == 0)\n\
    assert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpa3nn6zdd.swift:8:43: error: value of type 'String' has no member\
    \ 'uniqued'\n    return string.lowercased().characters.uniqued().count\n     \
    \      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1660014133
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var charSet = Set<Character>()\n    for char in string\
    \ {\n        charSet.insert(char)\n    }\n    return charSet.count\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_distinct_characters(string: \"\") == 0)\n\
    assert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmp6ev1c36r/tmp6ev1c36r.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b56a5d79c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b56a5a70b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b56a5a70988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b56a5a6f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6ev1c36r                        0x00005592200ab5f1 <unavailable> + 5617

    5    libc.so.6                          0x00002b56a5f65460 __libc_start_main +
    245

    6    tmp6ev1c36r                        0x00005592200ab129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014078
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var result = 0\n    var set = Set<Character>()\n    for\
    \ char in string {\n        set.insert(char)\n    }\n    result = set.count\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_distinct_characters(string:\
    \ \"\") == 0)\nassert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmpp8db6_gr/tmpp8db6_gr.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaf3583bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaf35532b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaf35532988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaf355317b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp8db6_gr                        0x00005643b0e545f1 <unavailable> + 5617

    5    libc.so.6                          0x00002aaf35a27460 __libc_start_main +
    245

    6    tmpp8db6_gr                        0x00005643b0e54129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014133
