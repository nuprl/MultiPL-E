language: swift
name: HumanEval_18_how_many_times
results:
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    let s = string.characters\n\
    \    let p = substring.characters\n    guard !p.isEmpty && s.count >= p.count\
    \ else { return 0 }\n    let count = s.count\n    let subCount = p.count\n   \
    \ var skip = [Character: Int]()\n    for (i, c) in p.enumerated() {\n        skip[c]\
    \ = subCount - i - 1\n    }\n    var i = 0\n    while i <= count - subCount {\n\
    \        var j = subCount - 1\n        while j >= 0 && s[s.index(s.startIndex,\
    \ offsetBy: i + j)] == p[p.index(p.startIndex, offsetBy: j)] {\n            j\
    \ -= 1\n        }\n        if j < 0 {\n            i += subCount\n        } else\
    \ {\n            i += max(1, skip[s[s.index(s.startIndex, offsetBy: i + subCount\
    \ - 1)]] ?? subCount)\n        }\n    }\n    return i / subCount\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(how_many_times(string: \"\", substring: \"x\"\
    ) == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring: \"x\") == 4)\n\
    assert(how_many_times(string: \"cacacacac\", substring: \"cac\") == 4)\nassert(how_many_times(string:\
    \ \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp233xe6za.swift:10:20: error: 'characters' is unavailable: Please\
    \ use String directly\n    let s = string.characters\n                   ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp233xe6za.swift:11:23:\
    \ error: 'characters' is unavailable: Please use String directly\n    let p =\
    \ substring.characters\n                      ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n"
  stdout: ''
  timestamp: 1660009185
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    var count =\
    \ 0\n    var range = string.startIndex..<string.endIndex\n    while let r = string.range(of:\
    \ substring, options: [], range: range) {\n        count += 1\n        range =\
    \ r.upperBound..<string.endIndex\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\n\
    assert(how_many_times(string: \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string:\
    \ \"cacacacac\", substring: \"cac\") == 4)\nassert(how_many_times(string: \"john\
    \ doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp9iyc7s2c.swift:12:26: error: value of type 'String' has no member\
    \ 'range'\n    while let r = string.range(of: substring, options: [], range: range)\
    \ {\n                  ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1660009185
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    let nsString\
    \ = string as NSString\n    let nsSubstring = substring as NSString\n    let range\
    \ = nsString.range(of: nsSubstring as String)\n    let result = nsString.range(of:\
    \ nsSubstring as String, options: NSString.CompareOptions.caseInsensitive, range:\
    \ range, locale: nil)\n    return result.location != NSNotFound ? 1 + how_many_times(string:\
    \ nsString.substring(from: result.location + result.length), substring: substring)\
    \ : 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpg2_8wr1b.swift:10:30: error: cannot find type 'NSString' in scope\n\
    \    let nsString = string as NSString\n                             ^~~~~~~~\n\
    /tmp/tmpg2_8wr1b.swift:11:36: error: cannot find type 'NSString' in scope\n  \
    \  let nsSubstring = substring as NSString\n                                 \
    \  ^~~~~~~~\n/tmp/tmpg2_8wr1b.swift:13:69: error: cannot find 'NSString' in scope\n\
    \    let result = nsString.range(of: nsSubstring as String, options: NSString.CompareOptions.caseInsensitive,\
    \ range: range, locale: nil)\n                                               \
    \                     ^~~~~~~~\n/tmp/tmpg2_8wr1b.swift:13:132: error: 'nil' requires\
    \ a contextual type\n    let result = nsString.range(of: nsSubstring as String,\
    \ options: NSString.CompareOptions.caseInsensitive, range: range, locale: nil)\n\
    \                                                                            \
    \                                                       ^\n/tmp/tmpg2_8wr1b.swift:14:31:\
    \ error: cannot find 'NSNotFound' in scope\n    return result.location != NSNotFound\
    \ ? 1 + how_many_times(string: nsString.substring(from: result.location + result.length),\
    \ substring: substring) : 0\n                              ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009185
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    var i = 0\n\
    \    var substringCount = 0\n    let searchRange = NSRange(location: 0, length:\
    \ string.characters.count)\n    while let range = string.range(of: substring,\
    \ options: [], range: searchRange, locale: nil) {\n        i = string.characters.distance(from:\
    \ string.startIndex, to: range.lowerBound)\n        substringCount += 1\n    \
    \    string.removeSubrange(string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: i + 1))\n    }\n    return substringCount\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp0k2yd0d4.swift:12:23: error: cannot find 'NSRange' in scope\n \
    \   let searchRange = NSRange(location: 0, length: string.characters.count)\n\
    \                      ^~~~~~~\n/tmp/tmp0k2yd0d4.swift:13:30: error: value of\
    \ type 'String' has no member 'range'\n    while let range = string.range(of:\
    \ substring, options: [], range: searchRange, locale: nil) {\n               \
    \       ~~~~~~ ^~~~~\n/tmp/tmp0k2yd0d4.swift:13:92: error: 'nil' requires a contextual\
    \ type\n    while let range = string.range(of: substring, options: [], range:\
    \ searchRange, locale: nil) {\n                                              \
    \                                             ^\n/tmp/tmp0k2yd0d4.swift:16:16:\
    \ error: cannot use mutating member on immutable value: 'string' is a 'let' constant\n\
    \        string.removeSubrange(string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: i + 1))\n        ~~~~~~ ^\n"
  stdout: ''
  timestamp: 1660009185
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    var count =\
    \ 0\n    var idx = string.startIndex\n    while let range = string.range(of: substring,\
    \ range: idx..<string.endIndex) {\n        count += 1\n        if range.upperBound\
    \ == string.endIndex {\n            break\n        }\n        idx = string.index(after:\
    \ range.upperBound)\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpku0hh7ra.swift:12:30: error: value of type 'String' has no member\
    \ 'range'\n    while let range = string.range(of: substring, range: idx..<string.endIndex)\
    \ {\n                      ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1660009185
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    var result =\
    \ 0\n    for i in 0 ..< string.count - substring.count + 1 {\n        if String(string[i\
    \ ..< i + substring.count]) == substring {\n            result += 1\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpqxhlu4em.swift:12:19: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an integer range, use a String.Index range instead.\n\
    \        if String(string[i ..< i + substring.count]) == substring {\n       \
    \           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nSwift.String:5:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript<R>(bounds:\
    \ R) -> String where R : RangeExpression, R.Bound == Int { get }\n           ^\n"
  stdout: ''
  timestamp: 1660009185
- exit_code: -4
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    if string.count\
    \ == 0 || substring.count == 0 {\n        return 0\n    }\n    if substring.count\
    \ > string.count {\n        return 0\n    }\n    let start_index = string.startIndex\n\
    \    let substring_start_index = substring.startIndex\n    var counter = 0\n \
    \   var index = start_index\n    while index < string.endIndex {\n        if string[index]\
    \ == substring[substring_start_index] {\n            let string_slice = string[index..<string.endIndex]\n\
    \            if string_slice.hasPrefix(substring) {\n                counter +=\
    \ 1\n                index = string.index(index, offsetBy: substring.count - 1)\n\
    \            }\n        }\n        index = string.index(after: index)\n    }\n\
    \    return counter\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: Exception
  stderr: 'tmp72ppq7sx/tmp72ppq7sx.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac5165abc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac5162a2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac5162a2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac5162a17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp72ppq7sx                        0x000055ab5764d984 <unavailable> + 6532

    5    libc.so.6                          0x00002ac516797460 __libc_start_main +
    245

    6    tmp72ppq7sx                        0x000055ab5764d3f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1660009185
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    let nsstring\
    \ = string as NSString\n    let substring = substring as NSString\n    var result\
    \ = 0\n    var range = NSRange(location: 0, length: nsstring.length)\n    while\
    \ true {\n        range = nsstring.range(of: substring as String, options: [],\
    \ range: range)\n        if range.location == NSNotFound {\n            break\n\
    \        }\n        range.location += 1\n        range.length = nsstring.length\
    \ - range.location\n        result += 1\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(how_many_times(string: \"\", substring: \"x\"\
    ) == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring: \"x\") == 4)\n\
    assert(how_many_times(string: \"cacacacac\", substring: \"cac\") == 4)\nassert(how_many_times(string:\
    \ \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp43bpvb1h.swift:10:30: error: cannot find type 'NSString' in scope\n\
    \    let nsstring = string as NSString\n                             ^~~~~~~~\n\
    /tmp/tmp43bpvb1h.swift:11:34: error: cannot find type 'NSString' in scope\n  \
    \  let substring = substring as NSString\n                                 ^~~~~~~~\n\
    /tmp/tmp43bpvb1h.swift:13:17: error: cannot find 'NSRange' in scope\n    var range\
    \ = NSRange(location: 0, length: nsstring.length)\n                ^~~~~~~\n/tmp/tmp43bpvb1h.swift:16:30:\
    \ error: cannot find 'NSNotFound' in scope\n        if range.location == NSNotFound\
    \ {\n                             ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009185
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    let length =\
    \ string.lengthOfBytes(using: .utf8)\n    let sublength = substring.lengthOfBytes(using:\
    \ .utf8)\n    guard length >= sublength else { return 0 }\n    var result = 0\n\
    \    for i in 0...(length - sublength) {\n        if string[i...(i + sublength\
    \ - 1)] == substring {\n            result += 1\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp4tz5ak1h.swift:10:25: error: value of type 'String' has no member\
    \ 'lengthOfBytes'\n    let length = string.lengthOfBytes(using: .utf8)\n     \
    \            ~~~~~~ ^~~~~~~~~~~~~\n/tmp/tmp4tz5ak1h.swift:10:47: error: cannot\
    \ infer contextual base in reference to member 'utf8'\n    let length = string.lengthOfBytes(using:\
    \ .utf8)\n                                             ~^~~~\n/tmp/tmp4tz5ak1h.swift:11:31:\
    \ error: value of type 'String' has no member 'lengthOfBytes'\n    let sublength\
    \ = substring.lengthOfBytes(using: .utf8)\n                    ~~~~~~~~~ ^~~~~~~~~~~~~\n\
    /tmp/tmp4tz5ak1h.swift:11:53: error: cannot infer contextual base in reference\
    \ to member 'utf8'\n    let sublength = substring.lengthOfBytes(using: .utf8)\n\
    \                                                   ~^~~~\n/tmp/tmp4tz5ak1h.swift:14:26:\
    \ error: cannot convert value of type 'Duration' to expected argument type 'Int'\n\
    \    for i in 0...(length - sublength) {\n                         ^\n"
  stdout: ''
  timestamp: 1660009185
- exit_code: 0
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    let length =\
    \ string.count - substring.count + 1\n    var count = 0\n    for i in 0..<length\
    \ {\n        let start = string.index(string.startIndex, offsetBy: i)\n      \
    \  let end = string.index(start, offsetBy: substring.count)\n        if string[start..<end]\
    \ == substring {\n            count += 1\n        }\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(how_many_times(string: \"\", substring: \"x\"\
    ) == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring: \"x\") == 4)\n\
    assert(how_many_times(string: \"cacacacac\", substring: \"cac\") == 4)\nassert(how_many_times(string:\
    \ \"john doe\", substring: \"john\") == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009185
- exit_code: -4
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n  var count = 0\n\
    \  for index in string.indices {\n    let start = string.index(index, offsetBy:\
    \ 0)\n    let end = string.index(index, offsetBy: substring.count)\n    if string[start..<end]\
    \ == substring {\n      count += 1\n    }\n  }\n  return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\n\
    assert(how_many_times(string: \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string:\
    \ \"cacacacac\", substring: \"cac\") == 4)\nassert(how_many_times(string: \"john\
    \ doe\", substring: \"john\") == 1)"
  status: Exception
  stderr: 'Swift/StringCharacterView.swift:153: Fatal error: String index is out of
    bounds

    Current stack trace:

    0    libswiftCore.so                    0x00002afc8976dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afc89464561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002afc89464286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002afc8946413c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002afc89463bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftCore.so                    0x00002afc89597b0d <unavailable> + 2693901

    6    tmpivztqaer                        0x000055981f645ce6 <unavailable> + 7398

    7    tmpivztqaer                        0x000055981f6458db <unavailable> + 6363

    8    libc.so.6                          0x00002afc89959460 __libc_start_main +
    245

    9    tmpivztqaer                        0x000055981f6453e9 <unavailable> + 5097

    '
  stdout: ''
  timestamp: 1660009185
- exit_code: -4
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    let length =\
    \ string.count - substring.count + 1\n    guard length > 0 else { return 0 }\n\
    \    return length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: Exception
  stderr: 'tmpy6hoi92l/tmpy6hoi92l.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7cb6b52c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7cb6849b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7cb6849988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7cb68487b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy6hoi92l                        0x000055bcae72f3d2 <unavailable> + 5074

    5    libc.so.6                          0x00002b7cb6d3e460 __libc_start_main +
    245

    6    tmpy6hoi92l                        0x000055bcae72ef49 <unavailable> + 3913

    '
  stdout: ''
  timestamp: 1660009185
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    var count =\
    \ 0\n    var copied_string = string\n    while true {\n        if let range =\
    \ copied_string.range(of: substring) {\n            count += 1\n            copied_string\
    \ = copied_string.replacingCharacters(in: range, with: \"\")\n        } else {\n\
    \            break\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp21vzzq4x.swift:13:38: error: value of type 'String' has no member\
    \ 'range'\n        if let range = copied_string.range(of: substring) {\n     \
    \                  ~~~~~~~~~~~~~ ^~~~~\n/tmp/tmp21vzzq4x.swift:15:43: error: value\
    \ of type 'String' has no member 'replacingCharacters'\n            copied_string\
    \ = copied_string.replacingCharacters(in: range, with: \"\")\n               \
    \             ~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009185
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    return string.components(separatedBy:\
    \ substring).count - 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpqg05pp0x.swift:10:19: error: value of type 'String' has no member\
    \ 'components'\n    return string.components(separatedBy: substring).count - 1\n\
    \           ~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009185
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    // Write your\
    \ solution here\n    let index_string = string.startIndex\n    let index_substring\
    \ = substring.startIndex\n    var count = 0\n    if string.count < substring.count\
    \ {\n        return 0\n    }\n    for var index in index_string..<string.endIndex\
    \ {\n        let sub = string[index...index]\n        if String(sub) == String(substring[index_substring])\
    \ {\n            count += 1\n            index = string.index(index, offsetBy:\
    \ substring.count - 1)\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\n\
    assert(how_many_times(string: \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string:\
    \ \"cacacacac\", substring: \"cac\") == 4)\nassert(how_many_times(string: \"john\
    \ doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmputbqu6pb.swift:17:34: error: protocol 'Sequence' requires that\
    \ 'String.Index' conform to 'Strideable'\n    for var index in index_string..<string.endIndex\
    \ {\n                                 ^\nSwift.Range:1:11: note: requirement from\
    \ conditional conformance of 'Range<String.Index>' to 'Sequence'\nextension Range\
    \ : Sequence where Bound : Strideable, Bound.Stride : SignedInteger {\n      \
    \    ^\n/tmp/tmputbqu6pb.swift:17:34: error: referencing instance method 'makeIterator()'\
    \ on 'Range' requires that 'String.Index' conform to 'Strideable'\n    for var\
    \ index in index_string..<string.endIndex {\n                                \
    \ ^\nSwift.Range:1:11: note: requirement from conditional conformance of 'Range<String.Index>'\
    \ to 'Collection'\nextension Range : Collection, BidirectionalCollection, RandomAccessCollection\
    \ where Bound : Strideable, Bound.Stride : SignedInteger {\n          ^\n<unknown>:0:\
    \ error: referencing instance method 'next()' on 'Range' requires that 'String.Index'\
    \ conform to 'Strideable'\nSwift.Range:1:11: note: requirement from conditional\
    \ conformance of 'Range<String.Index>' to 'Collection'\nextension Range : Collection,\
    \ BidirectionalCollection, RandomAccessCollection where Bound : Strideable, Bound.Stride\
    \ : SignedInteger {\n          ^\n"
  stdout: ''
  timestamp: 1660009185
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    var start =\
    \ string.startIndex\n    var num_times = 0\n    while start < string.endIndex,\
    \ let range = string.range(of: substring, range: start..<string.endIndex) {\n\
    \        num_times += 1\n        start = range.upperBound\n    }\n    return num_times\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(how_many_times(string: \"\", substring: \"x\"\
    ) == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring: \"x\") == 4)\n\
    assert(how_many_times(string: \"cacacacac\", substring: \"cac\") == 4)\nassert(how_many_times(string:\
    \ \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpforzlov0.swift:12:55: error: value of type 'String' has no member\
    \ 'range'\n    while start < string.endIndex, let range = string.range(of: substring,\
    \ range: start..<string.endIndex) {\n                                        \
    \       ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1660009185
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    let nsString\
    \ = string as NSString\n    let substringRange = nsString.range(of: substring)\n\
    \    if substringRange.location == NSNotFound {\n        return 0\n    }\n   \
    \ let otherRange = NSRange(location: substringRange.location + substringRange.length,\
    \ length: nsString.length - substringRange.location - substringRange.length)\n\
    \    return 1 + how_many_times(string: nsString.substring(with: otherRange), substring:\
    \ substring)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpz01_m49l.swift:10:30: error: cannot find type 'NSString' in scope\n\
    \    let nsString = string as NSString\n                             ^~~~~~~~\n\
    /tmp/tmpz01_m49l.swift:12:35: error: cannot find 'NSNotFound' in scope\n    if\
    \ substringRange.location == NSNotFound {\n                                  ^~~~~~~~~~\n\
    /tmp/tmpz01_m49l.swift:15:22: error: cannot find 'NSRange' in scope\n    let otherRange\
    \ = NSRange(location: substringRange.location + substringRange.length, length:\
    \ nsString.length - substringRange.location - substringRange.length)\n       \
    \              ^~~~~~~\n"
  stdout: ''
  timestamp: 1660009188
- exit_code: -4
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    let arr = Array(string)\n\
    \    var count = 0\n    for i in 0..<arr.count {\n        let subArr = Array(arr[i..<arr.count])\n\
    \        if String(subArr).contains(substring) {\n            count += 1\n   \
    \     }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: Exception
  stderr: 'tmpzi1ju2tb/tmpzi1ju2tb.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac0c7266c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac0c6f5db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac0c6f5d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac0c6f5c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzi1ju2tb                        0x000055718be438b2 <unavailable> + 6322

    5    libc.so.6                          0x00002ac0c7452460 __libc_start_main +
    245

    6    tmpzi1ju2tb                        0x000055718be43429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1660009185
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    let input =\
    \ string.utf8\n    let substring = substring.utf8\n    var out: Int = 0\n    var\
    \ index = input.startIndex\n    let endIndex = input.endIndex\n    while index\
    \ < endIndex {\n        if input[index] == substring[substring.startIndex] {\n\
    \            let result = compare_substring(input: input, substring: substring,\
    \ start: index)\n            if result {\n                out += 1\n         \
    \       index = input.index(index, offsetBy: substring.count)\n            } else\
    \ {\n                index = input.index(after: index)\n            }\n      \
    \  } else {\n            index = input.index(after: index)\n        }\n    }\n\
    \    return out\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp9imi1hi6.swift:17:26: error: cannot find 'compare_substring' in\
    \ scope\n            let result = compare_substring(input: input, substring: substring,\
    \ start: index)\n                         ^~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009185
- exit_code: 0
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    if string.isEmpty\
    \ || substring.isEmpty {\n        return 0\n    }\n    var n = 0\n    for i in\
    \ 0...string.count - substring.count {\n        let start = string.index(string.startIndex,\
    \ offsetBy: i)\n        let end = string.index(string.startIndex, offsetBy: i\
    \ + substring.count)\n        if String(string[start..<end]) == substring {\n\
    \            n += 1\n        }\n    }\n    return n\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009185
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    guard !string.isEmpty\
    \ else { return 0 }\n    guard !substring.isEmpty else { return 0 }\n    return\
    \ string.count - string.replacingOccurrences(of: substring, with: \"\").count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(how_many_times(string: \"\", substring: \"x\"\
    ) == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring: \"x\") == 4)\n\
    assert(how_many_times(string: \"cacacacac\", substring: \"cac\") == 4)\nassert(how_many_times(string:\
    \ \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp7_q6t494.swift:12:34: error: value of type 'String' has no member\
    \ 'replacingOccurrences'\n    return string.count - string.replacingOccurrences(of:\
    \ substring, with: \"\").count\n                          ~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009185
- exit_code: -4
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n  guard substring.count\
    \ <= string.count else { return 0 }\n  var count = 0\n  var index = string.startIndex\n\
    \  while index != string.endIndex {\n    let candidate = string[index...]\n  \
    \  if candidate.starts(with: substring) {\n      count += 1\n      index = string.index(index,\
    \ offsetBy: substring.count)\n    } else {\n      index = string.index(after:\
    \ index)\n    }\n  }\n  return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: Exception
  stderr: 'tmpdhy1ac_f/tmpdhy1ac_f.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2ff0d62c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2ff0a59b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2ff0a59988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2ff0a587b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdhy1ac_f                        0x000055ead876ca14 <unavailable> + 6676

    5    libc.so.6                          0x00002b2ff0f4e460 __libc_start_main +
    245

    6    tmpdhy1ac_f                        0x000055ead876c489 <unavailable> + 5257

    '
  stdout: ''
  timestamp: 1660009185
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    let string =\
    \ string as NSString\n    let substring = substring as NSString\n    var result\
    \ = 0\n    var length_of_substring = substring.length\n    var start_index = 0\n\
    \    while start_index < string.length {\n        let found_range = string.range(of:\
    \ substring as String, options: [], range: NSRange(location: start_index, length:\
    \ string.length - start_index))\n        if found_range.location != NSNotFound\
    \ {\n            result += 1\n            start_index = found_range.location +\
    \ length_of_substring\n        } else {\n            break\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpycei_oaz.swift:10:28: error: cannot find type 'NSString' in scope\n\
    \    let string = string as NSString\n                           ^~~~~~~~\n/tmp/tmpycei_oaz.swift:11:34:\
    \ error: cannot find type 'NSString' in scope\n    let substring = substring as\
    \ NSString\n                                 ^~~~~~~~\n/tmp/tmpycei_oaz.swift:16:85:\
    \ error: cannot find 'NSRange' in scope\n        let found_range = string.range(of:\
    \ substring as String, options: [], range: NSRange(location: start_index, length:\
    \ string.length - start_index))\n                                            \
    \                                        ^~~~~~~\n/tmp/tmpycei_oaz.swift:17:36:\
    \ error: cannot find 'NSNotFound' in scope\n        if found_range.location !=\
    \ NSNotFound {\n                                   ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009185
- exit_code: -4
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    if string.isEmpty\
    \ || substring.isEmpty {\n        return 0\n    }\n    var count = 0\n    for\
    \ i in 0..<string.count {\n        let index = string.index(string.startIndex,\
    \ offsetBy: i)\n        let stringSlice = string[index...]\n        let subIndex\
    \ = stringSlice.index(stringSlice.startIndex, offsetBy: substring.count)\n   \
    \     let subStringSlice = stringSlice[..<subIndex]\n        if String(subStringSlice)\
    \ == substring {\n            count += 1\n        }\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(how_many_times(string: \"\", substring: \"x\"\
    ) == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring: \"x\") == 4)\n\
    assert(how_many_times(string: \"cacacacac\", substring: \"cac\") == 4)\nassert(how_many_times(string:\
    \ \"john doe\", substring: \"john\") == 1)"
  status: Exception
  stderr: 'Swift/Substring.swift:316: Fatal error: String index is out of bounds

    Current stack trace:

    0    libswiftCore.so                    0x00002abb54487c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abb5417e561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abb5417e286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abb5417e13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abb5417dbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftCore.so                    0x00002abb542d8e40 Substring.index(_:offsetBy:)
    + 880

    6    tmps60u97u7                        0x000055ff6d9710f1 <unavailable> + 8433

    7    tmps60u97u7                        0x000055ff6d970b1b <unavailable> + 6939

    8    libc.so.6                          0x00002abb54673460 __libc_start_main +
    245

    9    tmps60u97u7                        0x000055ff6d970629 <unavailable> + 5673

    '
  stdout: ''
  timestamp: 1660009185
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    var string =\
    \ string\n    var count = 0\n    while let range = string.range(of: substring)\
    \ {\n        count += 1\n        string = string.replacingCharacters(in: range,\
    \ with: \"\")\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpxltm6kmf.swift:12:30: error: value of type 'String' has no member\
    \ 'range'\n    while let range = string.range(of: substring) {\n             \
    \         ~~~~~~ ^~~~~\n/tmp/tmpxltm6kmf.swift:14:25: error: value of type 'String'\
    \ has no member 'replacingCharacters'\n        string = string.replacingCharacters(in:\
    \ range, with: \"\")\n                 ~~~~~~ ^~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009185
- exit_code: -4
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    return [\"a\"\
    , \"a\", \"a\", \"a\", \"a\"].filter { $0 == \"a\" }.count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\n\
    assert(how_many_times(string: \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string:\
    \ \"cacacacac\", substring: \"cac\") == 4)\nassert(how_many_times(string: \"john\
    \ doe\", substring: \"john\") == 1)"
  status: Exception
  stderr: 'tmpybq45hoi/tmpybq45hoi.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac85abe7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac85a8deb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac85a8de988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac85a8dd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpybq45hoi                        0x0000562d67cf7547 <unavailable> + 5447

    5    libc.so.6                          0x00002ac85add3460 __libc_start_main +
    245

    6    tmpybq45hoi                        0x0000562d67cf7199 <unavailable> + 4505

    '
  stdout: ''
  timestamp: 1660009185
- exit_code: -4
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    return 0\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(how_many_times(string: \"\", substring: \"x\"\
    ) == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring: \"x\") == 4)\n\
    assert(how_many_times(string: \"cacacacac\", substring: \"cac\") == 4)\nassert(how_many_times(string:\
    \ \"john doe\", substring: \"john\") == 1)"
  status: Exception
  stderr: 'tmpa1ljw6t2/tmpa1ljw6t2.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afd74aa5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afd7479cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afd7479c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afd7479b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpa1ljw6t2                        0x000055655b9ad372 <unavailable> + 4978

    5    libc.so.6                          0x00002afd74c91460 __libc_start_main +
    245

    6    tmpa1ljw6t2                        0x000055655b9acee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1660009185
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    guard string.count\
    \ >= substring.count else { return 0 }\n    let count = string.count\n    let\
    \ subCount = substring.count\n    let start = string.startIndex\n    let end =\
    \ string.index(start, offsetBy: count - subCount + 1)\n    var countTimes = 0\n\
    \    for i in start..<end {\n        let startIndex = string.index(i, offsetBy:\
    \ 0)\n        let endIndex = string.index(i, offsetBy: subCount)\n        let\
    \ range = startIndex..<endIndex\n        if string[range] == substring {\n   \
    \         countTimes += 1\n        }\n    }\n    return countTimes\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(how_many_times(string: \"\", substring: \"x\"\
    ) == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring: \"x\") == 4)\n\
    assert(how_many_times(string: \"cacacacac\", substring: \"cac\") == 4)\nassert(how_many_times(string:\
    \ \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpm186wlv0.swift:16:19: error: protocol 'Sequence' requires that\
    \ 'String.Index' conform to 'Strideable'\n    for i in start..<end {\n       \
    \           ^\nSwift.Range:1:11: note: requirement from conditional conformance\
    \ of 'Range<String.Index>' to 'Sequence'\nextension Range : Sequence where Bound\
    \ : Strideable, Bound.Stride : SignedInteger {\n          ^\n/tmp/tmpm186wlv0.swift:16:19:\
    \ error: referencing instance method 'makeIterator()' on 'Range' requires that\
    \ 'String.Index' conform to 'Strideable'\n    for i in start..<end {\n       \
    \           ^\nSwift.Range:1:11: note: requirement from conditional conformance\
    \ of 'Range<String.Index>' to 'Collection'\nextension Range : Collection, BidirectionalCollection,\
    \ RandomAccessCollection where Bound : Strideable, Bound.Stride : SignedInteger\
    \ {\n          ^\n<unknown>:0: error: referencing instance method 'next()' on\
    \ 'Range' requires that 'String.Index' conform to 'Strideable'\nSwift.Range:1:11:\
    \ note: requirement from conditional conformance of 'Range<String.Index>' to 'Collection'\n\
    extension Range : Collection, BidirectionalCollection, RandomAccessCollection\
    \ where Bound : Strideable, Bound.Stride : SignedInteger {\n          ^\n"
  stdout: ''
  timestamp: 1660009185
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    guard substring.count\
    \ > 0 else { return 0 }\n    guard string.count >= substring.count else { return\
    \ 0 }\n    var str = string\n    var s = 0\n    var r = 0\n    while (s < str.count)\
    \ {\n        let r = str.range(of: substring, options: .literal, range: s..<str.endIndex,\
    \ locale: nil)\n        if let found = r {\n            s = found.upperBound\n\
    \            r += 1\n        } else {\n            break\n        }\n    }\n \
    \   return r\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp2683m0p5.swift:16:21: error: value of type 'String' has no member\
    \ 'range'\n        let r = str.range(of: substring, options: .literal, range:\
    \ s..<str.endIndex, locale: nil)\n                ~~~ ^~~~~\n/tmp/tmp2683m0p5.swift:16:52:\
    \ error: cannot infer contextual base in reference to member 'literal'\n     \
    \   let r = str.range(of: substring, options: .literal, range: s..<str.endIndex,\
    \ locale: nil)\n                                                  ~^~~~~~~\n/tmp/tmp2683m0p5.swift:16:94:\
    \ error: 'nil' requires a contextual type\n        let r = str.range(of: substring,\
    \ options: .literal, range: s..<str.endIndex, locale: nil)\n                 \
    \                                                                            ^\n"
  stdout: ''
  timestamp: 1660009185
- exit_code: 0
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    guard substring.count\
    \ > 0 else { return 0 }\n    guard string.count >= substring.count else { return\
    \ 0 }\n    var result = 0\n    for i in 0...(string.count - substring.count) {\n\
    \        if String(string[string.index(string.startIndex, offsetBy: i)..<string.index(string.startIndex,\
    \ offsetBy: i + substring.count)]) == substring {\n            result += 1\n \
    \       }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009185
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    guard substring.count\
    \ <= string.count else { return 0 }\n    guard substring.count != string.count\
    \ else { return string == substring ? 1 : 0 }\n    guard substring.count != 1\
    \ else { return string.reduce(0) { $1 == substring.first! ? $0 + 1 : $0 } }\n\
    \    var result = 0\n    let substringStart = string.startIndex\n    let substringEnd\
    \ = string.index(string.startIndex, offsetBy: substring.count)\n    while substringEnd\
    \ <= string.endIndex {\n        if String(string[substringStart..<substringEnd])\
    \ == substring {\n            result += 1\n        }\n        string.formIndex(after:\
    \ &substringStart)\n        string.formIndex(after: &substringEnd)\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp87mrdpdu.swift:20:33: error: cannot pass immutable value as inout\
    \ argument: 'substringStart' is a 'let' constant\n        string.formIndex(after:\
    \ &substringStart)\n                                ^~~~~~~~~~~~~~~\n/tmp/tmp87mrdpdu.swift:14:5:\
    \ note: change 'let' to 'var' to make it mutable\n    let substringStart = string.startIndex\n\
    \    ^~~\n    var\n/tmp/tmp87mrdpdu.swift:21:33: error: cannot pass immutable\
    \ value as inout argument: 'substringEnd' is a 'let' constant\n        string.formIndex(after:\
    \ &substringEnd)\n                                ^~~~~~~~~~~~~\n/tmp/tmp87mrdpdu.swift:15:5:\
    \ note: change 'let' to 'var' to make it mutable\n    let substringEnd = string.index(string.startIndex,\
    \ offsetBy: substring.count)\n    ^~~\n    var\n"
  stdout: ''
  timestamp: 1660009185
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    guard substring.count\
    \ <= string.count else { return 0 }\n    var count = 0\n    var string = string\n\
    \    while string.contains(substring) {\n        count += 1\n        let index\
    \ = string.index(of: substring)\n        string = String(string[index!...])\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpe1mwinm_.swift:15:38: error: cannot convert value of type 'String'\
    \ to expected argument type 'String.Element' (aka 'Character')\n        let index\
    \ = string.index(of: substring)\n                                     ^\n"
  stdout: ''
  timestamp: 1660009185
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    var counter\
    \ = 0\n    var startIndex = string.startIndex\n    while let range = string.range(of:\
    \ substring, options: [], range: startIndex..<string.endIndex, locale: nil) {\n\
    \        counter += 1\n        startIndex = range.upperBound\n    }\n    return\
    \ counter\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpmf5b5lha.swift:12:30: error: value of type 'String' has no member\
    \ 'range'\n    while let range = string.range(of: substring, options: [], range:\
    \ startIndex..<string.endIndex, locale: nil) {\n                      ~~~~~~ ^~~~~\n\
    /tmp/tmpmf5b5lha.swift:12:109: error: 'nil' requires a contextual type\n    while\
    \ let range = string.range(of: substring, options: [], range: startIndex..<string.endIndex,\
    \ locale: nil) {\n                                                           \
    \                                                 ^\n"
  stdout: ''
  timestamp: 1660009185
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    if string.isEmpty\
    \ || substring.isEmpty {\n        return 0\n    }\n    return string.reduce(0)\
    \ { (count, char) -> Int in\n        if char == substring.first {\n          \
    \  let index = string.distance(from: string.startIndex, to: string.index(after:\
    \ string.index(of: char)!))\n            let range = string.index(string.startIndex,\
    \ offsetBy: index)..<string.endIndex\n            let rest = String(string[range])\n\
    \            if rest.range(of: substring) != nil {\n                return count\
    \ + 1\n            }\n        }\n        return count\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\n\
    assert(how_many_times(string: \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string:\
    \ \"cacacacac\", substring: \"cac\") == 4)\nassert(how_many_times(string: \"john\
    \ doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpkgtqhmmq.swift:18:21: error: value of type 'String' has no member\
    \ 'range'\n            if rest.range(of: substring) != nil {\n               ~~~~\
    \ ^~~~~\n"
  stdout: ''
  timestamp: 1660009185
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    var count =\
    \ 0\n    var curr = 0\n    while curr != -1 {\n        curr = string.find(substring,\
    \ start: curr)\n        if curr != -1 {\n            count += 1\n            curr\
    \ += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmph35iqu6_.swift:13:23: error: value of type 'String' has no member\
    \ 'find'\n        curr = string.find(substring, start: curr)\n               ~~~~~~\
    \ ^~~~\n"
  stdout: ''
  timestamp: 1660009185
- exit_code: -4
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    // FIXME\n \
    \   return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: Exception
  stderr: 'tmp0ad3dox9/tmp0ad3dox9.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae58e666c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae58e35db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae58e35d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae58e35c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0ad3dox9                        0x0000559ae589a372 <unavailable> + 4978

    5    libc.so.6                          0x00002ae58e852460 __libc_start_main +
    245

    6    tmp0ad3dox9                        0x0000559ae5899ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1660009185
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    return string.components(separatedBy:\
    \ substring).count - 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpqg05pp0x.swift:10:19: error: value of type 'String' has no member\
    \ 'components'\n    return string.components(separatedBy: substring).count - 1\n\
    \           ~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009185
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    var count =\
    \ 0\n    var idx = string.startIndex\n    let end = string.endIndex\n    while\
    \ idx != end {\n        let range = string.range(of: substring, options: [], range:\
    \ idx..<end, locale: nil)\n        if range == nil {\n            break\n    \
    \    }\n        idx = range!.upperBound\n        count += 1\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp41qto352.swift:14:28: error: value of type 'String' has no member\
    \ 'range'\n        let range = string.range(of: substring, options: [], range:\
    \ idx..<end, locale: nil)\n                    ~~~~~~ ^~~~~\n/tmp/tmp41qto352.swift:14:88:\
    \ error: 'nil' requires a contextual type\n        let range = string.range(of:\
    \ substring, options: [], range: idx..<end, locale: nil)\n                   \
    \                                                                    ^\n"
  stdout: ''
  timestamp: 1660009185
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    return string.components(separatedBy:\
    \ substring).count - 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpqg05pp0x.swift:10:19: error: value of type 'String' has no member\
    \ 'components'\n    return string.components(separatedBy: substring).count - 1\n\
    \           ~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009185
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    var count =\
    \ 0\n    var startIndex = string.startIndex\n    while let substringRange = string.range(of:\
    \ substring, options: .caseInsensitive, range: Range(uncheckedBounds: (lower:\
    \ startIndex, upper: string.endIndex))) {\n        count += 1\n        startIndex\
    \ = substringRange.upperBound\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpiux8xbun.swift:12:39: error: value of type 'String' has no member\
    \ 'range'\n    while let substringRange = string.range(of: substring, options:\
    \ .caseInsensitive, range: Range(uncheckedBounds: (lower: startIndex, upper: string.endIndex)))\
    \ {\n                               ~~~~~~ ^~~~~\n/tmp/tmpiux8xbun.swift:12:70:\
    \ error: cannot infer contextual base in reference to member 'caseInsensitive'\n\
    \    while let substringRange = string.range(of: substring, options: .caseInsensitive,\
    \ range: Range(uncheckedBounds: (lower: startIndex, upper: string.endIndex)))\
    \ {\n                                                                    ~^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009185
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    return string.components(separatedBy:\
    \ substring).count - 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpqg05pp0x.swift:10:19: error: value of type 'String' has no member\
    \ 'components'\n    return string.components(separatedBy: substring).count - 1\n\
    \           ~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009185
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    var result =\
    \ 0\n    var s = string\n    while true {\n        if let range = s.range(of:\
    \ substring) {\n            s = s.substring(from: range.upperBound)\n        \
    \    result += 1\n        } else {\n            break\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp_7beb4te.swift:13:26: error: value of type 'String' has no member\
    \ 'range'\n        if let range = s.range(of: substring) {\n                 \
    \      ~ ^~~~~\n/tmp/tmp_7beb4te.swift:14:19: error: value of type 'String' has\
    \ no member 'substring'\n            s = s.substring(from: range.upperBound)\n\
    \                ~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009185
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    if string.isEmpty\
    \ || substring.isEmpty {\n        return 0\n    }\n    let results = string.matches(for:\
    \ substring)\n    return results.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpk8gnbyup.swift:13:33: error: incorrect argument label in call (have\
    \ 'for:', expected 'of:')\n    let results = string.matches(for: substring)\n\
    \                                ^~~~\n                                 of\n/tmp/tmpk8gnbyup.swift:13:19:\
    \ error: instance method 'matches(of:)' requires that 'String' conform to 'RegexComponent'\n\
    \    let results = string.matches(for: substring)\n                  ^\n_StringProcessing.BidirectionalCollection:3:17:\
    \ note: where 'some RegexComponent' = 'String'\n    public func matches<Output>(of\
    \ r: some RegexComponent) -> [Regex<Output>.Match]\n                ^\n"
  stdout: ''
  timestamp: 1660009185
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n\tvar count = 0\n\
    \tif substring.isEmpty {\n\t\treturn count\n\t}\n\t\n\tlet substring_length =\
    \ substring.lengthOfBytes(using: .utf8)\n\tlet string_length = string.lengthOfBytes(using:\
    \ .utf8)\n\t\n\tfor offset in 0...(string_length - substring_length) {\n\t\tif\
    \ (string as NSString).substring(with: NSRange(location: offset, length: substring_length))\
    \ == substring {\n\t\t\tcount += 1\n\t\t}\n\t}\n\t\n\treturn count\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(how_many_times(string: \"\", substring: \"x\"\
    ) == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring: \"x\") == 4)\n\
    assert(how_many_times(string: \"cacacacac\", substring: \"cac\") == 4)\nassert(how_many_times(string:\
    \ \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpf6x433__.swift:15:35: error: value of type 'String' has no member\
    \ 'lengthOfBytes'\n        let substring_length = substring.lengthOfBytes(using:\
    \ .utf8)\n                               ~~~~~~~~~ ^~~~~~~~~~~~~\n/tmp/tmpf6x433__.swift:15:57:\
    \ error: cannot infer contextual base in reference to member 'utf8'\n        let\
    \ substring_length = substring.lengthOfBytes(using: .utf8)\n                 \
    \                                             ~^~~~\n/tmp/tmpf6x433__.swift:16:29:\
    \ error: value of type 'String' has no member 'lengthOfBytes'\n        let string_length\
    \ = string.lengthOfBytes(using: .utf8)\n                            ~~~~~~ ^~~~~~~~~~~~~\n\
    /tmp/tmpf6x433__.swift:16:51: error: cannot infer contextual base in reference\
    \ to member 'utf8'\n        let string_length = string.lengthOfBytes(using: .utf8)\n\
    \                                                        ~^~~~\n/tmp/tmpf6x433__.swift:18:35:\
    \ error: cannot convert value of type 'Duration' to expected argument type 'Int'\n\
    \        for offset in 0...(string_length - substring_length) {\n            \
    \                             ^\n"
  stdout: ''
  timestamp: 1660009185
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n\tvar count = 0\n\
    \tvar range = string.startIndex..<string.endIndex\n\twhile let r = string.range(of:\
    \ substring, options: [], range: range) {\n\t\tcount += 1\n\t\trange = r.upperBound..<string.endIndex\n\
    \t}\n\treturn count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpoiwh3ver.swift:12:23: error: value of type 'String' has no member\
    \ 'range'\n        while let r = string.range(of: substring, options: [], range:\
    \ range) {\n                      ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1660009185
- exit_code: -4
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    if string.isEmpty\
    \ || substring.isEmpty {\n        return 0\n    }\n    if string.count < substring.count\
    \ {\n        return 0\n    }\n    if string == substring {\n        return 1\n\
    \    }\n    if string.prefix(substring.count) == substring {\n        return 1\
    \ + how_many_times(string: String(string.suffix(string.count - substring.count)),\
    \ substring: substring)\n    }\n    return how_many_times(string: String(string.suffix(string.count\
    \ - 1)), substring: substring)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: Exception
  stderr: 'tmpxuvo3ku9/tmpxuvo3ku9.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b13faa9cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b13fa793b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b13fa793988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b13fa7927b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxuvo3ku9                        0x000055b941f9d854 <unavailable> + 6228

    5    libc.so.6                          0x00002b13fac88460 __libc_start_main +
    245

    6    tmpxuvo3ku9                        0x000055b941f9d2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660009185
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    return string.components(separatedBy:\
    \ substring).count - 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpqg05pp0x.swift:10:19: error: value of type 'String' has no member\
    \ 'components'\n    return string.components(separatedBy: substring).count - 1\n\
    \           ~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009185
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    if substring.isEmpty\
    \ {\n        return 0\n    }\n    if string.isEmpty {\n        return 0\n    }\n\
    \    let range = (string as NSString).range(of: substring)\n    if range.location\
    \ == NSNotFound {\n        return 0\n    }\n    var count = 1\n    var index =\
    \ range.location + range.length\n    while index < string.count {\n        let\
    \ curRange = (string as NSString).range(of: substring, options: .literal, range:\
    \ NSRange(location: index, length: string.count - index))\n        if curRange.location\
    \ == NSNotFound {\n            break\n        }\n        count += 1\n        index\
    \ = curRange.location + curRange.length\n    }\n    return count\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(how_many_times(string: \"\", substring: \"x\"\
    ) == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring: \"x\") == 4)\n\
    assert(how_many_times(string: \"cacacacac\", substring: \"cac\") == 4)\nassert(how_many_times(string:\
    \ \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpvdmy_14f.swift:16:28: error: cannot find type 'NSString' in scope\n\
    \    let range = (string as NSString).range(of: substring)\n                 \
    \          ^~~~~~~~\n/tmp/tmpvdmy_14f.swift:16:38: error: value of type 'String'\
    \ has no member 'range'\n    let range = (string as NSString).range(of: substring)\n\
    \                ~~~~~~~~~~~~~~~~~~~~ ^~~~~\n/tmp/tmpvdmy_14f.swift:17:26: error:\
    \ cannot find 'NSNotFound' in scope\n    if range.location == NSNotFound {\n \
    \                        ^~~~~~~~~~\n/tmp/tmpvdmy_14f.swift:23:92: error: cannot\
    \ find 'NSRange' in scope\n        let curRange = (string as NSString).range(of:\
    \ substring, options: .literal, range: NSRange(location: index, length: string.count\
    \ - index))\n                                                                \
    \                           ^~~~~~~\n/tmp/tmpvdmy_14f.swift:23:35: error: cannot\
    \ find type 'NSString' in scope\n        let curRange = (string as NSString).range(of:\
    \ substring, options: .literal, range: NSRange(location: index, length: string.count\
    \ - index))\n                                  ^~~~~~~~\n/tmp/tmpvdmy_14f.swift:23:45:\
    \ error: value of type 'String' has no member 'range'\n        let curRange =\
    \ (string as NSString).range(of: substring, options: .literal, range: NSRange(location:\
    \ index, length: string.count - index))\n                       ~~~~~~~~~~~~~~~~~~~~\
    \ ^~~~~\n/tmp/tmpvdmy_14f.swift:23:76: error: cannot infer contextual base in\
    \ reference to member 'literal'\n        let curRange = (string as NSString).range(of:\
    \ substring, options: .literal, range: NSRange(location: index, length: string.count\
    \ - index))\n                                                                \
    \          ~^~~~~~~\n/tmp/tmpvdmy_14f.swift:24:33: error: cannot find 'NSNotFound'\
    \ in scope\n        if curRange.location == NSNotFound {\n                   \
    \             ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009185
- exit_code: 0
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    guard string.count\
    \ >= substring.count else { return 0 }\n    var count = 0\n    for i in 0..<string.count\
    \ - substring.count + 1 {\n        let start = string.index(string.startIndex,\
    \ offsetBy: i)\n        let end = string.index(string.startIndex, offsetBy: i\
    \ + substring.count)\n        if string[start..<end] == substring {\n        \
    \    count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009186
- exit_code: 0
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    guard string.count\
    \ >= substring.count else { return 0 }\n    let substringLength = substring.count\n\
    \    let stringLength = string.count\n    let stringArray = Array(string)\n  \
    \  let substringArray = Array(substring)\n    var result = 0\n    for i in 0...(stringLength\
    \ - substringLength) {\n        var matchCount = 0\n        for j in 0..<substringLength\
    \ {\n            if stringArray[i + j] == substringArray[j] {\n              \
    \  matchCount += 1\n            }\n        }\n        if matchCount == substringLength\
    \ {\n            result += 1\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(how_many_times(string: \"\", substring: \"x\"\
    ) == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring: \"x\") == 4)\n\
    assert(how_many_times(string: \"cacacacac\", substring: \"cac\") == 4)\nassert(how_many_times(string:\
    \ \"john doe\", substring: \"john\") == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009186
- exit_code: -4
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    var counter\
    \ = 0\n    let length_of_string = string.count\n    let length_of_substring =\
    \ substring.count\n    for i in 0..<length_of_string {\n        let range = string.index(string.startIndex,\
    \ offsetBy: i)..<string.index(string.startIndex, offsetBy: i + length_of_substring)\n\
    \        if substring == String(string[range]) {\n            counter += 1\n \
    \       }\n    }\n    return counter\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: Exception
  stderr: 'Swift/StringCharacterView.swift:153: Fatal error: String index is out of
    bounds

    Current stack trace:

    0    libswiftCore.so                    0x00002ae56e750c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae56e447561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ae56e447286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ae56e44713c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ae56e446bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftCore.so                    0x00002ae56e57ab0d <unavailable> + 2693901

    6    tmp_4n5sx64                        0x000056329102fbbf <unavailable> + 7103

    7    tmp_4n5sx64                        0x000056329102f77b <unavailable> + 6011

    8    libc.so.6                          0x00002ae56e93c460 __libc_start_main +
    245

    9    tmp_4n5sx64                        0x000056329102f289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660009186
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    var count =\
    \ 0\n    for i in 0..<string.count {\n        if string[i] == substring[0] {\n\
    \            if (string.count - i) >= substring.count {\n                let sub_string\
    \ = string[i..<i+substring.count]\n                if sub_string == substring\
    \ {\n                    count += 1\n                }\n            }\n      \
    \  }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp91yj8wl3.swift:12:12: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n        if string[i]\
    \ == substring[0] {\n           ^~~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n/tmp/tmp91yj8wl3.swift:12:25: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if string[i] == substring[0] {\n                        ^~~~~~~~~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp91yj8wl3.swift:14:34:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an integer\
    \ range, use a String.Index range instead.\n                let sub_string = string[i..<i+substring.count]\n\
    \                                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nSwift.String:5:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript<R>(bounds: R) -> String where R : RangeExpression, R.Bound == Int\
    \ { get }\n           ^\n"
  stdout: ''
  timestamp: 1660009185
- exit_code: -4
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    if string.count\
    \ < substring.count {\n        return 0\n    }\n    var occurences = 0\n    var\
    \ left_index = string.startIndex\n    while left_index != string.endIndex {\n\
    \        if let index = string.index(left_index, offsetBy: substring.count, limitedBy:\
    \ string.endIndex) {\n            if string[left_index..<index] == substring {\n\
    \                occurences += 1\n            }\n            left_index = string.index(after:\
    \ index)\n        } else {\n            break\n        }\n    }\n    return occurences\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(how_many_times(string: \"\", substring: \"x\"\
    ) == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring: \"x\") == 4)\n\
    assert(how_many_times(string: \"cacacacac\", substring: \"cac\") == 4)\nassert(how_many_times(string:\
    \ \"john doe\", substring: \"john\") == 1)"
  status: Exception
  stderr: 'Swift/StringIndexValidation.swift:252: Fatal error: String index is out
    of bounds

    Current stack trace:

    0    libswiftCore.so                    0x00002b66d7583c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b66d727a561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b66d727a286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b66d727a13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b66d7279bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftCore.so                    0x00002b66d73ad455 <unavailable> + 2692181

    6    libswiftCore.so                    0x00002b66d7287210 String.index(after:)
    + 15

    7    tmpj1_42gn_                        0x000055f288c4ece6 <unavailable> + 7398

    8    tmpj1_42gn_                        0x000055f288c4e6fb <unavailable> + 5883

    9    libc.so.6                          0x00002b66d776f460 __libc_start_main +
    245

    10   tmpj1_42gn_                        0x000055f288c4e2f9 <unavailable> + 4857

    '
  stdout: ''
  timestamp: 1660009186
- exit_code: -4
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    if substring.isEmpty\
    \ {\n        return 0\n    }\n    if string.isEmpty {\n        return 0\n    }\n\
    \    var count = 0\n    for index in string.indices {\n        if string[index]\
    \ == substring[substring.startIndex] {\n            let indexString = string.index(index,\
    \ offsetBy: substring.count)\n            if indexString <= string.endIndex &&\
    \ string[index..<indexString] == substring {\n                count += 1\n   \
    \         }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: Exception
  stderr: 'Swift/StringCharacterView.swift:153: Fatal error: String index is out of
    bounds

    Current stack trace:

    0    libswiftCore.so                    0x00002b482a667c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b482a35e561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b482a35e286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b482a35e13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b482a35dbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftCore.so                    0x00002b482a491b0d <unavailable> + 2693901

    6    tmp319u4_bh                        0x0000558fdbf3802e <unavailable> + 8238

    7    tmp319u4_bh                        0x0000558fdbf37b6b <unavailable> + 7019

    8    libc.so.6                          0x00002b482a853460 __libc_start_main +
    245

    9    tmp319u4_bh                        0x0000558fdbf37679 <unavailable> + 5753

    '
  stdout: ''
  timestamp: 1660009186
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    var counter\
    \ = 0\n    for i in 0..<string.count {\n        if string[i...].starts(with: substring)\
    \ {\n            counter += 1\n        }\n    }\n    return counter\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(how_many_times(string: \"\", substring: \"x\"\
    ) == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring: \"x\") == 4)\n\
    assert(how_many_times(string: \"cacacacac\", substring: \"cac\") == 4)\nassert(how_many_times(string:\
    \ \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp0wqcoj13.swift:12:12: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an integer range, use a String.Index range instead.\n\
    \        if string[i...].starts(with: substring) {\n           ^~~~~~~~~~~~\n\
    Swift.String:5:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript<R>(bounds: R) -> String where R : RangeExpression,\
    \ R.Bound == Int { get }\n           ^\n"
  stdout: ''
  timestamp: 1660009185
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    let len = string.characters.count\n\
    \    let sublen = substring.characters.count\n    if len == 0 || sublen == 0 ||\
    \ len < sublen {\n        return 0\n    }\n    var j = 0\n    var count = 0\n\
    \    for i in 0...len-sublen {\n        for j in 0..<sublen {\n            if\
    \ string[string.index(string.startIndex, offsetBy: i+j)] != substring[substring.index(substring.startIndex,\
    \ offsetBy: j)] {\n                break\n            }\n        }\n        if\
    \ j == sublen {\n            count += 1\n        }\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(how_many_times(string: \"\", substring: \"x\"\
    ) == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring: \"x\") == 4)\n\
    assert(how_many_times(string: \"cacacacac\", substring: \"cac\") == 4)\nassert(how_many_times(string:\
    \ \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmph3mgqy_m.swift:10:22: error: 'characters' is unavailable: Please\
    \ use String directly\n    let len = string.characters.count\n               \
    \      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmph3mgqy_m.swift:11:28:\
    \ error: 'characters' is unavailable: Please use String directly\n    let sublen\
    \ = substring.characters.count\n                           ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmph3mgqy_m.swift:15:9: warning: variable\
    \ 'j' was never mutated; consider changing to 'let' constant\n    var j = 0\n\
    \    ~~~ ^\n    let\n"
  stdout: ''
  timestamp: 1660009185
- exit_code: 0
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    if string.isEmpty\
    \ || substring.isEmpty {\n        return 0\n    }\n    let stringLength = string.count\n\
    \    let subStringLength = substring.count\n    if stringLength < subStringLength\
    \ {\n        return 0\n    }\n    if stringLength == subStringLength {\n     \
    \   return string == substring ? 1 : 0\n    }\n    var count = 0\n    for (index,\
    \ _) in string.enumerated() {\n        if index <= stringLength - subStringLength\
    \ {\n            let startIndex = string.index(string.startIndex, offsetBy: index)\n\
    \            let endIndex = string.index(string.startIndex, offsetBy: index +\
    \ subStringLength)\n            let tempSubString = string[startIndex..<endIndex]\n\
    \            if tempSubString == substring {\n                count += 1\n   \
    \         }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009186
- exit_code: 0
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    let s = Array(string)\n\
    \    let sub = Array(substring)\n    var count = 0\n    if string.isEmpty || substring.isEmpty\
    \ {\n        return 0\n    }\n    for i in 0..<s.count {\n        if s[i] == sub[0]\
    \ {\n            var temp = true\n            for j in 1..<sub.count {\n     \
    \           if i + j >= s.count {\n                    temp = false\n        \
    \            break\n                }\n                if s[i + j] != sub[j] {\n\
    \                    temp = false\n                    break\n               \
    \ }\n            }\n            if temp {\n                count += 1\n      \
    \      }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009186
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    var count =\
    \ 0\n    var start = string.startIndex\n    let end = string.endIndex\n    while\
    \ start < end {\n        let range = string.range(of: substring, range: start..<end)\n\
    \        if range != nil {\n            count += 1\n            start = range!.upperBound\n\
    \        } else {\n            break\n        }\n    }\n    return count\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(how_many_times(string: \"\", substring: \"x\"\
    ) == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring: \"x\") == 4)\n\
    assert(how_many_times(string: \"cacacacac\", substring: \"cac\") == 4)\nassert(how_many_times(string:\
    \ \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp_yvh5nd2.swift:14:28: error: value of type 'String' has no member\
    \ 'range'\n        let range = string.range(of: substring, range: start..<end)\n\
    \                    ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1660009185
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    guard !string.isEmpty\
    \ && !substring.isEmpty else { return 0 }\n    var sIndex = string.startIndex\n\
    \    var count = 0\n    while let rIndex = string.range(of: substring, range:\
    \ sIndex..<string.endIndex)?.lowerBound {\n        count += 1\n        sIndex\
    \ = string.index(after: rIndex)\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\n\
    assert(how_many_times(string: \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string:\
    \ \"cacacacac\", substring: \"cac\") == 4)\nassert(how_many_times(string: \"john\
    \ doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpnwmoktyy.swift:13:31: error: value of type 'String' has no member\
    \ 'range'\n    while let rIndex = string.range(of: substring, range: sIndex..<string.endIndex)?.lowerBound\
    \ {\n                       ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1660009185
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    var i = 0\n\
    \    while true {\n        if let range = string.range(of: substring, options:\
    \ [], range: string.startIndex..<string.endIndex, locale: nil) {\n           \
    \ string.removeSubrange(range)\n            i += 1\n        } else {\n       \
    \     break\n        }\n    }\n    return i\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpz4w96v_r.swift:12:31: error: value of type 'String' has no member\
    \ 'range'\n        if let range = string.range(of: substring, options: [], range:\
    \ string.startIndex..<string.endIndex, locale: nil) {\n                      \
    \ ~~~~~~ ^~~~~\n/tmp/tmpz4w96v_r.swift:12:117: error: 'nil' requires a contextual\
    \ type\n        if let range = string.range(of: substring, options: [], range:\
    \ string.startIndex..<string.endIndex, locale: nil) {\n                      \
    \                                                                            \
    \                  ^\n/tmp/tmpz4w96v_r.swift:13:20: error: no exact matches in\
    \ call to instance method 'removeSubrange'\n            string.removeSubrange(range)\n\
    \                   ^\n/tmp/tmpz4w96v_r.swift:13:20: note: found candidate with\
    \ type '(Range<String.Index>) -> ()'\n            string.removeSubrange(range)\n\
    \                   ^\n"
  stdout: ''
  timestamp: 1660009185
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    var counter\
    \ = 0\n    var index = string.startIndex\n    while index < string.endIndex {\n\
    \        if string.substring(from: index).hasPrefix(substring) {\n           \
    \ counter += 1\n            index = string.index(index, offsetBy: substring.count)\n\
    \        } else {\n            index = string.index(after: index)\n        }\n\
    \    }\n    return counter\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpcpl5op55.swift:13:19: error: value of type 'String' has no member\
    \ 'substring'\n        if string.substring(from: index).hasPrefix(substring) {\n\
    \           ~~~~~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009186
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    guard !string.isEmpty\
    \ && !substring.isEmpty else { return 0 }\n    guard string.count >= substring.count\
    \ else { return 0 }\n    var count = 0\n    var location = string.startIndex\n\
    \    while let range = string.range(of: substring, range: location..<string.endIndex)\
    \ {\n        count += 1\n        location = range.upperBound\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpp2sl1oko.swift:14:30: error: value of type 'String' has no member\
    \ 'range'\n    while let range = string.range(of: substring, range: location..<string.endIndex)\
    \ {\n                      ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1660009186
- exit_code: -4
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    guard !string.isEmpty\
    \ else { return 0 }\n    guard !substring.isEmpty else { return 0 }\n    guard\
    \ substring.count <= string.count else { return 0 }\n    \n    var howManyTimes\
    \ = 0\n    var substringHead = string.startIndex\n    let substringEnd = string.index(substringHead,\
    \ offsetBy: substring.count)\n    while substringHead != string.endIndex {\n \
    \       if string[substringHead..<substringEnd] == substring {\n            howManyTimes\
    \ += 1\n            substringHead = string.index(substringHead, offsetBy: 1)\n\
    \        } else {\n            substringHead = string.index(substringHead, offsetBy:\
    \ 1)\n        }\n    }\n    return howManyTimes\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b435d743c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b435d43a561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b435d43a286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b435d43a13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b435d439bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpbqkfnn25                        0x0000565110277c5f <unavailable> + 7263

    6    tmpbqkfnn25                        0x00005651102776db <unavailable> + 5851

    7    libc.so.6                          0x00002b435d92f460 __libc_start_main +
    245

    8    tmpbqkfnn25                        0x00005651102772d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660009186
- exit_code: -4
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n\treturn 0\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(how_many_times(string: \"\", substring: \"x\"\
    ) == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring: \"x\") == 4)\n\
    assert(how_many_times(string: \"cacacacac\", substring: \"cac\") == 4)\nassert(how_many_times(string:\
    \ \"john doe\", substring: \"john\") == 1)"
  status: Exception
  stderr: 'tmpexbkk2rj/tmpexbkk2rj.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b699f38bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b699f082b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b699f082988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b699f0817b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpexbkk2rj                        0x000055e401c4a372 <unavailable> + 4978

    5    libc.so.6                          0x00002b699f577460 __libc_start_main +
    245

    6    tmpexbkk2rj                        0x000055e401c49ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1660009186
- exit_code: -4
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    return -1\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(how_many_times(string: \"\", substring: \"x\"\
    ) == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring: \"x\") == 4)\n\
    assert(how_many_times(string: \"cacacacac\", substring: \"cac\") == 4)\nassert(how_many_times(string:\
    \ \"john doe\", substring: \"john\") == 1)"
  status: Exception
  stderr: 'tmpwfnr97hs/tmpwfnr97hs.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1b59ba4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1b5989bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1b5989b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1b5989a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwfnr97hs                        0x000055848f107297 <unavailable> + 4759

    5    libc.so.6                          0x00002b1b59d90460 __libc_start_main +
    245

    6    tmpwfnr97hs                        0x000055848f106ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1660009186
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    var count =\
    \ 0\n    var last_found_index = 0\n    while true {\n        if let found_index\
    \ = string.firstIndex(of: substring, starting_at: last_found_index) {\n      \
    \      count += 1\n            last_found_index = string.index(after: found_index)\n\
    \        } else {\n            break\n        }\n    }\n    return count\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(how_many_times(string: \"\", substring: \"x\"\
    ) == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring: \"x\") == 4)\n\
    assert(how_many_times(string: \"cacacacac\", substring: \"cac\") == 4)\nassert(how_many_times(string:\
    \ \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpgd7me473.swift:13:76: error: extra argument 'starting_at' in call\n\
    \        if let found_index = string.firstIndex(of: substring, starting_at: last_found_index)\
    \ {\n                                              ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~\n\
    /tmp/tmpgd7me473.swift:13:52: error: cannot convert value of type 'String' to\
    \ expected argument type 'String.Element' (aka 'Character')\n        if let found_index\
    \ = string.firstIndex(of: substring, starting_at: last_found_index) {\n      \
    \                                             ^\n/tmp/tmpgd7me473.swift:15:39:\
    \ error: cannot assign value of type 'String.Index' to type 'Int'\n          \
    \  last_found_index = string.index(after: found_index)\n                     \
    \          ~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009186
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    assert(!string.isEmpty)\n\
    \    assert(!substring.isEmpty)\n    let string: Array<Character> = Array(string)\n\
    \    let substring: Array<Character> = Array(substring)\n    var result = 0\n\
    \    let innerClosure = {(index: Int) -> Int in\n        let start = string.index(string.startIndex,\
    \ offsetBy: index)\n        let end = string.index(string.startIndex, offsetBy:\
    \ index + substring.count)\n        let range = start..<end\n        let rangeString\
    \ = String(string[range])\n        if rangeString == substring {\n           \
    \ result += 1\n            return index + 1\n        }\n        return index\n\
    \    }\n    var from = 0\n    while from < string.count {\n        from = innerClosure(from)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp_uuouuse.swift:20:27: error: cannot convert value of type 'Array<Character>'\
    \ to expected argument type 'String'\n        if rangeString == substring {\n\
    \                          ^\n"
  stdout: ''
  timestamp: 1660009186
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    var index =\
    \ string.startIndex\n    var result = 0\n    while true {\n        index = string.index(index,\
    \ offsetBy: 1, limitedBy: string.endIndex) ?? string.endIndex\n        let range\
    \ = index ..< string.endIndex\n        if let range = string.range(of: substring,\
    \ options: [], range: range, locale: nil) {\n            result += 1\n       \
    \     index = range.upperBound\n        } else {\n            break\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpsw48orii.swift:15:31: error: value of type 'String' has no member\
    \ 'range'\n        if let range = string.range(of: substring, options: [], range:\
    \ range, locale: nil) {\n                       ~~~~~~ ^~~~~\n/tmp/tmpsw48orii.swift:15:87:\
    \ error: 'nil' requires a contextual type\n        if let range = string.range(of:\
    \ substring, options: [], range: range, locale: nil) {\n                     \
    \                                                                 ^\n"
  stdout: ''
  timestamp: 1660009186
- exit_code: -4
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    if string.count\
    \ == 0 || substring.count == 0 {\n        return 0\n    }\n    var count = 0\n\
    \    var index = string.startIndex\n    let endIndex = string.endIndex\n    while\
    \ index < endIndex {\n        let nextIndex = string.index(index, offsetBy: substring.count,\
    \ limitedBy: endIndex) ?? endIndex\n        if string[index..<nextIndex] == substring\
    \ {\n            count += 1\n            index = nextIndex\n        } else {\n\
    \            index = string.index(after: index)\n        }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: Exception
  stderr: 'tmpb7bur32y/tmpb7bur32y.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b407e259c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b407df50b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b407df50988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b407df4f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb7bur32y                        0x000055d1f8f9f8e4 <unavailable> + 6372

    5    libc.so.6                          0x00002b407e445460 __libc_start_main +
    245

    6    tmpb7bur32y                        0x000055d1f8f9f359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660009186
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n  let start_substring\
    \ = substring.startIndex\n  let end_substring = substring.endIndex\n  let start_string\
    \ = string.startIndex\n  let end_string = string.endIndex\n  var count = 0\n \
    \ for index in 0...string.count-substring.count {\n    let sub = string[start_string.advancedBy(index)..<start_string.advancedBy(index+substring.count)]\n\
    \    if sub == substring {\n      count += 1\n    }\n  }\n  return count\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(how_many_times(string: \"\", substring: \"x\"\
    ) == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring: \"x\") == 4)\n\
    assert(how_many_times(string: \"cacacacac\", substring: \"cac\") == 4)\nassert(how_many_times(string:\
    \ \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp3vxn010o.swift:16:35: error: value of type 'String.Index' has no\
    \ member 'advancedBy'\n    let sub = string[start_string.advancedBy(index)..<start_string.advancedBy(index+substring.count)]\n\
    \                     ~~~~~~~~~~~~ ^~~~~~~~~~\n/tmp/tmp3vxn010o.swift:16:68: error:\
    \ value of type 'String.Index' has no member 'advancedBy'\n    let sub = string[start_string.advancedBy(index)..<start_string.advancedBy(index+substring.count)]\n\
    \                                                      ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009186
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    var counter\
    \ = 0\n    var index = string.startIndex\n    while index < string.endIndex {\n\
    \        if string.hasPrefix(substring, startingAt: index) {\n            counter\
    \ += 1\n            index = string.index(index, offsetBy: substring.count)\n \
    \       } else {\n            index = string.index(after: index)\n        }\n\
    \    }\n    return counter\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpcqstcmyf.swift:13:52: error: extra argument 'startingAt' in call\n\
    \        if string.hasPrefix(substring, startingAt: index) {\n               \
    \            ~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~\n"
  stdout: ''
  timestamp: 1660009186
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    let charSet\
    \ = CharacterSet(charactersIn: substring)\n    let noSubstring = string.components(separatedBy:\
    \ charSet).joined()\n    return string.count - noSubstring.count\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(how_many_times(string: \"\", substring: \"x\"\
    ) == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring: \"x\") == 4)\n\
    assert(how_many_times(string: \"cacacacac\", substring: \"cac\") == 4)\nassert(how_many_times(string:\
    \ \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmppqh788r7.swift:10:19: error: cannot find 'CharacterSet' in scope\n\
    \    let charSet = CharacterSet(charactersIn: substring)\n                  ^~~~~~~~~~~~\n\
    /tmp/tmppqh788r7.swift:11:30: error: value of type 'String' has no member 'components'\n\
    \    let noSubstring = string.components(separatedBy: charSet).joined()\n    \
    \                  ~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009186
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    var result =\
    \ 0\n    var i = 0\n    while i < string.characters.count - substring.characters.count\
    \ + 1 {\n        let endIndex = string.index(string.startIndex, offsetBy: i +\
    \ substring.characters.count)\n        let range = string.startIndex ..< endIndex\n\
    \        if string[range] == substring {\n            result += 1\n          \
    \  i += substring.characters.count\n        } else {\n            i += 1\n   \
    \     }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpl8oyb89u.swift:12:22: error: 'characters' is unavailable: Please\
    \ use String directly\n    while i < string.characters.count - substring.characters.count\
    \ + 1 {\n                     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpl8oyb89u.swift:12:51: error: 'characters' is unavailable:\
    \ Please use String directly\n    while i < string.characters.count - substring.characters.count\
    \ + 1 {\n                                                  ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmpl8oyb89u.swift:13:80: error: 'characters'\
    \ is unavailable: Please use String directly\n        let endIndex = string.index(string.startIndex,\
    \ offsetBy: i + substring.characters.count)\n                                \
    \                                               ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmpl8oyb89u.swift:17:28: error: 'characters'\
    \ is unavailable: Please use String directly\n            i += substring.characters.count\n\
    \                           ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1660009186
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    guard !string.isEmpty\
    \ else { return 0 }\n    guard !substring.isEmpty else { return 0 }\n    var count\
    \ = 0\n    var startIndex = string.startIndex\n    while let range = string.range(of:\
    \ substring, options: [], range: startIndex..<string.endIndex, locale: nil) {\n\
    \        count += 1\n        startIndex = range.upperBound\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp3pepeiul.swift:14:30: error: value of type 'String' has no member\
    \ 'range'\n    while let range = string.range(of: substring, options: [], range:\
    \ startIndex..<string.endIndex, locale: nil) {\n                      ~~~~~~ ^~~~~\n\
    /tmp/tmp3pepeiul.swift:14:109: error: 'nil' requires a contextual type\n    while\
    \ let range = string.range(of: substring, options: [], range: startIndex..<string.endIndex,\
    \ locale: nil) {\n                                                           \
    \                                                 ^\n"
  stdout: ''
  timestamp: 1660009186
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    let searchString\
    \ = string as NSString\n    let count = searchString.length - substring.characters.count\
    \ + 1\n    var times = 0\n    for i in 0..<count {\n        let range = NSRange(location:\
    \ i, length: substring.characters.count)\n        if searchString.substring(with:\
    \ range) == substring {\n            times += 1\n        }\n    }\n    return\
    \ times\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp0kcibu95.swift:10:34: error: cannot find type 'NSString' in scope\n\
    \    let searchString = string as NSString\n                                 ^~~~~~~~\n\
    /tmp/tmp0kcibu95.swift:14:21: error: cannot find 'NSRange' in scope\n        let\
    \ range = NSRange(location: i, length: substring.characters.count)\n         \
    \           ^~~~~~~\n"
  stdout: ''
  timestamp: 1660009186
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    guard string.characters.count\
    \ >= substring.characters.count else { return 0 }\n    var result = 0\n    for\
    \ index in 0...string.characters.count - substring.characters.count {\n      \
    \  let start = string.startIndex.advancedBy(index)\n        let end = start.advancedBy(substring.characters.count)\n\
    \        if string[start..<end] == substring {\n            result += 1\n    \
    \    }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpsjysfm1c.swift:10:18: error: 'characters' is unavailable: Please\
    \ use String directly\n    guard string.characters.count >= substring.characters.count\
    \ else { return 0 }\n                 ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpsjysfm1c.swift:10:48: error: 'characters' is unavailable:\
    \ Please use String directly\n    guard string.characters.count >= substring.characters.count\
    \ else { return 0 }\n                                               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpsjysfm1c.swift:12:29:\
    \ error: 'characters' is unavailable: Please use String directly\n    for index\
    \ in 0...string.characters.count - substring.characters.count {\n            \
    \                ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpsjysfm1c.swift:12:58: error: 'characters' is unavailable: Please\
    \ use String directly\n    for index in 0...string.characters.count - substring.characters.count\
    \ {\n                                                         ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmpsjysfm1c.swift:13:39: error: value of\
    \ type 'String.Index' has no member 'advancedBy'\n        let start = string.startIndex.advancedBy(index)\n\
    \                    ~~~~~~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009186
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    var count =\
    \ 0\n    var mutableString = string\n    while !mutableString.isEmpty {\n    \
    \    if let index = mutableString.index(of: substring) {\n            count +=\
    \ 1\n            mutableString = String(mutableString[index...])\n        } else\
    \ {\n            break\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\n\
    assert(how_many_times(string: \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string:\
    \ \"cacacacac\", substring: \"cac\") == 4)\nassert(how_many_times(string: \"john\
    \ doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpo6d4dxlp.swift:13:48: error: cannot convert value of type 'String'\
    \ to expected argument type 'String.Element' (aka 'Character')\n        if let\
    \ index = mutableString.index(of: substring) {\n                             \
    \                  ^\n/tmp/tmpo6d4dxlp.swift:15:49: error: no exact matches in\
    \ call to subscript \n            mutableString = String(mutableString[index...])\n\
    \                                                ^\n/tmp/tmpo6d4dxlp.swift:15:49:\
    \ note: found candidate with type '(String.Index) -> Character'\n            mutableString\
    \ = String(mutableString[index...])\n                                        \
    \        ^\n/tmp/tmpo6d4dxlp.swift:15:49: note: found candidate with type '(Range<String.Index>)\
    \ -> Substring'\n            mutableString = String(mutableString[index...])\n\
    \                                                ^\n/tmp/tmpo6d4dxlp.swift:15:49:\
    \ note: found candidate with type '(()) -> String.SubSequence' (aka '(()) -> Substring')\n\
    \            mutableString = String(mutableString[index...])\n               \
    \                                 ^\n/tmp/tmpo6d4dxlp.swift:15:49: note: found\
    \ candidate with type '((UnboundedRange_) -> ()) -> String.SubSequence' (aka '((UnboundedRange_)\
    \ -> ()) -> Substring')\n            mutableString = String(mutableString[index...])\n\
    \                                                ^\n"
  stdout: ''
  timestamp: 1660009186
- exit_code: 0
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    if (string.count\
    \ < substring.count) {\n        return 0\n    }\n    if (string.count == substring.count)\
    \ {\n        return 1\n    }\n    var count = 0\n    var i = 0\n    while i <\
    \ string.count - substring.count + 1 {\n        let currentIndex = string.index(string.startIndex,\
    \ offsetBy: i)\n        let result = string.distance(from: currentIndex, to: string.endIndex)\n\
    \        let range = Range(uncheckedBounds: (currentIndex, string.index(string.startIndex,\
    \ offsetBy: substring.count + i)))\n        let substringOnRange = string[range]\n\
    \        if substringOnRange == substring {\n            count += 1\n        }\n\
    \        i += 1\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009186
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    let maxIndex\
    \ = string.endIndex\n    let tlen = substring.count\n    var cnt = 0\n    var\
    \ last = 0\n    for i in 0..<string.count {\n        if last == i {\n        \
    \    if i + tlen > maxIndex {\n                break\n            }\n        \
    \    let range = string.index(string.startIndex, offsetBy: i)..<string.index(string.startIndex,\
    \ offsetBy: i + tlen)\n            if substring == String(string[range]) {\n \
    \               cnt += 1\n                last = i + tlen\n            }\n   \
    \     }\n    }\n    return cnt\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpeqm5yvln.swift:16:25: error: operator function '>' requires that\
    \ 'String.Index' conform to 'BinaryInteger'\n            if i + tlen > maxIndex\
    \ {\n                        ^\nSwift.BinaryInteger:7:24: note: where 'Other'\
    \ = 'String.Index'\n    public static func > <Other>(lhs: Self, rhs: Other) ->\
    \ Bool where Other : BinaryInteger\n                       ^\n"
  stdout: ''
  timestamp: 1660009186
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n  if string.isEmpty\
    \ || substring.isEmpty {\n    return 0\n  }\n  let length = string.characters.count\n\
    \  let subLength = substring.characters.count\n  var count = 0\n  var index =\
    \ 0\n  while index < length {\n    if let range = string.range(of: substring,\
    \ options: .literal, range: Range(uncheckedBounds: (lower: string.index(string.startIndex,\
    \ offsetBy: index), upper: string.endIndex)), locale: nil) {\n      count += 1\n\
    \      index = string.distance(from: string.startIndex, to: range.upperBound)\n\
    \    } else {\n      break\n    }\n  }\n  return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpsg5lkzmu.swift:13:23: error: 'characters' is unavailable: Please\
    \ use String directly\n  let length = string.characters.count\n              \
    \        ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpsg5lkzmu.swift:14:29:\
    \ error: 'characters' is unavailable: Please use String directly\n  let subLength\
    \ = substring.characters.count\n                            ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmpsg5lkzmu.swift:18:27: error: value of\
    \ type 'String' has no member 'range'\n    if let range = string.range(of: substring,\
    \ options: .literal, range: Range(uncheckedBounds: (lower: string.index(string.startIndex,\
    \ offsetBy: index), upper: string.endIndex)), locale: nil) {\n               \
    \    ~~~~~~ ^~~~~\n/tmp/tmpsg5lkzmu.swift:18:58: error: cannot infer contextual\
    \ base in reference to member 'literal'\n    if let range = string.range(of: substring,\
    \ options: .literal, range: Range(uncheckedBounds: (lower: string.index(string.startIndex,\
    \ offsetBy: index), upper: string.endIndex)), locale: nil) {\n               \
    \                                         ~^~~~~~~\n/tmp/tmpsg5lkzmu.swift:18:189:\
    \ error: 'nil' requires a contextual type\n    if let range = string.range(of:\
    \ substring, options: .literal, range: Range(uncheckedBounds: (lower: string.index(string.startIndex,\
    \ offsetBy: index), upper: string.endIndex)), locale: nil) {\n               \
    \                                                                            \
    \                                                                            \
    \                     ^\n"
  stdout: ''
  timestamp: 1660009186
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    if string.count\
    \ < substring.count {\n        return 0\n    }\n    var count = 0\n    var range\
    \ = string.startIndex ..< string.endIndex\n    while let r = string.range(of:\
    \ substring, options: .literal, range: range, locale: nil) {\n        count +=\
    \ 1\n        range = r.upperBound ..< string.endIndex\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(how_many_times(string: \"\", substring: \"x\"\
    ) == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring: \"x\") == 4)\n\
    assert(how_many_times(string: \"cacacacac\", substring: \"cac\") == 4)\nassert(how_many_times(string:\
    \ \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp1g07kmmp.swift:15:26: error: value of type 'String' has no member\
    \ 'range'\n    while let r = string.range(of: substring, options: .literal, range:\
    \ range, locale: nil) {\n                  ~~~~~~ ^~~~~\n/tmp/tmp1g07kmmp.swift:15:57:\
    \ error: cannot infer contextual base in reference to member 'literal'\n    while\
    \ let r = string.range(of: substring, options: .literal, range: range, locale:\
    \ nil) {\n                                                       ~^~~~~~~\n/tmp/tmp1g07kmmp.swift:15:88:\
    \ error: 'nil' requires a contextual type\n    while let r = string.range(of:\
    \ substring, options: .literal, range: range, locale: nil) {\n               \
    \                                                                        ^\n"
  stdout: ''
  timestamp: 1660009186
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    var count =\
    \ 0\n    var start = string.startIndex\n    while let range = string.range(of:\
    \ substring, range: start..<string.endIndex) {\n        count += 1\n        start\
    \ = range.upperBound\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpoi22_br0.swift:12:30: error: value of type 'String' has no member\
    \ 'range'\n    while let range = string.range(of: substring, range: start..<string.endIndex)\
    \ {\n                      ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1660009186
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    if string.isEmpty\
    \ || substring.isEmpty {\n        return 0\n    }\n\n    var remainingString =\
    \ string\n    var count = 0\n    while let range = remainingString.range(of: substring)\
    \ {\n        count += 1\n        let upperBound = range.upperBound\n        let\
    \ remainingSubstring = remainingString[upperBound...]\n        remainingString\
    \ = String(remainingSubstring)\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\n\
    assert(how_many_times(string: \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string:\
    \ \"cacacacac\", substring: \"cac\") == 4)\nassert(how_many_times(string: \"john\
    \ doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmprhln2aaz.swift:16:39: error: value of type 'String' has no member\
    \ 'range'\n    while let range = remainingString.range(of: substring) {\n    \
    \                  ~~~~~~~~~~~~~~~ ^~~~~\n/tmp/tmprhln2aaz.swift:19:49: error:\
    \ no exact matches in call to subscript \n        let remainingSubstring = remainingString[upperBound...]\n\
    \                                                ^\n/tmp/tmprhln2aaz.swift:19:49:\
    \ note: found candidate with type '(String.Index) -> Character'\n        let remainingSubstring\
    \ = remainingString[upperBound...]\n                                         \
    \       ^\n/tmp/tmprhln2aaz.swift:19:49: note: found candidate with type '(Range<String.Index>)\
    \ -> Substring'\n        let remainingSubstring = remainingString[upperBound...]\n\
    \                                                ^\n/tmp/tmprhln2aaz.swift:19:49:\
    \ note: found candidate with type '(()) -> String.SubSequence' (aka '(()) -> Substring')\n\
    \        let remainingSubstring = remainingString[upperBound...]\n           \
    \                                     ^\n/tmp/tmprhln2aaz.swift:19:49: note: found\
    \ candidate with type '((UnboundedRange_) -> ()) -> String.SubSequence' (aka '((UnboundedRange_)\
    \ -> ()) -> Substring')\n        let remainingSubstring = remainingString[upperBound...]\n\
    \                                                ^\n"
  stdout: ''
  timestamp: 1660009186
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    let length =\
    \ string.count - substring.count + 1\n    return (0..<length).map { String(string[$0..<$0+substring.count])\
    \ }.filter { $0 == substring }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpa8zafkyo.swift:11:38: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an integer range, use a String.Index range instead.\n\
    \    return (0..<length).map { String(string[$0..<$0+substring.count]) }.filter\
    \ { $0 == substring }.count\n                                     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    Swift.String:5:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript<R>(bounds: R) -> String where R : RangeExpression,\
    \ R.Bound == Int { get }\n           ^\n"
  stdout: ''
  timestamp: 1660009191
- exit_code: 0
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    if string.isEmpty\
    \ || substring.isEmpty {\n        return 0\n    }\n    var num_times = 0\n   \
    \ for i in string.indices {\n        if string[i] == substring[substring.startIndex]\
    \ {\n            let str_len = string.distance(from: i, to: string.endIndex)\n\
    \            let sub_len = substring.distance(from: substring.startIndex, to:\
    \ substring.endIndex)\n            if str_len >= sub_len {\n                let\
    \ index = string.index(i, offsetBy: sub_len)\n                if string[i..<index]\
    \ == substring {\n                    num_times += 1\n                }\n    \
    \        }\n        }\n    }\n    return num_times\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009186
- exit_code: -4
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    var count =\
    \ 0\n    var tempStr = string\n    while tempStr.contains(substring) {\n     \
    \   tempStr = String(tempStr.dropFirst(substring.count))\n        count += 1\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: Exception
  stderr: 'tmpbxtidwx1/tmpbxtidwx1.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7872934c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b787262bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b787262b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b787262a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbxtidwx1                        0x000055b19a026592 <unavailable> + 5522

    5    libc.so.6                          0x00002b7872b20460 __libc_start_main +
    245

    6    tmpbxtidwx1                        0x000055b19a026109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660009186
- exit_code: -1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    if string.isEmpty\
    \ || substring.isEmpty {\n        return 0\n    }\n    var result = 0\n    var\
    \ string = string\n    while let index = string.index(of: substring.first!) {\n\
    \        result += 1\n        string = String(string[index...])\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660009191
- exit_code: 0
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n  let string = Array(string)\n\
    \  let substring = Array(substring)\n  var count = 0\n  for i in 0..<string.count\
    \ - substring.count + 1 {\n    let slice = Array(string[i..<i+substring.count])\n\
    \    if slice == substring {\n      count += 1\n    }\n  }\n  return count\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(how_many_times(string: \"\", substring: \"x\"\
    ) == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring: \"x\") == 4)\n\
    assert(how_many_times(string: \"cacacacac\", substring: \"cac\") == 4)\nassert(how_many_times(string:\
    \ \"john doe\", substring: \"john\") == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009186
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n  return string.components(separatedBy:\
    \ substring).count - 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp1us5g74g.swift:10:17: error: value of type 'String' has no member\
    \ 'components'\n  return string.components(separatedBy: substring).count - 1\n\
    \         ~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009186
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    let stringLength\
    \ = string.count\n    let substringLength = substring.count\n    var count = 0\n\
    \    var i = 0\n    while i < stringLength - substringLength + 1 {\n        if\
    \ string[i..<i+substringLength] == substring {\n            count += 1\n     \
    \       i += substringLength\n        } else {\n            i += 1\n        }\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpmclofusc.swift:15:12: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an integer range, use a String.Index range instead.\n\
    \        if string[i..<i+substringLength] == substring {\n           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    Swift.String:5:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript<R>(bounds: R) -> String where R : RangeExpression,\
    \ R.Bound == Int { get }\n           ^\n"
  stdout: ''
  timestamp: 1660009186
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n  var count = 0\n\
    \  var searchStartIndex = string.startIndex\n  while searchStartIndex < string.endIndex,\n\
    \    let range = string.range(of: substring, range: searchStartIndex..<string.endIndex)\
    \ {\n      count += 1\n      searchStartIndex = range.upperBound\n  }\n  return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpe7vlfhab.swift:13:24: error: value of type 'String' has no member\
    \ 'range'\n    let range = string.range(of: substring, range: searchStartIndex..<string.endIndex)\
    \ {\n                ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1660009186
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    if substring.isEmpty\
    \ {\n        return 0\n    }\n    return (string.count - string.replacingOccurrences(of:\
    \ substring, with: \"\").count) / substring.count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpy51iuh8t.swift:13:35: error: value of type 'String' has no member\
    \ 'replacingOccurrences'\n    return (string.count - string.replacingOccurrences(of:\
    \ substring, with: \"\").count) / substring.count\n                          \
    \ ~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009186
- exit_code: -4
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    guard !string.isEmpty\
    \ && !substring.isEmpty else { return 0 }\n    guard string.count >= substring.count\
    \ else { return 0 }\n    var last_index = string.startIndex\n    var count = 0\n\
    \    while last_index != string.endIndex {\n        guard let index = string[last_index...].firstIndex(of:\
    \ substring.first!) else { break }\n        if string[index..<string.index(index,\
    \ offsetBy: substring.count)] == substring {\n            count += 1\n       \
    \     last_index = string.index(index, offsetBy: substring.count)\n        } else\
    \ {\n            last_index = string.index(after: index)\n        }\n    }\n \
    \   return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: Exception
  stderr: 'Swift/StringCharacterView.swift:153: Fatal error: String index is out of
    bounds

    Current stack trace:

    0    libswiftCore.so                    0x00002b523c2b3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b523bfaa561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b523bfaa286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b523bfaa13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b523bfa9bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftCore.so                    0x00002b523c0ddb0d <unavailable> + 2693901

    6    tmpc8m94w_d                        0x000055b5387661ce <unavailable> + 8654

    7    tmpc8m94w_d                        0x000055b538765b1b <unavailable> + 6939

    8    libc.so.6                          0x00002b523c49f460 __libc_start_main +
    245

    9    tmpc8m94w_d                        0x000055b538765629 <unavailable> + 5673

    '
  stdout: ''
  timestamp: 1660009186
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    var input =\
    \ string\n    var count = 0\n    while let range = input.range(of: substring)\
    \ {\n        input = input.replacingCharacters(in: range, with: \"\")\n      \
    \  count += 1\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmppayqzzwy.swift:12:29: error: value of type 'String' has no member\
    \ 'range'\n    while let range = input.range(of: substring) {\n              \
    \        ~~~~~ ^~~~~\n/tmp/tmppayqzzwy.swift:13:23: error: value of type 'String'\
    \ has no member 'replacingCharacters'\n        input = input.replacingCharacters(in:\
    \ range, with: \"\")\n                ~~~~~ ^~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009186
- exit_code: -4
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    return 0\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(how_many_times(string: \"\", substring: \"x\"\
    ) == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring: \"x\") == 4)\n\
    assert(how_many_times(string: \"cacacacac\", substring: \"cac\") == 4)\nassert(how_many_times(string:\
    \ \"john doe\", substring: \"john\") == 1)"
  status: Exception
  stderr: 'tmpa1ljw6t2/tmpa1ljw6t2.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afd74aa5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afd7479cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afd7479c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afd7479b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpa1ljw6t2                        0x000055655b9ad372 <unavailable> + 4978

    5    libc.so.6                          0x00002afd74c91460 __libc_start_main +
    245

    6    tmpa1ljw6t2                        0x000055655b9acee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1660009185
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n  var i = 0\n  var\
    \ j = 0\n  var count = 0\n  while i < string.count {\n    if j == substring.count\
    \ {\n      count += 1\n      j = 0\n    }\n    if string[i] == substring[j] {\n\
    \      j += 1\n    } else {\n      j = 0\n    }\n    i += 1\n  }\n  if j == substring.count\
    \ {\n    count += 1\n  }\n  return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpck0wcken.swift:18:8: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n    if string[i]\
    \ == substring[j] {\n       ^~~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n/tmp/tmpck0wcken.swift:18:21: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \    if string[i] == substring[j] {\n                    ^~~~~~~~~~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n"
  stdout: ''
  timestamp: 1660009186
- exit_code: 0
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    guard !string.isEmpty\
    \ else { return 0 }\n    guard !substring.isEmpty else { return 0 }\n    guard\
    \ string.count >= substring.count else { return 0 }\n    \n    var indexes: [Int]\
    \ = []\n    for i in string.indices {\n        let length = string.distance(from:\
    \ i, to: string.endIndex)\n        if length >= substring.count {\n          \
    \  let j = string.index(i, offsetBy: substring.count)\n            let sub = string[i..<j]\n\
    \            if sub == substring {\n                indexes.append(string.distance(from:\
    \ string.startIndex, to: i))\n            }\n        }\n    }\n    return indexes.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(how_many_times(string: \"\", substring: \"x\"\
    ) == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring: \"x\") == 4)\n\
    assert(how_many_times(string: \"cacacacac\", substring: \"cac\") == 4)\nassert(how_many_times(string:\
    \ \"john doe\", substring: \"john\") == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009186
- exit_code: 0
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    if (string.count\
    \ < substring.count) {\n        return 0\n    }\n    let d = substring.count\n\
    \    let n = string.count\n    var result = 0\n    for i in 0..<n-d+1 {\n    \
    \    let range = string.index(string.startIndex, offsetBy: i)..<string.index(string.startIndex,\
    \ offsetBy: i+d)\n        if string[range] == substring {\n            result\
    \ += 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009186
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    return (string.count\
    \ - substring.count + 1) - string.replacingOccurrences(of: substring, with: \"\
    \").count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmphfygivsn.swift:10:58: error: value of type 'String' has no member\
    \ 'replacingOccurrences'\n    return (string.count - substring.count + 1) - string.replacingOccurrences(of:\
    \ substring, with: \"\").count\n                                             \
    \     ~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009186
- exit_code: -4
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    var counter\
    \ = 0\n    var last_found_idx = -1\n    for idx in 0..<string.count {\n      \
    \  let curr_idx = string.index(string.startIndex, offsetBy: idx)\n        if string[curr_idx]\
    \ == substring[substring.startIndex] {\n            if string.index(curr_idx,\
    \ offsetBy: substring.count - 1) < string.endIndex {\n                if string[string.index(curr_idx,\
    \ offsetBy: substring.count - 1)] == substring[substring.index(before: substring.endIndex)]\
    \ {\n                    if last_found_idx + substring.count <= idx {\n      \
    \                  counter += 1\n                        last_found_idx = idx\n\
    \                    }\n                }\n            }\n        }\n    }\n \
    \   return counter\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: Exception
  stderr: 'Swift/StringCharacterView.swift:153: Fatal error: String index is out of
    bounds

    Current stack trace:

    0    libswiftCore.so                    0x00002b635327ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6352f75561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b6352f75286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b6352f7513c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b6352f74bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftCore.so                    0x00002b63530a8b0d <unavailable> + 2693901

    6    tmp7dh6jrvk                        0x000055df5d852ce3 <unavailable> + 7395

    7    tmp7dh6jrvk                        0x000055df5d85283b <unavailable> + 6203

    8    libc.so.6                          0x00002b635346a460 __libc_start_main +
    245

    9    tmp7dh6jrvk                        0x000055df5d852349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1660009186
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    guard substring.count\
    \ <= string.count else { return 0 }\n    var count = 0\n    let strLength = string.count\n\
    \    let subLength = substring.count\n    for idx in 0...(strLength - subLength)\
    \ {\n        let slice = string[idx..<(idx + subLength)]\n        if slice ==\
    \ substring {\n            count += 1\n        }\n    }\n    return count\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(how_many_times(string: \"\", substring: \"x\"\
    ) == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring: \"x\") == 4)\n\
    assert(how_many_times(string: \"cacacacac\", substring: \"cac\") == 4)\nassert(how_many_times(string:\
    \ \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp2tr_67xx.swift:15:21: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an integer range, use a String.Index range instead.\n\
    \        let slice = string[idx..<(idx + subLength)]\n                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    Swift.String:5:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript<R>(bounds: R) -> String where R : RangeExpression,\
    \ R.Bound == Int { get }\n           ^\n"
  stdout: ''
  timestamp: 1660009186
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    var range =\
    \ NSRange(location: 0, length: string.count)\n    var count = 0\n    while range.location\
    \ != NSNotFound {\n        let found = string.range(of: substring, options: [],\
    \ range: range)\n        if let found = found {\n            range.location =\
    \ found.upperBound.encodedOffset\n            range.length = string.count - range.location\n\
    \            count += 1\n        } else {\n            range.location = NSNotFound\n\
    \        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp3g8j6zk6.swift:10:17: error: cannot find 'NSRange' in scope\n \
    \   var range = NSRange(location: 0, length: string.count)\n                ^~~~~~~\n\
    /tmp/tmp3g8j6zk6.swift:12:29: error: cannot find 'NSNotFound' in scope\n    while\
    \ range.location != NSNotFound {\n                            ^~~~~~~~~~\n/tmp/tmp3g8j6zk6.swift:13:28:\
    \ error: value of type 'String' has no member 'range'\n        let found = string.range(of:\
    \ substring, options: [], range: range)\n                    ~~~~~~ ^~~~~\n/tmp/tmp3g8j6zk6.swift:19:30:\
    \ error: cannot find 'NSNotFound' in scope\n            range.location = NSNotFound\n\
    \                             ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009186
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    let range =\
    \ string.startIndex ..< string.endIndex\n    let substring_range = substring.startIndex\
    \ ..< substring.endIndex\n    let charArray = string.characters\n    let charSubArray\
    \ = substring.characters\n    var count = 0\n    for i in range {\n        if\
    \ charArray[i] == charSubArray[substring_range.startIndex] {\n            var\
    \ done = false\n            for j in substring_range {\n                if i ==\
    \ string.endIndex || j == substring.endIndex || charArray[i] != charSubArray[j]\
    \ {\n                    done = true\n                    break\n            \
    \    }\n                i = i.successor()\n            }\n            if !done\
    \ {\n                count++\n            }\n        }\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(how_many_times(string: \"\", substring: \"x\"\
    ) == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring: \"x\") == 4)\n\
    assert(how_many_times(string: \"cacacacac\", substring: \"cac\") == 4)\nassert(how_many_times(string:\
    \ \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp00ho_eq8.swift:12:28: error: 'characters' is unavailable: Please\
    \ use String directly\n    let charArray = string.characters\n               \
    \            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in\
    \ Swift 5.0\n    public var characters: String { get set }\n               ^\n\
    /tmp/tmp00ho_eq8.swift:13:34: error: 'characters' is unavailable: Please use String\
    \ directly\n    let charSubArray = substring.characters\n                    \
    \             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmp00ho_eq8.swift:15:14: error: protocol 'Sequence' requires that 'String.Index'\
    \ conform to 'Strideable'\n    for i in range {\n             ^\nSwift.Range:1:11:\
    \ note: requirement from conditional conformance of 'Range<String.Index>' to 'Sequence'\n\
    extension Range : Sequence where Bound : Strideable, Bound.Stride : SignedInteger\
    \ {\n          ^\n/tmp/tmp00ho_eq8.swift:15:14: error: referencing instance method\
    \ 'makeIterator()' on 'Range' requires that 'String.Index' conform to 'Strideable'\n\
    \    for i in range {\n             ^\nSwift.Range:1:11: note: requirement from\
    \ conditional conformance of 'Range<String.Index>' to 'Collection'\nextension\
    \ Range : Collection, BidirectionalCollection, RandomAccessCollection where Bound\
    \ : Strideable, Bound.Stride : SignedInteger {\n          ^\n<unknown>:0: error:\
    \ referencing instance method 'next()' on 'Range' requires that 'String.Index'\
    \ conform to 'Strideable'\nSwift.Range:1:11: note: requirement from conditional\
    \ conformance of 'Range<String.Index>' to 'Collection'\nextension Range : Collection,\
    \ BidirectionalCollection, RandomAccessCollection where Bound : Strideable, Bound.Stride\
    \ : SignedInteger {\n          ^\n/tmp/tmp00ho_eq8.swift:18:22: error: referencing\
    \ instance method 'makeIterator()' on 'Range' requires that 'String.Index' conform\
    \ to 'Strideable'\n            for j in substring_range {\n                  \
    \   ^\nSwift.Range:1:11: note: requirement from conditional conformance of 'Range<Stri"
  stdout: ''
  timestamp: 1660009186
- exit_code: -4
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    let end = string.count\
    \ - substring.count\n    var times = 0\n    for i in 0...end {\n        if String(string[string.index(string.startIndex,\
    \ offsetBy: i)..<string.index(string.startIndex, offsetBy: i + substring.count)])\
    \ == substring {\n            times += 1\n        }\n    }\n    return times\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(how_many_times(string: \"\", substring: \"x\"\
    ) == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring: \"x\") == 4)\n\
    assert(how_many_times(string: \"cacacacac\", substring: \"cac\") == 4)\nassert(how_many_times(string:\
    \ \"john doe\", substring: \"john\") == 1)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b6e65a75c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6e6576c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b6e6576c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b6e6576c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b6e6576bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpepxcn00o                        0x000055fdd7c4aadc <unavailable> + 6876

    6    tmpepxcn00o                        0x000055fdd7c4a5b0 <unavailable> + 5552

    7    libc.so.6                          0x00002b6e65c61460 __libc_start_main +
    245

    8    tmpepxcn00o                        0x000055fdd7c4a289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660009186
- exit_code: -4
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    guard !string.isEmpty\
    \ else { return 0 }\n    guard !substring.isEmpty else { return 0 }\n    guard\
    \ string.count >= substring.count else { return 0 }\n    \n    let characterArray\
    \ = Array(string)\n    let subCharacterArray = Array(substring)\n    \n    var\
    \ index: Int = 0\n    var count: Int = 0\n    \n    while index < string.count\
    \ {\n        let indexRange = string.index(string.startIndex, offsetBy: index)..<string.index(string.startIndex,\
    \ offsetBy: subCharacterArray.count + index)\n        let subArray = string[indexRange]\n\
    \        let subCharacterArrayStr = String(subCharacterArray)\n        \n    \
    \    if subArray == subCharacterArrayStr {\n            count += 1\n         \
    \   index += 1\n        } else {\n            index += 1\n        }\n    }\n \
    \   \n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: Exception
  stderr: 'Swift/StringCharacterView.swift:153: Fatal error: String index is out of
    bounds

    Current stack trace:

    0    libswiftCore.so                    0x00002b6c5e8a4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6c5e59b561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b6c5e59b286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b6c5e59b13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b6c5e59abb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftCore.so                    0x00002b6c5e6ceb0d <unavailable> + 2693901

    6    tmp3f90u30h                        0x0000557a84448de9 <unavailable> + 7657

    7    tmp3f90u30h                        0x0000557a8444896b <unavailable> + 6507

    8    libc.so.6                          0x00002b6c5ea90460 __libc_start_main +
    245

    9    tmp3f90u30h                        0x0000557a84448479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660009186
- exit_code: -4
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    guard substring.count\
    \ > 0 else { return 0 }\n    let substringLength = substring.count\n    var index\
    \ = string.startIndex\n    var count = 0\n    while index < string.endIndex {\n\
    \        let match = string.index(index, offsetBy: substringLength, limitedBy:\
    \ string.endIndex)\n        if string[index..<match!] == substring {\n       \
    \     count += 1\n            index = match!\n        } else {\n            index\
    \ = string.index(after: index)\n        }\n    }\n    return count\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(how_many_times(string: \"\", substring: \"x\"\
    ) == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring: \"x\") == 4)\n\
    assert(how_many_times(string: \"cacacacac\", substring: \"cac\") == 4)\nassert(how_many_times(string:\
    \ \"john doe\", substring: \"john\") == 1)"
  status: Exception
  stderr: 'tmp0wdd2hh0/tmp0wdd2hh0.swift:16: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b139ab91c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b139a888561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b139a888286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b139a88813c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b139a887bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp0wdd2hh0                        0x000055b5f5806c15 <unavailable> + 7189

    6    tmp0wdd2hh0                        0x000055b5f580684b <unavailable> + 6219

    7    libc.so.6                          0x00002b139ad7d460 __libc_start_main +
    245

    8    tmp0wdd2hh0                        0x000055b5f5806359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660009186
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    var index =\
    \ string.startIndex\n    var count = 0\n    while let match = string.range(of:\
    \ substring, range: index..<string.endIndex) {\n        count += 1\n        index\
    \ = match.upperBound\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp_1d1j9ih.swift:12:30: error: value of type 'String' has no member\
    \ 'range'\n    while let match = string.range(of: substring, range: index..<string.endIndex)\
    \ {\n                      ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1660009186
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    var count =\
    \ 0\n    var c = string.startIndex\n    while c < string.endIndex {\n        let\
    \ s = string.range(of: substring, options: .literal, range: c..<string.endIndex,\
    \ locale: nil)\n        if s != nil {\n            count += 1\n            c =\
    \ s!.upperBound\n        } else {\n            break\n        }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpq269i57l.swift:13:24: error: value of type 'String' has no member\
    \ 'range'\n        let s = string.range(of: substring, options: .literal, range:\
    \ c..<string.endIndex, locale: nil)\n                ~~~~~~ ^~~~~\n/tmp/tmpq269i57l.swift:13:55:\
    \ error: cannot infer contextual base in reference to member 'literal'\n     \
    \   let s = string.range(of: substring, options: .literal, range: c..<string.endIndex,\
    \ locale: nil)\n                                                     ~^~~~~~~\n\
    /tmp/tmpq269i57l.swift:13:100: error: 'nil' requires a contextual type\n     \
    \   let s = string.range(of: substring, options: .literal, range: c..<string.endIndex,\
    \ locale: nil)\n                                                             \
    \                                      ^\n"
  stdout: ''
  timestamp: 1660009186
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    let len = string.count\
    \ - substring.count + 1\n    var count = 0\n    for i in 0..<len {\n        if\
    \ string[i..<i+substring.count] == substring {\n            count += 1\n     \
    \   }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp7vpv4x47.swift:13:12: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an integer range, use a String.Index range instead.\n\
    \        if string[i..<i+substring.count] == substring {\n           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    Swift.String:5:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript<R>(bounds: R) -> String where R : RangeExpression,\
    \ R.Bound == Int { get }\n           ^\n"
  stdout: ''
  timestamp: 1660009186
- exit_code: 0
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    // TODO\n  \
    \  var count = 0\n    for i in 0..<string.count {\n        let index = string.index(string.startIndex,\
    \ offsetBy: i)\n        if (string[index] == substring[substring.startIndex])\
    \ {\n            if (string.distance(from: index, to: string.endIndex) >= substring.count)\
    \ {\n                let substr = string[index..<string.index(index, offsetBy:\
    \ substring.count)]\n                if (substr == substring) {\n            \
    \        count += 1\n                }\n            }\n        }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009186
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    var count =\
    \ 0\n    var start_index = string.startIndex\n    while start_index < string.endIndex\
    \ {\n        let index = string.range(of: substring, options: .literal, range:\
    \ start_index..<string.endIndex, locale: nil)\n        if index != nil {\n   \
    \         count += 1\n            start_index = index!.upperBound\n        } else\
    \ {\n            break\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\n\
    assert(how_many_times(string: \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string:\
    \ \"cacacacac\", substring: \"cac\") == 4)\nassert(how_many_times(string: \"john\
    \ doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmplimq07kj.swift:13:28: error: value of type 'String' has no member\
    \ 'range'\n        let index = string.range(of: substring, options: .literal,\
    \ range: start_index..<string.endIndex, locale: nil)\n                    ~~~~~~\
    \ ^~~~~\n/tmp/tmplimq07kj.swift:13:59: error: cannot infer contextual base in\
    \ reference to member 'literal'\n        let index = string.range(of: substring,\
    \ options: .literal, range: start_index..<string.endIndex, locale: nil)\n    \
    \                                                     ~^~~~~~~\n/tmp/tmplimq07kj.swift:13:114:\
    \ error: 'nil' requires a contextual type\n        let index = string.range(of:\
    \ substring, options: .literal, range: start_index..<string.endIndex, locale:\
    \ nil)\n                                                                     \
    \                                            ^\n"
  stdout: ''
  timestamp: 1660009186
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n\tvar count = 0\n\
    \tfor index in 0..<string.count {\n\t\tvar sub = String(string[string.index(string.startIndex,\
    \ offsetBy: index)])\n\t\twhile sub.count < string.count {\n\t\t\tif sub == substring\
    \ {\n\t\t\t\tcount += 1\n\t\t\t}\n\t\t\tindex += 1\n\t\t\tif index == string.count\
    \ {\n\t\t\t\tbreak\n\t\t\t}\n\t\t\tsub += String(string[string.index(string.startIndex,\
    \ offsetBy: index)])\n\t\t}\n\t}\n\treturn count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp0v2adj7_.swift:17:10: error: left side of mutating operator isn't\
    \ mutable: 'index' is a 'let' constant\n                        index += 1\n \
    \                       ~~~~~ ^\n"
  stdout: ''
  timestamp: 1660009186
- exit_code: -4
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    return 0\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(how_many_times(string: \"\", substring: \"x\"\
    ) == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring: \"x\") == 4)\n\
    assert(how_many_times(string: \"cacacacac\", substring: \"cac\") == 4)\nassert(how_many_times(string:\
    \ \"john doe\", substring: \"john\") == 1)"
  status: Exception
  stderr: 'tmpa1ljw6t2/tmpa1ljw6t2.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afd74aa5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afd7479cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afd7479c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afd7479b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpa1ljw6t2                        0x000055655b9ad372 <unavailable> + 4978

    5    libc.so.6                          0x00002afd74c91460 __libc_start_main +
    245

    6    tmpa1ljw6t2                        0x000055655b9acee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1660009185
- exit_code: 0
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    guard string.count\
    \ >= substring.count else { return 0 }\n    let string = Array(string)\n    let\
    \ substring = Array(substring)\n    var count = 0\n    for start in 0..<string.count\
    \ {\n        if start + substring.count > string.count { break }\n        for\
    \ index in 0..<substring.count {\n            if string[start + index] != substring[index]\
    \ { break }\n            if index == substring.count - 1 { count += 1 }\n    \
    \    }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009186
- exit_code: -4
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    var count =\
    \ 0\n    var substringIndex = string.startIndex\n    while substringIndex < string.endIndex\
    \ {\n        let substringRange = substringIndex..<string.index(substringIndex,\
    \ offsetBy: substring.count)\n        if string[substringRange] == substring {\n\
    \            count += 1\n        }\n        substringIndex = string.index(after:\
    \ substringIndex)\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: Exception
  stderr: 'Swift/StringCharacterView.swift:153: Fatal error: String index is out of
    bounds

    Current stack trace:

    0    libswiftCore.so                    0x00002b5dc7ffac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5dc7cf1561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b5dc7cf1286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b5dc7cf113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b5dc7cf0bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftCore.so                    0x00002b5dc7e24b0d <unavailable> + 2693901

    6    tmp0oawrw4y                        0x000055feaf4deb26 <unavailable> + 6950

    7    tmp0oawrw4y                        0x000055feaf4de84b <unavailable> + 6219

    8    libc.so.6                          0x00002b5dc81e6460 __libc_start_main +
    245

    9    tmp0oawrw4y                        0x000055feaf4de359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660009187
- exit_code: -4
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    return (string.count\
    \ - substring.count + 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: Exception
  stderr: 'tmp_3prcxmy/tmp_3prcxmy.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3c75617c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3c7530eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3c7530e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3c7530d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_3prcxmy                        0x000055ca3d9223d2 <unavailable> + 5074

    5    libc.so.6                          0x00002b3c75803460 __libc_start_main +
    245

    6    tmp_3prcxmy                        0x000055ca3d921f49 <unavailable> + 3913

    '
  stdout: ''
  timestamp: 1660009186
- exit_code: 0
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    let lenS = string.count\n\
    \    let lenP = substring.count\n    var n = 0\n    for i in 0..<lenS {\n    \
    \    let endIndex = (i + lenP) < lenS ? (i + lenP) : lenS\n        let s = string[string.index(string.startIndex,\
    \ offsetBy: i)..<string.index(string.startIndex, offsetBy: endIndex)]\n      \
    \  if s == substring {\n            n += 1\n        }\n    }\n    return n\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(how_many_times(string: \"\", substring: \"x\"\
    ) == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring: \"x\") == 4)\n\
    assert(how_many_times(string: \"cacacacac\", substring: \"cac\") == 4)\nassert(how_many_times(string:\
    \ \"john doe\", substring: \"john\") == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009187
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    guard string.count\
    \ >= substring.count else { return 0 }\n    var substring = substring\n    var\
    \ string = string\n    var count = 0\n    while let found = string.range(of: substring)\
    \ {\n        substring = String(substring.dropFirst())\n        string = String(string.suffix(from:\
    \ found.upperBound))\n        count += 1\n    }\n    return count\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(how_many_times(string: \"\", substring: \"x\"\
    ) == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring: \"x\") == 4)\n\
    assert(how_many_times(string: \"cacacacac\", substring: \"cac\") == 4)\nassert(how_many_times(string:\
    \ \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpnt204mxz.swift:14:30: error: value of type 'String' has no member\
    \ 'range'\n    while let found = string.range(of: substring) {\n             \
    \         ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1660009186
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    var count =\
    \ 0\n    var startIndex = string.startIndex\n    while startIndex < string.endIndex\
    \ {\n        let range = string.range(of: substring, options: [], range: startIndex..<string.endIndex)\n\
    \        if range != nil {\n            count += 1\n            startIndex = range!.upperBound\n\
    \        } else {\n            break\n        }\n    }\n    return count\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(how_many_times(string: \"\", substring: \"x\"\
    ) == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring: \"x\") == 4)\n\
    assert(how_many_times(string: \"cacacacac\", substring: \"cac\") == 4)\nassert(how_many_times(string:\
    \ \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpxtmzixc3.swift:13:28: error: value of type 'String' has no member\
    \ 'range'\n        let range = string.range(of: substring, options: [], range:\
    \ startIndex..<string.endIndex)\n                    ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1660009186
- exit_code: -4
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    guard string.count\
    \ >= substring.count else { return 0 }\n    guard substring.count != 0 else {\
    \ return string.count + 1 }\n    var count = 0\n    var idx = string.startIndex\n\
    \    while idx != string.endIndex {\n        if string[idx...].hasPrefix(substring)\
    \ {\n            count += 1\n            idx = string.index(idx, offsetBy: substring.count\
    \ - 1)\n        }\n        idx = string.index(after: idx)\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(how_many_times(string: \"\", substring: \"x\"\
    ) == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring: \"x\") == 4)\n\
    assert(how_many_times(string: \"cacacacac\", substring: \"cac\") == 4)\nassert(how_many_times(string:\
    \ \"john doe\", substring: \"john\") == 1)"
  status: Exception
  stderr: 'tmpex634qs0/tmpex634qs0.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7d2cf74c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7d2cc6bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7d2cc6b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7d2cc6a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpex634qs0                        0x000056260267a9b4 <unavailable> + 6580

    5    libc.so.6                          0x00002b7d2d160460 __libc_start_main +
    245

    6    tmpex634qs0                        0x000056260267a429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1660009187
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    var current_start\
    \ = string.startIndex\n    var count = 0\n    while current_start < string.endIndex\
    \ {\n        if let range = string.range(of: substring, range: current_start..<string.endIndex)\
    \ {\n            count += 1\n            current_start = range.upperBound\n  \
    \      } else {\n            break\n        }\n    }\n    return count\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(how_many_times(string: \"\", substring: \"x\"\
    ) == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring: \"x\") == 4)\n\
    assert(how_many_times(string: \"cacacacac\", substring: \"cac\") == 4)\nassert(how_many_times(string:\
    \ \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmph8owm_di.swift:13:31: error: value of type 'String' has no member\
    \ 'range'\n        if let range = string.range(of: substring, range: current_start..<string.endIndex)\
    \ {\n                       ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1660009186
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    let chars =\
    \ string.characters\n    let subchars = substring.characters\n    var count =\
    \ 0\n    var char_index = chars.startIndex\n    var subchar_index = subchars.startIndex\n\
    \    // Scanning chars\n    while char_index != chars.endIndex {\n        // Matching\
    \ chars and subchars\n        if chars[char_index] == subchars[subchar_index]\
    \ {\n            subchar_index = subchars.index(after: subchar_index)\n      \
    \      // Found a match?\n            if subchar_index == subchars.endIndex {\n\
    \                count += 1\n                subchar_index = subchars.startIndex\n\
    \            }\n        } else {\n            subchar_index = subchars.startIndex\n\
    \        }\n        char_index = chars.index(after: char_index)\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp0f7llg7j.swift:10:24: error: 'characters' is unavailable: Please\
    \ use String directly\n    let chars = string.characters\n                   \
    \    ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp0f7llg7j.swift:11:30:\
    \ error: 'characters' is unavailable: Please use String directly\n    let subchars\
    \ = substring.characters\n                             ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660009186
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    var count =\
    \ 0\n    var range = string.startIndex..<string.endIndex\n    while let found\
    \ = string.range(of: substring, options: .literal, range: range, locale: nil)\
    \ {\n        count += 1\n        range = found.upperBound..<string.endIndex\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpg1ubmxc4.swift:12:30: error: value of type 'String' has no member\
    \ 'range'\n    while let found = string.range(of: substring, options: .literal,\
    \ range: range, locale: nil) {\n                      ~~~~~~ ^~~~~\n/tmp/tmpg1ubmxc4.swift:12:61:\
    \ error: cannot infer contextual base in reference to member 'literal'\n    while\
    \ let found = string.range(of: substring, options: .literal, range: range, locale:\
    \ nil) {\n                                                           ~^~~~~~~\n\
    /tmp/tmpg1ubmxc4.swift:12:92: error: 'nil' requires a contextual type\n    while\
    \ let found = string.range(of: substring, options: .literal, range: range, locale:\
    \ nil) {\n                                                                   \
    \                        ^\n"
  stdout: ''
  timestamp: 1660009186
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    var count =\
    \ 0\n    var string = string\n    while string.contains(substring) {\n       \
    \ string = string.replacingOccurrences(of: substring, with: \"\")\n        count\
    \ += 1\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp51yby33o.swift:13:25: error: value of type 'String' has no member\
    \ 'replacingOccurrences'\n        string = string.replacingOccurrences(of: substring,\
    \ with: \"\")\n                 ~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009186
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    guard string.count\
    \ >= substring.count else { return 0 }\n    let matching = string.matchingStrings(regex:\
    \ \"(\" + substring + \")\")\n    return matching.count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\n\
    assert(how_many_times(string: \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string:\
    \ \"cacacacac\", substring: \"cac\") == 4)\nassert(how_many_times(string: \"john\
    \ doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp56ezt10d.swift:11:27: error: value of type 'String' has no member\
    \ 'matchingStrings'\n    let matching = string.matchingStrings(regex: \"(\" +\
    \ substring + \")\")\n                   ~~~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009186
- exit_code: 0
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    if substring.count\
    \ == 0 {\n        return 0\n    }\n    if string.count == 0 {\n        return\
    \ 0\n    }\n    if string.count < substring.count {\n        return 0\n    }\n\
    \    var start = string.startIndex\n    var end = string.index(start, offsetBy:\
    \ substring.count - 1)\n    var count = 0\n    while end < string.endIndex {\n\
    \        if string[start...end] == substring {\n            count += 1\n     \
    \   }\n        start = string.index(after: start)\n        end = string.index(after:\
    \ end)\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009187
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    if let range\
    \ = string.range(of: substring) {\n        let prefix = string.prefix(upTo: range.lowerBound)\n\
    \        let suffix = string.suffix(from: range.upperBound)\n        return 1\
    \ + how_many_times(string: String(suffix), substring: substring)\n    }\n    return\
    \ 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(how_many_times(string: \"\",\
    \ substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpcxrfkopj.swift:10:27: error: value of type 'String' has no member\
    \ 'range'\n    if let range = string.range(of: substring) {\n                \
    \   ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1660009187
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    var i = string.startIndex\n\
    \    var j = string.startIndex\n    var count = 0\n    while i != string.endIndex\
    \ {\n        if string[i] == substring[j] {\n            j = j.advancedBy(1)\n\
    \            if j == substring.endIndex {\n                count += 1\n      \
    \          j = string.startIndex\n            }\n        } else {\n          \
    \  j = string.startIndex\n        }\n        i = i.advancedBy(1)\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpjkzmflx_.swift:15:19: error: value of type 'String.Index' has no\
    \ member 'advancedBy'\n            j = j.advancedBy(1)\n                ~ ^~~~~~~~~~\n\
    /tmp/tmpjkzmflx_.swift:23:15: error: value of type 'String.Index' has no member\
    \ 'advancedBy'\n        i = i.advancedBy(1)\n            ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009187
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    if string.characters.count\
    \ == 0 || substring.characters.count == 0 {\n        return 0\n    }\n    let\
    \ subLength = substring.characters.count\n    let stringLength = string.characters.count\n\
    \    var n = 0\n    var subStringIndex = 0\n    for (index, char) in string.characters.enumerated()\
    \ {\n        if subStringIndex == subLength {\n            n += 1\n          \
    \  subStringIndex = 0\n        }\n        if index == stringLength - 1 {\n   \
    \         if char == substring[subStringIndex] {\n                n += 1\n   \
    \         }\n        }\n        if char == substring[subStringIndex] {\n     \
    \       subStringIndex += 1\n        } else {\n            subStringIndex = 0\n\
    \        }\n    }\n    return n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpcqzcvt01.swift:10:15: error: 'characters' is unavailable: Please\
    \ use String directly\n    if string.characters.count == 0 || substring.characters.count\
    \ == 0 {\n              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was\
    \ obsoleted in Swift 5.0\n    public var characters: String { get set }\n    \
    \           ^\n/tmp/tmpcqzcvt01.swift:10:50: error: 'characters' is unavailable:\
    \ Please use String directly\n    if string.characters.count == 0 || substring.characters.count\
    \ == 0 {\n                                                 ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmpcqzcvt01.swift:13:31: error: 'characters'\
    \ is unavailable: Please use String directly\n    let subLength = substring.characters.count\n\
    \                              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpcqzcvt01.swift:14:31: error: 'characters' is unavailable:\
    \ Please use String directly\n    let stringLength = string.characters.count\n\
    \                              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpcqzcvt01.swift:17:33: error: 'characters' is unavailable:\
    \ Please use String directly\n    for (index, char) in string.characters.enumerated()\
    \ {\n                                ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpcqzcvt01.swift:23:24: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n         \
    \   if char == substring[subStringIndex] {\n                       ^~~~~~~~~~~~~~~~~~~~~~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpcqzcvt01.swift:27:20:\
    \ error: 'subscript(_:)' "
  stdout: ''
  timestamp: 1660009187
- exit_code: -4
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    let start =\
    \ string.startIndex\n    let end = string.endIndex\n    let stringLength = string.distance(from:\
    \ start, to: end)\n    let subStringLength = substring.count\n    var count =\
    \ 0\n    for i in 0...stringLength - subStringLength {\n        if string[string.index(start,\
    \ offsetBy: i)..<string.index(start, offsetBy: i + subStringLength)] == substring\
    \ {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\n\
    assert(how_many_times(string: \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string:\
    \ \"cacacacac\", substring: \"cac\") == 4)\nassert(how_many_times(string: \"john\
    \ doe\", substring: \"john\") == 1)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002ba322e8bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba322b82561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ba322b82286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ba322b8213c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ba322b81bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmph720ulyf                        0x000055edf033ccb4 <unavailable> + 7348

    6    tmph720ulyf                        0x000055edf033c710 <unavailable> + 5904

    7    libc.so.6                          0x00002ba323077460 __libc_start_main +
    245

    8    tmph720ulyf                        0x000055edf033c3e9 <unavailable> + 5097

    '
  stdout: ''
  timestamp: 1660009187
- exit_code: 0
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    let len = string.count\
    \ - substring.count + 1\n    var total = 0\n    for i in 0..<len {\n        let\
    \ start = string.index(string.startIndex, offsetBy: i)\n        let end = string.index(string.startIndex,\
    \ offsetBy: i + substring.count)\n        let sub = string[start..<end]\n    \
    \    if sub == substring {\n            total += 1\n        }\n    }\n    return\
    \ total\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009187
- exit_code: -4
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    return (string\
    \ + string).ranges(of: substring).count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: Exception
  stderr: 'tmpj3ounjsv/tmpj3ounjsv.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2d67e76c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2d67b6db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2d67b6d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2d67b6c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj3ounjsv                        0x000055bc74ff1562 <unavailable> + 5474

    5    libc.so.6                          0x00002b2d68062460 __libc_start_main +
    245

    6    tmpj3ounjsv                        0x000055bc74ff10d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660009187
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    if substring.isEmpty\
    \ {\n        return 0\n    }\n    return string.components(separatedBy: substring).count\
    \ - 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpxd2_4ohj.swift:13:19: error: value of type 'String' has no member\
    \ 'components'\n    return string.components(separatedBy: substring).count - 1\n\
    \           ~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009187
- exit_code: -4
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    var count =\
    \ 0\n    var current = string.startIndex\n    var match = string.startIndex\n\
    \    for _ in 0...string.count {\n        if string[current] == substring[match]\
    \ {\n            match = substring.index(after: match)\n            if match ==\
    \ substring.endIndex {\n                count += 1\n                match = substring.startIndex\n\
    \            }\n        } else {\n            match = substring.startIndex\n \
    \       }\n        current = string.index(after: current)\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(how_many_times(string: \"\", substring: \"x\"\
    ) == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring: \"x\") == 4)\n\
    assert(how_many_times(string: \"cacacacac\", substring: \"cac\") == 4)\nassert(how_many_times(string:\
    \ \"john doe\", substring: \"john\") == 1)"
  status: Exception
  stderr: 'Swift/StringIndexValidation.swift:120: Fatal error: String index is out
    of bounds

    Current stack trace:

    0    libswiftCore.so                    0x00002b3d4ea86c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3d4e77d561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b3d4e77d286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b3d4e77d13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b3d4e77cbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftCore.so                    0x00002b3d4e8b0ec2 <unavailable> + 2694850

    6    libswiftCore.so                    0x00002b3d4e869660 String.subscript.getter
    + 34

    7    tmpndwrnf2i                        0x0000562ef05cab68 <unavailable> + 7016

    8    tmpndwrnf2i                        0x0000562ef05ca610 <unavailable> + 5648

    9    libc.so.6                          0x00002b3d4ec72460 __libc_start_main +
    245

    10   tmpndwrnf2i                        0x0000562ef05ca2e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1660009187
- exit_code: -4
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    let my_string\
    \ = string\n    let my_substring = substring\n    let str_count = my_string.count\n\
    \    let substr_count = my_substring.count\n    var count = 0\n    var i = 0\n\
    \    while i <= str_count - substr_count {\n        let sub_range = my_string.index(my_string.startIndex,\
    \ offsetBy: i) ..< my_string.index(my_string.startIndex, offsetBy: i + substr_count)\n\
    \        if String(my_string[sub_range]) == my_substring {\n            count\
    \ += 1\n            i += substr_count\n        } else {\n            i += 1\n\
    \        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: Exception
  stderr: 'tmpx9s_qq13/tmpx9s_qq13.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad606711c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad606408b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad606408988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad6064077b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx9s_qq13                        0x00005556a4ad7724 <unavailable> + 5924

    5    libc.so.6                          0x00002ad6068fd460 __libc_start_main +
    245

    6    tmpx9s_qq13                        0x00005556a4ad7199 <unavailable> + 4505

    '
  stdout: ''
  timestamp: 1660009187
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    var result =\
    \ 0\n    var string = string\n    while let range = string.range(of: substring)\
    \ {\n        result += 1\n        string = string.replacingCharacters(in: range,\
    \ with: \"\")\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp2onyfvhg.swift:12:30: error: value of type 'String' has no member\
    \ 'range'\n    while let range = string.range(of: substring) {\n             \
    \         ~~~~~~ ^~~~~\n/tmp/tmp2onyfvhg.swift:14:25: error: value of type 'String'\
    \ has no member 'replacingCharacters'\n        string = string.replacingCharacters(in:\
    \ range, with: \"\")\n                 ~~~~~~ ^~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009187
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    var count =\
    \ 0\n    var startIndex = string.startIndex\n    while let current_index = string.range(of:\
    \ substring, options: [], range: startIndex..<string.endIndex)?.lowerBound {\n\
    \        count += 1\n        startIndex = string.index(after: current_index)\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp20h7f5m1.swift:12:38: error: value of type 'String' has no member\
    \ 'range'\n    while let current_index = string.range(of: substring, options:\
    \ [], range: startIndex..<string.endIndex)?.lowerBound {\n                   \
    \           ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1660009187
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    return string.components(separatedBy:\
    \ substring).count - 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpqg05pp0x.swift:10:19: error: value of type 'String' has no member\
    \ 'components'\n    return string.components(separatedBy: substring).count - 1\n\
    \           ~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009185
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    var index =\
    \ string.startIndex\n    var count = 0\n    while let range = string.range(of:\
    \ substring, range: index..<string.endIndex) {\n        count += 1\n        index\
    \ = range.upperBound\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp28kq482p.swift:12:30: error: value of type 'String' has no member\
    \ 'range'\n    while let range = string.range(of: substring, range: index..<string.endIndex)\
    \ {\n                      ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1660009187
- exit_code: -4
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    return 0\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(how_many_times(string: \"\", substring: \"x\"\
    ) == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring: \"x\") == 4)\n\
    assert(how_many_times(string: \"cacacacac\", substring: \"cac\") == 4)\nassert(how_many_times(string:\
    \ \"john doe\", substring: \"john\") == 1)"
  status: Exception
  stderr: 'tmpa1ljw6t2/tmpa1ljw6t2.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afd74aa5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afd7479cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afd7479c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afd7479b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpa1ljw6t2                        0x000055655b9ad372 <unavailable> + 4978

    5    libc.so.6                          0x00002afd74c91460 __libc_start_main +
    245

    6    tmpa1ljw6t2                        0x000055655b9acee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1660009185
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    return string.get(matching:\
    \ substring)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpgklwnsjx.swift:10:19: error: value of type 'String' has no member\
    \ 'get'\n    return string.get(matching: substring)\n           ~~~~~~ ^~~\n"
  stdout: ''
  timestamp: 1660009187
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    var ret = 0\n\
    \    var index = string.startIndex\n    let end = string.endIndex\n    let sub_len\
    \ = substring.count\n    while index < end {\n        let range = string.range(of:\
    \ substring, options: .literal, range: index..<end, locale: nil)\n        if range\
    \ != nil {\n            index = range!.upperBound\n            ret += 1\n    \
    \    } else {\n            break\n        }\n    }\n    return ret\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(how_many_times(string: \"\", substring: \"x\"\
    ) == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring: \"x\") == 4)\n\
    assert(how_many_times(string: \"cacacacac\", substring: \"cac\") == 4)\nassert(how_many_times(string:\
    \ \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpguvux6oi.swift:15:28: error: value of type 'String' has no member\
    \ 'range'\n        let range = string.range(of: substring, options: .literal,\
    \ range: index..<end, locale: nil)\n                    ~~~~~~ ^~~~~\n/tmp/tmpguvux6oi.swift:15:59:\
    \ error: cannot infer contextual base in reference to member 'literal'\n     \
    \   let range = string.range(of: substring, options: .literal, range: index..<end,\
    \ locale: nil)\n                                                         ~^~~~~~~\n\
    /tmp/tmpguvux6oi.swift:15:96: error: 'nil' requires a contextual type\n      \
    \  let range = string.range(of: substring, options: .literal, range: index..<end,\
    \ locale: nil)\n                                                             \
    \                                  ^\n"
  stdout: ''
  timestamp: 1660009187
- exit_code: -4
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    var count =\
    \ 0\n    var string = string\n    while string.count >= substring.count {\n  \
    \      if string.hasPrefix(substring) {\n            count += 1\n            string\
    \ = String(string.dropFirst(substring.count))\n        } else {\n            string\
    \ = String(string.dropFirst())\n        }\n    }\n    return count\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(how_many_times(string: \"\", substring: \"x\"\
    ) == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring: \"x\") == 4)\n\
    assert(how_many_times(string: \"cacacacac\", substring: \"cac\") == 4)\nassert(how_many_times(string:\
    \ \"john doe\", substring: \"john\") == 1)"
  status: Exception
  stderr: 'tmphmbl_evh/tmphmbl_evh.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b072b459c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b072b150b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b072b150988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b072b14f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphmbl_evh                        0x00005616c64fb654 <unavailable> + 5716

    5    libc.so.6                          0x00002b072b645460 __libc_start_main +
    245

    6    tmphmbl_evh                        0x00005616c64fb0c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1660009187
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    guard !string.isEmpty\
    \ && !substring.isEmpty else { return 0 }\n    guard substring.count <= string.count\
    \ else { return 0 }\n    let s = string.components(separatedBy: substring)\n \
    \   return s.count - 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpj8fmfhxc.swift:12:20: error: value of type 'String' has no member\
    \ 'components'\n    let s = string.components(separatedBy: substring)\n      \
    \      ~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009187
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    var string =\
    \ string\n    var substring = substring\n    if string.count < substring.count\
    \ {\n        return 0\n    }\n    var count = 0\n    while let range = string.range(of:\
    \ substring) {\n        string.removeSubrange(range)\n        count += 1\n   \
    \ }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpg18x5q4z.swift:16:30: error: value of type 'String' has no member\
    \ 'range'\n    while let range = string.range(of: substring) {\n             \
    \         ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1660009187
- exit_code: 0
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    guard string.count\
    \ >= substring.count else { return 0 }\n    guard substring.count > 0 else { return\
    \ 0 }\n    var index = string.startIndex\n    var count = 0\n    while index <\
    \ string.endIndex {\n        if string[index] == substring[substring.startIndex]\
    \ {\n            var i = index\n            var j = substring.startIndex\n   \
    \         while i < string.endIndex, j < substring.endIndex, string[i] == substring[j]\
    \ {\n                i = string.index(after: i)\n                j = substring.index(after:\
    \ j)\n            }\n            if j == substring.endIndex {\n              \
    \  count += 1\n            }\n        }\n        index = string.index(after: index)\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009187
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    var index =\
    \ string.startIndex\n    var count = 0\n    while true {\n        let range =\
    \ string.range(of: substring, options: [], range: index..<string.endIndex, locale:\
    \ nil)\n        if range == nil {\n            break\n        }\n        index\
    \ = range!.upperBound\n        count += 1\n    }\n    return count\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(how_many_times(string: \"\", substring: \"x\"\
    ) == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring: \"x\") == 4)\n\
    assert(how_many_times(string: \"cacacacac\", substring: \"cac\") == 4)\nassert(how_many_times(string:\
    \ \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpc6qas4l4.swift:13:28: error: value of type 'String' has no member\
    \ 'range'\n        let range = string.range(of: substring, options: [], range:\
    \ index..<string.endIndex, locale: nil)\n                    ~~~~~~ ^~~~~\n/tmp/tmpc6qas4l4.swift:13:102:\
    \ error: 'nil' requires a contextual type\n        let range = string.range(of:\
    \ substring, options: [], range: index..<string.endIndex, locale: nil)\n     \
    \                                                                            \
    \                    ^\n"
  stdout: ''
  timestamp: 1660009187
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    var count =\
    \ 0\n    var search_range = string.startIndex..<string.endIndex\n    while let\
    \ range = string.range(of: substring, options: [], range: search_range, locale:\
    \ nil) {\n        count += 1\n        search_range = range.upperBound..<search_range.upperBound\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpg8my3siq.swift:12:30: error: value of type 'String' has no member\
    \ 'range'\n    while let range = string.range(of: substring, options: [], range:\
    \ search_range, locale: nil) {\n                      ~~~~~~ ^~~~~\n/tmp/tmpg8my3siq.swift:12:93:\
    \ error: 'nil' requires a contextual type\n    while let range = string.range(of:\
    \ substring, options: [], range: search_range, locale: nil) {\n              \
    \                                                                            \
    \  ^\n"
  stdout: ''
  timestamp: 1660009187
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n\tlet scanner =\
    \ Scanner(string: string)\n\tvar count = 0\n\twhile !scanner.isAtEnd {\n\t\tscanner.scanUpTo(substring,\
    \ into: nil)\n\t\tif scanner.scanString(substring, into: nil) {\n\t\t\tcount +=\
    \ 1\n\t\t}\n\t}\n\treturn count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp_wim6jyk.swift:10:16: error: cannot find 'Scanner' in scope\n \
    \       let scanner = Scanner(string: string)\n                      ^~~~~~~\n\
    /tmp/tmp_wim6jyk.swift:13:37: error: 'nil' requires a contextual type\n      \
    \          scanner.scanUpTo(substring, into: nil)\n                          \
    \                        ^\n/tmp/tmp_wim6jyk.swift:14:42: error: 'nil' requires\
    \ a contextual type\n                if scanner.scanString(substring, into: nil)\
    \ {\n                                                       ^\n"
  stdout: ''
  timestamp: 1660009187
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    var count =\
    \ 0\n    for i in 0..<string.count {\n        if let range = string.range(of:\
    \ substring, range: i..<string.endIndex) {\n            count += 1\n         \
    \   print(range)\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpliogubsx.swift:12:31: error: value of type 'String' has no member\
    \ 'range'\n        if let range = string.range(of: substring, range: i..<string.endIndex)\
    \ {\n                       ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1660009187
- exit_code: 0
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    guard string.count\
    \ >= substring.count else { return 0 }\n    guard substring.count > 0 else { return\
    \ 0 }\n    guard string.count > 0 else { return 0 }\n    \n    var index = string.startIndex\n\
    \    var endIndex = string.index(index, offsetBy: substring.count)\n    var count\
    \ = 0\n    \n    while true {\n        let substringFromString = string[index..<endIndex]\n\
    \        if substringFromString == substring {\n            count += 1\n     \
    \   }\n        if endIndex >= string.endIndex {\n            break\n        }\n\
    \        index = string.index(after: index)\n        endIndex = string.index(after:\
    \ endIndex)\n    }\n    \n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009187
- exit_code: -4
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    guard string.count\
    \ >= substring.count else { return 0 }\n    var index = string.startIndex\n  \
    \  var count = 0\n    while index <= string.index(string.endIndex, offsetBy: -substring.count)\
    \ {\n        if string[index...].hasPrefix(substring) {\n            count +=\
    \ 1\n            index = string.index(index, offsetBy: substring.count)\n    \
    \    } else {\n            index = string.index(after: index)\n        }\n   \
    \ }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: Exception
  stderr: 'tmpj2i9cvmg/tmpj2i9cvmg.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1fe9875c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1fe956cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1fe956c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1fe956b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj2i9cvmg                        0x000055945af8da94 <unavailable> + 6804

    5    libc.so.6                          0x00002b1fe9a61460 __libc_start_main +
    245

    6    tmpj2i9cvmg                        0x000055945af8d509 <unavailable> + 5385

    '
  stdout: ''
  timestamp: 1660009187
- exit_code: -4
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n\treturn 0\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(how_many_times(string: \"\", substring: \"x\"\
    ) == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring: \"x\") == 4)\n\
    assert(how_many_times(string: \"cacacacac\", substring: \"cac\") == 4)\nassert(how_many_times(string:\
    \ \"john doe\", substring: \"john\") == 1)"
  status: Exception
  stderr: 'tmpexbkk2rj/tmpexbkk2rj.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b699f38bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b699f082b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b699f082988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b699f0817b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpexbkk2rj                        0x000055e401c4a372 <unavailable> + 4978

    5    libc.so.6                          0x00002b699f577460 __libc_start_main +
    245

    6    tmpexbkk2rj                        0x000055e401c49ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1660009186
- exit_code: -4
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    if string.count\
    \ < substring.count {\n        return 0\n    }\n    var from = string.startIndex\n\
    \    var to = string.index(from, offsetBy: substring.count)\n    var result =\
    \ 0\n    while to != string.endIndex {\n        if String(string[from..<to]) ==\
    \ substring {\n            result += 1\n        }\n        from = string.index(from,\
    \ offsetBy: 1)\n        to = string.index(to, offsetBy: 1)\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: Exception
  stderr: 'tmpymniwiw8/tmpymniwiw8.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6dc0c79c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6dc0970b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6dc0970988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6dc096f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpymniwiw8                        0x000055714cba4672 <unavailable> + 5746

    5    libc.so.6                          0x00002b6dc0e65460 __libc_start_main +
    245

    6    tmpymniwiw8                        0x000055714cba41e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1660009187
- exit_code: -4
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    return 0\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(how_many_times(string: \"\", substring: \"x\"\
    ) == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring: \"x\") == 4)\n\
    assert(how_many_times(string: \"cacacacac\", substring: \"cac\") == 4)\nassert(how_many_times(string:\
    \ \"john doe\", substring: \"john\") == 1)"
  status: Exception
  stderr: 'tmpa1ljw6t2/tmpa1ljw6t2.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afd74aa5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afd7479cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afd7479c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afd7479b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpa1ljw6t2                        0x000055655b9ad372 <unavailable> + 4978

    5    libc.so.6                          0x00002afd74c91460 __libc_start_main +
    245

    6    tmpa1ljw6t2                        0x000055655b9acee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1660009185
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    var string =\
    \ string\n    var count = 0\n    while let range = string.range(of: substring)\
    \ {\n        count += 1\n        string = string.replacingCharacters(in: range,\
    \ with: \"\")\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpxltm6kmf.swift:12:30: error: value of type 'String' has no member\
    \ 'range'\n    while let range = string.range(of: substring) {\n             \
    \         ~~~~~~ ^~~~~\n/tmp/tmpxltm6kmf.swift:14:25: error: value of type 'String'\
    \ has no member 'replacingCharacters'\n        string = string.replacingCharacters(in:\
    \ range, with: \"\")\n                 ~~~~~~ ^~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009185
- exit_code: -4
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    guard substring.count\
    \ <= string.count else { return 0 }\n    guard !substring.isEmpty else { return\
    \ 0 }\n    guard !string.isEmpty else { return 0 }\n    \n    var count = 0\n\
    \    var index = string.startIndex\n    while index != string.endIndex {\n   \
    \     if string[index] == substring[substring.startIndex] {\n            let endIndex\
    \ = string.index(index, offsetBy: substring.count)\n            if string[index..<endIndex]\
    \ == substring {\n                count += 1\n                index = endIndex\n\
    \            } else {\n                index = string.index(after: index)\n  \
    \          }\n        } else {\n            index = string.index(after: index)\n\
    \        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: Exception
  stderr: 'Swift/StringCharacterView.swift:153: Fatal error: String index is out of
    bounds

    Current stack trace:

    0    libswiftCore.so                    0x00002b43db546c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b43db23d561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b43db23d286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b43db23d13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b43db23cbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftCore.so                    0x00002b43db370b0d <unavailable> + 2693901

    6    tmp9slja06y                        0x00005621a5e33ccb <unavailable> + 7371

    7    tmp9slja06y                        0x00005621a5e338db <unavailable> + 6363

    8    libc.so.6                          0x00002b43db732460 __libc_start_main +
    245

    9    tmp9slja06y                        0x00005621a5e333e9 <unavailable> + 5097

    '
  stdout: ''
  timestamp: 1660009187
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n  let nsString =\
    \ string as NSString\n  let nsSubstring = substring as NSString\n  let len = nsString.length\n\
    \  let sublen = nsSubstring.length\n  var count = 0\n  for i in 0..<len {\n  \
    \  let range = NSRange(location: i, length: sublen)\n    if nsString.substring(with:\
    \ range) == nsSubstring as String {\n      count += 1\n    }\n  }\n  return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(how_many_times(string: \"\", substring: \"x\"\
    ) == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring: \"x\") == 4)\n\
    assert(how_many_times(string: \"cacacacac\", substring: \"cac\") == 4)\nassert(how_many_times(string:\
    \ \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpb8ul5leq.swift:10:28: error: cannot find type 'NSString' in scope\n\
    \  let nsString = string as NSString\n                           ^~~~~~~~\n/tmp/tmpb8ul5leq.swift:11:34:\
    \ error: cannot find type 'NSString' in scope\n  let nsSubstring = substring as\
    \ NSString\n                                 ^~~~~~~~\n/tmp/tmpb8ul5leq.swift:16:17:\
    \ error: cannot find 'NSRange' in scope\n    let range = NSRange(location: i,\
    \ length: sublen)\n                ^~~~~~~\n"
  stdout: ''
  timestamp: 1660009187
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    guard substring.count\
    \ > 0 && string.count >= substring.count else { return 0 }\n    guard string.count\
    \ > substring.count else { return 1 }\n    var count = 0\n    for index in 0...(string.count\
    \ - substring.count) {\n        count += (string[index...(index + substring.count\
    \ - 1)] == substring) ? 1 : 0\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpauvv83_0.swift:14:19: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an integer range, use a String.Index range instead.\n\
    \        count += (string[index...(index + substring.count - 1)] == substring)\
    \ ? 1 : 0\n                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nSwift.String:5:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript<R>(bounds: R) -> String where R : RangeExpression, R.Bound == Int\
    \ { get }\n           ^\n"
  stdout: ''
  timestamp: 1660009187
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    var result =\
    \ 0\n    var start = string.startIndex\n    while let range = string.range(of:\
    \ substring, range: start..<string.endIndex) {\n        start = range.upperBound\n\
    \        result += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpwfhhntw7.swift:12:30: error: value of type 'String' has no member\
    \ 'range'\n    while let range = string.range(of: substring, range: start..<string.endIndex)\
    \ {\n                      ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1660009187
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    guard string.count\
    \ >= substring.count else { return 0 }\n    guard substring.count > 0 else { return\
    \ 0 }\n    var result = 0\n    var idx = string.startIndex\n    while true {\n\
    \        let index = string.index(of: substring, in: idx..<string.endIndex)\n\
    \        if index == nil {\n            break\n        }\n        idx = string.index(after:\
    \ index!)\n        result += 1\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\n\
    assert(how_many_times(string: \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string:\
    \ \"cacacacac\", substring: \"cac\") == 4)\nassert(how_many_times(string: \"john\
    \ doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpjdf2cgmy.swift:15:56: error: extra argument 'in' in call\n    \
    \    let index = string.index(of: substring, in: idx..<string.endIndex)\n    \
    \                            ~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~\n/tmp/tmpjdf2cgmy.swift:15:38:\
    \ error: cannot convert value of type 'String' to expected argument type 'String.Element'\
    \ (aka 'Character')\n        let index = string.index(of: substring, in: idx..<string.endIndex)\n\
    \                                     ^\n"
  stdout: ''
  timestamp: 1660009187
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    var count =\
    \ 0\n    let range = NSRange(location: 0, length: string.count)\n    let regex\
    \ = try! NSRegularExpression(pattern: substring, options: [])\n    regex.enumerateMatches(in:\
    \ string, options: [], range: range) { match, _, _ in\n        if let match =\
    \ match {\n            count += 1\n        }\n    }\n    return count\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(how_many_times(string: \"\", substring: \"x\"\
    ) == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring: \"x\") == 4)\n\
    assert(how_many_times(string: \"cacacacac\", substring: \"cac\") == 4)\nassert(how_many_times(string:\
    \ \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpmd2oecv8.swift:11:17: error: cannot find 'NSRange' in scope\n \
    \   let range = NSRange(location: 0, length: string.count)\n                ^~~~~~~\n\
    /tmp/tmpmd2oecv8.swift:12:22: error: cannot find 'NSRegularExpression' in scope\n\
    \    let regex = try! NSRegularExpression(pattern: substring, options: [])\n \
    \                    ^~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009187
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n\treturn string.characters.count\
    \ - string.replacingOccurrences(of: substring, with: \"\").characters.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(how_many_times(string: \"\", substring: \"x\"\
    ) == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring: \"x\") == 4)\n\
    assert(how_many_times(string: \"cacacacac\", substring: \"cac\") == 4)\nassert(how_many_times(string:\
    \ \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpy01ugr3l.swift:10:42: error: value of type 'String' has no member\
    \ 'replacingOccurrences'\n        return string.characters.count - string.replacingOccurrences(of:\
    \ substring, with: \"\").characters.count\n                                  \
    \       ~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009187
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    if (string.isEmpty\
    \ || substring.isEmpty) {\n        return 0\n    }\n    if (string.count < substring.count)\
    \ {\n        return 0\n    }\n    var count = 0\n    for i in 0..<string.count\
    \ {\n        if (string[i..<(i+substring.count)] == substring) {\n           \
    \ count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpj0qcysvb.swift:18:13: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an integer range, use a String.Index range instead.\n\
    \        if (string[i..<(i+substring.count)] == substring) {\n            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    Swift.String:5:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript<R>(bounds: R) -> String where R : RangeExpression,\
    \ R.Bound == Int { get }\n           ^\n"
  stdout: ''
  timestamp: 1660009187
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    var count =\
    \ 0\n    if string.count > substring.count {\n        for (index, _) in string.enumerated()\
    \ {\n            if string[index..<index+substring.count] == substring {\n   \
    \             count += 1\n            }\n        }\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(how_many_times(string: \"\", substring: \"x\"\
    ) == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring: \"x\") == 4)\n\
    assert(how_many_times(string: \"cacacacac\", substring: \"cac\") == 4)\nassert(how_many_times(string:\
    \ \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp4n2kc7b0.swift:13:16: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an integer range, use a String.Index range instead.\n\
    \            if string[index..<index+substring.count] == substring {\n       \
    \        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nSwift.String:5:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript<R>(bounds:\
    \ R) -> String where R : RangeExpression, R.Bound == Int { get }\n           ^\n"
  stdout: ''
  timestamp: 1660009187
- exit_code: 0
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    var count =\
    \ 0\n    var startIndex = string.startIndex\n    let finalIndex = string.endIndex\n\
    \    let substringLength = substring.count\n    while startIndex < finalIndex\
    \ {\n        let endIndex = string.index(startIndex, offsetBy: substringLength,\
    \ limitedBy: finalIndex) ?? finalIndex\n        if substring == String(string[startIndex..<endIndex])\
    \ {\n            count += 1\n        }\n        startIndex = string.index(after:\
    \ startIndex)\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009187
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    let nsString\
    \ = string as NSString\n    let subStringRange = nsString.range(of: substring)\n\
    \    if subStringRange.location == NSNotFound {\n        return 0\n    }\n   \
    \ let length = string.distance(from: string.startIndex, to: subStringRange.lowerBound)\n\
    \    return how_many_times(string: string, substring: substring) + 1 + how_many_times(string:\
    \ String(string[string.index(string.startIndex, offsetBy: length + substring.count)...]),\
    \ substring: substring)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpqd_hd34h.swift:10:30: error: cannot find type 'NSString' in scope\n\
    \    let nsString = string as NSString\n                             ^~~~~~~~\n\
    /tmp/tmpqd_hd34h.swift:12:35: error: cannot find 'NSNotFound' in scope\n    if\
    \ subStringRange.location == NSNotFound {\n                                  ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009187
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    var count =\
    \ 0\n    var startIndex = string.startIndex\n    while let range = string.range(of:\
    \ substring, options: .caseInsensitive, range: startIndex..<string.endIndex, locale:\
    \ nil) {\n        count += 1\n        startIndex = range.upperBound\n    }\n \
    \   return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmptqvol_b9.swift:12:30: error: value of type 'String' has no member\
    \ 'range'\n    while let range = string.range(of: substring, options: .caseInsensitive,\
    \ range: startIndex..<string.endIndex, locale: nil) {\n                      ~~~~~~\
    \ ^~~~~\n/tmp/tmptqvol_b9.swift:12:61: error: cannot infer contextual base in\
    \ reference to member 'caseInsensitive'\n    while let range = string.range(of:\
    \ substring, options: .caseInsensitive, range: startIndex..<string.endIndex, locale:\
    \ nil) {\n                                                           ~^~~~~~~~~~~~~~~\n\
    /tmp/tmptqvol_b9.swift:12:123: error: 'nil' requires a contextual type\n    while\
    \ let range = string.range(of: substring, options: .caseInsensitive, range: startIndex..<string.endIndex,\
    \ locale: nil) {\n                                                           \
    \                                                               ^\n"
  stdout: ''
  timestamp: 1660009187
- exit_code: -4
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    if string.count\
    \ < substring.count {\n        return 0\n    }\n    var n = 0\n    var i = 0\n\
    \    while i < string.count - substring.count + 1 {\n        let range = string.index(string.startIndex,\
    \ offsetBy: i) ..< string.index(string.startIndex, offsetBy: i + substring.count)\n\
    \        if String(string[range]) == substring {\n            n += 1\n       \
    \     i += substring.count\n        } else {\n            i += 1\n        }\n\
    \    }\n    return n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: Exception
  stderr: 'tmp8ixwg0a3/tmp8ixwg0a3.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac260b50c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac260847b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac260847988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac2608467b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8ixwg0a3                        0x000055e6c21f0724 <unavailable> + 5924

    5    libc.so.6                          0x00002ac260d3c460 __libc_start_main +
    245

    6    tmp8ixwg0a3                        0x000055e6c21f0199 <unavailable> + 4505

    '
  stdout: ''
  timestamp: 1660009187
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    var result =\
    \ 0\n    var index = string.startIndex\n    while index < string.endIndex {\n\
    \        if string.hasPrefix(substring, startingAt: index) {\n            result\
    \ += 1\n            index = string.index(index, offsetBy: substring.count)\n \
    \       } else {\n            index = string.index(after: index)\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpw5zhcjut.swift:13:52: error: extra argument 'startingAt' in call\n\
    \        if string.hasPrefix(substring, startingAt: index) {\n               \
    \            ~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~\n"
  stdout: ''
  timestamp: 1660009187
- exit_code: 0
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    guard string.count\
    \ >= substring.count else { return 0 }\n    var result = 0\n    for i in 0 ..<\
    \ string.count {\n        if i + substring.count <= string.count {\n         \
    \   let startIndex = string.index(string.startIndex, offsetBy: i)\n          \
    \  let endIndex = string.index(string.startIndex, offsetBy: i + substring.count)\n\
    \            let temp = String(string[startIndex ..< endIndex])\n            if\
    \ temp == substring {\n                result += 1\n            }\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009187
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    if string.isEmpty\
    \ || substring.isEmpty {\n        return 0\n    }\n    var count = 0\n    var\
    \ previousIndex = 0\n    while true {\n        let range = string.range(of: substring,\
    \ options: .caseInsensitive, range: string.index(string.startIndex, offsetBy:\
    \ previousIndex)..<string.endIndex, locale: nil)\n        if let range = range\
    \ {\n            count += 1\n            previousIndex = string.distance(from:\
    \ string.startIndex, to: range.upperBound)\n        } else {\n            break\n\
    \        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpxoupehgv.swift:16:28: error: value of type 'String' has no member\
    \ 'range'\n        let range = string.range(of: substring, options: .caseInsensitive,\
    \ range: string.index(string.startIndex, offsetBy: previousIndex)..<string.endIndex,\
    \ locale: nil)\n                    ~~~~~~ ^~~~~\n/tmp/tmpxoupehgv.swift:16:59:\
    \ error: cannot infer contextual base in reference to member 'caseInsensitive'\n\
    \        let range = string.range(of: substring, options: .caseInsensitive, range:\
    \ string.index(string.startIndex, offsetBy: previousIndex)..<string.endIndex,\
    \ locale: nil)\n                                                         ~^~~~~~~~~~~~~~~\n\
    /tmp/tmpxoupehgv.swift:16:167: error: 'nil' requires a contextual type\n     \
    \   let range = string.range(of: substring, options: .caseInsensitive, range:\
    \ string.index(string.startIndex, offsetBy: previousIndex)..<string.endIndex,\
    \ locale: nil)\n                                                             \
    \                                                                            \
    \                             ^\n"
  stdout: ''
  timestamp: 1660009187
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    var last: Int\
    \ = -1\n    var number_of_times: Int = 0\n    while let range = string.range(of:\
    \ substring, options: .literal, range: Range(uncheckedBounds: (last, string.endIndex)),\
    \ locale: nil) {\n        last = string.distance(from: string.startIndex, to:\
    \ range.upperBound)\n        number_of_times += 1\n    }\n    return number_of_times\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(how_many_times(string: \"\", substring: \"x\"\
    ) == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring: \"x\") == 4)\n\
    assert(how_many_times(string: \"cacacacac\", substring: \"cac\") == 4)\nassert(how_many_times(string:\
    \ \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8pcyt5nm.swift:12:30: error: value of type 'String' has no member\
    \ 'range'\n    while let range = string.range(of: substring, options: .literal,\
    \ range: Range(uncheckedBounds: (last, string.endIndex)), locale: nil) {\n   \
    \                   ~~~~~~ ^~~~~\n/tmp/tmp8pcyt5nm.swift:12:61: error: cannot\
    \ infer contextual base in reference to member 'literal'\n    while let range\
    \ = string.range(of: substring, options: .literal, range: Range(uncheckedBounds:\
    \ (last, string.endIndex)), locale: nil) {\n                                 \
    \                          ~^~~~~~~\n/tmp/tmp8pcyt5nm.swift:12:134: error: 'nil'\
    \ requires a contextual type\n    while let range = string.range(of: substring,\
    \ options: .literal, range: Range(uncheckedBounds: (last, string.endIndex)), locale:\
    \ nil) {\n                                                                   \
    \                                                                  ^\n"
  stdout: ''
  timestamp: 1660009187
- exit_code: -4
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    return 0\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(how_many_times(string: \"\", substring: \"x\"\
    ) == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring: \"x\") == 4)\n\
    assert(how_many_times(string: \"cacacacac\", substring: \"cac\") == 4)\nassert(how_many_times(string:\
    \ \"john doe\", substring: \"john\") == 1)"
  status: Exception
  stderr: 'tmpa1ljw6t2/tmpa1ljw6t2.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afd74aa5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afd7479cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afd7479c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afd7479b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpa1ljw6t2                        0x000055655b9ad372 <unavailable> + 4978

    5    libc.so.6                          0x00002afd74c91460 __libc_start_main +
    245

    6    tmpa1ljw6t2                        0x000055655b9acee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1660009185
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    guard !string.isEmpty\
    \ else { return 0 }\n    guard !substring.isEmpty else { return 0 }\n    guard\
    \ substring.count <= string.count else { return 0 }\n    \n    var string = string\n\
    \    var substring = substring\n    var found: Int = 0\n    \n    while let range\
    \ = string.range(of: substring) {\n        string.removeSubrange(range)\n    \
    \    found += 1\n    }\n    \n    return found\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp1dxbtu1t.swift:18:30: error: value of type 'String' has no member\
    \ 'range'\n    while let range = string.range(of: substring) {\n             \
    \         ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1660009187
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    if string.isEmpty\
    \ || substring.isEmpty {\n        return 0\n    }\n\n    var count = 0\n    var\
    \ index = string.startIndex\n    while index < string.endIndex {\n        let\
    \ range = string.range(of: substring, range: index..<string.endIndex)\n      \
    \  if let r = range {\n            count += 1\n            index = r.upperBound\n\
    \        } else {\n            break\n        }\n    }\n    return count\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(how_many_times(string: \"\", substring: \"x\"\
    ) == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring: \"x\") == 4)\n\
    assert(how_many_times(string: \"cacacacac\", substring: \"cac\") == 4)\nassert(how_many_times(string:\
    \ \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmprouy_sap.swift:17:28: error: value of type 'String' has no member\
    \ 'range'\n        let range = string.range(of: substring, range: index..<string.endIndex)\n\
    \                    ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1660009187
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    return string.characters.split(separator:\
    \ Character(substring), maxSplits: string.characters.count, omittingEmptySubsequences:\
    \ false).count - 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpupffvapq.swift:10:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    return string.characters.split(separator: Character(substring),\
    \ maxSplits: string.characters.count, omittingEmptySubsequences: false).count\
    \ - 1\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was\
    \ obsoleted in Swift 5.0\n    public var characters: String { get set }\n    \
    \           ^\n/tmp/tmpupffvapq.swift:10:87: error: 'characters' is unavailable:\
    \ Please use String directly\n    return string.characters.split(separator: Character(substring),\
    \ maxSplits: string.characters.count, omittingEmptySubsequences: false).count\
    \ - 1\n                                                                      \
    \                ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1660009187
- exit_code: -4
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    var count =\
    \ 0\n    var i = 0\n    var j = 0\n    for i in string.indices {\n        for\
    \ j in substring.indices {\n            let string_char = string[i]\n        \
    \    let substring_char = substring[j]\n            if string_char == substring_char\
    \ {\n                count += 1\n            }\n        }\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(how_many_times(string: \"\", substring: \"x\"\
    ) == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring: \"x\") == 4)\n\
    assert(how_many_times(string: \"cacacacac\", substring: \"cac\") == 4)\nassert(how_many_times(string:\
    \ \"john doe\", substring: \"john\") == 1)"
  status: Exception
  stderr: 'tmpewhvd76x/tmpewhvd76x.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b23871a6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2386e9db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2386e9d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2386e9c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpewhvd76x                        0x000055a27e7a4774 <unavailable> + 6004

    5    libc.so.6                          0x00002b2387392460 __libc_start_main +
    245

    6    tmpewhvd76x                        0x000055a27e7a41e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1660009187
- exit_code: -4
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    // your code\
    \ here\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: Exception
  stderr: 'tmp4ooduxbe/tmp4ooduxbe.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5ddf31fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5ddf016b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5ddf016988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5ddf0157b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4ooduxbe                        0x0000560d8f8d7372 <unavailable> + 4978

    5    libc.so.6                          0x00002b5ddf50b460 __libc_start_main +
    245

    6    tmp4ooduxbe                        0x0000560d8f8d6ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1660009187
- exit_code: -4
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    if string.count\
    \ < substring.count {\n        return 0\n    }\n    if string.count == substring.count\
    \ {\n        return string == substring ? 1 : 0\n    }\n    var result = 0\n \
    \   var i = 0\n    while i < string.count - substring.count + 1 {\n        let\
    \ index = string.index(string.startIndex, offsetBy: i)\n        let sub = string[index..<string.index(index,\
    \ offsetBy: substring.count)]\n        if sub == substring {\n            result\
    \ += 1\n            i += substring.count\n        } else {\n            i += 1\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: Exception
  stderr: 'tmphqvtw4pf/tmphqvtw4pf.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b77edc16c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b77ed90db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b77ed90d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b77ed90c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphqvtw4pf                        0x00005564184f6814 <unavailable> + 6164

    5    libc.so.6                          0x00002b77ede02460 __libc_start_main +
    245

    6    tmphqvtw4pf                        0x00005564184f6289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660009187
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    var count =\
    \ 0\n    var stringCopy = string\n    var substringCopy = substring\n    while\
    \ substringCopy.count <= stringCopy.count {\n        if let range = stringCopy.range(of:\
    \ substringCopy) {\n            count += 1\n            stringCopy.removeSubrange(range)\n\
    \        } else {\n            break\n        }\n    }\n    return count\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(how_many_times(string: \"\", substring: \"x\"\
    ) == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring: \"x\") == 4)\n\
    assert(how_many_times(string: \"cacacacac\", substring: \"cac\") == 4)\nassert(how_many_times(string:\
    \ \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpo7_ajwia.swift:14:35: error: value of type 'String' has no member\
    \ 'range'\n        if let range = stringCopy.range(of: substringCopy) {\n    \
    \                   ~~~~~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1660009187
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    var num_times\
    \ = 0\n    var cursor = string.startIndex\n    while cursor < string.endIndex\
    \ {\n        let range = string.range(of: substring, range: cursor..<string.endIndex)\n\
    \        if range != nil {\n            num_times += 1\n            cursor = range!.upperBound\n\
    \        } else {\n            break\n        }\n    }\n    return num_times\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(how_many_times(string: \"\", substring: \"x\"\
    ) == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring: \"x\") == 4)\n\
    assert(how_many_times(string: \"cacacacac\", substring: \"cac\") == 4)\nassert(how_many_times(string:\
    \ \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpqglx9x9w.swift:13:28: error: value of type 'String' has no member\
    \ 'range'\n        let range = string.range(of: substring, range: cursor..<string.endIndex)\n\
    \                    ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1660009187
- exit_code: -4
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n\tlet chars = Array(string)\n\
    \tlet subchars = Array(substring)\n\tvar count = 0\n\t\n\tvar i = 0\n\twhile i\
    \ < chars.count {\n\t\tif chars[i] == subchars[0] {\n\t\t\tvar j = 1\n\t\t\twhile\
    \ j < subchars.count && i + j < chars.count && chars[i + j] == subchars[j] {\n\
    \t\t\t\tj += 1\n\t\t\t}\n\t\t\tif j == subchars.count {\n\t\t\t\tcount += 1\n\t\
    \t\t\ti += j - 1\n\t\t\t}\n\t\t}\n\t\ti += 1\n\t}\n\t\n\treturn count\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(how_many_times(string: \"\", substring: \"x\"\
    ) == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring: \"x\") == 4)\n\
    assert(how_many_times(string: \"cacacacac\", substring: \"cac\") == 4)\nassert(how_many_times(string:\
    \ \"john doe\", substring: \"john\") == 1)"
  status: Exception
  stderr: 'tmp2wdjwaur/tmp2wdjwaur.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5c42929c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5c42620b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5c42620988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5c4261f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2wdjwaur                        0x000055a0679456e4 <unavailable> + 5860

    5    libc.so.6                          0x00002b5c42b15460 __libc_start_main +
    245

    6    tmp2wdjwaur                        0x000055a067945159 <unavailable> + 4441

    '
  stdout: ''
  timestamp: 1660009187
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    return string.components(separatedBy:\
    \ substring).count - 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpqg05pp0x.swift:10:19: error: value of type 'String' has no member\
    \ 'components'\n    return string.components(separatedBy: substring).count - 1\n\
    \           ~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009185
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    guard string.count\
    \ >= substring.count else { return 0 }\n    var occurrences = 0\n    var index\
    \ = string.startIndex\n    while index < string.endIndex {\n        if let r =\
    \ string.range(of: substring, range: index..<string.endIndex, options: .caseInsensitive,\
    \ locale: nil) {\n            occurrences += 1\n            index = r.upperBound\n\
    \        } else {\n            break\n        }\n    }\n    return occurrences\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(how_many_times(string: \"\", substring: \"x\"\
    ) == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring: \"x\") == 4)\n\
    assert(how_many_times(string: \"cacacacac\", substring: \"cac\") == 4)\nassert(how_many_times(string:\
    \ \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpjfw1xhju.swift:14:27: error: value of type 'String' has no member\
    \ 'range'\n        if let r = string.range(of: substring, range: index..<string.endIndex,\
    \ options: .caseInsensitive, locale: nil) {\n                   ~~~~~~ ^~~~~\n\
    /tmp/tmpjfw1xhju.swift:14:90: error: cannot infer contextual base in reference\
    \ to member 'caseInsensitive'\n        if let r = string.range(of: substring,\
    \ range: index..<string.endIndex, options: .caseInsensitive, locale: nil) {\n\
    \                                                                            \
    \            ~^~~~~~~~~~~~~~~\n/tmp/tmpjfw1xhju.swift:14:115: error: 'nil' requires\
    \ a contextual type\n        if let r = string.range(of: substring, range: index..<string.endIndex,\
    \ options: .caseInsensitive, locale: nil) {\n                                \
    \                                                                            \
    \      ^\n"
  stdout: ''
  timestamp: 1660009187
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    var count =\
    \ 0\n    var start = string.startIndex\n    while let range = string.range(of:\
    \ substring, range: start..<string.endIndex) {\n        count += 1\n        start\
    \ = range.upperBound\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpoi22_br0.swift:12:30: error: value of type 'String' has no member\
    \ 'range'\n    while let range = string.range(of: substring, range: start..<string.endIndex)\
    \ {\n                      ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1660009186
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    guard !string.isEmpty\
    \ else { return 0 }\n    guard !substring.isEmpty else { return 0 }\n    let endIndex\
    \ = string.index(string.startIndex, offsetBy: string.count - substring.count +\
    \ 1)\n    var count = 0\n    for s in string[string.startIndex..<endIndex] {\n\
    \        if String(s) == substring.first! {\n            let currEndIndex = string.index(string.startIndex,\
    \ offsetBy: string.distance(from: string.startIndex, to: s) + substring.count)\n\
    \            if string[s..<currEndIndex] == substring {\n                count\
    \ += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\n\
    assert(how_many_times(string: \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string:\
    \ \"cacacacac\", substring: \"cac\") == 4)\nassert(how_many_times(string: \"john\
    \ doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmph0vas2s3.swift:15:22: error: binary operator '==' cannot be applied\
    \ to operands of type 'String' and 'String.Element' (aka 'Character')\n      \
    \  if String(s) == substring.first! {\n           ~~~~~~~~~ ^  ~~~~~~~~~~~~~~~~\n\
    /tmp/tmph0vas2s3.swift:15:22: note: overloads for '==' exist with these partially\
    \ matching parameter lists: (Character, Character), (String, String)\n       \
    \ if String(s) == substring.first! {\n                     ^\n/tmp/tmph0vas2s3.swift:16:119:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String.Index'\n\
    \            let currEndIndex = string.index(string.startIndex, offsetBy: string.distance(from:\
    \ string.startIndex, to: s) + substring.count)\n                             \
    \                                                                            \
    \             ^\n/tmp/tmph0vas2s3.swift:17:22: error: subscript 'subscript(_:)'\
    \ requires the types 'String.Index' and 'Character' be equivalent\n          \
    \  if string[s..<currEndIndex] == substring {\n                     ^\nSwift.Collection:2:23:\
    \ note: where 'Self.Index' = 'String.Index', 'R.Bound' = 'Character'\n    @inlinable\
    \ public subscript<R>(r: R) -> Self.SubSequence where R : RangeExpression, Self.Index\
    \ == R.Bound { get }\n                      ^\n"
  stdout: ''
  timestamp: 1660009187
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    if substring.isEmpty\
    \ {\n        return 0\n    }\n    var fromIndex = string.startIndex\n    var occurrences\
    \ = 0\n    while let range = string.range(of: substring, options: .caseInsensitive,\
    \ range: fromIndex..<string.endIndex, locale: nil) {\n        occurrences += 1\n\
    \        fromIndex = range.upperBound\n    }\n    return occurrences\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(how_many_times(string: \"\", substring: \"x\"\
    ) == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring: \"x\") == 4)\n\
    assert(how_many_times(string: \"cacacacac\", substring: \"cac\") == 4)\nassert(how_many_times(string:\
    \ \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpk4j_auas.swift:15:30: error: value of type 'String' has no member\
    \ 'range'\n    while let range = string.range(of: substring, options: .caseInsensitive,\
    \ range: fromIndex..<string.endIndex, locale: nil) {\n                      ~~~~~~\
    \ ^~~~~\n/tmp/tmpk4j_auas.swift:15:61: error: cannot infer contextual base in\
    \ reference to member 'caseInsensitive'\n    while let range = string.range(of:\
    \ substring, options: .caseInsensitive, range: fromIndex..<string.endIndex, locale:\
    \ nil) {\n                                                           ~^~~~~~~~~~~~~~~\n\
    /tmp/tmpk4j_auas.swift:15:122: error: 'nil' requires a contextual type\n    while\
    \ let range = string.range(of: substring, options: .caseInsensitive, range: fromIndex..<string.endIndex,\
    \ locale: nil) {\n                                                           \
    \                                                              ^\n"
  stdout: ''
  timestamp: 1660009187
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    if string.isEmpty\
    \ || substring.isEmpty {\n        return 0\n    }\n    var str = string\n    var\
    \ count = 0\n    while let s = str.range(of: substring) {\n        count += 1\n\
    \        str = String(str[s.upperBound...])\n    }\n    return count\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(how_many_times(string: \"\", substring: \"x\"\
    ) == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring: \"x\") == 4)\n\
    assert(how_many_times(string: \"cacacacac\", substring: \"cac\") == 4)\nassert(how_many_times(string:\
    \ \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp7zsz7t2m.swift:15:23: error: value of type 'String' has no member\
    \ 'range'\n    while let s = str.range(of: substring) {\n                  ~~~\
    \ ^~~~~\n"
  stdout: ''
  timestamp: 1660009187
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    assert(string.count\
    \ >= substring.count)\n    return (string.count - substring.count + 1) - (string.replacingOccurrences(of:\
    \ substring, with: \"\").count - substring.count + 1)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmppe2rxuyz.swift:11:59: error: value of type 'String' has no member\
    \ 'replacingOccurrences'\n    return (string.count - substring.count + 1) - (string.replacingOccurrences(of:\
    \ substring, with: \"\").count - substring.count + 1)\n                      \
    \                             ~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009196
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n  var count = 0\n\
    \  var i = 0\n  var l = substring.count\n  var s = string.count\n  while i < s\
    \ {\n    if let range = string.range(of: substring, options: .literal, range:\
    \ i..<s, locale: nil) {\n      count += 1\n      i = range.upperBound.encodedOffset\n\
    \    } else {\n      break\n    }\n  }\n  return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp1h9gtegd.swift:15:27: error: value of type 'String' has no member\
    \ 'range'\n    if let range = string.range(of: substring, options: .literal, range:\
    \ i..<s, locale: nil) {\n                   ~~~~~~ ^~~~~\n/tmp/tmp1h9gtegd.swift:15:58:\
    \ error: cannot infer contextual base in reference to member 'literal'\n    if\
    \ let range = string.range(of: substring, options: .literal, range: i..<s, locale:\
    \ nil) {\n                                                        ~^~~~~~~\n/tmp/tmp1h9gtegd.swift:15:89:\
    \ error: 'nil' requires a contextual type\n    if let range = string.range(of:\
    \ substring, options: .literal, range: i..<s, locale: nil) {\n               \
    \                                                                         ^\n"
  stdout: ''
  timestamp: 1660009187
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    guard string.count\
    \ >= substring.count else { return 0 }\n    var searchStartIndex = string.startIndex\n\
    \    var count = 0\n    while searchStartIndex < string.endIndex,\n        let\
    \ range = string.range(of: substring, range: searchStartIndex..<string.endIndex)\
    \ {\n            searchStartIndex = range.lowerBound < string.endIndex ? string.index(after:\
    \ range.lowerBound) : string.endIndex\n            count += 1\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmprct880cd.swift:14:28: error: value of type 'String' has no member\
    \ 'range'\n        let range = string.range(of: substring, range: searchStartIndex..<string.endIndex)\
    \ {\n                    ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1660009187
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    let elements\
    \ = string.characters.split(separator: Character(substring)).map(String.init)\n\
    \    return elements.count-1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpd951k04r.swift:10:27: error: 'characters' is unavailable: Please\
    \ use String directly\n    let elements = string.characters.split(separator: Character(substring)).map(String.init)\n\
    \                          ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was\
    \ obsoleted in Swift 5.0\n    public var characters: String { get set }\n    \
    \           ^\n"
  stdout: ''
  timestamp: 1660009187
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n\tlet range = string.range(of:\
    \ substring)\n\tif range == nil {\n\t\treturn 0\n\t} else {\n\t\tlet distance\
    \ = string.distance(from: string.startIndex, to: range!.lowerBound)\n\t\tlet newString\
    \ = string.substring(from: string.index(string.startIndex, offsetBy: distance\
    \ + 1))\n\t\treturn 1 + how_many_times(string: newString, substring: substring)\n\
    \t}\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(how_many_times(string: \"\",\
    \ substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8u03pryn.swift:10:21: error: value of type 'String' has no member\
    \ 'range'\n        let range = string.range(of: substring)\n                 \
    \   ~~~~~~ ^~~~~\n/tmp/tmp8u03pryn.swift:15:26: error: value of type 'String'\
    \ has no member 'substring'\n                let newString = string.substring(from:\
    \ string.index(string.startIndex, offsetBy: distance + 1))\n                 \
    \               ~~~~~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009187
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    // you code\
    \ here\n    var total = 0\n    var sub_index = string.startIndex\n    while sub_index\
    \ < string.endIndex {\n        if let range = string.range(of: substring, range:\
    \ sub_index..<string.endIndex) {\n            total += 1\n            sub_index\
    \ = range.upperBound\n        } else {\n            break\n        }\n    }\n\
    \    return total\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpewus0jtk.swift:14:31: error: value of type 'String' has no member\
    \ 'range'\n        if let range = string.range(of: substring, range: sub_index..<string.endIndex)\
    \ {\n                       ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1660009187
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    var count =\
    \ 0\n    if string.isEmpty || substring.isEmpty {\n        return count\n    }\n\
    \    var startIndex = string.startIndex\n    let endIndex = string.endIndex\n\
    \    let subStringLength = substring.count\n    while startIndex < endIndex {\n\
    \        let range = string.range(of: substring, options: [], range: startIndex..<endIndex,\
    \ locale: nil)\n        if let foundRange = range {\n            startIndex =\
    \ foundRange.upperBound\n            count += 1\n        } else {\n          \
    \  break\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpqu1ug4et.swift:18:28: error: value of type 'String' has no member\
    \ 'range'\n        let range = string.range(of: substring, options: [], range:\
    \ startIndex..<endIndex, locale: nil)\n                    ~~~~~~ ^~~~~\n/tmp/tmpqu1ug4et.swift:18:100:\
    \ error: 'nil' requires a contextual type\n        let range = string.range(of:\
    \ substring, options: [], range: startIndex..<endIndex, locale: nil)\n       \
    \                                                                            \
    \                ^\n"
  stdout: ''
  timestamp: 1660009187
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    if string.count\
    \ < substring.count {\n        return 0\n    }\n    var count = 0\n    let range\
    \ = string.startIndex ..< string.endIndex\n    string.enumerateSubstrings(in:\
    \ range, options: .byWords) { (word, _, _, _) in\n        if let word = word,\
    \ word == substring {\n            count += 1\n        }\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(how_many_times(string: \"\", substring: \"x\"\
    ) == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring: \"x\") == 4)\n\
    assert(how_many_times(string: \"cacacacac\", substring: \"cac\") == 4)\nassert(how_many_times(string:\
    \ \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpj38lvo13.swift:15:12: error: value of type 'String' has no member\
    \ 'enumerateSubstrings'\n    string.enumerateSubstrings(in: range, options: .byWords)\
    \ { (word, _, _, _) in\n    ~~~~~~ ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpj38lvo13.swift:15:53:\
    \ error: cannot infer contextual base in reference to member 'byWords'\n    string.enumerateSubstrings(in:\
    \ range, options: .byWords) { (word, _, _, _) in\n                           \
    \                        ~^~~~~~~\n"
  stdout: ''
  timestamp: 1660009187
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    if substring.count\
    \ > string.count {\n        return 0\n    }\n    var slice = string\n    var count\
    \ = 0\n    while let range = slice.range(of: substring) {\n        count += 1\n\
    \        slice = String(slice[range.upperBound...])\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(how_many_times(string: \"\", substring: \"x\"\
    ) == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring: \"x\") == 4)\n\
    assert(how_many_times(string: \"cacacacac\", substring: \"cac\") == 4)\nassert(how_many_times(string:\
    \ \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp3ta5ani5.swift:15:29: error: value of type 'String' has no member\
    \ 'range'\n    while let range = slice.range(of: substring) {\n              \
    \        ~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1660009187
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
    \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
    \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc\
    \ how_many_times(string: String, substring: String) -> Int {\n    return string.split(substring).count\
    \ - 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpoldzsjy6.swift:10:25: error: missing argument label 'separator:'\
    \ in call\n    return string.split(substring).count - 1\n                    \
    \    ^\n                        separator: \n"
  stdout: ''
  timestamp: 1660009187
