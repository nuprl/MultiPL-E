name: HumanEval_119_match_parens
language: swift
prompt: "\n/// You are given an array of two strings, both strings consist of open\n\
  /// parentheses '(' or close parentheses ')' only.\n/// Your job is to check if\
  \ it is possible to concatenate the two strings in\n/// some order, that the resulting\
  \ string will be good.\n/// A string S is considered to be good if and only if all\
  \ parentheses in S\n/// are balanced. For example: the string '(())()' is good,\
  \ while the string\n/// '())' is not.\n/// Return 'Yes' if there's a way to make\
  \ a good string, and return 'No' otherwise.\n/// Examples:\n/// >>> match_parens(lst:\
  \ [\"()(\", \")\"])\n/// \"Yes\"\n/// >>> match_parens(lst: [\")\", \")\"])\n///\
  \ \"No\"\nfunc match_parens(lst: [String]) -> String {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(match_parens(lst: [\"()(\", \")\"]) == \"\
  Yes\")\nassert(match_parens(lst: [\")\", \")\"]) == \"No\")\nassert(match_parens(lst:\
  \ [\"(()(())\", \"())())\"]) == \"No\")\nassert(match_parens(lst: [\")())\", \"\
  (()()(\"]) == \"Yes\")\nassert(match_parens(lst: [\"(())))\", \"(()())((\"]) ==\
  \ \"Yes\")\nassert(match_parens(lst: [\"()\", \"())\"]) == \"No\")\nassert(match_parens(lst:\
  \ [\"(()(\", \"()))()\"]) == \"Yes\")\nassert(match_parens(lst: [\"((((\", \"((())\"\
  ]) == \"No\")\nassert(match_parens(lst: [\")(()\", \"(()(\"]) == \"No\")\nassert(match_parens(lst:\
  \ [\")(\", \")(\"]) == \"No\")\nassert(match_parens(lst: [\"(\", \")\"]) == \"Yes\"\
  )\nassert(match_parens(lst: [\")\", \"(\"]) == \"Yes\")"
completions: ["    var s1 = lst[0]\n    var s2 = lst[1]\n    var good_flag = false\n\
    \    let l1 = lst[0].count\n    let l2 = lst[1].count\n    for i in 0..<l1 {\n\
    \        for j in 0..<l2 {\n            var s1i = s1[i]\n            var s2j =\
    \ s2[j]\n            s1[i] = s2[j]\n            s2[j] = s1i\n            if is_balanced(s:\
    \ s1) && is_balanced(s: s2) {\n                good_flag = true\n            }\n\
    \            s1[i] = s1i\n            s2[j] = s2j\n        }\n    }\n    if good_flag\
    \ {\n        return \"Yes\"\n    } else {\n        return \"No\"\n    }", "  \
    \  if lst.count != 2 { return \"No\" }\n    var first = lst[0], second = lst[1]\n\
    \    if first.count > second.count {\n        first = lst[1]\n        second =\
    \ lst[0]\n    }\n    let count = balance_parens(str: first + second)\n    return\
    \ count == 0 ? \"Yes\" : \"No\"", "  var cnt = 0\n  for s in lst {\n    for c\
    \ in s {\n      cnt += c == \"(\" ? 1 : -1\n      if cnt < 0 { return \"No\" }\n\
    \    }\n  }\n  return cnt == 0 ? \"Yes\" : \"No\"", "    var str = lst[0] + lst[1]\n\
    \    var left: Int = 0\n    var right: Int = 0\n    for paren in str {\n     \
    \   if paren == \"(\" {\n            left += 1\n        } else {\n           \
    \ right += 1\n        }\n        if right > left {\n            return \"No\"\n\
    \        }\n    }\n    if left == right {\n        return \"Yes\"\n    }\n   \
    \ return \"No\"", "    var parens = \"\"\n    for parenthesis in lst {\n     \
    \   parens += parenthesis\n    }\n    var sum = 0\n    for char in parens {\n\
    \        if char == \"(\" {\n            sum += 1\n        } else {\n        \
    \    sum -= 1\n        }\n        if sum < 0 {\n            return \"No\"\n  \
    \      }\n    }\n    return sum == 0 ? \"Yes\" : \"No\"", "    var s = \"\"\n\
    \    for str in lst {\n        s += str\n    }\n    return parens_match(s: s)\
    \ ? \"Yes\" : \"No\"", '    return "Your solution here"', '  return ""', "   \
    \ let good_chars = lst.reduce(\"\", +)\n    let good_chars_count = good_chars.filter\
    \ { $0 == \"(\" }.count\n    let valid_count = good_chars.count - good_chars_count\
    \ * 2\n    return valid_count == 0 ? \"Yes\" : \"No\"", "    // TODO: implement\n\
    \    return \"Yes\"", "    let left: String = lst[0]\n    let right: String =\
    \ lst[1]\n    if (has_matching_parens(string: left) && has_matching_parens(string:\
    \ right)) {\n        return \"Yes\"\n    }\n    return \"No\"", "    let str1\
    \ = lst[0]\n    let str2 = lst[1]\n    let rightSide = str1 + str2\n    let leftSide\
    \ = str2 + str1\n    let okay1 = isGood(parens: rightSide)\n    let okay2 = isGood(parens:\
    \ leftSide)\n    return okay1 || okay2 ? \"Yes\" : \"No\"", "    let (str1, str2)\
    \ = (lst[0], lst[1])\n    if str1.count + str2.count % 2 != 0 {\n        return\
    \ \"No\"\n    }\n    let left = \"(\"\n    let right = \")\"\n    if str1.count\
    \ > str2.count {\n        var count = 0\n        for elem in str1 {\n        \
    \    if elem == Character(left) {\n                count += 1\n            } else\
    \ {\n                count -= 1\n            }\n            if count < 0 {\n \
    \               return \"No\"\n            }\n        }\n        return \"Yes\"\
    \n    } else {\n        var count = 0\n        for elem in str2 {\n          \
    \  if elem == Character(left) {\n                count += 1\n            } else\
    \ {\n                count -= 1\n            }\n            if count < 0 {\n \
    \               return \"No\"\n            }\n        }\n        return \"Yes\"\
    \n    }", "  var left = 0\n  var right = 0\n  for char in lst[0] {\n    if char\
    \ == \"(\" {\n      left += 1\n    } else {\n      right += 1\n    }\n  }\n  for\
    \ char in lst[1] {\n    if char == \"(\" {\n      left -= 1\n    } else {\n  \
    \    right -= 1\n    }\n  }\n  if left == 0 && right == 0 {\n    return \"Yes\"\
    \n  }\n  return \"No\"", "    var count1 = 0\n    var count2 = 0\n    for char\
    \ in lst[0] {\n        if char == \"(\" {\n            count1 += 1\n        }\
    \ else {\n            count1 -= 1\n        }\n    }\n    for char in lst[1] {\n\
    \        if char == \"(\" {\n            count2 += 1\n        } else {\n     \
    \       count2 -= 1\n        }\n    }\n    if count1 + count2 < 0 {\n        return\
    \ \"No\"\n    }\n    return \"Yes\"", "    var s = \"\"\n    s.append(contentsOf:\
    \ lst[0])\n    s.append(contentsOf: lst[1])\n    var count = 0\n    for c in s\
    \ {\n        if c == \"(\" {\n            count += 1\n        } else {\n     \
    \       count -= 1\n        }\n        if count < 0 {\n            return \"No\"\
    \n        }\n    }\n    return count == 0 ? \"Yes\" : \"No\"", "    var left:\
    \ Int = 0\n    var right: Int = 0\n    for char in lst[0] {\n        if char ==\
    \ \"(\" {\n            left += 1\n        } else {\n            right += 1\n \
    \       }\n    }\n    for char in lst[1] {\n        if char == \"(\" {\n     \
    \       left -= 1\n        } else {\n            right -= 1\n        }\n    }\n\
    \    if left == 0 && right == 0 {\n        return \"Yes\"\n    }\n    return \"\
    No\"", "    let s1 = lst[0]\n    let s2 = lst[1]\n    let s1_prefixes = s1.prefix_array()\n\
    \    let s2_suffixes = s2.suffix_array()\n    let s1_suffixes = s1.suffix_array()\n\
    \    let s2_prefixes = s2.prefix_array()\n    if (s1_prefixes[s1.count - 1] +\
    \ s2_suffixes[0]) % 2 == 0 {\n        return \"Yes\"\n    }\n    if (s1_suffixes[0]\
    \ + s2_prefixes[s2.count - 1]) % 2 == 0 {\n        return \"Yes\"\n    }\n   \
    \ return \"No\"", "    var parens = lst.reduce(\"\", +)\n    while parens.contains(\"\
    ()\") {\n        parens = parens.replacingOccurrences(of: \"()\", with: \"\")\n\
    \    }\n    return parens.isEmpty ? \"Yes\" : \"No\"", "  let s1 = lst[0]\n  let\
    \ s2 = lst[1]\n  // print(\"start \\(s1) - \\(s2)\")\n  if s1.isEmpty {\n    //\
    \ print(\"\\(s1) is empty\")\n    return s2.characters.contains(\"(\") ? \"No\"\
    \ : \"Yes\"\n  }\n  if s2.isEmpty {\n    // print(\"\\(s2) is empty\")\n    return\
    \ s1.characters.contains(\")\") ? \"No\" : \"Yes\"\n  }\n  if s1.characters.contains(\"\
    (\") && s2.characters.contains(\")\") {\n    // print(\"\\(s1) + \\(s2)\")\n \
    \   return match_parens(lst: [s1.replacingOccurrences(of: \"(\", with: \"\"),\n\
    \                              s2.replacingOccurrences(of: \")\", with: \"\")])\n\
    \  }\n  if s1.characters.contains(\")\") && s2.characters.contains(\"(\") {\n\
    \    // print(\"\\(s2) + \\(s1)\")\n    return match_parens(lst: [s2.replacingOccurrences(of:\
    \ \"(\", with: \"\"),\n                              s1.replacingOccurrences(of:\
    \ \")\", with: \"\")])\n  }\n  // print(\"\\(s1) - \\(s2)\")\n  return \"No\"",
  "    var sum = 0\n    for i in 0..<lst.count {\n        sum += check_parens(str:\
    \ lst[i])\n    }\n    return sum == 0 ? \"Yes\" : \"No\"", "    if lst.count !=\
    \ 2 {\n        return \"No\"\n    }\n    let first_string = lst[0], second_string\
    \ = lst[1]\n    if first_string.characters.count + second_string.characters.count\
    \ % 2 != 0 {\n        return \"No\"\n    }\n    var stack = [Character]()\n  \
    \  for character in first_string.characters {\n        if character == \"(\" {\n\
    \            stack.append(character)\n        } else {\n            if stack.isEmpty\
    \ {\n                stack.append(character)\n            } else {\n         \
    \       stack.removeLast()\n            }\n        }\n    }\n    for character\
    \ in second_string.characters {\n        if character == \"(\" {\n           \
    \ stack.append(character)\n        } else {\n            if stack.isEmpty {\n\
    \                stack.append(character)\n            } else {\n             \
    \   stack.removeLast()\n            }\n        }\n    }\n    if stack.isEmpty\
    \ {\n        return \"Yes\"\n    }\n    return \"No\"", "    let str1 = lst[0]\n\
    \    let str2 = lst[1]\n    if !isGood(str: str1) || !isGood(str: str2) {\n  \
    \      return \"No\"\n    }\n    if str1.count == 0 {\n        return isGood(str:\
    \ str2) ? \"Yes\" : \"No\"\n    }\n    if str2.count == 0 {\n        return isGood(str:\
    \ str1) ? \"Yes\" : \"No\"\n    }\n    if str1.count == 1 {\n        let last\
    \ = str1[str1.startIndex]\n        let s = str2 + String(last)\n        return\
    \ isGood(str: s) ? \"Yes\" : \"No\"\n    }\n    if str2.count == 1 {\n       \
    \ let last = str2[str2.startIndex]\n        let s = str1 + String(last)\n    \
    \    return isGood(str: s) ? \"Yes\" : \"No\"\n    }\n    let last1 = str1[str1.index(before:\
    \ str1.endIndex)]\n    let last2 = str2[str2.index(before: str2.endIndex)]\n \
    \   if last1 == \"(\" && last2 == \")\" {\n        let s1 = str1 + String(last2)\n\
    \        let s2 = str2 + String(last1)\n        return isGood(str: s1) || isGood(str:\
    \ s2) ? \"Yes\" : \"No\"\n    }\n    if last1 == \"(\" {\n        let s = str1\
    \ + String(last2)\n        return isGood(str: s) ? \"Yes\" : \"No\"\n    }\n \
    \   if last2 == \")\" {\n        let s = str2 + String(last1)\n        return\
    \ isGood(str: s) ? \"Yes\" : \"No\"\n    }\n    return \"No\"", "    var end =\
    \ 0\n    for str in lst {\n        for c in str {\n            if c == \"(\" {\n\
    \                end += 1\n            } else {\n                end -= 1\n  \
    \          }\n            if end < 0 {\n                return \"No\"\n      \
    \      }\n        }\n    }\n    return end == 0 ? \"Yes\" : \"No\"", "  let s1\
    \ = lst[0]\n  let s2 = lst[1]\n  let s1_arr = Array(s1)\n  let s2_arr = Array(s2)\n\
    \  var s1_open = 0\n  var s2_open = 0\n  for ch in s1_arr {\n    if ch == \"(\"\
    \ {\n      s1_open += 1\n    } else {\n      s1_open -= 1\n    }\n  }\n  for ch\
    \ in s2_arr {\n    if ch == \"(\" {\n      s2_open += 1\n    } else {\n      s2_open\
    \ -= 1\n    }\n  }\n  if s1_open > 0 && s2_open > 0 {\n    return \"No\"\n  }\
    \ else if s1_open < 0 && s2_open < 0 {\n    return \"No\"\n  } else {\n    return\
    \ \"Yes\"\n  }", "    var openCount = 0\n    var closeCount = 0\n    for item\
    \ in lst {\n        for char in item {\n            if char == \"(\" {\n     \
    \           openCount += 1\n            } else {\n                closeCount +=\
    \ 1\n            }\n        }\n    }\n    if openCount == closeCount {\n     \
    \   return \"Yes\"\n    } else {\n        return \"No\"\n    }", '  return ""',
  "    var openParens = 0\n    for parenthesis in lst.joined() {\n        if parenthesis\
    \ == \"(\" {\n            openParens += 1\n        } else {\n            openParens\
    \ -= 1\n        }\n        if openParens < 0 {\n            return \"No\"\n  \
    \      }\n    }\n    return openParens == 0 ? \"Yes\" : \"No\"", "    var stack\
    \ = Stack<Character>()\n    var output = \"Yes\"\n    var word = \"\"\n    for\
    \ w in lst {\n        word += w\n    }\n    print(word)\n    let char = Array(word)\n\
    \    for c in char {\n        if c == \"(\" {\n            stack.push(c)\n   \
    \     } else {\n            if stack.peek() == \"(\" {\n                stack.pop()\n\
    \            } else {\n                output = \"No\"\n            }\n      \
    \  }\n    }\n    if !stack.isEmpty() {\n        output = \"No\"\n    }\n    return\
    \ output", "    var count = 0\n    for char in lst[0] {\n        count += char\
    \ == \"(\" ? 1 : -1\n        if count < 0 {\n            return \"No\"\n     \
    \   }\n    }\n    count = 0\n    for char in lst[1] {\n        count += char ==\
    \ \")\" ? 1 : -1\n        if count < 0 {\n            return \"No\"\n        }\n\
    \    }\n    return count == 0 ? \"Yes\" : \"No\"", "    var tmp = lst.joined()\n\
    \    while tmp.contains(\"()\") {\n        tmp = tmp.replacingOccurrences(of:\
    \ \"()\", with: \"\")\n    }\n    return tmp.isEmpty ? \"Yes\" : \"No\"", "  \
    \  let s1 = lst[0]\n    let s2 = lst[1]\n    var s = s1 + s2\n    var tmp: Int\n\
    \    while true {\n        tmp = s.count\n        s = s.replacingOccurrences(of:\
    \ \"()\", with: \"\")\n        if tmp == s.count {\n            break\n      \
    \  }\n    }\n    return s.count == 0 ? \"Yes\" : \"No\"", "    var str1 = lst[0]\n\
    \    var str2 = lst[1]\n    var f1 = str1.filter{$0 == \"(\"}\n    var f2 = str2.filter{$0\
    \ == \"(\"}\n    var f3 = str1.filter{$0 == \")\"}\n    var f4 = str2.filter{$0\
    \ == \")\"}\n    if(f1.count == f3.count && f2.count == f4.count){\n        return\
    \ \"Yes\"\n    }\n    if(f1.count == f4.count && f2.count == f3.count){\n    \
    \    return \"Yes\"\n    }\n    return \"No\"", "    var str1 = lst[0]\n    var\
    \ str2 = lst[1]\n    var first_str = true\n    while !str1.isEmpty || !str2.isEmpty\
    \ {\n        let f = str1.first\n        let l = str2.last\n        if f == l\
    \ {\n            if f == \"(\" {\n                if first_str {\n           \
    \         str1.removeFirst()\n                } else {\n                    str2.removeLast()\n\
    \                }\n            } else {\n                return \"No\"\n    \
    \        }\n        } else {\n            if first_str {\n                str1.removeFirst()\n\
    \            } else {\n                str2.removeLast()\n            }\n    \
    \        first_str = !first_str\n        }\n    }\n    return \"Yes\"", "    let\
    \ (r0, r1) = (lst[0], lst[1])\n    let (r0l, r1l) = (r0.count, r1.count)\n   \
    \ var matches = Array(repeating: 0, count: r0l + r1l)\n    var s = 0\n    var\
    \ m = 0\n    for i in 0..<r0l {\n        if r0[i] == \"(\" {\n            s +=\
    \ 1\n        } else {\n            s -= 1\n        }\n        matches[i] = s\n\
    \    }\n    for i in 0..<r1l {\n        let j = r0l + i\n        if r1[i] == \"\
    (\" {\n            s += 1\n        } else {\n            s -= 1\n        }\n \
    \       matches[j] = s\n        if s == 0 {\n            m += 1\n        }\n \
    \   }\n    if m == 0 {\n        return \"No\"\n    }\n    for i in 0..<r0l {\n\
    \        let j = r0l + i\n        if matches[i] < 0 || matches[j] > 0 {\n    \
    \        continue\n        }\n        if matches[i] == 0 && matches[j] == 0 {\n\
    \            return \"Yes\"\n        }\n        if matches[i] + matches[j] ==\
    \ 0 {\n            return \"Yes\"\n        }\n    }\n    return \"No\"", "   \
    \ var count = 0\n    var result = \"Yes\"\n    lst.joined().forEach {\n      \
    \  if $0 == \"(\" {\n            count += 1\n        } else {\n            count\
    \ -= 1\n        }\n        if count < 0 {\n            result = \"No\"\n     \
    \   }\n    }\n    return result", "    var stack = [Character]()\n    for i in\
    \ 0..<lst.count {\n        for c in lst[i] {\n            if c == \"(\" {\n  \
    \              stack.append(c)\n            } else {\n                if stack.count\
    \ == 0 {\n                    return \"No\"\n                }\n             \
    \   let curr = stack.removeLast()\n                if curr != \"(\" {\n      \
    \              return \"No\"\n                }\n            }\n        }\n  \
    \  }\n    return \"Yes\"", "    var s1 = lst[0]\n    var s2 = lst[1]\n    for\
    \ _ in 0..<2 {\n        let temp = s1 + s2\n        if temp.is_good() {\n    \
    \        return \"Yes\"\n        }\n        s1 = temp.remove_end(amount: 1)\n\
    \        s2 = temp.remove_start(amount: 1)\n    }\n    return \"No\"", "    let\
    \ cnt1 = count_parens(str: lst[0])\n    let cnt2 = count_parens(str: lst[1])\n\
    \    return cnt1 % 2 == cnt2 % 2 ? \"Yes\" : \"No\"", "  var result = \"Yes\"\n\
    \  let first = lst[0]\n  let second = lst[1]\n  let offset = second.startIndex\n\
    \  var opens = 0\n  var closes = 0\n  for char in first {\n    if char == \"(\"\
    \ {\n      opens += 1\n    } else {\n      closes += 1\n    }\n  }\n  for char\
    \ in second {\n    if char == \"(\" {\n      opens += 1\n    } else {\n      closes\
    \ += 1\n    }\n  }\n  if opens == closes {\n    var new = [String]()\n    var\
    \ newStr = \"\"\n    for char in first {\n      newStr += String(char)\n    }\n\
    \    new.append(newStr)\n    newStr = \"\"\n    for char in second {\n      newStr\
    \ += String(char)\n    }\n    new.append(newStr)\n    if !check_balanced(lst:\
    \ new) {\n      result = \"No\"\n    }\n  } else {\n    result = \"No\"\n  }\n\
    \  return result", "    var par_count = 0\n    for c in lst[0] {\n        if c\
    \ == \"(\" {\n            par_count += 1\n        } else {\n            par_count\
    \ -= 1\n        }\n    }\n    for c in lst[1] {\n        if c == \"(\" {\n   \
    \         par_count += 1\n        } else {\n            par_count -= 1\n     \
    \   }\n    }\n    return par_count == 0 ? \"Yes\" : \"No\"", '    return "No"',
  "    var s = lst[0] + lst[1]\n    while true {\n        let ch1 = s.index(s.startIndex,\
    \ offsetBy: 0)\n        let ch2 = s.index(s.startIndex, offsetBy: 1)\n       \
    \ if s[ch1] == \")\" && s[ch2] == \"(\" {\n            s.remove(at: ch1)\n   \
    \         s.remove(at: ch2)\n        } else {\n            break\n        }\n\
    \    }\n    if s.count == 0 {\n        return \"Yes\"\n    } else {\n        return\
    \ \"No\"\n    }", "    var open = 0\n    var close = 0\n    var i = 0\n    while\
    \ (i < lst[0].count) {\n        if (lst[0][i] == \"(\") {\n            open +=\
    \ 1\n        } else {\n            close += 1\n        }\n        i += 1\n   \
    \ }\n    if (open == close) {\n        i = 0\n        while (i < lst[1].count)\
    \ {\n            if (lst[1][i] == \"(\") {\n                open += 1\n      \
    \      } else {\n                close += 1\n            }\n            i += 1\n\
    \        }\n        if (open == close) {\n            return \"Yes\"\n       \
    \ }\n    }\n    return \"No\"", "    var leftParens = 0\n    var rightParens =\
    \ 0\n    for char in lst[0] {\n        if char == \"(\" {\n            leftParens\
    \ += 1\n        } else {\n            rightParens += 1\n        }\n    }\n   \
    \ for char in lst[1] {\n        if char == \"(\" {\n            leftParens +=\
    \ 1\n        } else {\n            rightParens += 1\n        }\n    }\n    if\
    \ leftParens == rightParens {\n        return \"Yes\"\n    }\n    return \"No\"",
  "    if lst.count != 2 {\n        return \"Invalid input\"\n    }\n    var lst =\
    \ lst\n    let l1 = lst[0]\n    let l2 = lst[1]\n    let s = l1 + l2\n    var\
    \ stack = [Character]()\n    for c in s {\n        if c == \"(\" {\n         \
    \   stack.append(c)\n        } else {\n            if stack.count == 0 {\n   \
    \             return \"No\"\n            }\n            let p = stack.popLast()!\n\
    \            if p != \"(\" {\n                return \"No\"\n            }\n \
    \       }\n    }\n    if stack.count == 0 {\n        return \"Yes\"\n    }\n \
    \   return \"No\"", "    var unmatched = 0\n    for ch in lst[0] {\n        if\
    \ ch == \"(\" {\n            unmatched += 1\n        } else {\n            unmatched\
    \ -= 1\n        }\n    }\n    for ch in lst[1] {\n        if ch == \"(\" {\n \
    \           unmatched += 1\n        } else {\n            unmatched -= 1\n   \
    \     }\n    }\n    return unmatched == 0 ? \"Yes\" : \"No\"", "    // Don't allow\
    \ empty strings, and non-parenthesis characters\n    if lst.contains(where: {\
    \ $0.isEmpty || !$0.contains(only: \"(\", \")\") }) {\n        return \"No\"\n\
    \    }\n    // Iterate through the list of strings, concatenating and checking\
    \ for balance\n    var balanced = true\n    for str in lst {\n        balanced\
    \ = balanced && str.is_balanced()\n    }\n    return balanced ? \"Yes\" : \"No\"",
  "    var ans = \"\"\n    let str1 = lst[0]\n    let str2 = lst[1]\n    var left_parenthesis\
    \ = 0\n    var right_parenthesis = 0\n    for i in str1 {\n        if i == \"\
    (\" {\n            left_parenthesis += 1\n        } else {\n            right_parenthesis\
    \ += 1\n        }\n    }\n    for i in str2 {\n        if i == \"(\" {\n     \
    \       left_parenthesis += 1\n        } else {\n            right_parenthesis\
    \ += 1\n        }\n    }\n    if left_parenthesis == right_parenthesis {\n   \
    \     ans = \"Yes\"\n    } else {\n        ans = \"No\"\n    }\n    return ans",
  "    var lst1 = lst[0]\n    var lst2 = lst[1]\n    var net_balance = 0\n    for\
    \ char in lst1 {\n        net_balance += char == \"(\" ? 1 : -1\n    }\n    for\
    \ char in lst2 {\n        net_balance += char == \"(\" ? 1 : -1\n    }\n    if\
    \ net_balance != 0 {\n        return \"No\"\n    }\n    var lst1_balance = 0\n\
    \    for char in lst1 {\n        lst1_balance += char == \"(\" ? 1 : -1\n    \
    \    if lst1_balance < 0 {\n            return \"No\"\n        }\n    }\n    if\
    \ lst1_balance == 0 {\n        return \"Yes\"\n    }\n    var lst2_balance = 0\n\
    \    for char in lst2 {\n        lst2_balance += char == \"(\" ? 1 : -1\n    \
    \    if lst2_balance > 0 {\n            return \"No\"\n        }\n    }\n    return\
    \ \"Yes\"", "    var str_lst = lst\n    var yes_stack = [String]()\n    var no_stack\
    \ = [String]()\n    for str in str_lst {\n        for char in str {\n        \
    \    if char == \"(\" {\n                yes_stack.append(String(char))\n    \
    \        } else {\n                if yes_stack.count > 0 {\n                \
    \    yes_stack.removeLast()\n                } else {\n                    no_stack.append(String(char))\n\
    \                }\n            }\n        }\n    }\n    if no_stack.count > 0\
    \ || yes_stack.count > 0 {\n        return \"No\"\n    } else {\n        return\
    \ \"Yes\"\n    }", '    return solution(lst)', "    var openCount = 0\n    var\
    \ closeCount = 0\n    for chars in lst[0] {\n        if chars == \"(\" {\n   \
    \         openCount += 1\n        } else {\n            closeCount += 1\n    \
    \    }\n    }\n    for chars in lst[1] {\n        if chars == \"(\" {\n      \
    \      openCount += 1\n        } else {\n            closeCount += 1\n       \
    \ }\n    }\n    if closeCount == openCount {\n        return \"Yes\"\n    } else\
    \ {\n        return \"No\"\n    }", '    return (lst[0] + lst[1]).isBalanced()
    ? "Yes" : "No"', "    let s1 = lst[0]\n    let s2 = lst[1]\n    return is_good(s:\
    \ s1 + s2) ? \"Yes\" : \"No\"", "    var stack = [Character]()\n    var str =\
    \ lst[0] + lst[1]\n    for char in str {\n        if char == \"(\" {\n       \
    \     stack.append(char)\n        } else {\n            if stack.count > 0 {\n\
    \                stack.removeLast()\n            } else {\n                return\
    \ \"No\"\n            }\n        }\n    }\n    return stack.count == 0 ? \"Yes\"\
    \ : \"No\"", "    let str1 = lst[0]\n    let str2 = lst[1]\n    let leftBrackets\
    \ = \"(\".characters.first!\n    let rightBrackets = \")\".characters.first!\n\
    \    if str1.characters.filter({$0 == leftBrackets}).count >\n        str2.characters.filter({$0\
    \ == rightBrackets}).count {\n        return \"No\"\n    }\n    if str1.characters.filter({$0\
    \ == rightBrackets}).count >\n        str2.characters.filter({$0 == leftBrackets}).count\
    \ {\n        return \"No\"\n    }\n    let resultStr = str1 + str2\n    if check_parens(str:\
    \ resultStr) {\n        return \"Yes\"\n    }\n    return \"No\"", "  let s =\
    \ lst[0] + lst[1]\n  var open = 0\n  for c in s {\n    if c == \"(\" {\n     \
    \ open += 1\n    } else {\n      open -= 1\n    }\n    if open < 0 {\n      return\
    \ \"No\"\n    }\n  }\n  return open == 0 ? \"Yes\" : \"No\"", "  var parens =\
    \ lst.joined()\n  while parens.contains(\"()\") {\n    parens = parens.replacingOccurrences(of:\
    \ \"()\", with: \"\")\n  }\n  return parens.isEmpty ? \"Yes\" : \"No\"", "   \
    \ let set = Array(lst.joined())\n    var stack = [Character]()\n    for (_, char)\
    \ in set.enumerated() {\n        if char == \"(\" {\n            stack.append(char)\n\
    \        } else {\n            if stack.isEmpty {\n                return \"No\"\
    \n            } else {\n                stack.removeLast()\n            }\n  \
    \      }\n    }\n    return stack.isEmpty ? \"Yes\" : \"No\"", "    // 0. Initialize\
    \ variables\n    let open_parens: Set<Character> = [\"(\", \")\"]\n    var stack\
    \ = [Character]()\n    var result = \"Yes\"\n    \n    // 1. Check that each string\
    \ only contains open or close parentheses\n    for string in lst {\n        let\
    \ chars = string.sorted()\n        if !open_parens.isSuperset(of: chars) {\n \
    \           return \"No\"\n        }\n    }\n    \n    // 2. Concatenate strings,\
    \ iterate through result, push open parentheses\n    // to stack, remove if closed\
    \ parentheses is found\n    var concat = lst[0] + lst[1]\n    for c in concat\
    \ {\n        if c == \"(\" {\n            stack.append(c)\n        } else {\n\
    \            if !stack.isEmpty {\n                stack.removeLast()\n       \
    \     } else {\n                result = \"No\"\n                break\n     \
    \       }\n        }\n    }\n    \n    // 3. Return result\n    return result",
  "    let s1 = lst[0], s2 = lst[1]\n    var s = Array(s1 + s2)\n    var stack = [Int]()\n\
    \    for i in 0..<s.count {\n        if s[i] == \"(\" {\n            stack.append(i)\n\
    \        } else {\n            if stack.isEmpty {\n                return \"No\"\
    \n            }\n            if (s[stack.last!] == \"(\" && s[i] == \")\") {\n\
    \                stack.removeLast()\n            }\n        }\n    }\n    return\
    \ stack.isEmpty ? \"Yes\" : \"No\"", "  let left = lst[0]\n  let right = lst[1]\n\
    \  var count = 0\n  for c in left {\n    if c == \"(\" {\n      count += 1\n \
    \   } else {\n      count -= 1\n    }\n  }\n  for c in right {\n    if c == \"\
    (\" {\n      count += 1\n    } else {\n      count -= 1\n    }\n  }\n  if count\
    \ >= 0 {\n    return \"Yes\"\n  }\n  return \"No\"", "    if lst.count < 2 {\n\
    \        return \"No\"\n    }\n    let s1 = lst[0]\n    let s2 = lst[1]\n    if\
    \ bad(s1) || bad(s2) {\n        return \"No\"\n    }\n    if good(s1) && good(s2)\
    \ {\n        return \"Yes\"\n    }\n    if good(s1) && s2.contains(\"(\") {\n\
    \        return \"Yes\"\n    }\n    if good(s2) && s1.contains(\")\") {\n    \
    \    return \"Yes\"\n    }\n    return \"No\"", "    let left = lst[0].components(separatedBy:\
    \ \"(\").count\n    let right = lst[0].components(separatedBy: \")\").count\n\
    \    let left_two = lst[1].components(separatedBy: \"(\").count\n    let right_two\
    \ = lst[1].components(separatedBy: \")\").count\n    if left > right && left_two\
    \ > right_two || left == right && left_two == right_two {\n        return \"Yes\"\
    \n    }\n    return \"No\"", "  let str = lst.joined()\n  var leftParens = 0\n\
    \  var rightParens = 0\n  for i in 0..<str.count {\n    let char = str[str.index(str.startIndex,\
    \ offsetBy: i)]\n    if char == \"(\" {\n      leftParens += 1\n    } else {\n\
    \      rightParens += 1\n    }\n    if rightParens > leftParens {\n      return\
    \ \"No\"\n    }\n  }\n  return leftParens == rightParens ? \"Yes\" : \"No\"",
  "    var str_1 = lst[0]\n    var str_2 = lst[1]\n    if str_1.count > str_2.count\
    \ {\n        str_1 = lst[1]\n        str_2 = lst[0]\n    }\n    if str_1.contains(\"\
    (\") && str_2.contains(\")\") {\n        return \"Yes\"\n    }\n    if str_1.contains(\"\
    )\") && str_2.contains(\"(\") {\n        return \"Yes\"\n    }\n    if str_1.contains(\"\
    (\") && str_2.contains(\"(\") {\n        return \"Yes\"\n    }\n    if str_1.contains(\"\
    )\") && str_2.contains(\")\") {\n        return \"Yes\"\n    }\n    return \"\
    No\"", "    var count = 0\n    for s in lst {\n        for c in s {\n        \
    \    if c == \"(\" {\n                count += 1\n            } else {\n     \
    \           count -= 1\n            }\n            if count < 0 {\n          \
    \      return \"No\"\n            }\n        }\n    }\n    return count == 0 ?\
    \ \"Yes\" : \"No\"", "    var stk = [Character]()\n    var str1 = lst[0]\n   \
    \ var str2 = lst[1]\n    for c in str1 {\n        if c == \"(\" {\n          \
    \  stk.append(c)\n        } else {\n            if stk.isEmpty {\n           \
    \     stk.append(c)\n            } else {\n                stk.popLast()\n   \
    \         }\n        }\n    }\n    for c in str2 {\n        if c == \"(\" {\n\
    \            stk.append(c)\n        } else {\n            if stk.isEmpty {\n \
    \               stk.append(c)\n            } else {\n                stk.popLast()\n\
    \            }\n        }\n    }\n    if stk.isEmpty {\n        return \"Yes\"\
    \n    } else {\n        return \"No\"\n    }", "    var lst = lst\n    lst[0].append(lst[1])\n\
    \    var stack = [Character]()\n    for c in lst[0] {\n        if c == \"(\" {\n\
    \            stack.append(c)\n        } else {\n            if stack.isEmpty {\n\
    \                return \"No\"\n            } else {\n                stack.removeLast()\n\
    \            }\n        }\n    }\n    return stack.isEmpty ? \"Yes\" : \"No\"",
  "    let open = lst[0].components(separatedBy: \"(\").count\n    let close = lst[0].components(separatedBy:\
    \ \")\").count\n    if lst[1] == \")\" {\n        if close > 0 {\n           \
    \ return \"Yes\"\n        } else {\n            return \"No\"\n        }\n   \
    \ } else {\n        if open > 0 {\n            return \"Yes\"\n        } else\
    \ {\n            return \"No\"\n        }\n    }", "    // first, get the total\
    \ number of parentheses and build a string of all the\n    // parentheses\n  \
    \  let total_parens = lst.reduce(0) { $0 + $1.count }\n    var parens = \"\"\n\
    \    for string in lst {\n        parens += string\n    }\n    // if the total\
    \ number of parentheses is odd, then we cannot make the string\n    // balanced\n\
    \    if total_parens % 2 == 1 {\n        return \"No\"\n    }\n    // now we iterate\
    \ through the string, tallying the number of opening\n    // parentheses we've\
    \ seen vs the number of closing parentheses we've seen\n    var open_parens =\
    \ 0\n    var close_parens = 0\n    for paren in parens {\n        if paren ==\
    \ \"(\" {\n            open_parens += 1\n        } else {\n            close_parens\
    \ += 1\n        }\n        // if the number of closing parentheses we've seen\
    \ so far is more than\n        // the number of opening parentheses we've seen\
    \ so far, then we cannot\n        // make a balanced string\n        if close_parens\
    \ > open_parens {\n            return \"No\"\n        }\n    }\n    // by this\
    \ point, we are guaranteed that the number of open parentheses is\n    // greater\
    \ than or equal to the number of closing parentheses, so if those\n    // numbers\
    \ are equal, we have a balanced string\n    if open_parens == close_parens {\n\
    \        return \"Yes\"\n    }\n    // by this point, we've seen more opening\
    \ parentheses than closing\n    // parentheses. if the number of extra opening\
    \ parentheses is equal to the\n    // number of remaining closing parentheses,\
    \ then we can make a balanced\n    // string.\n    if open_parens - close_parens\
    \ == parens.count - total_parens {\n        return \"Yes\"\n    }\n    // by this\
    \ point, the number of opening parentheses is greater than the\n    // number\
    \ of closing parentheses, but the number of extra opening\n    // parentheses\
    \ is not equal to the number of remaining closing parentheses.\n    // this means\
    \ that we cannot make a balanced string\n    return \"No\"", "    var open = 0\n\
    \    var close = 0\n    for c in lst[0] {\n        if c == \"(\" {\n         \
    \   open += 1\n        } else {\n            close += 1\n        }\n    }\n  \
    \  for c in lst[1] {\n        if c == \"(\" {\n            open += 1\n       \
    \ } else {\n            close += 1\n        }\n    }\n    return open == close\
    \ ? \"Yes\" : \"No\"", "    let s = lst[0] + lst[1]\n    var stack = Stack<Character>()\n\
    \    for c in s {\n        if c == \"(\" {\n            stack.push(c)\n      \
    \  } else {\n            if stack.isEmpty() {\n                return \"No\"\n\
    \            }\n            stack.pop()\n        }\n    }\n    return stack.isEmpty()\
    \ ? \"Yes\" : \"No\"", "    let (s1, s2) = (lst[0], lst[1])\n    let good1 = is_good(string:\
    \ s1)\n    let good2 = is_good(string: s2)\n    return good1 && good2 ? \"Yes\"\
    \ : \"No\"", '    return is_valid(s: lst[0] + lst[1]) ? "Yes" : "No"', "    var\
    \ leftCounter = 0\n    var rightCounter = 0\n    for str in lst {\n        for\
    \ char in str {\n            if char == \"(\" {\n                leftCounter +=\
    \ 1\n            } else {\n                rightCounter += 1\n            }\n\
    \        }\n    }\n    if leftCounter == rightCounter {\n        return \"Yes\"\
    \n    }\n    return \"No\"", "    var left = [Character]()\n    var right = [Character]()\n\
    \    for ch in lst[0] {\n        if ch == \"(\" {\n            left.append(ch)\n\
    \        } else {\n            if left.isEmpty {\n                return \"No\"\
    \n            }\n            left.removeLast()\n        }\n    }\n    for ch in\
    \ lst[1] {\n        if ch == \")\" {\n            right.append(ch)\n        }\
    \ else {\n            if right.isEmpty {\n                return \"No\"\n    \
    \        }\n            right.removeLast()\n        }\n    }\n    if left.count\
    \ == right.count {\n        return \"Yes\"\n    }\n    return \"No\"", "    var\
    \ counter: Int = 0\n    for str in lst {\n        for char in str {\n        \
    \    if char == \"(\" {\n                counter += 1\n            } else {\n\
    \                counter -= 1\n            }\n            if counter < 0 {\n \
    \               return \"No\"\n            }\n        }\n    }\n    return counter\
    \ == 0 ? \"Yes\" : \"No\"", "    // + 1 for additional right parenthesis\n   \
    \ let total_r_par: Int = lst.reduce(0) { $0 + $1.count } + 1\n    // number of\
    \ left parentheses in the first string\n    let l_par: Int = lst[0].count\n  \
    \  // number of right parentheses in the second string\n    let r_par: Int = lst[1].count\n\
    \    // number of necessary right parentheses\n    let necessary_r_par: Int =\
    \ 2 * l_par\n    // if there is at least one right parenthesis in the second string\n\
    \    // or the number of right parentheses is enough to cover all\n    // the\
    \ left parentheses\n    return (r_par > 0 || total_r_par >= necessary_r_par) ?\
    \ \"Yes\" : \"No\"", "    var lst = lst\n    for i in 0..<lst.count {\n      \
    \  lst[i] = lst[i].replacingOccurrences(of: \"(\", with: \"+\")\n        lst[i]\
    \ = lst[i].replacingOccurrences(of: \")\", with: \"-\")\n    }\n    let sum =\
    \ lst.joined().split(separator: \"+\").reduce(0) { $0 + $1.count }\n    let min\
    \ = lst.joined().split(separator: \"-\").reduce(0) { $0 + $1.count }\n    return\
    \ sum == min ? \"Yes\" : \"No\"", "    var stack = Stack<Character>()\n    for\
    \ s in lst {\n        for char in s {\n            if char == \"(\" {\n      \
    \          stack.push(element: char)\n            } else {\n                if\
    \ !stack.isEmpty {\n                    stack.pop()\n                } else {\n\
    \                    return \"No\"\n                }\n            }\n       \
    \ }\n    }\n    return stack.isEmpty ? \"Yes\" : \"No\"", "    let str1 = lst[0]\n\
    \    let str2 = lst[1]\n    let str1_bad = str1.contains(\"(\") && str2.contains(\"\
    )\")\n    let str2_bad = str2.contains(\"(\") && str1.contains(\")\")\n    let\
    \ match = !str1_bad && !str2_bad\n    return match ? \"Yes\" : \"No\"", "    var\
    \ lhs = 0\n    var rhs = 0\n    for letter in lst[0] {\n        if letter == \"\
    (\" {\n            lhs += 1\n        } else {\n            rhs += 1\n        }\n\
    \    }\n    for letter in lst[1] {\n        if letter == \"(\" {\n           \
    \ lhs += 1\n        } else {\n            rhs += 1\n        }\n    }\n    return\
    \ (lhs == rhs) ? \"Yes\" : \"No\"", "    let l1 = lst[0]\n    let l2 = lst[1]\n\
    \    let c1 = count_parens(l1)\n    let c2 = count_parens(l2)\n    if c1[0] ==\
    \ c2[0] && c1[1] == c2[1] {\n        return \"Yes\"\n    }\n    return \"No\"",
  "    var count = 0\n    for i in lst[0] {\n        if i == \"(\" {\n           \
    \ count += 1\n        } else {\n            count -= 1\n        }\n    }\n   \
    \ for i in lst[1] {\n        if i == \"(\" {\n            count += 1\n       \
    \ } else {\n            count -= 1\n        }\n    }\n    if count == 0 {\n  \
    \      return \"Yes\"\n    } else {\n        return \"No\"\n    }", "    var lhs:\
    \ [Character] = [Character]()\n    var rhs: [Character] = [Character]()\n    lhs.append(contentsOf:\
    \ lst[0])\n    rhs.append(contentsOf: lst[1])\n    var lhs_open: Int = 0\n   \
    \ var rhs_open: Int = 0\n    for character in lhs {\n        if character == \"\
    (\" {\n            lhs_open += 1\n        } else {\n            lhs_open -= 1\n\
    \        }\n    }\n    for character in rhs {\n        if character == \"(\" {\n\
    \            rhs_open += 1\n        } else {\n            rhs_open -= 1\n    \
    \    }\n    }\n    if lhs_open > 0 && rhs_open < 0 {\n        return \"Yes\"\n\
    \    } else if lhs_open < 0 && rhs_open > 0 {\n        return \"Yes\"\n    } else\
    \ {\n        return \"No\"\n    }", "    let str = lst[0] + lst[1]\n    var stack\
    \ = [Character]()\n    for c in str {\n        if c == \"(\" {\n            stack.append(c)\n\
    \        } else {\n            if stack.isEmpty {\n                return \"No\"\
    \n            }\n            stack.removeLast()\n        }\n    }\n    return\
    \ stack.isEmpty ? \"Yes\" : \"No\"", '    return ""', "    var stack = [String]()\n\
    \    var correct = true\n    for i in 0..<lst.count {\n        for j in 0..<lst[i].count\
    \ {\n            if lst[i][j] == \"(\" {\n                stack.append(\"(\")\n\
    \            } else {\n                if stack.isEmpty {\n                  \
    \  correct = false\n                    break\n                } else {\n    \
    \                stack.removeLast()\n                }\n            }\n      \
    \  }\n    }\n    if !stack.isEmpty {\n        correct = false\n    }\n    if correct\
    \ {\n        return \"Yes\"\n    } else {\n        return \"No\"\n    }", "  \
    \  let balanced = String(repeating: \"(\", count: lst[0].count + lst[1].count)\n\
    \    for i in 0..<lst[0].count {\n        let str = lst[0].prefix(upTo: lst[0].index(lst[0].startIndex,\
    \ offsetBy: i)) + lst[1]\n        if str == balanced {\n            return \"\
    Yes\"\n        }\n    }\n    return \"No\"", "    let s1 = lst[0]\n    let s2\
    \ = lst[1]\n    let s = s1 + s2\n    var count = 0\n    for char in s {\n    \
    \    if char == \"(\" {\n            count += 1\n        } else {\n          \
    \  count -= 1\n        }\n        if count < 0 {\n            return \"No\"\n\
    \        }\n    }\n    return count == 0 ? \"Yes\" : \"No\"", "    var par_count\
    \ = 0\n    var result = \"\"\n    for i in 0..<2 {\n        for c in lst[i] {\n\
    \            if c == \"(\" {\n                par_count += 1\n            } else\
    \ {\n                par_count -= 1\n            }\n            if par_count <\
    \ 0 {\n                break\n            }\n        }\n        if par_count <\
    \ 0 {\n            break\n        }\n    }\n    if par_count < 0 {\n        result\
    \ = \"No\"\n    } else {\n        result = \"Yes\"\n    }\n    return result",
  "    var first = lst[0]\n    var second = lst[1]\n    if first.count > second.count\
    \ {\n        return \"No\"\n    } else if first.count < second.count {\n     \
    \   second.remove(at: second.startIndex)\n        second.remove(at: second.startIndex)\n\
    \        return match_parens(lst: [first, second])\n    } else {\n        return\
    \ \"Yes\"\n    }", '    return lst.reduce("") { $0 + $1 }.is_parens_balanced()
    ? "Yes" : "No"', "    let left: String = lst[0]\n    let right: String = lst[1]\n\
    \    var res: String = \"\"\n    var arr = [Int]()\n    let left_array = Array(left)\n\
    \    let right_array = Array(right)\n    for c in left_array {\n        if (c\
    \ == \"(\") {\n            arr.append(1)\n        } else {\n            arr.append(-1)\n\
    \        }\n    }\n    for c in right_array {\n        if (c == \"(\") {\n   \
    \         arr.append(1)\n        } else {\n            arr.append(-1)\n      \
    \  }\n    }\n    if (arr.reduce(0, +) == 0) {\n        res = \"Yes\"\n    } else\
    \ {\n        res = \"No\"\n    }\n    return res", "    var dic = [Character:\
    \ Int]()\n    dic[\"(\"] = 1\n    dic[\")\"] = -1\n    var str = lst[0] + lst[1]\n\
    \    var sum = 0\n    for c in str {\n        sum += dic[c]!\n        if sum <\
    \ 0 {\n            return \"No\"\n        }\n    }\n    return sum == 0 ? \"Yes\"\
    \ : \"No\"", '    return lst.joined().parens_balanced() ? "Yes" : "No"', "   \
    \ let string_good = \"Yes\"\n    let string_bad = \"No\"\n    let str1 = lst[0]\n\
    \    let str2 = lst[1]\n    if !is_good(str: str1) && !is_good(str: str2) {\n\
    \        return string_bad\n    }\n    var parenthesis_stack = [String]()\n  \
    \  for c in str1 {\n        parenthesis_stack.append(String(c))\n    }\n    var\
    \ cnt = 0\n    for c in str2 {\n        if String(c) == \"(\" {\n            parenthesis_stack.append(String(c))\n\
    \        } else {\n            if parenthesis_stack.count == 0 {\n           \
    \     return string_bad\n            }\n            if parenthesis_stack.last\
    \ == \"(\" {\n                parenthesis_stack.removeLast()\n            } else\
    \ {\n                parenthesis_stack.append(String(c))\n            }\n    \
    \    }\n        cnt += 1\n    }\n    if is_good(str: parenthesis_stack.joined())\
    \ {\n        return string_good\n    }\n    return string_bad", "    var balance:\
    \ Int = 0\n    var result: String = \"Yes\"\n    for c in lst[0] {\n        if\
    \ c == \"(\" {\n            balance += 1\n        } else {\n            balance\
    \ -= 1\n        }\n        if balance < 0 {\n            result = \"No\"\n   \
    \         break\n        }\n    }\n    for c in lst[1] {\n        if c == \"(\"\
    \ {\n            balance += 1\n        } else {\n            balance -= 1\n  \
    \      }\n        if balance < 0 {\n            result = \"No\"\n            break\n\
    \        }\n    }\n    if balance != 0 {\n        result = \"No\"\n    }\n   \
    \ return result", "    let item1 = lst[0].components(separatedBy: \"(\").count\
    \ - 1\n    let item2 = lst[1].components(separatedBy: \")\").count - 1\n    if\
    \ item1 == item2 {\n        return \"Yes\"\n    }\n    return \"No\"", "    var\
    \ str1 = lst[0]\n    var str2 = lst[1]\n    var is_bad = false\n    while !is_bad\
    \ && !str1.isEmpty && !str2.isEmpty {\n        if str1.last! == \"(\" && str2.first!\
    \ == \")\" {\n            str1.removeLast()\n            str2.removeFirst()\n\
    \        } else if str1.last! == \")\" && str2.first! == \"(\" {\n           \
    \ str1.removeLast()\n            str2.removeFirst()\n        } else if str1.last!\
    \ == \"(\" && str2.first! == \"(\" {\n            str1.removeLast()\n        \
    \    str2.removeFirst()\n        } else if str1.last! == \")\" && str2.first!\
    \ == \")\" {\n            str1.removeLast()\n            str2.removeFirst()\n\
    \        } else {\n            is_bad = true\n        }\n    }\n    return is_bad\
    \ ? \"No\" : \"Yes\"", "  var lhs = 0\n  var rhs = 0\n  for i in lst[0] {\n  \
    \  if i == \"(\" {\n      lhs += 1\n    } else {\n      lhs -= 1\n    }\n  }\n\
    \  for i in lst[1] {\n    if i == \"(\" {\n      rhs += 1\n    } else {\n    \
    \  rhs -= 1\n    }\n  }\n  let result = lhs + rhs\n  if result == 0 {\n    return\
    \ \"Yes\"\n  } else {\n    return \"No\"\n  }", "    let str1 = lst[0]\n    let\
    \ str2 = lst[1]\n    return is_good(str: str1 + str2) || is_good(str: str2 + str1)\
    \ ? \"Yes\" : \"No\"", "    var total_parens = 0\n    var index = 0\n    var s\
    \ = \"\"\n    for _ in 0...1 {\n        for paren in lst[index] {\n          \
    \  if paren == \"(\" {\n                total_parens += 1\n            } else\
    \ {\n                total_parens -= 1\n            }\n            if total_parens\
    \ < 0 {\n                s = \"No\"\n                break\n            }\n  \
    \      }\n        if total_parens == 0 {\n            s = \"Yes\"\n        }\n\
    \        index += 1\n    }\n    return s", "    var l = lst[0]\n    var r = lst[1]\n\
    \    if l.starts(with: \")\") && r.starts(with: \")\") {\n        return \"No\"\
    \n    }\n    let balanced = balance(string: l + r)\n    if balanced.isEmpty {\n\
    \        return \"Yes\"\n    }\n    let balanced_left = balance(string: l)\n \
    \   let balanced_right = balance(string: r)\n    if balanced_left.isEmpty && balanced_right.isEmpty\
    \ {\n        return \"Yes\"\n    }\n    return \"No\"", "    var s = lst[0] +\
    \ lst[1]\n    for _ in 0...s.count {\n        s = s.replacingOccurrences(of: \"\
    ()\", with: \"\")\n    }\n    return s.isEmpty ? \"Yes\" : \"No\"", "    let n1\
    \ = lst[0].count\n    let n2 = lst[1].count\n    var count1 = 0\n    var count2\
    \ = 0\n    var count3 = 0\n    var count4 = 0\n    var total = 0\n    for c in\
    \ lst[0] {\n        if c == \"(\" {\n            count1 += 1\n        } else {\n\
    \            count2 += 1\n        }\n    }\n    for c in lst[1] {\n        if\
    \ c == \"(\" {\n            count3 += 1\n        } else {\n            count4\
    \ += 1\n        }\n    }\n    total = count1 + count3\n    if total % 2 == 0 {\n\
    \        if count2 == 0 && count4 == 0 {\n            return \"Yes\"\n       \
    \ } else if count2 == count4 {\n            return \"Yes\"\n        } else {\n\
    \            return \"No\"\n        }\n    } else {\n        return \"No\"\n \
    \   }", "    let matchingString = lst.reduce(\"\", +)\n    var openCount = 0\n\
    \    var closeCount = 0\n    matchingString.forEach {\n        if $0 == \"(\"\
    \ {\n            openCount += 1\n        } else {\n            closeCount += 1\n\
    \        }\n    }\n    if (openCount + closeCount) % 2 != 0 {\n        return\
    \ \"No\"\n    }\n    if openCount == closeCount {\n        return \"Yes\"\n  \
    \  }\n    return \"No\"", "    let lst = lst.joined()\n    var cnt = 0\n    for\
    \ c in lst {\n        if c == \"(\" {\n            cnt += 1\n        } else {\n\
    \            cnt -= 1\n        }\n        if cnt < 0 {\n            return \"\
    No\"\n        }\n    }\n    return cnt == 0 ? \"Yes\" : \"No\"", "    let s1 =\
    \ lst[0]\n    let s2 = lst[1]\n    return check(s1: s1, s2: s2) ? \"Yes\" : \"\
    No\"", '  return "Yes"', "    let str = lst[0] + lst[1]\n    let exp = try! NSRegularExpression(pattern:\
    \ \"\\\\(\\\\)\", options: [])\n    var matches = exp.matches(in: str, options:\
    \ [], range: NSRange(location: 0, length: str.count))\n    while !matches.isEmpty\
    \ {\n        let match = matches.removeLast()\n        str.replacingCharacters(in:\
    \ Range(match.range, in: str)!, with: \"\")\n        matches = exp.matches(in:\
    \ str, options: [], range: NSRange(location: 0, length: str.count))\n    }\n \
    \   let exp2 = try! NSRegularExpression(pattern: \"\\\\(|\\\\)\", options: [])\n\
    \    let matches2 = exp2.matches(in: str, options: [], range: NSRange(location:\
    \ 0, length: str.count))\n    return matches2.isEmpty ? \"Yes\" : \"No\"", " \
    \   let s = lst[0] + lst[1]\n    var depth = 0\n    for c in s {\n        if c\
    \ == \"(\" {\n            depth += 1\n        } else {\n            depth -= 1\n\
    \        }\n        if depth < 0 {\n            return \"No\"\n        }\n   \
    \ }\n    return depth == 0 ? \"Yes\" : \"No\"", "    if lst.count != 2 {\n   \
    \     return \"No\"\n    }\n    var lst_1 = lst[0]\n    var lst_2 = lst[1]\n \
    \   var lst_3 = \"\"\n    var lst_4 = \"\"\n    for _ in 0..<(lst_1.count + lst_2.count)\
    \ {\n        if lst_1.count > 0 {\n            lst_3.append(lst_1.remove(at: lst_1.startIndex))\n\
    \        }\n        if lst_2.count > 0 {\n            lst_4.append(lst_2.remove(at:\
    \ lst_2.startIndex))\n        }\n    }\n    return is_good(str: lst_3) || is_good(str:\
    \ lst_4) ? \"Yes\" : \"No\"", "    let string1 = lst[0]\n    let string2 = lst[1]\n\
    \    var arr1 = Array(string1.characters)\n    var arr2 = Array(string2.characters)\n\
    \    var arr3 = [Character]()\n    if (arr1.contains(\"(\") && arr2.contains(\"\
    )\")) || (arr1.contains(\")\") && arr2.contains(\"(\")) {\n        while (arr1.count\
    \ > 0) && (arr2.count > 0) {\n            if arr1[0] == \"(\" {\n            \
    \    arr3.append(arr1[0])\n                arr1.remove(at: 0)\n            } else\
    \ {\n                arr3.append(arr2[0])\n                arr2.remove(at: 0)\n\
    \            }\n        }\n        arr3.append(contentsOf: arr1)\n        arr3.append(contentsOf:\
    \ arr2)\n        var i = 0\n        var j = 0\n        for c in arr3 {\n     \
    \       if c == \"(\" {\n                i += 1\n            } else {\n      \
    \          j += 1\n            }\n            if j > i {\n                return\
    \ \"No\"\n            }\n        }\n        return \"Yes\"\n    } else {\n   \
    \     return \"No\"\n    }", "  // your code here\n    let s = lst[0] + lst[1]\n\
    \    var count = 0\n    for ch in s.characters {\n        if ch == \"(\" {\n \
    \           count += 1\n        } else {\n            count -= 1\n        }\n\
    \        if count < 0 {\n            return \"No\"\n        }\n    }\n    return\
    \ count == 0 ? \"Yes\" : \"No\"", "    let str0 = lst[0]\n    let str1 = lst[1]\n\
    \    let is_valid0 = str0.contains(\"(\") && !str0.contains(\")\")\n    let is_valid1\
    \ = str1.contains(\"(\") && !str1.contains(\")\")\n    if is_valid0 && is_valid1\
    \ {\n        return \"Yes\"\n    }\n    return \"No\"", "    var stack = \"\"\n\
    \    for i in 0..<lst.count {\n        let str = lst[i]\n        if str.isEmpty\
    \ {\n            continue\n        }\n        let first = str.first!\n       \
    \ if first == \")\" {\n            if stack.count == 0 {\n                return\
    \ \"No\"\n            }\n            let last = stack.last!\n            if last\
    \ == \"(\" {\n                stack.removeLast()\n            } else {\n     \
    \           stack.append(first)\n            }\n        } else {\n           \
    \ stack.append(first)\n        }\n    }\n    if stack.count > 0 {\n        return\
    \ \"No\"\n    }\n    return \"Yes\"", '    return lst.joined().is_good_parens
    ? "Yes" : "No"', "    var stack = Stack<Character>()\n    for char in lst[0] {\n\
    \        if char == \"(\" {\n            stack.push(char)\n        } else {\n\
    \            if stack.count == 0 {\n                return \"No\"\n          \
    \  }\n            stack.pop()\n        }\n    }\n    for char in lst[1] {\n  \
    \      if char == \"(\" {\n            if stack.count == 0 {\n               \
    \ return \"No\"\n            }\n            stack.pop()\n        } else {\n  \
    \          stack.push(char)\n        }\n    }\n    return stack.count == 0 ? \"\
    Yes\" : \"No\"", "    let s = lst[0] + lst[1]\n    var cnt = 0\n    for c in s\
    \ {\n        if c == \"(\" {\n            cnt += 1\n        } else {\n       \
    \     cnt -= 1\n        }\n        if cnt < 0 {\n            return \"No\"\n \
    \       }\n    }\n    return cnt == 0 ? \"Yes\" : \"No\"", "    var str = \"\"\
    \n    for s in lst {\n        str += s\n    }\n    var balance = 0\n    for c\
    \ in str {\n        if c == \"(\" {\n            balance += 1\n        } else\
    \ {\n            balance -= 1\n        }\n        if balance < 0 {\n         \
    \   return \"No\"\n        }\n    }\n    return balance == 0 ? \"Yes\" : \"No\"",
  "    var left = [Character]()\n    var right = [Character]()\n    for char in lst[0]\
    \ {\n        left.append(char)\n    }\n    for char in lst[1] {\n        right.append(char)\n\
    \    }\n    var l = left.count\n    var r = right.count\n    while l != 0 && r\
    \ != 0 {\n        if (left[l - 1] == \"(\") && (right[r - 1] == \")\") {\n   \
    \         l -= 1\n            r -= 1\n        } else if (left[l - 1] == \")\"\
    ) && (right[r - 1] == \"(\") {\n            return \"No\"\n        } else if (left[l\
    \ - 1] == \"(\") && (right[r - 1] == \"(\") {\n            return \"No\"\n   \
    \     } else if (left[l - 1] == \")\") && (right[r - 1] == \")\") {\n        \
    \    return \"No\"\n        }\n    }\n    return \"Yes\"", "    let str1 = lst[0]\n\
    \    let str2 = lst[1]\n    var parens = 0\n    for char in str1 {\n        if\
    \ char == \"(\" {\n            parens += 1\n        } else {\n            parens\
    \ -= 1\n        }\n    }\n    for char in str2 {\n        if char == \"(\" {\n\
    \            parens += 1\n        } else {\n            parens -= 1\n        }\n\
    \    }\n    return parens == 0 ? \"Yes\" : \"No\"", "    var sum = 0\n    for\
    \ c in lst[0] {\n        if c == \"(\" {\n            sum += 1\n        } else\
    \ {\n            sum -= 1\n        }\n    }\n    for c in lst[1] {\n        if\
    \ c == \"(\" {\n            sum += 1\n        } else {\n            sum -= 1\n\
    \        }\n    }\n    return sum == 0 ? \"Yes\" : \"No\"", "    // TODO: Implement\
    \ solution\n    return \"\"", "    var str = \"\"\n    var count = 0\n    for\
    \ s in lst {\n        for ch in s {\n            if ch == \"(\" {\n          \
    \      count += 1\n            } else {\n                count -= 1\n        \
    \    }\n            if count < 0 {\n                return \"No\"\n          \
    \  }\n        }\n        str += s\n    }\n    return count == 0 ? \"Yes\" : \"\
    No\"", "    if lst.count != 2 { return \"No\" }\n    var lhs = lst[0]\n    var\
    \ rhs = lst[1]\n    while lhs.count > 0 && rhs.count > 0 {\n        if lhs.first!\
    \ == \"(\" && rhs.first! == \")\" {\n            lhs.removeFirst()\n         \
    \   rhs.removeFirst()\n        } else if lhs.first! == \")\" && rhs.first! ==\
    \ \"(\" {\n            lhs.removeFirst()\n            rhs.removeFirst()\n    \
    \    } else if lhs.first! == \"(\" && rhs.first! == \"(\" {\n            lhs.removeFirst()\n\
    \        } else if lhs.first! == \")\" && rhs.first! == \")\" {\n            rhs.removeFirst()\n\
    \        } else {\n            return \"No\"\n        }\n    }\n    if lhs.count\
    \ == 0 && rhs.count == 0 {\n        return \"Yes\"\n    } else {\n        return\
    \ \"No\"\n    }", "  var left: Int = 0\n  var right: Int = 0\n  for str in lst\
    \ {\n    for ch in str {\n      if ch == \"(\" {\n        left += 1\n      } else\
    \ {\n        right += 1\n      }\n    }\n  }\n  return left == right ? \"Yes\"\
    \ : \"No\"", "    var s = lst[0] + lst[1]\n    for c in s {\n        if c == \"\
    )\" {\n            if s.last! == \"(\" {\n                let x = s.index(before:\
    \ s.endIndex)\n                let y = s.index(before: x)\n                s.removeSubrange(y...x)\n\
    \            } else {\n                return \"No\"\n            }\n        }\n\
    \    }\n    return s.isEmpty ? \"Yes\" : \"No\"", "    if lst.count == 2 {\n \
    \       var s = lst[0] + lst[1]\n        while s.contains(\"()\") {\n        \
    \    s = s.replacingOccurrences(of: \"()\", with: \"\")\n        }\n        return\
    \ s.isEmpty ? \"Yes\" : \"No\"\n    }\n    return \"No\"", "    let first = lst[0]\n\
    \    let second = lst[1]\n    if first.count == second.count {\n        return\
    \ \"Yes\"\n    } else {\n        return \"No\"\n    }", "    var result = \"Yes\"\
    \n    var count = 0\n    for item in lst {\n        for char in item {\n     \
    \       if char == \"(\" {\n                count += 1\n            } else {\n\
    \                count -= 1\n            }\n            if count < 0 {\n     \
    \           result = \"No\"\n                break\n            }\n        }\n\
    \    }\n    if count != 0 {\n        result = \"No\"\n    }\n    return result",
  "    let str1 = lst[0]\n    let str2 = lst[1]\n    var counter1 = 0\n    var counter2\
    \ = 0\n    for i in str1 {\n        if i == \"(\" {\n            counter1 += 1\n\
    \        } else {\n            counter1 -= 1\n        }\n    }\n    for i in str2\
    \ {\n        if i == \"(\" {\n            counter2 += 1\n        } else {\n  \
    \          counter2 -= 1\n        }\n    }\n    var balanced = false\n    if counter1\
    \ == 0 && counter2 == 0 {\n        balanced = true\n    }\n    if counter1 >=\
    \ 0 && counter2 >= 0 {\n        balanced = true\n    }\n    if counter1 <= 0 &&\
    \ counter2 <= 0 {\n        balanced = true\n    }\n    if counter1 >= counter2\
    \ {\n        balanced = true\n    }\n    if counter1 <= counter2 {\n        balanced\
    \ = true\n    }\n    if balanced {\n        return \"Yes\"\n    } else {\n   \
    \     return \"No\"\n    }", "    var r: Int = 0\n    for ch in lst[0] {\n   \
    \     if ch == \"(\" {\n            r += 1\n        } else {\n            r -=\
    \ 1\n        }\n    }\n    for ch in lst[1] {\n        if ch == \"(\" {\n    \
    \        r += 1\n        } else {\n            r -= 1\n        }\n    }\n    if\
    \ r == 0 {\n        return \"Yes\"\n    }\n    return \"No\"", "  var s = \"\"\
    \n  for str in lst {\n    s += str\n  }\n  var balance = 0\n  for character in\
    \ s {\n    if character == \"(\" {\n      balance += 1\n    } else {\n      balance\
    \ -= 1\n    }\n    if balance < 0 {\n      return \"No\"\n    }\n  }\n  return\
    \ \"Yes\"", "    var lst = lst\n    var lst_count = [Int]()\n    while lst.count\
    \ > 0 {\n        var str = \"\"\n        for ch in lst[0] {\n            if ch\
    \ == \"(\" {\n                str += \")\"\n            } else {\n           \
    \     str += \"(\"\n            }\n        }\n        lst.append(str)\n      \
    \  lst.remove(at: 0)\n        lst_count.append(0)\n    }\n    for i in lst_count.indices\
    \ {\n        for j in lst[i].indices {\n            if lst[i][j] == \"(\" {\n\
    \                lst_count[i] += 1\n            } else {\n                lst_count[i]\
    \ -= 1\n            }\n            if lst_count[i] < 0 {\n                return\
    \ \"No\"\n            }\n        }\n    }\n    return \"Yes\"", "    let string1\
    \ = lst[0]\n    let string2 = lst[1]\n    var numOpen = 0\n    var numClose =\
    \ 0\n    for i in string1 {\n        if i == \"(\" {\n            numOpen += 1\n\
    \        } else {\n            numClose += 1\n        }\n    }\n    for i in string2\
    \ {\n        if i == \"(\" {\n            numOpen += 1\n        } else {\n   \
    \         numClose += 1\n        }\n    }\n    if numOpen == numClose {\n    \
    \    return \"Yes\"\n    } else {\n        return \"No\"\n    }", "    let str1\
    \ = lst[0], str2 = lst[1]\n    let openParens = Character(\"(\")\n    var openCount\
    \ = 0\n    for char in str1 {\n        if char == openParens {\n            openCount\
    \ += 1\n        } else {\n            openCount -= 1\n        }\n    }\n    for\
    \ char in str2 {\n        if char == openParens {\n            openCount += 1\n\
    \        } else {\n            openCount -= 1\n        }\n    }\n    return openCount\
    \ == 0 ? \"Yes\" : \"No\"", "  guard lst.count == 2 else { return \"No\" }\n \
    \ let str1 = lst[0]\n  let str2 = lst[1]\n  if str1.isGood() && str2.isGood()\
    \ {\n    return \"Yes\"\n  }\n  return \"No\"", '    return lst.reduce("") { $0
    + $1 }.is_balanced ? "Yes" : "No"', '    return "No"', "    var stack = [String]()\n\
    \    for str in lst {\n        for char in str {\n            if char == \"(\"\
    \ {\n                stack.append(\"(\")\n            } else {\n             \
    \   if stack.count == 0 {\n                    return \"No\"\n               \
    \ } else {\n                    stack.removeLast()\n                }\n      \
    \      }\n        }\n    }\n    return stack.count == 0 ? \"Yes\" : \"No\"", " \
    \   let firstStr = lst[0]\n    let secondStr = lst[1]\n    var firstLeft = 0\n\
    \    var firstRight = 0\n    var secondLeft = 0\n    var secondRight = 0\n   \
    \ for char in firstStr {\n        if char == \"(\" {\n            firstLeft +=\
    \ 1\n        } else {\n            firstRight += 1\n        }\n    }\n    for\
    \ char in secondStr {\n        if char == \"(\" {\n            secondLeft += 1\n\
    \        } else {\n            secondRight += 1\n        }\n    }\n    let firstDiff\
    \ = firstLeft - firstRight\n    let secondDiff = secondLeft - secondRight\n  \
    \  if firstDiff < 0 && secondDiff < 0 {\n        return \"No\"\n    } else if\
    \ (firstDiff < 0 && secondDiff > 0) || (firstDiff > 0 && secondDiff < 0) {\n \
    \       return \"Yes\"\n    } else {\n        return \"No\"\n    }", "    var\
    \ left = 0\n    var right = 0\n    for i in lst[0] {\n        if i == \"(\" {\n\
    \            left += 1\n        } else {\n            right += 1\n        }\n\
    \    }\n    for i in lst[1] {\n        if i == \"(\" {\n            left -= 1\n\
    \        } else {\n            right -= 1\n        }\n    }\n    if left != 0\
    \ || right != 0 {\n        return \"No\"\n    }\n    return \"Yes\"", "    let\
    \ first = lst[0]\n    let second = lst[1]\n    // there is a way to make a good\
    \ string if and only if the number of\n    // open parentheses in the first string\
    \ is the same as the number of\n    // closed parentheses in the second string\n\
    \    if lst[0].count(of: \"(\") == lst[1].count(of: \")\") {\n        return \"\
    Yes\"\n    }\n    return \"No\"", "  // YOUR CODE HERE\n  return \"\"", "    var\
    \ s = \"\"\n    for str in lst {\n        s += str\n    }\n    return is_good(s:\
    \ s) ? \"Yes\" : \"No\"", "    var stack = [Character]()\n    var close_parens\
    \ = 0\n    for c in lst[0] {\n        if c == \"(\" {\n            stack.append(c)\n\
    \        } else {\n            if stack.count == 0 {\n                close_parens\
    \ += 1\n            } else {\n                stack.removeLast()\n           \
    \ }\n        }\n    }\n    for c in lst[1] {\n        if c == \"(\" {\n      \
    \      if close_parens > 0 {\n                close_parens -= 1\n            }\
    \ else {\n                stack.append(c)\n            }\n        } else {\n \
    \           if stack.count == 0 {\n                return \"No\"\n           \
    \ } else {\n                stack.removeLast()\n            }\n        }\n   \
    \ }\n    return \"Yes\"", "    var open = 0\n    var close = 0\n    for c in lst[0]\
    \ {\n        if c == \"(\" {\n            open += 1\n        } else {\n      \
    \      close += 1\n        }\n    }\n    for c in lst[1] {\n        if c == \"\
    (\" {\n            open += 1\n        } else {\n            close += 1\n     \
    \   }\n    }\n    if open == close {\n        return \"Yes\"\n    }\n    return\
    \ \"No\"", "    var remaining_opens = 0\n    var answer = \"Yes\"\n    for s in\
    \ lst {\n        for c in s {\n            if c == \"(\" {\n                remaining_opens\
    \ += 1\n            } else {\n                if remaining_opens > 0 {\n     \
    \               remaining_opens -= 1\n                } else {\n             \
    \       answer = \"No\"\n                }\n            }\n        }\n    }\n\
    \    if remaining_opens > 0 {\n        answer = \"No\"\n    }\n    return answer",
  '    return "\(canConcat(lst[0], lst[1]))"', "    let (s1, s2) = (lst[0], lst[1])\n\
    \    var openers = 0\n    for ch in s1 {\n        if ch == \"(\" {\n         \
    \   openers += 1\n        } else {\n            openers -= 1\n        }\n    }\n\
    \    for ch in s2 {\n        if ch == \"(\" {\n            openers += 1\n    \
    \    } else {\n            openers -= 1\n        }\n    }\n    if openers == 0\
    \ {\n        return \"Yes\"\n    }\n    return \"No\"", '    return "Yes"', " \
    \   var left = 0\n    var right = 0\n    for s in lst {\n        left += s.filter\
    \ { $0 == \"(\" }.count\n        right += s.filter { $0 == \")\" }.count\n   \
    \ }\n    return left == right ? \"Yes\" : \"No\"", "    var s = lst[0] + lst[1]\n\
    \    var count = 0\n    for i in s {\n        if i == \"(\" {\n            count\
    \ += 1\n        } else {\n            count -= 1\n        }\n        if count\
    \ < 0 {\n            return \"No\"\n        }\n    }\n    return \"Yes\"", " \
    \   var count: Int = 0\n    for i in 0..<lst.count {\n        for j in 0..<lst[i].count\
    \ {\n            if lst[i][j] == \"(\" {\n                count += 1\n       \
    \     } else {\n                count -= 1\n            }\n            if count\
    \ < 0 {\n                return \"No\"\n            }\n        }\n    }\n    return\
    \ count == 0 ? \"Yes\" : \"No\"", "    let str1 = lst[0]\n    let str2 = lst[1]\n\
    \    var stack1 = Stack<Character>()\n    var stack2 = Stack<Character>()\n  \
    \  for c in str1 {\n        if c == \"(\" {\n            stack1.push(element:\
    \ c)\n        } else {\n            if stack1.isEmpty() {\n                return\
    \ \"No\"\n            } else {\n                _ = stack1.pop()\n           \
    \ }\n        }\n    }\n    for c in str2 {\n        if c == \"(\" {\n        \
    \    stack2.push(element: c)\n        } else {\n            if stack2.isEmpty()\
    \ {\n                return \"No\"\n            } else {\n                _ =\
    \ stack2.pop()\n            }\n        }\n    }\n    if stack1.isEmpty() && stack2.isEmpty()\
    \ {\n        return \"Yes\"\n    } else {\n        return \"No\"\n    }", "  \
    \  var stack = Stack<Character>()\n    var concat = lst[0] + lst[1]\n    for c\
    \ in concat {\n        if c == \"(\" {\n            stack.push(c)\n        } else\
    \ {\n            if stack.isEmpty() {\n                return \"No\"\n       \
    \     } else {\n                stack.pop()\n            }\n        }\n    }\n\
    \    return stack.isEmpty() ? \"Yes\" : \"No\"", "    var counter = 0\n    for\
    \ i in lst[0] {\n        if i == \"(\" {\n            counter += 1\n        }\
    \ else {\n            counter -= 1\n        }\n    }\n    for i in lst[1] {\n\
    \        if i == \"(\" {\n            counter += 1\n        } else {\n       \
    \     counter -= 1\n        }\n    }\n    if counter < 0 {\n        return \"\
    No\"\n    }\n    return \"Yes\"", "    var stack = 0\n    for str in lst {\n \
    \       for ch in str {\n            switch ch {\n            case \"(\":\n  \
    \              stack += 1\n            case \")\":\n                stack -= 1\n\
    \            default:\n                break\n            }\n            if stack\
    \ < 0 {\n                return \"No\"\n            }\n        }\n    }\n    return\
    \ stack == 0 ? \"Yes\" : \"No\"", "    var s = \"\"\n    for str in lst {\n  \
    \      s += str\n    }\n    if is_balanced(s: s) {\n        return \"Yes\"\n \
    \   }\n    return \"No\"", "    // your code here\n    return \"\"", "    var\
    \ lst2 = lst\n    lst2[0].append(lst2[1])\n    lst2.removeLast()\n    var open\
    \ = 0\n    for i in lst2[0] {\n        if i == \"(\" {\n            open += 1\n\
    \        } else {\n            open -= 1\n        }\n        if open < 0 {\n \
    \           return \"No\"\n        }\n    }\n    if open == 0 {\n        return\
    \ \"Yes\"\n    } else {\n        return \"No\"\n    }", "    var first = lst[0]\n\
    \    var second = lst[1]\n    var open_count = 0\n    var close_count = 0\n  \
    \  for ch in first {\n        if ch == \"(\" {\n            open_count += 1\n\
    \        } else {\n            close_count += 1\n        }\n    }\n    if open_count\
    \ == close_count {\n        return \"Yes\"\n    }\n    open_count = 0\n    close_count\
    \ = 0\n    for ch in second {\n        if ch == \"(\" {\n            open_count\
    \ += 1\n        } else {\n            close_count += 1\n        }\n    }\n   \
    \ if open_count == close_count {\n        return \"Yes\"\n    }\n    return \"\
    No\"", "    let str = lst[0] + lst[1]\n    var i = 0\n    var stack = \"\"\n \
    \   while i < str.count {\n        if str[i] == \"(\" {\n            stack +=\
    \ \"(\"\n        } else {\n            if stack.count == 0 {\n               \
    \ return \"No\"\n            } else {\n                stack.removeLast()\n  \
    \          }\n        }\n        i += 1\n    }\n    if stack.count == 0 {\n  \
    \      return \"Yes\"\n    } else {\n        return \"No\"\n    }", "    var str\
    \ = lst[0] + lst[1]\n    var current = 0\n    while current < str.count {\n  \
    \      if str[current] == \")\" {\n            var flag = false\n            for\
    \ i in 0..<current {\n                if str[i] == \"(\" {\n                 \
    \   flag = true\n                    str.remove(at: i)\n                    str.remove(at:\
    \ current - 1)\n                    current -= 2\n                    break\n\
    \                }\n            }\n            if !flag {\n                str.remove(at:\
    \ current)\n                current -= 1\n            }\n        }\n        current\
    \ += 1\n    }\n    return str.isEmpty ? \"Yes\" : \"No\"", "    var lst = lst.joined()\n\
    \    var open = 0\n    var closed = 0\n    for (i, item) in lst.enumerated() {\n\
    \        if item == \"(\" {\n            open += 1\n        } else {\n       \
    \     closed += 1\n        }\n        if closed > open {\n            return \"\
    No\"\n        }\n    }\n    if open == closed {\n        return \"Yes\"\n    }\n\
    \    return \"No\"", "  // Your code here\n  return \"\"", "    var lhs = lst[0]\n\
    \    var rhs = lst[1]\n    var result = \"Yes\"\n    for _ in 0..<lhs.count {\n\
    \        if is_good(str: lhs + rhs) {\n            return result\n        }\n\
    \        if is_good(str: rhs + lhs) {\n            return result\n        }\n\
    \        lhs.append(\"(\")\n        rhs.insert(\"(\", at: rhs.startIndex)\n  \
    \  }\n    result = \"No\"\n    return result", "    var s = \"\"\n    for i in\
    \ lst {\n        s += i\n    }\n    var open = 0\n    var close = 0\n    for i\
    \ in s {\n        if i == \"(\" {\n            open += 1\n        } else {\n \
    \           close += 1\n        }\n        if close > open {\n            return\
    \ \"No\"\n        }\n    }\n    if open == close {\n        return \"Yes\"\n \
    \   }\n    return \"No\"", "    let str1 = lst[0]\n    let str2 = lst[1]\n   \
    \ return parenthesisChecker(str1 + str2) ? \"Yes\" : \"No\"", "    let s1 = lst[0]\n\
    \    let s2 = lst[1]\n    var res1 = 0\n    var res2 = 0\n    var res3 = 0\n \
    \   var res4 = 0\n    for c in s1 {\n        if c == \"(\" {\n            res1\
    \ += 1\n        } else {\n            res1 -= 1\n        }\n    }\n    for c in\
    \ s2 {\n        if c == \"(\" {\n            res2 += 1\n        } else {\n   \
    \         res2 -= 1\n        }\n    }\n    if res1 < 0 || res2 < 0 {\n       \
    \ return \"No\"\n    }\n    res3 = res1 + res2\n    if res3 % 2 != 0 {\n     \
    \   return \"No\"\n    }\n    res4 = res3 / 2\n    if s1.count >= res4 && s2.count\
    \ >= res4 {\n        return \"Yes\"\n    }\n    return \"No\"", "    var res:\
    \ String = \"Yes\"\n    var cnt1: Int = 0\n    var cnt2: Int = 0\n    for c in\
    \ lst[0] {\n        if c == \"(\" {\n            cnt1 += 1\n        } else {\n\
    \            cnt1 -= 1\n        }\n    }\n    for c in lst[1] {\n        if c\
    \ == \"(\" {\n            cnt2 += 1\n        } else {\n            cnt2 -= 1\n\
    \        }\n    }\n    if cnt1 < 0 || cnt2 < 0 {\n        res = \"No\"\n    }\n\
    \    return res", "    let str = lst[0] + lst[1]\n    let _ = str.reduce(0) {\
    \ (count, c) -> Int in\n        if c == \"(\" {\n            return count + 1\n\
    \        } else {\n            return count - 1\n        }\n    }\n    return\
    \ \"No\"", '    return String(parens(lst: lst) ? "Yes" : "No")', "    var s1 =\
    \ lst[0]\n    var s2 = lst[1]\n    var i = 0\n    while i < s1.count {\n     \
    \   if (s1[i] == \")\" && s2[0] == \"(\") {\n            return \"Yes\"\n    \
    \    }\n        s1.remove(at: i)\n    }\n    return \"No\"", "    var s1 = lst[0]\n\
    \    var s2 = lst[1]\n    let len1 = s1.count\n    let len2 = s2.count\n    var\
    \ isMatched = false\n    for _ in 0..<len1 {\n        if isBalanced(s: s1 + s2)\
    \ {\n            isMatched = true\n            break\n        }\n        s1.insert(\"\
    \ \", at: s1.startIndex)\n    }\n    if !isMatched {\n        for _ in 0..<len2\
    \ {\n            if isBalanced(s: s1 + s2) {\n                isMatched = true\n\
    \                break\n            }\n            s2.insert(\" \", at: s2.startIndex)\n\
    \        }\n    }\n    return isMatched ? \"Yes\" : \"No\"", "    let allStr =\
    \ lst.joined()\n    var c = 0\n    for i in allStr {\n        if i == \"(\" {\n\
    \            c += 1\n        } else {\n            c -= 1\n        }\n       \
    \ if c < 0 {\n            return \"No\"\n        }\n    }\n    return c == 0 ?\
    \ \"Yes\" : \"No\"", "    // If first string ends with ')' then we always cannot\
    \ match\n    if lst[0].hasSuffix(\")\") {\n        return \"No\"\n    }\n    //\
    \ If first string ends with '(' and second string starts with ')' then\n    //\
    \ we cannot match\n    if lst[0].hasSuffix(\"(\") && lst[1].hasPrefix(\")\") {\n\
    \        return \"No\"\n    }\n    // Now we just need to check whether both strings\
    \ are good on their own\n    // and that they match\n    let is_good = [lst[0],\
    \ lst[1]].map {str in\n        // 'balance' is the number of open parentheses\
    \ minus the number of closed\n        // parentheses at any given point. If it\
    \ ever becomes negative we cannot\n        // match\n        var balance = 0\n\
    \        for c in str {\n            balance += (c == \"(\") ? 1 : -1\n      \
    \      if balance < 0 {\n                return false\n            }\n       \
    \ }\n        return balance == 0\n    }\n    return is_good[0] && is_good[1] ?\
    \ \"Yes\" : \"No\"", "    var count: Int = 0\n    for i in 0..<lst.count {\n \
    \       let str = lst[i]\n        for j in 0..<str.count {\n            let char\
    \ = str[j]\n            if char == \"(\" {\n                count += 1\n     \
    \       } else {\n                count -= 1\n            }\n            if count\
    \ < 0 {\n                return \"No\"\n            }\n        }\n    }\n    return\
    \ count == 0 ? \"Yes\" : \"No\"", "    var lft = [Character]()\n    var rgt =\
    \ [Character]()\n    for i in 0..<lst.count {\n        for c in lst[i] {\n   \
    \         if c == \"(\" {\n                lft.append(c)\n            } else {\n\
    \                rgt.append(c)\n            }\n        }\n    }\n    let lftcnt\
    \ = lft.count\n    let rgtcnt = rgt.count\n    if lftcnt == rgtcnt {\n       \
    \ return \"Yes\"\n    } else if lftcnt > rgtcnt {\n        return \"No\"\n   \
    \ } else {\n        return \"Yes\"\n    }", "    let first = lst[0]\n    let second\
    \ = lst[1]\n    var firstCounter = 0\n    var secondCounter = 0\n    for a in\
    \ first {\n        if a == \"(\" {\n            firstCounter += 1\n        } else\
    \ {\n            firstCounter -= 1\n        }\n    }\n    for b in second {\n\
    \        if b == \"(\" {\n            secondCounter += 1\n        } else {\n \
    \           secondCounter -= 1\n        }\n    }\n    if firstCounter >= 0 &&\
    \ secondCounter >= 0 {\n        return \"Yes\"\n    } else if firstCounter >=\
    \ 0 && secondCounter < 0 {\n        return \"No\"\n    } else if firstCounter\
    \ < 0 && secondCounter >= 0 {\n        return \"No\"\n    } else {\n        return\
    \ \"Yes\"\n    }", "    var lst = lst\n    var s: String = \"\"\n    while lst.count\
    \ > 0 {\n        s += lst.popLast()!\n    }\n    if s.isParensGood() {\n     \
    \   return \"Yes\"\n    }\n    return \"No\"", "    let first: String = lst[0]\n\
    \    let second: String = lst[1]\n    var count: Int = 0\n    var balanced: Bool\
    \ = true\n    for c in first.characters {\n        if c == \"(\" {\n         \
    \   count += 1\n        } else {\n            count -= 1\n        }\n        if\
    \ count < 0 {\n            balanced = false\n            break\n        }\n  \
    \  }\n    if balanced {\n        for c in second.characters {\n            if\
    \ c == \"(\" {\n                count += 1\n            } else {\n           \
    \     count -= 1\n            }\n            if count < 0 {\n                balanced\
    \ = false\n                break\n            }\n        }\n    }\n    if balanced\
    \ && count == 0 {\n        return \"Yes\"\n    } else {\n        return \"No\"\
    \n    }", "    let parity = [0, 0]\n    for i in 0..<lst.count {\n        for\
    \ j in 0..<lst[i].count {\n            if lst[i][j] == \"(\" {\n             \
    \   parity[i] += 1\n            } else {\n                parity[i] -= 1\n   \
    \         }\n            if parity[i] < 0 {\n                return \"No\"\n \
    \           }\n        }\n    }\n    return parity[0] == parity[1] ? \"Yes\" :\
    \ \"No\"", "    var arr = [Character]()\n    for i in 0..<lst.count {\n      \
    \  for j in 0..<lst[i].count {\n            arr.append(lst[i][lst[i].index(lst[i].startIndex,\
    \ offsetBy: j)])\n        }\n    }\n    var count = 0\n    for i in 0..<arr.count\
    \ {\n        if arr[i] == \"(\" {\n            count += 1\n        } else {\n\
    \            count -= 1\n        }\n        if count < 0 {\n            return\
    \ \"No\"\n        }\n    }\n    if count == 0 {\n        return \"Yes\"\n    }\
    \ else {\n        return \"No\"\n    }", "    let s = lst[0] + lst[1]\n    var\
    \ parens = 0\n    for c in s {\n        if c == \"(\" {\n            parens +=\
    \ 1\n        } else {\n            parens -= 1\n        }\n        if parens <\
    \ 0 {\n            return \"No\"\n        }\n    }\n    return \"Yes\"", "   \
    \ let lst = lst.map { Array($0) }\n    for first in lst[0] {\n        for second\
    \ in lst[1] {\n            if good_string([first, second]) {\n               \
    \ return \"Yes\"\n            }\n        }\n    }\n    return \"No\"", "    var\
    \ count = 0\n    for str in lst {\n        for c in str {\n            if c ==\
    \ \"(\" {\n                count += 1\n            } else {\n                count\
    \ -= 1\n            }\n            if count < 0 {\n                return \"No\"\
    \n            }\n        }\n    }\n    return count == 0 ? \"Yes\" : \"No\"",
  "    var out: [String] = []\n    var open: Int = 0\n    var close: Int = 0\n   \
    \ for item in lst {\n        for char in item {\n            if char == \"(\"\
    \ {\n                open += 1\n            } else {\n                close +=\
    \ 1\n            }\n        }\n        out.append(item)\n    }\n    if open ==\
    \ close {\n        return \"Yes\"\n    } else {\n        return \"No\"\n    }",
  "    let arr = lst.map { Array($0) }\n    let lhs = arr[0]\n    let rhs = arr[1]\n\
    \    let open_par = lhs.filter { $0 == \"(\" }\n    let close_par = rhs.filter\
    \ { $0 == \")\" }\n    return (open_par.count == close_par.count) ? \"Yes\" :\
    \ \"No\"", "  var revCnt = 0\n  var openCnt = 0\n  for s in lst {\n    for c in\
    \ s {\n      if c == \"(\" {\n        openCnt += 1\n      } else {\n        revCnt\
    \ += 1\n      }\n    }\n  }\n  return (revCnt + openCnt) % 2 == 0 ? \"Yes\" :\
    \ \"No\"", "    return lst.reduce(\"\") {\n        if is_good_string($0 + $1)\
    \ {\n            return \"Yes\"\n        } else {\n            return \"No\"\n\
    \        }\n    }", "    let left = lst[0]\n    let right = lst[1]\n    var leftStack\
    \ = [Character]()\n    for c in left {\n        if c == \"(\" {\n            leftStack.append(c)\n\
    \        } else {\n            leftStack.popLast()\n        }\n    }\n    var\
    \ rightStack = [Character]()\n    for c in right {\n        if c == \")\" {\n\
    \            rightStack.append(c)\n        } else {\n            rightStack.popLast()\n\
    \        }\n    }\n    while leftStack.isEmpty == false && rightStack.isEmpty\
    \ == false {\n        leftStack.popLast()\n        rightStack.popLast()\n    }\n\
    \    if leftStack.isEmpty && rightStack.isEmpty {\n        return \"Yes\"\n  \
    \  }\n    return \"No\"", "    let first: String = lst[0]\n    let second: String\
    \ = lst[1]\n    var all_pairs: [String] = [\"()\"]\n    var i: Int = 0\n    while\
    \ i < all_pairs.count {\n        let first_char: Character = all_pairs[i][all_pairs[i].startIndex]\n\
    \        let second_char: Character = all_pairs[i][all_pairs[i].index(after: all_pairs[i].startIndex)]\n\
    \        if first_char == \"(\" && second_char == \")\" {\n            let pair_1:\
    \ String = \"(\\(all_pairs[i]))\"\n            let pair_2: String = \"\\(all_pairs[i])()\"\
    \n            if !all_pairs.contains(pair_1) {\n                all_pairs.append(pair_1)\n\
    \            }\n            if !all_pairs.contains(pair_2) {\n               \
    \ all_pairs.append(pair_2)\n            }\n        }\n        i += 1\n    }\n\
    \    var j: Int = 0\n    while j < all_pairs.count {\n        let first_pair:\
    \ String = all_pairs[j]\n        var k: Int = 0\n        while k < all_pairs.count\
    \ {\n            let second_pair: String = all_pairs[k]\n            let final_string:\
    \ String = \"\\(first_pair)\\(second_pair)\"\n            if balanced_parens(input:\
    \ final_string) {\n                if first == first_pair && second == second_pair\
    \ {\n                    return \"Yes\"\n                }\n                if\
    \ first == second_pair && second == first_pair {\n                    return \"\
    Yes\"\n                }\n            }\n            k += 1\n        }\n     \
    \   j += 1\n    }\n    return \"No\"", "    // your code here\n    var count =\
    \ 0\n    var ans = \"\"\n    if lst[0].first == \")\" && lst[1].first == \")\"\
    \ {\n        return \"No\"\n    }\n    for i in lst[0] {\n        if i == \"(\"\
    \ {\n            count += 1\n        } else {\n            count -= 1\n      \
    \  }\n        if count < 0 {\n            return \"No\"\n        }\n    }\n  \
    \  for i in lst[1] {\n        if i == \"(\" {\n            count += 1\n      \
    \  } else {\n            count -= 1\n        }\n        if count < 0 {\n     \
    \       return \"No\"\n        }\n    }\n    if count == 0 {\n        ans = \"\
    Yes\"\n    } else {\n        ans = \"No\"\n    }\n    return ans", "    if lst.count\
    \ != 2 {\n        return \"No\"\n    }\n    let s1 = lst[0]\n    let s2 = lst[1]\n\
    \    return isGood(s1 + s2) ? \"Yes\" : \"No\"", "    var l1 = lst[0].to_chars()\n\
    \    var l2 = lst[1].to_chars()\n    if l1.count == 0 && l2.count == 0 {\n   \
    \     return \"Yes\"\n    }\n    if l1.count == 0 && l2.count > 0 {\n        for\
    \ c in l2 {\n            if c == \")\" {\n                return \"No\"\n    \
    \        }\n        }\n        return \"Yes\"\n    }\n    if l1.count > 0 && l2.count\
    \ == 0 {\n        for c in l1 {\n            if c == \"(\" {\n               \
    \ return \"No\"\n            }\n        }\n        return \"Yes\"\n    }\n   \
    \ var i1 = 0\n    var i2 = 0\n    for c in l1 {\n        if c == \"(\" {\n   \
    \         i1 += 1\n        } else {\n            i1 -= 1\n        }\n    }\n \
    \   for c in l2 {\n        if c == \"(\" {\n            i2 += 1\n        } else\
    \ {\n            i2 -= 1\n        }\n    }\n    if i1 == 0 && i2 == 0 {\n    \
    \    return \"Yes\"\n    }\n    if i1 != 0 && i2 != 0 {\n        return \"No\"\
    \n    }\n    if i1 > 0 {\n        for i in 0..<i1 {\n            l2.insert(\"\
    (\", at: 0)\n        }\n    } else {\n        for i in 0..<i2 {\n            l1.insert(\"\
    )\", at: 0)\n        }\n    }\n    var l = l1 + l2\n    var s = 0\n    for c in\
    \ l {\n        if c == \"(\" {\n            s += 1\n        } else {\n       \
    \     s -= 1\n        }\n        if s < 0 {\n            return \"No\"\n     \
    \   }\n    }\n    return \"Yes\""]
stop_tokens:
- "\n}"
