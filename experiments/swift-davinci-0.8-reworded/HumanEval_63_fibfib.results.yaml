language: swift
name: HumanEval_63_fibfib
results:
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    var a = 0\n  \
    \  var b = 0\n    var c = 1\n    for _ in 2...n {\n        let d = a + b + c\n\
    \        a = b\n        b = c\n        c = d\n    }\n    return c\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002af28c92bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af28c622561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002af28c622286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002af28c62213c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002af28c621bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpmpd_nelh                        0x00005563e9428761 <unavailable> + 5985

    6    tmpmpd_nelh                        0x00005563e9428346 <unavailable> + 4934

    7    libc.so.6                          0x00002af28cb17460 __libc_start_main +
    245

    8    tmpmpd_nelh                        0x00005563e9427fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660009748
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n\
    \        return 0\n    } else if n == 1 {\n        return 0\n    } else if n ==\
    \ 2 {\n        return 1\n    } else {\n        return fibfib(n: n-1) + fibfib(n:\
    \ n-2) + fibfib(n: n-3)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009748
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    var fibFibDict:\
    \ [Int: Int] = [0: 0, 1: 0, 2: 1]\n    if n == 0 || n == 1 {\n        return 0\n\
    \    } else if n == 2 {\n        return 1\n    } else {\n        if let fibfibN1\
    \ = fibFibDict[n - 1] {\n            return fibfibN1 + fibfib(n: n - 2) + fibfib(n:\
    \ n - 3)\n        } else {\n            let res = fibfib(n: n - 1) + fibfib(n:\
    \ n - 2) + fibfib(n: n - 3)\n            fibFibDict[n - 1] = res\n           \
    \ return res\n        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009748
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    return 0\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpn0hqqvzf/tmpn0hqqvzf.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaae7839c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaae7530b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaae7530988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaae752f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn0hqqvzf                        0x000055aef70df1b8 <unavailable> + 4536

    5    libc.so.6                          0x00002aaae7a25460 __libc_start_main +
    245

    6    tmpn0hqqvzf                        0x000055aef70dee69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660009748
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    if n < 0 {\n \
    \       return -1\n    } else if n == 0 {\n        return 0\n    } else if n ==\
    \ 1 {\n        return 0\n    } else if n == 2 {\n        return 1\n    } else\
    \ {\n        return fibfib(n: n-1) + fibfib(n: n-2) + fibfib(n: n-3)\n    }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009748
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n\
    \        return 0\n    } else if n == 1 {\n        return 0\n    } else if n ==\
    \ 2 {\n        return 1\n    } else {\n        return fibfib(n: n-1) + fibfib(n:\
    \ n-2) + fibfib(n: n-3)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009748
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  //if n == 0 || n\
    \ == 1 {\n  //  return 0\n  //} else if n == 2 {\n  //  return 1\n  //} else {\n\
    \  //  return fibfib(n: n-1) + fibfib(n: n-2) + fibfib(n: n-3)\n  //}\n  return\
    \ fibfib(n: n, a: 0, b: 0, c: 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpcbvtc5sf.swift:22:16: error: extra arguments at positions #2, #3,\
    \ #4 in call\n  return fibfib(n: n, a: 0, b: 0, c: 1)\n               ^\n/tmp/tmpcbvtc5sf.swift:14:6:\
    \ note: 'fibfib(n:)' declared here\nfunc fibfib(n: Int) -> Int {\n     ^\n"
  stdout: ''
  timestamp: 1660009748
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    let fibfib = [0,\
    \ 0, 1]\n    if n < 3 {\n        return fibfib[n]\n    }\n    var a = 0\n    var\
    \ b = 0\n    var c = 1\n    var i = 3\n    while i <= n {\n        let d = a +\
    \ b + c\n        a = b\n        b = c\n        c = d\n        i += 1\n    }\n\
    \    return c\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\n\
    assert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\n\
    assert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14)\
    \ == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009748
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n\
    \        return 0\n    } else if n == 1 {\n        return 0\n    } else if n ==\
    \ 2 {\n        return 1\n    } else {\n        return fibfib(n: n-1) + fibfib(n:\
    \ n-2) + fibfib(n: n-3)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009748
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    var array = [0,\
    \ 0, 1]\n    for index in 3...n {\n        array.append(array[index - 1] + array[index\
    \ - 2] + array[index - 3])\n    }\n    return array[n]\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n:\
    \ 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n:\
    \ 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b65dbbecc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b65db8e3561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b65db8e3286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b65db8e313c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b65db8e2bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp6szxa_gv                        0x0000562a0c1a8930 <unavailable> + 6448

    6    tmp6szxa_gv                        0x0000562a0c1a848b <unavailable> + 5259

    7    libc.so.6                          0x00002b65dbdd8460 __libc_start_main +
    245

    8    tmp6szxa_gv                        0x0000562a0c1a81a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660009748
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n\
    \        return 0\n    } else if n == 1 {\n        return 0\n    } else if n ==\
    \ 2 {\n        return 1\n    } else {\n        return fibfib(n: n-1) + fibfib(n:\
    \ n-2) + fibfib(n: n-3)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009748
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    // TODO: Please\
    \ implement the fibfib function here\n    var first = 0\n    var second = 0\n\
    \    var third = 1\n    var count = 2\n    if n <= 1 {\n        return 0\n   \
    \ }\n    if n == 2 {\n        return 1\n    }\n    for i in 3...n {\n        let\
    \ new = first + second + third\n        first = second\n        second = third\n\
    \        third = new\n        count += 1\n    }\n    return third\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009748
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n\
    \        return 0\n    } else if n == 1 {\n        return 0\n    } else if n ==\
    \ 2 {\n        return 1\n    } else {\n        return fibfib(n: n-1) + fibfib(n:\
    \ n-2) + fibfib(n: n-3)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009748
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    var a: Int = 0\n\
    \    var b: Int = 0\n    var c: Int = 1\n    var d: Int = 0\n    for _ in 2..<n\
    \ {\n        d = a + b + c\n        a = b\n        b = c\n        c = d\n    }\n\
    \    return d\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\n\
    assert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\n\
    assert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14)\
    \ == 927)"
  status: Exception
  stderr: 'tmpjb618c3n/tmpjb618c3n.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b758c47cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b758c173b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b758c173988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b758c1727b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjb618c3n                        0x0000563e206e4338 <unavailable> + 4920

    5    libc.so.6                          0x00002b758c668460 __libc_start_main +
    245

    6    tmpjb618c3n                        0x0000563e206e3fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660009748
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    //YOUR CODE HERE\n\
    \    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\n\
    assert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\n\
    assert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14)\
    \ == 927)"
  status: Exception
  stderr: 'tmprvno0fn_/tmprvno0fn_.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2d847d5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2d844ccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2d844cc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2d844cb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprvno0fn_                        0x000055dee93521b8 <unavailable> + 4536

    5    libc.so.6                          0x00002b2d849c1460 __libc_start_main +
    245

    6    tmprvno0fn_                        0x000055dee9351e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660009748
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    var c: Int = 0\n\
    \    var b: Int = 0\n    var a: Int = 1\n    for _ in 2..<n {\n        c = a +\
    \ b + c\n        b = a\n        a = c\n    }\n    return c\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n:\
    \ 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n:\
    \ 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmp70dvcvg5/tmp70dvcvg5.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b76f80bcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b76f7db3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b76f7db3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b76f7db27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp70dvcvg5                        0x0000555aa6f0b338 <unavailable> + 4920

    5    libc.so.6                          0x00002b76f82a8460 __libc_start_main +
    245

    6    tmp70dvcvg5                        0x0000555aa6f0afe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660009748
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    var fibs = [0,\
    \ 0, 1]\n    var i = 3\n    while i <= n {\n        fibs.append(fibs[i-1] + fibs[i-2]\
    \ + fibs[i-3])\n        i += 1\n    }\n    return fibs[n]\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n:\
    \ 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n:\
    \ 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009748
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    var a = 0\n  \
    \  var b = 0\n    var c = 1\n    var d = 0\n    var i = 0\n    while i < n - 2\
    \ {\n        d = c + b + a\n        a = b\n        b = c\n        c = d\n    \
    \    i += 1\n    }\n    return d\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: Exception
  stderr: 'tmpey24pid8/tmpey24pid8.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3d1ea05c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3d1e6fcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3d1e6fc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3d1e6fb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpey24pid8                        0x000055aaf4c1d1b8 <unavailable> + 4536

    5    libc.so.6                          0x00002b3d1ebf1460 __libc_start_main +
    245

    6    tmpey24pid8                        0x000055aaf4c1ce69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660009748
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    return 0\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpn0hqqvzf/tmpn0hqqvzf.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaae7839c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaae7530b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaae7530988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaae752f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn0hqqvzf                        0x000055aef70df1b8 <unavailable> + 4536

    5    libc.so.6                          0x00002aaae7a25460 __libc_start_main +
    245

    6    tmpn0hqqvzf                        0x000055aef70dee69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660009748
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    if n < 2 {\n \
    \       return 0\n    } else if n == 2 {\n        return 1\n    } else {\n   \
    \     return fibfib(n: n - 1) + fibfib(n: n - 2) + fibfib(n: n - 3)\n    }\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009748
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  if n == 0 {\n  \
    \  return 0\n  } else if n == 1 {\n    return 0\n  } else if n == 2 {\n    return\
    \ 1\n  }\n  var threeBefore = 0\n  var twoBefore = 0\n  var oneBefore = 1\n  var\
    \ current = 0\n  for _ in 3..<n {\n    current = threeBefore + twoBefore + oneBefore\n\
    \    threeBefore = twoBefore\n    twoBefore = oneBefore\n    oneBefore = current\n\
    \  }\n  return current\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: Exception
  stderr: 'tmp2w6fqj78/tmp2w6fqj78.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b09627cdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b09624c4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b09624c4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b09624c37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2w6fqj78                        0x00005609122b342e <unavailable> + 5166

    5    libc.so.6                          0x00002b09629b9460 __libc_start_main +
    245

    6    tmp2w6fqj78                        0x00005609122b2fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660009748
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    var f1 = 0\n \
    \   var f2 = 0\n    var f3 = 1\n    var f4 = 1\n    for _ in 4...n {\n       \
    \ f1 = f2\n        f2 = f3\n        f3 = f4\n        f4 = f1 + f2 + f3\n    }\n\
    \    return f4\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\n\
    assert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\n\
    assert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14)\
    \ == 927)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002ad21e908c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad21e5ff561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ad21e5ff286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ad21e5ff13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ad21e5febb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmphlr2azf7                        0x0000564f10078769 <unavailable> + 5993

    6    tmphlr2azf7                        0x0000564f100782cb <unavailable> + 4811

    7    libc.so.6                          0x00002ad21eaf4460 __libc_start_main +
    245

    8    tmphlr2azf7                        0x0000564f10077fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660009748
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    guard n > 2 else\
    \ { return n - 1 }\n    var fibs = [0, 0, 1]\n    for _ in 3..<n {\n        fibs[0]\
    \ = fibs[1]\n        fibs[1] = fibs[2]\n        fibs[2] = fibs[0] + fibs[1] +\
    \ fibs[2]\n    }\n    return fibs[2]\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\n\
    assert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12)\
    \ == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpxovrqnip/tmpxovrqnip.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0eabb7dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0eab874b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0eab874988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0eab8737b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxovrqnip                        0x00005596414b85de <unavailable> + 5598

    5    libc.so.6                          0x00002b0eabd69460 __libc_start_main +
    245

    6    tmpxovrqnip                        0x00005596414b8199 <unavailable> + 4505

    '
  stdout: ''
  timestamp: 1660009748
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    precondition(n\
    \ >= 0)\n    switch n {\n    case 0:\n        return 0\n    case 1:\n        return\
    \ 0\n    case 2:\n        return 1\n    default:\n        return fibfib(n: n -\
    \ 1) + fibfib(n: n - 2) + fibfib(n: n - 3)\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n:\
    \ 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n:\
    \ 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009748
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    return 0\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpn0hqqvzf/tmpn0hqqvzf.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaae7839c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaae7530b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaae7530988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaae752f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn0hqqvzf                        0x000055aef70df1b8 <unavailable> + 4536

    5    libc.so.6                          0x00002aaae7a25460 __libc_start_main +
    245

    6    tmpn0hqqvzf                        0x000055aef70dee69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660009748
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n\
    \        return 0\n    } else if n == 1 {\n        return 0\n    } else if n ==\
    \ 2 {\n        return 1\n    } else {\n        return fibfib(n: n-1) + fibfib(n:\
    \ n-2) + fibfib(n: n-3)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009748
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    return 0\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpn0hqqvzf/tmpn0hqqvzf.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaae7839c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaae7530b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaae7530988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaae752f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn0hqqvzf                        0x000055aef70df1b8 <unavailable> + 4536

    5    libc.so.6                          0x00002aaae7a25460 __libc_start_main +
    245

    6    tmpn0hqqvzf                        0x000055aef70dee69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660009748
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    return -1\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmplzsnus53/tmplzsnus53.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b45d50a3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b45d4d9ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b45d4d9a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b45d4d997b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplzsnus53                        0x000055ab9d2c81b8 <unavailable> + 4536

    5    libc.so.6                          0x00002b45d528f460 __libc_start_main +
    245

    6    tmplzsnus53                        0x000055ab9d2c7e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660009748
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    guard n > 0 else\
    \ { return 0 }\n    guard n > 1 else { return 0 }\n    guard n > 2 else { return\
    \ 1 }\n    var currentNum = 1\n    var prevNum = 1\n    var prevPrevNum = 0\n\
    \    for _ in 2..<n {\n        currentNum = prevNum + prevPrevNum + currentNum\n\
    \        prevPrevNum = prevNum\n        prevNum = currentNum\n    }\n    return\
    \ currentNum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\n\
    assert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\n\
    assert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14)\
    \ == 927)"
  status: Exception
  stderr: 'tmp0y40328w/tmp0y40328w.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2f2de4bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2f2db42b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2f2db42988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2f2db417b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0y40328w                        0x00005559683f642e <unavailable> + 5166

    5    libc.so.6                          0x00002b2f2e037460 __libc_start_main +
    245

    6    tmp0y40328w                        0x00005559683f5fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660009748
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n\
    \        return 0\n    } else if n == 1 {\n        return 0\n    } else if n ==\
    \ 2 {\n        return 1\n    } else {\n        return fibfib(n: n-1) + fibfib(n:\
    \ n-2) + fibfib(n: n-3)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009748
- exit_code: -1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    return n == 0\
    \ ? 0 : (1...n).reduce(0, { $0 + fibfib(n: $1) })\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n:\
    \ 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n:\
    \ 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660009754
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  if n < 2 {\n   \
    \ return 0\n  } else if n == 2 {\n    return 1\n  } else {\n    var x = 0\n  \
    \  var y = 0\n    var z = 1\n    for _ in 3...n {\n      x = y\n      y = z\n\
    \      z = x + y + z\n    }\n    return z\n  }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n:\
    \ 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n:\
    \ 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpd547squz/tmpd547squz.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6a751ccc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6a74ec3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6a74ec3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6a74ec27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd547squz                        0x0000564eb50e042e <unavailable> + 5166

    5    libc.so.6                          0x00002b6a753b8460 __libc_start_main +
    245

    6    tmpd547squz                        0x0000564eb50dffe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660009748
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    if n < 0 {\n \
    \       return -1\n    } else if n < 2 {\n        return 0\n    } else if n ==\
    \ 2 {\n        return 1\n    } else {\n        return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmp__g8v6j9.swift:22:23: error: missing argument label 'n:' in call\n\
    \        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                    \
    \  ^\n                      n: \n/tmp/tmp__g8v6j9.swift:22:37: error: missing\
    \ argument label 'n:' in call\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \                                    ^\n                                    n:\
    \ \n/tmp/tmp__g8v6j9.swift:22:51: error: missing argument label 'n:' in call\n\
    \        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                    \
    \                              ^\n                                           \
    \       n: \n"
  stdout: ''
  timestamp: 1660009748
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    if n < 2 {\n \
    \       return 0\n    }\n    if n == 2 {\n        return 1\n    }\n    var nums\
    \ = [0,0,1]\n    for _ in 3...n {\n        nums.append(nums[0] + nums[1] + nums[2])\n\
    \        nums.removeFirst()\n    }\n    return nums[0] + nums[1] + nums[2]\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpr2kl_jr6/tmpr2kl_jr6.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b709b601c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b709b2f8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b709b2f8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b709b2f77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr2kl_jr6                        0x000055749870368e <unavailable> + 5774

    5    libc.so.6                          0x00002b709b7ed460 __libc_start_main +
    245

    6    tmpr2kl_jr6                        0x0000557498703249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1660009749
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n\
    \        return 0\n    } else if n == 1 {\n        return 0\n    } else if n ==\
    \ 2 {\n        return 1\n    } else {\n        return fibfib(n: n-1) + fibfib(n:\
    \ n-2) + fibfib(n: n-3)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009748
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    var stack = [0,\
    \ 0, 1]\n    if n <= 3 {\n        return stack[n]\n    }\n    for i in 3...n {\n\
    \        let cur = stack[0] + stack[1] + stack[2]\n        stack[0] = stack[1]\n\
    \        stack[1] = stack[2]\n        stack[2] = cur\n    }\n    return stack[2]\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009749
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    var n1 = 0\n \
    \   var n2 = 0\n    var n3 = 1\n    for _ in 2...n {\n        let res = n1 + n2\
    \ + n3\n        n1 = n2\n        n2 = n3\n        n3 = res\n    }\n    return\
    \ n3\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n:\
    \ 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n:\
    \ 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002ab025c9fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab025996561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ab025996286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ab02599613c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ab025995bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpdh70g_ag                        0x000055f231614761 <unavailable> + 5985

    6    tmpdh70g_ag                        0x000055f231614346 <unavailable> + 4934

    7    libc.so.6                          0x00002ab025e8b460 __libc_start_main +
    245

    8    tmpdh70g_ag                        0x000055f231613fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660009749
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  if n < 2 {\n   \
    \ return 0\n  }\n  if n == 2 {\n    return 1\n  }\n  var a = 0\n  var b = 0\n\
    \  var c = 1\n  var current = 0\n  for _ in 3...n {\n    current = a + b + c\n\
    \    a = b\n    b = c\n    c = current\n  }\n  return current\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n:\
    \ 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n:\
    \ 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009749
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    // your code here\n\
    \    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\n\
    assert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\n\
    assert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14)\
    \ == 927)"
  status: Exception
  stderr: 'tmp50tdcwdy/tmp50tdcwdy.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b735e1ccc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b735dec3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b735dec3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b735dec27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp50tdcwdy                        0x00005605b170f1b8 <unavailable> + 4536

    5    libc.so.6                          0x00002b735e3b8460 __libc_start_main +
    245

    6    tmp50tdcwdy                        0x00005605b170ee69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660009749
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    if n < 3 {\n \
    \       return n - 1\n    }\n    return fibfib(n: n - 1) + fibfib(n: n - 2) +\
    \ fibfib(n: n - 3)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\n\
    assert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\n\
    assert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14)\
    \ == 927)"
  status: Exception
  stderr: 'tmp01ij387q/tmp01ij387q.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b671f30bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b671f002b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b671f002988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b671f0017b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp01ij387q                        0x000055a4f7ce42ae <unavailable> + 4782

    5    libc.so.6                          0x00002b671f4f7460 __libc_start_main +
    245

    6    tmp01ij387q                        0x000055a4f7ce3e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660009749
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    var arr = [0,0,1]\n\
    \    if n < 3 {\n        return arr[n]\n    }\n    for index in 3...n {\n    \
    \    arr.append(arr[index-1] + arr[index-2] + arr[index-3])\n    }\n    return\
    \ arr[n]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\n\
    assert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\n\
    assert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14)\
    \ == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009749
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    return 0\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpn0hqqvzf/tmpn0hqqvzf.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaae7839c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaae7530b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaae7530988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaae752f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn0hqqvzf                        0x000055aef70df1b8 <unavailable> + 4536

    5    libc.so.6                          0x00002aaae7a25460 __libc_start_main +
    245

    6    tmpn0hqqvzf                        0x000055aef70dee69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660009748
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    \n    if n ==\
    \ 0 {\n        return 0\n    }\n    \n    if n == 1 {\n        return 0\n    }\n\
    \    \n    if n == 2 {\n        return 1\n    }\n    \n    if n == 3 {\n     \
    \   return 1\n    }\n    \n    if n == 4 {\n        return 2\n    }\n    \n  \
    \  if n == 5 {\n        return 4\n    }\n    \n    if n == 6 {\n        return\
    \ 7\n    }\n    \n    if n == 7 {\n        return 13\n    }\n    \n    if n ==\
    \ 8 {\n        return 24\n    }\n    \n    if n == 9 {\n        return 44\n  \
    \  }\n    \n    if n == 10 {\n        return 81\n    }\n    \n    if n == 11 {\n\
    \        return 149\n    }\n    \n    if n == 12 {\n        return 274\n    }\n\
    \    \n    if n == 13 {\n        return 504\n    }\n    \n    if n == 14 {\n \
    \       return 927\n    }\n    \n    if n == 15 {\n        return 1705\n    }\n\
    \    \n    if n == 16 {\n        return 3136\n    }\n    \n    if n == 17 {\n\
    \        return 5768\n    }\n    \n    if n == 18 {\n        return 10609\n  \
    \  }\n    \n    if n == 19 {\n        return 19513\n    }\n    \n    if n == 20\
    \ {\n        return 35890\n    }\n    \n    if n == 21 {\n        return 66012\n\
    \    }\n    \n    if n == 22 {\n        return 121415\n    }\n    \n    if n ==\
    \ 23 {\n        return 223317\n    }\n    \n    if n == 24 {\n        return 410744\n\
    \    }\n    \n    if n == 25 {\n        return 755476\n    }\n    \n    if n ==\
    \ 26 {\n        return 1389537\n    }\n    \n    if n == 27 {\n        return\
    \ 2555757\n    }\n    \n    if n == 28 {\n        return 4700770\n    }\n    \n\
    \    if n == 29 {\n        return 8646064\n    }\n    \n    if n ==\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: '/tmp/tmpsl63h4ks.swift:137:1: error: expected expression after operator

    }

    ^

    '
  stdout: ''
  timestamp: 1660009748
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    return 0\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpn0hqqvzf/tmpn0hqqvzf.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaae7839c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaae7530b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaae7530988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaae752f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn0hqqvzf                        0x000055aef70df1b8 <unavailable> + 4536

    5    libc.so.6                          0x00002aaae7a25460 __libc_start_main +
    245

    6    tmpn0hqqvzf                        0x000055aef70dee69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660009748
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n\
    \        return 0\n    } else if n == 1 {\n        return 0\n    } else if n ==\
    \ 2 {\n        return 1\n    } else {\n        return fibfib(n: n-1) + fibfib(n:\
    \ n-2) + fibfib(n: n-3)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009748
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    return 0\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpn0hqqvzf/tmpn0hqqvzf.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaae7839c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaae7530b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaae7530988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaae752f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn0hqqvzf                        0x000055aef70df1b8 <unavailable> + 4536

    5    libc.so.6                          0x00002aaae7a25460 __libc_start_main +
    245

    6    tmpn0hqqvzf                        0x000055aef70dee69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660009748
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    // your code here\n\
    \    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\n\
    assert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\n\
    assert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14)\
    \ == 927)"
  status: Exception
  stderr: 'tmp50tdcwdy/tmp50tdcwdy.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b735e1ccc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b735dec3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b735dec3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b735dec27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp50tdcwdy                        0x00005605b170f1b8 <unavailable> + 4536

    5    libc.so.6                          0x00002b735e3b8460 __libc_start_main +
    245

    6    tmp50tdcwdy                        0x00005605b170ee69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660009749
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  if n < 3 {\n   \
    \ return n - 1\n  } else {\n    return fibfib(n: n - 1) + fibfib(n: n - 2) + fibfib(n:\
    \ n - 3)\n  }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\n\
    assert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\n\
    assert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14)\
    \ == 927)"
  status: Exception
  stderr: 'tmpzvvd4ctw/tmpzvvd4ctw.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21ec2abc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21ebfa2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21ebfa2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21ebfa17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzvvd4ctw                        0x00005639ae9762ae <unavailable> + 4782

    5    libc.so.6                          0x00002b21ec497460 __libc_start_main +
    245

    6    tmpzvvd4ctw                        0x00005639ae975e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660009749
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    precondition(n\
    \ >= 0)\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return\
    \ 0\n    }\n    if n == 2 {\n        return 1\n    }\n    var t0 = 0\n    var\
    \ t1 = 0\n    var t2 = 1\n    for _ in 3...n {\n        let sum = t0 + t1 + t2\n\
    \        t0 = t1\n        t1 = t2\n        t2 = sum\n    }\n    return t2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009749
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    guard n > 2 else\
    \ { return n - 1 }\n    var a = 1\n    var b = 1\n    var c = 2\n    var i = 3\n\
    \    while i < n {\n        a = b\n        b = c\n        c = a + b + c\n    \
    \    i += 1\n    }\n    return c\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: Exception
  stderr: 'tmpk8u_1_x1/tmpk8u_1_x1.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab3862eac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab385fe1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab385fe1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab385fe07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk8u_1_x1                        0x000055d4cb4e72ae <unavailable> + 4782

    5    libc.so.6                          0x00002ab3864d6460 __libc_start_main +
    245

    6    tmpk8u_1_x1                        0x000055d4cb4e6e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660009749
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n\
    \        return 0\n    } else if n == 1 {\n        return 0\n    } else if n ==\
    \ 2 {\n        return 1\n    } else {\n        return fibfib(n: n-1) + fibfib(n:\
    \ n-2) + fibfib(n: n-3)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009748
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    \n    var a =\
    \ 0\n    var b = 0\n    var c = 1\n    var d = 1\n    \n    if n == 0 {\n    \
    \    return a\n    }\n    if n == 1 {\n        return b\n    }\n    if n == 2\
    \ {\n        return c\n    }\n    \n    for _ in 2..<n {\n        let temp = a\
    \ + b + c\n        a = b\n        b = c\n        c = d\n        d = temp\n   \
    \ }\n    \n    return d\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: Exception
  stderr: 'tmpctej9e6v/tmpctej9e6v.swift:57: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aec286ecc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aec283e3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aec283e3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aec283e27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpctej9e6v                        0x000055813d3b142e <unavailable> + 5166

    5    libc.so.6                          0x00002aec288d8460 __libc_start_main +
    245

    6    tmpctej9e6v                        0x000055813d3b0fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660009749
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    if n < 2 {\n \
    \       return 0\n    } else if n == 2 {\n        return 1\n    } else {\n   \
    \     return fibfib(n: n-1) + fibfib(n: n-2) + fibfib(n: n-3)\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009749
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    return 0\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpn0hqqvzf/tmpn0hqqvzf.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaae7839c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaae7530b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaae7530988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaae752f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn0hqqvzf                        0x000055aef70df1b8 <unavailable> + 4536

    5    libc.so.6                          0x00002aaae7a25460 __libc_start_main +
    245

    6    tmpn0hqqvzf                        0x000055aef70dee69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660009748
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n\
    \        return 0\n    } else if n == 1 {\n        return 0\n    } else if n ==\
    \ 2 {\n        return 1\n    } else {\n        return fibfib(n: n-1) + fibfib(n:\
    \ n-2) + fibfib(n: n-3)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009748
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    var a = 0\n  \
    \  var b = 0\n    var c = 1\n    var d = a + b + c\n    for _ in 3...n {\n   \
    \     a = b\n        b = c\n        c = d\n        d = a + b + c\n    }\n    return\
    \ d\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n:\
    \ 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n:\
    \ 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b55cc9c6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b55cc6bd561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b55cc6bd286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b55cc6bd13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b55cc6bcbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp3wcnz4j3                        0x000055645b547769 <unavailable> + 5993

    6    tmp3wcnz4j3                        0x000055645b5472cb <unavailable> + 4811

    7    libc.so.6                          0x00002b55ccbb2460 __libc_start_main +
    245

    8    tmp3wcnz4j3                        0x000055645b546fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660009749
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    guard n > 0 else\
    \ { return 0 }\n    var fib1 = 0\n    var fib2 = 0\n    var fib3 = 1\n    var\
    \ index = 2\n    while index < n {\n        fib1 = fib2\n        fib2 = fib3\n\
    \        fib3 = fib1 + fib2 + fib3\n        index += 1\n    }\n    return fib3\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpt9hzqd1y/tmpt9hzqd1y.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3a0317ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3a02e75b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3a02e75988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3a02e747b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt9hzqd1y                        0x00005603521ab233 <unavailable> + 4659

    5    libc.so.6                          0x00002b3a0336a460 __libc_start_main +
    245

    6    tmpt9hzqd1y                        0x00005603521aae69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660009749
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    var a = 0\n  \
    \  var b = 0\n    var c = 1\n    for _ in 1...n {\n        (a, b, c) = (b, c,\
    \ a + b + c)\n    }\n    return a\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009749
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  if n < 3 {\n   \
    \ return n-1\n  } else {\n    return fibfib(n: n-1) + fibfib(n: n-2) + fibfib(n:\
    \ n-3)\n  }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\n\
    assert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\n\
    assert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14)\
    \ == 927)"
  status: Exception
  stderr: 'tmp2lqm0nbb/tmp2lqm0nbb.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab71325dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab712f54b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab712f54988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab712f537b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2lqm0nbb                        0x000055612bf942ae <unavailable> + 4782

    5    libc.so.6                          0x00002ab713449460 __libc_start_main +
    245

    6    tmp2lqm0nbb                        0x000055612bf93e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660009749
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n\
    \        return 0\n    } else if n == 1 {\n        return 0\n    } else if n ==\
    \ 2 {\n        return 1\n    } else {\n        return fibfib(n: n-1) + fibfib(n:\
    \ n-2) + fibfib(n: n-3)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009748
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  guard n > 2 else\
    \ { return n - 1 }\n  var a = 0\n  var b = 0\n  var c = 1\n  for _ in 3...n {\n\
    \    (a, b, c) = (b, c, a + b + c)\n  }\n  return c\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n:\
    \ 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n:\
    \ 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009749
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n\
    \        return 0\n    } else if n == 1 {\n        return 0\n    } else if n ==\
    \ 2 {\n        return 1\n    } else {\n        return fibfib(n: n-1) + fibfib(n:\
    \ n-2) + fibfib(n: n-3)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009748
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    guard n > 2 else\
    \ { return n - 1 }\n    var a = 0\n    var b = 0\n    var c = 1\n    for _ in\
    \ 2..<n {\n        let d = a + b + c\n        a = b\n        b = c\n        c\
    \ = d\n    }\n    return c\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009749
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n\
    \        return 0\n    } else if n == 1 {\n        return 0\n    } else if n ==\
    \ 2 {\n        return 1\n    } else {\n        return fibfib(n: n-1) + fibfib(n:\
    \ n-2) + fibfib(n: n-3)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009748
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  var n1 = 0\n  var\
    \ n2 = 0\n  var n3 = 1\n  if n == 0 {\n    return 0\n  }\n  if n == 1 {\n    return\
    \ 0\n  }\n  if n == 2 {\n    return 1\n  }\n  for _ in 2..<n {\n    n1 = n2\n\
    \    n2 = n3\n    n3 = n1 + n2 + n3\n  }\n  return n3\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n:\
    \ 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n:\
    \ 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmp38s6v957/tmp38s6v957.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b950b6dcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b950b3d3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b950b3d3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b950b3d27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp38s6v957                        0x000055fd71c7342e <unavailable> + 5166

    5    libc.so.6                          0x00002b950b8c8460 __libc_start_main +
    245

    6    tmp38s6v957                        0x000055fd71c72fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660009749
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    return 0\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpn0hqqvzf/tmpn0hqqvzf.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaae7839c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaae7530b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaae7530988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaae752f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn0hqqvzf                        0x000055aef70df1b8 <unavailable> + 4536

    5    libc.so.6                          0x00002aaae7a25460 __libc_start_main +
    245

    6    tmpn0hqqvzf                        0x000055aef70dee69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660009748
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n\
    \        return 0\n    } else if n == 1 {\n        return 0\n    } else if n ==\
    \ 2 {\n        return 1\n    } else {\n        return fibfib(n: n-1) + fibfib(n:\
    \ n-2) + fibfib(n: n-3)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009748
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    precondition(n\
    \ >= 0)\n    var v1 = 0\n    var v2 = 0\n    var v3 = 1\n    if n <= 1 {\n   \
    \     return v1\n    }\n    if n == 2 {\n        return v3\n    }\n    var v =\
    \ 3\n    while v <= n {\n        let temp = v1 + v2 + v3\n        v1 = v2\n  \
    \      v2 = v3\n        v3 = temp\n        v += 1\n    }\n    return v3\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009749
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    guard n > 2 else\
    \ { return n - 1 }\n    return fibfib(n: n - 1) + fibfib(n: n - 2) + fibfib(n:\
    \ n - 3)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\n\
    assert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\n\
    assert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14)\
    \ == 927)"
  status: Exception
  stderr: 'tmp5ftf30pg/tmp5ftf30pg.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b906f268c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b906ef5fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b906ef5f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b906ef5e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5ftf30pg                        0x00005610d11aa2ae <unavailable> + 4782

    5    libc.so.6                          0x00002b906f454460 __libc_start_main +
    245

    6    tmp5ftf30pg                        0x00005610d11a9e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660009749
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n\
    \        return 0\n    } else if n == 1 {\n        return 0\n    } else if n ==\
    \ 2 {\n        return 1\n    } else {\n        return fibfib(n: n-1) + fibfib(n:\
    \ n-2) + fibfib(n: n-3)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009748
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    return 0\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpn0hqqvzf/tmpn0hqqvzf.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaae7839c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaae7530b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaae7530988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaae752f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn0hqqvzf                        0x000055aef70df1b8 <unavailable> + 4536

    5    libc.so.6                          0x00002aaae7a25460 __libc_start_main +
    245

    6    tmpn0hqqvzf                        0x000055aef70dee69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660009748
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    var prev = [0,\
    \ 0, 1]\n    for _ in 3...n {\n        let next = prev[0] + prev[1] + prev[2]\n\
    \        prev[0] = prev[1]\n        prev[1] = prev[2]\n        prev[2] = next\n\
    \    }\n    return prev[2]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002ac16d514c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac16d20b561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ac16d20b286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ac16d20b13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ac16d20abb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp138vrbc0                        0x0000556c54146920 <unavailable> + 6432

    6    tmp138vrbc0                        0x0000556c5414647b <unavailable> + 5243

    7    libc.so.6                          0x00002ac16d700460 __libc_start_main +
    245

    8    tmp138vrbc0                        0x0000556c54146199 <unavailable> + 4505

    '
  stdout: ''
  timestamp: 1660009749
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n\
    \        return 0\n    } else if n == 1 {\n        return 0\n    } else if n ==\
    \ 2 {\n        return 1\n    } else {\n        return fibfib(n: n-1) + fibfib(n:\
    \ n-2) + fibfib(n: n-3)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009748
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    return 0\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpn0hqqvzf/tmpn0hqqvzf.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaae7839c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaae7530b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaae7530988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaae752f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn0hqqvzf                        0x000055aef70df1b8 <unavailable> + 4536

    5    libc.so.6                          0x00002aaae7a25460 __libc_start_main +
    245

    6    tmpn0hqqvzf                        0x000055aef70dee69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660009748
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    return 0\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpn0hqqvzf/tmpn0hqqvzf.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaae7839c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaae7530b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaae7530988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaae752f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn0hqqvzf                        0x000055aef70df1b8 <unavailable> + 4536

    5    libc.so.6                          0x00002aaae7a25460 __libc_start_main +
    245

    6    tmpn0hqqvzf                        0x000055aef70dee69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660009748
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    if n < 3 {\n \
    \       return n\n    }\n    var f0 = 0\n    var f1 = 0\n    var f2 = 1\n    var\
    \ f3 = 1\n    for _ in 3...n {\n        f3 = f0 + f1 + f2\n        f0 = f1\n \
    \       f1 = f2\n        f2 = f3\n    }\n    return f3\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n:\
    \ 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n:\
    \ 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpkrc8n9ti/tmpkrc8n9ti.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b739ee08c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b739eaffb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b739eaff988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b739eafe7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkrc8n9ti                        0x0000556955975338 <unavailable> + 4920

    5    libc.so.6                          0x00002b739eff4460 __libc_start_main +
    245

    6    tmpkrc8n9ti                        0x0000556955974fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660009749
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    var a = 0\n  \
    \  var b = 0\n    var c = 1\n    var d = 1\n    if n == 0 {\n        return a\n\
    \    }\n    if n == 1 {\n        return b\n    }\n    if n == 2 {\n        return\
    \ c\n    }\n    for _ in 3...n {\n        let sum = a + b + c\n        a = b\n\
    \        b = c\n        c = d\n        d = sum\n    }\n    return d\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmp0c_zbbw2/tmp0c_zbbw2.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aafecc14c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aafec90bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aafec90b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aafec90a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0c_zbbw2                        0x00005594f132f42e <unavailable> + 5166

    5    libc.so.6                          0x00002aafece00460 __libc_start_main +
    245

    6    tmp0c_zbbw2                        0x00005594f132efe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660009749
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    // Write your\
    \ code here\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: Exception
  stderr: 'tmp6ouba6v_/tmp6ouba6v_.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af2c7a6cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af2c7763b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af2c7763988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af2c77627b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6ouba6v_                        0x000056359a0421b8 <unavailable> + 4536

    5    libc.so.6                          0x00002af2c7c58460 __libc_start_main +
    245

    6    tmp6ouba6v_                        0x000056359a041e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660009749
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    var prev3 = 0\n\
    \    var prev2 = 0\n    var prev1 = 1\n    var curr = 0\n    for _ in 1..<n {\n\
    \        curr = prev1 + prev2 + prev3\n        prev3 = prev2\n        prev2 =\
    \ prev1\n        prev1 = curr\n    }\n    return curr\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n:\
    \ 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n:\
    \ 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpb8dx5hya/tmpb8dx5hya.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2e53925c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2e5361cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2e5361c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2e5361b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb8dx5hya                        0x00005585ced4b42e <unavailable> + 5166

    5    libc.so.6                          0x00002b2e53b11460 __libc_start_main +
    245

    6    tmpb8dx5hya                        0x00005585ced4afe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660009749
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    var n = n\n  \
    \  var a = 0\n    var b = 0\n    var c = 1\n    var d = 0\n    while n > 0 {\n\
    \        d = a + b + c\n        a = b\n        b = c\n        c = d\n        n\
    \ -= 1\n    }\n    return d\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: Exception
  stderr: 'tmpeljsr9gt/tmpeljsr9gt.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b588ef26c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b588ec1db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b588ec1d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b588ec1c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeljsr9gt                        0x000055841e0d91b8 <unavailable> + 4536

    5    libc.so.6                          0x00002b588f112460 __libc_start_main +
    245

    6    tmpeljsr9gt                        0x000055841e0d8e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660009749
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    return 0\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpn0hqqvzf/tmpn0hqqvzf.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaae7839c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaae7530b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaae7530988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaae752f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn0hqqvzf                        0x000055aef70df1b8 <unavailable> + 4536

    5    libc.so.6                          0x00002aaae7a25460 __libc_start_main +
    245

    6    tmpn0hqqvzf                        0x000055aef70dee69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660009748
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    var a = 0\n  \
    \  var b = 0\n    var c = 1\n    var i = 2\n    while i < n {\n        let tmp\
    \ = a + b + c\n        a = b\n        b = c\n        c = tmp\n        i += 1\n\
    \    }\n    return c\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: Exception
  stderr: 'tmpyv7gex2u/tmpyv7gex2u.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba07401dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba073d14b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba073d14988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba073d137b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyv7gex2u                        0x0000556998e4d233 <unavailable> + 4659

    5    libc.so.6                          0x00002ba074209460 __libc_start_main +
    245

    6    tmpyv7gex2u                        0x0000556998e4ce69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660009749
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    guard n > 0 else\
    \ { return 0 }\n    var a = 0\n    var b = 0\n    var c = 1\n    for _ in 1..<n\
    \ {\n        let sum = a + b + c\n        a = b\n        b = c\n        c = sum\n\
    \    }\n    return c\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: Exception
  stderr: 'tmpk0ewhbxb/tmpk0ewhbxb.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad8e5136c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad8e4e2db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad8e4e2d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad8e4e2c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk0ewhbxb                        0x000055865a8cc3b3 <unavailable> + 5043

    5    libc.so.6                          0x00002ad8e5322460 __libc_start_main +
    245

    6    tmpk0ewhbxb                        0x000055865a8cbfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660009749
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    // TODO: Implement\
    \ this method.\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: Exception
  stderr: 'tmpzt5dmz0l/tmpzt5dmz0l.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b61cc021c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b61cbd18b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b61cbd18988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b61cbd177b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzt5dmz0l                        0x000055dc8ff7a1b8 <unavailable> + 4536

    5    libc.so.6                          0x00002b61cc20d460 __libc_start_main +
    245

    6    tmpzt5dmz0l                        0x000055dc8ff79e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660009749
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n\
    \        return 0\n    } else if n == 1 {\n        return 0\n    } else if n ==\
    \ 2 {\n        return 1\n    } else {\n        return fibfib(n: n-1) + fibfib(n:\
    \ n-2) + fibfib(n: n-3)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009748
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    return fibfib(n:\
    \ n, cache: [Int: Int]())\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmp8triroy9.swift:15:32: error: extra argument 'cache' in call\n \
    \   return fibfib(n: n, cache: [Int: Int]())\n                 ~~~~~~~~~~~~~~^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009749
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    return fibfibMemo(n:\
    \ n, values: [0, 0, 1])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmp3rltqbe4.swift:15:12: error: cannot find 'fibfibMemo' in scope\n\
    \    return fibfibMemo(n: n, values: [0, 0, 1])\n           ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009749
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    var fib = [0,\
    \ 0, 1]\n    if n < fib.count {\n        return fib[n]\n    }\n    for i in 3...n\
    \ {\n        fib.append(fib[i-1] + fib[i-2] + fib[i-3])\n    }\n    return fib[n]\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009749
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    var a = 0\n  \
    \  var b = 0\n    var c = 1\n    for _ in 1..<n {\n        (a, b, c) = (b, c,\
    \ a + b + c)\n    }\n    return c\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: Exception
  stderr: 'tmpy49l04de/tmpy49l04de.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b47c6b90c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b47c6887b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b47c6887988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b47c68867b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy49l04de                        0x000055e0c5dda3b3 <unavailable> + 5043

    5    libc.so.6                          0x00002b47c6d7c460 __libc_start_main +
    245

    6    tmpy49l04de                        0x000055e0c5dd9fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660009749
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n\
    \        return 0\n    } else if n == 1 {\n        return 0\n    } else if n ==\
    \ 2 {\n        return 1\n    } else {\n        return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmps7fgmfsu.swift:22:23: error: missing argument label 'n:' in call\n\
    \        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                    \
    \  ^\n                      n: \n/tmp/tmps7fgmfsu.swift:22:37: error: missing\
    \ argument label 'n:' in call\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \                                    ^\n                                    n:\
    \ \n/tmp/tmps7fgmfsu.swift:22:51: error: missing argument label 'n:' in call\n\
    \        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                    \
    \                              ^\n                                           \
    \       n: \n"
  stdout: ''
  timestamp: 1660009749
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    return 0\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpn0hqqvzf/tmpn0hqqvzf.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaae7839c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaae7530b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaae7530988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaae752f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn0hqqvzf                        0x000055aef70df1b8 <unavailable> + 4536

    5    libc.so.6                          0x00002aaae7a25460 __libc_start_main +
    245

    6    tmpn0hqqvzf                        0x000055aef70dee69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660009748
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    precondition(n\
    \ >= 0)\n    var result = 0\n    var first = 0\n    var second = 0\n    var third\
    \ = 1\n    for _ in 0..<n {\n        result = first + second + third\n       \
    \ (first, second, third) = (second, third, result)\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmptgc_nywf/tmptgc_nywf.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0c04d9fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0c04a96b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0c04a96988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0c04a957b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptgc_nywf                        0x0000559e40b66338 <unavailable> + 4920

    5    libc.so.6                          0x00002b0c04f8b460 __libc_start_main +
    245

    6    tmptgc_nywf                        0x0000559e40b65fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660009749
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    return 0\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpn0hqqvzf/tmpn0hqqvzf.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaae7839c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaae7530b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaae7530988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaae752f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn0hqqvzf                        0x000055aef70df1b8 <unavailable> + 4536

    5    libc.so.6                          0x00002aaae7a25460 __libc_start_main +
    245

    6    tmpn0hqqvzf                        0x000055aef70dee69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660009748
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    \n    var memo:\
    \ [Int: Int] = [:]\n    \n    func fibFibHelper(n: Int) -> Int {\n        if n\
    \ == 0 {\n            return 0\n        } else if n == 1 {\n            return\
    \ 0\n        } else if n == 2 {\n            return 1\n        } else if let val\
    \ = memo[n] {\n            return val\n        } else {\n            let val =\
    \ fibFibHelper(n: n - 1) + fibFibHelper(n: n - 2) + fibFibHelper(n: n - 3)\n \
    \           memo[n] = val\n            return val\n        }\n    }\n    \n  \
    \  return fibFibHelper(n: n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009749
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  var memo = [Int:\
    \ Int]()\n  func fibfibHelper(n: Int) -> Int {\n    guard n > 2 else { return\
    \ n - 1 }\n    if let memoized = memo[n] {\n      return memoized\n    }\n   \
    \ let result = fibfibHelper(n: n - 1) + fibfibHelper(n: n - 2) + fibfibHelper(n:\
    \ n - 3)\n    memo[n] = result\n    return result\n  }\n  return fibfibHelper(n:\
    \ n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n:\
    \ 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n:\
    \ 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpenjxqrqj/tmpenjxqrqj.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aac5caacc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aac5c7a3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aac5c7a3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aac5c7a27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpenjxqrqj                        0x00005576e672155e <unavailable> + 5470

    5    libc.so.6                          0x00002aac5cc98460 __libc_start_main +
    245

    6    tmpenjxqrqj                        0x00005576e6721119 <unavailable> + 4377

    '
  stdout: ''
  timestamp: 1660009749
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    if n < 3 {\n \
    \       return n-1\n    }\n    var n1 = 0\n    var n2 = 1\n    var n3 = 2\n  \
    \  var i = 3\n    while i <= n {\n        let temp = n1 + n2 + n3\n        n1\
    \ = n2\n        n2 = n3\n        n3 = temp\n        i += 1\n    }\n    return\
    \ n3\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n:\
    \ 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n:\
    \ 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpwiszfznu/tmpwiszfznu.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abb470d6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abb46dcdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abb46dcd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abb46dcc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwiszfznu                        0x0000562558d2f2ae <unavailable> + 4782

    5    libc.so.6                          0x00002abb472c2460 __libc_start_main +
    245

    6    tmpwiszfznu                        0x0000562558d2ee69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660009749
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  if n == 0 {\n  \
    \  return 0\n  }\n  var n1 = 0\n  var n2 = 0\n  var n3 = 1\n  for _ in 1..<n {\n\
    \    n1 = n2\n    n2 = n3\n    n3 = n1 + n2 + n3\n  }\n  return n3\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmp_tkeyt_5/tmp_tkeyt_5.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b473388bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4733582b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4733582988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b47335817b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_tkeyt_5                        0x00005633010b6338 <unavailable> + 4920

    5    libc.so.6                          0x00002b4733a77460 __libc_start_main +
    245

    6    tmp_tkeyt_5                        0x00005633010b5fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660009749
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    if n < 2 {\n \
    \       return 0\n    } else if n == 2 {\n        return 1\n    } else {\n   \
    \     return fibfib(n: n-1) + fibfib(n: n-2) + fibfib(n: n-3)\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009749
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  return 0\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpudf0g8id/tmpudf0g8id.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae0255d7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae0252ceb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae0252ce988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae0252cd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpudf0g8id                        0x0000558468c301b8 <unavailable> + 4536

    5    libc.so.6                          0x00002ae0257c3460 __libc_start_main +
    245

    6    tmpudf0g8id                        0x0000558468c2fe69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660009749
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    if n < 3 {\n \
    \       return n\n    }\n    var a = 0\n    var b = 1\n    var c = 2\n    for\
    \ _ in 3...n {\n        let d = a + b + c\n        a = b\n        b = c\n    \
    \    c = d\n    }\n    return c\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: Exception
  stderr: 'tmppgx4ehqq/tmppgx4ehqq.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3bad8b0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3bad5a7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3bad5a7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3bad5a67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppgx4ehqq                        0x00005611d4891338 <unavailable> + 4920

    5    libc.so.6                          0x00002b3bada9c460 __libc_start_main +
    245

    6    tmppgx4ehqq                        0x00005611d4890fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660009749
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    precondition(n\
    \ >= 0)\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return\
    \ 0\n    }\n    if n == 2 {\n        return 1\n    }\n    var a = 0\n    var b\
    \ = 0\n    var c = 1\n    var i = 3\n    while i <= n {\n        let d = a + b\
    \ + c\n        a = b\n        b = c\n        c = d\n        i += 1\n    }\n  \
    \  return c\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\n\
    assert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\n\
    assert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14)\
    \ == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009749
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    return 0\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpn0hqqvzf/tmpn0hqqvzf.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaae7839c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaae7530b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaae7530988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaae752f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn0hqqvzf                        0x000055aef70df1b8 <unavailable> + 4536

    5    libc.so.6                          0x00002aaae7a25460 __libc_start_main +
    245

    6    tmpn0hqqvzf                        0x000055aef70dee69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660009748
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    var fibonacciSequence\
    \ = [0, 0, 1]\n    for index in 3...n {\n        fibonacciSequence.append(fibonacciSequence[index\
    \ - 1] + fibonacciSequence[index - 2] + fibonacciSequence[index - 3])\n    }\n\
    \    return fibonacciSequence[n]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b144a9a8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b144a69f561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b144a69f286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b144a69f13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b144a69ebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmptc0wf3sm                        0x000055aaae942930 <unavailable> + 6448

    6    tmptc0wf3sm                        0x000055aaae94248b <unavailable> + 5259

    7    libc.so.6                          0x00002b144ab94460 __libc_start_main +
    245

    8    tmptc0wf3sm                        0x000055aaae9421a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660009749
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    \n    if n ==\
    \ 0 {\n        return 0\n    }\n    \n    if n == 1 {\n        return 0\n    }\n\
    \    \n    if n == 2 {\n        return 1\n    }\n    \n    return fibfib(n: n\
    \ - 1) + fibfib(n: n - 2) + fibfib(n: n - 3)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n:\
    \ 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n:\
    \ 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009749
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    var fibs = [0,\
    \ 0, 1]\n    for i in 3...n {\n        fibs.append(fibs[i-1] + fibs[i-2] + fibs[i-3])\n\
    \    }\n    return fibs[n]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002afcdc66ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afcdc361561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002afcdc361286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002afcdc36113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002afcdc360bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpsjq0er74                        0x000056352f979930 <unavailable> + 6448

    6    tmpsjq0er74                        0x000056352f97948b <unavailable> + 5259

    7    libc.so.6                          0x00002afcdc856460 __libc_start_main +
    245

    8    tmpsjq0er74                        0x000056352f9791a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660009749
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    if n < 3 {\n \
    \       return n - 1\n    }\n    var dp = [0, 0, 1]\n    for i in 3...n {\n  \
    \      dp.append(dp[i - 1] + dp[i - 2] + dp[i - 3])\n    }\n    return dp[n]\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009749
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n\
    \        return 0\n    } else if n == 1 {\n        return 0\n    } else if n ==\
    \ 2 {\n        return 1\n    } else {\n        return fibfib(n: n-1) + fibfib(n:\
    \ n-2) + fibfib(n: n-3)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009748
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    // TODO: Write\
    \ your implementation for this function here\n    return 0\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n:\
    \ 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n:\
    \ 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpma2fkla3/tmpma2fkla3.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b591c79ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b591c491b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b591c491988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b591c4907b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpma2fkla3                        0x00005568894061b8 <unavailable> + 4536

    5    libc.so.6                          0x00002b591c986460 __libc_start_main +
    245

    6    tmpma2fkla3                        0x0000556889405e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660009749
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    guard n > 2 else\
    \ { return n - 1 }\n    var a = 0\n    var b = 0\n    var c = 1\n    for _ in\
    \ 3...n {\n        let d = a + b + c\n        a = b\n        b = c\n        c\
    \ = d\n    }\n    return c\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009749
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    if n < 2 {\n \
    \       return 0\n    } else if n == 2 {\n        return 1\n    } else {\n   \
    \     return fibfib(n: n-1) + fibfib(n: n-2) + fibfib(n: n-3)\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009749
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    return 0\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpn0hqqvzf/tmpn0hqqvzf.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaae7839c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaae7530b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaae7530988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaae752f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn0hqqvzf                        0x000055aef70df1b8 <unavailable> + 4536

    5    libc.so.6                          0x00002aaae7a25460 __libc_start_main +
    245

    6    tmpn0hqqvzf                        0x000055aef70dee69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660009748
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    var f0 = 0\n \
    \   var f1 = 0\n    var f2 = 1\n    if n == 0 {\n        return f0\n    } else\
    \ if n == 1 {\n        return f1\n    } else if n == 2 {\n        return f2\n\
    \    }\n    for _ in 3...n {\n        f0 = f1\n        f1 = f2\n        f2 = f0\
    \ + f1 + f2\n    }\n    return f2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: Exception
  stderr: 'tmpathwn3cd/tmpathwn3cd.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af38eef4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af38ebebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af38ebeb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af38ebea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpathwn3cd                        0x0000562c764ad42e <unavailable> + 5166

    5    libc.so.6                          0x00002af38f0e0460 __libc_start_main +
    245

    6    tmpathwn3cd                        0x0000562c764acfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660009749
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    // YOUR CODE HERE\n\
    \    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\n\
    assert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\n\
    assert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14)\
    \ == 927)"
  status: Exception
  stderr: 'tmplbeu2ljt/tmplbeu2ljt.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8b4d055c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8b4cd4cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8b4cd4c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8b4cd4b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplbeu2ljt                        0x000055edccdb71b8 <unavailable> + 4536

    5    libc.so.6                          0x00002b8b4d241460 __libc_start_main +
    245

    6    tmplbeu2ljt                        0x000055edccdb6e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660009749
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    return 0\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpn0hqqvzf/tmpn0hqqvzf.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaae7839c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaae7530b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaae7530988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaae752f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn0hqqvzf                        0x000055aef70df1b8 <unavailable> + 4536

    5    libc.so.6                          0x00002aaae7a25460 __libc_start_main +
    245

    6    tmpn0hqqvzf                        0x000055aef70dee69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660009748
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    guard n > 2 else\
    \ { return n - 1 }\n    var f0 = 0\n    var f1 = 0\n    var f2 = 1\n    for _\
    \ in 3...n {\n        let f3 = f2 + f1 + f0\n        f0 = f1\n        f1 = f2\n\
    \        f2 = f3\n    }\n    return f2\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\n\
    assert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12)\
    \ == 274)\nassert(fibfib(n: 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009749
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    var prevPrev =\
    \ 0\n    var prev = 0\n    var result = 0\n    for i in 0..<n {\n        if i\
    \ == 0 {\n            result = 0\n        } else if i == 1 {\n            result\
    \ = 0\n        } else if i == 2 {\n            result = 1\n        } else {\n\
    \            result = prevPrev + prev + result\n            prevPrev = prev\n\
    \            prev = result\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n:\
    \ 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n:\
    \ 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpjat5x4_s/tmpjat5x4_s.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b80186b7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b80183aeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b80183ae988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b80183ad7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjat5x4_s                        0x000055a58f2b8338 <unavailable> + 4920

    5    libc.so.6                          0x00002b80188a3460 __libc_start_main +
    245

    6    tmpjat5x4_s                        0x000055a58f2b7fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660009749
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  guard n > 2 else\
    \ { return n - 1 }\n  var a = 0\n  var b = 0\n  var c = 1\n  var d = 1\n  for\
    \ _ in 3...n {\n    (a, b, c) = (b, c, c + b + a)\n    d += 1\n  }\n  return c\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009749
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    precondition(n\
    \ >= 0)\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return\
    \ 0\n    }\n    if n == 2 {\n        return 1\n    }\n    return fibfib(n-1) +\
    \ fibfib(n-2) + fibfib(n-3)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpvv762sux.swift:25:19: error: missing argument label 'n:' in call\n\
    \    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                  ^\n   \
    \               n: \n/tmp/tmpvv762sux.swift:25:33: error: missing argument label\
    \ 'n:' in call\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n         \
    \                       ^\n                                n: \n/tmp/tmpvv762sux.swift:25:47:\
    \ error: missing argument label 'n:' in call\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n                                              ^\n           \
    \                                   n: \n"
  stdout: ''
  timestamp: 1660009749
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    \n    if n ==\
    \ 0 {\n        return 0\n    }\n    \n    if n == 1 {\n        return 0\n    }\n\
    \    \n    if n == 2 {\n        return 1\n    }\n    \n    if n > 2 {\n      \
    \  return fibfib(n: n-1) + fibfib(n: n-2) + fibfib(n: n-3)\n    }\n    \n    return\
    \ 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n:\
    \ 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n:\
    \ 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009749
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    // Implement your\
    \ solution here.\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: Exception
  stderr: 'tmpmtsrbb4o/tmpmtsrbb4o.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b50f5c68c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b50f595fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b50f595f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b50f595e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmtsrbb4o                        0x000056245401e1b8 <unavailable> + 4536

    5    libc.so.6                          0x00002b50f5e54460 __libc_start_main +
    245

    6    tmpmtsrbb4o                        0x000056245401de69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660009749
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    if n < 0 {\n \
    \       return -1\n    }\n    if n == 0 {\n        return 0\n    }\n    if n ==\
    \ 1 {\n        return 0\n    }\n    if n == 2 {\n        return 1\n    }\n   \
    \ var first = 0\n    var second = 1\n    var third = 1\n    var current = 0\n\
    \    for _ in 3...n {\n        current = first + second + third\n        first\
    \ = second\n        second = third\n        third = current\n    }\n    return\
    \ current\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\n\
    assert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\n\
    assert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14)\
    \ == 927)"
  status: Exception
  stderr: 'tmp8k7lvyxs/tmp8k7lvyxs.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2d4c8c8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2d4c5bfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2d4c5bf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2d4c5be7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8k7lvyxs                        0x000055db1155a42e <unavailable> + 5166

    5    libc.so.6                          0x00002b2d4cab4460 __libc_start_main +
    245

    6    tmp8k7lvyxs                        0x000055db11559fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660009749
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    var memo = [Int](repeating:\
    \ 0, count: n + 1)\n    return fibfib(n: n, memo: &memo)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n:\
    \ 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n:\
    \ 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmplryzfxye.swift:16:31: error: extra argument 'memo' in call\n  \
    \  return fibfib(n: n, memo: &memo)\n                 ~~~~~~~~~~~~~^~~~~~\n"
  stdout: ''
  timestamp: 1660009749
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    return 0\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpn0hqqvzf/tmpn0hqqvzf.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaae7839c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaae7530b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaae7530988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaae752f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn0hqqvzf                        0x000055aef70df1b8 <unavailable> + 4536

    5    libc.so.6                          0x00002aaae7a25460 __libc_start_main +
    245

    6    tmpn0hqqvzf                        0x000055aef70dee69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660009748
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    if n < 3 {\n \
    \       return n - 1\n    }\n    return fibfib(n: n - 1) + fibfib(n: n - 2) +\
    \ fibfib(n: n - 3)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\n\
    assert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\n\
    assert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14)\
    \ == 927)"
  status: Exception
  stderr: 'tmp01ij387q/tmp01ij387q.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b671f30bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b671f002b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b671f002988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b671f0017b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp01ij387q                        0x000055a4f7ce42ae <unavailable> + 4782

    5    libc.so.6                          0x00002b671f4f7460 __libc_start_main +
    245

    6    tmp01ij387q                        0x000055a4f7ce3e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660009749
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    // TODO: Your\
    \ solution here!\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: Exception
  stderr: 'tmp1q0crn1z/tmp1q0crn1z.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8ca57d8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8ca54cfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8ca54cf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8ca54ce7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1q0crn1z                        0x00005563af8b31b8 <unavailable> + 4536

    5    libc.so.6                          0x00002b8ca59c4460 __libc_start_main +
    245

    6    tmp1q0crn1z                        0x00005563af8b2e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660009749
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    assert(n >= 0)\n\
    \    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 0\n\
    \    }\n    if n == 2 {\n        return 1\n    }\n    var one = 0\n    var two\
    \ = 0\n    var three = 1\n    var four = 0\n    for _ in 4...n {\n        four\
    \ = one + two + three\n        one = two\n        two = three\n        three =\
    \ four\n    }\n    return four\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: Exception
  stderr: 'tmp9fgkqtvb/tmp9fgkqtvb.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afb8b6f9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afb8b3f0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afb8b3f0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afb8b3ef7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9fgkqtvb                        0x0000561c2ea7742e <unavailable> + 5166

    5    libc.so.6                          0x00002afb8b8e5460 __libc_start_main +
    245

    6    tmp9fgkqtvb                        0x0000561c2ea76fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660009749
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    var oneBack =\
    \ 0\n    var twoBack = 0\n    var threeBack = 0\n    for _ in 0..<n {\n      \
    \  let temp = oneBack\n        oneBack = twoBack + threeBack + oneBack\n     \
    \   threeBack = twoBack\n        twoBack = temp\n    }\n    return oneBack\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmprgdjo4_q/tmprgdjo4_q.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3a54e7ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3a54b75b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3a54b75988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3a54b747b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprgdjo4_q                        0x00005629ccd26338 <unavailable> + 4920

    5    libc.so.6                          0x00002b3a5506a460 __libc_start_main +
    245

    6    tmprgdjo4_q                        0x00005629ccd25fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660009749
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n\
    \        return 0\n    } else if n == 1 {\n        return 0\n    } else if n ==\
    \ 2 {\n        return 1\n    } else {\n        return fibfib(n: n-1) + fibfib(n:\
    \ n-2) + fibfib(n: n-3)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009748
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    return 0\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpn0hqqvzf/tmpn0hqqvzf.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaae7839c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaae7530b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaae7530988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaae752f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn0hqqvzf                        0x000055aef70df1b8 <unavailable> + 4536

    5    libc.so.6                          0x00002aaae7a25460 __libc_start_main +
    245

    6    tmpn0hqqvzf                        0x000055aef70dee69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660009748
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    var fibfib = [0,\
    \ 0, 1]\n    if n < 3 {\n        return fibfib[n]\n    }\n    for i in 3...n {\n\
    \        fibfib.append(fibfib[i-1] + fibfib[i-2] + fibfib[i-3])\n    }\n    return\
    \ fibfib[n]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\n\
    assert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\n\
    assert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14)\
    \ == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009749
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    // TODO: - Write\
    \ fibfib()\n    var n1 = 0\n    var n2 = 0\n    var n3 = 1\n    var nth = n\n\
    \    for _ in 3...n {\n        nth = n1 + n2 + n3\n        n1 = n2\n        n2\
    \ = n3\n        n3 = nth\n    }\n    return nth\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n:\
    \ 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n:\
    \ 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b158ec84c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b158e97b561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b158e97b286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b158e97b13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b158e97abb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp06wetf_u                        0x000055e12a159765 <unavailable> + 5989

    6    tmp06wetf_u                        0x000055e12a1592cb <unavailable> + 4811

    7    libc.so.6                          0x00002b158ee70460 __libc_start_main +
    245

    8    tmp06wetf_u                        0x000055e12a158fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660009749
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    var a = 0\n  \
    \  var b = 0\n    var c = 1\n    var d = 0\n    if n == 0 {\n        return 0\n\
    \    }\n    if n == 1 {\n        return 0\n    }\n    if n == 2 {\n        return\
    \ 1\n    }\n    var i = 2\n    while i < n {\n        d = a + b + c\n        a\
    \ = b\n        b = c\n        c = d\n        i += 1\n    }\n    return d\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009749
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n\
    \        return 0\n    } else if n == 1 {\n        return 0\n    } else if n ==\
    \ 2 {\n        return 1\n    } else {\n        return fibfib(n: n-1) + fibfib(n:\
    \ n-2) + fibfib(n: n-3)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009748
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    // Implement function\
    \ here\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: Exception
  stderr: 'tmp54_0aonx/tmp54_0aonx.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7cfee91c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7cfeb88b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7cfeb88988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7cfeb877b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp54_0aonx                        0x0000558ff85541b8 <unavailable> + 4536

    5    libc.so.6                          0x00002b7cff07d460 __libc_start_main +
    245

    6    tmp54_0aonx                        0x0000558ff8553e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660009749
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    return 0\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpn0hqqvzf/tmpn0hqqvzf.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaae7839c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaae7530b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaae7530988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaae752f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn0hqqvzf                        0x000055aef70df1b8 <unavailable> + 4536

    5    libc.so.6                          0x00002aaae7a25460 __libc_start_main +
    245

    6    tmpn0hqqvzf                        0x000055aef70dee69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660009748
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n\
    \        return 0\n    } else if n == 1 {\n        return 0\n    } else if n ==\
    \ 2 {\n        return 1\n    } else {\n        return fibfib(n: n-1) + fibfib(n:\
    \ n-2) + fibfib(n: n-3)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009748
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  var fibfibCache\
    \ = [0, 0, 1]\n  if n <= 2 {\n    return fibfibCache[n]\n  }\n  for _ in 3...n\
    \ {\n    let index = fibfibCache.count - 1\n    let last = fibfibCache[index]\n\
    \    let secondToLast = fibfibCache[index - 1]\n    let thirdToLast = fibfibCache[index\
    \ - 2]\n    fibfibCache.append(last + secondToLast + thirdToLast)\n  }\n  return\
    \ fibfibCache[n]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\n\
    assert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\n\
    assert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14)\
    \ == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009749
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    var a = 0\n  \
    \  var b = 0\n    var c = 1\n    var result = 0\n    for _ in 0..<n {\n      \
    \  result = a + b + c\n        a = b\n        b = c\n        c = result\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\n\
    assert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\n\
    assert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14)\
    \ == 927)"
  status: Exception
  stderr: 'tmpab2f4thk/tmpab2f4thk.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4448d17c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4448a0eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4448a0e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4448a0d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpab2f4thk                        0x0000558ec9095338 <unavailable> + 4920

    5    libc.so.6                          0x00002b4448f03460 __libc_start_main +
    245

    6    tmpab2f4thk                        0x0000558ec9094fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660009749
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n\
    \        return 0\n    } else if n == 1 {\n        return 0\n    } else if n ==\
    \ 2 {\n        return 1\n    } else {\n        return fibfib(n: n-1) + fibfib(n:\
    \ n-2) + fibfib(n: n-3)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009748
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    guard n > 2 else\
    \ { return n - 1 }\n    return fibfib(n: n - 1) + fibfib(n: n - 2) + fibfib(n:\
    \ n - 3)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\n\
    assert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\n\
    assert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14)\
    \ == 927)"
  status: Exception
  stderr: 'tmp5ftf30pg/tmp5ftf30pg.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b906f268c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b906ef5fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b906ef5f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b906ef5e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5ftf30pg                        0x00005610d11aa2ae <unavailable> + 4782

    5    libc.so.6                          0x00002b906f454460 __libc_start_main +
    245

    6    tmp5ftf30pg                        0x00005610d11a9e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660009749
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n\
    \        return 0\n    } else if n == 1 {\n        return 0\n    } else if n ==\
    \ 2 {\n        return 1\n    } else {\n        return fibfib(n: n-1) + fibfib(n:\
    \ n-2) + fibfib(n: n-3)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009748
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    // TODO: Implement\
    \ fibfib\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: Exception
  stderr: 'tmpuor6mrhe/tmpuor6mrhe.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b65296ebc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b65293e2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b65293e2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b65293e17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuor6mrhe                        0x000055decb4b81b8 <unavailable> + 4536

    5    libc.so.6                          0x00002b65298d7460 __libc_start_main +
    245

    6    tmpuor6mrhe                        0x000055decb4b7e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660009749
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    // TODO: Implement\n\
    \    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\n\
    assert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\n\
    assert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14)\
    \ == 927)"
  status: Exception
  stderr: 'tmp1lhbit7m/tmp1lhbit7m.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b562ff5bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b562fc52b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b562fc52988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b562fc517b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1lhbit7m                        0x000055f05e6fb1b8 <unavailable> + 4536

    5    libc.so.6                          0x00002b5630147460 __libc_start_main +
    245

    6    tmp1lhbit7m                        0x000055f05e6fae69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660009749
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    var a = 0\n  \
    \  var b = 0\n    var c = 1\n    for _ in 0..<n {\n        (a, b, c) = (b, c,\
    \ a + b + c)\n    }\n    return a\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009749
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    if n < 0 {\n \
    \       return -1\n    } else if n < 2 {\n        return 0\n    } else if n ==\
    \ 2 {\n        return 1\n    } else {\n        return fibfib(n: n-1) + fibfib(n:\
    \ n-2) + fibfib(n: n-3)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009749
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    guard n > 2 else\
    \ { return n - 1 }\n    var a = 0\n    var b = 0\n    var c = 1\n    for _ in\
    \ 3...n {\n        let n = a + b + c\n        a = b\n        b = c\n        c\
    \ = n\n    }\n    return c\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009749
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    \n    return 0\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmp662yqcyb/tmp662yqcyb.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aacc1c1dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aacc1914b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aacc1914988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aacc19137b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp662yqcyb                        0x00005563820481b8 <unavailable> + 4536

    5    libc.so.6                          0x00002aacc1e09460 __libc_start_main +
    245

    6    tmp662yqcyb                        0x0000556382047e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660009749
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    guard n > 2 else\
    \ { return n - 1 }\n    var a = 0\n    var b = 0\n    var c = 1\n    for _ in\
    \ 3 ... n {\n        let t = a + b + c\n        a = b\n        b = c\n       \
    \ c = t\n    }\n    return c\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009749
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    guard n > 2 else\
    \ { return n - 1 }\n    var a = 0\n    var b = 0\n    var c = 1\n    for _ in\
    \ 3...n {\n        (a, b, c) = (b, c, a + b + c)\n    }\n    return c\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009749
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n\
    \        return 0\n    } else if n == 1 {\n        return 0\n    } else if n ==\
    \ 2 {\n        return 1\n    } else {\n        return fibfib(n: n-1) + fibfib(n:\
    \ n-2) + fibfib(n: n-3)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009748
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    return 0\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpn0hqqvzf/tmpn0hqqvzf.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaae7839c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaae7530b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaae7530988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaae752f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn0hqqvzf                        0x000055aef70df1b8 <unavailable> + 4536

    5    libc.so.6                          0x00002aaae7a25460 __libc_start_main +
    245

    6    tmpn0hqqvzf                        0x000055aef70dee69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660009748
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n\
    \        return 0\n    } else if n == 1 {\n        return 0\n    } else if n ==\
    \ 2 {\n        return 1\n    } else {\n        return fibfib(n: n-1) + fibfib(n:\
    \ n-2) + fibfib(n: n-3)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009748
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    if n < 0 {\n \
    \       return -1\n    } else if n == 0 {\n        return 0\n    } else if n ==\
    \ 1 {\n        return 0\n    } else if n == 2 {\n        return 1\n    } else\
    \ {\n        return fibfib(n: n-1) + fibfib(n: n-2) + fibfib(n: n-3)\n    }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009748
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    return 0\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpn0hqqvzf/tmpn0hqqvzf.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaae7839c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaae7530b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaae7530988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaae752f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn0hqqvzf                        0x000055aef70df1b8 <unavailable> + 4536

    5    libc.so.6                          0x00002aaae7a25460 __libc_start_main +
    245

    6    tmpn0hqqvzf                        0x000055aef70dee69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660009748
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    \n    if n ==\
    \ 0 {\n        return 0\n    }\n    \n    if n == 1 {\n        return 0\n    }\n\
    \    \n    if n == 2 {\n        return 1\n    }\n    \n    return fibfib(n: n\
    \ - 1) + fibfib(n: n - 2) + fibfib(n: n - 3)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n:\
    \ 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n:\
    \ 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009749
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n\
    \        return 0\n    } else if n == 1 {\n        return 0\n    } else if n ==\
    \ 2 {\n        return 1\n    } else {\n        return fibfib(n: n-1) + fibfib(n:\
    \ n-2) + fibfib(n: n-3)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009748
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    guard n > 2 else\
    \ { return n - 1 }\n    var i = 3\n    var a = 0\n    var b = 0\n    var c = 1\n\
    \    while i <= n {\n        let temp = a + b + c\n        a = b\n        b =\
    \ c\n        c = temp\n        i += 1\n    }\n    return c\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n:\
    \ 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n:\
    \ 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009749
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    return 0\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpn0hqqvzf/tmpn0hqqvzf.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaae7839c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaae7530b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaae7530988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaae752f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn0hqqvzf                        0x000055aef70df1b8 <unavailable> + 4536

    5    libc.so.6                          0x00002aaae7a25460 __libc_start_main +
    245

    6    tmpn0hqqvzf                        0x000055aef70dee69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660009748
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n\
    \        return 0\n    } else if n == 1 {\n        return 0\n    } else if n ==\
    \ 2 {\n        return 1\n    } else {\n        return fibfib(n: n-1) + fibfib(n:\
    \ n-2) + fibfib(n: n-3)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009748
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    var a = 0\n  \
    \  var b = 0\n    var c = 1\n    for _ in 0..<n {\n        (a, b, c) = (b, c,\
    \ a + b + c)\n    }\n    return a\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009749
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    var fibs = [0,\
    \ 0, 1]\n    if n == 0 || n == 1 {\n        return fibs[n]\n    }\n    if n ==\
    \ 2 {\n        return fibs[2]\n    }\n    for i in 3...n {\n        fibs[0] =\
    \ fibs[1]\n        fibs[1] = fibs[2]\n        fibs[2] = fibs[0] + fibs[1] + fibs[2]\n\
    \    }\n    return fibs[2]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: Exception
  stderr: 'tmpozl_nz7r/tmpozl_nz7r.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5893839c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5893530b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5893530988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b589352f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpozl_nz7r                        0x0000556ed52145de <unavailable> + 5598

    5    libc.so.6                          0x00002b5893a25460 __libc_start_main +
    245

    6    tmpozl_nz7r                        0x0000556ed5214199 <unavailable> + 4505

    '
  stdout: ''
  timestamp: 1660009750
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n\
    \        return 0\n    } else if n == 1 {\n        return 0\n    } else if n ==\
    \ 2 {\n        return 1\n    } else {\n        return fibfib(n: n-1) + fibfib(n:\
    \ n-2) + fibfib(n: n-3)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009748
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    var n1 = 0\n \
    \   var n2 = 0\n    var n3 = 1\n    var result = 0\n    if n == 0 {\n        return\
    \ 0\n    }\n    if n == 1 {\n        return 0\n    }\n    if n == 2 {\n      \
    \  return 1\n    }\n    for _ in 3...n {\n        result = n1 + n2 + n3\n    \
    \    n1 = n2\n        n2 = n3\n        n3 = result\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009750
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    if n < 2 {\n \
    \       return 0\n    } else if n == 2 {\n        return 1\n    } else {\n   \
    \     return fibfib(n: n-1) + fibfib(n: n-2) + fibfib(n: n-3)\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009749
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    // Implement your\
    \ solution here!\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: Exception
  stderr: 'tmpgn37mtx_/tmpgn37mtx_.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba11f292c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba11ef89b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba11ef89988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba11ef887b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgn37mtx_                        0x000056087daf11b8 <unavailable> + 4536

    5    libc.so.6                          0x00002ba11f47e460 __libc_start_main +
    245

    6    tmpgn37mtx_                        0x000056087daf0e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660009750
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    return fibfibs[n]\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpgatca9av.swift:15:12: error: cannot find 'fibfibs' in scope\n \
    \   return fibfibs[n]\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1660009749
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  var a: Int = 0\n\
    \  var b: Int = 0\n  var c: Int = 1\n  for _ in 0..<n {\n    let new_a = b\n \
    \   let new_b = c\n    let new_c = a + b + c\n    a = new_a\n    b = new_b\n \
    \   c = new_c\n  }\n  return a\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009750
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    return 0\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpn0hqqvzf/tmpn0hqqvzf.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaae7839c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaae7530b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaae7530988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaae752f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn0hqqvzf                        0x000055aef70df1b8 <unavailable> + 4536

    5    libc.so.6                          0x00002aaae7a25460 __libc_start_main +
    245

    6    tmpn0hqqvzf                        0x000055aef70dee69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660009748
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    var first = 0\n\
    \    var second = 0\n    var third = 1\n    if n == 0 {\n        return 0\n  \
    \  }\n    if n == 1 {\n        return 0\n    }\n    if n == 2 {\n        return\
    \ 1\n    }\n    for _ in 3...n {\n        let newNumber = first + second + third\n\
    \        first = second\n        second = third\n        third = newNumber\n \
    \   }\n    return third\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009750
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    if n < 0 {\n \
    \       return -1\n    } else if n < 2 {\n        return 0\n    } else if n ==\
    \ 2 {\n        return 1\n    }\n    var a = 0\n    var b = 0\n    var c = 1\n\
    \    var result = 0\n    for _ in 3...n {\n        result = a + b + c\n      \
    \  a = b\n        b = c\n        c = result\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009750
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    var memo: [Int:\
    \ Int] = [:]\n    func fibfibMemo(_ n: Int) -> Int {\n        if n == 0 {\n  \
    \          return 0\n        } else if n == 1 {\n            return 0\n      \
    \  } else if n == 2 {\n            return 1\n        } else if let cached = memo[n]\
    \ {\n            return cached\n        } else {\n            let rv = fibfibMemo(n\
    \ - 1) + fibfibMemo(n - 2) + fibfibMemo(n - 3)\n            memo[n] = rv\n   \
    \         return rv\n        }\n    }\n    return fibfibMemo(n)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n:\
    \ 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n:\
    \ 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009750
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    guard n > 2 else\
    \ { return n - 1 }\n    var a = 0\n    var b = 0\n    var c = 1\n    for _ in\
    \ 3...n {\n        let d = a + b + c\n        a = b\n        b = c\n        c\
    \ = d\n    }\n    return c\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009749
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    // Your code here\n\
    \    var a = 0\n    var b = 0\n    var c = 1\n    var temp = 0\n    for _ in 1...n\
    \ {\n        temp = a + b + c\n        a = b\n        b = c\n        c = temp\n\
    \    }\n    return a\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009750
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n\
    \        return 0\n    } else if n == 1 {\n        return 0\n    } else if n ==\
    \ 2 {\n        return 1\n    } else {\n        return fibfib(n: n-1) + fibfib(n:\
    \ n-2) + fibfib(n: n-3)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009748
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  var a = 0\n  var\
    \ b = 0\n  var c = 1\n  for _ in 0..<n {\n    a = b\n    b = c\n    c = a + b\
    \ + c\n  }\n  return a\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: Exception
  stderr: 'tmpha0kor_x/tmpha0kor_x.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae7292f7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae728feeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae728fee988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae728fed7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpha0kor_x                        0x000055b8bbc1342e <unavailable> + 5166

    5    libc.so.6                          0x00002ae7294e3460 __libc_start_main +
    245

    6    tmpha0kor_x                        0x000055b8bbc12fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660009750
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n\
    \        return 0\n    } else if n == 1 {\n        return 0\n    } else if n ==\
    \ 2 {\n        return 1\n    } else {\n        return fibfib(n: n-1) + fibfib(n:\
    \ n-2) + fibfib(n: n-3)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009748
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    var fibs = [0,\
    \ 0, 1]\n    var i = 3\n    while i <= n {\n        fibs[i % 3] = fibs[(i - 1)\
    \ % 3] + fibs[(i - 2) % 3] + fibs[(i - 3) % 3]\n        i += 1\n    }\n    return\
    \ fibs[n % 3]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\n\
    assert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\n\
    assert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14)\
    \ == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009750
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    return fibfib_helper(n:\
    \ n, cache: [0, 0, 1])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpn4aijlgx.swift:15:12: error: cannot find 'fibfib_helper' in scope\n\
    \    return fibfib_helper(n: n, cache: [0, 0, 1])\n           ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009750
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    return 0\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpn0hqqvzf/tmpn0hqqvzf.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaae7839c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaae7530b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaae7530988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaae752f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn0hqqvzf                        0x000055aef70df1b8 <unavailable> + 4536

    5    libc.so.6                          0x00002aaae7a25460 __libc_start_main +
    245

    6    tmpn0hqqvzf                        0x000055aef70dee69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660009748
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    return 0\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpn0hqqvzf/tmpn0hqqvzf.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaae7839c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaae7530b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaae7530988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaae752f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn0hqqvzf                        0x000055aef70df1b8 <unavailable> + 4536

    5    libc.so.6                          0x00002aaae7a25460 __libc_start_main +
    245

    6    tmpn0hqqvzf                        0x000055aef70dee69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660009748
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    if n < 2 {\n \
    \       return 0\n    }\n    if n == 2 {\n        return 1\n    }\n    var a =\
    \ 1\n    var b = 0\n    var c = 0\n    var d = 0\n    for _ in 2..<n {\n     \
    \   d = a + b + c\n        c = b\n        b = a\n        a = d\n    }\n    return\
    \ d\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n:\
    \ 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n:\
    \ 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009750
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    return 0\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpn0hqqvzf/tmpn0hqqvzf.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaae7839c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaae7530b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaae7530988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaae752f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn0hqqvzf                        0x000055aef70df1b8 <unavailable> + 4536

    5    libc.so.6                          0x00002aaae7a25460 __libc_start_main +
    245

    6    tmpn0hqqvzf                        0x000055aef70dee69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660009748
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  precondition(n >=\
    \ 0)\n  guard n > 2 else { return n - 1 }\n  var x = 0\n  var y = 0\n  var z =\
    \ 1\n  var result = 1\n  for _ in 3...n {\n    x = y\n    y = z\n    z = result\n\
    \    result = x + y + z\n  }\n  return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n:\
    \ 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n:\
    \ 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmp1y7clunm/tmp1y7clunm.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afac01e8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afabfedfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afabfedf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afabfede7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1y7clunm                        0x0000560efd79a42e <unavailable> + 5166

    5    libc.so.6                          0x00002afac03d4460 __libc_start_main +
    245

    6    tmp1y7clunm                        0x0000560efd799fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660009750
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n\
    \        return 0\n    } else if n == 1 {\n        return 0\n    } else if n ==\
    \ 2 {\n        return 1\n    } else {\n        return fibfib(n: n-1) + fibfib(n:\
    \ n-2) + fibfib(n: n-3)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009748
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    guard n > 2 else\
    \ { return n - 1 }\n    var a = 0\n    var b = 0\n    var c = 1\n    var result\
    \ = 0\n    for _ in 3...n {\n        result = a + b + c\n        a = b\n     \
    \   b = c\n        c = result\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n:\
    \ 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n:\
    \ 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009750
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n\
    \        return 0\n    } else if n == 1 {\n        return 0\n    } else if n ==\
    \ 2 {\n        return 1\n    } else {\n        return fibfib(n: n-1) + fibfib(n:\
    \ n-2) + fibfib(n: n-3)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009748
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  var n1 = 0\n  var\
    \ n2 = 0\n  var n3 = 1\n  var result = 0\n  if n == 0 {\n    return 0\n  }\n \
    \ if n == 1 {\n    return 0\n  }\n  if n == 2 {\n    return 1\n  }\n  for _ in\
    \ 3...n {\n    result = n1 + n2 + n3\n    n1 = n2\n    n2 = n3\n    n3 = result\n\
    \  }\n  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009750
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    if n < 0 {\n \
    \       fatalError(\"The input must be larger than or equal to 0.\")\n    } else\
    \ if n == 0 {\n        return 0\n    } else if n == 1 {\n        return 0\n  \
    \  } else if n == 2 {\n        return 1\n    }\n    var last = [0, 0, 1]\n   \
    \ for _ in 0..<n-3 {\n        last[0] = last[1]\n        last[1] = last[2]\n \
    \       last[2] = last[0] + last[1] + last[2]\n    }\n    return last[2]\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpet2a951y/tmpet2a951y.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b27e0965c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b27e065cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b27e065c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b27e065b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpet2a951y                        0x000055e62f31166e <unavailable> + 5742

    5    libc.so.6                          0x00002b27e0b51460 __libc_start_main +
    245

    6    tmpet2a951y                        0x000055e62f311229 <unavailable> + 4649

    '
  stdout: ''
  timestamp: 1660009750
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    guard n > 2 else\
    \ { return n - 1 }\n    return fibfib(n: n - 1) + fibfib(n: n - 2) + fibfib(n:\
    \ n - 3)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\n\
    assert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\n\
    assert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14)\
    \ == 927)"
  status: Exception
  stderr: 'tmp5ftf30pg/tmp5ftf30pg.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b906f268c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b906ef5fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b906ef5f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b906ef5e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5ftf30pg                        0x00005610d11aa2ae <unavailable> + 4782

    5    libc.so.6                          0x00002b906f454460 __libc_start_main +
    245

    6    tmp5ftf30pg                        0x00005610d11a9e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660009749
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    precondition(n\
    \ >= 0)\n    return n < 3 ? 0 : fibfib(n: n - 1) + fibfib(n: n - 2) + fibfib(n:\
    \ n - 3)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\n\
    assert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\n\
    assert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14)\
    \ == 927)"
  status: Exception
  stderr: 'tmpxdmo0gbh/tmpxdmo0gbh.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0c2cb92c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0c2c889b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0c2c889988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0c2c8887b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxdmo0gbh                        0x00005603cab0c1b8 <unavailable> + 4536

    5    libc.so.6                          0x00002b0c2cd7e460 __libc_start_main +
    245

    6    tmpxdmo0gbh                        0x00005603cab0be69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660009750
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    if n < 2 {\n \
    \       return 0\n    }\n    var arr = [Int](repeating: 0, count: n + 1)\n   \
    \ arr[1] = 0\n    arr[2] = 1\n    for i in 3...n {\n        arr[i] = arr[i - 1]\
    \ + arr[i - 2] + arr[i - 3]\n    }\n    return arr[n]\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n:\
    \ 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n:\
    \ 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b2eb7bc2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2eb78b9561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b2eb78b9286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b2eb78b913c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b2eb78b8bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpvg4rsjin                        0x0000559dd9c96906 <unavailable> + 6406

    6    tmpvg4rsjin                        0x0000559dd9c963eb <unavailable> + 5099

    7    libc.so.6                          0x00002b2eb7dae460 __libc_start_main +
    245

    8    tmpvg4rsjin                        0x0000559dd9c96109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660009750
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    precondition(n\
    \ >= 0)\n    var a = 0\n    var b = 0\n    var c = 1\n    for _ in 0..<n {\n \
    \       (a, b, c) = (b, c, a + b + c)\n    }\n    return a\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n:\
    \ 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n:\
    \ 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009750
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    if n < 3 {\n \
    \       return n - 1\n    }\n    var a = 0\n    var b = 0\n    var c = 1\n   \
    \ for _ in 3...n {\n        (a, b, c) = (b, c, a + b + c)\n    }\n    return c\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009750
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    \n    if n ==\
    \ 0 {\n        return 0\n    }\n    \n    if n == 1 {\n        return 0\n    }\n\
    \    \n    if n == 2 {\n        return 1\n    }\n    \n    return fibfib(n: n\
    \ - 1) + fibfib(n: n - 2) + fibfib(n: n - 3)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n:\
    \ 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n:\
    \ 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009749
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    var first = 0\n\
    \    var second = 0\n    var third = 1\n    for _ in 0..<n {\n        let fourth\
    \ = first + second + third\n        first = second\n        second = third\n \
    \       third = fourth\n    }\n    return first\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n:\
    \ 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n:\
    \ 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009750
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    var result: Int\
    \ = 0\n    var prev: Int = 0\n    var prevPrev: Int = 0\n    var prevPrevPrev:\
    \ Int = 0\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n       \
    \ return 0\n    }\n    if n == 2 {\n        return 1\n    }\n    for i in 2..<n\
    \ {\n        prevPrevPrev = prevPrev\n        prevPrev = prev\n        prev =\
    \ result\n        result = prev + prevPrev + prevPrevPrev\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpf2m9v019/tmpf2m9v019.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad082927c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad08261eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad08261e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad08261d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf2m9v019                        0x000055e7ed5aa42e <unavailable> + 5166

    5    libc.so.6                          0x00002ad082b13460 __libc_start_main +
    245

    6    tmpf2m9v019                        0x000055e7ed5a9fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660009750
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n\
    \        return 0\n    } else if n == 1 {\n        return 0\n    } else if n ==\
    \ 2 {\n        return 1\n    } else {\n        return fibfib(n: n-1) + fibfib(n:\
    \ n-2) + fibfib(n: n-3)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009748
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    if n == 0 {\n\
    \        return 0\n    } else if n == 1 {\n        return 0\n    } else if n ==\
    \ 2 {\n        return 1\n    } else {\n        return fibfib(n: n-1) + fibfib(n:\
    \ n-2) + fibfib(n: n-3)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009748
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    var fib = [0,\
    \ 0, 1]\n    if n <= 2 {\n        return fib[n]\n    }\n    for i in 3...n {\n\
    \        fib.append(fib[i-1] + fib[i-2] + fib[i-3])\n    }\n    return fib[n]\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009750
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n\
    /// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    var a = 0\n  \
    \  var b = 0\n    var c = 1\n    var d = 0\n    if n == 0 {\n        return 0\n\
    \    }\n    for _ in 1...n-1 {\n        d = a + b + c\n        a = b\n       \
    \ b = c\n        c = d\n    }\n    return d\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n:\
    \ 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n:\
    \ 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b25124dcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b25121d3561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b25121d3286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b25121d313c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b25121d2bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp2yetmweo                        0x0000559bdb65079b <unavailable> + 6043

    6    tmp2yetmweo                        0x0000559bdb650346 <unavailable> + 4934

    7    libc.so.6                          0x00002b25126c8460 __libc_start_main +
    245

    8    tmp2yetmweo                        0x0000559bdb64ffe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660009750
