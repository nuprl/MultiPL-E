name: HumanEval_65_circular_shift
language: swift
prompt: "\n/// Circular shift the digits of the integer x, shift the digits right\
  \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
  \ return digits reversed.\n/// >>> circular_shift(x: 12, shift: 1)\n/// \"21\"\n\
  /// >>> circular_shift(x: 12, shift: 2)\n/// \"12\"\nfunc circular_shift(x: Int,\
  \ shift: Int) -> String {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(circular_shift(x: 100, shift: 2) == \"001\"\
  )\nassert(circular_shift(x: 12, shift: 2) == \"12\")\nassert(circular_shift(x: 97,\
  \ shift: 8) == \"79\")\nassert(circular_shift(x: 12, shift: 1) == \"21\")\nassert(circular_shift(x:\
  \ 11, shift: 101) == \"11\")"
completions: ["    let digits = digits_of(x: x)\n    let shift = shift % digits.count\n\
    \    let ns = digits.suffix(shift)\n    let prefix = digits.prefix(digits.count\
    \ - shift)\n    return String(ns) + String(prefix)", "    let len = (x * 10).count\
    \ //len = 2\n    let circ = x % pow(10, len - shift)\n    let pre = x / pow(10,\
    \ len - shift)\n    return \"\\(circ)\\(pre)\"", "    let digits = String(x)\n\
    \    let len = digits.count\n    let shift2 = shift % len\n    let first = digits.index(digits.startIndex,\
    \ offsetBy: shift2)\n    let second = digits.index(digits.startIndex, offsetBy:\
    \ len)\n    let shifted = digits[first..<second] + digits[digits.startIndex..<first]\n\
    \    return String(shifted)", "    var m = x\n    var digits = [Int]()\n    var\
    \ reversed_digits = [Int]()\n    // Circular shift the digits of the integer x,\
    \ shift the digits right by shift.\n    while m > 0 {\n        digits.append(m\
    \ % 10)\n        m /= 10\n    }\n    if shift > digits.count {\n        reversed_digits\
    \ = digits.reversed()\n    } else {\n        var z = shift\n        for _ in 0..<shift\
    \ {\n            reversed_digits.append(digits[z])\n            z += 1\n     \
    \   }\n        for _ in 0..<shift {\n            reversed_digits.append(digits[z])\n\
    \            z += 1\n        }\n    }\n    return reversed_digits.map{String($0)}.joined()",
  "    var x = x\n    var xString = String(x)\n    var shift = shift\n    if shift\
    \ > xString.count {\n        xString = String(xString.reversed())\n    } else\
    \ {\n        for _ in 0..<shift {\n            xString = String(xString.dropFirst())\
    \ + String(xString.prefix(1))\n        }\n    }\n    return xString", "    let\
    \ digits = String(x)\n    guard shift <= digits.count else {\n        return String(digits.reversed())\n\
    \    }\n    let shiftAmount = shift % digits.count\n    let left = digits.index(digits.startIndex,\
    \ offsetBy: shiftAmount)\n    let right = digits.index(digits.startIndex, offsetBy:\
    \ digits.count)\n    return digits[left..<right] + digits[digits.startIndex..<left]",
  "    var x = x\n    var shift = shift\n    if shift < 0 {\n        shift = -shift\n\
    \    }\n    shift = shift % number_of_digits(x: x)\n    if shift == 0 {\n    \
    \    return String(x)\n    }\n    let digits = digits_of_int(x: x)\n    let reversed\
    \ = digits.reversed()\n    let new_digits = reversed[0..<shift].reversed() + reversed[shift..<reversed.count]\n\
    \    return string_of_list(l: new_digits)", "    let digits = String(x)\n    let\
    \ count = digits.count\n    let range = digits.index(digits.startIndex, offsetBy:\
    \ shift)..<digits.endIndex\n    let rest = digits[range]\n    if shift >= count\
    \ {\n        return String(digits.reversed())\n    }\n    return rest + digits[digits.startIndex..<range.lowerBound]",
  "    var str = String(x)\n    let num_digits = str.count\n    if shift > num_digits\
    \ {\n        return String(str.reversed())\n    }\n    let start = str.index(str.startIndex,\
    \ offsetBy: shift)\n    let end = str.index(str.endIndex, offsetBy: -shift)\n\
    \    let prefix = str[start..<end]\n    let suffix = str[str.startIndex..<start]\
    \ + str[end..<str.endIndex]\n    return prefix + suffix", "    let digits = String(x)\n\
    \    let length = digits.count\n    let negative = x < 0 ? \"-\" : \"\"\n    if\
    \ shift > length {\n        return negative + String(digits.reversed())\n    }\n\
    \    let start = digits.index(digits.startIndex, offsetBy: shift)\n    let end\
    \ = digits.index(digits.endIndex, offsetBy: -shift)\n    return negative + String(digits[start..<end])\
    \ + digits[digits.startIndex..<start] + digits[end..<digits.endIndex]", "    var\
    \ x = x\n    var digits = 0\n    var power = 1\n    while x > 0 {\n        x /=\
    \ 10\n        digits += 1\n        power *= 10\n    }\n    power /= 10\n    var\
    \ result = 0\n    for _ in 0..<shift {\n        let digit = x % 10\n        x\
    \ /= 10\n        result += digit * power\n    }\n    var remainder = x\n    while\
    \ remainder > 0 {\n        let digit = remainder % 10\n        remainder /= 10\n\
    \        result = result * 10 + digit\n    }\n    return String(result)", "  \
    \  var number = x\n    let count = Int(log10(Double(number)))\n    for _ in 0..<shift\
    \ {\n        number = number / 10 + (number % 10) * Int(pow(10.0, Double(count)))\n\
    \    }\n    return String(number)", "    // e.g. 12, 1 -> 21\n    var x = x\n\
    \    var digits = [Int]()\n    var shift = shift\n    while x > 0 {\n        digits.append(x\
    \ % 10)\n        x /= 10\n    }\n    shift %= digits.count\n    for _ in 0..<shift\
    \ {\n        digits.insert(digits.popLast()!, at: 0)\n    }\n    return digits.map({String($0)}).joined()",
  "    if shift == 0 {\n        return String(x)\n    }\n    var rem = x\n    var\
    \ digits = 0\n    while rem > 0 {\n        rem /= 10\n        digits += 1\n  \
    \  }\n    if shift >= digits {\n        return String(x.reversed())\n    }\n \
    \   let digit = x % Int(pow(10, Double(shift)))\n    return String(digit) + String(x\
    \ / Int(pow(10, Double(shift))))", "    var x = x\n    var shift = shift\n   \
    \ var result = \"\"\n    if shift > x.count {\n        shift = shift - x.count\n\
    \    }\n    while shift > 0 {\n        result = result + \"\\(x.digit(at: 0))\"\
    \n        x = x / 10\n        shift = shift - 1\n    }\n    var remaining = x\n\
    \    while remaining > 0 {\n        result = result + \"\\(remaining.digit(at:\
    \ 0))\"\n        remaining = remaining / 10\n    }\n    return result", "    var\
    \ x_str = String(x)\n    var shift_str = \"\"\n    var shift_left = x_str\n  \
    \  if shift >= x_str.count {\n        shift_str = String(x_str.reversed())\n \
    \   } else {\n        let index = x_str.index(x_str.startIndex, offsetBy: shift)\n\
    \        shift_str = String(x_str[index...])\n        shift_left = String(x_str[..<index])\n\
    \    }\n    return shift_str + shift_left", "    let str = String(x)\n    if shift\
    \ == 0 {\n        return str\n    }\n    var result = \"\"\n    let start_idx\
    \ = shift % str.count\n    let end_idx = str.count\n    for i in (start_idx..<end_idx)\
    \ {\n        result.append(str[i])\n    }\n    for i in (0..<start_idx) {\n  \
    \      result.append(str[i])\n    }\n    return result", "    var xdigits = String(x)\n\
    \    var shiftString = \"\"\n    var shiftLength = 0\n    if shift > xdigits.count\
    \ {\n        shiftLength = shift - xdigits.count\n        shiftString = String(xdigits.reversed())\n\
    \    } else {\n        shiftLength = shift\n        shiftString = String(xdigits[xdigits.index(xdigits.startIndex,\
    \ offsetBy: shift)..<xdigits.endIndex])\n        shiftString.append(String(xdigits[xdigits.startIndex..<xdigits.index(xdigits.startIndex,\
    \ offsetBy: shift)]))\n    }\n    return shiftString", "    var digits = String(x)\n\
    \    if shift > digits.count {\n        return String(digits.reversed())\n   \
    \ }\n    let index = digits.index(digits.startIndex, offsetBy: shift)\n    digits.append(contentsOf:\
    \ digits[..<index])\n    return String(digits.suffix(digits.count - shift))",
  "    let num_digits = 1 + Int(floor(log10(Double(x))))\n    let shift = shift %\
    \ num_digits\n    return x.description.circular_shift(shift: shift)", "    let\
    \ xs = String(x)\n    if shift >= xs.count {\n        return String(xs.reversed())\n\
    \    } else {\n        let i = xs.index(xs.startIndex, offsetBy: shift)\n    \
    \    return String(xs[i...] + xs[..<i])\n    }", "    let digits = String(x)\n\
    \    var shift = shift % digits.count\n    if shift == 0 {\n        return digits\n\
    \    }\n    let prefix = digits.prefix(shift)\n    let suffix = digits.suffix(digits.count\
    \ - shift)\n    return String(suffix) + String(prefix)", "    var result = x.description\n\
    \    if shift > result.count {\n        result = String(result.reversed())\n \
    \   } else {\n        result = String(result.suffix(result.count - shift) + result.prefix(shift))\n\
    \    }\n    return result", "    let digits = String(x)\n    if shift == 0 {\n\
    \        return digits\n    }\n    if shift >= digits.count {\n        return\
    \ String(digits.reversed())\n    }\n    let split = digits.index(digits.startIndex,\
    \ offsetBy: shift)\n    return String(digits[split..<digits.endIndex] + digits[digits.startIndex..<split])",
  "    var digits: [Int] = []\n    var tmp_x = x\n    var result: String = \"\"\n\
    \    while tmp_x > 0 {\n        digits.append(tmp_x % 10)\n        tmp_x /= 10\n\
    \    }\n    if shift >= digits.count {\n        return \"\\(x)\"\n    }\n    var\
    \ i = shift\n    while i < digits.count {\n        result.append(\"\\(digits[i])\"\
    )\n        i += 1\n    }\n    i = 0\n    while i < shift {\n        result.append(\"\
    \\(digits[i])\")\n        i += 1\n    }\n    return result", "    if shift >=\
    \ String(x).count {\n        return String(String(x).reversed())\n    }\n    let\
    \ num_str = String(x)\n    let prefix = String(num_str.suffix(num_str.count -\
    \ shift))\n    let suffix = String(num_str.prefix(shift))\n    return prefix +\
    \ suffix", "    var str = String(x)\n    if shift > str.count {\n        return\
    \ String(str.reversed())\n    }\n    let index = str.index(str.startIndex, offsetBy:\
    \ shift)\n    let new_start = str[index...]\n    let new_end = str[..<index]\n\
    \    return String(new_start + new_end)", "    let num_digits = floor(log10(Double(x)))\
    \ + 1\n    let digits = x % (Int(pow(10, num_digits)) - Int(pow(10, num_digits\
    \ - 1))) + Int(pow(10, num_digits - 1)) * x / Int(pow(10, num_digits))\n    return\
    \ String(digits)", "    let n = String(x).characters.count\n    if shift > n {\n\
    \        return String(String(x).characters.reversed())\n    }\n    let lh = String(x).substring(to:\
    \ String(x).index(String(x).startIndex, offsetBy: shift))\n    let rh = String(x).substring(from:\
    \ String(x).index(String(x).startIndex, offsetBy: shift))\n    return rh + lh",
  "    let string = String(x)\n    let s = string.count\n    let string1 = string.prefix(shift\
    \ % s)\n    let string2 = string.suffix(s - shift % s)\n    return String(string2\
    \ + string1)", "    if shift > x.length {\n        let s = String(x)\n       \
    \ let r = String(s.reversed())\n        return r\n    } else {\n        let s\
    \ = String(x)\n        let r = s.right(shift) + s.left(s.length - shift)\n   \
    \     return r\n    }", "    let digits = String(x)\n    let count = digits.count\n\
    \    var result = \"\"\n    if count == 0 {\n        return result\n    }\n  \
    \  if shift < count {\n        let head = digits.prefix(shift)\n        let tail\
    \ = digits.suffix(count - shift)\n        result = \"\\(tail)\\(head)\"\n    }\
    \ else {\n        result = String(digits.reversed())\n    }\n    return result",
  "  let s = String(x)\n  let length = s.count\n  let shift = shift % length\n  let\
    \ indices = s.indices\n  let half = s[indices[0 ..< shift]]\n  let half_ = s[indices[shift\
    \ ..< length]]\n  return half_ + half", "    var array = Array(String(x))\n  \
    \  var shiftRightCount = shift % array.count\n    while shiftRightCount > 0 {\n\
    \        array.insert(array.removeLast(), at: 0)\n        shiftRightCount -= 1\n\
    \    }\n    return String(array)", "    let str = String(x)\n    if shift > str.count\
    \ {\n        return String(str.reversed())\n    }\n    let index = str.index(str.startIndex,\
    \ offsetBy: shift)\n    return String(str[index...] + str[..<index])", "    if\
    \ shift > String(x).count {\n        return String(String(x).reversed())\n   \
    \ } else {\n        let digits = String(x).compactMap { Int(String($0)) }\n  \
    \      let suffix = digits[0..<shift]\n        let prefix = digits[shift..<digits.count]\n\
    \        return String(prefix + suffix)\n    }", "    if shift == 0 {\n      \
    \  return String(x)\n    }\n    var digits = digits_of(x: x)\n    var tmp: Int\n\
    \    for _ in 0..<shift {\n        tmp = digits.popLast()!\n        digits.insert(tmp,\
    \ at: 0)\n    }\n    return digits.map({ String($0) }).joined()", '    return
    String(repeating: "\(x)", count: shift).prefix(10).map { String($0) }.joined()',
  "  let digits = String(x)\n  if shift >= digits.count {\n    return String(digits.reversed())\n\
    \  }\n  let to_shift = shift - digits.count\n  return String(digits.dropFirst(to_shift)\
    \ + digits.prefix(to_shift))", "    var x = x\n    var shift = shift\n    var\
    \ result = \"\"\n    var digits = 0\n    var ten_pow = 1\n    var shifted_x =\
    \ 0\n    while x > 0 {\n        digits += 1\n        if shift > digits {\n   \
    \         ten_pow *= 10\n        }\n        shifted_x = ten_pow * (x % 10) + shifted_x\n\
    \        x /= 10\n    }\n    if shift > digits {\n        shifted_x = reversed(x:\
    \ shifted_x)\n    }\n    x = shifted_x\n    for _ in 1...digits {\n        result\
    \ += String(x % 10)\n        x /= 10\n    }\n    return result", "    let s =\
    \ String(x)\n    if s.count <= shift {\n        return String(s.reversed())\n\
    \    }\n    else {\n        return s.suffix(s.count - shift) + s.prefix(shift)\n\
    \    }", "    let x_str = String(x)\n    let len = x_str.count\n    if shift >=\
    \ len {\n        return String(String(x).reversed())\n    }\n    let left = x_str[x_str.index(x_str.startIndex,\
    \ offsetBy: shift)..<x_str.endIndex]\n    let right = x_str[x_str.startIndex..<x_str.index(x_str.startIndex,\
    \ offsetBy: shift)]\n    return left + right", "    let d = x.description\n  \
    \  let i = d.count - shift\n    let s = d.suffix(i)\n    let p = d.prefix(d.count\
    \ - i)\n    return (s + p).reversed()", "    var output = \"\\(x)\"\n    for _\
    \ in 0..<shift {\n        let c = output.remove(at: output.startIndex)\n     \
    \   output.append(c)\n    }\n    return output", "    let str = String(x)\n  \
    \  let shift = shift % str.count\n    let shifted = str.dropFirst(shift) + str.prefix(shift)\n\
    \    return String(shifted)", '    return String(String(x).reversed().dropLast(shift).reversed()
    + String(x).reversed().dropFirst(shift).reversed())', "    var str = String(x)\n\
    \    let len = str.count\n    if shift >= len {\n        return String(str.reversed())\n\
    \    } else {\n        let range = str.index(str.startIndex, offsetBy: len - shift)..<str.endIndex\n\
    \        let a = str[range]\n        let b = str[str.startIndex..<str.index(str.startIndex,\
    \ offsetBy: len - shift)]\n        return String(a + b)\n    }", "    var str\
    \ = \"\\(x)\"\n    var result = \"\"\n    if shift >= str.count {\n        for\
    \ i in (0..<str.count).reversed() {\n            result.append(str[str.index(str.startIndex,\
    \ offsetBy: i)])\n        }\n    } else {\n        for i in shift..<str.count\
    \ {\n            result.append(str[str.index(str.startIndex, offsetBy: i)])\n\
    \        }\n        for i in 0..<shift {\n            result.append(str[str.index(str.startIndex,\
    \ offsetBy: i)])\n        }\n    }\n    return result", "    let x_string = String(x)\n\
    \    let (front, back) = x_string.splitAt(distance: shift, from: .end)\n    let\
    \ result = back + front\n    if result.count < x_string.count {\n        return\
    \ String(result.reversed())\n    }\n    return result", "    var digits = [Character]()\n\
    \    var x = x\n    while x > 0 {\n        digits.append(Character(UnicodeScalar(UInt8(x\
    \ % 10))))\n        x /= 10\n    }\n    digits.reverse()\n    if shift > digits.count\
    \ {\n        return String(digits.reversed())\n    }\n    return String(digits[digits.count\
    \ - shift ..< digits.count] + digits[0 ..< digits.count - shift])", "    let str\
    \ = String(x)\n    if shift > str.count {\n        return String(str.reversed())\n\
    \    }\n    let start = str.index(str.startIndex, offsetBy: shift)\n    let prefix\
    \ = str[start...]\n    let suffix = str[str.startIndex..<start]\n    return String(prefix\
    \ + suffix)", "    let num_digits = digit_count(x: x)\n    if shift >= num_digits\
    \ {\n        return String(x).reversed()\n    }\n    let msd = x / Int(truncating:\
    \ pow(10, num_digits - shift - 1) as NSDecimalNumber)\n    let lsd = x % 10\n\
    \    let rest = (x % Int(truncating: pow(10, num_digits - shift - 1) as NSDecimalNumber))\
    \ / 10\n    return String(lsd) + String(rest) + String(msd)", "    let digits\
    \ = String(x)\n    let length = digits.count\n    if length <= shift {\n     \
    \   return String(digits.reversed())\n    }\n    let shift_index = length - shift\n\
    \    let drop = digits.index(digits.startIndex, offsetBy: shift_index)\n    let\
    \ drop_result = digits.dropFirst(shift_index)\n    let prefix = digits.prefix(upTo:\
    \ drop)\n    return \"\\(drop_result)\\(prefix)\"", "  let string_x = String(x)\n\
    \  if shift >= string_x.count {\n    return String(string_x.reversed())\n  }\n\
    \  let shift_right = string_x.dropFirst(shift)\n  let shift_left = string_x.dropLast(string_x.count\
    \ - shift)\n  return shift_right + shift_left", "    let s = String(x)\n    if\
    \ shift >= s.count {\n        return String(s.reversed())\n    }\n    let start\
    \ = s.index(s.startIndex, offsetBy: shift)\n    let end = s.index(s.endIndex,\
    \ offsetBy: -shift)\n    return String(s[start..<end] + s[s.startIndex..<start]\
    \ + s[end..<s.endIndex])", '    return String(x).circular_shift(shift: shift)',
  "    // numdigits is the number of digits in x,\n    // and shift_x is shift places\
    \ to the right.\n    let numdigits = number_of_digits(x: x)\n    let shift_x =\
    \ x / power(x: 10, n: shift)\n    if shift > numdigits {\n        return reverse_digits(x:\
    \ x)\n    }\n    // num_digits_shift_x is the number of digits in shift_x.\n \
    \   let num_digits_shift_x = number_of_digits(x: shift_x)\n    // y is x modulo\
    \ the power of 10 corresponding to the number of digits in shift_x.\n    let y\
    \ = x % power(x: 10, n: num_digits_shift_x)\n    // Convert y to a string and\
    \ append to that string the number of digits in shift_x.\n    let z = String(y)\
    \ + String(num_digits_shift_x)\n    // Convert z to an integer.\n    let zint\
    \ = Int(z)\n    return String(zint!)", "    let x_string = String(x)\n    if x_string.count\
    \ < shift {\n        return String(x_string.reversed())\n    }\n    return \"\\\
    (x_string[x_string.index(x_string.endIndex, offsetBy: -shift)...])\\(x_string[..<x_string.index(x_string.endIndex,\
    \ offsetBy: -shift)])\"", "    let x_str = String(x)\n    if shift >= x_str.count\
    \ {\n        return String(x_str.reversed())\n    }\n    let i = x_str.index(x_str.startIndex,\
    \ offsetBy: shift)\n    return String(x_str[i..<x_str.endIndex] + x_str[x_str.startIndex..<i])",
  "    var digits = [Int]()\n    var x = x\n    for _ in 0..<shift {\n        digits.append(x\
    \ % 10)\n        x /= 10\n    }\n    digits = digits.reversed()\n    var result\
    \ = x\n    var multiplier = 1\n    for digit in digits {\n        result += digit\
    \ * multiplier\n        multiplier *= 10\n    }\n    return \"\\(result)\"", " \
    \   var x = x\n    var shift = shift\n    var digits = [Int]()\n    while x >\
    \ 0 {\n        digits.append(x % 10)\n        x /= 10\n    }\n    while shift\
    \ > digits.count {\n        shift -= digits.count\n    }\n    if shift > 0 {\n\
    \        let right = digits[0..<shift]\n        digits.removeFirst(shift)\n  \
    \      digits.append(contentsOf: right)\n    }\n    return digits.map { \"\\($0)\"\
    \ }.joined()", "    var xString = String(x)\n    if xString.count <= shift {\n\
    \        return String(String(x).reversed())\n    }\n    return String(xString.suffix(shift)\
    \ + xString.prefix(xString.count - shift))", "    var result = \"\"\n    var digits\
    \ = digits_of(n: x)\n    let len = digits.count\n    if len == 0 {\n        return\
    \ \"\"\n    }\n    // First reverse the whole string\n    digits = digits.reversed()\n\
    \    // Now swap the digits at the midpoint, this is the circular shift\n    for\
    \ _ in 0..<shift {\n        if digits.count > 1 {\n            let x = digits.popLast()!\n\
    \            digits.insert(x, at: 0)\n        }\n    }\n    for digit in digits\
    \ {\n        result.append(digit)\n    }\n    return result", "    let s = String(x)\n\
    \    let digits = Array(s)\n    let d = digits.count\n    let p = shift % d\n\
    \    let y = digits[d - p...d-1] + digits[0...d-p-1]\n    return String(y)", " \
    \   let reversed = reverse(x: x)\n    let rotated = rotate(reversed: reversed,\
    \ shift: shift)\n    return String(rotated)", "    let digits = String(x)\n  \
    \  let count = digits.count\n    if shift > count {\n        return String(digits.reversed())\n\
    \    }\n    let first = String(digits.prefix(shift))\n    let last = String(digits.suffix(count\
    \ - shift))\n    return last + first", "    let shiftMod = shift % String(x).count\n\
    \    let shiftString = String(String(x).suffix(shiftMod) + String(x).prefix(String(x).count\
    \ - shiftMod))\n    return shiftString", "    var nums = Array(String(x))\n  \
    \  nums.reverse()\n    var shifted = Array(nums[0..<shift].reversed())\n    shifted.append(contentsOf:\
    \ nums[shift..<nums.count])\n    return String(shifted)", "    var result = String(x)\n\
    \    for _ in 0..<shift {\n        if let digit = result.popLast() {\n       \
    \     result = String(digit) + result\n        }\n    }\n    return result", " \
    \   if shift == 0 {\n        return String(x)\n    }\n    else {\n        let\
    \ digits = get_digits(x: x)\n        let suffix = digits.suffix(shift)\n     \
    \   let prefix = digits.prefix(digits.count - shift)\n        let shifted_digits\
    \ = suffix + prefix\n        return String(shifted_digits)\n    }", "    let s\
    \ = String(x)\n    if shift > s.count {\n        return String(s.reversed())\n\
    \    }\n    return String(s.suffix(shift) + s.prefix(s.count - shift))", "   \
    \ var str = \"\\(x)\"\n    if shift >= str.count {\n        return String(str.reversed())\n\
    \    }\n    let shiftStr = str.suffix(shift)\n    str.removeLast(shift)\n    str.insert(contentsOf:\
    \ shiftStr, at: str.startIndex)\n    return str", "    if shift >= String(x).count\
    \ {\n        return String(x).reversed()\n    }\n    let mid = String(x).index(String(x).startIndex,\
    \ offsetBy: shift)\n    let right = String(x)[mid...]\n    let left = String(x)[...mid]\n\
    \    return String(right + left)", "    let str = String(x)\n    let n = str.count\n\
    \    let shift = shift > n ? n : shift\n    let half = n - shift\n    return \"\
    \\(str[..<half])\\(str[half...])\"", "    var string = String(x)\n    if shift\
    \ >= string.count {\n        return String(string.reversed())\n    } else {\n\
    \        let start = string.index(string.startIndex, offsetBy: shift)\n      \
    \  let end = string.index(string.endIndex, offsetBy: -shift)\n        let prefix\
    \ = string[start...end]\n        let suffix = string[string.startIndex..<start]\n\
    \        return String(prefix + suffix)\n    }", "    let str = String(x)\n  \
    \  let n = str.count\n    if shift == 0 {\n        return str\n    }\n    if shift\
    \ > n {\n        return String(str.reversed())\n    }\n    let right = String(str[0..<(n\
    \ - shift)])\n    let left = String(str[(n - shift)..<n])\n    return left + right",
  "    let str = String(x)\n    let count = str.count\n    guard shift < count else\
    \ {\n        return String(str.reversed())\n    }\n    return String(str.suffix(count\
    \ - shift) + str.prefix(shift))", "    var temp = String(x)\n    if shift > temp.count\
    \ {\n        temp = String(temp.reversed())\n    } else {\n        let index =\
    \ temp.index(temp.startIndex, offsetBy: shift)\n        temp = String(temp[index...]\
    \ + temp[..<index])\n    }\n    return temp", "  let xs = String(x)\n  guard shift\
    \ < xs.count else { return String(xs.reversed()) }\n  let front = xs.index(xs.startIndex,\
    \ offsetBy: shift)\n  let back = xs.index(xs.startIndex, offsetBy: xs.count -\
    \ shift)\n  return String(xs[front..<xs.endIndex] + xs[xs.startIndex..<back])",
  '    return String(shift > String(x).count ? String(x).reversed() : String(x)[String(x).index(String(x).startIndex,
    offsetBy: shift)...] + String(x)[..<String(x).index(String(x).startIndex, offsetBy:
    shift)])', "    // convert to String and reverse\n    var y = String(x).characters.reversed()\n\
    \    if shift < y.count {\n        y = y.suffix(shift) + y.prefix(y.count - shift)\n\
    \    }\n    return String(y.reversed())", "    var x = x\n    var shift = shift\n\
    \    var result = \"\"\n    if shift >= x.digitCount {\n        result = String(x).reversed()\n\
    \    } else {\n        while shift > 0 {\n            let digit = x % 10\n   \
    \         x /= 10\n            result = String(digit) + result\n            shift\
    \ -= 1\n        }\n        result = String(x) + result\n    }\n    return result",
  "  var result = \"\"\n  var string = String(x)\n  let len = string.count\n  if shift\
    \ >= len {\n    result = String(string.reversed())\n  } else {\n    result = string[string.index(string.startIndex,\
    \ offsetBy: shift)...] + string[..<string.index(string.startIndex, offsetBy: shift)]\n\
    \  }\n  return result", '    return String(String(x).reversed().dropLast(shift).reversed()
    + String(x).reversed().dropFirst(shift).reversed())', "    let count = String(x).count\n\
    \    if shift >= count {\n        return String(x).reversed()\n    }\n    let\
    \ right = String(x)[..<shift]\n    let left = String(x)[shift...]\n    return\
    \ String(left + right)", "    let xstring = String(x)\n    let xstringLength =\
    \ xstring.characters.count\n    if shift >= xstringLength {\n        return String(xstring.characters.reversed())\n\
    \    }\n    let xstring_head = xstring.substring(to: xstring.index(xstring.startIndex,\
    \ offsetBy: shift))\n    let xstring_tail = xstring.substring(from: xstring.index(xstring.startIndex,\
    \ offsetBy: shift))\n    return xstring_tail + xstring_head", "    if shift <\
    \ 0 {\n        return \"Wrong shift\"\n    }\n    var string = String(x)\n   \
    \ if shift > string.count {\n        return String(string.reversed())\n    }\n\
    \    let index = string.index(string.startIndex, offsetBy: shift)\n    let sub\
    \ = string[index...]\n    let sub1 = string[..<index]\n    return String(sub +\
    \ sub1)", '    return String(x.description.suffix(shift) + x.description.prefix(x.description.count
    - shift))', "    var out = x.description\n    if shift >= out.count {\n      \
    \  out = String(out.reversed())\n    } else {\n        out = String(out.suffix(shift))\
    \ + String(out.prefix(out.count - shift))\n    }\n    return out", "  var s =\
    \ String(x)\n  let length = s.count\n  if shift > length {\n    s = String(s.reversed())\n\
    \  } else {\n    let startIndex = s.index(s.startIndex, offsetBy: length - shift)\n\
    \    let subString1 = s[s.startIndex..<startIndex]\n    let subString2 = s[startIndex..<s.endIndex]\n\
    \    s = String(subString2 + subString1)\n  }\n  return s", "    var digits =\
    \ String(x)\n    while shift > digits.count {\n        shift -= digits.count\n\
    \    }\n    if shift == digits.count {\n        return String(digits.reversed())\n\
    \    }\n    return digits.dropFirst(shift) + digits.prefix(shift)", "    let num\
    \ = x.description\n    if shift > num.count {\n        return String(num.reversed())\n\
    \    }\n    let firstPart = num.suffix(shift)\n    let lastPart = num.prefix(num.count\
    \ - shift)\n    return String(firstPart + lastPart)", "    let total_digits =\
    \ (x == 0) ? 1 : Int(floor(log10(Double(x)) + 1))\n    let base_mask = Int(pow(10.0,\
    \ Double(total_digits - shift)))\n    let left_mask = Int(pow(10.0, Double(total_digits\
    \ - shift - 1)))\n    let left_shifted = x % base_mask\n    let right_shifted\
    \ = x / base_mask\n\n    if left_shifted == 0 {\n        let reversed = String(Array(String(right_shifted).characters).reverse())\n\
    \        return reversed\n    }\n\n    let left_shifted_digits = (left_shifted\
    \ == 0) ? 1 : Int(floor(log10(Double(left_shifted)) + 1))\n    let right_shifted_digits\
    \ = (right_shifted == 0) ? 1 : Int(floor(log10(Double(right_shifted)) + 1))\n\
    \    let left_zeros = shift - left_shifted_digits\n\n    let zeros = String(count:\
    \ left_zeros, repeatedValue: Character(\"0\"))\n    let left_shifted_str = String(left_shifted)\n\
    \    let right_shifted_str = String(right_shifted)\n    let shifted = zeros +\
    \ left_shifted_str + right_shifted_str\n    return shifted", '    return String(String(x).reversed())',
  '  return String(String(x).reversed().shiftRight(shift))', "    var ret_string =\
    \ String(x)\n    if shift >= ret_string.count {\n        ret_string = String(ret_string.reversed())\n\
    \    } else {\n        ret_string = String(ret_string.suffix(shift)) + String(ret_string.prefix(ret_string.count\
    \ - shift))\n    }\n    return ret_string", "    if shift > String(x).count {\n\
    \        return String(String(x).reversed())\n    }\n    let str = String(x)\n\
    \    let index = str.index(str.startIndex, offsetBy: shift)\n    return String(str[index...]\
    \ + str[..<index])", "    let s = String(x)\n    let n = s.count\n    guard shift\
    \ < n else { return String(s.reversed()) }\n    let ix = s.index(s.startIndex,\
    \ offsetBy: shift)\n    return String(s[ix...] + s[..<ix])", "    var str = String(x)\n\
    \    let l = str.count\n    guard l >= 2 else { return str }\n    let shift =\
    \ shift % l\n    str = String(str.suffix(shift) + str.prefix(l - shift))\n   \
    \ return str", "    let x_str = String(x)\n    guard x_str.count > shift else\
    \ {\n        return String(x_str.reversed())\n    }\n    let shifted = x_str.dropFirst(shift)\
    \ + x_str.prefix(shift)\n    return String(shifted)", "    let digits = String(x)\n\
    \    let shift = shift % digits.count\n    return String(digits.suffix(shift)\
    \ + digits.prefix(digits.count - shift))", "    let x_str = String(x)\n    let\
    \ x_str_rev = String(x_str.reversed())\n    let x_str_shift = String(x_str_rev.dropFirst(shift\
    \ % x_str.count))\n    return String(x_str_shift.reversed())", "    let string\
    \ = String(x)\n    if shift >= string.count {\n        return String(string.reversed())\n\
    \    }\n    let shift = shift % string.count\n    let prefix = string.dropLast(shift)\n\
    \    let suffix = string.dropFirst(string.count - shift)\n    return String(suffix\
    \ + prefix)", "    var string = String(x)\n    var dig_shift = string.characters.count\
    \ - shift\n    if dig_shift < 0 {\n        return String(string.characters.reversed())\n\
    \    }\n    else {\n        return String(string.characters.suffix(shift) + string.characters.prefix(dig_shift))\n\
    \    }", "    let str = String(x)\n    if shift > str.count {\n        return\
    \ String(str.reversed())\n    }\n    else {\n        return String(str.suffix(shift)\
    \ + str.prefix(str.count - shift))\n    }", "    var shiftedDigits = x.description\n\
    \    let n = shiftedDigits.count\n    if shift >= n {\n        return String(shiftedDigits.reversed())\n\
    \    }\n    // let shiftedDigits_reversed = String(shiftedDigits.reversed())\n\
    \    for _ in 0..<shift {\n        let temp = shiftedDigits[shiftedDigits.startIndex]\n\
    \        shiftedDigits.remove(at: shiftedDigits.startIndex)\n        shiftedDigits.append(temp)\n\
    \    }\n    return shiftedDigits", "    // convert to string\n    let str = String(x)\n\
    \    // get the length of the string\n    let len = str.count\n    // if the length\
    \ is less than the shift, reverse the number and return the string\n    if len\
    \ < shift {\n        return String(str.reversed())\n    }\n    // iterate over\
    \ the number of characters in the string\n    for _ in 0..<len {\n        // get\
    \ the substring from the shift to the end of the string\n        let str1 = str[shift..<len]\n\
    \        // get the substring from 0 to the shift\n        let str2 = str[0..<shift]\n\
    \        // return the two substrings concatenated together\n        return str1\
    \ + str2\n    }\n    // return the original string if we get here\n    return\
    \ str", "    let str = \"\\(x)\"\n    guard shift > 0 && shift < str.count else\
    \ {\n        return String(str.reversed())\n    }\n    let half = str.count -\
    \ shift\n    let first = str.prefix(half)\n    let second = str.suffix(shift)\n\
    \    return String(second + first)", "    let digits = String(x)\n    var shifted\
    \ = String(x)\n    if shift > digits.count {\n        shifted = String(digits.reversed())\n\
    \    } else {\n        let start = shifted.index(shifted.startIndex, offsetBy:\
    \ shift)\n        let end = shifted.index(shifted.endIndex, offsetBy: -shift)\n\
    \        shifted = String(shifted[start..<end]) + String(shifted[shifted.startIndex..<start])\
    \ + String(shifted[end..<shifted.endIndex])\n    }\n    return shifted", "   \
    \ var xs = String(x).map { String($0) }\n    if shift > xs.count {\n        return\
    \ String(xs.reversed())\n    }\n    let first = xs[0..<shift]\n    let rest =\
    \ xs[shift..<xs.count]\n    return String(rest + first)", "    let str = String(x)\n\
    \    if shift >= str.count {\n        return String(str.reversed())\n    }\n \
    \   var shifted = str\n    shifted.removeFirst(shift)\n    shifted.append(contentsOf:\
    \ str[0..<shift])\n    return shifted", "    var x = x\n    var digits = 0\n \
    \   for _ in 0..<100 {\n        if x == 0 {\n            break\n        }\n  \
    \      digits += 1\n        x /= 10\n    }\n    if shift >= digits {\n       \
    \ return String(x.reversed())\n    }\n    var x = x\n    var y = 0\n    for _\
    \ in 0..<shift {\n        y = y * 10 + x % 10\n        x /= 10\n    }\n    return\
    \ String(x) + String(y)", '    return String(String(x).reversed().dropLast(shift)
    + String(x).reversed().dropFirst(shift).reversed())', "    var x_str = String(x)\n\
    \    var shift_str = \"\"\n    for _ in 0..<shift {\n        shift_str.append(x_str.removeLast())\n\
    \    }\n    x_str.append(shift_str)\n    return x_str", "    if shift > number_of_digits(x:\
    \ x) {\n        return circular_shift(x: x, shift: shift - number_of_digits(x:\
    \ x))\n    }\n    var shifted_digits = \"\"\n    for i in 0..<number_of_digits(x:\
    \ x) {\n        shifted_digits.append(String(digit(x: x, n: i + shift)))\n   \
    \ }\n    return shifted_digits", '    return String(x).right_circular_shift(shift:
    shift)', "    let x_string = String(x)\n    let digits = x_string.count\n    if\
    \ shift >= digits {\n        return String(x_string.reversed())\n    }\n    return\
    \ x_string[shift..<digits] + x_string[0..<shift]", "    var s = String(x)\n  \
    \  var digits = s.utf8\n    var count = digits.count\n    var offset = shift\n\
    \    while offset > count {\n        offset -= count\n    }\n    let first = String(s.prefix(offset))\n\
    \    let second = String(s.suffix(count - offset))\n    return \"\\(second)\\\
    (first)\"", "    let s = String(x)\n    let shift = shift % s.count\n    return\
    \ String(s.suffix(shift) + s.prefix(s.count - shift))", "    var x_str = String(x)\n\
    \    if shift > x_str.count {\n        return String(x_str.reversed())\n    }\n\
    \    let index = x_str.index(x_str.startIndex, offsetBy: shift)\n    x_str = String(x_str[index..<x_str.endIndex])\
    \ + String(x_str[x_str.startIndex..<index])\n    return x_str", "    var val =\
    \ x\n    var result = \"\"\n    var cnt = 0\n    while val > 0 {\n        let\
    \ tmp = val % 10\n        val /= 10\n        result = \"\\(tmp)\" + result\n \
    \       cnt += 1\n    }\n    let num_digits = cnt\n    if shift >= num_digits\
    \ {\n        return result\n    }\n    let shift_num = shift % num_digits\n  \
    \  let prefix = result[result.index(result.startIndex, offsetBy: shift_num)...]\n\
    \    let suffix = result[result.startIndex..<result.index(result.startIndex, offsetBy:\
    \ shift_num)]\n    return String(prefix + suffix)", '    return "\(x)".chopRight(shift).reverse()
    + "\(x)".chopLeft(shift)', "    var digits = String(x)\n    let count = digits.count\n\
    \    let shift = shift % count\n    return count <= shift ? String(digits.reversed())\
    \ : digits.dropFirst(shift) + digits.prefix(shift)", "    let x_string = String(x)\n\
    \    let x_len = x_string.count\n    let shift = shift % x_len\n    if shift ==\
    \ 0 {\n        return x_string\n    }\n    let start = x_string.index(x_string.startIndex,\
    \ offsetBy: shift)\n    let end = x_string.index(x_string.endIndex, offsetBy:\
    \ -shift)\n    let prefix = x_string[start..<end]\n    let suffix = x_string[x_string.startIndex..<start]\n\
    \    return prefix + suffix", "    var digits: [Int] = []\n    var x = x\n   \
    \ while x > 0 {\n        digits.append(x % 10)\n        x /= 10\n    }\n    let\
    \ n = digits.count\n    if shift >= n {\n        return String(digits.reversed())\n\
    \    }\n    for _ in 0..<shift {\n        let d = digits.removeLast()\n      \
    \  digits.insert(d, at: 0)\n    }\n    return digits.map { String($0) }.joined()",
  '    return x.description.circular_shift(right: shift)', "    let x_string = String(x)\n\
    \    let x_string_count = x_string.count\n    if shift > x_string_count {\n  \
    \      let reversed_string = String(x_string.reversed())\n        return reversed_string\n\
    \    }\n    let shift_in_range = shift % x_string_count\n    let start_idx = x_string.index(x_string.startIndex,\
    \ offsetBy: shift_in_range)\n    let end_idx = x_string.index(x_string.endIndex,\
    \ offsetBy: -shift_in_range)\n    let range = start_idx..<end_idx\n    let shifted_string\
    \ = String(x_string[range])\n    let reversed_start_idx = x_string.index(x_string.startIndex,\
    \ offsetBy: -shift_in_range)\n    let reversed_end_idx = x_string.index(x_string.endIndex,\
    \ offsetBy: shift_in_range)\n    let reversed_range = reversed_start_idx..<reversed_end_idx\n\
    \    let reversed_string = String(x_string[reversed_range].reversed())\n    return\
    \ shifted_string + reversed_string", "    var digits = String(x)\n    var shift\
    \ = shift\n    if shift >= digits.count {\n        return String(digits.reversed())\n\
    \    }\n    var result = digits.substring(from: digits.index(digits.startIndex,\
    \ offsetBy: shift))\n    result += digits.substring(to: digits.index(digits.startIndex,\
    \ offsetBy: shift))\n    return result", "    let xString = String(x)\n    let\
    \ length = xString.count\n    if shift == 0 {\n        return xString\n    } else\
    \ if shift >= length {\n        return String(xString.reversed())\n    } else\
    \ {\n        return String(xString.suffix(shift).reversed()) + String(xString.prefix(length\
    \ - shift))\n    }", "    let string_val = String(x)\n    if shift > string_val.count\
    \ {\n        return String(string_val.reversed())\n    }\n    let index = string_val.index(string_val.startIndex,\
    \ offsetBy: shift)\n    return String(string_val[index..<string_val.endIndex])\
    \ + String(string_val[string_val.startIndex..<index])", "  let xs = \"\\(x)\"\n\
    \  let len = xs.characters.count\n  let shift = shift % len\n  let shift_left\
    \ = xs.substringToIndex(xs.startIndex.advancedBy(shift))\n  let shift_right =\
    \ xs.substringFromIndex(xs.startIndex.advancedBy(shift))\n  return shift_right\
    \ + shift_left", "    let s = String(x)\n    let reversed = String(s.reversed())\n\
    \    let shifted = String(reversed.prefix(shift))\n    let rest = String(reversed.suffix(reversed.count\
    \ - shift))\n    return rest + shifted", "    let digits = Array(String(x)).map{\
    \ Int(String($0))! }\n    if shift > digits.count {\n        return digits.reversed().map(String.init).joined()\n\
    \    }\n    let left = digits[..<(digits.count - shift)]\n    let right = digits[(digits.count\
    \ - shift)...]\n    return (right + left).map(String.init).joined()", "    let\
    \ length = x.description.count\n    if shift == length {\n        return x.description\n\
    \    }\n    if shift > length {\n        return String(x.description.reversed())\n\
    \    }\n    let head = x.description.prefix(shift)\n    let tail = x.description.suffix(length\
    \ - shift)\n    return String(tail + head)", "    var digits = String(x)\n   \
    \ if shift > digits.count {\n        return String(digits.reversed())\n    }\n\
    \    let index = digits.index(digits.startIndex, offsetBy: shift)\n    let prefix\
    \ = digits[digits.startIndex..<index]\n    let suffix = digits[index..<digits.endIndex]\n\
    \    return String(suffix + prefix)", "    let xString = String(x)\n    var xStringCopy\
    \ = xString\n    for _ in 0..<shift {\n        let last = xStringCopy.removeLast()\n\
    \        xStringCopy.insert(last, at: xStringCopy.startIndex)\n    }\n    return\
    \ xStringCopy", '    return String(String(x).reversed().suffix(shift) + String(x).reversed().prefix(String(x).count
    - shift).reversed())', "  var new_x = String(x)\n  if new_x.count > shift {\n\
    \    let index = new_x.index(new_x.startIndex, offsetBy: shift)\n    let prefix\
    \ = new_x[index...]\n    let suffix = new_x[..<index]\n    new_x = String(prefix\
    \ + suffix)\n  } else {\n    new_x = String(new_x.reversed())\n  }\n  return new_x",
  "    let s = String(x)\n    guard s.count > shift else { return String(s.reversed())\
    \ }\n    let i = s.index(s.startIndex, offsetBy: shift)\n    return String(s[i...]\
    \ + s[..<i])", "    let s = String(x)\n    let l = s.count\n    if shift >= l\
    \ {\n        return String(s.reversed())\n    }\n    let idx = l - shift\n   \
    \ return String(s[s.index(s.startIndex, offsetBy: idx) ..< s.endIndex] + s[s.startIndex\
    \ ..< s.index(s.startIndex, offsetBy: idx)])", "    var digits = String(x)\n \
    \   let length = digits.count\n    for _ in 0..<shift {\n        let c = digits.removeFirst()\n\
    \        digits.append(c)\n    }\n    return digits", "    let s = String(x)\n\
    \    let l = s.count\n    if shift > l {\n        return String(s.reversed())\n\
    \    }\n    let i = s.index(s.startIndex, offsetBy: shift)\n    return s[i...]\
    \ + s[..<i]", "    var num = x\n    var result = 0\n    var shift_result = 0\n\
    \    var digits = 0\n    var n = num\n    while n > 0 {\n        n /= 10\n   \
    \     digits += 1\n    }\n    if shift >= digits {\n        while num > 0 {\n\
    \            result = result * 10 + num % 10\n            num /= 10\n        }\n\
    \        return String(result)\n    }\n    let remainder = shift % digits\n  \
    \  var right_shift = digits - remainder\n    while right_shift > 0 {\n       \
    \ shift_result = shift_result * 10 + num % 10\n        num /= 10\n        right_shift\
    \ -= 1\n    }\n    while num > 0 {\n        result = result * 10 + num % 10\n\
    \        num /= 10\n    }\n    return String(shift_result) + String(result)",
  "    var digits = \"\"\n    var x = x\n    while x > 0 {\n        digits = String(x\
    \ % 10) + digits\n        x /= 10\n    }\n    if shift >= digits.count {\n   \
    \     return String(digits.reversed())\n    }\n    let index = digits.index(digits.startIndex,\
    \ offsetBy: shift)\n    return String(digits[index...] + digits[..<index])", " \
    \   var x = x\n    let s = String(x)\n    for _ in 0..<shift {\n        x = (x\
    \ % 10) * 10 + (x / 10)\n    }\n    return String(x)", "    let digits = String(x)\n\
    \    if shift >= digits.count {\n        return String(digits.reversed())\n  \
    \  }\n    let left = digits.index(digits.startIndex, offsetBy: shift)\n    let\
    \ right = digits.index(digits.endIndex, offsetBy: -shift)\n    return String(digits[left\
    \ ..< right])", '  return String(x).reversed().circular_shift(shift: shift).reversed()',
  "    let reversed = String(x).characters.reversed()\n    var shifted: String = \"\
    \"\n    for i in shift..<reversed.count {\n        shifted.append(reversed[i])\n\
    \    }\n    for i in 0..<shift {\n        shifted.append(reversed[i])\n    }\n\
    \    return String(shifted.characters.reversed())", "    let xStr = String(x)\n\
    \    let xStrLen = xStr.count\n    guard shift < xStrLen else {\n        return\
    \ String(xStr.reversed())\n    }\n    let s = xStr.index(xStr.startIndex, offsetBy:\
    \ shift)\n    let e = xStr.index(xStr.endIndex, offsetBy: 0)\n    let ee = xStr.index(xStr.endIndex,\
    \ offsetBy: -shift)\n    let prefix = xStr[s..<e]\n    let suffix = xStr[xStr.startIndex..<ee]\n\
    \    return String(prefix + suffix)", "  if x == 0 {\n    return \"0\"\n  }\n\
    \  if shift == 0 {\n    return String(x)\n  }\n  let ndigits = floor(log10(Double(x)))\
    \ + 1\n  let shift_mod = shift % Int(ndigits)\n  let rem = x % Int(pow(10, Double(shift_mod)))\n\
    \  let div = x / Int(pow(10, Double(shift_mod)))\n  if div == 0 {\n    return\
    \ String(rem)\n  }\n  return String(rem) + String(div)", "    let digits = String(x)\n\
    \    let ndigits = digits.count\n    if shift > ndigits {\n        return String(digits.reversed())\n\
    \    }\n    let digits_start = digits.index(digits.startIndex, offsetBy: shift)\n\
    \    let digits_end = digits.index(digits.endIndex, offsetBy: 0 - shift)\n   \
    \ let digits_head = String(digits[digits_start..<digits.endIndex])\n    let digits_tail\
    \ = String(digits[digits.startIndex..<digits_end])\n    return digits_head + digits_tail",
  "    let digits = x.digits()\n    let numDigits = digits.count\n    if shift > numDigits\
    \ {\n        return String(digits.reversed())\n    }\n    let newDigits = digits[digits.index(digits.startIndex,\
    \ offsetBy: shift)..<digits.endIndex] + digits[digits.startIndex..<digits.index(digits.startIndex,\
    \ offsetBy: shift)]\n    return String(newDigits)", "    var x = x\n    var digits\
    \ = Array<Int>()\n    while x > 0 {\n        digits.append(x % 10)\n        x\
    \ /= 10\n    }\n    if shift > digits.count {\n        return String(digits.reversed())\n\
    \    }\n    let shifted = digits[(digits.count - shift)..<digits.count] + digits[0..<(digits.count\
    \ - shift)]\n    return String(shifted.reversed())", "    if shift == 0 {\n  \
    \      return String(x)\n    }\n    var digits = String(x)\n    let length = digits.count\n\
    \    digits.move(fromOffsets: [digits.index(digits.startIndex, offsetBy: length\
    \ - shift)], toOffset: 0)\n    digits.move(fromOffsets: [digits.index(digits.startIndex,\
    \ offsetBy: length - shift)], toOffset: length - shift)\n    digits.removeSubrange(digits.index(digits.startIndex,\
    \ offsetBy: length - shift)..<digits.endIndex)\n    return digits", "    var s\
    \ = String(x)\n    let n = s.count\n    if shift > n {\n        return String(s.reversed())\n\
    \    }\n    for _ in 0..<shift {\n        s.append(s.removeFirst())\n    }\n \
    \   return s", "    let digits = String(x)\n    let len = digits.count\n    let\
    \ shift = shift % len\n    let shifted_digits = digits[digits.index(digits.startIndex,\
    \ offsetBy: shift)..<digits.endIndex] + digits[digits.startIndex..<digits.index(digits.startIndex,\
    \ offsetBy: shift)]\n    return String(shifted_digits)", "    var xx = x\n   \
    \ var power = 1\n    while (xx / power) > 9 {\n        power *= 10\n    }\n  \
    \  let xx_rev = xx.reversed()\n    let div = power / 10\n    let mm = shift %\
    \ div\n    return \"\\(xx_rev / mm) \\(xx_rev % mm)\"", "    var s = String(x)\n\
    \    guard shift < s.count else {\n        return String(s.reversed())\n    }\n\
    \    s.insert(contentsOf: s.dropLast(shift), at: s.startIndex)\n    return String(s.dropLast(shift))",
  "    let (y, _) = circular_shift(x: x, shift: shift, reverse: false)\n    return\
    \ String(y)", "    let xString = String(x)\n    let count = xString.count\n  \
    \  var result = String(xString.suffix(shift % count))\n    result.append(xString.prefix(count\
    \ - shift % count))\n    return result", "  var string = String(x)\n  while shift\
    \ > string.count {\n    string = String(string.reversed())\n  }\n  let split =\
    \ string.index(string.startIndex, offsetBy: shift)\n  let first = string[..<split]\n\
    \  let second = string[split...]\n  return String(second + first)", "  var x =\
    \ x, shift = shift\n  let num_digits = log10(x) + 1\n  if shift >= num_digits\
    \ {\n    return String(String(x).reversed())\n  }\n  shift = shift % num_digits\n\
    \  var divisor = Int(pow(10, shift))\n  let result = \"\\(x % divisor)\\(x / divisor)\"\
    \n  return result", "    if shift > get_num_digits(x: x) {\n        return String(String(x).reversed())\n\
    \    }\n    return String(String(x).suffix(shift)) + String(String(x).prefix(get_num_digits(x:\
    \ x) - shift))", "    var x = x\n    var shift = shift\n    var string_of_x =\
    \ String(x)\n    var result = \"\"\n    if shift >= string_of_x.count {\n    \
    \    result = String(string_of_x.reversed())\n    } else {\n        var temp =\
    \ \"\"\n        for index in 0..<string_of_x.count {\n            let index =\
    \ string_of_x.index(string_of_x.startIndex, offsetBy: index)\n            if index\
    \ < string_of_x.index(string_of_x.startIndex, offsetBy: shift) {\n           \
    \     temp += String(string_of_x[index])\n            } else {\n             \
    \   result += String(string_of_x[index])\n            }\n        }\n        result\
    \ += temp\n    }\n    return result", "    let ns = \"\\(x)\"\n    var output\
    \ = \"\"\n    let count = ns.count\n    for i in 0..<count {\n        let index\
    \ = (i + shift) % count\n        let char = ns[ns.index(ns.startIndex, offsetBy:\
    \ index)]\n        output.append(char)\n    }\n    return output", "    let numberOfDigits\
    \ = String(x).count\n    if shift > numberOfDigits {\n        return String(x).reversed()\n\
    \    }\n    let digits = String(x)\n    let leftShift = String(digits.prefix(shift))\n\
    \    let rightShift = String(digits.suffix(numberOfDigits - shift))\n    return\
    \ rightShift + leftShift", "    let char = String(x)\n    if char.count <= shift\
    \ {\n        return String(char.reversed())\n    }\n    let begin = char.index(char.startIndex,\
    \ offsetBy: shift)\n    let end = char.index(char.endIndex, offsetBy: -shift)\n\
    \    return String(char[begin..<end])", "    let s = String(x)\n    let n = s.count\n\
    \    if shift >= n {\n        return String(s.reversed())\n    }\n    return String(s.suffix(n\
    \ - shift) + s.prefix(shift))", "    let x_string = String(x)\n    let digit_count\
    \ = x_string.count\n    guard shift < digit_count else {\n        return String(x_string.reversed())\n\
    \    }\n    let index = x_string.index(x_string.startIndex, offsetBy: shift)\n\
    \    let suffix = x_string[index...]\n    let prefix = x_string[..<index]\n  \
    \  return String(suffix + prefix)", "    let y = x.description\n    var y_shifted\
    \ = \"\"\n    if shift < y.count {\n        let i = y.index(y.startIndex, offsetBy:\
    \ shift)\n        y_shifted = String(y[i...] + y[..<i])\n    } else {\n      \
    \  y_shifted = String(y.reversed())\n    }\n    return y_shifted", '    return
    x.description.shifted(shift)', "    let str = String(x)\n    if shift > str.count\
    \ {\n        return String(str.reversed())\n    }\n    let index = str.index(str.startIndex,\
    \ offsetBy: shift)\n    return String(str[index...] + str[..<index])", "    var\
    \ x = x\n    var digits = [Int]()\n    while x > 0 {\n        digits.append(x\
    \ % 10)\n        x /= 10\n    }\n    while shift > digits.count {\n        shift\
    \ -= digits.count\n    }\n    var result = \"\"\n    for d in digits.rotate(shift)\
    \ {\n        result += String(d)\n    }\n    return result", "    var digits =\
    \ String(x)\n    if shift > digits.count {\n        return String(digits.reversed())\n\
    \    }\n    digits.append(contentsOf: digits.prefix(shift))\n    digits.removeFirst(shift)\n\
    \    return digits", "  var str = String(x)\n  var shift = shift % str.count\n\
    \  return shift == 0 ? str : str.suffix(shift) + str.prefix(str.count - shift)",
  "  let xStr = String(x)\n  guard shift < xStr.count else {\n    return String(xStr.reversed())\n\
    \  }\n  let xArr = Array(xStr)\n  return String(xArr[xArr.count - shift ..< xArr.count]\
    \ + xArr[0 ..< xArr.count - shift])", "    var digits = String(x)\n    if shift\
    \ > digits.count {\n        return String(digits.reversed())\n    }\n    let shift_index\
    \ = digits.index(digits.startIndex, offsetBy: shift)\n    return String(digits[shift_index..<digits.endIndex]\
    \ + digits[digits.startIndex..<shift_index])", "    var s = \"\\(x)\"\n    let\
    \ len = s.characters.count\n    let offset = shift % len\n    let new_string =\
    \ String(s.characters.suffix(offset)) + String(s.characters.prefix(len - offset))\n\
    \    return new_string", "    var digits = String(x)\n    let reversed = String(digits.reversed())\n\
    \    let numDigits = digits.count\n    if shift > numDigits {\n        return\
    \ reversed\n    }\n    let prefix = String(reversed.prefix(shift))\n    let suffix\
    \ = String(reversed.suffix(numDigits - shift))\n    return String(prefix + suffix).reversed()",
  "  var s = String(x)\n  if shift > s.count {\n    return String(s.reversed())\n\
    \  }\n  let str = s[s.index(s.startIndex, offsetBy: shift)...]\n  s.removeSubrange(s.startIndex..<s.index(s.startIndex,\
    \ offsetBy: shift))\n  return str + s", "    var x = x\n    var s = \"\"\n   \
    \ while x > 0 {\n        let digit = x % 10\n        s = String(digit) + s\n \
    \       x /= 10\n    }\n    let n = shift % s.count\n    if n == 0 {\n       \
    \ return s\n    }\n    let i = s.index(s.startIndex, offsetBy: n)\n    return\
    \ String(s[i...] + s[..<i])", "    var x = x\n    let n = Int(floor(log10(Double(x))))\
    \ + 1\n    let s = shift % n\n    let m = pow(10, Double(n - s))\n    let q =\
    \ Int(floor(Double(x) / m))\n    let r = Int(Double(x) - (Double(q) * m))\n  \
    \  return \"\\(q)\\(r)\"", "    let length = String(x).count\n    if shift > length\
    \ {\n        return String(String(x).reversed())\n    }\n    let lead = String(x)[0..<shift]\n\
    \    let trail = String(x)[shift..<length]\n    return String(trail + lead)",
  "    // convert the integer x to a string.\n    var text = \"\\(x)\"\n    // reverse\
    \ the string.\n    text = reverse(text: text)\n    // if the shift is bigger than\
    \ the number of digits,\n    // then return the string in reverse.\n    if shift\
    \ > text.count {\n        return text\n    }\n    // if the shift is not bigger\
    \ than the number of digits,\n    // then get the substring after the shift.\n\
    \    let right = text.index(text.startIndex, offsetBy: shift)\n    var rightText\
    \ = text[right...]\n    // append the substring before the shift to rightText.\n\
    \    var leftText = text[..<right]\n    rightText.append(contentsOf: leftText)\n\
    \    // reverse rightText and return it.\n    return reverse(text: String(rightText))",
  "    var digits = String(x)\n    let length = digits.count\n    if length <= shift\
    \ {\n        return String(digits.reversed())\n    }\n    let index = digits.index(digits.startIndex,\
    \ offsetBy: shift)\n    let prefix = digits[..<index]\n    let suffix = digits[index...]\n\
    \    digits = String(suffix) + String(prefix)\n    return digits", "    var s\
    \ = String(x)\n    if shift >= s.count {\n        return String(s.reversed())\n\
    \    }\n    let index = s.index(s.startIndex, offsetBy: shift)\n    s.append(s.prefix(shift))\n\
    \    s.removeSubrange(s.startIndex..<index)\n    return s", "    var x = x\n \
    \   var shift = shift\n    let temp = String(x)\n    var stringArray = [Character]()\n\
    \    if shift > temp.count {\n        x = Int(String(String(x).reversed()))!\n\
    \        return String(x)\n    }\n    for i in temp {\n        stringArray.append(i)\n\
    \    }\n    var newArray = [Character]()\n    for i in stringArray {\n       \
    \ if let j = stringArray.index(of: i) {\n            let k = (j + shift) % stringArray.count\n\
    \            newArray.append(stringArray[k])\n        }\n    }\n    return String(newArray)",
  "    let num_digits = String(x).count\n    if shift >= num_digits {\n        return\
    \ String(String(x).reversed())\n    }\n    let x_string = String(x)\n    let x_string_end\
    \ = x_string.index(x_string.endIndex, offsetBy: -shift)\n    let x_string_begin\
    \ = x_string.index(x_string.startIndex, offsetBy: shift)\n    return String(x_string[x_string_end..<x_string.endIndex])\
    \ + String(x_string[x_string.startIndex..<x_string_begin])", "    let str = \"\
    \\(x)\"\n    if shift >= str.count {\n        return String(str.reversed())\n\
    \    }\n    let firstPart = str.substring(str.startIndex, index: str.startIndex.advanced(by:\
    \ shift))\n    let secondPart = str.substring(str.startIndex.advanced(by: shift),\
    \ index: str.endIndex)\n    return secondPart + firstPart", "    let number_of_digits\
    \ = Int(log10(Double(x)))\n    if shift > number_of_digits {\n        return reverse_string(s:\
    \ String(x))\n    } else {\n        let shifted_x = x % Int(pow(10, Double(shift)))\
    \ * Int(pow(10, Double(number_of_digits + 1 - shift))) + (x / Int(pow(10, Double(shift))))\n\
    \        return String(shifted_x)\n    }", "    var x = x\n    var digits = [Int]()\n\
    \    while x > 0 {\n        digits.append(x % 10)\n        x /= 10\n    }\n  \
    \  if shift > digits.count {\n        return String(digits.reversed())\n    }\n\
    \    let front = digits[digits.count - shift..<digits.count]\n    let end = digits[0..<digits.count\
    \ - shift]\n    return (front + end).map(String.init).joined()", "    var y =\
    \ x\n    var digits = [Character]()\n    while y != 0 {\n        let digit = Character(UnicodeScalar(y\
    \ % 10 + 48)!)\n        digits.append(digit)\n        y /= 10\n    }\n    let\
    \ slen = digits.count\n    if shift > slen {\n        return String(digits.reversed())\n\
    \    }\n    let prefix = digits[0 ..< shift]\n    let suffix = digits[shift ..<\
    \ slen]\n    return String(suffix + prefix)", "    var x_str = \"\\(x)\"\n   \
    \ guard x_str.count > shift else {\n        return String(x_str.reversed())\n\
    \    }\n    x_str.append(contentsOf: x_str.prefix(shift))\n    x_str.removeFirst(shift)\n\
    \    return x_str", "    let digits = digits_of(x: x)\n    if digits.count ==\
    \ 0 {\n        return \"\"\n    }\n    if shift >= digits.count {\n        return\
    \ digits.reversed().map(String.init).joined()\n    }\n    let offset = shift %\
    \ digits.count\n    let slice = Array(digits[digits.count - offset ..< digits.count])\n\
    \    let first = Array(digits[0 ..< digits.count - offset])\n    return (slice\
    \ + first).map(String.init).joined()", "  let n = x.description.count\n  let k\
    \ = shift % n\n  let s = x.description\n  if k == 0 {\n    return s\n  }\n  let\
    \ (h, l) = s.splitAt(k)\n  return l + h", "    var s = String(x)\n    for _ in\
    \ 0..<shift {\n        if let c = s.popLast() {\n            s.insert(c, at: s.startIndex)\n\
    \        }\n    }\n    return s", "    var digits: [Int] = [Int]()\n    var n\
    \ = x\n    for _ in 0..<x.digits {\n        digits.append(n % 10)\n        n /=\
    \ 10\n    }\n    digits.reverse()\n    var shifted = digits\n    if shift > digits.count\
    \ {\n        return digits.map { String($0) }.joined()\n    }\n    for i in 0..<shift\
    \ {\n        shifted.insert(digits[i], at: digits.count)\n    }\n    shifted.removeFirst(shift)\n\
    \    return shifted.map { String($0) }.joined()", "    let xStr = String(x)\n\
    \    let numberOfDigits = xStr.count\n    let shiftMod = shift % numberOfDigits\n\
    \    if shiftMod == 0 {\n        return xStr\n    }\n    let leftIndex = xStr.index(xStr.startIndex,\
    \ offsetBy: shiftMod)\n    let left = xStr[leftIndex...]\n    let right = xStr[..<leftIndex]\n\
    \    return String(left + right)", "    var digits = String(x)\n    if shift >\
    \ digits.count {\n        return String(digits.reversed())\n    }\n    let shiftedDigits\
    \ = digits.suffix(shift) + digits.prefix(digits.count - shift)\n    return String(shiftedDigits)",
  "  var digits = Array(String(x)).map{ Int(String($0))! }\n  while shift > 0 {\n\
    \    let last = digits.removeLast()\n    digits.insert(last, at: 0)\n    shift\
    \ -= 1\n  }\n  return digits.map{ String($0) }.joined()"]
stop_tokens:
- "\n}"
