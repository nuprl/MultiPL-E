name: HumanEval_36_fizz_buzz
language: swift
prompt: "\n/// Return the number of times the digit 7 appears in integers less than\
  \ n which are divisible by 11 or 13.\n/// >>> fizz_buzz(n: 50)\n/// 0\n/// >>> fizz_buzz(n:\
  \ 78)\n/// 2\n/// >>> fizz_buzz(n: 79)\n/// 3\nfunc fizz_buzz(n: Int) -> Int {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(fizz_buzz(n: 50) == 0)\nassert(fizz_buzz(n:\
  \ 78) == 2)\nassert(fizz_buzz(n: 79) == 3)\nassert(fizz_buzz(n: 100) == 3)\nassert(fizz_buzz(n:\
  \ 200) == 6)\nassert(fizz_buzz(n: 4000) == 192)\nassert(fizz_buzz(n: 10000) == 639)\n\
  assert(fizz_buzz(n: 100000) == 8026)"
completions: ["    var cnt = 0\n    var nn = n\n    while nn > 0 {\n        if nn\
    \ % 10 == 7 {\n            cnt += 1\n        }\n        nn /= 10\n    }\n    return\
    \ cnt", "    \n    var count = 0\n    \n    for i in 0..<n {\n        if i % 11\
    \ == 0 || i % 13 == 0 {\n            count += num_sevens(n: i)\n        }\n  \
    \  }\n    \n    return count", "    var result = 0\n    for i in 1...n-1 {\n \
    \       let str = String(i)\n        if i % 11 == 0 || i % 13 == 0 {\n       \
    \     for char in str {\n                if char == \"7\" {\n                \
    \    result += 1\n                }\n            }\n        }\n    }\n    return\
    \ result", "    var sum = 0\n    for i in 1..<n {\n        if i % 11 == 0 || i\
    \ % 13 == 0 {\n            sum += i.description.filter{$0 == \"7\"}.count\n  \
    \      }\n    }\n    return sum", "    var count = 0\n    for i in 1..<n {\n \
    \       if i % 11 == 0 || i % 13 == 0 {\n            var j = i\n            while\
    \ j > 0 {\n                if j % 10 == 7 {\n                    count += 1\n\
    \                }\n                j /= 10\n            }\n        }\n    }\n\
    \    return count", '    return 0', '    return 0', "    assert(n >= 0)\n    if\
    \ n < 11 * 13 {\n        return 0\n    }\n    if n <= 99 {\n        return 1\n\
    \    }\n    if n <= 99 * 11 * 13 {\n        return 2\n    }\n    let mutableN\
    \ = n\n    var count = 0\n    while mutableN > 0 {\n        if mutableN % 10 ==\
    \ 7 {\n            count += 1\n        }\n        mutableN /= 10\n    }\n    if\
    \ n <= 999 * 11 * 13 {\n        return 2 + count\n    }\n    if n <= 9999 * 11\
    \ * 13 {\n        return 3 + count\n    }\n    if n <= 99999 * 11 * 13 {\n   \
    \     return 4 + count\n    }\n    if n <= 999999 * 11 * 13 {\n        return\
    \ 5 + count\n    }\n    if n <= 9999999 * 11 * 13 {\n        return 6 + count\n\
    \    }\n    if n <= 99999999 * 11 * 13 {\n        return 7 + count\n    }\n  \
    \  if n <= 999999999 * 11 * 13 {\n        return 8 + count\n    }\n    if n <=\
    \ 9999999999 * 11 * 13 {\n        return 9 + count\n    }\n    if n <= 99999999999\
    \ * 11 * 13 {\n        return 10 + count\n    }\n    if n <= 999999999999 * 11\
    \ * 13 {\n        return 11 + count\n    }\n    if n <= 9999999999999 * 11 * 13\
    \ {\n        return 12 + count\n    }\n    if n <= 99999999999999 * 11 * 13 {\n\
    \        return 13 + count\n    }\n    if n <= 999999999999999 * 11 * 13 {\n \
    \       return 14 + count\n    }\n    if n <= 9999999999999999 * 11 * 13 {\n \
    \       return 15 + count\n    }\n    if n <= 99999999999999999 * 11 * 13 {\n\
    \        return 16 + count\n    }\n    if n <= 999999999999999999 * 11 * 13 {\n\
    \        return 17 + count\n    }\n    if n <= 9999999999999999999 * 11 * 13 {\n\
    \        return 18 + count\n    }\n    if n <= 99999999999999999999 * 11 * 13\
    \ {", "    \n    func solution_loop(n: Int, count: Int) -> Int {\n        if n\
    \ < 1 {\n            return count\n        }\n        else if n % 11 == 0 || n\
    \ % 13 == 0 {\n            let digit = n % 10\n            if digit == 7 {\n \
    \               return solution_loop(n: n - 1, count: count + 1)\n           \
    \ }\n            else {\n                return solution_loop(n: n - 1, count:\
    \ count)\n            }\n        }\n        else {\n            return solution_loop(n:\
    \ n - 1, count: count)\n        }\n    }\n    \n    func solution_recursive(n:\
    \ Int) -> Int {\n        if n < 1 {\n            return 0\n        }\n       \
    \ else if n % 11 == 0 || n % 13 == 0 {\n            let digit = n % 10\n     \
    \       if digit == 7 {\n                return 1 + solution_recursive(n: n -\
    \ 1)\n            }\n            else {\n                return solution_recursive(n:\
    \ n - 1)\n            }\n        }\n        else {\n            return solution_recursive(n:\
    \ n - 1)\n        }\n    }\n    \n    return solution_loop(n: n, count: 0)", " \
    \   var result = 0\n    for i in 0..<n {\n        if i % 11 == 0 || i % 13 ==\
    \ 0 {\n            let str_num = String(i)\n            for char in str_num {\n\
    \                if char == \"7\" {\n                    result += 1\n       \
    \         }\n            }\n        }\n    }\n    return result", '    return
    0', '    return 0', "    var count = 0\n    for i in 1..<n {\n        if i % 11\
    \ == 0 || i % 13 == 0 {\n            if i % 10 == 7 {\n                count +=\
    \ 1\n            }\n            if i / 10 == 7 {\n                count += 1\n\
    \            }\n        }\n    }\n    return count", "    var count = 0\n    for\
    \ num in 1..<n {\n        if num % 11 == 0 || num % 13 == 0 {\n            let\
    \ digits = String(num).characters.map { Int(String($0))! }\n            for digit\
    \ in digits {\n                if digit == 7 {\n                    count += 1\n\
    \                }\n            }\n        }\n    }\n    return count", "    var\
    \ count = 0\n    for num in (1..<n) {\n        if num % 11 == 0 || num % 13 ==\
    \ 0 {\n            var num_str = String(num)\n            for char in num_str\
    \ {\n                if char == \"7\" {\n                    count += 1\n    \
    \            }\n            }\n        }\n    }\n    return count", "    var count\
    \ = 0\n    for i in 1..<n {\n        if (i % 11 == 0 || i % 13 == 0) && i.description.contains(\"\
    7\") {\n            count += 1\n        }\n    }\n    return count", "    var\
    \ count = 0\n    for i in 1..<n {\n        if i % 11 == 0 || i % 13 == 0 {\n \
    \           var j = i\n            while j > 0 {\n                if j % 10 ==\
    \ 7 {\n                    count += 1\n                }\n                j /=\
    \ 10\n            }\n        }\n    }\n    return count", "    var cnt: Int =\
    \ 0\n    for i in 1...n {\n        if i % 11 == 0 || i % 13 == 0 {\n         \
    \   let a = Array(String(i))\n            for j in a {\n                if j ==\
    \ \"7\" {\n                    cnt += 1\n                }\n            }\n  \
    \      }\n    }\n    return cnt", "    var count = 0\n    for number in 1..<n\
    \ {\n        if isDivisibleBy(number, divisor: 11) || isDivisibleBy(number, divisor:\
    \ 13) {\n            count += digits(number).filter { $0 == 7 }.count\n      \
    \  }\n    }\n    return count", '    return 0', "    var count = 0\n    var n\
    \ = n\n    while n > 0 {\n        if n % 10 == 7 {\n            count += 1\n \
    \       }\n        n /= 10\n    }\n    return count", "    var count = 0\n   \
    \ for i in 1..<n {\n        if i % 11 == 0 {\n            count += (number_of_sevens(i)\
    \ + number_of_sevens(i / 10))\n        } else if i % 13 == 0 {\n            count\
    \ += (number_of_sevens(i) + number_of_sevens(i / 10))\n        }\n    }\n    return\
    \ count", "    var result = 0\n    for i in stride(from: n - 1, through: 0, by:\
    \ -1) {\n        if i % 11 == 0 || i % 13 == 0 {\n            result += i.description.count(\"\
    7\")\n        }\n    }\n    return result", "    \n    var count = 0\n    \n \
    \   var fizzBuzz = [Int]()\n    \n    for i in 1..<n {\n        if i % 11 == 0\
    \ || i % 13 == 0 {\n            fizzBuzz.append(i)\n        }\n    }\n    \n \
    \   for i in fizzBuzz {\n        let numStr = String(i)\n        for character\
    \ in numStr {\n            if character == \"7\" {\n                count += 1\n\
    \            }\n        }\n    }\n    \n    return count", "    var i = 0\n  \
    \  var count = 0\n    while (i < n) {\n        if ((i % 11 == 0) || (i % 13 ==\
    \ 0)) {\n            let digit = i % 10\n            var tens_digit = i / 10\n\
    \            while (tens_digit > 0) {\n                if (tens_digit % 10 ==\
    \ 7) {\n                    count += 1\n                }\n                tens_digit\
    \ /= 10\n            }\n            if (digit == 7) {\n                count +=\
    \ 1\n            }\n        }\n        i += 1\n    }\n    return count", "  //\
    \ TODO\n  return 0", "    // TODO: Implement this\n    var count = 0\n    for\
    \ i in 0...n {\n        if String(i).contains(\"7\") {\n            if i % 11\
    \ == 0 || i % 13 == 0 {\n                count += 1\n            }\n        }\n\
    \    }\n    return count", "    let array = Array(1...n)\n    let eleven = array.filter\
    \ { (x) -> Bool in\n        x % 11 == 0\n    }\n    let thirteen = array.filter\
    \ { (x) -> Bool in\n        x % 13 == 0\n    }\n    let elevenThirteen = eleven\
    \ + thirteen\n    let elevenThirteenUniq = Set(elevenThirteen)\n    let seven\
    \ = elevenThirteenUniq.filter { (x) -> Bool in\n        String(x).contains(\"\
    7\")\n    }\n    return seven.count", "    var count = 0\n    let s = \"\\(n)\"\
    \n    for c in s {\n        if c == \"7\" {\n            count += 1\n        }\n\
    \    }\n    return count", '    return n', '    return -1', "    var sum = 0\n\
    \    for i in 1...n {\n        if i % 11 == 0 || i % 13 == 0 {\n            let\
    \ num = String(i)\n            for c in num {\n                if c == \"7\" {\n\
    \                    sum += 1\n                }\n            }\n        }\n \
    \   }\n    return sum", '    return 0', "    var count = 0\n    for i in 0...n-1{\n\
    \        if i % 11 == 0 || i % 13 == 0{\n            var str = String(i)\n   \
    \         for j in str.characters{\n                if j == \"7\"{\n         \
    \           count += 1\n                }\n            }\n        }\n    }\n \
    \   return count", "    var sum = 0\n    for i in 1..<n {\n        if i % 11 ==\
    \ 0 || i % 13 == 0 {\n            let str = String(i)\n            for char in\
    \ str {\n                if char == \"7\" {\n                    sum += 1\n  \
    \              }\n            }\n        }\n    }\n    return sum", "    var count\
    \ = 0\n    for i in 1...n {\n        if (i % 11 == 0 || i % 13 == 0) && String(i).contains(\"\
    7\") {\n            count += 1\n        }\n    }\n    return count", '    return
    0', '    return 0', "    let numbers = (1..<n).filter { $0 % 11 == 0 || $0 % 13\
    \ == 0 }\n    let strings = numbers.map { String($0) }\n    let digits = strings.map\
    \ { $0.characters }\n    let sevens = digits.map { $0.filter { $0 == \"7\" } }\n\
    \    let counts = sevens.map { $0.count }\n    return counts.reduce(0, +)", '    //
    Your code here', "    var count = 0\n    var n = n\n    while n > 0 {\n      \
    \  n -= 1\n        if n % 11 == 0 || n % 13 == 0 {\n            var m = n\n  \
    \          while m > 0 {\n                m /= 10\n                if m % 10 ==\
    \ 7 {\n                    count += 1\n                }\n            }\n    \
    \    }\n    }\n    return count", "    var ans = 0\n    var divisors = [11, 13]\n\
    \    divisors.forEach { divisor in\n        for i in 0..<n {\n            if (i\
    \ % divisor == 0) {\n                var temp = i\n                while temp\
    \ > 0 {\n                    if temp % 10 == 7 {\n                        ans\
    \ += 1\n                    }\n                    temp /= 10\n              \
    \  }\n            }\n        }\n    }\n    return ans", "    var sevens = 0\n\
    \    for i in 1..<n {\n        if i % 11 == 0 || i % 13 == 0 {\n            sevens\
    \ += sevens_in_number(n: i)\n        }\n    }\n    return sevens", "    var count\
    \ = 0\n    for x in 1...n {\n        if x % 11 == 0 || x % 13 == 0 {\n       \
    \     for c in String(x) {\n                if c == \"7\" {\n                \
    \    count += 1\n                }\n            }\n        }\n    }\n    return\
    \ count", "    var acc: Int = 0\n    for i in 1..<n {\n        if (i % 11 == 0\
    \ || i % 13 == 0) && i % 7 == 0 {\n            acc += 1\n        }\n    }\n  \
    \  return acc", '    return -1', '    return (0..<n).filter({$0 % 11 == 0 || $0
    % 13 == 0}).reduce(0, {$0 + String($1).filter({$0 == "7"}).count})', '    return
    0', '    return 0', "    var sum = 0\n    for i in 1..<n {\n        if i % 11\
    \ == 0 || i % 13 == 0 {\n            sum += String(i).characters.filter { $0 ==\
    \ \"7\" }.count\n        }\n    }\n    return sum", "    var x = 0\n    var c\
    \ = 0\n    var z = 0\n    while x < n {\n        if x % 11 == 0 || x % 13 == 0\
    \ {\n            let s = String(x)\n            for i in s {\n               \
    \ if i == \"7\" {\n                    c += 1\n                }\n           \
    \ }\n        }\n        x += 1\n    }\n    return c", "    return (1...n).reduce(0)\
    \ { (acc, current) -> Int in\n        var result = acc\n        if (current %\
    \ 11 == 0 || current % 13 == 0) && getDigit(n: current, pos: 1) == 7 {\n     \
    \       result += 1\n        }\n        return result\n    }", "    var sum =\
    \ 0\n    var count = 0\n    while (count < n) {\n        if (count % 11 == 0)\
    \ || (count % 13 == 0) {\n            sum += count_sevens(count)\n        }\n\
    \        count += 1\n    }\n    return sum", '    return 0', "    var count =\
    \ 0\n    for i in 11...n {\n        if i % 11 == 0 || i % 13 == 0 {\n        \
    \    var j = i\n            while j > 0 {\n                if j % 10 == 7 {\n\
    \                    count += 1\n                }\n                j /= 10\n\
    \            }\n        }\n    }\n    return count", "    var count: Int = 0\n\
    \    for i in 1...n {\n        if i % 11 == 0 || i % 13 == 0 {\n            var\
    \ j = i\n            while j > 0 {\n                if j % 10 == 7 {\n       \
    \             count += 1\n                }\n                j /= 10\n       \
    \     }\n        }\n    }\n    return count", "    var sum = 0\n    for i in 0..<n\
    \ {\n        if i % 11 == 0 || i % 13 == 0 {\n            var j = i\n        \
    \    while j > 0 {\n                if j % 10 == 7 {\n                    sum\
    \ += 1\n                }\n                j /= 10\n            }\n        }\n\
    \    }\n    return sum", "    var index = 1\n    var count = 0\n    while index\
    \ < n {\n        if index % 11 == 0 || index % 13 == 0 {\n            let str\
    \ = String(index)\n            for char in str {\n                if char == \"\
    7\" {\n                    count += 1\n                }\n            }\n    \
    \    }\n        index += 1\n    }\n    return count", "    var count = 0\n   \
    \ for i in 0..<n {\n        if i % 11 == 0 || i % 13 == 0 {\n            count\
    \ += count_sevens(i)\n        }\n    }\n    return count", "    return (0..<n).filter\
    \ {\n        ($0 % 11 == 0 || $0 % 13 == 0) && $0.description.contains(\"7\")\n\
    \    }.count", "  var ans = 0\n  for i in 0..<n {\n    let s = String(i)\n   \
    \ if (i % 11 == 0 || i % 13 == 0) && s.contains(\"7\") {\n      ans += 1\n   \
    \ }\n  }\n  return ans", "    assert(n > 0)\n    let divisors = [11, 13]\n   \
    \ return divisors.map { digits_7(m: n, divisor: $0) }.reduce(0, +)", "    if n\
    \ <= 0 {\n        return 0\n    }\n    var times = 0\n    for i in 1..<n {\n \
    \       if i % 11 == 0 || i % 13 == 0 {\n            times += digit_7(n: i)\n\
    \        }\n    }\n    return times", '    return 0', '    return -1', "    func\
    \ is_divisible(i: Int, n: Int) -> Bool {\n        return i % n == 0\n    }\n \
    \   \n    var counter = 0\n    for i in 1..<n {\n        if is_divisible(i, n:\
    \ 11) || is_divisible(i, n: 13) {\n            let number = String(i)\n      \
    \      for digit in number.characters {\n                if String(digit) == \"\
    7\" {\n                    counter += 1\n                }\n            }\n  \
    \      }\n    }\n    return counter", '    return -1', "  var count = 0\n  for\
    \ i in 0..<n {\n    if i % 11 == 0 || i % 13 == 0 {\n      var temp = i\n    \
    \  while temp > 0 {\n        if temp % 10 == 7 {\n          count += 1\n     \
    \   }\n        temp /= 10\n      }\n    }\n  }\n  return count", "    var count\
    \ = 0\n    for i in 0...n {\n        if i % 11 == 0 || i % 13 == 0 {\n       \
    \     let strNum = String(i)\n            for c in strNum {\n                if\
    \ c == \"7\" {\n                    count += 1\n                }\n          \
    \  }\n        }\n    }\n    return count", '    return 0', "  var count: Int =\
    \ 0\n  for i in 1...n {\n    if i % 11 == 0 || i % 13 == 0 {\n      var j: Int\
    \ = i\n      while j > 0 {\n        if j % 10 == 7 {\n          count += 1\n \
    \       }\n        j /= 10\n      }\n    }\n  }\n  return count", "    \n    var\
    \ count = 0\n    \n    for i in 1...n {\n        if (i % 11 == 0 || i % 13 ==\
    \ 0) && i < n && i.description.contains(\"7\") {\n            count += 1\n   \
    \     }\n    }\n    \n    return count", "    // ENTER YOUR CODE HERE\n    return\
    \ 0", "    let nums = [11, 13]\n    let a = nums.map { $0 - 1 }\n    let b = nums.map\
    \ { n / $0 }\n    let c = nums.map { ($0 * b[nums.index(of: $0)!]).digits.filter\
    \ { $0 == 7 }.count }\n    return (a.map { $0 * b[a.index(of: $0)!] }.reduce(0,\
    \ +) + c.reduce(0, +))", "    var digit = 0\n    var result = 0\n    for i in\
    \ 0..<n {\n        if i % 11 == 0 || i % 13 == 0 {\n            var div = i\n\
    \            while div > 0 {\n                digit = div % 10\n             \
    \   if digit == 7 {\n                    result += 1\n                }\n    \
    \            div /= 10\n            }\n        }\n    }\n    return result", '    return
    0', "    var count = 0\n    for i in 0..<n {\n        if i % 11 == 0 || i % 13\
    \ == 0 {\n            var temp = i\n            while temp > 0 {\n           \
    \     if temp % 10 == 7 {\n                    count += 1\n                }\n\
    \                temp /= 10\n            }\n        }\n    }\n    return count",
  "    var arrayOfSevens = [Int]()\n    for i in 1..<n {\n        if (i % 11 == 0\
    \ || i % 13 == 0) {\n            let stringOfSevens = String(i)\n            for\
    \ index in stringOfSevens.indices {\n                if stringOfSevens[index]\
    \ == \"7\" {\n                    arrayOfSevens.append(i)\n                }\n\
    \            }\n        }\n    }\n    print(arrayOfSevens)\n    return arrayOfSevens.count",
  "    var count = 0\n    for i in 1..<n {\n        if i % 11 == 0 || i % 13 == 0\
    \ {\n            var j = i\n            while j > 0 {\n                if j %\
    \ 10 == 7 {\n                    count += 1\n                }\n             \
    \   j /= 10\n            }\n        }\n    }\n    return count", "    return (1...n).filter\
    \ {\n        let d = $0.description\n        return d.contains(\"7\") && ($0 %\
    \ 11 == 0 || $0 % 13 == 0)\n    }.count", '    return (1...n).filter {$0 % 11
    == 0 || $0 % 13 == 0}.reduce(0) {$0 + $1.description.reduce(0) {$0 + ($1 == "7"
    ? 1 : 0)}}', "    var count = 0\n    for num in 1..<n {\n        if ((num % 11\
    \ == 0) || (num % 13 == 0)) && (num.description.contains(\"7\")) {\n         \
    \   count += 1\n        }\n    }\n    return count", "    var count = 0\n    var\
    \ i = 1\n    while i < n {\n        if i % 11 == 0 || i % 13 == 0 {\n        \
    \    let str = String(i)\n            if str.contains(\"7\") {\n             \
    \   count += 1\n            }\n        }\n        i += 1\n    }\n    return count",
  "    guard n > 0 else { return 0 }\n    guard n > 7 else { return 1 }\n    guard\
    \ n > 14 else { return 2 }\n    var runningTotal = 3\n    var divisor = 11\n \
    \   while divisor < n {\n        let multiple = divisor * 7\n        if multiple\
    \ < n {\n            runningTotal += 1\n            divisor = multiple\n     \
    \   } else {\n            break\n        }\n    }\n    return runningTotal", " \
    \   guard n >= 7 else { return 0 }\n    var count = 0\n    for i in 7..<n {\n\
    \        if i % 11 == 0 || i % 13 == 0 {\n            var num = i\n          \
    \  while num > 0 {\n                if num % 10 == 7 {\n                    count\
    \ += 1\n                }\n                num /= 10\n            }\n        }\n\
    \    }\n    return count", '  return 0', "    if n <= 0 {\n        return 0\n\
    \    }\n    if n == 7 {\n        return 1\n    }\n    var count = 0\n    for i\
    \ in 1...n {\n        if i % 11 == 0 || i % 13 == 0 {\n            let str = String(i)\n\
    \            for c in str {\n                if c == \"7\" {\n               \
    \     count += 1\n                }\n            }\n        }\n    }\n    return\
    \ count", '    return -1', "    var counter = 0\n    for i in 0...n {\n      \
    \  if i % 11 == 0 || i % 13 == 0 {\n            var num = i\n            while\
    \ num > 0 {\n                if num % 10 == 7 {\n                    counter +=\
    \ 1\n                }\n                num /= 10\n            }\n        }\n\
    \    }\n    return counter", "    var cnt = 0\n    for i in 0..<n {\n        if\
    \ i % 11 == 0 || i % 13 == 0 {\n            cnt += count_7(n: i)\n        }\n\
    \    }\n    return cnt", "    var res = 0\n    for i in 1..<n {\n        if (i\
    \ % 11 == 0 || i % 13 == 0) && String(i).contains(\"7\") {\n            res +=\
    \ 1\n        }\n    }\n    return res", "    var result = 0\n    for var i in\
    \ 0..<n {\n        if i % 11 == 0 || i % 13 == 0 {\n            let numStr = String(i)\n\
    \            for c in numStr.characters {\n                if c == \"7\" {\n \
    \                   result += 1\n                }\n            }\n        }\n\
    \    }\n    return result", "    precondition(n > 0)\n    var count = 0\n    for\
    \ i in 1..<n {\n        if i % 11 == 0 || i % 13 == 0 {\n            count +=\
    \ occurrences(of: \"7\", in: String(i))\n        }\n    }\n    return count",
  '    return 0', '    return 0', "    var count = 0\n    for i in 1...n {\n     \
    \   if i % 11 == 0 || i % 13 == 0 {\n            let str = String(i)\n       \
    \     for char in str {\n                if char == \"7\" {\n                \
    \    count += 1\n                }\n            }\n        }\n    }\n    return\
    \ count", "    let is_divisible = {(number: Int, divisor: Int) -> Bool in\n  \
    \      return number % divisor == 0\n    }\n    let get_digit = {(number: Int,\
    \ digit: Int) -> Int in\n        return (number / digit) % 10\n    }\n    var\
    \ result = 0\n    for number in 1...n {\n        if is_divisible(number, 11) ||\
    \ is_divisible(number, 13) {\n            if get_digit(number, 1) == 7 {\n   \
    \             result += 1\n            }\n            if get_digit(number, 10)\
    \ == 7 {\n                result += 1\n            }\n        }\n    }\n    return\
    \ result", "    var seven_count = 0\n    for i in 1...n {\n        if i % 11 ==\
    \ 0 || i % 13 == 0 {\n            let seven_count_for_i = seven_count_in_integer(n:\
    \ i)\n            seven_count += seven_count_for_i\n        }\n    }\n    return\
    \ seven_count", "    var count = 0\n    for i in 1..<n {\n        if i % 11 ==\
    \ 0 || i % 13 == 0 {\n            count += countDigit(i, 7)\n        }\n    }\n\
    \    return count", "    if n < 0 {\n        return 0\n    }\n    if n < 10 {\n\
    \        return n == 7 ? 1 : 0\n    }\n    let max_7 = n / 10\n    let max_77\
    \ = n / 100\n    let max_777 = n / 1000\n    let max_7777 = n / 10000\n    let\
    \ all_7 = max_7 + max_77 + max_777 + max_7777\n    let min_7 = max_7 + max_77\
    \ + max_777\n    let min_77 = max_77 + max_777\n    let min_777 = max_777\n  \
    \  let last_n = n % 10\n    let last_nn = n % 100\n    let last_nnn = n % 1000\n\
    \    let last_nnnn = n % 10000\n    let last_n_7 = last_n / 7\n    let last_nn_7\
    \ = last_nn / 7\n    let last_nnn_7 = last_nnn / 7\n    let last_nnnn_7 = last_nnnn\
    \ / 7\n    var min_7_excludes = 0\n    if last_n > 7 {\n        min_7_excludes\
    \ += last_n_7\n    }\n    if last_nn > 77 {\n        min_7_excludes += last_nn_7\n\
    \    }\n    if last_nnn > 777 {\n        min_7_excludes += last_nnn_7\n    }\n\
    \    if last_nnnn > 7777 {\n        min_7_excludes += last_nnnn_7\n    }\n   \
    \ var min_77_excludes = 0\n    if last_nn > 77 {\n        min_77_excludes += last_nn_7\n\
    \    }\n    if last_nnn > 777 {\n        min_77_excludes += last_nnn_7\n    }\n\
    \    if last_nnnn > 7777 {\n        min_77_excludes += last_nnnn_7\n    }\n  \
    \  var min_777_excludes = 0\n    if last_nnn > 777 {\n        min_777_excludes\
    \ += last_nnn_7\n    }\n    if last_nnnn > 7777 {\n        min_777_", '    return
    0', "    return (0..<n).map { n -> Int in\n        if n % 11 == 0 || n % 13 ==\
    \ 0 {\n            return n.description.characters.filter { $0 == \"7\" }.count\n\
    \        }\n        return 0\n    }.reduce(0, +)", "    var result = 0\n    for\
    \ i in 1..<n {\n        if (i % 11 == 0 || i % 13 == 0) && i.contains(7) {\n \
    \           result += 1\n        }\n    }\n    return result", "    var count\
    \ = 0\n    for i in 0...n {\n        if i%11 == 0 || i%13 == 0 {\n           \
    \ var array = Array(String(i))\n            for each in array {\n            \
    \    if each == \"7\" {\n                    count += 1\n                }\n \
    \           }\n        }\n    }\n    return count", '    return 0', '    return
    0', "    // YOUR CODE HERE\n    return 0", "    let n_as_string = String(n)\n\
    \    var count = 0\n    for c in n_as_string {\n        if c == \"7\" {\n    \
    \        count += 1\n        }\n    }\n    return count", "    var count = 0\n\
    \    for i in 1...n-1 {\n        if (i % 11 == 0 || i % 13 == 0) && String(i).contains(\"\
    7\") {\n            count += 1\n        }\n    }\n    return count", "    var\
    \ count = 0\n    for i in 0...n {\n        if i % 11 == 0 || i % 13 == 0 {\n \
    \           count += occurrences(of: \"7\", in: String(i))\n        }\n    }\n\
    \    return count", "    var count = 0\n    for number in 1...n-1 {\n        if\
    \ number % 11 == 0 || number % 13 == 0 {\n            var stringNumber = String(number)\n\
    \            for digit in stringNumber {\n                if digit == \"7\" {\n\
    \                    count += 1\n                }\n            }\n        }\n\
    \    }\n    return count", "    var total = 0\n    for i in 0..<n {\n        let\
    \ lastdigit = i % 10\n        let firstdigit = i / 10\n        if lastdigit ==\
    \ 7 {\n            total += 1\n        }\n        if i % 11 == 0 || i % 13 ==\
    \ 0 {\n            if firstdigit == 7 {\n                total += 1\n        \
    \    }\n        }\n    }\n    return total", '    return 0', "    var count =\
    \ 0\n    for i in 1..<n {\n        if ((i % 11 == 0) || (i % 13 == 0)) && (i %\
    \ 7 == 0) {\n            count += 1\n        }\n    }\n    return count", '    return
    0', "    var result = 0\n    let n = n\n    var index = 7\n    while index < n\
    \ {\n        if index % 11 == 0 || index % 13 == 0 {\n            var temp = index\n\
    \            while temp > 0 {\n                let digit = temp % 10\n       \
    \         if digit == 7 {\n                    result += 1\n                }\n\
    \                temp /= 10\n            }\n        }\n        index += 1\n  \
    \  }\n    return result", "    var sevenCount = 0\n    for i in 1..<n {\n    \
    \    if i % 11 == 0 || i % 13 == 0 {\n            let seven = i.description.filter(\"\
    7\"==)\n            sevenCount += seven.count\n        }\n    }\n    return sevenCount",
  "    var result = 0\n    for i in 1..<n {\n        if i % 11 == 0 || i % 13 == 0\
    \ {\n            let str = String(i)\n            for c in str {\n           \
    \     if c == \"7\" {\n                    result += 1\n                }\n  \
    \          }\n        }\n    }\n    return result", '    return 0', "    var count\
    \ = 0\n    for i in 1..<n {\n        if i % 11 == 0 || i % 13 == 0 {\n       \
    \     var i = i\n            while i > 0 {\n                if i % 10 == 7 {\n\
    \                    count += 1\n                }\n                i /= 10\n\
    \            }\n        }\n    }\n    return count", '    return 0', '  return
    0', "    var count = 0\n    for num in 1..<n {\n        if (num % 11 == 0 || num\
    \ % 13 == 0) && String(num).contains(\"7\") {\n            count += 1\n      \
    \  }\n    }\n    return count", "    if n < 10 {\n        return 0\n    }\n  \
    \  if n < 100 {\n        if n % 11 == 0 || n % 13 == 0 {\n            return n\
    \ % 10 == 7 ? 1 : 0\n        }\n        return 0\n    }\n    if n < 1000 {\n \
    \       return fizz_buzz(n: n / 10) + fizz_buzz(n: n % 10)\n    }\n    return\
    \ fizz_buzz(n: n / 10) + fizz_buzz(n: n % 100)", "    var count: Int = 0\n   \
    \ for i in 1..<n {\n        if (i % 11 == 0 || i % 13 == 0) && i.containsDigit(digit:\
    \ 7) {\n            count += 1\n        }\n    }\n    return count", "    var\
    \ count = 0\n    for i in 1..<n {\n        if i % 11 == 0 || i % 13 == 0 {\n \
    \           count += number_of_sevens(n: i)\n        }\n    }\n    return count",
  "    var count = 0\n    for i in 0...n {\n        if (i % 11 == 0 || i % 13 == 0)\
    \ && is_digit_of(digit: 7, num: i) {\n            count += 1\n        }\n    }\n\
    \    return count", "    var cnt = 0\n    for i in 1..<n {\n        if i % 11\
    \ == 0 || i % 13 == 0 {\n            var x = i\n            while x > 0 {\n  \
    \              if x % 10 == 7 {\n                    cnt += 1\n              \
    \  }\n                x /= 10\n            }\n        }\n    }\n    return cnt",
  "  var ret = 0\n  let n = n - 1\n  ret += n / 7\n  ret -= n / 11\n  ret -= n / 13\n\
    \  ret += n / (11 * 13)\n  ret += n / (7 * 11)\n  ret += n / (7 * 13)\n  ret -=\
    \ n / (7 * 11 * 13)\n  return ret", "    var count = 0\n    for i in 1..<n {\n\
    \        if (i % 11 == 0 || i % 13 == 0) && String(i).contains(\"7\") {\n    \
    \        count += 1\n        }\n    }\n    return count", "    var count = 0\n\
    \    for i in 1...n {\n        if (i % 11 == 0 || i % 13 == 0) && digit_counts(n:\
    \ i)[7]! > 0 {\n            count += 1\n        }\n    }\n    return count", " \
    \   var count = 0\n    for i in 1...n {\n        if divisible(i, 11) || divisible(i,\
    \ 13) {\n            count += count_7s(i)\n        }\n    }\n    return count",
  '    return 0', "    var count = 0\n    for i in 0..<n {\n        if (i % 11 ==\
    \ 0 || i % 13 == 0) && i % 10 == 7 {\n            count += 1\n        }\n    }\n\
    \    return count", '    return 0', '    return 0', "    var count = 0\n    for\
    \ i in 1..<n {\n        if i % 11 == 0 || i % 13 == 0 {\n            count +=\
    \ String(i).filter{ String($0) == \"7\" }.count\n        }\n    }\n    return\
    \ count", "    \n    var count = 0\n    \n    for i in 1...n {\n        if i %\
    \ 11 == 0 || i % 13 == 0 {\n            if i.description.contains(\"7\") {\n \
    \               count += 1\n            }\n        }\n    }\n    \n    return\
    \ count", '    return 0', "    var count: Int = 0\n    for i in 1..<n {\n    \
    \    if i % 11 == 0 || i % 13 == 0 {\n            count += num_sevens(n: i)\n\
    \        }\n    }\n    return count", "    var k = 0\n    for i in 1..<n {\n \
    \       if i % 11 == 0 || i % 13 == 0 {\n            var x = i\n            while\
    \ x > 0 {\n                if x % 10 == 7 {\n                    k += 1\n    \
    \            }\n                x /= 10\n            }\n        }\n    }\n   \
    \ return k", "    let search = 7\n    var count = 0\n    var modulus = 0\n   \
    \ var current = 0\n    var i = 0\n    while current < n {\n        if i > 0 {\n\
    \            modulus = (modulus + 11) % n\n            current = modulus\n   \
    \     }\n        for digit in String(current) {\n            if digit == Character(String(search))\
    \ {\n                count += 1\n            }\n        }\n        i += 1\n  \
    \  }\n    return count", '    return 0', "    // Your code here\n    var count\
    \ = 0\n    for number in 11...n {\n        if number % 11 == 0 || number % 13\
    \ == 0 {\n            let s = String(number)\n            for character in s {\n\
    \                if character == \"7\" {\n                    count += 1\n   \
    \             }\n            }\n        }\n    }\n    return count", "    var\
    \ result = 0\n    for x in 1...n {\n        if x % 11 == 0 || x % 13 == 0 {\n\
    \            result += String(x).filter { String($0) == \"7\" }.count\n      \
    \  }\n    }\n    return result", "    var count = 0\n    for i in 1..<n {\n  \
    \      if i % 11 == 0 || i % 13 == 0 {\n            count += count_sevens(n: i)\n\
    \        }\n    }\n    return count", '    return 0', "    // TODO: Write this\
    \ function\n    return 0", "    var result = 0\n    for i in 0...n-1 {\n     \
    \   if (i % 11 == 0 || i % 13 == 0) && i % 7 == 0 {\n            result += 1\n\
    \        }\n    }\n    return result", "    var count = 0\n    for i in 1..<n\
    \ {\n        if i % 11 == 0 || i % 13 == 0 {\n            let s = String(i)\n\
    \            for c in s {\n                if c == \"7\" {\n                 \
    \   count += 1\n                }\n            }\n        }\n    }\n    return\
    \ count", "    if n < 1 {\n        return 0\n    }\n    var count = 0\n    for\
    \ i in 1..<n {\n        if (i % 11 == 0 || i % 13 == 0) && i.contains(digit: 7)\
    \ {\n            count += 1\n        }\n    }\n    return count", "    var count\
    \ = 0\n    for i in 1...n {\n        if i % 11 == 0 || i % 13 == 0 {\n       \
    \     if i.digits.contains(7) {\n                count += 1\n            }\n \
    \       }\n    }\n    return count", "    var count = 0\n    for i in 0..<n {\n\
    \        if i % 11 == 0 || i % 13 == 0 {\n            let str = String(i)\n  \
    \          for c in str {\n                if c == \"7\" {\n                 \
    \   count += 1\n                }\n            }\n        }\n    }\n    return\
    \ count", "    var sum = 0\n    for i in 1...n {\n        if i % 11 == 0 || i\
    \ % 13 == 0 {\n            sum += number_of_7(n: i)\n        }\n    }\n    return\
    \ sum", "    assert(n > 1)\n    var num_sevens = 0\n    for n in stride(from:\
    \ n, to: 1, by: -1) {\n        if n % 11 == 0 || n % 13 == 0 {\n            num_sevens\
    \ += num_sevens_in_number(n: n)\n        }\n    }\n    return num_sevens", '    return
    0', "    var count = 0\n    for i in 1...n {\n        if i % 11 == 0 || i % 13\
    \ == 0 {\n            count += check_digit(n: i, digit: 7)\n        }\n    }\n\
    \    return count", "    var count = 0\n    for i in 0..<n {\n        if i % 11\
    \ == 0 || i % 13 == 0 {\n            let s = String(i)\n            for c in s\
    \ {\n                if c == \"7\" {\n                    count += 1\n       \
    \         }\n            }\n        }\n    }\n    return count", "    let multiplesOf11and13\
    \ = (11...n).filter { $0 % 11 == 0 || $0 % 13 == 0 }\n    return multiplesOf11and13.reduce(0)\
    \ { $0 + $1.description.filter { $0 == \"7\" }.count }", "    let fizz = 11\n\
    \    let buzz = 13\n    let fizzbuzz = fizz * buzz\n    let limit = n / fizzbuzz\n\
    \    let inbuzz = (n - limit * fizzbuzz) / buzz\n    let inbuzzrem = (n - limit\
    \ * fizzbuzz) % buzz\n    let infizz = (n - inbuzz * buzz) / fizz\n    let infizzrem\
    \ = (n - inbuzz * buzz) % fizz\n    let nrem = n % fizzbuzz\n    let nbuzz = nrem\
    \ / buzz\n    let nbuzzrem = nrem % buzz\n    let nfizz = nrem / fizz\n    let\
    \ nfizzrem = nrem % fizz\n    let seven = 7\n    let digits = 10\n    let digit_7\
    \ = digits / seven\n    let digit_9 = digits / nine\n    let digit_11 = digits\
    \ / eleven\n    let digit_13 = digits / thirteen\n    let digit_77 = digits /\
    \ (seven * seven)\n    let digit_99 = digits / (nine * nine)\n    let digit_111\
    \ = digits / (eleven * eleven)\n    let digit_133 = digits / (thirteen * thirteen)\n\
    \    var sum = 0\n    for i in 1...limit {\n        sum += digit_7 * (i - 1) *\
    \ fizzbuzz + digit_9 * (i - 1) * fizzbuzz\n        if i <= inbuzz {\n        \
    \    sum += digit_7 * i * buzz + digit_11 * i * buzz\n        }\n        if i\
    \ <= infizz {\n            sum += digit_7 * i * fizz + digit_13 * i * fizz\n \
    \       }\n        if i <= nbuzz {\n            sum += digit_7 * (i + limit *\
    \ fizzbuzz) + digit_11 * (i + limit * fizzbuzz)\n        }\n        if i <= nfizz\
    \ {\n            sum += digit_7 * (i + inbuzz * buzz) + digit_13 * (i + inbuzz\
    \ * buzz)\n        }\n    }\n    sum += digit_7 * nbuzzrem + digit_11 * nbuzzrem\n\
    \    sum += digit_7", '    return 0', "    if n == 0 {\n        return 0\n   \
    \ }\n    var sum = 0\n    var previousInt = 0\n    var remaining = n\n    while\
    \ remaining > 0 {\n        let digit = remaining % 10\n        if digit == 7 {\n\
    \            sum += 1\n        }\n        remaining /= 10\n        let int = previousInt\
    \ * 10 + digit\n        if int % 11 == 0 || int % 13 == 0 {\n            sum +=\
    \ fizz_buzz(n: int)\n        }\n        previousInt = int\n    }\n    return sum",
  '    return 0', "    var c = 0\n    for i in 1..<n {\n        if i % 11 == 0 ||\
    \ i % 13 == 0 {\n            var j = i\n            while j > 0 {\n          \
    \      if j % 10 == 7 {\n                    c += 1\n                }\n     \
    \           j /= 10\n            }\n        }\n    }\n    return c", "    var\
    \ count = 0\n    for i in 1..<n {\n        if i % 11 == 0 || i % 13 == 0 {\n \
    \           let s = String(i)\n            for c in s {\n                if c\
    \ == \"7\" {\n                    count += 1\n                }\n            }\n\
    \        }\n    }\n    return count", '    return 0', "    var count = 0\n   \
    \ for i in 1..<n {\n        if i % 11 == 0 || i % 13 == 0 {\n            var i\
    \ = i\n            while i > 0 {\n                if i % 10 == 7 {\n         \
    \           count += 1\n                }\n                i /= 10\n         \
    \   }\n        }\n    }\n    return count", "    var count = 0\n    for i in 1..<n\
    \ {\n        if i % 11 == 0 || i % 13 == 0 {\n            let str = String(i)\n\
    \            for char in str {\n                if char == \"7\" {\n         \
    \           count += 1\n                }\n            }\n        }\n    }\n \
    \   return count", "    var output = 0\n    for i in 1..<n {\n        if i % 11\
    \ == 0 || i % 13 == 0 {\n            if i % 100 == 77 {\n                output\
    \ += 2\n            } else if i % 10 == 7 {\n                output += 1\n   \
    \         }\n        }\n    }\n    return output", '    return 0', "    // your\
    \ code here\n    return 0", "    var count = 0\n    for i in 1...n-1 {\n     \
    \   if (i % 11 == 0 || i % 13 == 0) && String(i).contains(\"7\") {\n         \
    \   count += 1\n        }\n    }\n    return count", "    \n    return 0", '    return
    0', "    var cnt = 0\n    for i in 1..<n {\n        if i % 11 == 0 || i % 13 ==\
    \ 0 {\n            let numstr = String(i)\n            for j in numstr {\n   \
    \             if j == \"7\" {\n                    cnt += 1\n                }\n\
    \            }\n        }\n    }\n    return cnt", "    var count = 0\n    for\
    \ i in 1..<n {\n        let str = String(i)\n        if i % 11 == 0 || i % 13\
    \ == 0 {\n            for j in str {\n                if j == \"7\" {\n      \
    \              count += 1\n                }\n            }\n        }\n    }\n\
    \    return count", '    return 0', "    func is_multiple(n: Int, of: Int) ->\
    \ Bool {\n        return n % of == 0\n    }\n    \n    func digit_counter(number:\
    \ Int, digit: Int) -> Int {\n        var count = 0\n        var n = number\n \
    \       while n > 0 {\n            if n % 10 == digit {\n                count\
    \ += 1\n            }\n            n /= 10\n        }\n        return count\n\
    \    }\n    \n    func find_multiples(n: Int, of: Int) -> [Int] {\n        var\
    \ multiples = [Int]()\n        for i in 1...n {\n            if is_multiple(n:\
    \ i, of: of) {\n                multiples.append(i)\n            }\n        }\n\
    \        return multiples\n    }\n    \n    var sum = 0\n    let candidates =\
    \ find_multiples(n: n, of: 11) + find_multiples(n: n, of: 13)\n    for i in candidates\
    \ {\n        sum += digit_counter(number: i, digit: 7)\n    }\n    return sum",
  '    return 0', '    return 0', "    var count = 0\n    for i in 0..<n {\n     \
    \   if i % 11 == 0 || i % 13 == 0 {\n            count += String(i).filter{$0\
    \ == \"7\"}.count\n        }\n    }\n    return count", '    return 0', "    var\
    \ count = 0\n    for i in 1..<n {\n        if i % 11 == 0 || i % 13 == 0 {\n \
    \           count += number_of_7s(i)\n        }\n    }\n    return count", '    return
    0', "    if n < 1 {\n        return 0\n    }\n    var fizz = 0\n    var buzz =\
    \ 0\n    var fizz_buzz = 0\n    var fizz_digits = 0\n    var buzz_digits = 0\n\
    \    var fizz_buzz_digits = 0\n    for i in 1...n {\n        if i % 11 == 0 ||\
    \ i % 13 == 0 {\n            let string = String(i)\n            let digit_set\
    \ = Set(string)\n            if digit_set.contains(\"7\") {\n                if\
    \ i % 11 == 0 && i % 13 == 0 {\n                    fizz_buzz += 1\n         \
    \           fizz_buzz_digits += string.count\n                } else if i % 11\
    \ == 0 {\n                    fizz += 1\n                    fizz_digits += string.count\n\
    \                } else {\n                    buzz += 1\n                   \
    \ buzz_digits += string.count\n                }\n            }\n        }\n \
    \   }\n    return fizz_digits + buzz_digits + fizz_buzz_digits - fizz * 2 - buzz\
    \ * 2 - fizz_buzz * 3", "    // TODO: Implement me!\n    return 0", "    var count\
    \ = 0\n    for i in 1..<n {\n        if i % 11 == 0 || i % 13 == 0 {\n       \
    \     count += number_sevens(n: i)\n        }\n    }\n    return count", "   \
    \ var count = 0\n    var i = 0\n    while i < n {\n        if i % 11 == 0 || i\
    \ % 13 == 0 {\n            let s = String(i)\n            for c in s {\n     \
    \           if c == \"7\" {\n                    count += 1\n                }\n\
    \            }\n        }\n        i += 1\n    }\n    return count", "    var\
    \ count = 0\n    for number in 0...n {\n        if number % 11 == 0 || number\
    \ % 13 == 0 {\n            if String(number).contains(\"7\") {\n             \
    \   count += 1\n            }\n        }\n    }\n    return count", '    return
    0', "    precondition(n > 0)\n    return (1...n).filter {\n        $0 % 11 ==\
    \ 0 || $0 % 13 == 0\n    }.reduce(0) {\n        $0 + $1.description.filter { $0\
    \ == \"7\" }.count\n    }", '    return 0', "    var count = 0\n    for i in 1..<n\
    \ {\n        if i % 11 == 0 || i % 13 == 0 {\n            if digit_7(num: i) ==\
    \ 1 {\n                count += 1\n            }\n        }\n    }\n    return\
    \ count", "    var count = 0\n    for i in 1..<n {\n        if i % 11 == 0 ||\
    \ i % 13 == 0 {\n            let str = String(i)\n            for char in str\
    \ {\n                if char == \"7\" {\n                    count += 1\n    \
    \            }\n            }\n        }\n    }\n    return count", "    let multiples\
    \ = [11, 13]\n    var total = 0\n    for i in 0..<n {\n        let digit = i %\
    \ 10\n        if digit == 7 {\n            var ok = true\n            for j in\
    \ multiples {\n                if i % j != 0 {\n                    ok = false\n\
    \                    break\n                }\n            }\n            if ok\
    \ {\n                total += 1\n            }\n        }\n    }\n    return total",
  "    var count = 0\n    for i in 1...n {\n        if i % 11 == 0 || i % 13 == 0\
    \ {\n            count += i.to_digit_list().filter { $0 == 7 }.count\n       \
    \ }\n    }\n    return count", "    var count = 0\n    for i in 0..<n {\n    \
    \    let string = String(i)\n        if i % 11 == 0 || i % 13 == 0 {\n       \
    \     for j in string {\n                if j == \"7\" {\n                   \
    \ count += 1\n                }\n            }\n        }\n    }\n    return count",
  '  return 0', "    \n    var result = 0\n    \n    for i in 1..<n {\n        if\
    \ (i % 11 == 0 || i % 13 == 0) && String(i).contains(\"7\") {\n            result\
    \ += 1\n        }\n    }\n    \n    return result", '    return 0']
stop_tokens:
- "\n}"
