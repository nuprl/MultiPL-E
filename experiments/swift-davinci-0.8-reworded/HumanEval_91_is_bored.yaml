name: HumanEval_91_is_bored
language: swift
prompt: "\n/// You'll be given a string of words, and your task is to count the number\n\
  /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n/// Sentences\
  \ are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(S: \"Hello\
  \ world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue. The sun is shining. I\
  \ love this weather\")\n/// 1\nfunc is_bored(S: String) -> Int {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S:\
  \ \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
  \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
  \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\")\
  \ == 0)"
completions: ["    let sentences = S.characters.split(separator: \".\", maxSplits:\
    \ Int.max, omittingEmptySubsequences: false)\n    return sentences.filter { $0.characters.first\
    \ == \"I\" }.count", '    return S.components(separatedBy: "I").count - 1', " \
    \   // your code here\n    return 0", "    var count = 0\n    for i in S.split(separator:\
    \ \" \") {\n        if i.lowercased() == \"i\" {\n            count += 1\n   \
    \     }\n    }\n    return count", '    return S.components(separatedBy: ".?!".characters).filter
    { $0.hasPrefix("I") }.count', "    let sentences = S.components(separatedBy: \"\
    .\")\n    var boredoms = 0\n    for sentence in sentences {\n        if sentence.hasPrefix(\"\
    I\") {\n            boredoms += 1\n        }\n    }\n    return boredoms", " \
    \   // Write your code here.\n    var boredoms = 0\n    let boredomsString = S.split(separator:\
    \ \" \")\n    boredomsString.forEach {\n        if $0 == \"I\" {\n           \
    \ boredoms += 1\n        }\n    }\n    return boredoms", '    return S.components(separatedBy:
    ".!?").filter({$0.hasPrefix("I")}).count', "    // TODO: Implement this function\n\
    \    return 0", '    return S.components(separatedBy: ".").filter { $0.hasPrefix("I")
    }.count', "    let s_arr = S.components(separatedBy: \".\")\n    let q_arr = S.components(separatedBy:\
    \ \"?\")\n    let i_arr = S.components(separatedBy: \"!\")\n    let h_arr = s_arr\
    \ + q_arr + i_arr\n    var bored: Int = 0\n    for str in h_arr {\n        if\
    \ str.hasPrefix(\"I\") {\n            bored += 1\n        }\n    }\n    return\
    \ bored", '    return S.split(separator: " ").filter({ $0.prefix(1) == "I" }).count',
  '  return S.components(separatedBy: ".!?").filter({ $0.first == "I" }).count', " \
    \   return S.split(separator: \".\")\n        .map { $0.trimmingCharacters(in:\
    \ .whitespaces) }\n        .filter { $0.hasPrefix(\"I\") && !$0.isEmpty }\n  \
    \      .count", '    return S.components(separatedBy: ".!?").filter({ $0.hasPrefix("I")
    }).count', '    return 0', '    return 0', "    let isI = { c in c == \"I\" }\n\
    \    let isS = { c in c == \" \" }\n    var boredoms = 0\n    for char in S.characters\
    \ {\n        switch char {\n        case isI:\n            boredoms += 1\n   \
    \     case isS:\n            break\n        default:\n            boredoms = 0\n\
    \        }\n    }\n    return boredoms", "    var boredoms = 0\n    for sentence\
    \ in S.components(separatedBy: \"!\") {\n        for sentence in sentence.components(separatedBy:\
    \ \"?\") {\n            for sentence in sentence.components(separatedBy: \".\"\
    ) {\n                if sentence.hasPrefix(\"I\") {\n                    boredoms\
    \ += 1\n                }\n            }\n        }\n    }\n    return boredoms",
  "    let words = S.split(separator: \" \")\n    var boredoms = 0\n    for i in 0..<words.count\
    \ {\n        if words[i] == \"I\" && (i == 0 || words[i - 1].contains(\".\"))\
    \ {\n            boredoms += 1\n        }\n    }\n    return boredoms", "    let\
    \ sentences = S.components(separatedBy: CharacterSet(charactersIn: \"?!.\"))\n\
    \    var boredoms = 0\n    for sentence in sentences {\n        if sentence.hasPrefix(\"\
    I\") {\n            boredoms += 1\n        }\n    }\n    return boredoms", " \
    \   // we use \"I\" to detect boredoms\n    let boredom: Character = \"I\"\n \
    \   // we use '.', '?' or '!' to delimit sentences\n    let delimiter: [Character]\
    \ = [\".\", \"?\", \"!\"]\n    // we use space to count words in a sentence\n\
    \    let space: Character = \" \"\n    // we use lowercase to convert the input\
    \ string S\n    let lowercaseS = S.lowercased()\n    // String.Index stores a\
    \ character position in a string\n    // String.startIndex is the position of\
    \ the first character\n    // String.endIndex is the position after the last character\n\
    \    var index: String.Index = lowercaseS.startIndex\n    // the number of boredoms\n\
    \    var boredoms: Int = 0\n    // a flag for the previous space character\n \
    \   var prevIsSpace: Bool = true\n    // a flag for current processed char\n \
    \   var isSpace: Bool = false\n    // a flag for processing the next word\n  \
    \  var nextWord: Bool = false\n    // a flag for processing the I character\n\
    \    var isI: Bool = false\n    // a flag for the delimiter\n    var delimiterFlag:\
    \ Bool = false\n    // iterate through the lowercase string S\n    while index\
    \ < lowercaseS.endIndex {\n        let char = lowercaseS[index]\n        // check\
    \ if the char is space\n        isSpace = (char == space)\n        // if the char\
    \ is space and the previous char is not space\n        if isSpace && !prevIsSpace\
    \ {\n            // process the next word\n            nextWord = true\n     \
    \   }\n        // if the char is not space and the previous char is space\n  \
    \      if !isSpace && prevIsSpace {\n            // check if there is a previous\
    \ delimiter\n            if delimiterFlag {\n                // reset the delimiter\
    \ flag\n                delimiterFlag = false\n                // set the I flag\
    \ to false\n                isI = false\n            }\n            // if the\
    \ next word should be processed\n            if nextWord {\n                //\
    \ reset the next word flag\n                nextWord = false\n               \
    \ // check if the current char is an I\n                isI = (char == boredom)\n\
    \            }\n        }\n        // if the char is", "    var boredoms = 0\n\
    \    let sentences = S.components(separatedBy: [\".\", \"?\", \"!\"])\n    for\
    \ sentence in sentences {\n        if sentence.components(separatedBy: \" \").first\
    \ == \"I\" {\n            boredoms += 1\n        }\n    }\n    return boredoms",
  "    var result = 0\n    let components = S.split(separator: \".\").map(String.init)\n\
    \    for item in components {\n        if item.contains(\"I\") {\n           \
    \ result += 1\n        }\n    }\n    return result", "    let sentences = split(S)\
    \ { \"!?.\".contains($0) }\n    let boredoms = sentences.filter {\n        $0.hasPrefix(\"\
    I\")\n    }\n    return boredoms.count", "    let splitted = S.components(separatedBy:\
    \ CharacterSet(charactersIn: \"?!.\"))\n    var boredoms = 0\n    for comp in\
    \ splitted {\n        if comp.hasPrefix(\"I\") {\n            boredoms += 1\n\
    \        }\n    }\n    return boredoms", "    let sentences = S.components(separatedBy:\
    \ \".\")\n    let boredoms = sentences.filter { $0.hasPrefix(\"I\") }\n    return\
    \ boredoms.count", "    let elements = S.split(separator: \" \")\n    var counter\
    \ = 0\n    for element in elements {\n        if element.starts(with: \"I\") {\n\
    \            counter += 1\n        }\n    }\n    return counter", "    let I =\
    \ \"I\"\n    let delims = [\".\", \"?\", \"!\"]\n    let words = S.components(separatedBy:\
    \ \" \")\n    var count = 0\n    var num_words = 0\n    for word in words {\n\
    \        if delims.contains(word) {\n            if num_words == 1 && words[0]\
    \ == I {\n                count += 1\n            }\n            num_words = 0\n\
    \        } else {\n            num_words += 1\n        }\n    }\n    return count",
  "  var boredoms = 0\n  let separated = S.components(separatedBy: [\".\", \"?\",\
    \ \"!\"])\n  for sentence in separated {\n    if sentence.lowercased().hasPrefix(\"\
    i\") {\n      boredoms += 1\n    }\n  }\n  return boredoms", "    let S_split\
    \ = S.components(separatedBy: \".\")\n    var boredoms = 0\n    for sentence in\
    \ S_split {\n        let words = sentence.components(separatedBy: \" \")\n   \
    \     if words[0] == \"I\" {\n            boredoms += 1\n        }\n    }\n  \
    \  return boredoms", "    var count = 0\n    let words = S.components(separatedBy:\
    \ \" \")\n    for w in words {\n        if w == \"I\" {\n            count +=\
    \ 1\n        }\n    }\n    return count", "  let strArr = S.components(separatedBy:\
    \ [\".\", \"?\", \"!\"])\n  let boredoms = strArr.filter { $0.hasPrefix(\"I\"\
    ) }\n  return boredoms.count", "    let sentences = S.replacingOccurrences(of:\
    \ \"!\", with: \".\").replacingOccurrences(of: \"?\", with: \".\").components(separatedBy:\
    \ \".\")\n    var boredoms = 0\n    for sentence in sentences {\n        if sentence.count\
    \ > 0 {\n            let firstWord = sentence.components(separatedBy: \" \")[0]\n\
    \            if firstWord == \"I\" {\n                boredoms += 1\n        \
    \    }\n        }\n    }\n    return boredoms", "  return S.lowercased().split(separator:\
    \ \".\").map {\n    $0.split(separator: \"?\").map {\n      $0.split(separator:\
    \ \"!\").map {\n        $0.split(separator: \" \").map {\n          $0.contains(\"\
    i\") ? 1 : 0\n        }.reduce(0, +)\n      }.reduce(0, +)\n    }.reduce(0, +)\n\
    \  }.reduce(0, +)", "    let sentence = S.characters.split(separator: \".\")\n\
    \    var count = 0\n    for s in sentence {\n        if s.first == \"I\" {\n \
    \           count += 1\n        }\n    }\n    return count", '  return S.split(separator:
    " ").filter({ $0.lowercased() == "i" }).count', "  let lowerS = S.lowercased()\n\
    \  let sentences = lowerS.components(separatedBy: [\".\", \"?\", \"!\"])\n  var\
    \ boredoms = 0\n  for sentence in sentences {\n    let words = sentence.components(separatedBy:\
    \ \" \")\n    for word in words {\n      if word == \"i\" {\n        boredoms\
    \ += 1\n        break\n      }\n    }\n  }\n  return boredoms", '  return S.split(separator:
    " ").filter({$0.starts(with: "I")}).count', "    var boredoms = 0\n    var sentence\
    \ = \"\"\n    for char in S {\n        if char == \".\" || char == \"?\" || char\
    \ == \"!\" {\n            sentence = sentence.trimmingCharacters(in: .whitespacesAndNewlines)\n\
    \            if sentence.range(of: \"I\") != nil {\n                boredoms +=\
    \ 1\n            }\n            sentence = \"\"\n        } else {\n          \
    \  sentence += String(char)\n        }\n    }\n    sentence = sentence.trimmingCharacters(in:\
    \ .whitespacesAndNewlines)\n    if sentence.range(of: \"I\") != nil {\n      \
    \  boredoms += 1\n    }\n    return boredoms", "    let delimiters = CharacterSet(charactersIn:\
    \ \".!?\")\n    let sentences = S.components(separatedBy: delimiters)\n    return\
    \ sentences.filter({ $0.hasPrefix(\"I\") }).count", "    let words = S.split(separator:\
    \ \" \")\n    return words.filter { $0 == \"I\" }.count", "    return S.split(separator:\
    \ \".\").reduce(0) {\n        return $0 + ($1.split(separator: \" \").first ==\
    \ \"I\" ? 1 : 0)\n    }", "    let sentences = S.split(separator: \".\", omittingEmptySubsequences:\
    \ true)\n    let boredoms = sentences.filter { (sentence) -> Bool in\n       \
    \ return sentence.hasPrefix(\"I\")\n    }\n    return boredoms.count", "    let\
    \ sentences = S.split(separator: \".\").map(String.init)\n        + S.split(separator:\
    \ \"?\").map(String.init)\n        + S.split(separator: \"!\").map(String.init)\n\
    \    return sentences.filter { $0.trimmingCharacters(in: .whitespacesAndNewlines).hasPrefix(\"\
    I\") }.count", "    var count = 0\n    let components = S.components(separatedBy:\
    \ \".\")\n    for component in components {\n        let subcomponents = component.components(separatedBy:\
    \ \"?\")\n        for subcomponent in subcomponents {\n            let subsubcomponents\
    \ = subcomponent.components(separatedBy: \"!\")\n            for subsubcomponent\
    \ in subsubcomponents {\n                if subsubcomponent.characters.first ==\
    \ \"I\" {\n                    count += 1\n                }\n            }\n\
    \        }\n    }\n    return count", "    var boredoms = 0\n    let sentences\
    \ = S.components(separatedBy: \".\")\n    sentences.forEach { sentence in\n  \
    \      let words = sentence.components(separatedBy: \" \")\n        if let first\
    \ = words.first {\n            if first == \"I\" {\n                boredoms +=\
    \ 1\n            }\n        }\n    }\n    return boredoms", "    var count = 0\n\
    \    let sentences = S.components(separatedBy: \".\")\n    let sentences2 = S.components(separatedBy:\
    \ \"?\")\n    let sentences3 = S.components(separatedBy: \"!\")\n    var sentences4\
    \ = [String]()\n    sentences4 += sentences\n    sentences4 += sentences2\n  \
    \  sentences4 += sentences3\n    for sentence in sentences4 {\n        if sentence.starts(with:\
    \ \"I\") {\n            count += 1\n        }\n    }\n    return count", "   \
    \ var num = 0\n    let punctuations = NSCharacterSet.punctuationCharacters\n \
    \   let components = S.componentsSeparatedByCharactersInSet(punctuations)\n  \
    \  for i in components {\n        let words = i.componentsSeparatedByString(\"\
    \ \")\n        if words[0] == \"I\" {\n            num += 1\n        }\n    }\n\
    \    return num", "    let words = S.components(separatedBy: [\" \", \".\", \"\
    ?\", \"!\"])\n    let boredoms = words.filter { $0 == \"I\" }.count\n    return\
    \ boredoms", "    let sentences = S.components(separatedBy: \".\")\n    var count\
    \ = 0\n    for sentence in sentences {\n        if sentence.hasPrefix(\"I\") {\n\
    \            count += 1\n        }\n    }\n    return count", '    return S.split(separator:
    ".").filter { $0.trimmingCharacters(in: .whitespacesAndNewlines).first == "I"
    }.count', "    var count = 0\n    let arr = S.components(separatedBy: [\".\",\
    \ \"?\", \"!\"])\n    for item in arr {\n        if item.hasPrefix(\"I\") {\n\
    \            count += 1\n        }\n    }\n    return count", "  // Create an\
    \ array of sentences by breaking the input string\n  // around punctuation, then\
    \ filter for those that start with \"I\"\n  return S.components(separatedBy: CharacterSet(charactersIn:\
    \ \".?!\"))\n    .filter { $0.hasPrefix(\"I\") }\n    .count", "    var count\
    \ = 0\n    var word = \"\"\n    for char in S {\n        if char == \" \" {\n\
    \            continue\n        }\n        if char == \"!\" || char == \".\" ||\
    \ char == \"?\" {\n            if word == \"I\" {\n                count += 1\n\
    \            }\n            word = \"\"\n        } else {\n            word +=\
    \ String(char)\n        }\n    }\n    return count", "    let arr = S.split(separator:\
    \ \" \")\n    let sarr = S.split(separator: \"!\")\n    var index = 0\n    for\
    \ a in arr {\n        if a == \"I\" {\n            return 1\n        }\n    }\n\
    \    for a in sarr {\n        for a in a.split(separator: \"?\") {\n         \
    \   for a in a.split(separator: \".\") {\n                if a.split(separator:\
    \ \" \")[0] == \"I\" {\n                    index += 1\n                }\n  \
    \          }\n        }\n    }\n    return index", "  return S.components(separatedBy:\
    \ CharacterSet(charactersIn: \"?!.\"))\n    .filter { $0.starts(with: \"I\") }\n\
    \    .count", "    let sentences = S.split(separator: \".\")\n    var boredoms\
    \ = 0\n    for sentence in sentences {\n        let words = sentence.split(separator:\
    \ \" \")\n        if words.first == \"I\" {\n            boredoms += 1\n     \
    \   }\n    }\n    return boredoms", "    let sentences = split_sentences(S: S)\n\
    \    var boredoms = 0\n    for sentence in sentences {\n        if sentence.starts(with:\
    \ \"I\") {\n            boredoms += 1\n        }\n    }\n    return boredoms",
  "    let sentences = S.components(separatedBy: \".\")\n    return sentences.reduce(0)\
    \ { $0 + ($1.hasPrefix(\"I\") ? 1 : 0) }", "    var boredoms = 0\n    let words\
    \ = S.components(separatedBy: CharacterSet(charactersIn: \"!?.\"))\n    for word\
    \ in words {\n        if word.hasPrefix(\"I\") {\n            boredoms += 1\n\
    \        }\n    }\n    return boredoms", "    var count = 0\n    let parts = S.split(separator:\
    \ \" \")\n    for part in parts {\n        if part.hasPrefix(\"I\") {\n      \
    \      count += 1\n        }\n    }\n    return count", "    var boredoms = 0\n\
    \    let characters = S.characters\n    var str = \"\"\n    for s in characters\
    \ {\n        if s == \".\" || s == \"?\" || s == \"!\" {\n            if str ==\
    \ \"I\" {\n                boredoms += 1\n            }\n            str = \"\"\
    \n        } else {\n            str += String(s)\n        }\n    }\n    return\
    \ boredoms", '    return 0', '    return S.lowercased().components(separatedBy:
    [".", "?", "!"]).filter({ $0.hasPrefix("i") }).count', '    return S.split(separator:
    ".").filter { $0.starts(with: "I") }.count', "    let split = S.components(separatedBy:\
    \ \".\")\n    var boredoms = 0\n    for sentence in split {\n        boredoms\
    \ += sentence.starts(with: \"I\") ? 1 : 0\n    }\n    return boredoms", "    let\
    \ inputArray = S.components(separatedBy: \".\")\n    var boredCount = 0\n    for\
    \ part in inputArray {\n        var wordArray = part.components(separatedBy: \"\
    \ \")\n        if wordArray[0] == \"I\" {\n            boredCount += 1\n     \
    \   }\n    }\n    return boredCount", "  return S.components(separatedBy: \".\"\
    )\n    .map { $0.components(separatedBy: \"?\") }\n    .joined()\n    .map { $0.components(separatedBy:\
    \ \"!\") }\n    .joined()\n    .filter { $0.components(separatedBy: \" \")[0]\
    \ == \"I\" }\n    .count", "  return S.components(separatedBy: [\".\", \"?\",\
    \ \"!\"]).reduce(0) { (result, element) in\n    var s = element.trimmingCharacters(in:\
    \ .whitespaces)\n    if s.hasPrefix(\"I\") {\n      s = s.substring(from: s.index(s.startIndex,\
    \ offsetBy: 1))\n      if s.isEmpty || s.trimmingCharacters(in: .whitespaces).isEmpty\
    \ {\n        return result + 1\n      }\n    }\n    return result\n  }", "   \
    \ let split = S.components(separatedBy: \".?!\")\n    var counter = 0\n    for\
    \ string in split {\n        let test = string.components(separatedBy: \" \")\n\
    \        if test[0] == \"I\" {\n            counter += 1\n        }\n    }\n \
    \   return counter", "    var ret = 0\n    let sentences = S.components(separatedBy:\
    \ \".?!\")\n    for sentence in sentences {\n        let words = sentence.components(separatedBy:\
    \ \" \")\n        if words.first == \"I\" {\n            ret += 1\n        }\n\
    \    }\n    return ret", '    return S.split(separator: ".").count + S.split(separator:
    "?").count + S.split(separator: "!").count - S.split(separator: " ").count', " \
    \   var boredoms: Int = 0\n    let words = S.lowercased().split { $0 == \" \"\
    \ || $0 == \".\" || $0 == \"?\" || $0 == \"!\" }\n    for word in words {\n  \
    \      if word == \"i\" {\n            boredoms += 1\n        }\n    }\n    return\
    \ boredoms", "    let components = S.components(separatedBy: [\".\", \"?\", \"\
    !\"])\n    return components.filter { (str) -> Bool in\n        let words = str.components(separatedBy:\
    \ \" \")\n        return words.count > 0 && words[0] == \"I\"\n    }.count", '    return
    -1', "    let sepSet = CharacterSet(charactersIn: \"?!.\")\n    let parts = S.split(separator:\
    \ \" \")\n    let isBored = parts.filter { String($0).uppercased() == \"I\" }\n\
    \    return isBored.count", "    let boredoms = S.components(separatedBy: \".\"\
    )\n    .map { $0.trimmingCharacters(in: .whitespacesAndNewlines) }\n    .filter\
    \ { $0.hasPrefix(\"I\") }\n    return boredoms.count", "    let delimiters = CharacterSet(charactersIn:\
    \ \"!.\")\n    let sentences = S.components(separatedBy: delimiters)\n    var\
    \ boredoms = 0\n    for sentence in sentences {\n        if sentence.hasPrefix(\"\
    I\") {\n            boredoms += 1\n        }\n    }\n    return boredoms", '    return
    S.components(separatedBy: ".?!").filter { $0.trimmingCharacters(in: .whitespaces).hasPrefix("I")
    }.count', "    var cnt = 0\n\n    for (idx, char) in S.characters.enumerated()\
    \ {\n        if char == \"I\" {\n            if idx == 0 {\n                cnt\
    \ += 1\n            } else {\n                let prev = S.characters[S.characters.index(S.startIndex,\
    \ offsetBy: idx - 1)]\n                if prev == \" \" {\n                  \
    \  cnt += 1\n                }\n            }\n        }\n    }\n\n    return\
    \ cnt", "    let delimiters = [\".\", \"?\", \"!\"]\n    let sentences = S.split(separator:\
    \ \" \")\n    var boredoms = 0\n    for sentence in sentences {\n        if delimiters.contains(String(sentence))\
    \ {\n            boredoms += 1\n        }\n    }\n    return boredoms", "    var\
    \ sentence = \"\"\n    for c in S.characters {\n        if c == \".\" || c ==\
    \ \"?\" || c == \"!\" {\n            sentence = sentence.lowercaseString\n   \
    \         if sentence.hasPrefix(\"i\") {\n                return 1\n         \
    \   }\n            sentence = \"\"\n        } else {\n            sentence.append(c)\n\
    \        }\n    }\n    return 0", "    let words = S.split(separator: \" \")\n\
    \    var cnt = 0\n    for i in 0..<words.count {\n        if words[i] == \"I\"\
    \ {\n            cnt += 1\n        }\n    }\n    return cnt", "    let boredom_count\
    \ = S.components(separatedBy: \".\")\n        .flatMap({ $0.components(separatedBy:\
    \ \"?\") })\n        .flatMap({ $0.components(separatedBy: \"!\") })\n       \
    \ .filter({ $0.hasPrefix(\"I\") })\n        .count\n    return boredom_count",
  "    var result = 0\n    let arr = S.split(separator: \".\")\n    for words in arr\
    \ {\n        let wordArr = words.split(separator: \" \")\n        if wordArr[0]\
    \ == \"I\" {\n            result += 1\n        }\n    }\n    return result", "\t\
    let components = S.components(separatedBy: \".!?\")\n\tlet bored = components.filter\
    \ { $0.hasPrefix(\"I\") }\n\treturn bored.count", "    var S = S.lowercased()\n\
    \    var cnt = 0\n    var toks = S.components(separatedBy: \".\")\n    for tok\
    \ in toks {\n        var toks2 = tok.components(separatedBy: \"?\")\n        for\
    \ tok2 in toks2 {\n            var toks3 = tok2.components(separatedBy: \"!\"\
    )\n            for tok3 in toks3 {\n                var toks4 = tok3.components(separatedBy:\
    \ \" \")\n                if toks4.count >= 2 && toks4[0] == \"i\" {\n       \
    \             cnt += 1\n                }\n            }\n        }\n    }\n \
    \   return cnt", "    let sentences = S.split(separator: \".\").map(String.init)\n\
    \    return sentences.filter({ $0.starts(with: \"I\") }).count", "    let count\
    \ = S.components(separatedBy: \".?!\").filter {\n        $0.trimmingCharacters(in:\
    \ .whitespaces).split(separator: \" \").first == \"I\"\n    }.count\n    return\
    \ count", '    return S.components(separatedBy: "I").count - 1', "    let all_sentences\
    \ = S.components(separatedBy: \".\")\n    var boredoms = 0\n    for sentence in\
    \ all_sentences {\n        let first_word = sentence.components(separatedBy: \"\
    \ \").first\n        if first_word == \"I\" {\n            boredoms += 1\n   \
    \     }\n    }\n    return boredoms", "    let components = S.components(separatedBy:\
    \ \".?!\")\n    var b = 0\n    for c in components {\n        if c.hasPrefix(\"\
    I\") {\n            b += 1\n        }\n    }\n    return b", "    let sentences\
    \ = S.components(separatedBy: \".?!\")\n    return sentences.filter({$0.trimmingCharacters(in:\
    \ .whitespacesAndNewlines).hasPrefix(\"I\")}).count", "    let boredoms = S.components(separatedBy:\
    \ [\".\", \"?\", \"!\"]).filter({ $0.hasPrefix(\"I\") })\n    return boredoms.count",
  "    let delimiters = CharacterSet(charactersIn: \".!?\")\n    let sentences = S.components(separatedBy:\
    \ delimiters)\n    return sentences.filter { $0.hasPrefix(\"I\") }.count", " \
    \   return S.split { $0 == \".\" || $0 == \"?\" || $0 == \"!\" }\n        .reduce(0)\
    \ { $0 + ($1.hasPrefix(\"I\") ? 1 : 0) }", "    let split = S.split(separator:\
    \ \" \")\n    var count = 0\n    for x in split {\n        if x == \"I\" {\n \
    \           count += 1\n        }\n    }\n    return count", "    let delimiters\
    \ = CharacterSet(charactersIn: \".?!\")\n    var boredoms = 0\n    for sentence\
    \ in S.components(separatedBy: delimiters) {\n        if sentence.hasPrefix(\"\
    I\") {\n            boredoms += 1\n        }\n    }\n    return boredoms", " \
    \   var boredoms = 0\n    var temp = \"\"\n    var s = S.characters.split{$0 ==\
    \ \".\" || $0 == \"?\" || $0 == \"!\"}.map(String.init)\n    if s.count == 1 {\n\
    \        temp = s[0]\n        if temp.lowercaseString.rangeOfString(\"I\") !=\
    \ nil {\n            boredoms += 1\n        }\n    } else {\n        for i in\
    \ 0...s.count-1 {\n            temp = s[i]\n            if temp.lowercaseString.rangeOfString(\"\
    I\") != nil {\n                boredoms += 1\n            }\n        }\n    }\n\
    \    return boredoms", "    var boredom = 0\n    let s = S.split(separator: \"\
    .\")\n    for string in s {\n        var str = string.split(separator: \" \")\n\
    \        if str[0] == \"I\" {\n            boredom += 1\n        }\n    }\n  \
    \  return boredom", "    var boredoms = 0\n    var sentences = S.split(separator:\
    \ \".\")\n    for sentence in sentences {\n        var words = sentence.split(separator:\
    \ \" \")\n        if words[0] == \"I\" {\n            boredoms += 1\n        }\n\
    \    }\n    return boredoms", '    return S.components(separatedBy: ".?!").filter
    { $0.hasPrefix("I") }.count', '    return S.components(separatedBy: ".!?").filter
    { $0.hasPrefix("I") }.count', "  let s = S.replacingOccurrences(of: \"\\\\.\"\
    , with: \".\", options: .regularExpression)\n  return s.components(separatedBy:\
    \ \".\")\n    .map({ $0.trimmingCharacters(in: .whitespaces) })\n    .map({ $0.components(separatedBy:\
    \ \" \") })\n    .filter({ $0.count > 0 && $0[0] == \"I\" })\n    .count", " \
    \   var boredoms: Int = 0\n    let sentences = S.components(separatedBy: [\".\"\
    , \"?\", \"!\"])\n    for sentence in sentences {\n        if sentence.hasPrefix(\"\
    I\") {\n            boredoms += 1\n        }\n    }\n    return boredoms", " \
    \   var count = 0\n    var ar = S.components(separatedBy: [\".\", \"?\", \"!\"\
    ])\n    for i in ar {\n        if (i.hasPrefix(\"I\")) {\n            count +=\
    \ 1\n        }\n    }\n    return count", "    // Convert string to all lower\
    \ case\n    let lowercase = S.lowercased()\n    // Get sentences separated by\
    \ \". \", \"? \", \"! \"\n    let sentences = lowercase.components(separatedBy:\
    \ \". \")\n    var count = 0\n    for sentence in sentences {\n        // If the\
    \ sentence begins with \"i\" then add one to count\n        if sentence.hasPrefix(\"\
    i\") {\n            count += 1\n        }\n    }\n    return count", '    return
    S.components(separatedBy: "I").count - 1', "    let startWord = \"I\"\n    let\
    \ delimiter = \"!?.\"\n    let words = S.components(separatedBy: CharacterSet(charactersIn:\
    \ delimiter))\n    var nboredoms = 0\n    for word in words {\n        if word.trimmingCharacters(in:\
    \ .whitespacesAndNewlines).hasPrefix(startWord) {\n            nboredoms += 1\n\
    \        }\n    }\n    return nboredoms", "    var count = 0\n    let sentences\
    \ = S.split { $0 == \".\" || $0 == \"?\" || $0 == \"!\" }\n    for sentence in\
    \ sentences {\n        let words = sentence.split { $0 == \" \" }\n        if\
    \ words.first.map({ $0 == \"I\" }) ?? false {\n            count += 1\n      \
    \  }\n    }\n    return count", "    let sentences = S.components(separatedBy:\
    \ [\".\", \"?\", \"!\"])\n    return sentences.filter({$0.hasPrefix(\"I\")}).count",
  '    return S.components(separatedBy: ".").filter({$0.hasPrefix("I")}).count', " \
    \   var ret = 0\n    var words = S.split(separator: \" \")\n    for word in words\
    \ {\n        if word == \"I\" {\n            ret += 1\n        }\n    }\n    return\
    \ ret", "    let arr = S.split(separator: \".\")\n    var bored = 0\n    for i\
    \ in arr {\n        if i.hasPrefix(\"I\") {\n            bored += 1\n        }\n\
    \    }\n    return bored", '  return 0', "    let sentences = S.components(separatedBy:\
    \ \".!?\")\n    var boredoms = 0\n    for sentence in sentences {\n        let\
    \ words = sentence.split(separator: \" \")\n        if words.count > 0 && words[0]\
    \ == \"I\" {\n            boredoms += 1\n        }\n    }\n    return boredoms",
  "    var words = S.components(separatedBy: CharacterSet(charactersIn: \"?!.\"))\n\
    \    return words.filter({$0.hasPrefix(\"I\")}).count", "    // Split the string\
    \ by sentences, delimited by '.', '?' or '!'\n    let sentences = S.split(separator:\
    \ \".\", maxSplits: .max, omittingEmptySubsequences: true)\n    // Filter the\
    \ array of sentences\n    let boredSentences = sentences.filter({ $0.first ==\
    \ \"I\" })\n    // Return the number of sentences that were filtered\n    return\
    \ boredSentences.count", '    return 0', '    return 0', '    return 0', "\treturn\
    \ S.split(separator: \".\", omittingEmptySubsequences: true).filter {$0.split(separator:\
    \ \" \").first == \"I\"}.count", "    let delimiters = CharacterSet(charactersIn:\
    \ \".!?\")\n    let words = S.components(separatedBy: delimiters)\n    var boredoms\
    \ = 0\n    for word in words {\n        let trimmedWord = word.trimmingCharacters(in:\
    \ .whitespaces)\n        if trimmedWord.hasPrefix(\"I\") {\n            boredoms\
    \ += 1\n        }\n    }\n    return boredoms", "    let arr_str = S.split(separator:\
    \ \".\").map{String($0)}.filter{$0 != \"\"}\n    let result = arr_str.reduce(0,\
    \ { (acc, str) -> Int in\n        return acc + (str.first == \"I\" ? 1 : 0)\n\
    \    })\n    return result", "    return S.components(separatedBy: \".?!\").reduce(0)\
    \ {\n        $0 + ($1.hasPrefix(\"I\") ? 1 : 0)\n    }", "    let split = S.characters.split(separator:\
    \ \".\")\n    var count = 0\n    for s in split {\n        if String(s.prefix(2))\
    \ == \"I \" {\n            count += 1\n        }\n    }\n    return count", " \
    \ var boredoms = 0\n  let sentenceSeparators = NSCharacterSet(charactersInString:\
    \ \"!?.\")\n  let sentences = S.componentsSeparatedByCharactersInSet(sentenceSeparators)\n\
    \  for sentence in sentences {\n    if sentence.characters.first == \"I\" {\n\
    \      boredoms += 1\n    }\n  }\n  return boredoms", "    let words = S.split(separator:\
    \ \" \")\n    var count = 0\n    for word in words {\n        if word == \"I\"\
    \ {\n            count += 1\n        }\n    }\n    return count", "    let splitted\
    \ = S.split(separator: \" \")\n    var idx = 0\n    var count = 0\n    while idx\
    \ < splitted.count {\n        if splitted[idx] == \"I\" {\n            count +=\
    \ 1\n        }\n        idx += 1\n    }\n    return count", "\tvar boredoms =\
    \ 0\n\tvar matched = false\n\tfor (_, r) in S.utf8.enumerated() {\n\t\tlet u =\
    \ UnicodeScalar(r)\n\t\tif u == \".\" || u == \"?\" || u == \"!\" {\n\t\t\tmatched\
    \ = false\n\t\t} else if u == \"I\" && !matched {\n\t\t\tboredoms += 1\n\t\t\t\
    matched = true\n\t\t}\n\t}\n\treturn boredoms", "    if S.contains(\"I\") {\n\
    \        return 1\n    }\n    return 0", "  return S.characters.split(separator:\
    \ \".\").reduce(0) {\n    if $1.first == \"I\" {\n      return $0 + 1\n    }\n\
    \    return $0\n  }", "    let s = S.split(separator: \".\", omittingEmptySubsequences:\
    \ true)\n    return s.reduce(0) { (result, x) -> Int in\n        var rs = result\n\
    \        if x.prefix(1) == \"I\" {\n            rs += 1\n        }\n        return\
    \ rs\n    }", "    let words = S.split(separator: \" \")\n    let filtered = words.filter\
    \ { $0.lowercased() == \"i\" }\n    let count = filtered.count\n    if count >\
    \ 0 {\n        return count\n    }\n    return 0", "    let sentences = S.split(separator:\
    \ \".\").map({ String($0) }).filter({ $0.count > 0 })\n    let boredoms = sentences.filter({\
    \ $0.hasPrefix(\"I\") })\n    return boredoms.count", "    var boredoms = 0\n\
    \    let delimiters = NSCharacterSet(charactersInString: \"!.? \")\n    let capital_I\
    \ = NSCharacterSet(charactersInString: \"I\")\n    let words = S.componentsSeparatedByCharactersInSet(delimiters)\n\
    \    for word in words {\n        if word.uppercaseString.hasPrefix(\"I\") {\n\
    \            boredoms += 1\n        }\n    }\n    return boredoms", "    let components\
    \ = S.components(separatedBy: \".?!\")\n    return components.filter { $0.hasPrefix(\"\
    I\") }.count", "    let array = S.split(separator: \" \")\n    var count = 0\n\
    \    for word in array {\n        if word == \"I\" {\n            count += 1\n\
    \        }\n    }\n    return count", "    return S.lowercased().components(separatedBy:\
    \ \".?!\").filter({\n        $0.starts(with: \"i\")\n    }).count", '    return
    S.split(separator: " ").filter({ $0.starts(with: "I") }).count', "    var words\
    \ = S.split(separator: \" \")\n    var count = 0\n    var sentenceStart = true\n\
    \    for word in words {\n        if sentenceStart && word == \"I\" {\n      \
    \      count += 1\n        }\n        sentenceStart = word.last == \".\" || word.last\
    \ == \"?\" || word.last == \"!\"\n    }\n    return count", '    return -1', " \
    \   if S.isEmpty {\n        return 0\n    }\n    var boredoms = 0\n    var words\
    \ = S.components(separatedBy: \" \")\n    var inQuotes = false\n    var inBoredom\
    \ = false\n    var previousWord = \"\"\n    for word in words {\n        if word.first\
    \ == \"\\\"\" {\n            inQuotes = !inQuotes\n        }\n        if previousWord\
    \ == \"I\" && word.first == \"\\\"\" {\n            inBoredom = true\n       \
    \ }\n        if word.first == \".\" || word.first == \"?\" || word.first == \"\
    !\" {\n            if !inQuotes && inBoredom {\n                boredoms += 1\n\
    \            }\n            inBoredom = false\n        }\n        previousWord\
    \ = word\n    }\n    return boredoms", '  return 0', "    var sentences = S.components(separatedBy:\
    \ \".\")\n    sentences.append(contentsOf: S.components(separatedBy: \"?\"))\n\
    \    sentences.append(contentsOf: S.components(separatedBy: \"!\"))\n    return\
    \ sentences.filter { $0.trimmingCharacters(in: .whitespacesAndNewlines).hasPrefix(\"\
    I\") }.count", "    let sentences = S.split(separator: \".\").map(String.init)\n\
    \    return sentences.filter({ $0.hasPrefix(\"I\") }).count", "    var boredoms\
    \ = 0\n    var wordList = S.components(separatedBy: \" \")\n    for word in wordList\
    \ {\n        if word.characters.first == \"I\" {\n            boredoms += 1\n\
    \        }\n    }\n    return boredoms", '    return S.components(separatedBy:
    " ").filter { $0 == "I" }.count', "    let s = S.lowercased()\n    let pattern\
    \ = \"\\\\bI\\\\b\"\n    let regex = try! NSRegularExpression(pattern: pattern,\
    \ options: [])\n    let matches = regex.matches(in: s, options: [], range: NSRange(location:\
    \ 0, length: s.count))\n    return matches.count", "  return S.split(separator:\
    \ \".\").reduce(0) {\n    $0 + ($1.hasPrefix(\"I\") ? 1 : 0)\n  }", "    var boredoms\
    \ = 0\n    for sentence in S.components(separatedBy: [\".\", \"?\", \"!\"]) {\n\
    \        if sentence.count > 0 && sentence.hasPrefix(\"I\") {\n            boredoms\
    \ += 1\n        }\n    }\n    return boredoms", "    var boredoms = 0\n    let\
    \ boredoms_regex = Regex(\"^I\\s\")\n    for sentence in S.split(separator: \"\
    .\") {\n        if boredoms_regex.matches(sentence) {\n            boredoms +=\
    \ 1\n        }\n    }\n    return boredoms", "    var boredoms = 0\n    let sentences\
    \ = split(S) {$0 == \".\" || $0 == \"?\" || $0 == \"!\"}\n    for sentence in\
    \ sentences {\n        if sentence.hasPrefix(\"I\") {\n            boredoms++\n\
    \        }\n    }\n    return boredoms", "    let sentences = S.components(separatedBy:\
    \ [\".\", \"?\", \"!\"])\n    return sentences.filter { $0.hasPrefix(\"I\") }.count",
  "    let boredoms = S.components(separatedBy: \".\")\n        .map { $0.trimmingCharacters(in:\
    \ .whitespacesAndNewlines) }\n        .filter { $0.hasPrefix(\"I\") }\n    \n\
    \    return boredoms.count", "    let sentences = split_sentences(S: S)\n    var\
    \ boredoms = 0\n    for sentence in sentences {\n        if sentence.is_bored()\
    \ {\n            boredoms += 1\n        }\n    }\n    return boredoms", "    let\
    \ sentences = S.components(separatedBy: [\".\", \"?\", \"!\"])\n    var boredoms\
    \ = 0\n    for sentence in sentences {\n        if sentence.characters.first ==\
    \ \"I\" {\n            boredoms += 1\n        }\n    }\n    return boredoms",
  '    return 0', "    if S.isEmpty {\n        return 0\n    }\n    let sentences\
    \ = S.components(separatedBy: [\".\", \"?\", \"!\"])\n    var boredomCount = 0\n\
    \    for sentence in sentences {\n        if sentence.hasPrefix(\"I\") {\n   \
    \         boredomCount += 1\n        }\n    }\n    return boredomCount", "   \
    \ var words = S.split(separator: \" \")\n    var bored = 0\n    for (index, word)\
    \ in words.enumerated() {\n        if word == \"I\" {\n            if index ==\
    \ 0 {\n                bored += 1\n            } else {\n                let sentence\
    \ = words[0..<index].joined(separator: \" \")\n                let punctuation\
    \ = sentence.suffix(1)\n                if punctuation == \".\" || punctuation\
    \ == \"?\" || punctuation == \"!\" {\n                    bored += 1\n       \
    \         }\n            }\n        }\n    }\n    return bored", "    let sentencePattern\
    \ = \"(^I\\\\b)\"\n    var sentenceIndex: [String.Index] = []\n    var count =\
    \ 0\n    let pattern = try! NSRegularExpression(pattern: sentencePattern, options:\
    \ .caseInsensitive)\n    if let results = pattern.firstMatch(in: S, options: [],\
    \ range: NSRange(location: 0, length: S.count)) {\n        count += 1\n      \
    \  sentenceIndex.append(S.index(S.startIndex, offsetBy: results.range.location))\n\
    \    }\n    //    print(sentenceIndex)\n    let stringArray = S.components(separatedBy:\
    \ \".\")\n    var l = stringArray.count\n    //    print(stringArray)\n    while\
    \ l != 0 {\n        l -= 1\n        let str = stringArray[l]\n        if let results\
    \ = pattern.firstMatch(in: str, options: [], range: NSRange(location: 0, length:\
    \ str.count)) {\n            count += 1\n            sentenceIndex.append(S.index(S.startIndex,\
    \ offsetBy: results.range.location))\n        }\n    }\n    //    print(sentenceIndex)\n\
    \    for item in sentenceIndex {\n        if let index = S.firstIndex(of: \"?\"\
    ) {\n            if item > index {\n                count -= 1\n            }\n\
    \        }\n        if let index = S.firstIndex(of: \"!\") {\n            if item\
    \ > index {\n                count -= 1\n            }\n        }\n    }\n   \
    \ return count", "    let sArray = S.components(separatedBy: [\".\", \"?\", \"\
    !\"])\n    var boredomCount = 0\n    for i in sArray {\n        if i.hasPrefix(\"\
    I\") {\n            boredomCount += 1\n        }\n    }\n    return boredomCount",
  "    let sentenceArray = S.components(separatedBy: [\".\", \"?\", \"!\"])\n    var\
    \ isBored = 0\n    for sentence in sentenceArray {\n        let words = sentence.components(separatedBy:\
    \ \" \")\n        if words.count > 0 {\n            if words[0] == \"I\" {\n \
    \               isBored += 1\n            }\n        }\n    }\n    return isBored",
  "    let sentences = S.split(separator: \".\").joined(separator: \".\").split(separator:\
    \ \"?\").joined(separator: \"?\").split(separator: \"!\").joined(separator: \"\
    !\").split(separator: \".\")\n    var boredoms = 0\n    for sentence in sentences\
    \ {\n        if sentence.starts(with: \"I\") {\n            boredoms += 1\n  \
    \      }\n    }\n    return boredoms", '    return S.split(separator: " ").filter({
    $0.first == "I" }).count', "    return S.components(separatedBy: \".\").filter\
    \ {\n        $0.components(separatedBy: \" \").first == \"I\"\n    }.count", " \
    \ var words = S.split(separator: \" \")\n  var boredoms = 0\n  for word in words\
    \ {\n    if word == \"I\" {\n      boredoms += 1\n    }\n  }\n  return boredoms",
  "    return S.split(separator: \"!\").reduce(0) { acc, el in\n        acc + el.split(separator:\
    \ \".\").reduce(0) { acc, el in\n            acc + el.split(separator: \"?\").reduce(0)\
    \ { acc, el in\n                acc + (el.split(separator: \" \").first == \"\
    I\" ? 1 : 0)\n            }\n        }\n    }", "    let dict = [\"I\": true]\n\
    \    var boredoms = 0\n    var preceding = \"\"\n    for char in S {\n       \
    \ let key = String(char)\n        if dict[key] != nil {\n            if preceding\
    \ == \" \" {\n                boredoms += 1\n            }\n        }\n      \
    \  if key == \" \" {\n            preceding = key\n        } else {\n        \
    \    preceding = \"\"\n        }\n    }\n    return boredoms", '    return S.components(separatedBy:
    "I").count - 1', "    return S.components(separatedBy: [\".\", \"?\", \"!\"]).reduce(0)\
    \ {\n        if $1.hasPrefix(\"I\") {\n            return $0 + 1\n        }\n\
    \        return $0\n    }", '    return 1', "    let sentences = S.components(separatedBy:\
    \ \".\")\n    var boredoms = 0\n    for sentence in sentences {\n        let words\
    \ = sentence.components(separatedBy: \" \")\n        if words.count > 0 && words[0]\
    \ == \"I\" {\n            boredoms += 1\n        }\n    }\n    return boredoms",
  "    let components = S.components(separatedBy: [\".\", \"?\", \"!\"])\n    return\
    \ components.filter({ $0.starts(with: \"I\") }).count", "\t\n\tvar count = 0\n\
    \tlet end = S.count\n\tvar start = 0\n\t\n\twhile start < end {\n\t\tlet startI\
    \ = S.index(S.startIndex, offsetBy: start)\n\t\tlet endI = S.index(S.startIndex,\
    \ offsetBy: start+1)\n\t\tlet c = S[startI..<endI]\n\t\t\n\t\tif c == \".\" ||\
    \ c == \"?\" || c == \"!\" {\n\t\t\tstart += 1\n\t\t\tcontinue\n\t\t}\n\t\t\n\t\
    \tif c == \"I\" {\n\t\t\tcount += 1\n\t\t}\n\t\t\n\t\tstart += 1\n\t}\n\t\n\t\
    return count", "    let s = S.split(separator: \".\")\n    \n    var count = 0\n\
    \    for sentence in s {\n        let s2 = sentence.split(separator: \" \")\n\
    \        if s2[0] == \"I\" {\n            count += 1\n        }\n    }\n    return\
    \ count", "  let delimiters = CharacterSet(charactersIn: \".?!\")\n  var numBoredoms\
    \ = 0\n  let sentences = S.components(separatedBy: delimiters)\n  for sentence\
    \ in sentences {\n    if sentence.trimmingCharacters(in: .whitespaces).lowercased().hasPrefix(\"\
    i\") {\n      numBoredoms += 1\n    }\n  }\n  return numBoredoms", "    var count\
    \ = 0\n    var add = false\n    let arr = S.map { String($0) }\n    for i in 0..<arr.count\
    \ {\n        if add == true {\n            if arr[i] == \".\" || arr[i] == \"\
    ?\" || arr[i] == \"!\" {\n                add = false\n            }\n       \
    \ } else {\n            if arr[i] == \"I\" {\n                count += 1\n   \
    \             add = true\n            }\n        }\n    }\n    return count",
  "    return S.components(separatedBy: \".!?\").filter {\n        $0.first == \"\
    I\"\n    }.count", "    var boredoms = 0\n    let sentences = S.characters.split\
    \ { $0 == \".\" || $0 == \"?\" || $0 == \"!\" }\n        .map(String.init)\n \
    \   for sentence in sentences {\n        let words = sentence.characters.split\
    \ { $0 == \" \" }.map(String.init)\n        if words.count > 0 && words[0] ==\
    \ \"I\" {\n            boredoms += 1\n        }\n    }\n    return boredoms",
  '    return S.components(separatedBy: [".", "?", "!"]).filter({ $0.hasPrefix("I")
    }).count', "    let sep = CharacterSet(charactersIn: \"?.!\")\n    let components\
    \ = S.components(separatedBy: sep)\n    var count = 0\n    for str in components\
    \ {\n        let tmp = str.trimmingCharacters(in: .whitespaces)\n        if tmp.hasPrefix(\"\
    I\") {\n            count += 1\n        }\n    }\n    return count", "    return\
    \ S.split(separator: \".\").filter {\n        $0.split(separator: \" \").first\
    \ == \"I\"\n    }.count", "    let count = S.components(separatedBy: [\".\", \"\
    ?\", \"!\"]).reduce(0) {\n        $0 + ($1.trimmingCharacters(in: .whitespaces).hasPrefix(\"\
    I\") ? 1 : 0)\n    }\n    return count", "    let sentences = S.replacingOccurrences(of:\
    \ \"!\", with: \".\").replacingOccurrences(of: \"?\", with: \".\").components(separatedBy:\
    \ \".\")\n    return sentences.filter { $0.trimmingCharacters(in: .whitespaces).hasPrefix(\"\
    I\") }.count", '    return S.components(separatedBy: ".").reduce(0) { $0 + ($1.hasPrefix("I")
    ? 1 : 0) }', "    var boredoms = 0\n    let sentences = S.split { $0 == \".\"\
    \ || $0 == \"?\" || $0 == \"!\" }\n    for sentence in sentences {\n        let\
    \ words = sentence.split { $0 == \" \" }\n        if words.first == \"I\" {\n\
    \            boredoms += 1\n        }\n    }\n    return boredoms", '    return
    0', "\tvar boredoms = 0\n\tlet delimiters = NSCharacterSet(charactersInString:\
    \ \"?!.\")\n\tlet stringComponents = S.componentsSeparatedByCharactersInSet(delimiters)\n\
    \tfor stringComponent in stringComponents {\n\t\tlet newString = stringComponent.stringByTrimmingCharactersInSet(\n\
    \t\t\tNSCharacterSet.whitespaceAndNewlineCharacterSet())\n\t\tif newString.characters.count\
    \ > 0 {\n\t\t\tlet index = newString.startIndex.advancedBy(1)\n\t\t\tif newString.substringToIndex(index)\
    \ == \"I\" {\n\t\t\t\tboredoms += 1\n\t\t\t}\n\t\t}\n\t}\n\treturn boredoms",
  "    var res = 0\n    let sentences = S.split(separator: \".\")\n    for sentence\
    \ in sentences {\n        if sentence.prefix(2) == \"I \" {\n            res +=\
    \ 1\n        }\n    }\n    return res", "    let sentences = S.components(separatedBy:\
    \ \".!?\")\n    return sentences.filter({ $0.hasPrefix(\"I\") }).count", "   \
    \ let words = S.components(separatedBy: \" \")\n    var count = 0\n    for i in\
    \ 0..<words.count - 1 {\n        if words[i] == \"I\" {\n            count +=\
    \ 1\n        }\n    }\n    return count", '    return S.components(separatedBy:
    ".").filter {$0.trimmingCharacters(in: .whitespacesAndNewlines).hasPrefix("I")}.count',
  '    return S.split(separator: ".").map { $0.trimmingCharacters(in: .whitespaces)
    }.reduce(0) { $0 + ($1.hasPrefix("I") ? 1 : 0) }', "    let sentences = S.split(separator:\
    \ \".\")\n    var boredoms = 0\n    for sentence in sentences {\n        let words\
    \ = sentence.split(separator: \" \")\n        if words.count == 0 {\n        \
    \    continue\n        }\n        if words[0] == \"I\" {\n            boredoms\
    \ += 1\n        }\n    }\n    return boredoms", "    var counter = 0\n    let\
    \ words = S.split(separator: \" \")\n    for word in words {\n        if (word.lowercased()\
    \ == \"i\") {\n            counter += 1\n        }\n    }\n    return counter",
  "    var boredoms = 0\n    var sentences = S.components(separatedBy: [\".\", \"\
    ?\", \"!\"])\n    sentences = sentences.filter {$0 != \"\"}\n    for sentence\
    \ in sentences {\n        let sentence_words = sentence.components(separatedBy:\
    \ \" \")\n        if sentence_words[0] == \"I\" {\n            boredoms += 1\n\
    \        }\n    }\n    return boredoms", '    return S.components(separatedBy:
    ".").count', "    let words = S.components(separatedBy: \" \")\n    var count\
    \ = 0\n    for word in words {\n        if word == \"I\" {\n            count\
    \ += 1\n        }\n    }\n    return count"]
stop_tokens:
- "\n}"
