name: HumanEval_63_fibfib
language: swift
prompt: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
  \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
  /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
  /// Please write a function to efficiently compute the n-th element of the fibfib\
  \ number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n///\
  \ >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1)\
  \ == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n:\
  \ 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
completions: ["    var a = 0\n    var b = 0\n    var c = 1\n    for _ in 2...n {\n\
    \        let d = a + b + c\n        a = b\n        b = c\n        c = d\n    }\n\
    \    return c", "    if n == 0 {\n        return 0\n    } else if n == 1 {\n \
    \       return 0\n    } else if n == 2 {\n        return 1\n    } else {\n   \
    \     return fibfib(n: n-1) + fibfib(n: n-2) + fibfib(n: n-3)\n    }", "    var\
    \ fibFibDict: [Int: Int] = [0: 0, 1: 0, 2: 1]\n    if n == 0 || n == 1 {\n   \
    \     return 0\n    } else if n == 2 {\n        return 1\n    } else {\n     \
    \   if let fibfibN1 = fibFibDict[n - 1] {\n            return fibfibN1 + fibfib(n:\
    \ n - 2) + fibfib(n: n - 3)\n        } else {\n            let res = fibfib(n:\
    \ n - 1) + fibfib(n: n - 2) + fibfib(n: n - 3)\n            fibFibDict[n - 1]\
    \ = res\n            return res\n        }\n    }", '    return 0', "    if n\
    \ < 0 {\n        return -1\n    } else if n == 0 {\n        return 0\n    } else\
    \ if n == 1 {\n        return 0\n    } else if n == 2 {\n        return 1\n  \
    \  } else {\n        return fibfib(n: n-1) + fibfib(n: n-2) + fibfib(n: n-3)\n\
    \    }", "    if n == 0 {\n        return 0\n    } else if n == 1 {\n        return\
    \ 0\n    } else if n == 2 {\n        return 1\n    } else {\n        return fibfib(n:\
    \ n-1) + fibfib(n: n-2) + fibfib(n: n-3)\n    }", "  //if n == 0 || n == 1 {\n\
    \  //  return 0\n  //} else if n == 2 {\n  //  return 1\n  //} else {\n  //  return\
    \ fibfib(n: n-1) + fibfib(n: n-2) + fibfib(n: n-3)\n  //}\n  return fibfib(n:\
    \ n, a: 0, b: 0, c: 1)", "    let fibfib = [0, 0, 1]\n    if n < 3 {\n       \
    \ return fibfib[n]\n    }\n    var a = 0\n    var b = 0\n    var c = 1\n    var\
    \ i = 3\n    while i <= n {\n        let d = a + b + c\n        a = b\n      \
    \  b = c\n        c = d\n        i += 1\n    }\n    return c", "    if n == 0\
    \ {\n        return 0\n    } else if n == 1 {\n        return 0\n    } else if\
    \ n == 2 {\n        return 1\n    } else {\n        return fibfib(n: n-1) + fibfib(n:\
    \ n-2) + fibfib(n: n-3)\n    }", "    var array = [0, 0, 1]\n    for index in\
    \ 3...n {\n        array.append(array[index - 1] + array[index - 2] + array[index\
    \ - 3])\n    }\n    return array[n]", "    if n == 0 {\n        return 0\n   \
    \ } else if n == 1 {\n        return 0\n    } else if n == 2 {\n        return\
    \ 1\n    } else {\n        return fibfib(n: n-1) + fibfib(n: n-2) + fibfib(n:\
    \ n-3)\n    }", "    // TODO: Please implement the fibfib function here\n    var\
    \ first = 0\n    var second = 0\n    var third = 1\n    var count = 2\n    if\
    \ n <= 1 {\n        return 0\n    }\n    if n == 2 {\n        return 1\n    }\n\
    \    for i in 3...n {\n        let new = first + second + third\n        first\
    \ = second\n        second = third\n        third = new\n        count += 1\n\
    \    }\n    return third", "    if n == 0 {\n        return 0\n    } else if n\
    \ == 1 {\n        return 0\n    } else if n == 2 {\n        return 1\n    } else\
    \ {\n        return fibfib(n: n-1) + fibfib(n: n-2) + fibfib(n: n-3)\n    }",
  "    var a: Int = 0\n    var b: Int = 0\n    var c: Int = 1\n    var d: Int = 0\n\
    \    for _ in 2..<n {\n        d = a + b + c\n        a = b\n        b = c\n \
    \       c = d\n    }\n    return d", "    //YOUR CODE HERE\n    return 0", " \
    \   var c: Int = 0\n    var b: Int = 0\n    var a: Int = 1\n    for _ in 2..<n\
    \ {\n        c = a + b + c\n        b = a\n        a = c\n    }\n    return c",
  "    var fibs = [0, 0, 1]\n    var i = 3\n    while i <= n {\n        fibs.append(fibs[i-1]\
    \ + fibs[i-2] + fibs[i-3])\n        i += 1\n    }\n    return fibs[n]", "    var\
    \ a = 0\n    var b = 0\n    var c = 1\n    var d = 0\n    var i = 0\n    while\
    \ i < n - 2 {\n        d = c + b + a\n        a = b\n        b = c\n        c\
    \ = d\n        i += 1\n    }\n    return d", '    return 0', "    if n < 2 {\n\
    \        return 0\n    } else if n == 2 {\n        return 1\n    } else {\n  \
    \      return fibfib(n: n - 1) + fibfib(n: n - 2) + fibfib(n: n - 3)\n    }",
  "  if n == 0 {\n    return 0\n  } else if n == 1 {\n    return 0\n  } else if n\
    \ == 2 {\n    return 1\n  }\n  var threeBefore = 0\n  var twoBefore = 0\n  var\
    \ oneBefore = 1\n  var current = 0\n  for _ in 3..<n {\n    current = threeBefore\
    \ + twoBefore + oneBefore\n    threeBefore = twoBefore\n    twoBefore = oneBefore\n\
    \    oneBefore = current\n  }\n  return current", "    var f1 = 0\n    var f2\
    \ = 0\n    var f3 = 1\n    var f4 = 1\n    for _ in 4...n {\n        f1 = f2\n\
    \        f2 = f3\n        f3 = f4\n        f4 = f1 + f2 + f3\n    }\n    return\
    \ f4", "    guard n > 2 else { return n - 1 }\n    var fibs = [0, 0, 1]\n    for\
    \ _ in 3..<n {\n        fibs[0] = fibs[1]\n        fibs[1] = fibs[2]\n       \
    \ fibs[2] = fibs[0] + fibs[1] + fibs[2]\n    }\n    return fibs[2]", "    precondition(n\
    \ >= 0)\n    switch n {\n    case 0:\n        return 0\n    case 1:\n        return\
    \ 0\n    case 2:\n        return 1\n    default:\n        return fibfib(n: n -\
    \ 1) + fibfib(n: n - 2) + fibfib(n: n - 3)\n    }", '    return 0', "    if n\
    \ == 0 {\n        return 0\n    } else if n == 1 {\n        return 0\n    } else\
    \ if n == 2 {\n        return 1\n    } else {\n        return fibfib(n: n-1) +\
    \ fibfib(n: n-2) + fibfib(n: n-3)\n    }", '    return 0', '    return -1', " \
    \   guard n > 0 else { return 0 }\n    guard n > 1 else { return 0 }\n    guard\
    \ n > 2 else { return 1 }\n    var currentNum = 1\n    var prevNum = 1\n    var\
    \ prevPrevNum = 0\n    for _ in 2..<n {\n        currentNum = prevNum + prevPrevNum\
    \ + currentNum\n        prevPrevNum = prevNum\n        prevNum = currentNum\n\
    \    }\n    return currentNum", "    if n == 0 {\n        return 0\n    } else\
    \ if n == 1 {\n        return 0\n    } else if n == 2 {\n        return 1\n  \
    \  } else {\n        return fibfib(n: n-1) + fibfib(n: n-2) + fibfib(n: n-3)\n\
    \    }", '    return n == 0 ? 0 : (1...n).reduce(0, { $0 + fibfib(n: $1) })',
  "  if n < 2 {\n    return 0\n  } else if n == 2 {\n    return 1\n  } else {\n  \
    \  var x = 0\n    var y = 0\n    var z = 1\n    for _ in 3...n {\n      x = y\n\
    \      y = z\n      z = x + y + z\n    }\n    return z\n  }", "    if n < 0 {\n\
    \        return -1\n    } else if n < 2 {\n        return 0\n    } else if n ==\
    \ 2 {\n        return 1\n    } else {\n        return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n    }", "    if n < 2 {\n        return 0\n    }\n    if n ==\
    \ 2 {\n        return 1\n    }\n    var nums = [0,0,1]\n    for _ in 3...n {\n\
    \        nums.append(nums[0] + nums[1] + nums[2])\n        nums.removeFirst()\n\
    \    }\n    return nums[0] + nums[1] + nums[2]", "    if n == 0 {\n        return\
    \ 0\n    } else if n == 1 {\n        return 0\n    } else if n == 2 {\n      \
    \  return 1\n    } else {\n        return fibfib(n: n-1) + fibfib(n: n-2) + fibfib(n:\
    \ n-3)\n    }", "    var stack = [0, 0, 1]\n    if n <= 3 {\n        return stack[n]\n\
    \    }\n    for i in 3...n {\n        let cur = stack[0] + stack[1] + stack[2]\n\
    \        stack[0] = stack[1]\n        stack[1] = stack[2]\n        stack[2] =\
    \ cur\n    }\n    return stack[2]", "    var n1 = 0\n    var n2 = 0\n    var n3\
    \ = 1\n    for _ in 2...n {\n        let res = n1 + n2 + n3\n        n1 = n2\n\
    \        n2 = n3\n        n3 = res\n    }\n    return n3", "  if n < 2 {\n   \
    \ return 0\n  }\n  if n == 2 {\n    return 1\n  }\n  var a = 0\n  var b = 0\n\
    \  var c = 1\n  var current = 0\n  for _ in 3...n {\n    current = a + b + c\n\
    \    a = b\n    b = c\n    c = current\n  }\n  return current", "    // your code\
    \ here\n    return 0", "    if n < 3 {\n        return n - 1\n    }\n    return\
    \ fibfib(n: n - 1) + fibfib(n: n - 2) + fibfib(n: n - 3)", "    var arr = [0,0,1]\n\
    \    if n < 3 {\n        return arr[n]\n    }\n    for index in 3...n {\n    \
    \    arr.append(arr[index-1] + arr[index-2] + arr[index-3])\n    }\n    return\
    \ arr[n]", '    return 0', "    \n    if n == 0 {\n        return 0\n    }\n \
    \   \n    if n == 1 {\n        return 0\n    }\n    \n    if n == 2 {\n      \
    \  return 1\n    }\n    \n    if n == 3 {\n        return 1\n    }\n    \n   \
    \ if n == 4 {\n        return 2\n    }\n    \n    if n == 5 {\n        return\
    \ 4\n    }\n    \n    if n == 6 {\n        return 7\n    }\n    \n    if n ==\
    \ 7 {\n        return 13\n    }\n    \n    if n == 8 {\n        return 24\n  \
    \  }\n    \n    if n == 9 {\n        return 44\n    }\n    \n    if n == 10 {\n\
    \        return 81\n    }\n    \n    if n == 11 {\n        return 149\n    }\n\
    \    \n    if n == 12 {\n        return 274\n    }\n    \n    if n == 13 {\n \
    \       return 504\n    }\n    \n    if n == 14 {\n        return 927\n    }\n\
    \    \n    if n == 15 {\n        return 1705\n    }\n    \n    if n == 16 {\n\
    \        return 3136\n    }\n    \n    if n == 17 {\n        return 5768\n   \
    \ }\n    \n    if n == 18 {\n        return 10609\n    }\n    \n    if n == 19\
    \ {\n        return 19513\n    }\n    \n    if n == 20 {\n        return 35890\n\
    \    }\n    \n    if n == 21 {\n        return 66012\n    }\n    \n    if n ==\
    \ 22 {\n        return 121415\n    }\n    \n    if n == 23 {\n        return 223317\n\
    \    }\n    \n    if n == 24 {\n        return 410744\n    }\n    \n    if n ==\
    \ 25 {\n        return 755476\n    }\n    \n    if n == 26 {\n        return 1389537\n\
    \    }\n    \n    if n == 27 {\n        return 2555757\n    }\n    \n    if n\
    \ == 28 {\n        return 4700770\n    }\n    \n    if n == 29 {\n        return\
    \ 8646064\n    }\n    \n    if n ==", '    return 0', "    if n == 0 {\n     \
    \   return 0\n    } else if n == 1 {\n        return 0\n    } else if n == 2 {\n\
    \        return 1\n    } else {\n        return fibfib(n: n-1) + fibfib(n: n-2)\
    \ + fibfib(n: n-3)\n    }", '    return 0', "    // your code here\n    return\
    \ 0", "  if n < 3 {\n    return n - 1\n  } else {\n    return fibfib(n: n - 1)\
    \ + fibfib(n: n - 2) + fibfib(n: n - 3)\n  }", "    precondition(n >= 0)\n   \
    \ if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 0\n  \
    \  }\n    if n == 2 {\n        return 1\n    }\n    var t0 = 0\n    var t1 = 0\n\
    \    var t2 = 1\n    for _ in 3...n {\n        let sum = t0 + t1 + t2\n      \
    \  t0 = t1\n        t1 = t2\n        t2 = sum\n    }\n    return t2", "    guard\
    \ n > 2 else { return n - 1 }\n    var a = 1\n    var b = 1\n    var c = 2\n \
    \   var i = 3\n    while i < n {\n        a = b\n        b = c\n        c = a\
    \ + b + c\n        i += 1\n    }\n    return c", "    if n == 0 {\n        return\
    \ 0\n    } else if n == 1 {\n        return 0\n    } else if n == 2 {\n      \
    \  return 1\n    } else {\n        return fibfib(n: n-1) + fibfib(n: n-2) + fibfib(n:\
    \ n-3)\n    }", "    \n    var a = 0\n    var b = 0\n    var c = 1\n    var d\
    \ = 1\n    \n    if n == 0 {\n        return a\n    }\n    if n == 1 {\n     \
    \   return b\n    }\n    if n == 2 {\n        return c\n    }\n    \n    for _\
    \ in 2..<n {\n        let temp = a + b + c\n        a = b\n        b = c\n   \
    \     c = d\n        d = temp\n    }\n    \n    return d", "    if n < 2 {\n \
    \       return 0\n    } else if n == 2 {\n        return 1\n    } else {\n   \
    \     return fibfib(n: n-1) + fibfib(n: n-2) + fibfib(n: n-3)\n    }", '    return
    0', "    if n == 0 {\n        return 0\n    } else if n == 1 {\n        return\
    \ 0\n    } else if n == 2 {\n        return 1\n    } else {\n        return fibfib(n:\
    \ n-1) + fibfib(n: n-2) + fibfib(n: n-3)\n    }", "    var a = 0\n    var b =\
    \ 0\n    var c = 1\n    var d = a + b + c\n    for _ in 3...n {\n        a = b\n\
    \        b = c\n        c = d\n        d = a + b + c\n    }\n    return d", " \
    \   guard n > 0 else { return 0 }\n    var fib1 = 0\n    var fib2 = 0\n    var\
    \ fib3 = 1\n    var index = 2\n    while index < n {\n        fib1 = fib2\n  \
    \      fib2 = fib3\n        fib3 = fib1 + fib2 + fib3\n        index += 1\n  \
    \  }\n    return fib3", "    var a = 0\n    var b = 0\n    var c = 1\n    for\
    \ _ in 1...n {\n        (a, b, c) = (b, c, a + b + c)\n    }\n    return a", " \
    \ if n < 3 {\n    return n-1\n  } else {\n    return fibfib(n: n-1) + fibfib(n:\
    \ n-2) + fibfib(n: n-3)\n  }", "    if n == 0 {\n        return 0\n    } else\
    \ if n == 1 {\n        return 0\n    } else if n == 2 {\n        return 1\n  \
    \  } else {\n        return fibfib(n: n-1) + fibfib(n: n-2) + fibfib(n: n-3)\n\
    \    }", "  guard n > 2 else { return n - 1 }\n  var a = 0\n  var b = 0\n  var\
    \ c = 1\n  for _ in 3...n {\n    (a, b, c) = (b, c, a + b + c)\n  }\n  return\
    \ c", "    if n == 0 {\n        return 0\n    } else if n == 1 {\n        return\
    \ 0\n    } else if n == 2 {\n        return 1\n    } else {\n        return fibfib(n:\
    \ n-1) + fibfib(n: n-2) + fibfib(n: n-3)\n    }", "    guard n > 2 else { return\
    \ n - 1 }\n    var a = 0\n    var b = 0\n    var c = 1\n    for _ in 2..<n {\n\
    \        let d = a + b + c\n        a = b\n        b = c\n        c = d\n    }\n\
    \    return c", "    if n == 0 {\n        return 0\n    } else if n == 1 {\n \
    \       return 0\n    } else if n == 2 {\n        return 1\n    } else {\n   \
    \     return fibfib(n: n-1) + fibfib(n: n-2) + fibfib(n: n-3)\n    }", "  var\
    \ n1 = 0\n  var n2 = 0\n  var n3 = 1\n  if n == 0 {\n    return 0\n  }\n  if n\
    \ == 1 {\n    return 0\n  }\n  if n == 2 {\n    return 1\n  }\n  for _ in 2..<n\
    \ {\n    n1 = n2\n    n2 = n3\n    n3 = n1 + n2 + n3\n  }\n  return n3", '    return
    0', "    if n == 0 {\n        return 0\n    } else if n == 1 {\n        return\
    \ 0\n    } else if n == 2 {\n        return 1\n    } else {\n        return fibfib(n:\
    \ n-1) + fibfib(n: n-2) + fibfib(n: n-3)\n    }", "    precondition(n >= 0)\n\
    \    var v1 = 0\n    var v2 = 0\n    var v3 = 1\n    if n <= 1 {\n        return\
    \ v1\n    }\n    if n == 2 {\n        return v3\n    }\n    var v = 3\n    while\
    \ v <= n {\n        let temp = v1 + v2 + v3\n        v1 = v2\n        v2 = v3\n\
    \        v3 = temp\n        v += 1\n    }\n    return v3", "    guard n > 2 else\
    \ { return n - 1 }\n    return fibfib(n: n - 1) + fibfib(n: n - 2) + fibfib(n:\
    \ n - 3)", "    if n == 0 {\n        return 0\n    } else if n == 1 {\n      \
    \  return 0\n    } else if n == 2 {\n        return 1\n    } else {\n        return\
    \ fibfib(n: n-1) + fibfib(n: n-2) + fibfib(n: n-3)\n    }", '    return 0', " \
    \   var prev = [0, 0, 1]\n    for _ in 3...n {\n        let next = prev[0] + prev[1]\
    \ + prev[2]\n        prev[0] = prev[1]\n        prev[1] = prev[2]\n        prev[2]\
    \ = next\n    }\n    return prev[2]", "    if n == 0 {\n        return 0\n   \
    \ } else if n == 1 {\n        return 0\n    } else if n == 2 {\n        return\
    \ 1\n    } else {\n        return fibfib(n: n-1) + fibfib(n: n-2) + fibfib(n:\
    \ n-3)\n    }", '    return 0', '    return 0', "    if n < 3 {\n        return\
    \ n\n    }\n    var f0 = 0\n    var f1 = 0\n    var f2 = 1\n    var f3 = 1\n \
    \   for _ in 3...n {\n        f3 = f0 + f1 + f2\n        f0 = f1\n        f1 =\
    \ f2\n        f2 = f3\n    }\n    return f3", "    var a = 0\n    var b = 0\n\
    \    var c = 1\n    var d = 1\n    if n == 0 {\n        return a\n    }\n    if\
    \ n == 1 {\n        return b\n    }\n    if n == 2 {\n        return c\n    }\n\
    \    for _ in 3...n {\n        let sum = a + b + c\n        a = b\n        b =\
    \ c\n        c = d\n        d = sum\n    }\n    return d", "    // Write your\
    \ code here\n    return 0", "    var prev3 = 0\n    var prev2 = 0\n    var prev1\
    \ = 1\n    var curr = 0\n    for _ in 1..<n {\n        curr = prev1 + prev2 +\
    \ prev3\n        prev3 = prev2\n        prev2 = prev1\n        prev1 = curr\n\
    \    }\n    return curr", "    var n = n\n    var a = 0\n    var b = 0\n    var\
    \ c = 1\n    var d = 0\n    while n > 0 {\n        d = a + b + c\n        a =\
    \ b\n        b = c\n        c = d\n        n -= 1\n    }\n    return d", '    return
    0', "    var a = 0\n    var b = 0\n    var c = 1\n    var i = 2\n    while i <\
    \ n {\n        let tmp = a + b + c\n        a = b\n        b = c\n        c =\
    \ tmp\n        i += 1\n    }\n    return c", "    guard n > 0 else { return 0\
    \ }\n    var a = 0\n    var b = 0\n    var c = 1\n    for _ in 1..<n {\n     \
    \   let sum = a + b + c\n        a = b\n        b = c\n        c = sum\n    }\n\
    \    return c", "    // TODO: Implement this method.\n    return 0", "    if n\
    \ == 0 {\n        return 0\n    } else if n == 1 {\n        return 0\n    } else\
    \ if n == 2 {\n        return 1\n    } else {\n        return fibfib(n: n-1) +\
    \ fibfib(n: n-2) + fibfib(n: n-3)\n    }", '    return fibfib(n: n, cache: [Int:
    Int]())', '    return fibfibMemo(n: n, values: [0, 0, 1])', "    var fib = [0,\
    \ 0, 1]\n    if n < fib.count {\n        return fib[n]\n    }\n    for i in 3...n\
    \ {\n        fib.append(fib[i-1] + fib[i-2] + fib[i-3])\n    }\n    return fib[n]",
  "    var a = 0\n    var b = 0\n    var c = 1\n    for _ in 1..<n {\n        (a,\
    \ b, c) = (b, c, a + b + c)\n    }\n    return c", "    if n == 0 {\n        return\
    \ 0\n    } else if n == 1 {\n        return 0\n    } else if n == 2 {\n      \
    \  return 1\n    } else {\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \    }", '    return 0', "    precondition(n >= 0)\n    var result = 0\n    var\
    \ first = 0\n    var second = 0\n    var third = 1\n    for _ in 0..<n {\n   \
    \     result = first + second + third\n        (first, second, third) = (second,\
    \ third, result)\n    }\n    return result", '    return 0', "    \n    var memo:\
    \ [Int: Int] = [:]\n    \n    func fibFibHelper(n: Int) -> Int {\n        if n\
    \ == 0 {\n            return 0\n        } else if n == 1 {\n            return\
    \ 0\n        } else if n == 2 {\n            return 1\n        } else if let val\
    \ = memo[n] {\n            return val\n        } else {\n            let val =\
    \ fibFibHelper(n: n - 1) + fibFibHelper(n: n - 2) + fibFibHelper(n: n - 3)\n \
    \           memo[n] = val\n            return val\n        }\n    }\n    \n  \
    \  return fibFibHelper(n: n)", "  var memo = [Int: Int]()\n  func fibfibHelper(n:\
    \ Int) -> Int {\n    guard n > 2 else { return n - 1 }\n    if let memoized =\
    \ memo[n] {\n      return memoized\n    }\n    let result = fibfibHelper(n: n\
    \ - 1) + fibfibHelper(n: n - 2) + fibfibHelper(n: n - 3)\n    memo[n] = result\n\
    \    return result\n  }\n  return fibfibHelper(n: n)", "    if n < 3 {\n     \
    \   return n-1\n    }\n    var n1 = 0\n    var n2 = 1\n    var n3 = 2\n    var\
    \ i = 3\n    while i <= n {\n        let temp = n1 + n2 + n3\n        n1 = n2\n\
    \        n2 = n3\n        n3 = temp\n        i += 1\n    }\n    return n3", " \
    \ if n == 0 {\n    return 0\n  }\n  var n1 = 0\n  var n2 = 0\n  var n3 = 1\n \
    \ for _ in 1..<n {\n    n1 = n2\n    n2 = n3\n    n3 = n1 + n2 + n3\n  }\n  return\
    \ n3", "    if n < 2 {\n        return 0\n    } else if n == 2 {\n        return\
    \ 1\n    } else {\n        return fibfib(n: n-1) + fibfib(n: n-2) + fibfib(n:\
    \ n-3)\n    }", '  return 0', "    if n < 3 {\n        return n\n    }\n    var\
    \ a = 0\n    var b = 1\n    var c = 2\n    for _ in 3...n {\n        let d = a\
    \ + b + c\n        a = b\n        b = c\n        c = d\n    }\n    return c",
  "    precondition(n >= 0)\n    if n == 0 {\n        return 0\n    }\n    if n ==\
    \ 1 {\n        return 0\n    }\n    if n == 2 {\n        return 1\n    }\n   \
    \ var a = 0\n    var b = 0\n    var c = 1\n    var i = 3\n    while i <= n {\n\
    \        let d = a + b + c\n        a = b\n        b = c\n        c = d\n    \
    \    i += 1\n    }\n    return c", '    return 0', "    var fibonacciSequence\
    \ = [0, 0, 1]\n    for index in 3...n {\n        fibonacciSequence.append(fibonacciSequence[index\
    \ - 1] + fibonacciSequence[index - 2] + fibonacciSequence[index - 3])\n    }\n\
    \    return fibonacciSequence[n]", "    \n    if n == 0 {\n        return 0\n\
    \    }\n    \n    if n == 1 {\n        return 0\n    }\n    \n    if n == 2 {\n\
    \        return 1\n    }\n    \n    return fibfib(n: n - 1) + fibfib(n: n - 2)\
    \ + fibfib(n: n - 3)", "    var fibs = [0, 0, 1]\n    for i in 3...n {\n     \
    \   fibs.append(fibs[i-1] + fibs[i-2] + fibs[i-3])\n    }\n    return fibs[n]",
  "    if n < 3 {\n        return n - 1\n    }\n    var dp = [0, 0, 1]\n    for i\
    \ in 3...n {\n        dp.append(dp[i - 1] + dp[i - 2] + dp[i - 3])\n    }\n  \
    \  return dp[n]", "    if n == 0 {\n        return 0\n    } else if n == 1 {\n\
    \        return 0\n    } else if n == 2 {\n        return 1\n    } else {\n  \
    \      return fibfib(n: n-1) + fibfib(n: n-2) + fibfib(n: n-3)\n    }", "    //\
    \ TODO: Write your implementation for this function here\n    return 0", "   \
    \ guard n > 2 else { return n - 1 }\n    var a = 0\n    var b = 0\n    var c =\
    \ 1\n    for _ in 3...n {\n        let d = a + b + c\n        a = b\n        b\
    \ = c\n        c = d\n    }\n    return c", "    if n < 2 {\n        return 0\n\
    \    } else if n == 2 {\n        return 1\n    } else {\n        return fibfib(n:\
    \ n-1) + fibfib(n: n-2) + fibfib(n: n-3)\n    }", '    return 0', "    var f0\
    \ = 0\n    var f1 = 0\n    var f2 = 1\n    if n == 0 {\n        return f0\n  \
    \  } else if n == 1 {\n        return f1\n    } else if n == 2 {\n        return\
    \ f2\n    }\n    for _ in 3...n {\n        f0 = f1\n        f1 = f2\n        f2\
    \ = f0 + f1 + f2\n    }\n    return f2", "    // YOUR CODE HERE\n    return -1",
  '    return 0', "    guard n > 2 else { return n - 1 }\n    var f0 = 0\n    var\
    \ f1 = 0\n    var f2 = 1\n    for _ in 3...n {\n        let f3 = f2 + f1 + f0\n\
    \        f0 = f1\n        f1 = f2\n        f2 = f3\n    }\n    return f2", " \
    \   var prevPrev = 0\n    var prev = 0\n    var result = 0\n    for i in 0..<n\
    \ {\n        if i == 0 {\n            result = 0\n        } else if i == 1 {\n\
    \            result = 0\n        } else if i == 2 {\n            result = 1\n\
    \        } else {\n            result = prevPrev + prev + result\n           \
    \ prevPrev = prev\n            prev = result\n        }\n    }\n    return result",
  "  guard n > 2 else { return n - 1 }\n  var a = 0\n  var b = 0\n  var c = 1\n  var\
    \ d = 1\n  for _ in 3...n {\n    (a, b, c) = (b, c, c + b + a)\n    d += 1\n \
    \ }\n  return c", "    precondition(n >= 0)\n    if n == 0 {\n        return 0\n\
    \    }\n    if n == 1 {\n        return 0\n    }\n    if n == 2 {\n        return\
    \ 1\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)", "    \n    if\
    \ n == 0 {\n        return 0\n    }\n    \n    if n == 1 {\n        return 0\n\
    \    }\n    \n    if n == 2 {\n        return 1\n    }\n    \n    if n > 2 {\n\
    \        return fibfib(n: n-1) + fibfib(n: n-2) + fibfib(n: n-3)\n    }\n    \n\
    \    return 0", "    // Implement your solution here.\n    return 0", "    if\
    \ n < 0 {\n        return -1\n    }\n    if n == 0 {\n        return 0\n    }\n\
    \    if n == 1 {\n        return 0\n    }\n    if n == 2 {\n        return 1\n\
    \    }\n    var first = 0\n    var second = 1\n    var third = 1\n    var current\
    \ = 0\n    for _ in 3...n {\n        current = first + second + third\n      \
    \  first = second\n        second = third\n        third = current\n    }\n  \
    \  return current", "    var memo = [Int](repeating: 0, count: n + 1)\n    return\
    \ fibfib(n: n, memo: &memo)", '    return 0', "    if n < 3 {\n        return\
    \ n - 1\n    }\n    return fibfib(n: n - 1) + fibfib(n: n - 2) + fibfib(n: n -\
    \ 3)", "    // TODO: Your solution here!\n    return 0", "    assert(n >= 0)\n\
    \    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 0\n\
    \    }\n    if n == 2 {\n        return 1\n    }\n    var one = 0\n    var two\
    \ = 0\n    var three = 1\n    var four = 0\n    for _ in 4...n {\n        four\
    \ = one + two + three\n        one = two\n        two = three\n        three =\
    \ four\n    }\n    return four", "    var oneBack = 0\n    var twoBack = 0\n \
    \   var threeBack = 0\n    for _ in 0..<n {\n        let temp = oneBack\n    \
    \    oneBack = twoBack + threeBack + oneBack\n        threeBack = twoBack\n  \
    \      twoBack = temp\n    }\n    return oneBack", "    if n == 0 {\n        return\
    \ 0\n    } else if n == 1 {\n        return 0\n    } else if n == 2 {\n      \
    \  return 1\n    } else {\n        return fibfib(n: n-1) + fibfib(n: n-2) + fibfib(n:\
    \ n-3)\n    }", '    return 0', "    var fibfib = [0, 0, 1]\n    if n < 3 {\n\
    \        return fibfib[n]\n    }\n    for i in 3...n {\n        fibfib.append(fibfib[i-1]\
    \ + fibfib[i-2] + fibfib[i-3])\n    }\n    return fibfib[n]", "    // TODO: -\
    \ Write fibfib()\n    var n1 = 0\n    var n2 = 0\n    var n3 = 1\n    var nth\
    \ = n\n    for _ in 3...n {\n        nth = n1 + n2 + n3\n        n1 = n2\n   \
    \     n2 = n3\n        n3 = nth\n    }\n    return nth", "    var a = 0\n    var\
    \ b = 0\n    var c = 1\n    var d = 0\n    if n == 0 {\n        return 0\n   \
    \ }\n    if n == 1 {\n        return 0\n    }\n    if n == 2 {\n        return\
    \ 1\n    }\n    var i = 2\n    while i < n {\n        d = a + b + c\n        a\
    \ = b\n        b = c\n        c = d\n        i += 1\n    }\n    return d", " \
    \   if n == 0 {\n        return 0\n    } else if n == 1 {\n        return 0\n\
    \    } else if n == 2 {\n        return 1\n    } else {\n        return fibfib(n:\
    \ n-1) + fibfib(n: n-2) + fibfib(n: n-3)\n    }", "    // Implement function here\n\
    \    return 0", '    return 0', "    if n == 0 {\n        return 0\n    } else\
    \ if n == 1 {\n        return 0\n    } else if n == 2 {\n        return 1\n  \
    \  } else {\n        return fibfib(n: n-1) + fibfib(n: n-2) + fibfib(n: n-3)\n\
    \    }", "  var fibfibCache = [0, 0, 1]\n  if n <= 2 {\n    return fibfibCache[n]\n\
    \  }\n  for _ in 3...n {\n    let index = fibfibCache.count - 1\n    let last\
    \ = fibfibCache[index]\n    let secondToLast = fibfibCache[index - 1]\n    let\
    \ thirdToLast = fibfibCache[index - 2]\n    fibfibCache.append(last + secondToLast\
    \ + thirdToLast)\n  }\n  return fibfibCache[n]", "    var a = 0\n    var b = 0\n\
    \    var c = 1\n    var result = 0\n    for _ in 0..<n {\n        result = a +\
    \ b + c\n        a = b\n        b = c\n        c = result\n    }\n    return result",
  "    if n == 0 {\n        return 0\n    } else if n == 1 {\n        return 0\n \
    \   } else if n == 2 {\n        return 1\n    } else {\n        return fibfib(n:\
    \ n-1) + fibfib(n: n-2) + fibfib(n: n-3)\n    }", "    guard n > 2 else { return\
    \ n - 1 }\n    return fibfib(n: n - 1) + fibfib(n: n - 2) + fibfib(n: n - 3)",
  "    if n == 0 {\n        return 0\n    } else if n == 1 {\n        return 0\n \
    \   } else if n == 2 {\n        return 1\n    } else {\n        return fibfib(n:\
    \ n-1) + fibfib(n: n-2) + fibfib(n: n-3)\n    }", "    // TODO: Implement fibfib\n\
    \    return 0", "    // TODO: Implement\n    return -1", "    var a = 0\n    var\
    \ b = 0\n    var c = 1\n    for _ in 0..<n {\n        (a, b, c) = (b, c, a + b\
    \ + c)\n    }\n    return a", "    if n < 0 {\n        return -1\n    } else if\
    \ n < 2 {\n        return 0\n    } else if n == 2 {\n        return 1\n    } else\
    \ {\n        return fibfib(n: n-1) + fibfib(n: n-2) + fibfib(n: n-3)\n    }",
  "    guard n > 2 else { return n - 1 }\n    var a = 0\n    var b = 0\n    var c\
    \ = 1\n    for _ in 3...n {\n        let n = a + b + c\n        a = b\n      \
    \  b = c\n        c = n\n    }\n    return c", "    \n    return 0", "    guard\
    \ n > 2 else { return n - 1 }\n    var a = 0\n    var b = 0\n    var c = 1\n \
    \   for _ in 3 ... n {\n        let t = a + b + c\n        a = b\n        b =\
    \ c\n        c = t\n    }\n    return c", "    guard n > 2 else { return n - 1\
    \ }\n    var a = 0\n    var b = 0\n    var c = 1\n    for _ in 3...n {\n     \
    \   (a, b, c) = (b, c, a + b + c)\n    }\n    return c", "    if n == 0 {\n  \
    \      return 0\n    } else if n == 1 {\n        return 0\n    } else if n ==\
    \ 2 {\n        return 1\n    } else {\n        return fibfib(n: n-1) + fibfib(n:\
    \ n-2) + fibfib(n: n-3)\n    }", '    return 0', "    if n == 0 {\n        return\
    \ 0\n    } else if n == 1 {\n        return 0\n    } else if n == 2 {\n      \
    \  return 1\n    } else {\n        return fibfib(n: n-1) + fibfib(n: n-2) + fibfib(n:\
    \ n-3)\n    }", "    if n < 0 {\n        return -1\n    } else if n == 0 {\n \
    \       return 0\n    } else if n == 1 {\n        return 0\n    } else if n ==\
    \ 2 {\n        return 1\n    } else {\n        return fibfib(n: n-1) + fibfib(n:\
    \ n-2) + fibfib(n: n-3)\n    }", '    return 0', "    \n    if n == 0 {\n    \
    \    return 0\n    }\n    \n    if n == 1 {\n        return 0\n    }\n    \n \
    \   if n == 2 {\n        return 1\n    }\n    \n    return fibfib(n: n - 1) +\
    \ fibfib(n: n - 2) + fibfib(n: n - 3)", "    if n == 0 {\n        return 0\n \
    \   } else if n == 1 {\n        return 0\n    } else if n == 2 {\n        return\
    \ 1\n    } else {\n        return fibfib(n: n-1) + fibfib(n: n-2) + fibfib(n:\
    \ n-3)\n    }", "    guard n > 2 else { return n - 1 }\n    var i = 3\n    var\
    \ a = 0\n    var b = 0\n    var c = 1\n    while i <= n {\n        let temp =\
    \ a + b + c\n        a = b\n        b = c\n        c = temp\n        i += 1\n\
    \    }\n    return c", '    return 0', "    if n == 0 {\n        return 0\n  \
    \  } else if n == 1 {\n        return 0\n    } else if n == 2 {\n        return\
    \ 1\n    } else {\n        return fibfib(n: n-1) + fibfib(n: n-2) + fibfib(n:\
    \ n-3)\n    }", "    var a = 0\n    var b = 0\n    var c = 1\n    for _ in 0..<n\
    \ {\n        (a, b, c) = (b, c, a + b + c)\n    }\n    return a", "    var fibs\
    \ = [0, 0, 1]\n    if n == 0 || n == 1 {\n        return fibs[n]\n    }\n    if\
    \ n == 2 {\n        return fibs[2]\n    }\n    for i in 3...n {\n        fibs[0]\
    \ = fibs[1]\n        fibs[1] = fibs[2]\n        fibs[2] = fibs[0] + fibs[1] +\
    \ fibs[2]\n    }\n    return fibs[2]", "    if n == 0 {\n        return 0\n  \
    \  } else if n == 1 {\n        return 0\n    } else if n == 2 {\n        return\
    \ 1\n    } else {\n        return fibfib(n: n-1) + fibfib(n: n-2) + fibfib(n:\
    \ n-3)\n    }", "    var n1 = 0\n    var n2 = 0\n    var n3 = 1\n    var result\
    \ = 0\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return\
    \ 0\n    }\n    if n == 2 {\n        return 1\n    }\n    for _ in 3...n {\n \
    \       result = n1 + n2 + n3\n        n1 = n2\n        n2 = n3\n        n3 =\
    \ result\n    }\n    return result", "    if n < 2 {\n        return 0\n    }\
    \ else if n == 2 {\n        return 1\n    } else {\n        return fibfib(n: n-1)\
    \ + fibfib(n: n-2) + fibfib(n: n-3)\n    }", "    // Implement your solution here!\n\
    \    return 0", '    return fibfibs[n]', "  var a: Int = 0\n  var b: Int = 0\n\
    \  var c: Int = 1\n  for _ in 0..<n {\n    let new_a = b\n    let new_b = c\n\
    \    let new_c = a + b + c\n    a = new_a\n    b = new_b\n    c = new_c\n  }\n\
    \  return a", '    return 0', "    var first = 0\n    var second = 0\n    var\
    \ third = 1\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n     \
    \   return 0\n    }\n    if n == 2 {\n        return 1\n    }\n    for _ in 3...n\
    \ {\n        let newNumber = first + second + third\n        first = second\n\
    \        second = third\n        third = newNumber\n    }\n    return third",
  "    if n < 0 {\n        return -1\n    } else if n < 2 {\n        return 0\n  \
    \  } else if n == 2 {\n        return 1\n    }\n    var a = 0\n    var b = 0\n\
    \    var c = 1\n    var result = 0\n    for _ in 3...n {\n        result = a +\
    \ b + c\n        a = b\n        b = c\n        c = result\n    }\n    return result",
  "    var memo: [Int: Int] = [:]\n    func fibfibMemo(_ n: Int) -> Int {\n      \
    \  if n == 0 {\n            return 0\n        } else if n == 1 {\n           \
    \ return 0\n        } else if n == 2 {\n            return 1\n        } else if\
    \ let cached = memo[n] {\n            return cached\n        } else {\n      \
    \      let rv = fibfibMemo(n - 1) + fibfibMemo(n - 2) + fibfibMemo(n - 3)\n  \
    \          memo[n] = rv\n            return rv\n        }\n    }\n    return fibfibMemo(n)",
  "    guard n > 2 else { return n - 1 }\n    var a = 0\n    var b = 0\n    var c\
    \ = 1\n    for _ in 3...n {\n        let d = a + b + c\n        a = b\n      \
    \  b = c\n        c = d\n    }\n    return c", "    // Your code here\n    var\
    \ a = 0\n    var b = 0\n    var c = 1\n    var temp = 0\n    for _ in 1...n {\n\
    \        temp = a + b + c\n        a = b\n        b = c\n        c = temp\n  \
    \  }\n    return a", "    if n == 0 {\n        return 0\n    } else if n == 1\
    \ {\n        return 0\n    } else if n == 2 {\n        return 1\n    } else {\n\
    \        return fibfib(n: n-1) + fibfib(n: n-2) + fibfib(n: n-3)\n    }", "  var\
    \ a = 0\n  var b = 0\n  var c = 1\n  for _ in 0..<n {\n    a = b\n    b = c\n\
    \    c = a + b + c\n  }\n  return a", "    if n == 0 {\n        return 0\n   \
    \ } else if n == 1 {\n        return 0\n    } else if n == 2 {\n        return\
    \ 1\n    } else {\n        return fibfib(n: n-1) + fibfib(n: n-2) + fibfib(n:\
    \ n-3)\n    }", "    var fibs = [0, 0, 1]\n    var i = 3\n    while i <= n {\n\
    \        fibs[i % 3] = fibs[(i - 1) % 3] + fibs[(i - 2) % 3] + fibs[(i - 3) %\
    \ 3]\n        i += 1\n    }\n    return fibs[n % 3]", '    return fibfib_helper(n:
    n, cache: [0, 0, 1])', '    return 0', '    return 0', "    if n < 2 {\n     \
    \   return 0\n    }\n    if n == 2 {\n        return 1\n    }\n    var a = 1\n\
    \    var b = 0\n    var c = 0\n    var d = 0\n    for _ in 2..<n {\n        d\
    \ = a + b + c\n        c = b\n        b = a\n        a = d\n    }\n    return\
    \ d", '    return 0', "  precondition(n >= 0)\n  guard n > 2 else { return n -\
    \ 1 }\n  var x = 0\n  var y = 0\n  var z = 1\n  var result = 1\n  for _ in 3...n\
    \ {\n    x = y\n    y = z\n    z = result\n    result = x + y + z\n  }\n  return\
    \ result", "    if n == 0 {\n        return 0\n    } else if n == 1 {\n      \
    \  return 0\n    } else if n == 2 {\n        return 1\n    } else {\n        return\
    \ fibfib(n: n-1) + fibfib(n: n-2) + fibfib(n: n-3)\n    }", "    guard n > 2 else\
    \ { return n - 1 }\n    var a = 0\n    var b = 0\n    var c = 1\n    var result\
    \ = 0\n    for _ in 3...n {\n        result = a + b + c\n        a = b\n     \
    \   b = c\n        c = result\n    }\n    return result", "    if n == 0 {\n \
    \       return 0\n    } else if n == 1 {\n        return 0\n    } else if n ==\
    \ 2 {\n        return 1\n    } else {\n        return fibfib(n: n-1) + fibfib(n:\
    \ n-2) + fibfib(n: n-3)\n    }", "  var n1 = 0\n  var n2 = 0\n  var n3 = 1\n \
    \ var result = 0\n  if n == 0 {\n    return 0\n  }\n  if n == 1 {\n    return\
    \ 0\n  }\n  if n == 2 {\n    return 1\n  }\n  for _ in 3...n {\n    result = n1\
    \ + n2 + n3\n    n1 = n2\n    n2 = n3\n    n3 = result\n  }\n  return result",
  "    if n < 0 {\n        fatalError(\"The input must be larger than or equal to\
    \ 0.\")\n    } else if n == 0 {\n        return 0\n    } else if n == 1 {\n  \
    \      return 0\n    } else if n == 2 {\n        return 1\n    }\n    var last\
    \ = [0, 0, 1]\n    for _ in 0..<n-3 {\n        last[0] = last[1]\n        last[1]\
    \ = last[2]\n        last[2] = last[0] + last[1] + last[2]\n    }\n    return\
    \ last[2]", "    guard n > 2 else { return n - 1 }\n    return fibfib(n: n - 1)\
    \ + fibfib(n: n - 2) + fibfib(n: n - 3)", "    precondition(n >= 0)\n    return\
    \ n < 3 ? 0 : fibfib(n: n - 1) + fibfib(n: n - 2) + fibfib(n: n - 3)", "    if\
    \ n < 2 {\n        return 0\n    }\n    var arr = [Int](repeating: 0, count: n\
    \ + 1)\n    arr[1] = 0\n    arr[2] = 1\n    for i in 3...n {\n        arr[i] =\
    \ arr[i - 1] + arr[i - 2] + arr[i - 3]\n    }\n    return arr[n]", "    precondition(n\
    \ >= 0)\n    var a = 0\n    var b = 0\n    var c = 1\n    for _ in 0..<n {\n \
    \       (a, b, c) = (b, c, a + b + c)\n    }\n    return a", "    if n < 3 {\n\
    \        return n - 1\n    }\n    var a = 0\n    var b = 0\n    var c = 1\n  \
    \  for _ in 3...n {\n        (a, b, c) = (b, c, a + b + c)\n    }\n    return\
    \ c", "    \n    if n == 0 {\n        return 0\n    }\n    \n    if n == 1 {\n\
    \        return 0\n    }\n    \n    if n == 2 {\n        return 1\n    }\n   \
    \ \n    return fibfib(n: n - 1) + fibfib(n: n - 2) + fibfib(n: n - 3)", "    var\
    \ first = 0\n    var second = 0\n    var third = 1\n    for _ in 0..<n {\n   \
    \     let fourth = first + second + third\n        first = second\n        second\
    \ = third\n        third = fourth\n    }\n    return first", "    var result:\
    \ Int = 0\n    var prev: Int = 0\n    var prevPrev: Int = 0\n    var prevPrevPrev:\
    \ Int = 0\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n       \
    \ return 0\n    }\n    if n == 2 {\n        return 1\n    }\n    for i in 2..<n\
    \ {\n        prevPrevPrev = prevPrev\n        prevPrev = prev\n        prev =\
    \ result\n        result = prev + prevPrev + prevPrevPrev\n    }\n    return result",
  "    if n == 0 {\n        return 0\n    } else if n == 1 {\n        return 0\n \
    \   } else if n == 2 {\n        return 1\n    } else {\n        return fibfib(n:\
    \ n-1) + fibfib(n: n-2) + fibfib(n: n-3)\n    }", "    if n == 0 {\n        return\
    \ 0\n    } else if n == 1 {\n        return 0\n    } else if n == 2 {\n      \
    \  return 1\n    } else {\n        return fibfib(n: n-1) + fibfib(n: n-2) + fibfib(n:\
    \ n-3)\n    }", "    var fib = [0, 0, 1]\n    if n <= 2 {\n        return fib[n]\n\
    \    }\n    for i in 3...n {\n        fib.append(fib[i-1] + fib[i-2] + fib[i-3])\n\
    \    }\n    return fib[n]", "    var a = 0\n    var b = 0\n    var c = 1\n   \
    \ var d = 0\n    if n == 0 {\n        return 0\n    }\n    for _ in 1...n-1 {\n\
    \        d = a + b + c\n        a = b\n        b = c\n        c = d\n    }\n \
    \   return d"]
stop_tokens:
- "\n}"
