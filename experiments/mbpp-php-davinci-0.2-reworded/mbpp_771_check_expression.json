{
  "name": "mbpp_771_check_expression",
  "language": "php",
  "prompt": "<?php\n// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunction check_expression($exp) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_771_check_expression.py",
  "prompt_terminology": "reworded",
  "tests": "function candidate(...$args) {\n    return check_expression(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"{()}[{}]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"{()}[{]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"{()}[{}][]({})\") !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction",
    "\n?>",
    "\n//",
    "\n#"
  ],
  "completions": [
    "    $stack = [];\n    $len = strlen($exp);\n    for ($i = 0; $i < $len; $i++) {\n        if ($exp[$i] == '(' || $exp[$i] == '{' || $exp[$i] == '[') {\n            array_push($stack, $exp[$i]);\n        } else if ($exp[$i] == ')' || $exp[$i] == '}' || $exp[$i] == ']') {\n            if (empty($stack)) {\n                return false;\n            } else {\n                $top = array_pop($stack);\n                if ($exp[$i] == ')' && $top != '(') {\n                    return false;\n                } else if ($exp[$i] == '}' && $top != '{') {\n                    return false;\n                } else if ($exp[$i] == ']' && $top != '[') {\n                    return false;\n                }\n            }\n        }\n    }\n    if (!empty($stack)) {\n        return false;\n    }\n    return true;\n}\n\n$exp = \"{()}[]\";\nif (check_expression($exp)) {\n    echo \"Balanced\";\n} else {\n    echo \"Not Balanced\";\n}",
    "    $stack = [];\n    $len = strlen($exp);\n    for ($i = 0; $i < $len; $i++) {\n        if ($exp[$i] == '(' || $exp[$i] == '{' || $exp[$i] == '[') {\n            array_push($stack, $exp[$i]);\n        } else {\n            if (empty($stack)) {\n                return false;\n            }\n            $top = array_pop($stack);\n            if ($exp[$i] == ')' && $top != '(') {\n                return false;\n            }\n            if ($exp[$i] == '}' && $top != '{') {\n                return false;\n            }\n            if ($exp[$i] == ']' && $top != '[') {\n                return false;\n            }\n        }\n    }\n    if (empty($stack)) {\n        return true;\n    }\n    return false;\n}\n\n$exp = '{()}[]';\nif (check_expression($exp)) {\n    echo \"Balanced\";\n} else {\n    echo \"Not Balanced\";\n}",
    "    $stack = new SplStack();\n    $len = strlen($exp);\n    for ($i = 0; $i < $len; $i++) {\n        if ($exp[$i] == '(' || $exp[$i] == '{' || $exp[$i] == '[') {\n            $stack->push($exp[$i]);\n        } else if ($exp[$i] == ')' || $exp[$i] == '}' || $exp[$i] == ']') {\n            if ($stack->isEmpty()) {\n                return false;\n            } else {\n                $top = $stack->pop();\n                if ($top == '(' && $exp[$i] != ')') {\n                    return false;\n                } else if ($top == '{' && $exp[$i] != '}') {\n                    return false;\n                } else if ($top == '[' && $exp[$i] != ']') {\n                    return false;\n                }\n            }\n        }\n    }\n    if ($stack->isEmpty()) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n$exp = \"{()}[]\";\nif (check_expression($exp)) {\n    echo \"Balanced\";\n} else {\n    echo \"Not Balanced\";\n}",
    "    $stack = [];\n    $open = ['{', '[', '('];\n    $close = ['}', ']', ')'];\n    for ($i = 0; $i < strlen($exp); $i++) {\n        if (in_array($exp[$i], $open)) {\n            array_push($stack, $exp[$i]);\n        } else if (in_array($exp[$i], $close)) {\n            $pos = array_search($exp[$i], $close);\n            if (empty($stack) || ($open[$pos] != array_pop($stack))) {\n                return false;\n            }\n        }\n    }\n    return empty($stack);\n}\n\n$exp = '{()}[]';\nif (check_expression($exp)) {\n    echo 'Balanced';\n} else {\n    echo 'Not Balanced';\n}",
    "    $stack = [];\n    $open = ['{', '[', '('];\n    $close = ['}', ']', ')'];\n\n    for ($i = 0; $i < strlen($exp); $i++) {\n        if (in_array($exp[$i], $open)) {\n            array_push($stack, $exp[$i]);\n        } elseif (in_array($exp[$i], $close)) {\n            $last = array_pop($stack);\n            if ($last == $open[array_search($exp[$i], $close)]) {\n                continue;\n            } else {\n                return false;\n            }\n        }\n    }\n\n    return true;\n}\n\n$exp = '{()}[]';\necho check_expression($exp) ? 'Balanced' : 'Not Balanced';",
    "    $stack = [];\n    $open_brackets = ['(', '{', '['];\n    $close_brackets = [')', '}', ']'];\n    $brackets = array_merge($open_brackets, $close_brackets);\n    for ($i = 0; $i < strlen($exp); $i++) {\n        if (in_array($exp[$i], $brackets)) {\n            if (in_array($exp[$i], $open_brackets)) {\n                array_push($stack, $exp[$i]);\n            } else {\n                $last_bracket = array_pop($stack);\n                $index = array_search($last_bracket, $open_brackets);\n                if ($exp[$i] != $close_brackets[$index]) {\n                    return false;\n                }\n            }\n        }\n    }\n    return count($stack) == 0;\n}\n",
    "    $stack = array();\n    $open_brackets = array('(', '{', '[');\n    $close_brackets = array(')', '}', ']');\n    $len = strlen($exp);\n    for ($i = 0; $i < $len; $i++) {\n        if (in_array($exp[$i], $open_brackets)) {\n            array_push($stack, $exp[$i]);\n        } else if (in_array($exp[$i], $close_brackets)) {\n            $open_bracket = array_pop($stack);\n            if ($open_bracket == '(' && $exp[$i] != ')') {\n                return false;\n            } else if ($open_bracket == '{' && $exp[$i] != '}') {\n                return false;\n            } else if ($open_bracket == '[' && $exp[$i] != ']') {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\n$exp = \"{()}[]\";\n$exp1 = \"{()}[\";\n$exp2 = \"{()}[()]\";\n$exp3 = \"{()}[(])\";\n\necho check_expression($exp) ? \"Balanced\" : \"Not Balanced\";\necho \"\\n\";\necho check_expression($exp1) ? \"Balanced\" : \"Not Balanced\";\necho \"\\n\";\necho check_expression($exp2) ? \"Balanced\" : \"Not Balanced\";\necho \"\\n\";\necho check_expression($exp3) ? \"Balanced\" : \"Not Balanced\";\necho \"\\n\";",
    "    $stack = [];\n    $pairs = [\n        '(' => ')',\n        '[' => ']',\n        '{' => '}'\n    ];\n    for ($i = 0; $i < strlen($exp); $i++) {\n        if (in_array($exp[$i], array_keys($pairs))) {\n            array_push($stack, $exp[$i]);\n        } elseif (in_array($exp[$i], $pairs)) {\n            if (end($stack) == array_search($exp[$i], $pairs)) {\n                array_pop($stack);\n            } else {\n                return false;\n            }\n        }\n    }\n    return empty($stack);\n}\n\n$exp = \"{()}[]\";\necho check_expression($exp) ? \"Balanced\" : \"Not Balanced\";\necho \"\\n\";\n$exp = \"[(])\";\necho check_expression($exp) ? \"Balanced\" : \"Not Balanced\";\necho \"\\n\";",
    "    $stack = [];\n    $open_brackets = ['(', '{', '['];\n    $close_brackets = [')', '}', ']'];\n    for ($i = 0; $i < strlen($exp); $i++) {\n        if (in_array($exp[$i], $open_brackets)) {\n            array_push($stack, $exp[$i]);\n        }\n        if (in_array($exp[$i], $close_brackets)) {\n            $last_open_bracket = array_pop($stack);\n            if ($last_open_bracket == '(' && $exp[$i] != ')') {\n                return false;\n            }\n            if ($last_open_bracket == '{' && $exp[$i] != '}') {\n                return false;\n            }\n            if ($last_open_bracket == '[' && $exp[$i] != ']') {\n                return false;\n            }\n        }\n    }\n    if (count($stack) == 0) {\n        return true;\n    }\n    return false;\n}\n\n$exp = '{()}[]';\nvar_dump(check_expression($exp));\n\n$exp = '{(})';\nvar_dump(check_expression($exp));\n\n$exp = '{()}[{}]';\nvar_dump(check_expression($exp));",
    "    $stack = array();\n    $open = array('{', '[', '(');\n    $close = array('}', ']', ')');\n    $len = strlen($exp);\n    for ($i = 0; $i < $len; $i++) {\n        if (in_array($exp[$i], $open)) {\n            array_push($stack, $exp[$i]);\n        } else if (in_array($exp[$i], $close)) {\n            $key = array_search($exp[$i], $close);\n            if (end($stack) == $open[$key]) {\n                array_pop($stack);\n            } else {\n                return false;\n            }\n        }\n    }\n    if (empty($stack)) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n$exp = \"{()}[]\";\nif (check_expression($exp)) {\n    echo \"Balanced\";\n} else {\n    echo \"Not Balanced\";\n}",
    "    $stack = [];\n    $open = ['(', '{', '['];\n    $close = [')', '}', ']'];\n    $len = strlen($exp);\n    for ($i = 0; $i < $len; $i++) {\n        if (in_array($exp[$i], $open)) {\n            array_push($stack, $exp[$i]);\n        } else if (in_array($exp[$i], $close)) {\n            $pos = array_search($exp[$i], $close);\n            if (empty($stack) || ($open[$pos] != array_pop($stack))) {\n                return false;\n            }\n        }\n    }\n    return empty($stack) ? true : false;\n}\n\n$exp = '{([])}';\necho check_expression($exp) ? 'Balanced' : 'Not Balanced';\necho \"\\n\";\n$exp = '{([])}[';\necho check_expression($exp) ? 'Balanced' : 'Not Balanced';\necho \"\\n\";",
    "\t$stack = array();\n\t$open = array('(', '{', '[');\n\t$close = array(')', '}', ']');\n\tfor ($i = 0; $i < strlen($exp); $i++) {\n\t\tif (in_array($exp[$i], $open)) {\n\t\t\tarray_push($stack, $exp[$i]);\n\t\t} else if (in_array($exp[$i], $close)) {\n\t\t\t$open_index = array_search($stack[count($stack) - 1], $open);\n\t\t\t$close_index = array_search($exp[$i], $close);\n\t\t\tif ($open_index == $close_index) {\n\t\t\t\tarray_pop($stack);\n\t\t\t} else {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\tif (count($stack) == 0) {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t}\n}\n\n$exp = \"({[]})\";\necho check_expression($exp);",
    "\t$stack = [];\n\t$open = ['{', '[', '('];\n\t$close = ['}', ']', ')'];\n\tfor ($i = 0; $i < strlen($exp); $i++) {\n\t\tif (in_array($exp[$i], $open)) {\n\t\t\tarray_push($stack, $exp[$i]);\n\t\t}\n\t\tif (in_array($exp[$i], $close)) {\n\t\t\t$top = array_pop($stack);\n\t\t\tif ($open[array_search($top, $open)] != $close[array_search($exp[$i], $close)]) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\n\necho check_expression('{[()]}') ? 'Balanced' : 'Not Balanced';\necho PHP_EOL;\necho check_expression('{[(])}') ? 'Balanced' : 'Not Balanced';\necho PHP_EOL;\necho check_expression('{{[[(())]]}}') ? 'Balanced' : 'Not Balanced';\necho PHP_EOL;",
    "    $stack = [];\n    $open_brackets = ['(', '{', '['];\n    $close_brackets = [')', '}', ']'];\n    for ($i = 0; $i < strlen($exp); $i++) {\n        if (in_array($exp[$i], $open_brackets)) {\n            array_push($stack, $exp[$i]);\n        } else if (in_array($exp[$i], $close_brackets)) {\n            if (count($stack) == 0) {\n                return false;\n            }\n            $top = array_pop($stack);\n            if ($open_brackets[array_search($exp[$i], $close_brackets)] != $top) {\n                return false;\n            }\n        }\n    }\n    return count($stack) == 0;\n}\n\n$exp = \"({[]})\";\necho check_expression($exp) ? \"Balanced\" : \"Not Balanced\";",
    "    $stack = [];\n    $open = ['{', '[', '('];\n    $close = ['}', ']', ')'];\n    $len = strlen($exp);\n    for ($i = 0; $i < $len; $i++) {\n        $char = $exp[$i];\n        if (in_array($char, $open)) {\n            array_push($stack, $char);\n        } elseif (in_array($char, $close)) {\n            $open_char = array_pop($stack);\n            if ($open_char == '{' && $char != '}') {\n                return false;\n            } elseif ($open_char == '[' && $char != ']') {\n                return false;\n            } elseif ($open_char == '(' && $char != ')') {\n                return false;\n            }\n        }\n    }\n    return count($stack) == 0;\n}\n\n$exp = \"{()}[]\";\nvar_dump(check_expression($exp));\n\n$exp = \"{()}[\";\nvar_dump(check_expression($exp));",
    "\t$stack = [];\n\t$open_brackets = ['(', '{', '['];\n\t$close_brackets = [')', '}', ']'];\n\t$brackets = array_merge($open_brackets, $close_brackets);\n\t$exp_arr = str_split($exp);\n\tforeach ($exp_arr as $char) {\n\t\tif (in_array($char, $brackets)) {\n\t\t\tif (in_array($char, $open_brackets)) {\n\t\t\t\tarray_push($stack, $char);\n\t\t\t} else {\n\t\t\t\t$last_char = array_pop($stack);\n\t\t\t\tif ($last_char == '(' && $char != ')') {\n\t\t\t\t\treturn false;\n\t\t\t\t} elseif ($last_char == '{' && $char != '}') {\n\t\t\t\t\treturn false;\n\t\t\t\t} elseif ($last_char == '[' && $char != ']') {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\n\n$exp = '{()}[]';\nvar_dump(check_expression($exp));\n\n$exp = '{()}[';\nvar_dump(check_expression($exp));\n\n$exp = '{()}[{}]';\nvar_dump(check_expression($exp));\n\n$exp = '{()}[{}]{}';\nvar_dump(check_expression($exp));\n\n$exp = '{()}[{}]{}[';\nvar_dump(check_expression($exp));",
    "    $stack = [];\n    $open_brackets = ['(', '{', '['];\n    $close_brackets = [')', '}', ']'];\n    for ($i = 0; $i < strlen($exp); $i++) {\n        if (in_array($exp[$i], $open_brackets)) {\n            array_push($stack, $exp[$i]);\n        } else if (in_array($exp[$i], $close_brackets)) {\n            $last_open_bracket = array_pop($stack);\n            if ($open_brackets[array_search($last_open_bracket, $open_brackets)] != $close_brackets[array_search($exp[$i], $close_brackets)]) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\n$exp = \"{()}[]\";\necho check_expression($exp);",
    "    $stack = array();\n    $open = array('(', '{', '[');\n    $close = array(')', '}', ']');\n    for ($i = 0; $i < strlen($exp); $i++) {\n        if (in_array($exp[$i], $open)) {\n            array_push($stack, $exp[$i]);\n        } elseif (in_array($exp[$i], $close)) {\n            $open_index = array_search($stack[count($stack) - 1], $open);\n            $close_index = array_search($exp[$i], $close);\n            if ($open_index != $close_index) {\n                return false;\n            } else {\n                array_pop($stack);\n            }\n        }\n    }\n    if (count($stack) == 0) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n$exp = \"({[]})\";\nif (check_expression($exp)) {\n    echo \"Balanced\";\n} else {\n    echo \"Not Balanced\";\n}",
    "    $stack = [];\n    $open = ['(', '{', '['];\n    $close = [')', '}', ']'];\n    $len = strlen($exp);\n    for ($i = 0; $i < $len; $i++) {\n        if (in_array($exp[$i], $open)) {\n            array_push($stack, $exp[$i]);\n        } else if (in_array($exp[$i], $close)) {\n            if (count($stack) == 0) {\n                return false;\n            }\n            $pop = array_pop($stack);\n            if ($open[array_search($pop, $open)] != $close[array_search($exp[$i], $close)]) {\n                return false;\n            }\n        }\n    }\n    if (count($stack) != 0) {\n        return false;\n    }\n    return true;\n}\n\n$exp = \"{()}[]\";\nif (check_expression($exp)) {\n    echo \"Balanced\";\n} else {\n    echo \"Not Balanced\";\n}",
    "    $stack = array();\n    for ($i = 0; $i < strlen($exp); $i++) {\n        if ($exp[$i] == '(' || $exp[$i] == '{' || $exp[$i] == '[') {\n            array_push($stack, $exp[$i]);\n        } else if ($exp[$i] == ')' || $exp[$i] == '}' || $exp[$i] == ']') {\n            if (empty($stack)) {\n                return false;\n            }\n            $top = array_pop($stack);\n            if ($exp[$i] == ')' && $top != '(') {\n                return false;\n            }\n            if ($exp[$i] == '}' && $top != '{') {\n                return false;\n            }\n            if ($exp[$i] == ']' && $top != '[') {\n                return false;\n            }\n        }\n    }\n    if (empty($stack)) {\n        return true;\n    }\n    return false;\n}\n\n$exp = \"{()}[]\";\nif (check_expression($exp)) {\n    echo \"Balanced\";\n} else {\n    echo \"Not Balanced\";\n}"
  ]
}