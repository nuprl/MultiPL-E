{
  "name": "mbpp_771_check_expression",
  "language": "php",
  "prompt": "<?php\n// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunction check_expression($exp) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_771_check_expression.py",
  "prompt_terminology": "reworded",
  "tests": "function candidate(...$args) {\n    return check_expression(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"{()}[{}]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"{()}[{]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"{()}[{}][]({})\") !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction",
    "\n?>",
    "\n//",
    "\n#"
  ],
  "completions": [
    "    $stack = [];\n    $len = strlen($exp);\n    for ($i = 0; $i < $len; $i++) {\n        if ($exp[$i] == '(' || $exp[$i] == '{' || $exp[$i] == '[') {\n            array_push($stack, $exp[$i]);\n        } else if ($exp[$i] == ')' || $exp[$i] == '}' || $exp[$i] == ']') {\n            if (empty($stack)) {\n                return false;\n            } else {\n                $top = array_pop($stack);\n                if ($exp[$i] == ')' && $top != '(') {\n                    return false;\n                } else if ($exp[$i] == '}' && $top != '{') {\n                    return false;\n                } else if ($exp[$i] == ']' && $top != '[') {\n                    return false;\n                }\n            }\n        }\n    }\n    if (!empty($stack)) {\n        return false;\n    }\n    return true;\n}\n\n$exp = \"{()}[]\";\nif (check_expression($exp)) {\n    echo \"Balanced\";\n} else {\n    echo \"Not Balanced\";\n}",
    "    $stack = [];\n    $len = strlen($exp);\n    for ($i = 0; $i < $len; $i++) {\n        if ($exp[$i] == '(' || $exp[$i] == '{' || $exp[$i] == '[') {\n            array_push($stack, $exp[$i]);\n        } else {\n            if (empty($stack)) {\n                return false;\n            }\n            $top = array_pop($stack);\n            if ($exp[$i] == ')' && $top != '(') {\n                return false;\n            }\n            if ($exp[$i] == '}' && $top != '{') {\n                return false;\n            }\n            if ($exp[$i] == ']' && $top != '[') {\n                return false;\n            }\n        }\n    }\n    if (empty($stack)) {\n        return true;\n    }\n    return false;\n}\n\n$exp = '{()}[]';\nif (check_expression($exp)) {\n    echo \"Balanced\";\n} else {\n    echo \"Not Balanced\";\n}",
    "    $stack = new SplStack();\n    $len = strlen($exp);\n    for ($i = 0; $i < $len; $i++) {\n        if ($exp[$i] == '(' || $exp[$i] == '{' || $exp[$i] == '[') {\n            $stack->push($exp[$i]);\n        } else if ($exp[$i] == ')' || $exp[$i] == '}' || $exp[$i] == ']') {\n            if ($stack->isEmpty()) {\n                return false;\n            } else {\n                $top = $stack->pop();\n                if ($top == '(' && $exp[$i] != ')') {\n                    return false;\n                } else if ($top == '{' && $exp[$i] != '}') {\n                    return false;\n                } else if ($top == '[' && $exp[$i] != ']') {\n                    return false;\n                }\n            }\n        }\n    }\n    if ($stack->isEmpty()) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n$exp = \"{()}[]\";\nif (check_expression($exp)) {\n    echo \"Balanced\";\n} else {\n    echo \"Not Balanced\";\n}",
    "    $stack = [];\n    $open = ['{', '[', '('];\n    $close = ['}', ']', ')'];\n    for ($i = 0; $i < strlen($exp); $i++) {\n        if (in_array($exp[$i], $open)) {\n            array_push($stack, $exp[$i]);\n        } else if (in_array($exp[$i], $close)) {\n            $pos = array_search($exp[$i], $close);\n            if (empty($stack) || ($open[$pos] != array_pop($stack))) {\n                return false;\n            }\n        }\n    }\n    return empty($stack);\n}\n\n$exp = '{()}[]';\nif (check_expression($exp)) {\n    echo 'Balanced';\n} else {\n    echo 'Not Balanced';\n}",
    "    $stack = [];\n    $open = ['{', '[', '('];\n    $close = ['}', ']', ')'];\n\n    for ($i = 0; $i < strlen($exp); $i++) {\n        if (in_array($exp[$i], $open)) {\n            array_push($stack, $exp[$i]);\n        } elseif (in_array($exp[$i], $close)) {\n            $last = array_pop($stack);\n            if ($last == $open[array_search($exp[$i], $close)]) {\n                continue;\n            } else {\n                return false;\n            }\n        }\n    }\n\n    return true;\n}\n\n$exp = '{()}[]';\necho check_expression($exp) ? 'Balanced' : 'Not Balanced';",
    "    $stack = [];\n    $open_brackets = ['(', '{', '['];\n    $close_brackets = [')', '}', ']'];\n    $brackets = array_merge($open_brackets, $close_brackets);\n    for ($i = 0; $i < strlen($exp); $i++) {\n        if (in_array($exp[$i], $brackets)) {\n            if (in_array($exp[$i], $open_brackets)) {\n                array_push($stack, $exp[$i]);\n            } else {\n                $last_bracket = array_pop($stack);\n                $index = array_search($last_bracket, $open_brackets);\n                if ($exp[$i] != $close_brackets[$index]) {\n                    return false;\n                }\n            }\n        }\n    }\n    return count($stack) == 0;\n}\n",
    "    $stack = array();\n    $open_brackets = array('(', '{', '[');\n    $close_brackets = array(')', '}', ']');\n    $len = strlen($exp);\n    for ($i = 0; $i < $len; $i++) {\n        if (in_array($exp[$i], $open_brackets)) {\n            array_push($stack, $exp[$i]);\n        } else if (in_array($exp[$i], $close_brackets)) {\n            $open_bracket = array_pop($stack);\n            if ($open_bracket == '(' && $exp[$i] != ')') {\n                return false;\n            } else if ($open_bracket == '{' && $exp[$i] != '}') {\n                return false;\n            } else if ($open_bracket == '[' && $exp[$i] != ']') {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\n$exp = \"{()}[]\";\n$exp1 = \"{()}[\";\n$exp2 = \"{()}[()]\";\n$exp3 = \"{()}[(])\";\n\necho check_expression($exp) ? \"Balanced\" : \"Not Balanced\";\necho \"\\n\";\necho check_expression($exp1) ? \"Balanced\" : \"Not Balanced\";\necho \"\\n\";\necho check_expression($exp2) ? \"Balanced\" : \"Not Balanced\";\necho \"\\n\";\necho check_expression($exp3) ? \"Balanced\" : \"Not Balanced\";\necho \"\\n\";",
    "    $stack = [];\n    $pairs = [\n        '(' => ')',\n        '[' => ']',\n        '{' => '}'\n    ];\n    for ($i = 0; $i < strlen($exp); $i++) {\n        if (in_array($exp[$i], array_keys($pairs))) {\n            array_push($stack, $exp[$i]);\n        } elseif (in_array($exp[$i], $pairs)) {\n            if (end($stack) == array_search($exp[$i], $pairs)) {\n                array_pop($stack);\n            } else {\n                return false;\n            }\n        }\n    }\n    return empty($stack);\n}\n\n$exp = \"{()}[]\";\necho check_expression($exp) ? \"Balanced\" : \"Not Balanced\";\necho \"\\n\";\n$exp = \"[(])\";\necho check_expression($exp) ? \"Balanced\" : \"Not Balanced\";\necho \"\\n\";",
    "    $stack = [];\n    $open_brackets = ['(', '{', '['];\n    $close_brackets = [')', '}', ']'];\n    for ($i = 0; $i < strlen($exp); $i++) {\n        if (in_array($exp[$i], $open_brackets)) {\n            array_push($stack, $exp[$i]);\n        }\n        if (in_array($exp[$i], $close_brackets)) {\n            $last_open_bracket = array_pop($stack);\n            if ($last_open_bracket == '(' && $exp[$i] != ')') {\n                return false;\n            }\n            if ($last_open_bracket == '{' && $exp[$i] != '}') {\n                return false;\n            }\n            if ($last_open_bracket == '[' && $exp[$i] != ']') {\n                return false;\n            }\n        }\n    }\n    if (count($stack) == 0) {\n        return true;\n    }\n    return false;\n}\n\n$exp = '{()}[]';\nvar_dump(check_expression($exp));\n\n$exp = '{(})';\nvar_dump(check_expression($exp));\n\n$exp = '{()}[{}]';\nvar_dump(check_expression($exp));",
    "    $stack = array();\n    $open = array('{', '[', '(');\n    $close = array('}', ']', ')');\n    $len = strlen($exp);\n    for ($i = 0; $i < $len; $i++) {\n        if (in_array($exp[$i], $open)) {\n            array_push($stack, $exp[$i]);\n        } else if (in_array($exp[$i], $close)) {\n            $key = array_search($exp[$i], $close);\n            if (end($stack) == $open[$key]) {\n                array_pop($stack);\n            } else {\n                return false;\n            }\n        }\n    }\n    if (empty($stack)) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n$exp = \"{()}[]\";\nif (check_expression($exp)) {\n    echo \"Balanced\";\n} else {\n    echo \"Not Balanced\";\n}",
    "    $stack = [];\n    $open = ['(', '{', '['];\n    $close = [')', '}', ']'];\n    $len = strlen($exp);\n    for ($i = 0; $i < $len; $i++) {\n        if (in_array($exp[$i], $open)) {\n            array_push($stack, $exp[$i]);\n        } else if (in_array($exp[$i], $close)) {\n            $pos = array_search($exp[$i], $close);\n            if (empty($stack) || ($open[$pos] != array_pop($stack))) {\n                return false;\n            }\n        }\n    }\n    return empty($stack) ? true : false;\n}\n\n$exp = '{([])}';\necho check_expression($exp) ? 'Balanced' : 'Not Balanced';\necho \"\\n\";\n$exp = '{([])}[';\necho check_expression($exp) ? 'Balanced' : 'Not Balanced';\necho \"\\n\";",
    "\t$stack = array();\n\t$open = array('(', '{', '[');\n\t$close = array(')', '}', ']');\n\tfor ($i = 0; $i < strlen($exp); $i++) {\n\t\tif (in_array($exp[$i], $open)) {\n\t\t\tarray_push($stack, $exp[$i]);\n\t\t} else if (in_array($exp[$i], $close)) {\n\t\t\t$open_index = array_search($stack[count($stack) - 1], $open);\n\t\t\t$close_index = array_search($exp[$i], $close);\n\t\t\tif ($open_index == $close_index) {\n\t\t\t\tarray_pop($stack);\n\t\t\t} else {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\tif (count($stack) == 0) {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t}\n}\n\n$exp = \"({[]})\";\necho check_expression($exp);",
    "\t$stack = [];\n\t$open = ['{', '[', '('];\n\t$close = ['}', ']', ')'];\n\tfor ($i = 0; $i < strlen($exp); $i++) {\n\t\tif (in_array($exp[$i], $open)) {\n\t\t\tarray_push($stack, $exp[$i]);\n\t\t}\n\t\tif (in_array($exp[$i], $close)) {\n\t\t\t$top = array_pop($stack);\n\t\t\tif ($open[array_search($top, $open)] != $close[array_search($exp[$i], $close)]) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\n\necho check_expression('{[()]}') ? 'Balanced' : 'Not Balanced';\necho PHP_EOL;\necho check_expression('{[(])}') ? 'Balanced' : 'Not Balanced';\necho PHP_EOL;\necho check_expression('{{[[(())]]}}') ? 'Balanced' : 'Not Balanced';\necho PHP_EOL;",
    "    $stack = [];\n    $open_brackets = ['(', '{', '['];\n    $close_brackets = [')', '}', ']'];\n    for ($i = 0; $i < strlen($exp); $i++) {\n        if (in_array($exp[$i], $open_brackets)) {\n            array_push($stack, $exp[$i]);\n        } else if (in_array($exp[$i], $close_brackets)) {\n            if (count($stack) == 0) {\n                return false;\n            }\n            $top = array_pop($stack);\n            if ($open_brackets[array_search($exp[$i], $close_brackets)] != $top) {\n                return false;\n            }\n        }\n    }\n    return count($stack) == 0;\n}\n\n$exp = \"({[]})\";\necho check_expression($exp) ? \"Balanced\" : \"Not Balanced\";",
    "    $stack = [];\n    $open = ['{', '[', '('];\n    $close = ['}', ']', ')'];\n    $len = strlen($exp);\n    for ($i = 0; $i < $len; $i++) {\n        $char = $exp[$i];\n        if (in_array($char, $open)) {\n            array_push($stack, $char);\n        } elseif (in_array($char, $close)) {\n            $open_char = array_pop($stack);\n            if ($open_char == '{' && $char != '}') {\n                return false;\n            } elseif ($open_char == '[' && $char != ']') {\n                return false;\n            } elseif ($open_char == '(' && $char != ')') {\n                return false;\n            }\n        }\n    }\n    return count($stack) == 0;\n}\n\n$exp = \"{()}[]\";\nvar_dump(check_expression($exp));\n\n$exp = \"{()}[\";\nvar_dump(check_expression($exp));",
    "\t$stack = [];\n\t$open_brackets = ['(', '{', '['];\n\t$close_brackets = [')', '}', ']'];\n\t$brackets = array_merge($open_brackets, $close_brackets);\n\t$exp_arr = str_split($exp);\n\tforeach ($exp_arr as $char) {\n\t\tif (in_array($char, $brackets)) {\n\t\t\tif (in_array($char, $open_brackets)) {\n\t\t\t\tarray_push($stack, $char);\n\t\t\t} else {\n\t\t\t\t$last_char = array_pop($stack);\n\t\t\t\tif ($last_char == '(' && $char != ')') {\n\t\t\t\t\treturn false;\n\t\t\t\t} elseif ($last_char == '{' && $char != '}') {\n\t\t\t\t\treturn false;\n\t\t\t\t} elseif ($last_char == '[' && $char != ']') {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\n\n$exp = '{()}[]';\nvar_dump(check_expression($exp));\n\n$exp = '{()}[';\nvar_dump(check_expression($exp));\n\n$exp = '{()}[{}]';\nvar_dump(check_expression($exp));\n\n$exp = '{()}[{}]{}';\nvar_dump(check_expression($exp));\n\n$exp = '{()}[{}]{}[';\nvar_dump(check_expression($exp));",
    "    $stack = [];\n    $open_brackets = ['(', '{', '['];\n    $close_brackets = [')', '}', ']'];\n    for ($i = 0; $i < strlen($exp); $i++) {\n        if (in_array($exp[$i], $open_brackets)) {\n            array_push($stack, $exp[$i]);\n        } else if (in_array($exp[$i], $close_brackets)) {\n            $last_open_bracket = array_pop($stack);\n            if ($open_brackets[array_search($last_open_bracket, $open_brackets)] != $close_brackets[array_search($exp[$i], $close_brackets)]) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\n$exp = \"{()}[]\";\necho check_expression($exp);",
    "    $stack = array();\n    $open = array('(', '{', '[');\n    $close = array(')', '}', ']');\n    for ($i = 0; $i < strlen($exp); $i++) {\n        if (in_array($exp[$i], $open)) {\n            array_push($stack, $exp[$i]);\n        } elseif (in_array($exp[$i], $close)) {\n            $open_index = array_search($stack[count($stack) - 1], $open);\n            $close_index = array_search($exp[$i], $close);\n            if ($open_index != $close_index) {\n                return false;\n            } else {\n                array_pop($stack);\n            }\n        }\n    }\n    if (count($stack) == 0) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n$exp = \"({[]})\";\nif (check_expression($exp)) {\n    echo \"Balanced\";\n} else {\n    echo \"Not Balanced\";\n}",
    "    $stack = [];\n    $open = ['(', '{', '['];\n    $close = [')', '}', ']'];\n    $len = strlen($exp);\n    for ($i = 0; $i < $len; $i++) {\n        if (in_array($exp[$i], $open)) {\n            array_push($stack, $exp[$i]);\n        } else if (in_array($exp[$i], $close)) {\n            if (count($stack) == 0) {\n                return false;\n            }\n            $pop = array_pop($stack);\n            if ($open[array_search($pop, $open)] != $close[array_search($exp[$i], $close)]) {\n                return false;\n            }\n        }\n    }\n    if (count($stack) != 0) {\n        return false;\n    }\n    return true;\n}\n\n$exp = \"{()}[]\";\nif (check_expression($exp)) {\n    echo \"Balanced\";\n} else {\n    echo \"Not Balanced\";\n}",
    "    $stack = array();\n    for ($i = 0; $i < strlen($exp); $i++) {\n        if ($exp[$i] == '(' || $exp[$i] == '{' || $exp[$i] == '[') {\n            array_push($stack, $exp[$i]);\n        } else if ($exp[$i] == ')' || $exp[$i] == '}' || $exp[$i] == ']') {\n            if (empty($stack)) {\n                return false;\n            }\n            $top = array_pop($stack);\n            if ($exp[$i] == ')' && $top != '(') {\n                return false;\n            }\n            if ($exp[$i] == '}' && $top != '{') {\n                return false;\n            }\n            if ($exp[$i] == ']' && $top != '[') {\n                return false;\n            }\n        }\n    }\n    if (empty($stack)) {\n        return true;\n    }\n    return false;\n}\n\n$exp = \"{()}[]\";\nif (check_expression($exp)) {\n    echo \"Balanced\";\n} else {\n    echo \"Not Balanced\";\n}",
    "    $stack = array();\n    $exp_len = strlen($exp);\n    for ($i = 0; $i < $exp_len; $i++) {\n        if ($exp[$i] == '(' || $exp[$i] == '{' || $exp[$i] == '[') {\n            array_push($stack, $exp[$i]);\n        } else {\n            if (empty($stack)) {\n                return false;\n            }\n            $top = array_pop($stack);\n            if (!((($top == '(') && ($exp[$i] == ')')) || (($top == '{') && ($exp[$i] == '}')) || (($top == '[') && ($exp[$i] == ']')))) {\n                return false;\n            }\n        }\n    }\n    if (empty($stack)) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n$exp = \"{{{}}}\";\nif (check_expression($exp)) {\n    echo \"Balanced\";\n} else {\n    echo \"Not Balanced\";\n}",
    "    $stack = array();\n    $open = array('(', '{', '[');\n    $close = array(')', '}', ']');\n    for ($i = 0; $i < strlen($exp); $i++) {\n        if (in_array($exp[$i], $open)) {\n            array_push($stack, $exp[$i]);\n        } else if (in_array($exp[$i], $close)) {\n            $pop = array_pop($stack);\n            if ($pop == '(' && $exp[$i] != ')') {\n                return false;\n            } else if ($pop == '{' && $exp[$i] != '}') {\n                return false;\n            } else if ($pop == '[' && $exp[$i] != ']') {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\n$exp = '{()}[]';\n$exp = '{()}[';\n$exp = '{()}[';\n$exp = '{()}[';\n$exp = '{()}[';\n$exp = '{()}[';\n$exp = '{()}[';\n$exp = '{()}[';\n$exp = '{()}[';\n$exp = '{()}[';\n$exp = '{()}[';\n$exp = '{()}[';\n$exp = '{()}[';\n$exp = '{()}[';\n$exp = '{()}[';\n$exp = '{()}[';\n$exp = '{()}[';\n$exp = '{()}[';\n$exp = '{()}[';\n$exp = '{()}[';\n$exp = '{()}[';\n$exp = '{()}[';\n$exp = '{()}[';\n$exp = '{()}[';\n$exp = '{()}[';\n$exp = '{()}[';\n$exp = '{()}[';\n$exp = '{()}[';\n$exp = '{()}[';\n$exp = '{()",
    "    $stack = [];\n    $open = ['{', '[', '('];\n    $close = ['}', ']', ')'];\n    $len = strlen($exp);\n    for ($i = 0; $i < $len; $i++) {\n        if (in_array($exp[$i], $open)) {\n            array_push($stack, $exp[$i]);\n        } else if (in_array($exp[$i], $close)) {\n            $last = array_pop($stack);\n            if ($last == $open[array_search($exp[$i], $close)]) {\n                continue;\n            } else {\n                return false;\n            }\n        }\n    }\n    if (count($stack) == 0) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n$exp = \"{()}[]\";\n$res = check_expression($exp);\nvar_dump($res);\n\n$exp = \"{(})\";\n$res = check_expression($exp);\nvar_dump($res);",
    "    $stack = [];\n    $open = ['{', '[', '('];\n    $close = ['}', ']', ')'];\n    $len = strlen($exp);\n    for ($i = 0; $i < $len; $i++) {\n        if (in_array($exp[$i], $open)) {\n            array_push($stack, $exp[$i]);\n        } else if (in_array($exp[$i], $close)) {\n            $last = array_pop($stack);\n            if ($last == '{' && $exp[$i] != '}') {\n                return false;\n            } else if ($last == '[' && $exp[$i] != ']') {\n                return false;\n            } else if ($last == '(' && $exp[$i] != ')') {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\n$exp = \"{()}[]\";\necho check_expression($exp) ? \"Balanced\" : \"Not Balanced\";\necho \"\\n\";\n$exp = \"{()}[\";\necho check_expression($exp) ? \"Balanced\" : \"Not Balanced\";\necho \"\\n\";",
    "    $stack = [];\n    for ($i = 0; $i < strlen($exp); $i++) {\n        if ($exp[$i] == '(' || $exp[$i] == '{' || $exp[$i] == '[') {\n            array_push($stack, $exp[$i]);\n        } else if ($exp[$i] == ')' || $exp[$i] == '}' || $exp[$i] == ']') {\n            if (empty($stack)) {\n                return false;\n            }\n            $top = array_pop($stack);\n            if ($top == '(' && $exp[$i] != ')') {\n                return false;\n            }\n            if ($top == '{' && $exp[$i] != '}') {\n                return false;\n            }\n            if ($top == '[' && $exp[$i] != ']') {\n                return false;\n            }\n        }\n    }\n    if (empty($stack)) {\n        return true;\n    }\n    return false;\n}\n\n$exp = \"{()}[]\";\necho check_expression($exp) ? \"Balanced\" : \"Not Balanced\";\necho \"\\n\";\n$exp = \"[(])\";\necho check_expression($exp) ? \"Balanced\" : \"Not Balanced\";\necho \"\\n\";\n$exp = \"[()]{}{[()()]()}\";\necho check_expression($exp) ? \"Balanced\" : \"Not Balanced\";\necho \"\\n\";\n$exp = \"[(])\";\necho check_expression($exp) ? \"Balanced\" : \"Not Balanced\";\necho \"\\n\";",
    "    $stack = array();\n    $open = array('{', '[', '(');\n    $close = array('}', ']', ')');\n    $len = strlen($exp);\n    for($i = 0; $i < $len; $i++) {\n        if(in_array($exp[$i], $open)) {\n            array_push($stack, $exp[$i]);\n        } else if(in_array($exp[$i], $close)) {\n            if(empty($stack)) {\n                return false;\n            }\n            $top = array_pop($stack);\n            if($top == '(' && $exp[$i] != ')') {\n                return false;\n            } else if($top == '[' && $exp[$i] != ']') {\n                return false;\n            } else if($top == '{' && $exp[$i] != '}') {\n                return false;\n            }\n        }\n    }\n    if(empty($stack)) {\n        return true;\n    }\n    return false;\n}\n\n$exp = \"{()}[]\";\nvar_dump(check_expression($exp));\n\n$exp = \"{()}[\";\nvar_dump(check_expression($exp));\n\n$exp = \"{()}[()]\";\nvar_dump(check_expression($exp));\n\n$exp = \"{()}[()\";\nvar_dump(check_expression($exp));\n\n$exp = \"{()}[()]{\";\nvar_dump(check_expression($exp));\n\n$exp = \"{()}[()]{}\";\nvar_dump(check_expression($exp));",
    "    $stack = [];\n    $open = ['(', '{', '['];\n    $close = [')', '}', ']'];\n    for ($i = 0; $i < strlen($exp); $i++) {\n        if (in_array($exp[$i], $open)) {\n            array_push($stack, $exp[$i]);\n        } else if (in_array($exp[$i], $close)) {\n            $popped = array_pop($stack);\n            if ($popped == '(' && $exp[$i] != ')') {\n                return false;\n            } else if ($popped == '{' && $exp[$i] != '}') {\n                return false;\n            } else if ($popped == '[' && $exp[$i] != ']') {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\n$exp = '{()}[]';\necho check_expression($exp);",
    "    $stack = [];\n    $open_brackets = ['{', '[', '('];\n    $close_brackets = ['}', ']', ')'];\n    $length = strlen($exp);\n    for ($i = 0; $i < $length; $i++) {\n        if (in_array($exp[$i], $open_brackets)) {\n            array_push($stack, $exp[$i]);\n        } else if (in_array($exp[$i], $close_brackets)) {\n            $last_bracket = array_pop($stack);\n            if ($open_brackets[array_search($last_bracket, $open_brackets)] != $exp[$i]) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\n$expression = '{([])}';\nvar_dump(check_expression($expression));",
    "    $stack = [];\n    $open_brackets = ['(', '{', '['];\n    $close_brackets = [')', '}', ']'];\n    $open_brackets_map = [\n        ')' => '(',\n        '}' => '{',\n        ']' => '['\n    ];\n    for($i = 0; $i < strlen($exp); $i++) {\n        if(in_array($exp[$i], $open_brackets)) {\n            array_push($stack, $exp[$i]);\n        } else if(in_array($exp[$i], $close_brackets)) {\n            if(empty($stack)) {\n                return false;\n            }\n            $top = array_pop($stack);\n            if($top != $open_brackets_map[$exp[$i]]) {\n                return false;\n            }\n        }\n    }\n    if(empty($stack)) {\n        return true;\n    }\n    return false;\n}\n\n$exp = \"{()}[]\";\nvar_dump(check_expression($exp));\n\n$exp = \"{()}[\";\nvar_dump(check_expression($exp));\n\n$exp = \"{()}[]]\";\nvar_dump(check_expression($exp));",
    "    $stack = [];\n    $open = ['(', '{', '['];\n    $close = [')', '}', ']'];\n    for($i=0; $i<strlen($exp); $i++) {\n        if(in_array($exp[$i], $open)) {\n            array_push($stack, $exp[$i]);\n        }\n        else if(in_array($exp[$i], $close)) {\n            if(count($stack) == 0) {\n                return false;\n            }\n            $top = array_pop($stack);\n            if(!($open[array_search($top, $open)] == $exp[$i])) {\n                return false;\n            }\n        }\n    }\n    if(count($stack) == 0) {\n        return true;\n    }\n    return false;\n}\n\n$exp = \"{()}[]\";\nif(check_expression($exp)) {\n    echo \"Balanced\";\n}\nelse {\n    echo \"Not Balanced\";\n}",
    "    $stack = array();\n    $open = array('(', '{', '[');\n    $close = array(')', '}', ']');\n    $len = strlen($exp);\n    for($i = 0; $i < $len; $i++) {\n        if(in_array($exp[$i], $open)) {\n            array_push($stack, $exp[$i]);\n        } else if(in_array($exp[$i], $close)) {\n            $key = array_search($exp[$i], $close);\n            if(end($stack) == $open[$key]) {\n                array_pop($stack);\n            } else {\n                return false;\n            }\n        }\n    }\n    if(empty($stack)) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n$exp = \"{()}[]\";\nif(check_expression($exp)) {\n    echo \"Balanced\";\n} else {\n    echo \"Not Balanced\";\n}",
    "\t$stack = [];\n\t$open = ['(', '{', '['];\n\t$close = [')', '}', ']'];\n\tfor($i = 0; $i < strlen($exp); $i++) {\n\t\tif(in_array($exp[$i], $open)) {\n\t\t\tarray_push($stack, $exp[$i]);\n\t\t}\n\t\tif(in_array($exp[$i], $close)) {\n\t\t\t$open_index = array_search($stack[count($stack) - 1], $open);\n\t\t\t$close_index = array_search($exp[$i], $close);\n\t\t\tif($open_index != $close_index) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tarray_pop($stack);\n\t\t}\n\t}\n\treturn count($stack) == 0;\n}\n\necho check_expression('{()}[]') ? 'balanced' : 'not balanced';\necho \"\\n\";\necho check_expression('{(})[]') ? 'balanced' : 'not balanced';\necho \"\\n\";\necho check_expression('{(})[') ? 'balanced' : 'not balanced';\necho \"\\n\";\necho check_expression('{(})[]') ? 'balanced' : 'not balanced';\necho \"\\n\";\necho check_expression('{(})[]') ? 'balanced' : 'not balanced';\necho \"\\n\";",
    "    $stack = array();\n    $open = array('{', '[', '(');\n    $close = array('}', ']', ')');\n    for ($i = 0; $i < strlen($exp); $i++) {\n        if (in_array($exp[$i], $open)) {\n            array_push($stack, $exp[$i]);\n        } else if (in_array($exp[$i], $close)) {\n            $open_index = array_search($exp[$i], $close);\n            if (array_pop($stack) != $open[$open_index]) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\n$exp = \"{()}[]\";\necho check_expression($exp) ? \"Balanced\" : \"Not Balanced\";\necho \"\\n\";\n\n$exp = \"{()}[\";\necho check_expression($exp) ? \"Balanced\" : \"Not Balanced\";\necho \"\\n\";\n\n$exp = \"{()}[{}]\";\necho check_expression($exp) ? \"Balanced\" : \"Not Balanced\";\necho \"\\n\";\n\n$exp = \"{()}[{]}\";\necho check_expression($exp) ? \"Balanced\" : \"Not Balanced\";\necho \"\\n\";\n\n$exp = \"{()}[{}]{\";\necho check_expression($exp) ? \"Balanced\" : \"Not Balanced\";\necho \"\\n\";\n\n$exp = \"{()}[{}]{}\";\necho check_expression($exp) ? \"Balanced\" : \"Not Balanced\";\necho \"\\n\";\n\n$exp = \"{()}[{}]{}{\";\necho check_expression($exp) ? \"Balanced\" : \"Not Balanced\";\necho \"\\n\";\n\n$exp = \"{()}[{}]{}{}\";\necho check_expression($exp) ? \"Balanced\" : \"Not Balanced\";\necho \"\\n\";\n\n$exp = \"{()}[{}]{}{}{\";\necho check_expression($exp) ? \"Balanced\" : \"Not Balanced\";\necho \"\\n\";\n\n$exp = \"{()}[{}]{}{}{}",
    "\t$stack = array();\n\t$open = array('(', '{', '[');\n\t$close = array(')', '}', ']');\n\t$len = strlen($exp);\n\tfor ($i = 0; $i < $len; $i++) {\n\t\tif (in_array($exp[$i], $open)) {\n\t\t\tarray_push($stack, $exp[$i]);\n\t\t} else if (in_array($exp[$i], $close)) {\n\t\t\t$pop = array_pop($stack);\n\t\t\tif ($pop == '(' && $exp[$i] != ')') {\n\t\t\t\treturn false;\n\t\t\t} else if ($pop == '{' && $exp[$i] != '}') {\n\t\t\t\treturn false;\n\t\t\t} else if ($pop == '[' && $exp[$i] != ']') {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\tif (count($stack) == 0) {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t}\n}\n\n$exp = \"({[]})\";\nif (check_expression($exp)) {\n\techo \"Balanced\";\n} else {\n\techo \"Not Balanced\";\n}",
    "    $stack = [];\n    $open = ['(', '{', '['];\n    $close = [')', '}', ']'];\n    $len = strlen($exp);\n    for ($i = 0; $i < $len; $i++) {\n        if (in_array($exp[$i], $open)) {\n            array_push($stack, $exp[$i]);\n        } else if (in_array($exp[$i], $close)) {\n            if (count($stack) == 0) {\n                return false;\n            }\n            $top = array_pop($stack);\n            if ($open[array_search($top, $open)] != $exp[$i]) {\n                return false;\n            }\n        }\n    }\n    if (count($stack) == 0) {\n        return true;\n    }\n    return false;\n}\n\necho check_expression('{()}[]') ? 'true' : 'false';\necho \"\\n\";\necho check_expression('{()}[') ? 'true' : 'false';\necho \"\\n\";\necho check_expression('{()}[(])') ? 'true' : 'false';\necho \"\\n\";\necho check_expression('{()}[()]') ? 'true' : 'false';\necho \"\\n\";\necho check_expression('{()}[()]{}') ? 'true' : 'false';\necho \"\\n\";\necho check_expression('{()}[()]{}[') ? 'true' : 'false';\necho \"\\n\";\necho check_expression('{()}[()]{}[()]') ? 'true' : 'false';\necho \"\\n\";\necho check_expression('{()}[()]{}[()]{}') ? 'true' : 'false';\necho \"\\n\";\necho check_expression('{()}[()]{}[()]{}[') ? 'true' : 'false';\necho \"\\n\";\necho check_expression('{()}[()]{}[()]{}[()]') ? 'true' : 'false';\necho \"\\n\";\necho check_expression('{()}[()]{",
    "    $stack = array();\n    $len = strlen($exp);\n    for ($i = 0; $i < $len; $i++) {\n        if ($exp[$i] == '(' || $exp[$i] == '[' || $exp[$i] == '{') {\n            array_push($stack, $exp[$i]);\n        } else {\n            if (empty($stack)) {\n                return false;\n            }\n            $top = array_pop($stack);\n            if (!((($top == '(') && ($exp[$i] == ')')) || (($top == '[') && ($exp[$i] == ']')) || (($top == '{') && ($exp[$i] == '}')))) {\n                return false;\n            }\n        }\n    }\n    if (empty($stack)) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n$exp = \"[()]{}{[()()]()}\";\nif (check_expression($exp)) {\n    echo \"Balanced\";\n} else {\n    echo \"Not Balanced\";\n}",
    "    $stack = [];\n    $open = ['{', '[', '('];\n    $close = ['}', ']', ')'];\n    for ($i = 0; $i < strlen($exp); $i++) {\n        if (in_array($exp[$i], $open)) {\n            array_push($stack, $exp[$i]);\n        } else if (in_array($exp[$i], $close)) {\n            $top = array_pop($stack);\n            if ($top == '{' && $exp[$i] != '}') {\n                return false;\n            } else if ($top == '[' && $exp[$i] != ']') {\n                return false;\n            } else if ($top == '(' && $exp[$i] != ')') {\n                return false;\n            }\n        }\n    }\n    if (count($stack) > 0) {\n        return false;\n    }\n    return true;\n}\n\n$exp = '{()}[]';\n$exp1 = '{[}]';\n$exp2 = '{[}]';\n$exp3 = '{[}]';\n$exp4 = '{[}]';\n$exp5 = '{[}]';\n\necho check_expression($exp) ? 'balanced' : 'not balanced';\necho \"\\n\";\necho check_expression($exp1) ? 'balanced' : 'not balanced';\necho \"\\n\";\necho check_expression($exp2) ? 'balanced' : 'not balanced';\necho \"\\n\";\necho check_expression($exp3) ? 'balanced' : 'not balanced';\necho \"\\n\";\necho check_expression($exp4) ? 'balanced' : 'not balanced';\necho \"\\n\";\necho check_expression($exp5) ? 'balanced' : 'not balanced';\necho \"\\n\";",
    "    $stack = [];\n    $open = ['(', '{', '['];\n    $close = [')', '}', ']'];\n    $len = strlen($exp);\n    for ($i = 0; $i < $len; $i++) {\n        if (in_array($exp[$i], $open)) {\n            array_push($stack, $exp[$i]);\n        } elseif (in_array($exp[$i], $close)) {\n            $open_index = array_search($exp[$i], $close);\n            if (array_pop($stack) != $open[$open_index]) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\n$exp = \"[()]{}{[()()]()}\";\n$exp2 = \"[(])\";\nvar_dump(check_expression($exp));\nvar_dump(check_expression($exp2));",
    "    $stack = array();\n    $open = array('{', '[', '(');\n    $close = array('}', ']', ')');\n    for($i=0; $i<strlen($exp); $i++) {\n        if(in_array($exp[$i], $open)) {\n            array_push($stack, $exp[$i]);\n        } elseif(in_array($exp[$i], $close)) {\n            $key = array_search($exp[$i], $close);\n            if($stack[count($stack)-1] == $open[$key]) {\n                array_pop($stack);\n            } else {\n                return false;\n            }\n        }\n    }\n    if(count($stack) == 0) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n$exp = \"{()}[]\";\necho check_expression($exp);",
    "    $stack = [];\n    for ($i = 0; $i < strlen($exp); $i++) {\n        if ($exp[$i] == '(' || $exp[$i] == '{' || $exp[$i] == '[') {\n            array_push($stack, $exp[$i]);\n        }\n        else if ($exp[$i] == ')' || $exp[$i] == '}' || $exp[$i] == ']') {\n            if (empty($stack)) {\n                return false;\n            }\n            else {\n                $top = array_pop($stack);\n                if ($exp[$i] == ')' && $top != '(') {\n                    return false;\n                }\n                else if ($exp[$i] == '}' && $top != '{') {\n                    return false;\n                }\n                else if ($exp[$i] == ']' && $top != '[') {\n                    return false;\n                }\n            }\n        }\n    }\n    if (empty($stack)) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\n\n$exp = \"{()}[]\";\necho check_expression($exp);",
    "    $stack = [];\n    $open_brackets = ['(', '{', '['];\n    $close_brackets = [')', '}', ']'];\n    $brackets = [\n        '(' => ')',\n        '{' => '}',\n        '[' => ']'\n    ];\n    for ($i = 0; $i < strlen($exp); $i++) {\n        if (in_array($exp[$i], $open_brackets)) {\n            array_push($stack, $exp[$i]);\n        } elseif (in_array($exp[$i], $close_brackets)) {\n            if (empty($stack)) {\n                return false;\n            }\n            $last_open_bracket = array_pop($stack);\n            if ($brackets[$last_open_bracket] != $exp[$i]) {\n                return false;\n            }\n        }\n    }\n    return empty($stack);\n}\n\n$exp = '{()}[]';\nvar_dump(check_expression($exp));",
    "    $stack = [];\n    $open = ['(', '{', '['];\n    $close = [')', '}', ']'];\n    for ($i = 0; $i < strlen($exp); $i++) {\n        if (in_array($exp[$i], $open)) {\n            array_push($stack, $exp[$i]);\n        } else if (in_array($exp[$i], $close)) {\n            $index = array_search($exp[$i], $close);\n            if (count($stack) == 0 || $stack[count($stack) - 1] != $open[$index]) {\n                return false;\n            } else {\n                array_pop($stack);\n            }\n        }\n    }\n    return count($stack) == 0;\n}\n\necho check_expression('{([])}') ? 'Balanced' : 'Not Balanced';",
    "    $stack = [];\n    $open = ['(', '{', '['];\n    $close = [')', '}', ']'];\n    $len = strlen($exp);\n    for ($i = 0; $i < $len; $i++) {\n        if (in_array($exp[$i], $open)) {\n            array_push($stack, $exp[$i]);\n        } else if (in_array($exp[$i], $close)) {\n            $pop = array_pop($stack);\n            if ($pop == '(' && $exp[$i] != ')') {\n                return false;\n            } else if ($pop == '{' && $exp[$i] != '}') {\n                return false;\n            } else if ($pop == '[' && $exp[$i] != ']') {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\n$exp = '{()}[]';\n$exp1 = '{(})';\n$exp2 = '{()}[{()}]';\n$exp3 = '{()}[{()}]{()}[{()}]';\n$exp4 = '{()}[{()}]{()}[{()}]{()}[{()}]{()}[{()}]{()}[{()}]{()}[{()}]{()}[{()}]{()}[{()}]{()}[{()}]{()}[{()}]{()}[{()}]{()}[{()}]{()}[{()}]{()}[{()}]{()}[{()}]{()}[{()}]{()}[{()}]{()}[{()}]{()}[{()}]{()}[{()}]{()}[{()}]{()}[{()}]{()}[{()}]{()}[{()}]{()}[{()}]{()}[{()}]{()}[{()}]{()}[{()}]{()}[",
    "    $stack = array();\n    $open = array(\"(\", \"{\", \"[\");\n    $close = array(\")\", \"}\", \"]\");\n    for ($i = 0; $i < strlen($exp); $i++) {\n        if (in_array($exp[$i], $open)) {\n            array_push($stack, $exp[$i]);\n        } else if (in_array($exp[$i], $close)) {\n            $top = array_pop($stack);\n            if (array_search($top, $open) != array_search($exp[$i], $close)) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\n$exp = \"({[]})\";\necho check_expression($exp);",
    "    $stack = [];\n    $open = ['(', '{', '['];\n    $close = [')', '}', ']'];\n    for ($i = 0; $i < strlen($exp); $i++) {\n        if (in_array($exp[$i], $open)) {\n            array_push($stack, $exp[$i]);\n        } else if (in_array($exp[$i], $close)) {\n            $top = array_pop($stack);\n            if ($open[array_search($top, $open)] != $close[array_search($exp[$i], $close)]) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\n$exp = \"{()}[]\";\necho check_expression($exp);",
    "    $stack = [];\n    $open = ['(', '{', '['];\n    $close = [')', '}', ']'];\n    $len = strlen($exp);\n    for ($i = 0; $i < $len; $i++) {\n        if (in_array($exp[$i], $open)) {\n            array_push($stack, $exp[$i]);\n        } elseif (in_array($exp[$i], $close)) {\n            $index = array_search($exp[$i], $close);\n            if (empty($stack) || $stack[count($stack) - 1] != $open[$index]) {\n                return false;\n            } else {\n                array_pop($stack);\n            }\n        }\n    }\n    return empty($stack);\n}\n\n$exp = \"{()}[]\";\necho check_expression($exp) ? \"Balanced\" : \"Not Balanced\";",
    "    $stack = [];\n    $open = ['{', '[', '('];\n    $close = ['}', ']', ')'];\n    $len = strlen($exp);\n    for ($i = 0; $i < $len; $i++) {\n        if (in_array($exp[$i], $open)) {\n            array_push($stack, $exp[$i]);\n        } elseif (in_array($exp[$i], $close)) {\n            $top = array_pop($stack);\n            if ($open[array_search($top, $open)] != $close[array_search($exp[$i], $close)]) {\n                return false;\n            }\n        }\n    }\n    if (count($stack) == 0) {\n        return true;\n    }\n    return false;\n}\n\n$exp = \"{()}[]\";\necho check_expression($exp);",
    "    $stack = [];\n    $open = ['{', '[', '('];\n    $close = ['}', ']', ')'];\n    for ($i = 0; $i < strlen($exp); $i++) {\n        if (in_array($exp[$i], $open)) {\n            array_push($stack, $exp[$i]);\n        } elseif (in_array($exp[$i], $close)) {\n            $top = array_pop($stack);\n            if ($open[array_search($exp[$i], $close)] != $top) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\n$exp = \"{()}[]\";\necho check_expression($exp) ? \"Balanced\" : \"Not Balanced\";",
    "    $stack = [];\n    $open = ['{', '[', '('];\n    $close = ['}', ']', ')'];\n    for ($i = 0; $i < strlen($exp); $i++) {\n        if (in_array($exp[$i], $open)) {\n            array_push($stack, $exp[$i]);\n        } else if (in_array($exp[$i], $close)) {\n            $last_open = array_pop($stack);\n            if ($open[array_search($last_open, $open)] != $close[array_search($exp[$i], $close)]) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\n$exp = \"{()}[]\";\necho check_expression($exp);",
    "    $stack = [];\n    for ($i = 0; $i < strlen($exp); $i++) {\n        if ($exp[$i] == '(' || $exp[$i] == '{' || $exp[$i] == '[') {\n            array_push($stack, $exp[$i]);\n        } else if ($exp[$i] == ')' || $exp[$i] == '}' || $exp[$i] == ']') {\n            if (empty($stack)) {\n                return false;\n            }\n            $top = array_pop($stack);\n            if ($top == '(' && $exp[$i] != ')') {\n                return false;\n            } else if ($top == '{' && $exp[$i] != '}') {\n                return false;\n            } else if ($top == '[' && $exp[$i] != ']') {\n                return false;\n            }\n        }\n    }\n    if (empty($stack)) {\n        return true;\n    }\n    return false;\n}\n\n$exp = \"{()}[]\";\nif (check_expression($exp)) {\n    echo \"Balanced\";\n} else {\n    echo \"Not Balanced\";\n}",
    "    $stack = [];\n    $open = ['(', '{', '['];\n    $close = [')', '}', ']'];\n    $len = strlen($exp);\n    for ($i = 0; $i < $len; $i++) {\n        $char = $exp[$i];\n        if (in_array($char, $open)) {\n            array_push($stack, $char);\n        } elseif (in_array($char, $close)) {\n            $last = array_pop($stack);\n            if ($last == '(' && $char != ')') {\n                return false;\n            } elseif ($last == '{' && $char != '}') {\n                return false;\n            } elseif ($last == '[' && $char != ']') {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\n$exp = '{()}[]';\n$exp1 = '{(})';\n$exp2 = '{()}[{}]';\n$exp3 = '{()}[{}]{()}[{}]';\n$exp4 = '{()}[{}]{()}[{}]{()}[{}]';\n$exp5 = '{()}[{}]{()}[{}]{()}[{}]{()}[{}]';\n$exp6 = '{()}[{}]{()}[{}]{()}[{}]{()}[{}]{()}[{}]';\n$exp7 = '{()}[{}]{()}[{}]{()}[{}]{()}[{}]{()}[{}]{()}[{}]';\n$exp8 = '{()}[{}]{()}[{}]{()}[{}]{()}[{}]{()}[{}]{()}[{}]{()}[{}]';\n$exp9 = '{()}[{}]{()}[{}]{()}[{}]{()}[{}]{()}",
    "    $stack = [];\n    $open = ['{', '[', '('];\n    $close = ['}', ']', ')'];\n    for ($i=0; $i < strlen($exp); $i++) {\n        if (in_array($exp[$i], $open)) {\n            array_push($stack, $exp[$i]);\n        } else if (in_array($exp[$i], $close)) {\n            $key = array_search($exp[$i], $close);\n            if (empty($stack) || $stack[count($stack)-1] != $open[$key]) {\n                return false;\n            } else {\n                array_pop($stack);\n            }\n        }\n    }\n    if (empty($stack)) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n$exp = '{()}[]';\nvar_dump(check_expression($exp));",
    "    $stack = [];\n    $open = ['(', '{', '['];\n    $close = [')', '}', ']'];\n    for ($i = 0; $i < strlen($exp); $i++) {\n        if (in_array($exp[$i], $open)) {\n            array_push($stack, $exp[$i]);\n        } else if (in_array($exp[$i], $close)) {\n            $index = array_search($exp[$i], $close);\n            if (empty($stack) || $stack[count($stack) - 1] != $open[$index]) {\n                return false;\n            } else {\n                array_pop($stack);\n            }\n        }\n    }\n    return empty($stack);\n}\n",
    "    $stack = [];\n    $open = ['{', '[', '('];\n    $close = ['}', ']', ')'];\n    for ($i = 0; $i < strlen($exp); $i++) {\n        if (in_array($exp[$i], $open)) {\n            array_push($stack, $exp[$i]);\n        } else if (in_array($exp[$i], $close)) {\n            $index = array_search($exp[$i], $close);\n            if (array_pop($stack) != $open[$index]) {\n                return false;\n            }\n        }\n    }\n    if (empty($stack)) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n$exp = \"{()}[]\";\nif (check_expression($exp)) {\n    echo \"Balanced\";\n} else {\n    echo \"Not Balanced\";\n}",
    "\t$stack = [];\n\t$open_brackets = ['(', '{', '['];\n\t$close_brackets = [')', '}', ']'];\n\tfor ($i = 0; $i < strlen($exp); $i++) {\n\t\tif (in_array($exp[$i], $open_brackets)) {\n\t\t\tarray_push($stack, $exp[$i]);\n\t\t} else if (in_array($exp[$i], $close_brackets)) {\n\t\t\t$last_open_bracket = array_pop($stack);\n\t\t\tif ($open_brackets[array_search($last_open_bracket, $open_brackets)] != $close_brackets[array_search($exp[$i], $close_brackets)]) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\n\necho check_expression('{()}[]') ? 'true' : 'false';\necho \"\\n\";\necho check_expression('{()}[') ? 'true' : 'false';\necho \"\\n\";\necho check_expression('{()}[') ? 'true' : 'false';\necho \"\\n\";\necho check_expression('{()}[') ? 'true' : 'false';\necho \"\\n\";\necho check_expression('{()}[') ? 'true' : 'false';\necho \"\\n\";\necho check_expression('{()}[') ? 'true' : 'false';\necho \"\\n\";\necho check_expression('{()}[') ? 'true' : 'false';\necho \"\\n\";\necho check_expression('{()}[') ? 'true' : 'false';\necho \"\\n\";\necho check_expression('{()}[') ? 'true' : 'false';\necho \"\\n\";\necho check_expression('{()}[') ? 'true' : 'false';\necho \"\\n\";\necho check_expression('{()}[') ? 'true' : 'false';\necho \"\\n\";\necho check_expression('{()}[') ? 'true' : 'false';\necho \"\\n\";\necho check_expression('",
    "    $stack = [];\n    for ($i = 0; $i < strlen($exp); $i++) {\n        if ($exp[$i] == '(' || $exp[$i] == '{' || $exp[$i] == '[') {\n            array_push($stack, $exp[$i]);\n        } else if ($exp[$i] == ')' || $exp[$i] == '}' || $exp[$i] == ']') {\n            if (empty($stack)) {\n                return false;\n            }\n            $top = array_pop($stack);\n            if ($top == '(' && $exp[$i] != ')') {\n                return false;\n            } else if ($top == '{' && $exp[$i] != '}') {\n                return false;\n            } else if ($top == '[' && $exp[$i] != ']') {\n                return false;\n            }\n        }\n    }\n    if (empty($stack)) {\n        return true;\n    }\n    return false;\n}\n\n$expression = \"{{[[(())]]}}\";\necho check_expression($expression) ? \"Balanced\" : \"Not Balanced\";",
    "    $stack = [];\n    $open = ['{', '[', '('];\n    $close = ['}', ']', ')'];\n    $len = strlen($exp);\n    for ($i = 0; $i < $len; $i++) {\n        if (in_array($exp[$i], $open)) {\n            array_push($stack, $exp[$i]);\n        } elseif (in_array($exp[$i], $close)) {\n            $open_index = array_search($exp[$i], $close);\n            if (array_pop($stack) != $open[$open_index]) {\n                return false;\n            }\n        }\n    }\n    if (count($stack) > 0) {\n        return false;\n    }\n    return true;\n}\n\n$exp = '{()}[]';\nvar_dump(check_expression($exp));",
    "    $stack = [];\n    $open = ['{', '[', '('];\n    $close = ['}', ']', ')'];\n    $len = strlen($exp);\n    for ($i = 0; $i < $len; $i++) {\n        $char = $exp[$i];\n        if (in_array($char, $open)) {\n            array_push($stack, $char);\n        } else if (in_array($char, $close)) {\n            $open_char = array_pop($stack);\n            $open_char_index = array_search($open_char, $open);\n            $close_char_index = array_search($char, $close);\n            if ($open_char_index != $close_char_index) {\n                return false;\n            }\n        }\n    }\n    if (count($stack) > 0) {\n        return false;\n    }\n    return true;\n}\n\n$exp = \"{()}[]\";\nvar_dump(check_expression($exp));\n\n$exp = \"{()}[\";\nvar_dump(check_expression($exp));",
    "\t$stack = array();\n\t$len = strlen($exp);\n\tfor ($i = 0; $i < $len; $i++) {\n\t\tif ($exp[$i] == '(' || $exp[$i] == '{' || $exp[$i] == '[') {\n\t\t\tarray_push($stack, $exp[$i]);\n\t\t} else if ($exp[$i] == ')' || $exp[$i] == '}' || $exp[$i] == ']') {\n\t\t\tif (empty($stack)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t$top = array_pop($stack);\n\t\t\tif ($top == '(' && $exp[$i] != ')') {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif ($top == '{' && $exp[$i] != '}') {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif ($top == '[' && $exp[$i] != ']') {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\tif (empty($stack)) {\n\t\treturn true;\n\t}\n\treturn false;\n}\n\n$exp = \"{()}[]\";\necho check_expression($exp);",
    "    $stack = [];\n    $exp_arr = str_split($exp);\n    foreach($exp_arr as $char) {\n        if($char == '(' || $char == '{' || $char == '[') {\n            array_push($stack, $char);\n        } else {\n            if(empty($stack)) {\n                return false;\n            }\n            $top = array_pop($stack);\n            if($top == '(' && $char != ')') {\n                return false;\n            }\n            if($top == '{' && $char != '}') {\n                return false;\n            }\n            if($top == '[' && $char != ']') {\n                return false;\n            }\n        }\n    }\n    if(empty($stack)) {\n        return true;\n    }\n    return false;\n}\n\n$exp = '{()}[]';\necho check_expression($exp) ? 'Balanced' : 'Not Balanced';\necho PHP_EOL;\n$exp = '{()}[';\necho check_expression($exp) ? 'Balanced' : 'Not Balanced';\necho PHP_EOL;\n$exp = '{()}[{}]';\necho check_expression($exp) ? 'Balanced' : 'Not Balanced';\necho PHP_EOL;\n$exp = '{()}[{}]{}';\necho check_expression($exp) ? 'Balanced' : 'Not Balanced';\necho PHP_EOL;\n$exp = '{()}[{}]{}(';\necho check_expression($exp) ? 'Balanced' : 'Not Balanced';\necho PHP_EOL;",
    "    $stack = [];\n    $open = ['(', '{', '['];\n    $close = [')', '}', ']'];\n    for ($i = 0; $i < strlen($exp); $i++) {\n        if (in_array($exp[$i], $open)) {\n            array_push($stack, $exp[$i]);\n        } else if (in_array($exp[$i], $close)) {\n            $last = array_pop($stack);\n            if ($last == '(' && $exp[$i] != ')') {\n                return false;\n            } else if ($last == '{' && $exp[$i] != '}') {\n                return false;\n            } else if ($last == '[' && $exp[$i] != ']') {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\n$exp = '{()}[]';\necho check_expression($exp);",
    "    $stack = [];\n    $len = strlen($exp);\n    for ($i = 0; $i < $len; $i++) {\n        if ($exp[$i] == '(' || $exp[$i] == '{' || $exp[$i] == '[') {\n            array_push($stack, $exp[$i]);\n        } else if ($exp[$i] == ')' || $exp[$i] == '}' || $exp[$i] == ']') {\n            if (empty($stack)) {\n                return false;\n            } else {\n                $last_element = array_pop($stack);\n                if ($last_element == '(' && $exp[$i] != ')') {\n                    return false;\n                } else if ($last_element == '{' && $exp[$i] != '}') {\n                    return false;\n                } else if ($last_element == '[' && $exp[$i] != ']') {\n                    return false;\n                }\n            }\n        }\n    }\n    if (empty($stack)) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n$exp = '{()}[]';\necho check_expression($exp);",
    "    $stack = new SplStack();\n    for ($i = 0; $i < strlen($exp); $i++) {\n        if ($exp[$i] == '(') {\n            $stack->push($exp[$i]);\n        } else if ($exp[$i] == ')') {\n            if ($stack->isEmpty()) {\n                return false;\n            }\n            $stack->pop();\n        }\n    }\n    if ($stack->isEmpty()) {\n        return true;\n    }\n    return false;\n}\n\n$exp = \"((a+b))\";\nif (check_expression($exp)) {\n    echo \"Balanced\";\n} else {\n    echo \"Not Balanced\";\n}",
    "\t$stack = array();\n\t$open = array('(', '{', '[');\n\t$close = array(')', '}', ']');\n\t$len = strlen($exp);\n\tfor($i = 0; $i < $len; $i++) {\n\t\tif(in_array($exp[$i], $open)) {\n\t\t\tarray_push($stack, $exp[$i]);\n\t\t}\n\t\telse if(in_array($exp[$i], $close)) {\n\t\t\t$key = array_search($exp[$i], $close);\n\t\t\tif(array_pop($stack) != $open[$key]) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\n\n$exp = '{()}[]';\necho check_expression($exp);",
    "    $stack = [];\n    $map = [\n        '{' => '}',\n        '[' => ']',\n        '(' => ')'\n    ];\n    for ($i = 0; $i < strlen($exp); $i++) {\n        if (in_array($exp[$i], array_keys($map))) {\n            array_push($stack, $exp[$i]);\n        } else {\n            if (empty($stack)) {\n                return false;\n            }\n            $last = array_pop($stack);\n            if ($map[$last] != $exp[$i]) {\n                return false;\n            }\n        }\n    }\n    return empty($stack);\n}\n",
    "\t$stack = array();\n\tfor($i=0;$i<strlen($exp);$i++) {\n\t\tif($exp[$i] == '(' || $exp[$i] == '{' || $exp[$i] == '[') {\n\t\t\tarray_push($stack,$exp[$i]);\n\t\t}\n\t\telseif($exp[$i] == ')' || $exp[$i] == '}' || $exp[$i] == ']') {\n\t\t\tif(empty($stack)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t$top = array_pop($stack);\n\t\t\tif($top == '(' && $exp[$i] != ')') {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telseif($top == '{' && $exp[$i] != '}') {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telseif($top == '[' && $exp[$i] != ']') {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\tif(empty($stack)) {\n\t\treturn true;\n\t}\n\telse {\n\t\treturn false;\n\t}\n}\n\n$exp = \"({[]})\";\nif(check_expression($exp)) {\n\techo \"Balanced\";\n}\nelse {\n\techo \"Not Balanced\";\n}",
    "    $stack = [];\n    $open = ['(', '{', '['];\n    $close = [')', '}', ']'];\n    for ($i = 0; $i < strlen($exp); $i++) {\n        if (in_array($exp[$i], $open)) {\n            array_push($stack, $exp[$i]);\n        } else if (in_array($exp[$i], $close)) {\n            $top = array_pop($stack);\n            if ($top == '(' && $exp[$i] != ')') {\n                return false;\n            } else if ($top == '{' && $exp[$i] != '}') {\n                return false;\n            } else if ($top == '[' && $exp[$i] != ']') {\n                return false;\n            }\n        }\n    }\n    if (count($stack) == 0) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\necho check_expression('{()}[]');",
    "    $stack = [];\n    $exp_arr = str_split($exp);\n    foreach($exp_arr as $char) {\n        if($char == '(' || $char == '{' || $char == '[') {\n            array_push($stack, $char);\n        } else {\n            if(empty($stack)) {\n                return false;\n            }\n            $top = array_pop($stack);\n            if($top == '(' && $char != ')') {\n                return false;\n            }\n            if($top == '{' && $char != '}') {\n                return false;\n            }\n            if($top == '[' && $char != ']') {\n                return false;\n            }\n        }\n    }\n    if(!empty($stack)) {\n        return false;\n    }\n    return true;\n}\n\n$exp = \"{()}[]\";\necho check_expression($exp);",
    "    $stack = [];\n    $open = ['{', '[', '('];\n    $close = ['}', ']', ')'];\n    for ($i = 0; $i < strlen($exp); $i++) {\n        if (in_array($exp[$i], $open)) {\n            array_push($stack, $exp[$i]);\n        } elseif (in_array($exp[$i], $close)) {\n            if (count($stack) == 0) {\n                return false;\n            }\n            $top = array_pop($stack);\n            if ($open[array_search($exp[$i], $close)] != $top) {\n                return false;\n            }\n        }\n    }\n    if (count($stack) == 0) {\n        return true;\n    }\n    return false;\n}\n\n$exp = \"{()}[]\";\necho check_expression($exp) ? \"Balanced\" : \"Not Balanced\";",
    "\t$stack = [];\n\t$open = ['{', '[', '('];\n\t$close = ['}', ']', ')'];\n\tfor ($i=0; $i < strlen($exp); $i++) { \n\t\tif (in_array($exp[$i], $open)) {\n\t\t\tarray_push($stack, $exp[$i]);\n\t\t} else if (in_array($exp[$i], $close)) {\n\t\t\t$open_index = array_search($stack[count($stack)-1], $open);\n\t\t\t$close_index = array_search($exp[$i], $close);\n\t\t\tif ($open_index == $close_index) {\n\t\t\t\tarray_pop($stack);\n\t\t\t} else {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\tif (count($stack) == 0) {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t}\n}\n\n$exp = \"{()}[]\";\necho check_expression($exp);",
    "    $stack = [];\n    for ($i = 0; $i < strlen($exp); $i++) {\n        if ($exp[$i] == '(' || $exp[$i] == '[' || $exp[$i] == '{') {\n            array_push($stack, $exp[$i]);\n        } else if ($exp[$i] == ')' || $exp[$i] == ']' || $exp[$i] == '}') {\n            if (empty($stack)) {\n                return false;\n            }\n            $top = array_pop($stack);\n            if ($exp[$i] == ')' && $top != '(') {\n                return false;\n            } else if ($exp[$i] == ']' && $top != '[') {\n                return false;\n            } else if ($exp[$i] == '}' && $top != '{') {\n                return false;\n            }\n        }\n    }\n    if (empty($stack)) {\n        return true;\n    }\n    return false;\n}\n\n$exp = \"{()}[]\";\nif (check_expression($exp)) {\n    echo \"Balanced\";\n} else {\n    echo \"Not Balanced\";\n}",
    "    $stack = array();\n    $open = array('(', '{', '[');\n    $close = array(')', '}', ']');\n    for ($i = 0; $i < strlen($exp); $i++) {\n        if (in_array($exp[$i], $open)) {\n            array_push($stack, $exp[$i]);\n        } else if (in_array($exp[$i], $close)) {\n            if (count($stack) == 0) {\n                return false;\n            }\n            $top = array_pop($stack);\n            if ($top == '(' && $exp[$i] != ')') {\n                return false;\n            } else if ($top == '{' && $exp[$i] != '}') {\n                return false;\n            } else if ($top == '[' && $exp[$i] != ']') {\n                return false;\n            }\n        }\n    }\n    if (count($stack) == 0) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n$exp = \"({[]})\";\necho check_expression($exp);",
    "    $stack = [];\n    $open = ['{', '[', '('];\n    $close = ['}', ']', ')'];\n    $len = strlen($exp);\n    for ($i = 0; $i < $len; $i++) {\n        if (in_array($exp[$i], $open)) {\n            array_push($stack, $exp[$i]);\n        } else if (in_array($exp[$i], $close)) {\n            $top = array_pop($stack);\n            if ($top == '{' && $exp[$i] != '}') {\n                return false;\n            } else if ($top == '[' && $exp[$i] != ']') {\n                return false;\n            } else if ($top == '(' && $exp[$i] != ')') {\n                return false;\n            }\n        }\n    }\n    if (count($stack) > 0) {\n        return false;\n    }\n    return true;\n}\n\n$exp = \"{()}[]\";\nif (check_expression($exp)) {\n    echo \"Balanced\";\n} else {\n    echo \"Not Balanced\";\n}",
    "    $stack = [];\n    $open = ['{', '[', '('];\n    $close = ['}', ']', ')'];\n    $len = strlen($exp);\n    for ($i = 0; $i < $len; $i++) {\n        if (in_array($exp[$i], $open)) {\n            array_push($stack, $exp[$i]);\n        } else if (in_array($exp[$i], $close)) {\n            $top = array_pop($stack);\n            if ($top == '{' && $exp[$i] != '}') {\n                return false;\n            } else if ($top == '[' && $exp[$i] != ']') {\n                return false;\n            } else if ($top == '(' && $exp[$i] != ')') {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\n$exp = \"{()}[]\";\necho check_expression($exp);",
    "    $stack = [];\n    $len = strlen($exp);\n    for ($i = 0; $i < $len; $i++) {\n        if ($exp[$i] == '(' || $exp[$i] == '[' || $exp[$i] == '{') {\n            array_push($stack, $exp[$i]);\n        } else if ($exp[$i] == ')' || $exp[$i] == ']' || $exp[$i] == '}') {\n            if (empty($stack)) {\n                return false;\n            }\n            $top = array_pop($stack);\n            if ($exp[$i] == ')' && $top != '(') {\n                return false;\n            } else if ($exp[$i] == ']' && $top != '[') {\n                return false;\n            } else if ($exp[$i] == '}' && $top != '{') {\n                return false;\n            }\n        }\n    }\n    if (empty($stack)) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n$exp = \"{()}[]\";\nif (check_expression($exp)) {\n    echo \"Balanced\";\n} else {\n    echo \"Not Balanced\";\n}",
    "    $stack = [];\n    $len = strlen($exp);\n    for ($i = 0; $i < $len; $i++) {\n        if ($exp[$i] == '(' || $exp[$i] == '{' || $exp[$i] == '[') {\n            array_push($stack, $exp[$i]);\n        } else if ($exp[$i] == ')' || $exp[$i] == '}' || $exp[$i] == ']') {\n            if (count($stack) == 0) {\n                return false;\n            }\n            $top = array_pop($stack);\n            if ($exp[$i] == ')' && $top != '(') {\n                return false;\n            }\n            if ($exp[$i] == '}' && $top != '{') {\n                return false;\n            }\n            if ($exp[$i] == ']' && $top != '[') {\n                return false;\n            }\n        }\n    }\n    if (count($stack) > 0) {\n        return false;\n    }\n    return true;\n}\n\n$exp = \"({[]})\";\nif (check_expression($exp)) {\n    echo \"Balanced\";\n} else {\n    echo \"Not Balanced\";\n}",
    "    $stack = [];\n    $open = ['{', '[', '('];\n    $close = ['}', ']', ')'];\n    for($i = 0; $i < strlen($exp); $i++) {\n        if(in_array($exp[$i], $open)) {\n            array_push($stack, $exp[$i]);\n        } else if(in_array($exp[$i], $close)) {\n            $last_open = array_pop($stack);\n            if(!$last_open) {\n                return false;\n            }\n            if($open[array_search($last_open, $open)] != $close[array_search($exp[$i], $close)]) {\n                return false;\n            }\n        }\n    }\n    if(count($stack) > 0) {\n        return false;\n    }\n    return true;\n}\n\n$exp = '{()}[]';\nvar_dump(check_expression($exp));\n\n$exp = '{(})';\nvar_dump(check_expression($exp));",
    "    $stack = [];\n    $open = ['{', '[', '('];\n    $close = ['}', ']', ')'];\n    for ($i = 0; $i < strlen($exp); $i++) {\n        if (in_array($exp[$i], $open)) {\n            array_push($stack, $exp[$i]);\n        } else if (in_array($exp[$i], $close)) {\n            $index = array_search($exp[$i], $close);\n            if (empty($stack) || $stack[count($stack) - 1] != $open[$index]) {\n                return false;\n            } else {\n                array_pop($stack);\n            }\n        }\n    }\n    return empty($stack);\n}\n\n$exp = '{()}[]';\nvar_dump(check_expression($exp));\n\n$exp = '{()}[';\nvar_dump(check_expression($exp));\n\n$exp = '{()}[()]';\nvar_dump(check_expression($exp));",
    "    $stack = [];\n    $open_brackets = ['(', '{', '['];\n    $close_brackets = [')', '}', ']'];\n    $brackets = array_merge($open_brackets, $close_brackets);\n    $exp_arr = str_split($exp);\n    foreach ($exp_arr as $char) {\n        if (in_array($char, $brackets)) {\n            if (in_array($char, $open_brackets)) {\n                array_push($stack, $char);\n            } else {\n                $last_open_bracket = array_pop($stack);\n                if ($last_open_bracket == '(' && $char != ')') {\n                    return false;\n                } else if ($last_open_bracket == '{' && $char != '}') {\n                    return false;\n                } else if ($last_open_bracket == '[' && $char != ']') {\n                    return false;\n                }\n            }\n        }\n    }\n    if (count($stack) > 0) {\n        return false;\n    }\n    return true;\n}\n\n$exp = '{()}[]';\n$exp = '{()}[}';\n$exp = '{()}[{}]';\n$exp = '{()}[{}]{}';\n$exp = '{()}[{}]{}[';\n$exp = '{()}[{}]{}[{}]';\n$exp = '{()}[{}]{}[{}]{}';\n$exp = '{()}[{}]{}[{}]{}[';\n$exp = '{()}[{}]{}[{}]{}[{}]';\n$exp = '{()}[{}]{}[{}]{}[{}]{}';\n$exp = '{()}[{}]{}[{}]{}[{}]{}[';\n$exp = '{()}[{}]{}[{}]{}[{}]{}[{}]",
    "    $stack = [];\n    $open = ['(', '{', '['];\n    $close = [')', '}', ']'];\n    $len = strlen($exp);\n    for($i = 0; $i < $len; $i++) {\n        if(in_array($exp[$i], $open)) {\n            array_push($stack, $exp[$i]);\n        }\n        else if(in_array($exp[$i], $close)) {\n            $top = array_pop($stack);\n            if($top == '(' && $exp[$i] != ')') {\n                return false;\n            }\n            else if($top == '{' && $exp[$i] != '}') {\n                return false;\n            }\n            else if($top == '[' && $exp[$i] != ']') {\n                return false;\n            }\n        }\n    }\n    if(count($stack) == 0) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\n$exp = '{()}[]';\nif(check_expression($exp)) {\n    echo \"Balanced\";\n}\nelse {\n    echo \"Not Balanced\";\n}",
    "    $stack = [];\n    $open = ['(', '{', '['];\n    $close = [')', '}', ']'];\n    $len = strlen($exp);\n    for ($i = 0; $i < $len; $i++) {\n        if (in_array($exp[$i], $open)) {\n            array_push($stack, $exp[$i]);\n        } else if (in_array($exp[$i], $close)) {\n            $index = array_search($exp[$i], $close);\n            if (array_pop($stack) != $open[$index]) {\n                return false;\n            }\n        }\n    }\n    if (count($stack) > 0) {\n        return false;\n    }\n    return true;\n}\n\n$exp = \"{{}}[]()\";\necho check_expression($exp);",
    "    $stack = array();\n    for($i = 0; $i < strlen($exp); $i++) {\n        if($exp[$i] == '(') {\n            array_push($stack, $exp[$i]);\n        } else if($exp[$i] == ')') {\n            if(empty($stack)) {\n                return false;\n            } else {\n                array_pop($stack);\n            }\n        }\n    }\n    if(empty($stack)) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n$exp = \"(a+b)\";\necho check_expression($exp);",
    "    $stack = array();\n    $exp = str_split($exp);\n    foreach($exp as $char) {\n        if($char == '(') {\n            array_push($stack, $char);\n        } else if ($char == ')') {\n            if(empty($stack)) {\n                return false;\n            } else {\n                array_pop($stack);\n            }\n        }\n    }\n    if(empty($stack)) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n$exp = '(())';\necho check_expression($exp);",
    "    $stack = [];\n    $len = strlen($exp);\n    for ($i = 0; $i < $len; $i++) {\n        if ($exp[$i] == '(' || $exp[$i] == '{' || $exp[$i] == '[') {\n            array_push($stack, $exp[$i]);\n        } else {\n            if (empty($stack)) {\n                return false;\n            }\n            $top = array_pop($stack);\n            if ($exp[$i] == ')' && $top != '(') {\n                return false;\n            }\n            if ($exp[$i] == '}' && $top != '{') {\n                return false;\n            }\n            if ($exp[$i] == ']' && $top != '[') {\n                return false;\n            }\n        }\n    }\n    if (empty($stack)) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\necho check_expression('{()}[]') ? 'Balanced' : 'Not Balanced';\necho PHP_EOL;\necho check_expression('{(})') ? 'Balanced' : 'Not Balanced';\necho PHP_EOL;\necho check_expression('{()}[') ? 'Balanced' : 'Not Balanced';\necho PHP_EOL;\necho check_expression('{()}[]{}') ? 'Balanced' : 'Not Balanced';\necho PHP_EOL;\necho check_expression('{()}[]{(})') ? 'Balanced' : 'Not Balanced';\necho PHP_EOL;",
    "    $stack = [];\n    $open = ['(', '{', '['];\n    $close = [')', '}', ']'];\n    $len = strlen($exp);\n    for ($i = 0; $i < $len; $i++) {\n        if (in_array($exp[$i], $open)) {\n            array_push($stack, $exp[$i]);\n        } else if (in_array($exp[$i], $close)) {\n            $key = array_search($exp[$i], $close);\n            if (end($stack) == $open[$key]) {\n                array_pop($stack);\n            } else {\n                return false;\n            }\n        }\n    }\n    return empty($stack);\n}\n\n$exp = \"{()}[]\";\necho check_expression($exp) ? \"Balanced\" : \"Not Balanced\";\necho \"\\n\";\n$exp = \"[(])\";\necho check_expression($exp) ? \"Balanced\" : \"Not Balanced\";\necho \"\\n\";\n$exp = \"[()]{}{[()()]()}\";\necho check_expression($exp) ? \"Balanced\" : \"Not Balanced\";\necho \"\\n\";\n$exp = \"[(])\";\necho check_expression($exp) ? \"Balanced\" : \"Not Balanced\";\necho \"\\n\";",
    "    $stack = array();\n    $open = array('{', '(', '[');\n    $close = array('}', ')', ']');\n    for ($i = 0; $i < strlen($exp); $i++) {\n        if (in_array($exp[$i], $open)) {\n            array_push($stack, $exp[$i]);\n        } elseif (in_array($exp[$i], $close)) {\n            $index = array_search($exp[$i], $close);\n            if (array_pop($stack) != $open[$index]) {\n                return false;\n            }\n        }\n    }\n    return count($stack) == 0;\n}\n\n$exp = '{()}[]';\necho check_expression($exp);",
    "    $stack = [];\n    $open = ['{', '[', '('];\n    $close = ['}', ']', ')'];\n    for ($i = 0; $i < strlen($exp); $i++) {\n        if (in_array($exp[$i], $open)) {\n            array_push($stack, $exp[$i]);\n        } else if (in_array($exp[$i], $close)) {\n            $index = array_search($exp[$i], $close);\n            if (count($stack) == 0 || $stack[count($stack) - 1] != $open[$index]) {\n                return false;\n            } else {\n                array_pop($stack);\n            }\n        }\n    }\n    return count($stack) == 0;\n}\n\n$exp = \"{()}[]\";\necho check_expression($exp);",
    "    $stack = array();\n    $len = strlen($exp);\n    for ($i=0; $i<$len; $i++) {\n        if ($exp[$i] == '(' || $exp[$i] == '{' || $exp[$i] == '[') {\n            array_push($stack, $exp[$i]);\n        } else {\n            if (empty($stack)) {\n                return false;\n            }\n            $top = array_pop($stack);\n            if ($exp[$i] == ')' && $top != '(') {\n                return false;\n            }\n            if ($exp[$i] == '}' && $top != '{') {\n                return false;\n            }\n            if ($exp[$i] == ']' && $top != '[') {\n                return false;\n            }\n        }\n    }\n    if (empty($stack)) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n$exp = \"({[]})\";\nif (check_expression($exp)) {\n    echo \"Balanced\";\n} else {\n    echo \"Not Balanced\";\n}",
    "    $stack = [];\n    $open = ['(', '{', '['];\n    $close = [')', '}', ']'];\n    for ($i = 0; $i < strlen($exp); $i++) {\n        if (in_array($exp[$i], $open)) {\n            array_push($stack, $exp[$i]);\n        } elseif (in_array($exp[$i], $close)) {\n            $top = array_pop($stack);\n            if ($open[array_search($exp[$i], $close)] != $top) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\necho check_expression('{()}[]') ? 'balanced' : 'not balanced';\necho PHP_EOL;\necho check_expression('{(})[]') ? 'balanced' : 'not balanced';\necho PHP_EOL;\necho check_expression('{()}[') ? 'balanced' : 'not balanced';\necho PHP_EOL;",
    "    $stack = [];\n    $len = strlen($exp);\n    for ($i = 0; $i < $len; $i++) {\n        if ($exp[$i] == '(' || $exp[$i] == '{' || $exp[$i] == '[') {\n            array_push($stack, $exp[$i]);\n        } else {\n            if (empty($stack)) {\n                return false;\n            }\n            $top = array_pop($stack);\n            if ($top == '(' && $exp[$i] != ')') {\n                return false;\n            }\n            if ($top == '{' && $exp[$i] != '}') {\n                return false;\n            }\n            if ($top == '[' && $exp[$i] != ']') {\n                return false;\n            }\n        }\n    }\n    if (empty($stack)) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n$exp = \"({[]})\";\nif (check_expression($exp)) {\n    echo \"Balanced\";\n} else {\n    echo \"Not Balanced\";\n}",
    "    $stack = [];\n    for($i=0; $i<strlen($exp); $i++) {\n        if($exp[$i] == '(' || $exp[$i] == '{' || $exp[$i] == '[') {\n            array_push($stack, $exp[$i]);\n        } else if($exp[$i] == ')' || $exp[$i] == '}' || $exp[$i] == ']') {\n            if(empty($stack)) {\n                return false;\n            }\n            $top = array_pop($stack);\n            if($top == '(' && $exp[$i] != ')') {\n                return false;\n            } else if($top == '{' && $exp[$i] != '}') {\n                return false;\n            } else if($top == '[' && $exp[$i] != ']') {\n                return false;\n            }\n        }\n    }\n    if(empty($stack)) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n$exp = \"[()]{}{[()()]()}\";\necho check_expression($exp) ? \"Balanced\" : \"Not Balanced\";\necho \"\\n\";\n\n$exp = \"[(])\";\necho check_expression($exp) ? \"Balanced\" : \"Not Balanced\";\necho \"\\n\";",
    "    $stack = new SplStack();\n    $len = strlen($exp);\n    for ($i = 0; $i < $len; $i++) {\n        if ($exp[$i] == '(' || $exp[$i] == '{' || $exp[$i] == '[') {\n            $stack->push($exp[$i]);\n        } elseif ($exp[$i] == ')' || $exp[$i] == '}' || $exp[$i] == ']') {\n            if ($stack->isEmpty()) {\n                return false;\n            }\n            $top = $stack->pop();\n            if ($exp[$i] == ')' && $top != '(') {\n                return false;\n            } elseif ($exp[$i] == '}' && $top != '{') {\n                return false;\n            } elseif ($exp[$i] == ']' && $top != '[') {\n                return false;\n            }\n        }\n    }\n    if ($stack->isEmpty()) {\n        return true;\n    }\n    return false;\n}\n\n$exp = \"[()]{}{[()()]()}\";\n$exp = \"[(])\";\necho check_expression($exp) ? \"Balanced\" : \"Not Balanced\";",
    "    $stack = [];\n    $open = ['(', '{', '['];\n    $close = [')', '}', ']'];\n    $len = strlen($exp);\n    for($i=0; $i<$len; $i++) {\n        if(in_array($exp[$i], $open)) {\n            array_push($stack, $exp[$i]);\n        }\n        else if(in_array($exp[$i], $close)) {\n            $open_index = array_search($exp[$i], $close);\n            $open_bracket = $open[$open_index];\n            if(end($stack) == $open_bracket) {\n                array_pop($stack);\n            }\n            else {\n                return false;\n            }\n        }\n    }\n    if(empty($stack)) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\n\n$exp = '{()}[]';\necho check_expression($exp);",
    "    $stack = [];\n    $open = ['{', '(', '['];\n    $close = ['}', ')', ']'];\n    for ($i = 0; $i < strlen($exp); $i++) {\n        if (in_array($exp[$i], $open)) {\n            array_push($stack, $exp[$i]);\n        } elseif (in_array($exp[$i], $close)) {\n            $index = array_search($exp[$i], $close);\n            if (array_pop($stack) != $open[$index]) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\n$exp = \"{()}[]\";\necho check_expression($exp);",
    "    $stack = [];\n    $open = ['{', '[', '('];\n    $close = ['}', ']', ')'];\n    for ($i = 0; $i < strlen($exp); $i++) {\n        if (in_array($exp[$i], $open)) {\n            array_push($stack, $exp[$i]);\n        } else if (in_array($exp[$i], $close)) {\n            $last = array_pop($stack);\n            if ($open[array_search($exp[$i], $close)] != $last) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\necho check_expression('{[()]}') ? 'true' : 'false';\necho PHP_EOL;\necho check_expression('{[(])}') ? 'true' : 'false';\necho PHP_EOL;\necho check_expression('{{[[(())]]}}') ? 'true' : 'false';\necho PHP_EOL;",
    "    $stack = array();\n    $exp_arr = str_split($exp);\n    foreach ($exp_arr as $char) {\n        if ($char == '(' || $char == '{' || $char == '[') {\n            array_push($stack, $char);\n        } elseif ($char == ')' || $char == '}' || $char == ']') {\n            if (empty($stack)) {\n                return false;\n            }\n            $top = array_pop($stack);\n            if ($top == '(' && $char == ')') {\n                continue;\n            } elseif ($top == '{' && $char == '}') {\n                continue;\n            } elseif ($top == '[' && $char == ']') {\n                continue;\n            } else {\n                return false;\n            }\n        }\n    }\n    if (empty($stack)) {\n        return true;\n    }\n    return false;\n}\n\n$exp = '{()}[]';\necho check_expression($exp);",
    "    $stack = [];\n    $opening_brackets = ['{', '[', '('];\n    $closing_brackets = ['}', ']', ')'];\n    for ($i = 0; $i < strlen($exp); $i++) {\n        if (in_array($exp[$i], $opening_brackets)) {\n            array_push($stack, $exp[$i]);\n        } else if (in_array($exp[$i], $closing_brackets)) {\n            $last_element = array_pop($stack);\n            if ($last_element == '{' && $exp[$i] != '}') {\n                return false;\n            } else if ($last_element == '[' && $exp[$i] != ']') {\n                return false;\n            } else if ($last_element == '(' && $exp[$i] != ')') {\n                return false;\n            }\n        }\n    }\n    if (count($stack) == 0) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n$exp = \"{()}[]\";\necho check_expression($exp) ? \"Balanced\" : \"Not Balanced\";",
    "    $stack = [];\n    for ($i = 0; $i < strlen($exp); $i++) {\n        if ($exp[$i] == '(' || $exp[$i] == '{' || $exp[$i] == '[') {\n            array_push($stack, $exp[$i]);\n        } else if ($exp[$i] == ')' || $exp[$i] == '}' || $exp[$i] == ']') {\n            if (empty($stack)) {\n                return false;\n            }\n            $top = array_pop($stack);\n            if ($top == '(' && $exp[$i] != ')') {\n                return false;\n            }\n            if ($top == '{' && $exp[$i] != '}') {\n                return false;\n            }\n            if ($top == '[' && $exp[$i] != ']') {\n                return false;\n            }\n        }\n    }\n    if (empty($stack)) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n$exp = \"{()}[]\";\n$result = check_expression($exp);\nif ($result) {\n    echo \"Balanced\";\n} else {\n    echo \"Not Balanced\";\n}",
    "\t$stack = array();\n\t$open = array('(', '{', '[');\n\t$close = array(')', '}', ']');\n\t$len = strlen($exp);\n\tfor ($i = 0; $i < $len; $i++) {\n\t\tif (in_array($exp[$i], $open)) {\n\t\t\tarray_push($stack, $exp[$i]);\n\t\t} else if (in_array($exp[$i], $close)) {\n\t\t\t$index = array_search($exp[$i], $close);\n\t\t\tif (array_pop($stack) != $open[$index]) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\n\n$exp = \"{{([][])}()}\";\nif (check_expression($exp)) {\n\techo \"Balanced\";\n} else {\n\techo \"Not Balanced\";\n}",
    "\t$stack = array();\n\t$open = array('(', '{', '[');\n\t$close = array(')', '}', ']');\n\tfor ($i = 0; $i < strlen($exp); $i++) {\n\t\tif (in_array($exp[$i], $open)) {\n\t\t\tarray_push($stack, $exp[$i]);\n\t\t} else if (in_array($exp[$i], $close)) {\n\t\t\t$open_index = array_search($stack[count($stack) - 1], $open);\n\t\t\t$close_index = array_search($exp[$i], $close);\n\t\t\tif ($open_index == $close_index) {\n\t\t\t\tarray_pop($stack);\n\t\t\t} else {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\tif (count($stack) == 0) {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t}\n}\n\n$exp = \"{{()}}\";\necho check_expression($exp);",
    "    $stack = [];\n    $open = ['{', '[', '('];\n    $close = ['}', ']', ')'];\n    $len = strlen($exp);\n    for ($i = 0; $i < $len; $i++) {\n        if (in_array($exp[$i], $open)) {\n            array_push($stack, $exp[$i]);\n        } else if (in_array($exp[$i], $close)) {\n            if (count($stack) == 0) {\n                return false;\n            }\n            $top = array_pop($stack);\n            if ($open[array_search($exp[$i], $close)] != $top) {\n                return false;\n            }\n        }\n    }\n    if (count($stack) == 0) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n$exp = \"{()}[]\";\n$exp1 = \"{()}[\";\n$exp2 = \"{()}[]]\";\n$exp3 = \"{()}[]]{\";\n$exp4 = \"{()}[]]{}\";\n$exp5 = \"{()}[]]{}{\";\n$exp6 = \"{()}[]]{}{}\";\n$exp7 = \"{()}[]]{}{}{\";\n$exp8 = \"{()}[]]{}{}{}\";\n$exp9 = \"{()}[]]{}{}{}{\";\n$exp10 = \"{()}[]]{}{}{}{}\";\n$exp11 = \"{()}[]]{}{}{}{}{\";\n$exp12 = \"{()}[]]{}{}{}{}{}\";\n$exp13 = \"{()}[]]{}{}{}{}{}{\";\n$exp14 = \"{()}[]]{}{}{}{}{}{}\";\n$exp15 = \"{()}[]]{}{}{}{}{}{}{\";\n$exp16 = \"{()}[]]{}{}{}{}{}{}{}\";\n$exp17 = \"{()}[]]{}{}{}{}{}{}{}{\";\n$exp18 = \"{()}[]]{}{}{}{}{}{}{}{}\";\n$exp19 = \"{()",
    "    $stack = [];\n    $len = strlen($exp);\n    for ($i = 0; $i < $len; $i++) {\n        if ($exp[$i] == '(') {\n            array_push($stack, $exp[$i]);\n        } else if ($exp[$i] == ')') {\n            if (count($stack) == 0) {\n                return false;\n            }\n            array_pop($stack);\n        }\n    }\n    if (count($stack) == 0) {\n        return true;\n    }\n    return false;\n}\n\n$exp = \"((a+b))\";\necho check_expression($exp) ? \"Balanced\" : \"Not Balanced\";\necho PHP_EOL;\n$exp = \"(a+b)\";\necho check_expression($exp) ? \"Balanced\" : \"Not Balanced\";\necho PHP_EOL;\n$exp = \"(a+b))\";\necho check_expression($exp) ? \"Balanced\" : \"Not Balanced\";\necho PHP_EOL;\n$exp = \"((a+b)\";\necho check_expression($exp) ? \"Balanced\" : \"Not Balanced\";\necho PHP_EOL;\n$exp = \"((a+b)\";\necho check_expression($exp) ? \"Balanced\" : \"Not Balanced\";\necho PHP_EOL;\n$exp = \"((a+b)\";\necho check_expression($exp) ? \"Balanced\" : \"Not Balanced\";\necho PHP_EOL;",
    "    $stack = array();\n    $open = array('(', '{', '[');\n    $close = array(')', '}', ']');\n    for ($i = 0; $i < strlen($exp); $i++) {\n        if (in_array($exp[$i], $open)) {\n            array_push($stack, $exp[$i]);\n        } else if (in_array($exp[$i], $close)) {\n            $index = array_search($exp[$i], $close);\n            if (empty($stack) || $stack[count($stack) - 1] != $open[$index]) {\n                return false;\n            }\n            array_pop($stack);\n        }\n    }\n    return empty($stack);\n}\n\n$exp = \"([{}])\";\necho check_expression($exp) ? \"Balanced\" : \"Not Balanced\";",
    "    $stack = [];\n    $open_brackets = ['(', '{', '['];\n    $close_brackets = [')', '}', ']'];\n    for ($i = 0; $i < strlen($exp); $i++) {\n        if (in_array($exp[$i], $open_brackets)) {\n            array_push($stack, $exp[$i]);\n        } else if (in_array($exp[$i], $close_brackets)) {\n            $open_bracket = array_pop($stack);\n            if ($open_bracket == '(' && $exp[$i] != ')') {\n                return false;\n            } else if ($open_bracket == '{' && $exp[$i] != '}') {\n                return false;\n            } else if ($open_bracket == '[' && $exp[$i] != ']') {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\n$exp = \"{()}[]\";\necho check_expression($exp);",
    "    $stack = [];\n    for ($i=0; $i < strlen($exp); $i++) { \n        if ($exp[$i] == '(' || $exp[$i] == '{' || $exp[$i] == '[') {\n            array_push($stack, $exp[$i]);\n        } else {\n            if (empty($stack)) {\n                return false;\n            }\n            $top = array_pop($stack);\n            if ($top == '(' && $exp[$i] != ')') {\n                return false;\n            }\n            if ($top == '{' && $exp[$i] != '}') {\n                return false;\n            }\n            if ($top == '[' && $exp[$i] != ']') {\n                return false;\n            }\n        }\n    }\n    if (empty($stack)) {\n        return true;\n    }\n    return false;\n}\n\n$exp = \"[()]{}{[()()]()}\";\nvar_dump(check_expression($exp));\n\n$exp = \"[(])\";\nvar_dump(check_expression($exp));",
    "    $stack = array();\n    $len = strlen($exp);\n    for ($i = 0; $i < $len; $i++) {\n        if ($exp[$i] == '(' || $exp[$i] == '{' || $exp[$i] == '[') {\n            array_push($stack, $exp[$i]);\n        } else {\n            if (empty($stack)) {\n                return false;\n            }\n            $top = array_pop($stack);\n            if ($top == '(' && $exp[$i] != ')') {\n                return false;\n            }\n            if ($top == '{' && $exp[$i] != '}') {\n                return false;\n            }\n            if ($top == '[' && $exp[$i] != ']') {\n                return false;\n            }\n        }\n    }\n    if (empty($stack)) {\n        return true;\n    }\n    return false;\n}\n\n$exp = \"[()]{}{[()()]()}\";\nif (check_expression($exp)) {\n    echo \"Balanced\";\n} else {\n    echo \"Not Balanced\";\n}",
    "    $stack = [];\n    $exp_arr = str_split($exp);\n    $open_brackets = ['{', '[', '('];\n    $close_brackets = ['}', ']', ')'];\n    foreach ($exp_arr as $char) {\n        if (in_array($char, $open_brackets)) {\n            array_push($stack, $char);\n        } elseif (in_array($char, $close_brackets)) {\n            $last_open_bracket = array_pop($stack);\n            if ($last_open_bracket == '{' && $char == '}') {\n                continue;\n            } elseif ($last_open_bracket == '[' && $char == ']') {\n                continue;\n            } elseif ($last_open_bracket == '(' && $char == ')') {\n                continue;\n            } else {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\n$exp = '{()}[]';\nvar_dump(check_expression($exp));",
    "    $stack = [];\n    $open = ['(', '{', '['];\n    $close = [')', '}', ']'];\n    for($i = 0; $i < strlen($exp); $i++) {\n        if(in_array($exp[$i], $open)) {\n            array_push($stack, $exp[$i]);\n        } else if(in_array($exp[$i], $close)) {\n            if(empty($stack)) {\n                return false;\n            }\n            $top = array_pop($stack);\n            if(!(($exp[$i] == ')' && $top == '(') || ($exp[$i] == '}' && $top == '{') || ($exp[$i] == ']' && $top == '['))) {\n                return false;\n            }\n        }\n    }\n    if(!empty($stack)) {\n        return false;\n    }\n    return true;\n}\n\n$exp = '{()}[]';\nif(check_expression($exp)) {\n    echo \"Balanced\";\n} else {\n    echo \"Not Balanced\";\n}",
    "    $stack = array();\n    $exp_arr = str_split($exp);\n    foreach($exp_arr as $char) {\n        if($char == '(') {\n            array_push($stack, $char);\n        } else if($char == ')') {\n            if(empty($stack)) {\n                return false;\n            } else {\n                array_pop($stack);\n            }\n        }\n    }\n    if(empty($stack)) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n$exp = \"((a+b))\";\necho check_expression($exp);",
    "    $stack = [];\n    $len = strlen($exp);\n    for ($i = 0; $i < $len; $i++) {\n        if ($exp[$i] == '(' || $exp[$i] == '{' || $exp[$i] == '[') {\n            array_push($stack, $exp[$i]);\n        } else {\n            if (empty($stack)) {\n                return false;\n            }\n            $top = array_pop($stack);\n            if ($exp[$i] == ')' && $top != '(') {\n                return false;\n            }\n            if ($exp[$i] == '}' && $top != '{') {\n                return false;\n            }\n            if ($exp[$i] == ']' && $top != '[') {\n                return false;\n            }\n        }\n    }\n    if (empty($stack)) {\n        return true;\n    }\n    return false;\n}\n\n$exp = \"{()}[]\";\nif (check_expression($exp)) {\n    echo \"Balanced\";\n} else {\n    echo \"Not Balanced\";\n}",
    "    $stack = array();\n    $len = strlen($exp);\n    for ($i = 0; $i < $len; $i++) {\n        if ($exp[$i] == '(' || $exp[$i] == '[' || $exp[$i] == '{') {\n            array_push($stack, $exp[$i]);\n        } else {\n            if (empty($stack)) {\n                return false;\n            }\n            $top = array_pop($stack);\n            if ($top == '(' && $exp[$i] != ')') {\n                return false;\n            }\n            if ($top == '[' && $exp[$i] != ']') {\n                return false;\n            }\n            if ($top == '{' && $exp[$i] != '}') {\n                return false;\n            }\n        }\n    }\n    if (empty($stack)) {\n        return true;\n    }\n    return false;\n}\n\n$exp = \"[()]{}{[()()]()}\";\nif (check_expression($exp)) {\n    echo \"Balanced\";\n} else {\n    echo \"Not Balanced\";\n}",
    "    $stack = [];\n    $open = ['{', '[', '('];\n    $close = ['}', ']', ')'];\n    $len = strlen($exp);\n    for ($i = 0; $i < $len; $i++) {\n        if (in_array($exp[$i], $open)) {\n            array_push($stack, $exp[$i]);\n        } else if (in_array($exp[$i], $close)) {\n            $last = array_pop($stack);\n            if ($open[array_search($last, $open)] != $exp[$i]) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\n$exp = '{()}[]';\nvar_dump(check_expression($exp));\n$exp = '{(})';\nvar_dump(check_expression($exp));",
    "    $stack = [];\n    $open = ['(', '{', '['];\n    $close = [')', '}', ']'];\n    for ($i = 0; $i < strlen($exp); $i++) {\n        $char = $exp[$i];\n        if (in_array($char, $open)) {\n            array_push($stack, $char);\n        } else if (in_array($char, $close)) {\n            $open_char = array_pop($stack);\n            if ($open_char == '(' && $char != ')') {\n                return false;\n            } else if ($open_char == '{' && $char != '}') {\n                return false;\n            } else if ($open_char == '[' && $char != ']') {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\n$exp = '{()}[]';\necho check_expression($exp);",
    "\t$stack = [];\n\t$open = ['{', '[', '('];\n\t$close = ['}', ']', ')'];\n\tfor ($i = 0; $i < strlen($exp); $i++) {\n\t\tif (in_array($exp[$i], $open)) {\n\t\t\tarray_push($stack, $exp[$i]);\n\t\t} else if (in_array($exp[$i], $close)) {\n\t\t\tif (empty($stack)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t$top = array_pop($stack);\n\t\t\tif ($open[array_search($top, $open)] != $close[array_search($exp[$i], $close)]) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\tif (empty($stack)) {\n\t\treturn true;\n\t}\n\treturn false;\n}\n\n$exp = \"{()}[]\";\necho check_expression($exp);",
    "    $stack = [];\n    $open = ['{', '[', '('];\n    $close = ['}', ']', ')'];\n    for ($i = 0; $i < strlen($exp); $i++) {\n        if (in_array($exp[$i], $open)) {\n            array_push($stack, $exp[$i]);\n        } else if (in_array($exp[$i], $close)) {\n            $last = array_pop($stack);\n            if ($open[array_search($exp[$i], $close)] != $last) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\nvar_dump(check_expression('{([])}'));\nvar_dump(check_expression('{([])}['));",
    "    $stack = [];\n    $open = ['(', '{', '['];\n    $close = [')', '}', ']'];\n    $len = strlen($exp);\n    for ($i = 0; $i < $len; $i++) {\n        if (in_array($exp[$i], $open)) {\n            array_push($stack, $exp[$i]);\n        } else if (in_array($exp[$i], $close)) {\n            $pop = array_pop($stack);\n            $index = array_search($pop, $open);\n            if ($close[$index] != $exp[$i]) {\n                return false;\n            }\n        }\n    }\n    if (count($stack) > 0) {\n        return false;\n    }\n    return true;\n}\n\n$exp = \"({[]})\";\nif (check_expression($exp)) {\n    echo \"Balanced\";\n} else {\n    echo \"Not Balanced\";\n}",
    "    $stack = [];\n    $open_brackets = ['(', '{', '['];\n    $close_brackets = [')', '}', ']'];\n    for($i = 0; $i < strlen($exp); $i++) {\n        if(in_array($exp[$i], $open_brackets)) {\n            array_push($stack, $exp[$i]);\n        } else if(in_array($exp[$i], $close_brackets)) {\n            $open_bracket = array_pop($stack);\n            if($open_bracket == '(' && $exp[$i] != ')') {\n                return false;\n            } else if($open_bracket == '{' && $exp[$i] != '}') {\n                return false;\n            } else if($open_bracket == '[' && $exp[$i] != ']') {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\n$exp = '{()}[]';\necho check_expression($exp) ? 'Balanced' : 'Not Balanced';",
    "    $stack = [];\n    $open = ['(', '{', '['];\n    $close = [')', '}', ']'];\n    for ($i = 0; $i < strlen($exp); $i++) {\n        if (in_array($exp[$i], $open)) {\n            array_push($stack, $exp[$i]);\n        } else if (in_array($exp[$i], $close)) {\n            $last = array_pop($stack);\n            if ($last == '(' && $exp[$i] != ')') {\n                return false;\n            } else if ($last == '{' && $exp[$i] != '}') {\n                return false;\n            } else if ($last == '[' && $exp[$i] != ']') {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\n$exp = '{()}[]';\necho check_expression($exp);",
    "    $stack = [];\n    $open = ['{', '(', '['];\n    $close = ['}', ')', ']'];\n    for ($i = 0; $i < strlen($exp); $i++) {\n        if (in_array($exp[$i], $open)) {\n            array_push($stack, $exp[$i]);\n        } else if (in_array($exp[$i], $close)) {\n            $last = array_pop($stack);\n            if ($open[array_search($exp[$i], $close)] != $last) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\n$exp = \"{()}[]\";\nvar_dump(check_expression($exp));\n$exp = \"{()}[\";\nvar_dump(check_expression($exp));\n$exp = \"{()}[]]\";\nvar_dump(check_expression($exp));",
    "    $stack = [];\n    $open = ['{', '[', '('];\n    $close = ['}', ']', ')'];\n    for ($i = 0; $i < strlen($exp); $i++) {\n        if (in_array($exp[$i], $open)) {\n            array_push($stack, $exp[$i]);\n        } else if (in_array($exp[$i], $close)) {\n            $last = array_pop($stack);\n            if ($last == '{' && $exp[$i] != '}') {\n                return false;\n            } else if ($last == '[' && $exp[$i] != ']') {\n                return false;\n            } else if ($last == '(' && $exp[$i] != ')') {\n                return false;\n            }\n        }\n    }\n    if (count($stack) > 0) {\n        return false;\n    }\n    return true;\n}\n\n$exp = '{()}[]';\nif (check_expression($exp)) {\n    echo \"Balanced\";\n} else {\n    echo \"Not Balanced\";\n}",
    "    $stack = [];\n    $open = ['(', '{', '['];\n    $close = [')', '}', ']'];\n    $len = strlen($exp);\n    for ($i = 0; $i < $len; $i++) {\n        if (in_array($exp[$i], $open)) {\n            array_push($stack, $exp[$i]);\n        } else if (in_array($exp[$i], $close)) {\n            if (count($stack) == 0) {\n                return false;\n            }\n            $top = array_pop($stack);\n            if ($open[array_search($top, $open)] != $close[array_search($exp[$i], $close)]) {\n                return false;\n            }\n        }\n    }\n    if (count($stack) == 0) {\n        return true;\n    }\n    return false;\n}\n\n$exp = \"{()}[]\";\nif (check_expression($exp)) {\n    echo \"Balanced\";\n} else {\n    echo \"Not Balanced\";\n}",
    "    $stack = [];\n    $len = strlen($exp);\n    for ($i = 0; $i < $len; $i++) {\n        if ($exp[$i] == '(' || $exp[$i] == '{' || $exp[$i] == '[') {\n            array_push($stack, $exp[$i]);\n        } else if ($exp[$i] == ')' || $exp[$i] == '}' || $exp[$i] == ']') {\n            if (empty($stack)) {\n                return false;\n            }\n            $top = array_pop($stack);\n            if (!((($top == '(') && ($exp[$i] == ')')) || (($top == '{') && ($exp[$i] == '}')) || (($top == '[') && ($exp[$i] == ']')))) {\n                return false;\n            }\n        }\n    }\n    if (!empty($stack)) {\n        return false;\n    }\n    return true;\n}\n\n$exp = \"{()}[]\";\nif (check_expression($exp)) {\n    echo \"Balanced\";\n} else {\n    echo \"Not Balanced\";\n}",
    "    $stack = array();\n    $open = array('(', '{', '[');\n    $close = array(')', '}', ']');\n    $len = strlen($exp);\n    for ($i = 0; $i < $len; $i++) {\n        if (in_array($exp[$i], $open)) {\n            array_push($stack, $exp[$i]);\n        } else if (in_array($exp[$i], $close)) {\n            $pop = array_pop($stack);\n            if ($pop == '(' && $exp[$i] != ')') {\n                return false;\n            } else if ($pop == '{' && $exp[$i] != '}') {\n                return false;\n            } else if ($pop == '[' && $exp[$i] != ']') {\n                return false;\n            }\n        }\n    }\n    if (count($stack) > 0) {\n        return false;\n    }\n    return true;\n}\n\n$exp = \"{()}[]\";\nif (check_expression($exp)) {\n    echo \"Balanced\";\n} else {\n    echo \"Not Balanced\";\n}",
    "    $stack = array();\n    $open = array('(', '{', '[');\n    $close = array(')', '}', ']');\n    for ($i = 0; $i < strlen($exp); $i++) {\n        if (in_array($exp[$i], $open)) {\n            array_push($stack, $exp[$i]);\n        } elseif (in_array($exp[$i], $close)) {\n            if (count($stack) == 0) {\n                return false;\n            }\n            $pop = array_pop($stack);\n            if ($open[array_search($pop, $open)] != $exp[$i]) {\n                return false;\n            }\n        }\n    }\n    if (count($stack) == 0) {\n        return true;\n    }\n    return false;\n}\n\n$exp = \"({[]})\";\necho check_expression($exp);",
    "    $stack = array();\n    $exp_len = strlen($exp);\n    for ($i = 0; $i < $exp_len; $i++) {\n        if ($exp[$i] == '(') {\n            array_push($stack, $exp[$i]);\n        } else if ($exp[$i] == ')') {\n            if (empty($stack)) {\n                return false;\n            }\n            array_pop($stack);\n        }\n    }\n    if (empty($stack)) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n$exp = \"((a+b))\";\n$exp1 = \"(a+b)\";\n$exp2 = \"(a+b))\";\n$exp3 = \"((a+b)\";\n$exp4 = \"((a+b))*(c+d)\";\n$exp5 = \"((a+b))*(c+d))\";\n\necho check_expression($exp) ? \"Balanced\" : \"Not Balanced\";\necho \"\\n\";\necho check_expression($exp1) ? \"Balanced\" : \"Not Balanced\";\necho \"\\n\";\necho check_expression($exp2) ? \"Balanced\" : \"Not Balanced\";\necho \"\\n\";\necho check_expression($exp3) ? \"Balanced\" : \"Not Balanced\";\necho \"\\n\";\necho check_expression($exp4) ? \"Balanced\" : \"Not Balanced\";\necho \"\\n\";\necho check_expression($exp5) ? \"Balanced\" : \"Not Balanced\";\necho \"\\n\";",
    "    $stack = [];\n    $open = ['{', '(', '['];\n    $close = ['}', ')', ']'];\n    for($i = 0; $i < strlen($exp); $i++) {\n        if(in_array($exp[$i], $open)) {\n            array_push($stack, $exp[$i]);\n        } else if(in_array($exp[$i], $close)) {\n            $index = array_search($exp[$i], $close);\n            if(empty($stack) || $stack[count($stack) - 1] != $open[$index]) {\n                return false;\n            } else {\n                array_pop($stack);\n            }\n        }\n    }\n    return empty($stack);\n}\n\necho check_expression(\"{()}[]\") ? \"Balanced\" : \"Not Balanced\";",
    "    $stack = [];\n    $open = ['{', '[', '('];\n    $close = ['}', ']', ')'];\n\n    for ($i = 0; $i < strlen($exp); $i++) {\n        if (in_array($exp[$i], $open)) {\n            array_push($stack, $exp[$i]);\n        } else if (in_array($exp[$i], $close)) {\n            $index = array_search($exp[$i], $close);\n            if (empty($stack) || $stack[count($stack) - 1] != $open[$index]) {\n                return false;\n            }\n            array_pop($stack);\n        }\n    }\n    return empty($stack);\n}\n\n$exp = \"{()}[]\";\nvar_dump(check_expression($exp));\n\n$exp = \"{(})\";\nvar_dump(check_expression($exp));",
    "    $stack = [];\n    $open = ['(', '{', '['];\n    $close = [')', '}', ']'];\n    for ($i = 0; $i < strlen($exp); $i++) {\n        if (in_array($exp[$i], $open)) {\n            array_push($stack, $exp[$i]);\n        } elseif (in_array($exp[$i], $close)) {\n            if (count($stack) == 0) {\n                return false;\n            }\n            $top = array_pop($stack);\n            if ($open[array_search($exp[$i], $close)] != $top) {\n                return false;\n            }\n        }\n    }\n    if (count($stack) == 0) {\n        return true;\n    }\n    return false;\n}\n\n$exp = '{()}[]';\necho check_expression($exp) ? 'Balanced' : 'Not Balanced';\necho PHP_EOL;\n$exp = '{(})';\necho check_expression($exp) ? 'Balanced' : 'Not Balanced';\necho PHP_EOL;\n$exp = '{([])}';\necho check_expression($exp) ? 'Balanced' : 'Not Balanced';\necho PHP_EOL;\n$exp = '{([)]}';\necho check_expression($exp) ? 'Balanced' : 'Not Balanced';\necho PHP_EOL;\n$exp = '{([])}()';\necho check_expression($exp) ? 'Balanced' : 'Not Balanced';\necho PHP_EOL;\n$exp = '{([])}(()';\necho check_expression($exp) ? 'Balanced' : 'Not Balanced';\necho PHP_EOL;",
    "\t$stack = [];\n\tfor ($i = 0; $i < strlen($exp); $i++) {\n\t\tif ($exp[$i] == '(' || $exp[$i] == '{' || $exp[$i] == '[') {\n\t\t\tarray_push($stack, $exp[$i]);\n\t\t}\n\t\telse if ($exp[$i] == ')' || $exp[$i] == '}' || $exp[$i] == ']') {\n\t\t\tif (empty($stack)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse {\n\t\t\t\t$top = array_pop($stack);\n\t\t\t\tif ($exp[$i] == ')' && $top != '(') {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\tif ($exp[$i] == '}' && $top != '{') {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\tif ($exp[$i] == ']' && $top != '[') {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tif (empty($stack)) {\n\t\treturn true;\n\t}\n\telse {\n\t\treturn false;\n\t}\n}\n\n$exp = \"{{([])}}\";\necho check_expression($exp);",
    "    $stack = array();\n    $exp_arr = str_split($exp);\n    foreach($exp_arr as $char) {\n        if($char == '(' || $char == '{' || $char == '[') {\n            array_push($stack, $char);\n        } else {\n            $last_char = array_pop($stack);\n            if($last_char == '(' && $char != ')') {\n                return false;\n            } else if($last_char == '{' && $char != '}') {\n                return false;\n            } else if($last_char == '[' && $char != ']') {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\n$exp = '{()}[]';\necho check_expression($exp);",
    "    $stack = [];\n    $open = ['(', '{', '['];\n    $close = [')', '}', ']'];\n    $len = strlen($exp);\n    for ($i = 0; $i < $len; $i++) {\n        $char = $exp[$i];\n        if (in_array($char, $open)) {\n            array_push($stack, $char);\n        } else if (in_array($char, $close)) {\n            $last = array_pop($stack);\n            if ($last == null) {\n                return false;\n            }\n            $open_index = array_search($last, $open);\n            $close_index = array_search($char, $close);\n            if ($open_index != $close_index) {\n                return false;\n            }\n        }\n    }\n    return count($stack) == 0;\n}\n\n$exp = \"{()}[]\";\nvar_dump(check_expression($exp));",
    "    $stack = [];\n    $len = strlen($exp);\n    for ($i = 0; $i < $len; $i++) {\n        if ($exp[$i] == '(' || $exp[$i] == '{' || $exp[$i] == '[') {\n            array_push($stack, $exp[$i]);\n        } else if ($exp[$i] == ')' || $exp[$i] == '}' || $exp[$i] == ']') {\n            if (empty($stack)) {\n                return false;\n            }\n            $top = array_pop($stack);\n            if ($exp[$i] == ')' && $top != '(') {\n                return false;\n            } else if ($exp[$i] == '}' && $top != '{') {\n                return false;\n            } else if ($exp[$i] == ']' && $top != '[') {\n                return false;\n            }\n        }\n    }\n    if (empty($stack)) {\n        return true;\n    }\n    return false;\n}\n\n$exp = \"{()}[]\";\nif (check_expression($exp)) {\n    echo \"Balanced\";\n} else {\n    echo \"Not Balanced\";\n}",
    "    $stack = array();\n    for ($i = 0; $i < strlen($exp); $i++) {\n        if ($exp[$i] == '(' || $exp[$i] == '{' || $exp[$i] == '[') {\n            array_push($stack, $exp[$i]);\n        } else {\n            if (empty($stack)) {\n                return false;\n            }\n            $top = array_pop($stack);\n            if ($exp[$i] == ')' && $top != '(') {\n                return false;\n            }\n            if ($exp[$i] == '}' && $top != '{') {\n                return false;\n            }\n            if ($exp[$i] == ']' && $top != '[') {\n                return false;\n            }\n        }\n    }\n    if (empty($stack)) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n$exp = \"{()}[]\";\nif (check_expression($exp)) {\n    echo \"Balanced\";\n} else {\n    echo \"Not Balanced\";\n}",
    "    $stack = [];\n    $open = ['(', '{', '['];\n    $close = [')', '}', ']'];\n    for ($i = 0; $i < strlen($exp); $i++) {\n        if (in_array($exp[$i], $open)) {\n            array_push($stack, $exp[$i]);\n        } else if (in_array($exp[$i], $close)) {\n            $last_open = array_pop($stack);\n            if ($open[array_search($last_open, $open)] != $close[array_search($exp[$i], $close)]) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\n$exp = '{()}[]';\nvar_dump(check_expression($exp));",
    "    $stack = new SplStack();\n    for ($i = 0; $i < strlen($exp); $i++) {\n        if ($exp[$i] == '(') {\n            $stack->push($exp[$i]);\n        } else if ($exp[$i] == ')') {\n            if ($stack->isEmpty()) {\n                return false;\n            }\n            $stack->pop();\n        }\n    }\n    return $stack->isEmpty();\n}\n\n$exp = \"((a+b)*(c-d))\";\necho check_expression($exp) ? \"Balanced\" : \"Not Balanced\";\necho \"\\n\";\n$exp = \"((a+b)*(c-d)))))\";\necho check_expression($exp) ? \"Balanced\" : \"Not Balanced\";\necho \"\\n\";\n$exp = \"((a+b)*(c-d)))\";\necho check_expression($exp) ? \"Balanced\" : \"Not Balanced\";\necho \"\\n\";",
    "    $stack = [];\n    $open = ['{', '(', '['];\n    $close = ['}', ')', ']'];\n    $len = strlen($exp);\n    for ($i = 0; $i < $len; $i++) {\n        if (in_array($exp[$i], $open)) {\n            array_push($stack, $exp[$i]);\n        } else if (in_array($exp[$i], $close)) {\n            if (empty($stack)) {\n                return false;\n            }\n            $top = array_pop($stack);\n            if ($open[array_search($top, $open)] != $close[array_search($exp[$i], $close)]) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\n$exp = \"{()}[]\";\nif (check_expression($exp)) {\n    echo \"Balanced\";\n} else {\n    echo \"Not Balanced\";\n}",
    "    $stack = array();\n    $len = strlen($exp);\n    for ($i = 0; $i < $len; $i++) {\n        if ($exp[$i] == '(') {\n            array_push($stack, $exp[$i]);\n        } else if ($exp[$i] == ')') {\n            if (empty($stack)) {\n                return false;\n            } else {\n                array_pop($stack);\n            }\n        }\n    }\n    if (empty($stack)) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n$exp = \"((a+b))\";\nif (check_expression($exp)) {\n    echo \"Balanced\";\n} else {\n    echo \"Not Balanced\";\n}",
    "    $stack = array();\n    $open = array('(', '{', '[');\n    $close = array(')', '}', ']');\n    for ($i = 0; $i < strlen($exp); $i++) {\n        if (in_array($exp[$i], $open)) {\n            array_push($stack, $exp[$i]);\n        } else if (in_array($exp[$i], $close)) {\n            $top = array_pop($stack);\n            if ($top == '(' && $exp[$i] != ')') {\n                return false;\n            } else if ($top == '{' && $exp[$i] != '}') {\n                return false;\n            } else if ($top == '[' && $exp[$i] != ']') {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\n$exp = '{([])}';\necho check_expression($exp) ? 'Balanced' : 'Not Balanced';",
    "    $stack = array();\n    $open = array('{', '(', '[');\n    $close = array('}', ')', ']');\n    for ($i = 0; $i < strlen($exp); $i++) {\n        if (in_array($exp[$i], $open)) {\n            array_push($stack, $exp[$i]);\n        } elseif (in_array($exp[$i], $close)) {\n            $pop = array_pop($stack);\n            if ($pop != $open[array_search($exp[$i], $close)]) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\n$exp = \"{()}[]\";\nif (check_expression($exp)) {\n    echo \"Balanced\";\n} else {\n    echo \"Not Balanced\";\n}",
    "    $stack = array();\n    $open = array('(', '{', '[');\n    $close = array(')', '}', ']');\n    $len = strlen($exp);\n    for ($i = 0; $i < $len; $i++) {\n        if (in_array($exp[$i], $open)) {\n            array_push($stack, $exp[$i]);\n        } elseif (in_array($exp[$i], $close)) {\n            $key = array_search($exp[$i], $close);\n            if (array_pop($stack) != $open[$key]) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\n$exp = \"({[]})\";\nif (check_expression($exp)) {\n    echo \"Balanced\";\n} else {\n    echo \"Not Balanced\";\n}",
    "    $stack = [];\n    $open = ['{', '[', '('];\n    $close = ['}', ']', ')'];\n    $len = strlen($exp);\n    for ($i = 0; $i < $len; $i++) {\n        if (in_array($exp[$i], $open)) {\n            array_push($stack, $exp[$i]);\n        } else if (in_array($exp[$i], $close)) {\n            if (count($stack) == 0) {\n                return false;\n            }\n            $top = array_pop($stack);\n            if ($open[array_search($top, $open)] != $close[array_search($exp[$i], $close)]) {\n                return false;\n            }\n        }\n    }\n    if (count($stack) > 0) {\n        return false;\n    }\n    return true;\n}\n\n$exp = '{()}[]';\necho check_expression($exp);",
    "    $stack = [];\n    $open = ['(', '{', '['];\n    $close = [')', '}', ']'];\n    for ($i = 0; $i < strlen($exp); $i++) {\n        if (in_array($exp[$i], $open)) {\n            array_push($stack, $exp[$i]);\n        } else if (in_array($exp[$i], $close)) {\n            $open_index = array_search($exp[$i], $close);\n            $open_char = $open[$open_index];\n            if (count($stack) == 0 || $stack[count($stack) - 1] != $open_char) {\n                return false;\n            } else {\n                array_pop($stack);\n            }\n        }\n    }\n    if (count($stack) == 0) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n$exp = '{()}[]';\necho check_expression($exp);",
    "\t$stack = [];\n\t$open = ['{', '[', '('];\n\t$close = ['}', ']', ')'];\n\t$len = strlen($exp);\n\tfor($i = 0; $i < $len; $i++) {\n\t\tif(in_array($exp[$i], $open)) {\n\t\t\tarray_push($stack, $exp[$i]);\n\t\t} else if(in_array($exp[$i], $close)) {\n\t\t\t$open_index = array_search($stack[count($stack) - 1], $open);\n\t\t\t$close_index = array_search($exp[$i], $close);\n\t\t\tif($open_index == $close_index) {\n\t\t\t\tarray_pop($stack);\n\t\t\t} else {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\tif(count($stack) == 0) {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t}\n}\n\n$exp = \"{()}[]\";\nif(check_expression($exp)) {\n\techo \"Balanced\";\n} else {\n\techo \"Not Balanced\";\n}",
    "    $stack = [];\n    $open_brackets = ['(', '{', '['];\n    $close_brackets = [')', '}', ']'];\n    for ($i = 0; $i < strlen($exp); $i++) {\n        if (in_array($exp[$i], $open_brackets)) {\n            array_push($stack, $exp[$i]);\n        } else if (in_array($exp[$i], $close_brackets)) {\n            $open_bracket = array_pop($stack);\n            $open_bracket_index = array_search($open_bracket, $open_brackets);\n            $close_bracket_index = array_search($exp[$i], $close_brackets);\n            if ($open_bracket_index != $close_bracket_index) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\n$exp = \"{{([])}}\";\nif (check_expression($exp)) {\n    echo \"Balanced\";\n} else {\n    echo \"Not Balanced\";\n}",
    "    $stack = array();\n    $exp_arr = str_split($exp);\n    foreach($exp_arr as $char) {\n        if($char == '(' || $char == '{' || $char == '[') {\n            array_push($stack, $char);\n        } else if($char == ')' || $char == '}' || $char == ']') {\n            if(empty($stack)) {\n                return false;\n            }\n            $top = array_pop($stack);\n            if($top == '(' && $char != ')') {\n                return false;\n            } else if($top == '{' && $char != '}') {\n                return false;\n            } else if($top == '[' && $char != ']') {\n                return false;\n            }\n        }\n    }\n    if(empty($stack)) {\n        return true;\n    }\n    return false;\n}\n\n$exp = '{()}[]';\necho check_expression($exp) ? 'Balanced' : 'Not Balanced';\necho \"\\n\";\n$exp = '{()}[';\necho check_expression($exp) ? 'Balanced' : 'Not Balanced';\necho \"\\n\";\n$exp = '{()}[]]';\necho check_expression($exp) ? 'Balanced' : 'Not Balanced';\necho \"\\n\";\n$exp = '{()}[]]';\necho check_expression($exp) ? 'Balanced' : 'Not Balanced';\necho \"\\n\";\n$exp = '{()}[]]';\necho check_expression($exp) ? 'Balanced' : 'Not Balanced';\necho \"\\n\";\n$exp = '{()}[]]';\necho check_expression($exp) ? 'Balanced' : 'Not Balanced';\necho \"\\n\";\n$exp = '{()}[]]';\necho check_expression($exp) ? 'Balanced' : 'Not Balanced';\necho \"\\n\";\n$exp = '{()}[]]';\necho check_expression($exp) ? 'Balanced' : 'Not Balanced';\necho \"\\n\";\n$exp = '{()}[]]';\necho check_expression($exp) ? '",
    "    $stack = [];\n    $open = ['(', '{', '['];\n    $close = [')', '}', ']'];\n    $len = strlen($exp);\n    for($i = 0; $i < $len; $i++) {\n        if(in_array($exp[$i], $open)) {\n            array_push($stack, $exp[$i]);\n        } else if(in_array($exp[$i], $close)) {\n            $index = array_search($exp[$i], $close);\n            if(array_pop($stack) != $open[$index]) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\n$exp = \"{()}[]\";\necho check_expression($exp);",
    "    $stack = [];\n    $open = ['{', '[', '('];\n    $close = ['}', ']', ')'];\n    $len = strlen($exp);\n    for ($i = 0; $i < $len; $i++) {\n        if (in_array($exp[$i], $open)) {\n            array_push($stack, $exp[$i]);\n        } elseif (in_array($exp[$i], $close)) {\n            $top = array_pop($stack);\n            if ($top == '{' && $exp[$i] != '}') {\n                return false;\n            } elseif ($top == '[' && $exp[$i] != ']') {\n                return false;\n            } elseif ($top == '(' && $exp[$i] != ')') {\n                return false;\n            }\n        }\n    }\n    if (count($stack) > 0) {\n        return false;\n    }\n    return true;\n}\n\n$exp = \"{()}[]\";\nvar_dump(check_expression($exp));",
    "    $stack = [];\n    $open = ['(', '{', '['];\n    $close = [')', '}', ']'];\n    for($i = 0; $i < strlen($exp); $i++) {\n        if(in_array($exp[$i], $open)) {\n            array_push($stack, $exp[$i]);\n        } else if(in_array($exp[$i], $close)) {\n            $top = array_pop($stack);\n            if(!$top) {\n                return false;\n            }\n            if($open[array_search($top, $open)] != $exp[$i]) {\n                return false;\n            }\n        }\n    }\n    if(count($stack) > 0) {\n        return false;\n    }\n    return true;\n}\n\n$exp = \"({[]})\";\necho check_expression($exp);",
    "    $stack = [];\n    $open = ['(', '{', '['];\n    $close = [')', '}', ']'];\n    for ($i = 0; $i < strlen($exp); $i++) {\n        if (in_array($exp[$i], $open)) {\n            array_push($stack, $exp[$i]);\n        } else if (in_array($exp[$i], $close)) {\n            $index = array_search($exp[$i], $close);\n            if (empty($stack) || $stack[count($stack) - 1] != $open[$index]) {\n                return false;\n            } else {\n                array_pop($stack);\n            }\n        }\n    }\n    return empty($stack);\n}\n\necho check_expression('{([])}') ? 'Balanced' : 'Not Balanced';\necho \"\\n\";\necho check_expression('{([])}(') ? 'Balanced' : 'Not Balanced';\necho \"\\n\";\necho check_expression('{([])}()') ? 'Balanced' : 'Not Balanced';\necho \"\\n\";\necho check_expression('{([])}()(') ? 'Balanced' : 'Not Balanced';\necho \"\\n\";\necho check_expression('{([])}()()') ? 'Balanced' : 'Not Balanced';\necho \"\\n\";\necho check_expression('{([])}()()(') ? 'Balanced' : 'Not Balanced';\necho \"\\n\";\necho check_expression('{([])}()()()') ? 'Balanced' : 'Not Balanced';\necho \"\\n\";\necho check_expression('{([])}()()()(') ? 'Balanced' : 'Not Balanced';\necho \"\\n\";\necho check_expression('{([])}()()()()') ? 'Balanced' : 'Not Balanced';\necho \"\\n\";\necho check_expression('{([])}()()()()(') ? 'Balanced' : 'Not Balanced';\necho \"\\n\";\necho check_expression('{([])}()()()()()') ? 'Balanced' : 'Not Balanced';\necho \"\\n\";\necho check_expression('{([])}()",
    "    $stack = [];\n    for ($i = 0; $i < strlen($exp); $i++) {\n        if ($exp[$i] == '(') {\n            array_push($stack, $exp[$i]);\n        } else if ($exp[$i] == ')') {\n            if (count($stack) == 0) {\n                return false;\n            }\n            array_pop($stack);\n        }\n    }\n    if (count($stack) == 0) {\n        return true;\n    }\n    return false;\n}\n\n$exp = \"((a+b))\";\necho check_expression($exp);",
    "    $stack = array();\n    $open = array('{', '[', '(');\n    $close = array('}', ']', ')');\n    $len = strlen($exp);\n    for ($i = 0; $i < $len; $i++) {\n        if (in_array($exp[$i], $open)) {\n            array_push($stack, $exp[$i]);\n        } else if (in_array($exp[$i], $close)) {\n            if (empty($stack)) {\n                return false;\n            }\n            $top = array_pop($stack);\n            if ($top == '{' && $exp[$i] != '}') {\n                return false;\n            } else if ($top == '[' && $exp[$i] != ']') {\n                return false;\n            } else if ($top == '(' && $exp[$i] != ')') {\n                return false;\n            }\n        }\n    }\n    if (empty($stack)) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n$exp = \"{()}[]\";\nif (check_expression($exp)) {\n    echo \"Balanced\";\n} else {\n    echo \"Not Balanced\";\n}",
    "    $stack = [];\n    $open = ['(', '{', '['];\n    $close = [')', '}', ']'];\n    $len = strlen($exp);\n    for ($i = 0; $i < $len; $i++) {\n        if (in_array($exp[$i], $open)) {\n            array_push($stack, $exp[$i]);\n        } else if (in_array($exp[$i], $close)) {\n            $index = array_search($exp[$i], $close);\n            if (empty($stack) || $stack[count($stack) - 1] != $open[$index]) {\n                return false;\n            }\n            array_pop($stack);\n        }\n    }\n    return empty($stack);\n}\n\n$exp = \"{()}[]\";\n$exp1 = \"{(})\";\necho check_expression($exp) ? \"Balanced\" : \"Not Balanced\";\necho \"\\n\";\necho check_expression($exp1) ? \"Balanced\" : \"Not Balanced\";",
    "    $stack = [];\n    $open = ['(', '{', '['];\n    $close = [')', '}', ']'];\n    for ($i = 0; $i < strlen($exp); $i++) {\n        if (in_array($exp[$i], $open)) {\n            array_push($stack, $exp[$i]);\n        } else if (in_array($exp[$i], $close)) {\n            $open_index = array_search($stack[count($stack) - 1], $open);\n            $close_index = array_search($exp[$i], $close);\n            if ($open_index == $close_index) {\n                array_pop($stack);\n            } else {\n                return false;\n            }\n        }\n    }\n    return count($stack) == 0;\n}\n\necho check_expression('{()}[]') ? 'true' : 'false';\necho PHP_EOL;\necho check_expression('{()}[') ? 'true' : 'false';\necho PHP_EOL;\necho check_expression('{()}[{}]') ? 'true' : 'false';\necho PHP_EOL;\necho check_expression('{()}[{}]{}') ? 'true' : 'false';\necho PHP_EOL;\necho check_expression('{()}[{}]{}[') ? 'true' : 'false';\necho PHP_EOL;\necho check_expression('{()}[{}]{}[{}]') ? 'true' : 'false';\necho PHP_EOL;\necho check_expression('{()}[{}]{}[{}]{}') ? 'true' : 'false';\necho PHP_EOL;\necho check_expression('{()}[{}]{}[{}]{}[') ? 'true' : 'false';\necho PHP_EOL;\necho check_expression('{()}[{}]{}[{}]{}[{}]') ? 'true' : 'false';\necho PHP_EOL;\necho check_expression('{()}[{}]{}[{",
    "    $stack = [];\n    $open = ['{', '[', '('];\n    $close = ['}', ']', ')'];\n    $len = strlen($exp);\n    for ($i = 0; $i < $len; $i++) {\n        $char = $exp[$i];\n        if (in_array($char, $open)) {\n            array_push($stack, $char);\n        } elseif (in_array($char, $close)) {\n            $top = array_pop($stack);\n            if ($top == '{' && $char != '}') {\n                return false;\n            } elseif ($top == '[' && $char != ']') {\n                return false;\n            } elseif ($top == '(' && $char != ')') {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\n$exp = '{([])}';\nvar_dump(check_expression($exp));",
    "    $stack = array();\n    $len = strlen($exp);\n    for($i=0; $i<$len; $i++) {\n        if($exp[$i] == '(' || $exp[$i] == '{' || $exp[$i] == '[') {\n            array_push($stack, $exp[$i]);\n        } else if($exp[$i] == ')' || $exp[$i] == '}' || $exp[$i] == ']') {\n            if(empty($stack)) {\n                return false;\n            }\n            $top = array_pop($stack);\n            if(($top == '(' && $exp[$i] != ')') || ($top == '{' && $exp[$i] != '}') || ($top == '[' && $exp[$i] != ']')) {\n                return false;\n            }\n        }\n    }\n    if(empty($stack)) {\n        return true;\n    }\n    return false;\n}\n\n$exp = \"{()}[]\";\nif(check_expression($exp)) {\n    echo \"Balanced\";\n} else {\n    echo \"Not Balanced\";\n}",
    "    $stack = array();\n    $open = array('(','{','[');\n    $close = array(')','}',']');\n    for($i=0;$i<strlen($exp);$i++) {\n        if(in_array($exp[$i],$open)) {\n            array_push($stack,$exp[$i]);\n        }\n        if(in_array($exp[$i],$close)) {\n            $top = array_pop($stack);\n            if(array_search($top,$open)!==array_search($exp[$i],$close)) {\n                return false;\n            }\n        }\n    }\n    if(count($stack)==0) {\n        return true;\n    }\n    return false;\n}\n\n$exp = '{()}[]';\necho check_expression($exp);",
    "    $stack = [];\n    $open = ['{', '[', '('];\n    $close = ['}', ']', ')'];\n    for ($i = 0; $i < strlen($exp); $i++) {\n        if (in_array($exp[$i], $open)) {\n            array_push($stack, $exp[$i]);\n        } elseif (in_array($exp[$i], $close)) {\n            $top = array_pop($stack);\n            if ($top == '{' && $exp[$i] != '}') {\n                return false;\n            } elseif ($top == '[' && $exp[$i] != ']') {\n                return false;\n            } elseif ($top == '(' && $exp[$i] != ')') {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\n$exp = '{()}[]';\nvar_dump(check_expression($exp));\n\n$exp = '{()}[';\nvar_dump(check_expression($exp));",
    "    $stack = [];\n    $open = ['{', '[', '('];\n    $close = ['}', ']', ')'];\n    for ($i = 0; $i < strlen($exp); $i++) {\n        if (in_array($exp[$i], $open)) {\n            array_push($stack, $exp[$i]);\n        } else if (in_array($exp[$i], $close)) {\n            $last = array_pop($stack);\n            if (array_search($last, $open) != array_search($exp[$i], $close)) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\n$exp = '{([])}';\necho check_expression($exp);",
    "    $stack = [];\n    $open = ['(', '{', '['];\n    $close = [')', '}', ']'];\n    for ($i = 0; $i < strlen($exp); $i++) {\n        if (in_array($exp[$i], $open)) {\n            array_push($stack, $exp[$i]);\n        } else if (in_array($exp[$i], $close)) {\n            $last = array_pop($stack);\n            if ($last == null) {\n                return false;\n            }\n            if ($open[array_search($last, $open)] != $exp[$i]) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\n$exp = '{()}[]';\nvar_dump(check_expression($exp));\n$exp = '{()}[';\nvar_dump(check_expression($exp));\n$exp = '{()}[]]';\nvar_dump(check_expression($exp));\n$exp = '{()}[]]';\nvar_dump(check_expression($exp));\n$exp = '{()}[]]';\nvar_dump(check_expression($exp));",
    "    $stack = array();\n    $open = array('(', '{', '[');\n    $close = array(')', '}', ']');\n    for ($i = 0; $i < strlen($exp); $i++) {\n        if (in_array($exp[$i], $open)) {\n            array_push($stack, $exp[$i]);\n        } else if (in_array($exp[$i], $close)) {\n            $pop = array_pop($stack);\n            if ($pop == '(' && $exp[$i] != ')') {\n                return false;\n            } else if ($pop == '{' && $exp[$i] != '}') {\n                return false;\n            } else if ($pop == '[' && $exp[$i] != ']') {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\n$exp = '{()}[]';\necho check_expression($exp);",
    "    $stack = [];\n    $open = ['{', '[', '('];\n    $close = ['}', ']', ')'];\n    for ($i = 0; $i < strlen($exp); $i++) {\n        if (in_array($exp[$i], $open)) {\n            array_push($stack, $exp[$i]);\n        } else if (in_array($exp[$i], $close)) {\n            if (count($stack) == 0) {\n                return false;\n            }\n            $top = array_pop($stack);\n            if ($open[array_search($exp[$i], $close)] != $top) {\n                return false;\n            }\n        }\n    }\n    if (count($stack) == 0) {\n        return true;\n    }\n    return false;\n}\n\n$exp = \"{()}[]\";\necho check_expression($exp);",
    "    $stack = array();\n    $open = array('{', '[', '(');\n    $close = array('}', ']', ')');\n    $len = strlen($exp);\n    for ($i = 0; $i < $len; $i++) {\n        if (in_array($exp[$i], $open)) {\n            array_push($stack, $exp[$i]);\n        } elseif (in_array($exp[$i], $close)) {\n            $open_index = array_search($stack[count($stack) - 1], $open);\n            $close_index = array_search($exp[$i], $close);\n            if ($open_index == $close_index) {\n                array_pop($stack);\n            } else {\n                return false;\n            }\n        }\n    }\n    if (count($stack) == 0) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n$exp = '{([])}';\necho check_expression($exp);",
    "    $stack = [];\n    for($i=0; $i<strlen($exp); $i++) {\n        if($exp[$i] == '(' || $exp[$i] == '{' || $exp[$i] == '[') {\n            array_push($stack, $exp[$i]);\n        } else {\n            if(empty($stack)) {\n                return false;\n            }\n            $top = array_pop($stack);\n            if(!((($top == '(') && ($exp[$i] == ')')) || (($top == '{') && ($exp[$i] == '}')) || (($top == '[') && ($exp[$i] == ']')))) {\n                return false;\n            }\n        }\n    }\n    if(empty($stack)) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n$exp = \"({[]})\";\nif(check_expression($exp)) {\n    echo \"Balanced\";\n} else {\n    echo \"Not Balanced\";\n}",
    "    $stack = [];\n    $open = ['{', '[', '('];\n    $close = ['}', ']', ')'];\n    $len = strlen($exp);\n    for($i = 0; $i < $len; $i++) {\n        if(in_array($exp[$i], $open)) {\n            array_push($stack, $exp[$i]);\n        } else if(in_array($exp[$i], $close)) {\n            if(empty($stack)) {\n                return false;\n            }\n            $top = array_pop($stack);\n            if(!($open[array_search($top, $open)] == $exp[$i])) {\n                return false;\n            }\n        }\n    }\n    if(!empty($stack)) {\n        return false;\n    }\n    return true;\n}\n\n$exp = \"{()}[]\";\n$exp2 = \"{()}[\";\n$exp3 = \"{()}[\";\n$exp4 = \"{()}[\";\n$exp5 = \"{()}[\";\n$exp6 = \"{()}[\";\n$exp7 = \"{()}[\";\n$exp8 = \"{()}[\";\n$exp9 = \"{()}[\";\n$exp10 = \"{()}[\";\n$exp11 = \"{()}[\";\n$exp12 = \"{()}[\";\n$exp13 = \"{()}[\";\n$exp14 = \"{()}[\";\n$exp15 = \"{()}[\";\n$exp16 = \"{()}[\";\n$exp17 = \"{()}[\";\n$exp18 = \"{()}[\";\n$exp19 = \"{()}[\";\n$exp20 = \"{()}[\";\n$exp21 = \"{()}[\";\n$exp22 = \"{()}[\";\n$exp23 = \"{()}[\";\n$exp24 = \"{()}[\";\n$exp25 = \"{()}[\";\n$exp26 = \"{()}[\";\n$exp27 = \"{()}[\";\n$exp28 = \"{()}[\";\n$exp29 = \"{()}[\";\n$exp30 = \"{()}[\";\n$exp31 = \"{()}",
    "    $stack = [];\n    $open = ['{', '[', '('];\n    $close = ['}', ']', ')'];\n    for($i = 0; $i < strlen($exp); $i++) {\n        if(in_array($exp[$i], $open)) {\n            array_push($stack, $exp[$i]);\n        } else if(in_array($exp[$i], $close)) {\n            $last = array_pop($stack);\n            if(!$last) {\n                return false;\n            }\n            if($open[array_search($last, $open)] != $exp[$i]) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\n$exp = '{()}[]';\n$exp1 = '{()}[';\n$exp2 = '{()}[]]';\n$exp3 = '{()}[]]';\n$exp4 = '{()}[]]';\n$exp5 = '{()}[]]';\n$exp6 = '{()}[]]';\n$exp7 = '{()}[]]';\n$exp8 = '{()}[]]';\n$exp9 = '{()}[]]';\n$exp10 = '{()}[]]';\n$exp11 = '{()}[]]';\n$exp12 = '{()}[]]';\n$exp13 = '{()}[]]';\n$exp14 = '{()}[]]';\n$exp15 = '{()}[]]';\n$exp16 = '{()}[]]';\n$exp17 = '{()}[]]';\n$exp18 = '{()}[]]';\n$exp19 = '{()}[]]';\n$exp20 = '{()}[]]';\n$exp21 = '{()}[]]';\n$exp22 = '{()}[]]';\n$exp23 = '{()}[]]';\n$exp24 = '{()}[]]';\n$exp25 = '{()}[]]';\n$exp26 = '{()}[]]';\n$exp27 = '{()}[]]';\n$exp",
    "    $stack = [];\n    $open = ['(', '{', '['];\n    $close = [')', '}', ']'];\n    for($i = 0; $i < strlen($exp); $i++) {\n        if(in_array($exp[$i], $open)) {\n            array_push($stack, $exp[$i]);\n        } else if(in_array($exp[$i], $close)) {\n            $top = array_pop($stack);\n            if(!$top) {\n                return false;\n            }\n            if($open[array_search($top, $open)] != $close[array_search($exp[$i], $close)]) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\necho check_expression('{()}') ? 'balanced' : 'not balanced';\necho PHP_EOL;\necho check_expression('{(})') ? 'balanced' : 'not balanced';\necho PHP_EOL;\necho check_expression('{()}[]') ? 'balanced' : 'not balanced';\necho PHP_EOL;\necho check_expression('{()}[') ? 'balanced' : 'not balanced';\necho PHP_EOL;\necho check_expression('{()}[()') ? 'balanced' : 'not balanced';\necho PHP_EOL;\necho check_expression('{()}[()]') ? 'balanced' : 'not balanced';\necho PHP_EOL;\necho check_expression('{()}[()]{}') ? 'balanced' : 'not balanced';\necho PHP_EOL;\necho check_expression('{()}[()]{}[') ? 'balanced' : 'not balanced';\necho PHP_EOL;\necho check_expression('{()}[()]{}[][') ? 'balanced' : 'not balanced';\necho PHP_EOL;\necho check_expression('{()}[()]{}[][]') ? 'balanced' : 'not balanced';\necho PHP_EOL;\necho check_expression('{()}[()]{}[][]{}') ? 'balanced' : 'not balanced';\necho PHP",
    "    $stack = [];\n    for ($i = 0; $i < strlen($exp); $i++) {\n        if ($exp[$i] == '(' || $exp[$i] == '{' || $exp[$i] == '[') {\n            array_push($stack, $exp[$i]);\n        } else {\n            if (empty($stack)) {\n                return false;\n            }\n            $top = array_pop($stack);\n            if ($top == '(' && $exp[$i] != ')') {\n                return false;\n            } else if ($top == '{' && $exp[$i] != '}') {\n                return false;\n            } else if ($top == '[' && $exp[$i] != ']') {\n                return false;\n            }\n        }\n    }\n    if (empty($stack)) {\n        return true;\n    }\n    return false;\n}\n\necho check_expression('[{()}]') ? 'true' : 'false';\necho PHP_EOL;\necho check_expression('[{()}]{') ? 'true' : 'false';\necho PHP_EOL;\necho check_expression('[{()}]{}') ? 'true' : 'false';\necho PHP_EOL;\necho check_expression('[{()}]{}(') ? 'true' : 'false';\necho PHP_EOL;\necho check_expression('[{()}]{}()') ? 'true' : 'false';\necho PHP_EOL;\necho check_expression('[{()}]{}()[') ? 'true' : 'false';\necho PHP_EOL;\necho check_expression('[{()}]{}()[]') ? 'true' : 'false';\necho PHP_EOL;\necho check_expression('[{()}]{}()[]{') ? 'true' : 'false';\necho PHP_EOL;\necho check_expression('[{()}]{}()[]{}') ? 'true' : 'false';\necho PHP_EOL;\necho check_expression('[{()}]{}()[]{}(') ?",
    "    $stack = array();\n    $open = array('(', '{', '[');\n    $close = array(')', '}', ']');\n    for ($i = 0; $i < strlen($exp); $i++) {\n        if (in_array($exp[$i], $open)) {\n            array_push($stack, $exp[$i]);\n        } else if (in_array($exp[$i], $close)) {\n            $open_index = array_search($stack[count($stack) - 1], $open);\n            $close_index = array_search($exp[$i], $close);\n            if ($open_index == $close_index) {\n                array_pop($stack);\n            } else {\n                return false;\n            }\n        }\n    }\n    if (count($stack) == 0) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n$exp = \"({[]})\";\nif (check_expression($exp)) {\n    echo \"Balanced\";\n} else {\n    echo \"Not Balanced\";\n}",
    "\t$stack = [];\n\t$open = ['(', '{', '['];\n\t$close = [')', '}', ']'];\n\tfor ($i = 0; $i < strlen($exp); $i++) {\n\t\tif (in_array($exp[$i], $open)) {\n\t\t\tarray_push($stack, $exp[$i]);\n\t\t} else if (in_array($exp[$i], $close)) {\n\t\t\tif (empty($stack)) {\n\t\t\t\treturn false;\n\t\t\t} else {\n\t\t\t\t$top = array_pop($stack);\n\t\t\t\tif ($open[array_search($exp[$i], $close)] != $top) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tif (empty($stack)) {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t}\n}\n\n$exp = \"({[]})\";\necho check_expression($exp);",
    "    $stack = array();\n    $exp_len = strlen($exp);\n    for ($i = 0; $i < $exp_len; $i++) {\n        if ($exp[$i] == '(') {\n            array_push($stack, $exp[$i]);\n        } else if ($exp[$i] == ')') {\n            if (empty($stack)) {\n                return false;\n            } else {\n                array_pop($stack);\n            }\n        }\n    }\n    if (empty($stack)) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n$exp = \"(a+b)\";\nif (check_expression($exp)) {\n    echo \"Balanced\";\n} else {\n    echo \"Not Balanced\";\n}",
    "    $stack = [];\n    $open = ['(', '{', '['];\n    $close = [')', '}', ']'];\n    for ($i = 0; $i < strlen($exp); $i++) {\n        if (in_array($exp[$i], $open)) {\n            array_push($stack, $exp[$i]);\n        } else if (in_array($exp[$i], $close)) {\n            $last = array_pop($stack);\n            if ($open[array_search($exp[$i], $close)] != $last) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\n$exp = \"{()}[]\";\n$exp2 = \"{(})\";\necho check_expression($exp) ? \"Balanced\" : \"Not Balanced\";\necho \"\\n\";\necho check_expression($exp2) ? \"Balanced\" : \"Not Balanced\";",
    "\t$stack = array();\n\t$length = strlen($exp);\n\tfor($i = 0; $i < $length; $i++) {\n\t\tif($exp[$i] == '(') {\n\t\t\tarray_push($stack, $exp[$i]);\n\t\t} else if($exp[$i] == ')') {\n\t\t\tif(empty($stack)) {\n\t\t\t\treturn false;\n\t\t\t} else {\n\t\t\t\tarray_pop($stack);\n\t\t\t}\n\t\t}\n\t}\n\tif(empty($stack)) {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t}\n}\n\n$exp = \"(a+b)\";\nif(check_expression($exp)) {\n\techo \"Balanced\";\n} else {\n\techo \"Not Balanced\";\n}",
    "\t$stack = array();\n\t$open = array('{', '[', '(');\n\t$close = array('}', ']', ')');\n\t$len = strlen($exp);\n\tfor($i = 0; $i < $len; $i++) {\n\t\tif(in_array($exp[$i], $open)) {\n\t\t\tarray_push($stack, $exp[$i]);\n\t\t} else if(in_array($exp[$i], $close)) {\n\t\t\t$key = array_search($exp[$i], $close);\n\t\t\tif(!empty($stack) && $stack[count($stack) - 1] == $open[$key]) {\n\t\t\t\tarray_pop($stack);\n\t\t\t} else {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\tif(empty($stack)) {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t}\n}\n\n$exp = '{()}[]';\nif(check_expression($exp)) {\n\techo \"Balanced\";\n} else {\n\techo \"Not Balanced\";\n}",
    "    $stack = [];\n    $open = ['{', '(', '['];\n    $close = ['}', ')', ']'];\n    for ($i = 0; $i < strlen($exp); $i++) {\n        if (in_array($exp[$i], $open)) {\n            array_push($stack, $exp[$i]);\n        } else if (in_array($exp[$i], $close)) {\n            $top = array_pop($stack);\n            if ($top == '{' && $exp[$i] != '}') {\n                return false;\n            } else if ($top == '(' && $exp[$i] != ')') {\n                return false;\n            } else if ($top == '[' && $exp[$i] != ']') {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\necho check_expression('{()}') ? 'true' : 'false';\necho \"\\n\";\necho check_expression('{(})') ? 'true' : 'false';\necho \"\\n\";\necho check_expression('{()}()') ? 'true' : 'false';\necho \"\\n\";\necho check_expression('{()}(]') ? 'true' : 'false';\necho \"\\n\";\necho check_expression('{()}[') ? 'true' : 'false';\necho \"\\n\";\necho check_expression('{()}[') ? 'true' : 'false';\necho \"\\n\";\necho check_expression('{()}[') ? 'true' : 'false';\necho \"\\n\";\necho check_expression('{()}[') ? 'true' : 'false';\necho \"\\n\";\necho check_expression('{()}[') ? 'true' : 'false';\necho \"\\n\";\necho check_expression('{()}[') ? 'true' : 'false';\necho \"\\n\";\necho check_expression('{()}[') ? 'true' : 'false';\necho \"\\n\";\necho check_expression('{()}[') ? 'true' : 'false';\necho \"\\n\";\necho check_expression('{()}[') ? 'true",
    "    $stack = [];\n    $open = ['{', '[', '('];\n    $close = ['}', ']', ')'];\n    for ($i = 0; $i < strlen($exp); $i++) {\n        if (in_array($exp[$i], $open)) {\n            array_push($stack, $exp[$i]);\n        } else if (in_array($exp[$i], $close)) {\n            if (empty($stack)) {\n                return false;\n            }\n            $top = array_pop($stack);\n            if (!($open[array_search($top, $open)] == $exp[$i])) {\n                return false;\n            }\n        }\n    }\n    if (empty($stack)) {\n        return true;\n    }\n    return false;\n}\n\n$exp = \"{()}[]\";\nif (check_expression($exp)) {\n    echo \"Balanced\";\n} else {\n    echo \"Not Balanced\";\n}",
    "    $stack = [];\n    $open = ['{', '(', '['];\n    $close = ['}', ')', ']'];\n    $len = strlen($exp);\n    for ($i = 0; $i < $len; $i++) {\n        if (in_array($exp[$i], $open)) {\n            array_push($stack, $exp[$i]);\n        } elseif (in_array($exp[$i], $close)) {\n            $key = array_search($exp[$i], $close);\n            if (array_pop($stack) != $open[$key]) {\n                return false;\n            }\n        }\n    }\n    return count($stack) == 0;\n}\n\n$exp = \"{()}[]\";\necho check_expression($exp);",
    "    $stack = [];\n    $open = ['{', '[', '('];\n    $close = ['}', ']', ')'];\n    for ($i = 0; $i < strlen($exp); $i++) {\n        if (in_array($exp[$i], $open)) {\n            array_push($stack, $exp[$i]);\n        } else if (in_array($exp[$i], $close)) {\n            if (count($stack) == 0) {\n                return false;\n            }\n            $top = array_pop($stack);\n            if ($open[array_search($exp[$i], $close)] != $top) {\n                return false;\n            }\n        }\n    }\n    if (count($stack) > 0) {\n        return false;\n    }\n    return true;\n}\n\n$exp = \"{()}[]\";\nif (check_expression($exp)) {\n    echo \"Balanced\";\n} else {\n    echo \"Not Balanced\";\n}",
    "\t$stack = [];\n\t$open_brackets = ['{', '[', '('];\n\t$close_brackets = ['}', ']', ')'];\n\t$map = [\n\t\t'{' => '}',\n\t\t'[' => ']',\n\t\t'(' => ')'\n\t];\n\tfor ($i = 0; $i < strlen($exp); $i++) {\n\t\tif (in_array($exp[$i], $open_brackets)) {\n\t\t\tarray_push($stack, $exp[$i]);\n\t\t}\n\t\tif (in_array($exp[$i], $close_brackets)) {\n\t\t\tif (empty($stack)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t$top = array_pop($stack);\n\t\t\tif ($map[$top] != $exp[$i]) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\tif (empty($stack)) {\n\t\treturn true;\n\t}\n\treturn false;\n}\n\n$exp = '{()}[]';\nvar_dump(check_expression($exp));\n\n$exp = '{(})';\nvar_dump(check_expression($exp));\n\n$exp = '{()}[]';\nvar_dump(check_expression($exp));\n\n$exp = '{()}[{}]';\nvar_dump(check_expression($exp));\n\n$exp = '{()}[{}]{}';\nvar_dump(check_expression($exp));\n\n$exp = '{()}[{}]{}[';\nvar_dump(check_expression($exp));\n\n$exp = '{()}[{}]{}[()]';\nvar_dump(check_expression($exp));\n\n$exp = '{()}[{}]{}[()]{}';\nvar_dump(check_expression($exp));\n\n$exp = '{()}[{}]{}[()]{}[';\nvar_dump(check_expression($exp));\n\n$exp = '{()}[{}]{",
    "\t$stack = [];\n\t$open = ['(', '{', '['];\n\t$close = [')', '}', ']'];\n\tfor ($i = 0; $i < strlen($exp); $i++) {\n\t\tif (in_array($exp[$i], $open)) {\n\t\t\tarray_push($stack, $exp[$i]);\n\t\t} elseif (in_array($exp[$i], $close)) {\n\t\t\t$open_index = array_search($stack[count($stack) - 1], $open);\n\t\t\t$close_index = array_search($exp[$i], $close);\n\t\t\tif ($open_index == $close_index) {\n\t\t\t\tarray_pop($stack);\n\t\t\t} else {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn count($stack) == 0;\n}\n\necho check_expression('[{()}]');",
    "    $stack = new SplStack();\n    for ($i = 0; $i < strlen($exp); $i++) {\n        if ($exp[$i] == '(') {\n            $stack->push($exp[$i]);\n        } else if ($exp[$i] == ')') {\n            if ($stack->isEmpty()) {\n                return false;\n            }\n            $stack->pop();\n        }\n    }\n    return $stack->isEmpty();\n}\n\n$exp = \"(a+b)+(c+d)\";\nif (check_expression($exp)) {\n    echo \"Balanced\";\n} else {\n    echo \"Not Balanced\";\n}",
    "    $stack = [];\n    $open = ['(', '{', '['];\n    $close = [')', '}', ']'];\n    $len = strlen($exp);\n    for ($i = 0; $i < $len; $i++) {\n        if (in_array($exp[$i], $open)) {\n            array_push($stack, $exp[$i]);\n        } elseif (in_array($exp[$i], $close)) {\n            $open_index = array_search($exp[$i], $close);\n            if (array_pop($stack) != $open[$open_index]) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\necho check_expression('{([])}') ? 'Balanced' : 'Not Balanced';\necho PHP_EOL;\necho check_expression('{([])}[') ? 'Balanced' : 'Not Balanced';\necho PHP_EOL;\necho check_expression('{([])}[}') ? 'Balanced' : 'Not Balanced';\necho PHP_EOL;\necho check_expression('{([])}[}]') ? 'Balanced' : 'Not Balanced';\necho PHP_EOL;\necho check_expression('{([])}[}]{') ? 'Balanced' : 'Not Balanced';\necho PHP_EOL;\necho check_expression('{([])}[}]{[') ? 'Balanced' : 'Not Balanced';\necho PHP_EOL;\necho check_expression('{([])}[}]{[}') ? 'Balanced' : 'Not Balanced';\necho PHP_EOL;\necho check_expression('{([])}[}]{[}]') ? 'Balanced' : 'Not Balanced';\necho PHP_EOL;\necho check_expression('{([])}[}]{[}]{') ? 'Balanced' : 'Not Balanced';\necho PHP_EOL;\necho check_expression('{([])}[}]{[}]{[') ? 'Balanced' : 'Not Balanced';\necho PHP_EOL;\necho check_expression('{([])}[}]{",
    "    $stack = new SplStack();\n    $len = strlen($exp);\n    for ($i = 0; $i < $len; $i++) {\n        if ($exp[$i] == '(' || $exp[$i] == '[' || $exp[$i] == '{') {\n            $stack->push($exp[$i]);\n        } else if ($exp[$i] == ')' || $exp[$i] == ']' || $exp[$i] == '}') {\n            if ($stack->isEmpty()) {\n                return false;\n            }\n            $top = $stack->pop();\n            if ($exp[$i] == ')' && $top != '(') {\n                return false;\n            }\n            if ($exp[$i] == ']' && $top != '[') {\n                return false;\n            }\n            if ($exp[$i] == '}' && $top != '{') {\n                return false;\n            }\n        }\n    }\n    if ($stack->isEmpty()) {\n        return true;\n    }\n    return false;\n}\n\n$exp = \"{()}[]\";\nif (check_expression($exp)) {\n    echo \"Balanced\";\n} else {\n    echo \"Not Balanced\";\n}",
    "    $stack = [];\n    $open = ['(', '{', '['];\n    $close = [')', '}', ']'];\n    for ($i = 0; $i < strlen($exp); $i++) {\n        if (in_array($exp[$i], $open)) {\n            array_push($stack, $exp[$i]);\n        } else if (in_array($exp[$i], $close)) {\n            $pop = array_pop($stack);\n            if ($pop == '(' && $exp[$i] != ')') {\n                return false;\n            } else if ($pop == '{' && $exp[$i] != '}') {\n                return false;\n            } else if ($pop == '[' && $exp[$i] != ']') {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\n$exp = \"{()}[]\";\necho check_expression($exp);",
    "    $stack = array();\n    $open = array('{', '(', '[');\n    $close = array('}', ')', ']');\n    for ($i = 0; $i < strlen($exp); $i++) {\n        if (in_array($exp[$i], $open)) {\n            array_push($stack, $exp[$i]);\n        } else if (in_array($exp[$i], $close)) {\n            $last = array_pop($stack);\n            if ($last == $open[array_search($exp[$i], $close)]) {\n                continue;\n            } else {\n                return false;\n            }\n        }\n    }\n    if (count($stack) == 0) {\n        return true;\n    }\n    return false;\n}\n\n$exp = \"{()}[]\";\nif (check_expression($exp)) {\n    echo \"Balanced\";\n} else {\n    echo \"Not Balanced\";\n}",
    "    $stack = [];\n    $open = ['(', '{', '['];\n    $close = [')', '}', ']'];\n    for ($i = 0; $i < strlen($exp); $i++) {\n        if (in_array($exp[$i], $open)) {\n            array_push($stack, $exp[$i]);\n        } else if (in_array($exp[$i], $close)) {\n            $pos = array_search($exp[$i], $close);\n            if (empty($stack) || ($open[$pos] != array_pop($stack))) {\n                return false;\n            }\n        }\n    }\n    return empty($stack);\n}\n\n$exp = \"{()}[]\";\necho check_expression($exp);",
    "    $stack = [];\n    $open = ['(', '{', '['];\n    $close = [')', '}', ']'];\n    for ($i=0; $i<strlen($exp); $i++) {\n        if (in_array($exp[$i], $open)) {\n            array_push($stack, $exp[$i]);\n        } elseif (in_array($exp[$i], $close)) {\n            $open_index = array_search($exp[$i], $close);\n            if (empty($stack) || $stack[count($stack)-1] != $open[$open_index]) {\n                return false;\n            }\n            array_pop($stack);\n        }\n    }\n    return empty($stack);\n}\n\n$exp = \"{()}[]\";\necho check_expression($exp) ? \"Balanced\" : \"Not Balanced\";\necho \"\\n\";\n\n$exp = \"[(])\";\necho check_expression($exp) ? \"Balanced\" : \"Not Balanced\";\necho \"\\n\";\n\n$exp = \"[()]{}{[()()]()}\";\necho check_expression($exp) ? \"Balanced\" : \"Not Balanced\";\necho \"\\n\";\n\n$exp = \"[(])\";\necho check_expression($exp) ? \"Balanced\" : \"Not Balanced\";\necho \"\\n\";",
    "    $stack = array();\n    $open_brackets = array('(', '{', '[');\n    $close_brackets = array(')', '}', ']');\n    for ($i=0; $i<strlen($exp); $i++) {\n        if (in_array($exp[$i], $open_brackets)) {\n            array_push($stack, $exp[$i]);\n        }\n        if (in_array($exp[$i], $close_brackets)) {\n            $last_open_bracket = array_pop($stack);\n            if ($open_brackets[array_search($last_open_bracket, $open_brackets)] != $close_brackets[array_search($exp[$i], $close_brackets)]) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\n$expression = \"{{([][])}()}\";\necho check_expression($expression);",
    "    $stack = [];\n    for ($i = 0; $i < strlen($exp); $i++) {\n        if ($exp[$i] == '(' || $exp[$i] == '{' || $exp[$i] == '[') {\n            array_push($stack, $exp[$i]);\n        } elseif ($exp[$i] == ')' || $exp[$i] == '}' || $exp[$i] == ']') {\n            if (empty($stack)) {\n                return false;\n            }\n            $top = array_pop($stack);\n            if (!((($top == '(') && ($exp[$i] == ')')) || (($top == '{') && ($exp[$i] == '}')) || (($top == '[') && ($exp[$i] == ']')))) {\n                return false;\n            }\n        }\n    }\n    return empty($stack);\n}\n\n$exp = \"{()}[]\";\nif (check_expression($exp)) {\n    echo \"Balanced\";\n} else {\n    echo \"Not Balanced\";\n}",
    "    $stack = [];\n    $open = ['(', '{', '['];\n    $close = [')', '}', ']'];\n    $len = strlen($exp);\n    for ($i = 0; $i < $len; $i++) {\n        if (in_array($exp[$i], $open)) {\n            array_push($stack, $exp[$i]);\n        } else if (in_array($exp[$i], $close)) {\n            $pos = array_search($exp[$i], $close);\n            if (empty($stack) || ($open[$pos] != array_pop($stack))) {\n                return false;\n            }\n        }\n    }\n    return empty($stack);\n}\n\n$exp = \"{()}[]\";\necho check_expression($exp) ? \"Balanced\" : \"Not Balanced\";",
    "    $stack = [];\n    $open = ['{', '[', '('];\n    $close = ['}', ']', ')'];\n    for ($i = 0; $i < strlen($exp); $i++) {\n        if (in_array($exp[$i], $open)) {\n            array_push($stack, $exp[$i]);\n        } elseif (in_array($exp[$i], $close)) {\n            $key = array_search($exp[$i], $close);\n            if (array_pop($stack) != $open[$key]) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\nvar_dump(check_expression('{[()]}'));\nvar_dump(check_expression('{[(])}'));\nvar_dump(check_expression('{{[[(())]]}}'));",
    "    $stack = array();\n    $open = array('{', '[', '(');\n    $close = array('}', ']', ')');\n    for ($i = 0; $i < strlen($exp); $i++) {\n        if (in_array($exp[$i], $open)) {\n            array_push($stack, $exp[$i]);\n        } elseif (in_array($exp[$i], $close)) {\n            $pop = array_pop($stack);\n            if ($pop != $open[array_search($exp[$i], $close)]) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\n$exp = \"{()}[]\";\necho check_expression($exp);",
    "    $stack = [];\n    $open = ['{', '[', '('];\n    $close = ['}', ']', ')'];\n    for ($i = 0; $i < strlen($exp); $i++) {\n        if (in_array($exp[$i], $open)) {\n            array_push($stack, $exp[$i]);\n        } else if (in_array($exp[$i], $close)) {\n            $top = array_pop($stack);\n            if ($top == '{' && $exp[$i] != '}') {\n                return false;\n            } else if ($top == '[' && $exp[$i] != ']') {\n                return false;\n            } else if ($top == '(' && $exp[$i] != ')') {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\n$exp = \"{()}[]\";\nvar_dump(check_expression($exp));",
    "\t$stack = array();\n\t$open = array('(', '{', '[');\n\t$close = array(')', '}', ']');\n\t$len = strlen($exp);\n\tfor ($i = 0; $i < $len; $i++) {\n\t\tif (in_array($exp[$i], $open)) {\n\t\t\tarray_push($stack, $exp[$i]);\n\t\t} else if (in_array($exp[$i], $close)) {\n\t\t\tif (empty($stack)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t$top = array_pop($stack);\n\t\t\tif ($top == '(' && $exp[$i] != ')') {\n\t\t\t\treturn false;\n\t\t\t} else if ($top == '{' && $exp[$i] != '}') {\n\t\t\t\treturn false;\n\t\t\t} else if ($top == '[' && $exp[$i] != ']') {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\tif (empty($stack)) {\n\t\treturn true;\n\t}\n\treturn false;\n}\n\n$exp = \"{{()}}\";\necho check_expression($exp) ? \"Balanced\" : \"Not Balanced\";\necho \"\\n\";\n$exp = \"{(})\";\necho check_expression($exp) ? \"Balanced\" : \"Not Balanced\";\necho \"\\n\";\n$exp = \"{()}[]\";\necho check_expression($exp) ? \"Balanced\" : \"Not Balanced\";\necho \"\\n\";\n$exp = \"{()}[\";\necho check_expression($exp) ? \"Balanced\" : \"Not Balanced\";\necho \"\\n\";\n$exp = \"{()}[{}]\";\necho check_expression($exp) ? \"Balanced\" : \"Not Balanced\";\necho \"\\n\";\n$exp = \"{()}[{]}\";\necho check_expression($exp) ? \"Balanced\" : \"Not Balanced\";\necho \"\\n\";\n$exp = \"{()}[{}]{}\";\necho check_expression($exp) ? \"Balanced\"",
    "    $stack = [];\n    $len = strlen($exp);\n    for ($i = 0; $i < $len; $i++) {\n        if ($exp[$i] == '(' || $exp[$i] == '[' || $exp[$i] == '{') {\n            array_push($stack, $exp[$i]);\n        } else {\n            if (empty($stack)) {\n                return false;\n            }\n            $top = array_pop($stack);\n            if ($exp[$i] == ')' && $top != '(') {\n                return false;\n            }\n            if ($exp[$i] == ']' && $top != '[') {\n                return false;\n            }\n            if ($exp[$i] == '}' && $top != '{') {\n                return false;\n            }\n        }\n    }\n    if (empty($stack)) {\n        return true;\n    }\n    return false;\n}\n\n$exp = \"{()}[]\";\nif (check_expression($exp)) {\n    echo \"Balanced\";\n} else {\n    echo \"Not Balanced\";\n}",
    "    $stack = [];\n    $open = ['{', '[', '('];\n    $close = ['}', ']', ')'];\n    for ($i = 0; $i < strlen($exp); $i++) {\n        $char = $exp[$i];\n        if (in_array($char, $open)) {\n            array_push($stack, $char);\n        } elseif (in_array($char, $close)) {\n            $open_char = array_pop($stack);\n            if ($open_char == '{' && $char != '}') {\n                return false;\n            } elseif ($open_char == '[' && $char != ']') {\n                return false;\n            } elseif ($open_char == '(' && $char != ')') {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\n$exp = '{()}[]';\necho check_expression($exp) ? 'Balanced' : 'Not Balanced';",
    "    $stack = [];\n    $open = ['{', '[', '('];\n    $close = ['}', ']', ')'];\n    for($i = 0; $i < strlen($exp); $i++) {\n        if(in_array($exp[$i], $open)) {\n            array_push($stack, $exp[$i]);\n        } else if(in_array($exp[$i], $close)) {\n            $last = array_pop($stack);\n            if(!$last) {\n                return false;\n            }\n            if(($last == '{' && $exp[$i] != '}') || ($last == '[' && $exp[$i] != ']') || ($last == '(' && $exp[$i] != ')')) {\n                return false;\n            }\n        }\n    }\n    if(count($stack) > 0) {\n        return false;\n    }\n    return true;\n}\n\n$exp = \"{()}[]\";\nif(check_expression($exp)) {\n    echo \"Balanced\";\n} else {\n    echo \"Not Balanced\";\n}",
    "    $stack = [];\n    $open = ['{', '[', '('];\n    $close = ['}', ']', ')'];\n    $len = strlen($exp);\n    for ($i = 0; $i < $len; $i++) {\n        if (in_array($exp[$i], $open)) {\n            array_push($stack, $exp[$i]);\n        } else if (in_array($exp[$i], $close)) {\n            $last = array_pop($stack);\n            if ($last == $open[array_search($exp[$i], $close)]) {\n                continue;\n            } else {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\n$exp = \"{()}[]\";\necho check_expression($exp) ? \"Balanced\" : \"Not Balanced\";",
    "    $stack = [];\n    $open = ['(', '{', '['];\n    $close = [')', '}', ']'];\n    for ($i = 0; $i < strlen($exp); $i++) {\n        if (in_array($exp[$i], $open)) {\n            array_push($stack, $exp[$i]);\n        } else if (in_array($exp[$i], $close)) {\n            $open_index = array_search($exp[$i], $close);\n            if (array_pop($stack) !== $open[$open_index]) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\n$exp = '{()}[]';\nvar_dump(check_expression($exp));",
    "    $stack = array();\n    $open = array('(', '{', '[');\n    $close = array(')', '}', ']');\n    for($i = 0; $i < strlen($exp); $i++) {\n        if(in_array($exp[$i], $open)) {\n            array_push($stack, $exp[$i]);\n        } else if(in_array($exp[$i], $close)) {\n            $last = array_pop($stack);\n            if($last == '(' && $exp[$i] != ')') {\n                return false;\n            } else if($last == '{' && $exp[$i] != '}') {\n                return false;\n            } else if($last == '[' && $exp[$i] != ']') {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\n$exp = \"{{([][])}()}\";\nif(check_expression($exp)) {\n    echo \"Balanced\";\n} else {\n    echo \"Not Balanced\";\n}",
    "    $stack = [];\n    $open = ['(', '{', '['];\n    $close = [')', '}', ']'];\n    $len = strlen($exp);\n    for($i = 0; $i < $len; $i++) {\n        if(in_array($exp[$i], $open)) {\n            array_push($stack, $exp[$i]);\n        } else if(in_array($exp[$i], $close)) {\n            $key = array_search($exp[$i], $close);\n            if(array_pop($stack) != $open[$key]) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\n$exp = \"{()}[]\";\nvar_dump(check_expression($exp));\n\n$exp = \"{(})\";\nvar_dump(check_expression($exp));"
  ]
}