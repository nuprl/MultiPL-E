{
  "name": "mbpp_262_split_two_parts",
  "language": "php",
  "prompt": "<?php\n// Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts($list1, $L) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_262_split_two_parts.py",
  "prompt_terminology": "reworded",
  "tests": "function candidate(...$args) {\n    return split_two_parts(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 3, 4, 4, 5, 1), 3) !== array(array(1, 1, 2), array(3, 4, 4, 5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"c\", \"d\"), 2) !== array(array(\"a\", \"b\"), array(\"c\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"), 4) !== array(array(\"p\", \"y\", \"t\", \"h\"), array(\"o\", \"n\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction",
    "\n?>",
    "\n//",
    "\n#"
  ],
  "completions": [
    "\t$list2 = array();\n\tfor ($i = 0; $i < $L; $i++) {\n\t\t$list2[] = $list1[$i];\n\t}\n\t$list3 = array();\n\tfor ($i = $L; $i < count($list1); $i++) {\n\t\t$list3[] = $list1[$i];\n\t}\n\t$list4 = array($list2, $list3);\n\treturn $list4;\n}\n",
    "    $list2 = array();\n    for ($i = 0; $i < $L; $i++) {\n        $list2[] = $list1[$i];\n    }\n    $list3 = array();\n    for ($i = $L; $i < count($list1); $i++) {\n        $list3[] = $list1[$i];\n    }\n    return array($list2, $list3);\n}\n$list1 = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$L = 5;\n$result = split_two_parts($list1, $L);\nprint_r($result);",
    "    $list2 = array();\n    for ($i = 0; $i < $L; $i++) {\n        $list2[] = $list1[$i];\n    }\n    for ($i = $L; $i < count($list1); $i++) {\n        $list1[$i - $L] = $list1[$i];\n    }\n    for ($i = count($list1) - $L; $i < count($list1); $i++) {\n        unset($list1[$i]);\n    }\n    return array($list1, $list2);\n}\n$list1 = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$L = 5;\n$result = split_two_parts($list1, $L);\nprint_r($result);",
    "    $list2 = array();\n    for ($i = 0; $i < $L; $i++) {\n        $list2[] = $list1[$i];\n    }\n    for ($i = $L; $i < count($list1); $i++) {\n        $list1[$i - $L] = $list1[$i];\n    }\n    for ($i = count($list1) - $L; $i < count($list1); $i++) {\n        unset($list1[$i]);\n    }\n    return array($list1, $list2);\n}\n$list1 = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$L = 5;\n$result = split_two_parts($list1, $L);\nprint_r($result);",
    "\t$list2 = array();\n\tfor ($i = 0; $i < $L; $i++) {\n\t\t$list2[] = $list1[$i];\n\t}\n\t$list3 = array();\n\tfor ($i = $L; $i < count($list1); $i++) {\n\t\t$list3[] = $list1[$i];\n\t}\n\treturn array($list2, $list3);\n}\n",
    "    $list2 = array();\n    for ($i = 0; $i < $L; $i++) {\n        $list2[] = $list1[$i];\n    }\n    for ($i = $L; $i < count($list1); $i++) {\n        $list1[$i - $L] = $list1[$i];\n    }\n    for ($i = count($list1) - $L; $i < count($list1); $i++) {\n        unset($list1[$i]);\n    }\n    return array($list1, $list2);\n}\n$list1 = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$L = 4;\n$result = split_two_parts($list1, $L);\necho \"The first part of the array is: \";\nprint_r($result[0]);\necho \"<br>\";\necho \"The second part of the array is: \";\nprint_r($result[1]);",
    "    $list2 = [];\n    $list3 = [];\n    for ($i = 0; $i < count($list1); $i++) {\n        if ($i < $L) {\n            array_push($list2, $list1[$i]);\n        } else {\n            array_push($list3, $list1[$i]);\n        }\n    }\n    return [$list2, $list3];\n}\n",
    "    $list2 = array();\n    $list3 = array();\n    for ($i = 0; $i < $L; $i++) {\n        $list2[$i] = $list1[$i];\n    }\n    for ($i = $L; $i < count($list1); $i++) {\n        $list3[$i - $L] = $list1[$i];\n    }\n    return array($list2, $list3);\n}\n\n$list1 = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$L = 5;\n$result = split_two_parts($list1, $L);\nprint_r($result);",
    "    $list2 = array();\n    for ($i = 0; $i < $L; $i++) {\n        array_push($list2, $list1[$i]);\n    }\n    return $list2;\n}\n\n$list1 = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$L = 5;\n$list2 = split_two_parts($list1, $L);\nprint_r($list2);\n",
    "\t$list2 = array();\n\tfor ($i = 0; $i < $L; $i++) {\n\t\t$list2[] = $list1[$i];\n\t}\n\t$list3 = array();\n\tfor ($i = $L; $i < count($list1); $i++) {\n\t\t$list3[] = $list1[$i];\n\t}\n\treturn array($list2, $list3);\n}\n",
    "\t$list2 = array();\n\tfor ($i = 0; $i < $L; $i++) {\n\t\tarray_push($list2, $list1[$i]);\n\t}\n\t$list3 = array();\n\tfor ($i = $L; $i < count($list1); $i++) {\n\t\tarray_push($list3, $list1[$i]);\n\t}\n\t$list4 = array($list2, $list3);\n\treturn $list4;\n}\n",
    "    $list2 = array_slice($list1, $L);\n    $list1 = array_slice($list1, 0, $L);\n    return array($list1, $list2);\n}\n\n$list1 = array(1, 2, 3, 4, 5, 6, 7, 8, 9);\n$L = 5;\n$result = split_two_parts($list1, $L);\nprint_r($result);",
    "    $list2 = array();\n    $list3 = array();\n    for ($i = 0; $i < $L; $i++) {\n        $list2[] = $list1[$i];\n    }\n    for ($i = $L; $i < count($list1); $i++) {\n        $list3[] = $list1[$i];\n    }\n    return array($list2, $list3);\n}\n",
    "    $list2 = array();\n    $list3 = array();\n    for ($i = 0; $i < $L; $i++) {\n        $list2[] = $list1[$i];\n    }\n    for ($i = $L; $i < count($list1); $i++) {\n        $list3[] = $list1[$i];\n    }\n    return array($list2, $list3);\n}\n$list1 = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$L = 5;\n$result = split_two_parts($list1, $L);\nprint_r($result);",
    "    $list2 = array();\n    for ($i = 0; $i < $L; $i++) {\n        array_push($list2, $list1[$i]);\n    }\n    for ($i = $L; $i < count($list1); $i++) {\n        array_push($list1, $list1[$i]);\n    }\n    for ($i = 0; $i < $L; $i++) {\n        array_shift($list1);\n    }\n    return array($list1, $list2);\n}",
    "    $list2 = array();\n    $list3 = array();\n    for ($i = 0; $i < $L; $i++) {\n        $list2[] = $list1[$i];\n    }\n    for ($i = $L; $i < count($list1); $i++) {\n        $list3[] = $list1[$i];\n    }\n    $list4 = array($list2, $list3);\n    return $list4;\n}\n",
    "\t$list2 = array_slice($list1, $L);\n\t$list1 = array_slice($list1, 0, $L);\n\treturn array($list1, $list2);\n}\n",
    "    $list2 = array();\n    $list3 = array();\n    for ($i = 0; $i < $L; $i++) {\n        $list2[] = $list1[$i];\n    }\n    for ($i = $L; $i < count($list1); $i++) {\n        $list3[] = $list1[$i];\n    }\n    return array($list2, $list3);\n}\n\n$list1 = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$L = 5;\n$result = split_two_parts($list1, $L);\nprint_r($result);",
    "    $list2 = array();\n    for ($i = 0; $i < $L; $i++) {\n        $list2[] = $list1[$i];\n    }\n    for ($i = $L; $i < count($list1); $i++) {\n        $list1[$i - $L] = $list1[$i];\n    }\n    for ($i = 0; $i < count($list1) - $L; $i++) {\n        $list1[$i] = $list1[$i + $L];\n    }\n    for ($i = count($list1) - $L; $i < count($list1); $i++) {\n        unset($list1[$i]);\n    }\n    $list1 = array_values($list1);\n    return array($list2, $list1);\n}\n$list1 = array(1, 2, 3, 4, 5, 6, 7, 8, 9);\n$L = 4;\n$result = split_two_parts($list1, $L);\nprint_r($result);",
    "\t$list2 = array();\n\tfor ($i = 0; $i < $L; $i++) {\n\t\t$list2[] = $list1[$i];\n\t}\n\tfor ($i = $L; $i < count($list1); $i++) {\n\t\t$list1[$i - $L] = $list1[$i];\n\t}\n\tfor ($i = 0; $i < $L; $i++) {\n\t\tunset($list1[count($list1) - 1]);\n\t}\n\treturn array($list1, $list2);\n}\n"
  ]
}