{
  "name": "mbpp_735_toggle_middle_bits",
  "language": "php",
  "prompt": "<?php\n// Write a phpthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nfunction toggle_middle_bits($n) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_735_toggle_middle_bits.py",
  "prompt_terminology": "reworded",
  "tests": "function candidate(...$args) {\n    return toggle_middle_bits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(9) !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 12) { throw new Exception(\"Test failed!\"); }\n    if (candidate(11) !== 13) { throw new Exception(\"Test failed!\"); }\n    if (candidate(65) !== 127) { throw new Exception(\"Test failed!\"); }\n    if (candidate(77) !== 115) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction",
    "\n?>",
    "\n//",
    "\n#"
  ],
  "completions": [
    "    $first_bit = ($n & 1) << 1;\n    $last_bit = ($n & (1 << (strlen($n) - 1))) >> 1;\n    $mask = (1 << (strlen($n) - 1)) - 1;\n    $mask = $mask ^ (1 << 0);\n    $n = $n ^ $mask;\n    $n = $n | $first_bit;\n    $n = $n | $last_bit;\n    return $n;\n}\n\necho toggle_middle_bits(10);",
    "    $first_bit = $n & 1;\n    $last_bit = ($n >> 1) & 1;\n    $x = ($n >> 2) ^ ((1 << ($n >> 2)) - 1);\n    return ($x << 2) | ($first_bit << 1) | $last_bit;\n}\n\n$n = 12;\necho toggle_middle_bits($n);",
    "    $first_bit = $n & 1;\n    $last_bit = $n & (1 << (floor(log($n, 2))));\n    $mask = ($last_bit << 1) - 1;\n    $mask = $mask ^ ((1 << (floor(log($n, 2)))) - 1);\n    $n = $n ^ $mask;\n    $n = $n | ($first_bit << (floor(log($n, 2))));\n    return $n;\n}\n\n$n = 15;\necho toggle_middle_bits($n);",
    "    $first_bit = $n & 1;\n    $last_bit = $n & (1 << (PHP_INT_SIZE * 8 - 1));\n    $mask = (1 << (PHP_INT_SIZE * 8 - 2)) - 1;\n    $mask = $mask ^ $last_bit;\n    $mask = $mask ^ $first_bit;\n    return ($n ^ $mask);\n}\n\necho toggle_middle_bits(10);",
    "    $first_bit = $n & 1;\n    $last_bit = ($n >> 1) & 1;\n    $x = ($n >> 1) ^ $n;\n    $x = $x & ((1 << ($n - 2)) - 1);\n    $x = ($x << 1) | $last_bit;\n    $x = $x | $first_bit;\n    return $x;\n}\n\n$n = 13;\necho toggle_middle_bits($n);",
    "    $mask = 0xFFFFFFFF;\n    $mask = $mask >> 2;\n    $mask = $mask << 2;\n    $n = $n ^ $mask;\n    return $n;\n}\n\n$n = 0b11111111111111111111111111111111;\necho decbin(toggle_middle_bits($n));",
    "    $mask = 0x7FFFFFFF;\n    $mask = $mask ^ 0xFFFFFFFC;\n    return $n ^ $mask;\n}\n\n$n = 0xFFFFFFFF;\necho toggle_middle_bits($n);",
    "    $first_bit = $n & 1;\n    $last_bit = ($n >> 1) & 1;\n    $x = $n ^ ((1 << $last_bit) - 1);\n    $x = $x ^ ((1 << ($first_bit + 1)) - 1);\n    return $x;\n}\n\necho toggle_middle_bits(13);",
    "    $mask = 0xFFFFFFFF;\n    $mask = $mask >> 2;\n    $mask = ~$mask;\n    return $n ^ $mask;\n}\n\n$n = 13;\necho toggle_middle_bits($n);",
    "    $first_bit = $n & 1;\n    $last_bit = $n & (1 << (PHP_INT_SIZE * 8 - 1));\n    $mask = (1 << (PHP_INT_SIZE * 8 - 2)) - 1;\n    $n = $n ^ $mask;\n    $n = $n | $first_bit;\n    $n = $n | $last_bit;\n    return $n;\n}\n\n$n = 0b10101010101010101010101010101010;\necho decbin(toggle_middle_bits($n)) . PHP_EOL;",
    "    $first_bit = $n & 1;\n    $last_bit = ($n >> 1) & 1;\n    $x = ($first_bit ^ $last_bit);\n    $x = ($x << 1) | 1;\n    $mask = $x << 2;\n    $mask = $mask - 1;\n    $n = $n ^ $mask;\n    return $n;\n}\n\n$n = 13;\necho toggle_middle_bits($n);",
    "    $first_bit = $n & 1;\n    $last_bit = $n & (1 << (PHP_INT_SIZE * 8 - 1));\n    $mask = (1 << (PHP_INT_SIZE * 8 - 2)) - 1;\n    $mask = $mask & ~($first_bit | $last_bit);\n    return ($n ^ $mask);\n}\n\n$n = 23;\necho toggle_middle_bits($n);\n",
    "    $first_bit = $n & 1;\n    $last_bit = $n & (1 << (PHP_INT_SIZE * 8 - 1));\n    $mask = (1 << (PHP_INT_SIZE * 8 - 2)) - 1;\n    $mask = $mask & ~($first_bit | $last_bit);\n    return ($n ^ $mask);\n}\n\n$n = 13;\necho toggle_middle_bits($n);",
    "\t$mask = 0x7FFFFFFF;\n\t$mask = $mask >> 1;\n\t$mask = $mask << 1;\n\t$mask = ~$mask;\n\t$n = $n ^ $mask;\n\treturn $n;\n}\n\necho toggle_middle_bits(10);",
    "    $first_bit = $n & 1;\n    $last_bit = $n & (1 << (PHP_INT_SIZE * 8 - 1));\n    $mask = ~((1 << (PHP_INT_SIZE * 8 - 1)) | 1);\n    $n = $n ^ $mask;\n    $n = $n | $first_bit;\n    $n = $n | $last_bit;\n    return $n;\n}\n\necho toggle_middle_bits(10);",
    "    $first_bit = $n & 1;\n    $last_bit = ($n >> 1) & 1;\n    $x = $n ^ ((1 << ($last_bit + 1)) - 1);\n    $x = $x ^ ((1 << ($first_bit + 1)) - 1);\n    return $x;\n}\n\n$n = 13;\necho toggle_middle_bits($n);",
    "    $first_bit = $n & 1;\n    $last_bit = ($n >> 1) & 1;\n    $x = $first_bit ^ $last_bit;\n    $x = ($x << 1) | 1;\n    $x = $x << (PHP_INT_SIZE * 8 - 3);\n    return $n ^ $x;\n}\n\n$n = 13;\necho toggle_middle_bits($n);",
    "    $first_bit = ($n & 1);\n    $last_bit = ($n & (1 << (strlen($n) - 1)));\n    $x = $n ^ ((1 << (strlen($n) - 1)) - 1);\n    return ($x ^ $first_bit) | $last_bit;\n}\n\necho toggle_middle_bits(10);",
    "    $mask = (1 << ($n - 1)) | 1;\n    return $n ^ $mask;\n}\n\necho toggle_middle_bits(10);",
    "    $mask = 0xFFFFFFFF;\n    $mask = $mask >> 2;\n    $mask = $mask << 2;\n    return $n ^ $mask;\n}\n\necho toggle_middle_bits(50);",
    "    $mask = 0xFFFFFFFF;\n    $mask = $mask >> 2;\n    $mask = $mask << 2;\n    $n = $n ^ $mask;\n    return $n;\n}\n\n$n = 10;\necho toggle_middle_bits($n);",
    "    $mask = 0xFFFFFFFF;\n    $mask = $mask >> 2;\n    $mask = $mask << 2;\n    return $n ^ $mask;\n}\n\n$n = 10;\necho toggle_middle_bits($n);",
    "    $first_bit = ($n & 1);\n    $last_bit = ($n & (1 << (PHP_INT_SIZE * 8 - 1)));\n    $mask = (1 << (PHP_INT_SIZE * 8 - 2)) - 1;\n    $mask = $mask ^ ($first_bit | $last_bit);\n    return ($n ^ $mask);\n}\n\n$n = 23;\necho toggle_middle_bits($n);",
    "    $first_bit = ($n & (1 << 0)) != 0;\n    $last_bit = ($n & (1 << (strlen($n) - 1))) != 0;\n    $n = $n ^ ((1 << (strlen($n) - 1)) - 1);\n    if ($first_bit) {\n        $n = $n | (1 << 0);\n    }\n    if ($last_bit) {\n        $n = $n | (1 << (strlen($n) - 1));\n    }\n    return $n;\n}\n\necho toggle_middle_bits(13);",
    "    $mask = 0x7FFFFFFF;\n    $mask = $mask >> 1;\n    $mask = $mask << 1;\n    return $n ^ $mask;\n}\n\necho toggle_middle_bits(10);",
    "    $mask = 0xFFFFFFFF;\n    $mask = $mask >> 2;\n    $mask = $mask << 2;\n    $n = $n ^ $mask;\n    return $n;\n}\n\n$n = 0b10101010101010101010101010101010;\necho decbin(toggle_middle_bits($n));",
    "    $first_bit = $n & 1;\n    $last_bit = $n & (1 << (PHP_INT_SIZE * 8 - 1));\n    $mask = (1 << (PHP_INT_SIZE * 8 - 2)) - 1;\n    $n = $n ^ $mask;\n    $n = $n | $first_bit;\n    $n = $n | $last_bit;\n    return $n;\n}\n\n$n = 0b10101010101010101010101010101010;\nprintf(\"%b\\n\", $n);\n$n = toggle_middle_bits($n);\nprintf(\"%b\\n\", $n);\n",
    "    $mask = 0xffffffff;\n    $mask = $mask >> 2;\n    $mask = $mask << 2;\n    return $n ^ $mask;\n}\n\necho toggle_middle_bits(10);",
    "    $first_bit = ($n & 1);\n    $last_bit = ($n & (1 << (strlen($n) - 1)));\n    $x = $n ^ ((1 << (strlen($n) - 1)) - 1);\n    $x = $x ^ ((1 << 1) - 1);\n    $x = $x | ($first_bit << (strlen($n) - 1));\n    $x = $x | $last_bit;\n    return $x;\n}\n\necho toggle_middle_bits(10);",
    "    $first_bit = $n & 1;\n    $last_bit = ($n >> 1) & 1;\n    $x = ($n ^ ($n >> 1)) >> 2;\n    return ($x << 2) | ($first_bit << 1) | $last_bit;\n}\n\n$n = 13;\necho toggle_middle_bits($n);",
    "    $first_bit = ($n >> 1) << 1;\n    $last_bit = $n & 1;\n    $x = $n >> 2;\n    $x = ~$x;\n    $x = $x << 2;\n    $x = $x >> 2;\n    $x = $x << 1;\n    $x = $x | $last_bit;\n    $x = $x | $first_bit;\n    return $x;\n}\n\necho toggle_middle_bits(50);",
    "    $first_bit = $n & 1;\n    $last_bit = ($n >> 1) & 1;\n    $x = $n ^ ($n & ((1 << $last_bit) - 1));\n    $x = $x ^ ((1 << ($last_bit - 1)) - 1);\n    $x = $x | ($first_bit << ($last_bit - 1));\n    return $x;\n}\n\necho toggle_middle_bits(13);",
    "    $n = $n ^ ($n >> 1);\n    $n = $n ^ ($n >> 2);\n    $n = $n ^ ($n >> 4);\n    $n = $n ^ ($n >> 8);\n    $n = $n ^ ($n >> 16);\n    return $n;\n}\n\n$n = 10;\necho toggle_middle_bits($n);",
    "    $first_bit = $n & 1;\n    $last_bit = ($n >> 1) & 1;\n    $x = ($n >> 2) << 2;\n    $x = $x ^ ((1 << ($n - 3)) - 1);\n    $x = $x | ($first_bit << ($n - 2)) | $last_bit;\n    return $x;\n}\n\n$n = 10;\necho toggle_middle_bits($n);",
    "    $first_bit = $n & 1;\n    $last_bit = ($n >> 1) & 1;\n    $x = ($n >> 2) << 2;\n    $x = $x ^ ((1 << ($n - 3)) - 1);\n    $x = $x | ($first_bit << ($n - 2)) | $last_bit;\n    return $x;\n}\n\n$n = 8;\necho toggle_middle_bits($n);",
    "    $first_bit = $n & 1;\n    $last_bit = ($n >> 1) & 1;\n    $x = ($n >> 1) ^ $n;\n    $x = $x >> 1;\n    $x = $x << 1;\n    $x = $x | $first_bit;\n    $x = $x << 1;\n    $x = $x | $last_bit;\n    return $x;\n}\n\n$n = 13;\necho toggle_middle_bits($n);",
    "    $mask = 0xFFFFFFFF;\n    $mask = $mask >> 1;\n    $mask = $mask << 1;\n    $mask = ~$mask;\n    return $n ^ $mask;\n}\n\necho toggle_middle_bits(10);",
    "    $first_bit = $n & 1;\n    $last_bit = $n & (1 << (PHP_INT_SIZE * 8 - 1));\n    $mask = (1 << (PHP_INT_SIZE * 8 - 2)) - 1;\n    $mask = $mask & ~($first_bit);\n    $mask = $mask & ~($last_bit);\n    return ($n ^ $mask);\n}\n\necho toggle_middle_bits(10);",
    "    $first_bit = $n & 1;\n    $last_bit = ($n >> 1) & 1;\n    $x = $n ^ ((1 << $last_bit) - 1);\n    $x = $x ^ ((1 << ($first_bit + 1)) - 1);\n    return $x;\n}\n\necho toggle_middle_bits(13);",
    "    $first_bit = $n & 1;\n    $last_bit = $n & (1 << (PHP_INT_SIZE * 8 - 1));\n    $mask = (1 << (PHP_INT_SIZE * 8 - 2)) - 1;\n    $mask = ~$mask;\n    $n = $n ^ $mask;\n    $n = $n | $first_bit;\n    $n = $n | $last_bit;\n    return $n;\n}\n\n$n = 0b1101010101010101010101010101010101010101010101010101010101010101;\necho decbin(toggle_middle_bits($n));\n",
    "    $mask = 0x7FFFFFFF;\n    $mask = $mask ^ 0x55555555;\n    return $n ^ $mask;\n}\n\n$n = 23;\necho toggle_middle_bits($n);",
    "    $mask = (1 << ($n - 1)) - 1;\n    $mask = $mask ^ ($mask >> 1);\n    return $n ^ $mask;\n}\n\necho toggle_middle_bits(17);",
    "    $first_bit = ($n >> 1) << 1;\n    $last_bit = $n & 1;\n    $x = $n >> 2;\n    $x = ~$x;\n    $x = $x << 2;\n    $x = $x >> 2;\n    return $first_bit | $x | $last_bit;\n}\n\n$n = 50;\necho \"Number before toggle: \" . $n . \"\\n\";\necho \"Number after toggle: \" . toggle_middle_bits($n) . \"\\n\";",
    "    $mask = 0xFFFFFFFF;\n    $mask = $mask >> 2;\n    $mask = $mask << 2;\n    return $n ^ $mask;\n}\n\necho toggle_middle_bits(10);",
    "    $first_bit = $n & 1;\n    $last_bit = ($n >> 1) & 1;\n    $x = ($first_bit ^ $last_bit) << 1;\n    $mask = (1 << $x) - 1;\n    $n = $n ^ $mask;\n    return $n;\n}\n\n$n = 13;\necho toggle_middle_bits($n);",
    "    $mask = 0x7FFFFFFF;\n    $mask = $mask >> 1;\n    $mask = $mask << 1;\n    return $n ^ $mask;\n}\n\necho toggle_middle_bits(10);",
    "    $first_bit = $n & 1;\n    $last_bit = ($n >> 1) & 1;\n    $x = ($first_bit ^ $last_bit) << 1;\n    $n = $n ^ $x;\n    return $n;\n}\n\necho toggle_middle_bits(13);",
    "    $mask = 0xFFFFFFFF;\n    $mask = $mask >> 2;\n    $mask = $mask << 2;\n    return $n ^ $mask;\n}\n\necho toggle_middle_bits(10);",
    "    $first_bit = $n & 1;\n    $last_bit = ($n >> 1) & 1;\n    $x = ($n >> 2) << 2;\n    $x = $x ^ ((1 << ($n - 2)) - 1);\n    $x = $x | ($first_bit << ($n - 1)) | $last_bit;\n    return $x;\n}\n",
    "    $first_bit = $n & 1;\n    $last_bit = ($n >> 1) & 1;\n    $x = $n ^ ((1 << $last_bit) - 1);\n    $x = $x ^ ((1 << ($first_bit + 1)) - 1);\n    return $x;\n}\n\necho toggle_middle_bits(13);",
    "    $first_bit = $n & 1;\n    $last_bit = ($n >> 1) & 1;\n    $x = ($n >> 2) << 2;\n    $x = $x ^ ((1 << ($n >> 2)) - 1);\n    $x = $x | ($first_bit << 1);\n    $x = $x | $last_bit;\n    return $x;\n}\n\necho toggle_middle_bits(10);",
    "    $first_bit = $n & 1;\n    $last_bit = ($n >> 1) & 1;\n    $x = $n ^ ((1 << $last_bit) - 1);\n    $x = $x ^ ((1 << ($first_bit + 1)) - 1);\n    return $x;\n}\n\necho toggle_middle_bits(50);",
    "    $mask = 0b11111111111111111111111111111111;\n    $mask = $mask ^ 0b11;\n    return $n ^ $mask;\n}\n\necho toggle_middle_bits(0b11111111111111111111111111111111);",
    "    $first_bit = $n & 1;\n    $last_bit = $n & (1 << (PHP_INT_SIZE * 8 - 1));\n    $mask = (1 << (PHP_INT_SIZE * 8 - 2)) - 1;\n    $n = $n ^ $mask;\n    $n = $n | $first_bit;\n    $n = $n | $last_bit;\n    return $n;\n}\n\necho toggle_middle_bits(10) . \"\\n\";\necho toggle_middle_bits(15) . \"\\n\";\necho toggle_middle_bits(7) . \"\\n\";\necho toggle_middle_bits(5) . \"\\n\";\necho toggle_middle_bits(3) . \"\\n\";\necho toggle_middle_bits(2) . \"\\n\";\necho toggle_middle_bits(1) . \"\\n\";\necho toggle_middle_bits(0) . \"\\n\";\necho toggle_middle_bits(8) . \"\\n\";\necho toggle_middle_bits(16) . \"\\n\";\necho toggle_middle_bits(32) . \"\\n\";\necho toggle_middle_bits(64) . \"\\n\";\necho toggle_middle_bits(128) . \"\\n\";\necho toggle_middle_bits(256) . \"\\n\";\necho toggle_middle_bits(512) . \"\\n\";\necho toggle_middle_bits(1024) . \"\\n\";\necho toggle_middle_bits(2048) . \"\\n\";\necho toggle_middle_bits(4096) . \"\\n\";\necho toggle_middle_bits(8192) . \"\\n\";\necho toggle_middle_bits(16384) . \"\\n\";\necho toggle_middle_bits(32768) . \"\\n\";\necho toggle_middle_bits(65536) . \"\\n\";\necho toggle_middle_bits(131072) . \"\\n\";\necho toggle_middle_bits(262144) . \"\\n\";\necho toggle_middle_bits(524288) . \"\\n\";\necho toggle_middle_bits(1048576) . \"\\n\";\necho toggle_middle_bits(2097152) . \"\\n\";\necho toggle_middle_bits(4194304) . \"\\",
    "    $mask = 0xFFFFFFFF;\n    $mask = $mask >> 2;\n    $mask = $mask << 2;\n    return $n ^ $mask;\n}\n\necho toggle_middle_bits(0b11111111111111111111111111111111);",
    "    $mask = (1 << ($n - 1)) | 1;\n    return $n ^ ($mask << 1) - 1;\n}\n\necho toggle_middle_bits(10);",
    "    $mask = 0xFFFFFFFF;\n    $mask = $mask >> 2;\n    $mask = $mask << 2;\n    $n = $n ^ $mask;\n    return $n;\n}\n\necho toggle_middle_bits(28);",
    "    $first_bit = ($n & 1);\n    $last_bit = ($n & (1 << (strlen(decbin($n)) - 1)));\n    $mask = (1 << (strlen(decbin($n)) - 1)) - 1;\n    $n = $n ^ $mask;\n    $n = $n | ($first_bit << (strlen(decbin($n)) - 1));\n    $n = $n | $last_bit;\n    return $n;\n}\n\necho toggle_middle_bits(10);",
    "    $mask = 0x7FFFFFFF;\n    $mask = $mask ^ (1 << 0);\n    $mask = $mask ^ (1 << 31);\n    return $n ^ $mask;\n}\n\necho toggle_middle_bits(0b11111111111111111111111111111111) . \"\\n\";\necho toggle_middle_bits(0b11111111111111111111111111111110) . \"\\n\";\necho toggle_middle_bits(0b11111111111111111111111111111101) . \"\\n\";\necho toggle_middle_bits(0b11111111111111111111111111111100) . \"\\n\";\necho toggle_middle_bits(0b11111111111111111111111111111011) . \"\\n\";\necho toggle_middle_bits(0b11111111111111111111111111111010) . \"\\n\";\necho toggle_middle_bits(0b11111111111111111111111111111001) . \"\\n\";\necho toggle_middle_bits(0b11111111111111111111111111111000) . \"\\n\";\necho toggle_middle_bits(0b11111111111111111111111111110111) . \"\\n\";\necho toggle_middle_bits(0b11111111111111111111111111110110) . \"\\n\";\necho toggle_middle_bits(0b11111111111111111111111111110101) . \"\\n\";\necho toggle_middle_bits(0b11111111111111111111111111110100) . \"\\n\";\necho toggle_middle_bits(0b11111111111111111111111111110011) . \"\\n\";\necho toggle_middle_bits(0b11111111111111111111111111110010) . \"\\n\";\necho toggle_middle_bits(0b11111111111111111111111111110001) . \"\\n\";\necho toggle_middle_bits(0b11111111111111111111111111110000) . \"\\n\";\necho toggle_middle_bits(0b11111111111111111111111111101111) . \"\\n\";\necho toggle_middle_bits(0b11111111111111111111111111101110) . \"\\n\";\necho toggle_middle_bits(0b11111111111111111111111111101101) . \"\\n\";\necho toggle_middle_bits(0b1111111111111111",
    "    $first_bit = ($n & 1);\n    $last_bit = ($n & (1 << (floor(log($n, 2))))) >> (floor(log($n, 2)));\n    $n = $n >> 1;\n    $n = $n << 1;\n    $n = $n ^ ((1 << (floor(log($n, 2)))) - 1);\n    $n = $n >> 1;\n    $n = $n << 1;\n    $n = $n | $first_bit;\n    $n = $n | ($last_bit << (floor(log($n, 2))));\n    return $n;\n}\n\necho toggle_middle_bits(50);",
    "    $mask = (1 << ($n - 1)) | 1;\n    return $n ^ $mask;\n}\n\necho toggle_middle_bits(10);",
    "    $first_bit = $n & 1;\n    $last_bit = ($n >> 1) & 1;\n    $x = ($n >> 1) ^ $n;\n    $x = $x >> 2;\n    $x = $x << 2;\n    $x = $x ^ $n;\n    $x = $x >> 1;\n    $x = $x << 1;\n    $x = $x | $first_bit;\n    $x = $x << 1;\n    $x = $x | $last_bit;\n    return $x;\n}\n\n$n = 15;\necho toggle_middle_bits($n);",
    "    $first_bit = $n & 1;\n    $last_bit = $n & (1 << (PHP_INT_SIZE * 8 - 1));\n    $mask = (1 << (PHP_INT_SIZE * 8 - 2)) - 1;\n    $n = $n ^ $mask;\n    $n = $n | $first_bit;\n    $n = $n | $last_bit;\n    return $n;\n}\n\necho toggle_middle_bits(10);",
    "    $first_bit = $n & 1;\n    $last_bit = $n & (1 << (PHP_INT_SIZE * 8 - 1));\n    $mask = (1 << (PHP_INT_SIZE * 8 - 2)) - 1;\n    $n = $n ^ $mask;\n    $n = $n | ($first_bit << (PHP_INT_SIZE * 8 - 1));\n    $n = $n | $last_bit;\n    return $n;\n}\n\n$n = 5;\necho toggle_middle_bits($n);",
    "    $mask = (1 << ($n - 1)) | 1;\n    return $n ^ $mask;\n}\n",
    "    $first_bit = $n & 1;\n    $last_bit = ($n >> 1) & 1;\n    $x = $n ^ ((1 << $last_bit) - 1);\n    $x = $x ^ ((1 << ($first_bit + 1)) - 1);\n    return $x;\n}\n\necho toggle_middle_bits(13);",
    "    $mask = (1 << ($n - 1)) | 1;\n    $mask = $mask | ($mask - 1);\n    return $n ^ $mask;\n}\n\n$n = 13;\necho toggle_middle_bits($n);",
    "    $mask = 0xFFFFFFFF;\n    $mask = $mask >> 2;\n    $mask = $mask << 2;\n    $n = $n ^ $mask;\n    return $n;\n}\n\n$n = 0b11011010;\necho decbin(toggle_middle_bits($n));",
    "    $first_bit = $n & 1;\n    $last_bit = $n & (1 << (PHP_INT_SIZE * 8 - 1));\n    $mask = (1 << (PHP_INT_SIZE * 8 - 2)) - 1;\n    $n = $n ^ $mask;\n    $n = $n | ($first_bit << (PHP_INT_SIZE * 8 - 1));\n    $n = $n | $last_bit;\n    return $n;\n}\n\n$n = 0b110101;\necho decbin(toggle_middle_bits($n)) . PHP_EOL;\n\n$n = 0b11010101;\necho decbin(toggle_middle_bits($n)) . PHP_EOL;\n\n$n = 0b1101010101;\necho decbin(toggle_middle_bits($n)) . PHP_EOL;\n\n$n = 0b110101010101;\necho decbin(toggle_middle_bits($n)) . PHP_EOL;\n\n$n = 0b11010101010101;\necho decbin(toggle_middle_bits($n)) . PHP_EOL;\n\n$n = 0b1101010101010101;\necho decbin(toggle_middle_bits($n)) . PHP_EOL;\n\n$n = 0b110101010101010101;\necho decbin(toggle_middle_bits($n)) . PHP_EOL;\n\n$n = 0b11010101010101010101;\necho decbin(toggle_middle_bits($n)) . PHP_EOL;\n\n$n = 0b1101010101010101010101;\necho decbin(toggle_middle_bits($n)) . PHP_EOL;\n\n$n = 0b110101010101010101010101;\necho decbin(toggle_middle_bits($n)) . PHP_EOL;\n\n$n = 0b11010101010101010101010101;\necho decbin(toggle_middle_bits($n)) . PHP_EOL;\n\n$n = 0b110101",
    "    $first_bit = $n & 1;\n    $last_bit = ($n >> 1) & 1;\n    $x = $n ^ ((1 << $n) - 1);\n    $x = $x >> 2;\n    $x = $x << 2;\n    $x = $x | ($first_bit << 1) | $last_bit;\n    return $x;\n}\n\necho toggle_middle_bits(50);",
    "    $first_bit = $n & 1;\n    $last_bit = ($n >> 1) & 1;\n    $x = ($n >> 2) ^ ((1 << ($n - 3)) - 1);\n    return ($x << 2) | ($first_bit << 1) | $last_bit;\n}\n\necho toggle_middle_bits(50);",
    "    $first_bit = $n & 1;\n    $last_bit = ($n >> 1) & 1;\n    $x = $n ^ ((1 << $last_bit) - 1);\n    $x = $x ^ ((1 << ($first_bit + 1)) - 1);\n    return $x;\n}\n\necho toggle_middle_bits(13);",
    "    $mask = 0xFFFFFFFF;\n    $mask = $mask >> 2;\n    $mask = $mask << 2;\n    return ($n ^ $mask);\n}\n\necho toggle_middle_bits(0b10101010101010101010101010101010);",
    "    $first_bit = $n & 1;\n    $last_bit = ($n >> 1) & 1;\n    $x = $n ^ ((1 << $last_bit) - 1);\n    $x = $x ^ ((1 << ($first_bit + 1)) - 1);\n    return $x;\n}\n\necho toggle_middle_bits(10);",
    "    $first_bit = ($n >> 1) << 1;\n    $last_bit = $n & 1;\n    $mask = (1 << ($n - 2)) - 1;\n    $mask = ~$mask;\n    $n = $n ^ $mask;\n    $n = $n | $first_bit;\n    $n = $n | $last_bit;\n    return $n;\n}\n\n$n = 13;\necho toggle_middle_bits($n);\n",
    "    $first_bit = $n & 1;\n    $last_bit = ($n >> 1) & 1;\n    $x = $n ^ ((1 << $last_bit) - 1);\n    $x = $x ^ ((1 << ($first_bit + 1)) - 1);\n    return $x;\n}\n\n$n = 13;\necho toggle_middle_bits($n);",
    "    // Get the position of the first set bit from right\n    $first_set_bit_pos = log($n & -$n, 2) + 1;\n    // Get the position of the last set bit from right\n    $last_set_bit_pos = log(($n & ~($n-1)), 2) + 1;\n    // XOR the number with a number that has set bits\n    // from first set bit position + 1 to last set bit position - 1\n    return $n ^ (((1 << ($last_set_bit_pos - $first_set_bit_pos - 1)) - 1) << ($first_set_bit_pos + 1));\n}\n",
    "    $first_bit = ($n >> 1) << 1;\n    $last_bit = $n & 1;\n    $x = $n >> 2;\n    $x = ~$x;\n    $x = $x << 2;\n    $x = $x >> 2;\n    return $first_bit | $x | $last_bit;\n}\n\necho toggle_middle_bits(13);",
    "    $mask = 0xFFFFFFFF;\n    $mask = $mask >> 2;\n    $mask = $mask << 2;\n    $n = $n ^ $mask;\n    return $n;\n}\n\n$n = 0b11010101;\necho decbin(toggle_middle_bits($n));",
    "    $first_bit = $n & 1;\n    $last_bit = ($n >> 1) & 1;\n    $x = $n ^ ((1 << $n) - 1);\n    $x = $x >> 2;\n    $x = $x << 2;\n    $x = $x | ($first_bit << 1) | $last_bit;\n    return $x;\n}\n\necho toggle_middle_bits(50);",
    "    $first_bit = $n & 1;\n    $last_bit = ($n >> 1) & 1;\n    $x = $n ^ $n;\n    $x = $x >> 2;\n    $x = $x << 2;\n    $x = $x | $first_bit;\n    $x = $x << 1;\n    $x = $x | $last_bit;\n    return $x;\n}\n\necho toggle_middle_bits(10);",
    "    $first_bit = $n & 1;\n    $last_bit = $n & (1 << (strlen($n) - 1));\n    $x = $n ^ ((1 << (strlen($n) - 1)) - 1);\n    $x = $x ^ ((1 << 1) - 1);\n    $x = $x | $first_bit;\n    $x = $x | $last_bit;\n    return $x;\n}\n\necho toggle_middle_bits(10);",
    "    $first_bit = $n & 1;\n    $last_bit = ($n >> 1) & 1;\n    $x = $n ^ $first_bit;\n    $x = $x ^ $last_bit;\n    return $x;\n}\n\n$n = 10;\necho toggle_middle_bits($n);",
    "    $mask = 0;\n    for ($i = 1; $i < sizeof($n) - 1; $i++) {\n        $mask = $mask | (1 << $i);\n    }\n    return $n ^ $mask;\n}\n\n$n = 0b101010101;\necho $n . \"\\n\";\necho toggle_middle_bits($n) . \"\\n\";",
    "    $first_bit = ($n >> 1) << 1;\n    $last_bit = $n & 1;\n    $x = $n >> 2;\n    $x = ~$x;\n    $x = $x << 2;\n    $x = $x >> 2;\n    return $first_bit | $x | $last_bit;\n}\n\necho toggle_middle_bits(10);",
    "    $first_bit = $n & 1;\n    $last_bit = ($n & (1 << (PHP_INT_SIZE * 8 - 1))) >> (PHP_INT_SIZE * 8 - 1);\n    $mask = (1 << (PHP_INT_SIZE * 8 - 2)) - 1;\n    $n = $n ^ $mask;\n    $n = $n | ($first_bit << (PHP_INT_SIZE * 8 - 2));\n    $n = $n | ($last_bit << 1);\n    return $n;\n}\n\necho toggle_middle_bits(7);",
    "    $first_bit = $n & 1;\n    $last_bit = ($n >> 1) & 1;\n    $x = $n ^ ((1 << $last_bit) - 1);\n    $x = $x ^ ((1 << ($first_bit + 1)) - 1);\n    return $x;\n}\n\n$n = 10;\necho toggle_middle_bits($n);",
    "    $first_bit = $n & 1;\n    $last_bit = ($n >> 1) & 1;\n    $x = $n ^ ((1 << $last_bit) - 1);\n    $x = $x ^ ((1 << ($first_bit + 1)) - 1);\n    return $x;\n}\n\necho toggle_middle_bits(13);",
    "    $first_bit = $n & 1;\n    $last_bit = ($n >> 1) & 1;\n    $x = $n ^ ((1 << $last_bit) - 1);\n    $x = $x ^ ((1 << ($first_bit + 1)) - 1);\n    return $x;\n}\n\n$n = 13;\necho toggle_middle_bits($n);",
    "    $first_bit = ($n >> 1) << 1;\n    $last_bit = $n & 1;\n    $middle_bits = $n >> 2;\n    $middle_bits = ~$middle_bits;\n    $middle_bits = $middle_bits << 2;\n    $middle_bits = $middle_bits >> 2;\n    return $first_bit | $middle_bits | $last_bit;\n}\n\necho toggle_middle_bits(50);",
    "    $mask = 0xFFFFFFFF;\n    $mask = $mask >> 2;\n    $mask = $mask << 2;\n    return $n ^ $mask;\n}\n\n$n = 0xFFFFFFFF;\necho toggle_middle_bits($n);",
    "    $mask = (1 << ($n - 1)) | 1;\n    return $n ^ $mask;\n}\n\n$n = 10;\necho toggle_middle_bits($n);",
    "    $mask = 0xFFFFFFFF;\n    $mask = $mask >> 2;\n    $mask = $mask << 2;\n    return $n ^ $mask;\n}\n\necho toggle_middle_bits(28);",
    "    $first_bit = ($n >> 1) << 1;\n    $last_bit = $n & 1;\n    $x = $n >> 2;\n    $x = ~$x;\n    $x = $x << 2;\n    $x = $x >> 2;\n    return $first_bit | $x | $last_bit;\n}\n\necho toggle_middle_bits(10);",
    "    $mask = (1 << ($n - 1)) - 1;\n    $mask = $mask ^ $mask >> 1;\n    return $n ^ $mask;\n}\n\n$n = 10;\necho toggle_middle_bits($n);",
    "    $first_bit = $n & 1;\n    $last_bit = ($n >> 1) & 1;\n    $x = $n ^ ((1 << $last_bit) - 1);\n    $x = $x ^ ((1 << ($first_bit + 1)) - 1);\n    return $x;\n}\n\n$n = 13;\necho toggle_middle_bits($n);",
    "    $first_bit = $n & 1;\n    $last_bit = ($n >> 1) & 1;\n    $x = $n ^ ((1 << $last_bit) - 1);\n    $x = $x ^ ((1 << ($first_bit + 1)) - 1);\n    return $x;\n}\n\necho toggle_middle_bits(10);",
    "    $first_bit = $n & 1;\n    $last_bit = $n & (1 << (PHP_INT_SIZE * 8 - 1));\n    $mask = (1 << (PHP_INT_SIZE * 8 - 2)) - 1;\n    $n = $n ^ $mask;\n    $n = $n | $first_bit;\n    $n = $n | $last_bit;\n    return $n;\n}\n\necho toggle_middle_bits(13);",
    "    $first_bit = $n & 1;\n    $last_bit = ($n >> 1) & 1;\n    $x = ($n >> 1) ^ $n;\n    $x = $x >> 2;\n    $x = $x << 2;\n    $x = $x | $first_bit;\n    $x = $x << 1;\n    $x = $x | $last_bit;\n    return $x;\n}\n\necho toggle_middle_bits(50);",
    "    $first_bit = $n & 1;\n    $last_bit = $n & (1 << (PHP_INT_SIZE * 8 - 1));\n    $mask = (1 << (PHP_INT_SIZE * 8 - 2)) - 1;\n    $n = $n ^ $mask;\n    $n = $n | $first_bit;\n    $n = $n | $last_bit;\n    return $n;\n}\n\necho toggle_middle_bits(10);",
    "    $first_bit = $n & 1;\n    $last_bit = ($n >> 1) & 1;\n    $x = $first_bit ^ $last_bit;\n    $x = ($x << 1) | 1;\n    $x = $x << (PHP_INT_SIZE * 8 - 3);\n    return $n ^ $x;\n}\n\necho toggle_middle_bits(10);\n",
    "    $first_bit = $n & 1;\n    $last_bit = $n & (1 << (PHP_INT_SIZE * 8 - 1));\n    $mask = (1 << (PHP_INT_SIZE * 8 - 2)) - 1;\n    $mask = $mask & ~($first_bit);\n    $mask = $mask & ~($last_bit >> 1);\n    return ($n ^ $mask);\n}\n\n$n = 5;\necho toggle_middle_bits($n);",
    "    $first_bit = $n & 1;\n    $last_bit = ($n >> 1) & 1;\n    $x = ($n >> 2) << 2;\n    $x = $x ^ ((1 << ($n - 3)) - 1);\n    $x = $x | ($first_bit << ($n - 2)) | $last_bit;\n    return $x;\n}\necho toggle_middle_bits(10);",
    "    $mask = 0xFFFFFFFF;\n    $mask = $mask >> 2;\n    $mask = ~$mask;\n    return ($n ^ $mask);\n}\n\n$n = 13;\necho toggle_middle_bits($n);",
    "    $mask = (1 << ($n - 1)) | 1;\n    return $n ^ $mask;\n}\n\necho toggle_middle_bits(10);",
    "    $first_bit = $n & 1;\n    $last_bit = ($n >> 1) & 1;\n    $x = $n ^ $n;\n    $x = $x >> 2;\n    $x = $x << 2;\n    $x = $x | $first_bit;\n    $x = $x << 1;\n    $x = $x | $last_bit;\n    return $x;\n}\n\n$n = 10;\necho toggle_middle_bits($n);",
    "    $mask = 0xFFFFFFFF;\n    $mask = $mask >> 2;\n    $mask = $mask << 2;\n    return $n ^ $mask;\n}\n\necho toggle_middle_bits(0b1101010101010101010101010101010101010101010101010101010101010101);",
    "    $mask = 0xFFFFFFFF;\n    $mask = $mask >> 2;\n    $mask = $mask << 2;\n    return $n ^ $mask;\n}\n\necho toggle_middle_bits(5);",
    "    $first_bit = ($n >> 1) << 1;\n    $last_bit = $n & 1;\n    $middle_bits = $n >> 2;\n    $middle_bits = ~$middle_bits;\n    $middle_bits = $middle_bits << 2;\n    $middle_bits = $middle_bits >> 2;\n    return $first_bit | $middle_bits | $last_bit;\n}\n\necho toggle_middle_bits(50);",
    "    $mask = (1 << ($n - 1)) | 1;\n    $mask = $mask | ($mask - 1);\n    return $n ^ $mask;\n}\n\n$n = 10;\necho toggle_middle_bits($n);",
    "    $mask = 0;\n    $mask = (1 << $n) - 1;\n    $mask = $mask ^ (1 << 1);\n    $mask = $mask ^ (1 << ($n - 1));\n    return $mask;\n}\n\necho toggle_middle_bits(5);",
    "    $first_bit = $n & 1;\n    $last_bit = ($n >> 1) & 1;\n    $x = $n ^ $n;\n    $x = $x | $first_bit;\n    $x = $x | ($last_bit << 1);\n    $n = $n >> 2;\n    while($n) {\n        $x = $x << 1;\n        $x = $x | 1;\n        $n = $n >> 1;\n    }\n    return $x;\n}\n\n$n = 15;\necho toggle_middle_bits($n);",
    "    $first_bit = $n & 1;\n    $last_bit = ($n >> 1) & 1;\n    $x = $n ^ $n;\n    $x = $x | $first_bit;\n    $x = $x | ($last_bit << 1);\n    return $x;\n}\n\n$n = 7;\necho toggle_middle_bits($n);",
    "    $first_bit = $n & 1;\n    $last_bit = ($n >> 1) & 1;\n    $x = ($n >> 2) << 2;\n    $x = $x ^ ((1 << ($n >> 2)) - 1);\n    $x = $x | ($first_bit << 1);\n    $x = $x | $last_bit;\n    return $x;\n}\n\n$n = 13;\necho toggle_middle_bits($n);",
    "    $mask = (1 << ($n - 1)) | 1;\n    return $n ^ $mask;\n}\n\necho toggle_middle_bits(10);",
    "    $first_bit = $n & 1;\n    $last_bit = $n & (1 << (PHP_INT_SIZE * 8 - 1));\n    $mask = (1 << (PHP_INT_SIZE * 8 - 2)) - 1;\n    $n = $n ^ $mask;\n    $n = $n | $first_bit;\n    $n = $n | $last_bit;\n    return $n;\n}\n\necho toggle_middle_bits(10);",
    "    $first_bit = ($n & 1);\n    $last_bit = ($n & (1 << (strlen($n) - 1)));\n    $xor_mask = ($first_bit ^ $last_bit);\n    $xor_mask = ($xor_mask | ($xor_mask << 1));\n    $xor_mask = ($xor_mask | ($xor_mask << 2));\n    $xor_mask = ($xor_mask | ($xor_mask << 4));\n    $xor_mask = ($xor_mask | ($xor_mask << 8));\n    $xor_mask = ($xor_mask | ($xor_mask << 16));\n    return ($n ^ $xor_mask);\n}\n\necho toggle_middle_bits(17);\n",
    "    $mask = 0xFFFFFFFF;\n    $mask = $mask >> 2;\n    $mask = $mask << 2;\n    return ($n ^ $mask);\n}\n\necho toggle_middle_bits(10);",
    "    $mask = (1 << ($n - 1)) | 1;\n    return $n ^ $mask;\n}\n\n$n = 13;\necho toggle_middle_bits($n);",
    "    $mask = 0x7FFFFFFF;\n    $mask = $mask ^ 0xFFFFFFFC;\n    return $n ^ $mask;\n}\n\n$n = 10;\necho toggle_middle_bits($n);",
    "    $first_bit = $n & 1;\n    $last_bit = ($n >> 1) & 1;\n    $x = ($n >> 2) << 2;\n    $x = $x ^ ((1 << ($n >> 2)) - 1);\n    $x = $x | ($first_bit << 1) | $last_bit;\n    return $x;\n}\n\necho toggle_middle_bits(10);",
    "    $first_bit = $n & 1;\n    $last_bit = ($n >> 1) & 1;\n    $x = ($first_bit ^ $last_bit) << 1;\n    $mask = (1 << $x) - 1;\n    $n = $n ^ $mask;\n    return $n;\n}\n\n$n = 50;\necho toggle_middle_bits($n);",
    "    $first_bit = ($n & 1);\n    $last_bit = ($n & (1 << (strlen($n) - 1)));\n    $x = $n ^ ((1 << (strlen($n) - 1)) - 1);\n    $x = $x ^ ((1 << 1) - 1);\n    $x = $x | $first_bit;\n    $x = $x | $last_bit;\n    return $x;\n}\n\necho toggle_middle_bits(10);",
    "\t$first_bit = $n & 1;\n\t$last_bit = ($n >> 1) & 1;\n\t$x = ($n >> 1) ^ $n;\n\t$x = $x >> 2;\n\t$x = $x << 2;\n\t$x = $x | ($first_bit << 1);\n\t$x = $x | $last_bit;\n\treturn $x;\n}\n\n$n = 10;\necho toggle_middle_bits($n);",
    "    $first_bit = ($n >> 1) << 1;\n    $last_bit = $n & 1;\n    $x = $n >> 2;\n    $x = ~$x;\n    $x = $x << 2;\n    $x = $x >> 2;\n    return $first_bit | $x | $last_bit;\n}\n\necho toggle_middle_bits(13);",
    "\t$first_bit = $n & 1;\n\t$last_bit = $n & (1 << (strlen(decbin($n)) - 1));\n\t$mask = (1 << (strlen(decbin($n)) - 1)) - 1;\n\t$mask = $mask ^ (1 << 0);\n\t$n = $n ^ $mask;\n\t$n = $n | $first_bit;\n\t$n = $n | $last_bit;\n\treturn $n;\n}\n\necho toggle_middle_bits(10);\necho \"\\n\";\necho toggle_middle_bits(15);\necho \"\\n\";\necho toggle_middle_bits(7);\necho \"\\n\";\necho toggle_middle_bits(31);\necho \"\\n\";\necho toggle_middle_bits(63);\necho \"\\n\";\necho toggle_middle_bits(64);\necho \"\\n\";\necho toggle_middle_bits(65);\necho \"\\n\";\necho toggle_middle_bits(127);\necho \"\\n\";\necho toggle_middle_bits(255);\necho \"\\n\";\necho toggle_middle_bits(256);\necho \"\\n\";\necho toggle_middle_bits(257);\necho \"\\n\";\necho toggle_middle_bits(511);\necho \"\\n\";\necho toggle_middle_bits(512);\necho \"\\n\";\necho toggle_middle_bits(513);\necho \"\\n\";\necho toggle_middle_bits(1023);\necho \"\\n\";\necho toggle_middle_bits(1024);\necho \"\\n\";\necho toggle_middle_bits(1025);\necho \"\\n\";\necho toggle_middle_bits(2047);\necho \"\\n\";\necho toggle_middle_bits(2048);\necho \"\\n\";\necho toggle_middle_bits(2049);\necho \"\\n\";\necho toggle_middle_bits(4095);\necho \"\\n\";\necho toggle_middle_bits(4096);\necho \"\\n\";\necho toggle_middle_bits(4097);\necho \"\\n\";\necho toggle_middle_bits(8191);\necho \"\\n\";\necho toggle_middle_bits(8192);\necho \"\\n\";\necho toggle_middle_bits(",
    "    $first_bit = ($n >> 1) << 1;\n    $last_bit = $n & 1;\n    $x = $n >> 2;\n    $x = ~$x;\n    $x = $x << 2;\n    $x = $x >> 2;\n    $x = $x << 1;\n    $x = $x | $first_bit;\n    $x = $x | $last_bit;\n    return $x;\n}\n\necho toggle_middle_bits(10);",
    "    $mask = (1 << ($n - 1)) | 1;\n    return $n ^ ($mask << 1) ^ $mask;\n}\n\necho toggle_middle_bits(10);",
    "    $mask = 0xFFFFFFFF;\n    $mask = $mask >> 2;\n    $mask = $mask << 2;\n    return $n ^ $mask;\n}\n\necho toggle_middle_bits(12);",
    "    $first_bit = $n & 1;\n    $last_bit = ($n >> 1) & 1;\n    $x = $n ^ ((1 << $last_bit) - 1);\n    $x = $x ^ ((1 << ($first_bit + 1)) - 1);\n    return $x;\n}\n\n$n = 13;\necho toggle_middle_bits($n);",
    "    $mask = (1 << ($n >> 1)) - 1;\n    return ($n ^ $mask) | ($mask << 1);\n}\n\necho toggle_middle_bits(10);",
    "\t$first_bit = $n & 1;\n\t$last_bit = ($n >> 1) & 1;\n\t$x = $n ^ $n;\n\t$x = $x | (1 << 1);\n\t$x = $x | (1 << ($n - 2));\n\treturn $x;\n}\necho toggle_middle_bits(13);",
    "    $first_bit = $n & 1;\n    $last_bit = ($n >> 1) & 1;\n    $x = $n ^ ((1 << $last_bit) - 1);\n    $x = $x ^ ((1 << ($first_bit + 1)) - 1);\n    return $x;\n}\n\necho toggle_middle_bits(13);",
    "    $first_bit = $n & 1;\n    $last_bit = $n & (1 << (PHP_INT_SIZE * 8 - 1));\n    $mask = (1 << (PHP_INT_SIZE * 8 - 2)) - 1;\n    $mask = $mask | $last_bit;\n    $mask = $mask | $first_bit;\n    return $n ^ $mask;\n}\n\necho toggle_middle_bits(10);",
    "\t$first_bit = $n & 1;\n\t$last_bit = ($n >> 1) & 1;\n\t$x = $n ^ ((1 << $last_bit) - 1);\n\t$x = $x ^ ((1 << ($first_bit + 1)) - 1);\n\treturn $x;\n}\n\necho toggle_middle_bits(13);",
    "    $mask = 0xFFFFFFFF;\n    $mask = $mask >> 2;\n    $mask = $mask << 2;\n    return $n ^ $mask;\n}\n\necho toggle_middle_bits(0b11111111111111111111111111111111);",
    "    $first_bit = $n & 1;\n    $last_bit = ($n >> 1) & 1;\n    $x = $n ^ ((1 << $last_bit) - 1);\n    $x = $x ^ ((1 << ($first_bit + 1)) - 1);\n    return $x;\n}\n\n$n = 13;\necho toggle_middle_bits($n);",
    "    $first_bit = $n & 1;\n    $last_bit = $n & (1 << (PHP_INT_SIZE * 8 - 1));\n    $mask = (1 << (PHP_INT_SIZE * 8 - 2)) - 1;\n    $mask = $mask & ~($first_bit | $last_bit);\n    return ($n ^ $mask);\n}\n\n$n = 5;\necho toggle_middle_bits($n);",
    "    $first_bit = $n & 1;\n    $last_bit = $n & (1 << (PHP_INT_SIZE * 8 - 1));\n    $mask = (1 << (PHP_INT_SIZE * 8 - 2)) - 1;\n    $n = $n ^ $mask;\n    $n = $n | $first_bit;\n    $n = $n | $last_bit;\n    return $n;\n}\n\n$n = 0b11111111111111111111111111111111;\necho decbin(toggle_middle_bits($n)) . PHP_EOL;\n\n$n = 0b11111111111111111111111111111110;\necho decbin(toggle_middle_bits($n)) . PHP_EOL;\n\n$n = 0b11111111111111111111111111111101;\necho decbin(toggle_middle_bits($n)) . PHP_EOL;\n\n$n = 0b11111111111111111111111111111100;\necho decbin(toggle_middle_bits($n)) . PHP_EOL;\n\n$n = 0b11111111111111111111111111111011;\necho decbin(toggle_middle_bits($n)) . PHP_EOL;\n\n$n = 0b11111111111111111111111111111010;\necho decbin(toggle_middle_bits($n)) . PHP_EOL;\n\n$n = 0b11111111111111111111111111111001;\necho decbin(toggle_middle_bits($n)) . PHP_EOL;\n\n$n = 0b11111111111111111111111111111000;\necho decbin(toggle_middle_bits($n)) . PHP_EOL;\n\n$n = 0b11111111111111111111111111110111;\necho decbin(toggle_middle_bits($n)) . PHP_EOL;\n\n$n = 0b11111111111111111111111111110110;\necho decbin(toggle_middle_bits($n)) . PHP_EOL;\n\n$n = 0b11111111111111111111111111110101;\necho decbin(toggle_middle_bits($n)) . PHP_EOL;\n\n$n = 0b11111111111111111111111111110100",
    "    $first_bit = $n & 1;\n    $last_bit = $n & (1 << (PHP_INT_SIZE * 8 - 1));\n    $mask = (1 << (PHP_INT_SIZE * 8 - 2)) - 1;\n    $mask = $mask & ~($first_bit | $last_bit);\n    return ($n ^ $mask);\n}\n\n$n = 10;\necho toggle_middle_bits($n);",
    "    $first_bit = $n & 1;\n    $last_bit = ($n >> 1) & 1;\n    $x = ($n >> 2) << 2;\n    $x = $x ^ ((1 << ($n >> 2)) - 1);\n    $x = $x | ($first_bit << 1) | $last_bit;\n    return $x;\n}\n\necho toggle_middle_bits(50);\n",
    "\t$first_bit = $n & 1;\n\t$last_bit = ($n >> 1) & 1;\n\t$x = $n ^ ($n >> 1);\n\t$x = $x ^ ($x >> 2);\n\t$x = $x ^ ($x >> 4);\n\t$x = $x ^ ($x >> 8);\n\t$x = $x ^ ($x >> 16);\n\t$x = $x ^ ($x >> 32);\n\t$x = $x & ~($x >> 1);\n\t$x = $x | ($first_bit << 1);\n\t$x = $x | ($last_bit << 63);\n\treturn $x;\n}\n\necho toggle_middle_bits(10);",
    "    $mask = 0x7FFFFFFF;\n    $mask = $mask ^ (1 << 0);\n    $mask = $mask ^ (1 << 31);\n    return $n ^ $mask;\n}\n\necho toggle_middle_bits(10);\n",
    "    $mask = (1 << ($n - 1)) - 1;\n    $mask = $mask ^ ($mask >> 1);\n    return $n ^ $mask;\n}\n",
    "    $first_bit = ($n & 1);\n    $last_bit = ($n & (1 << (PHP_INT_SIZE * 8 - 1)));\n    $mask = (1 << (PHP_INT_SIZE * 8 - 2)) - 1;\n    $n = $n ^ $mask;\n    $n = $n | $first_bit;\n    $n = $n | $last_bit;\n    return $n;\n}\n\n$n = 10;\necho toggle_middle_bits($n);",
    "    $first_bit = ($n & 1);\n    $last_bit = ($n & (1 << (PHP_INT_SIZE * 8 - 1)));\n    $mask = (1 << (PHP_INT_SIZE * 8 - 1)) - 1;\n    $mask = $mask ^ (1 << 0);\n    $n = $n ^ $mask;\n    $n = $n | $first_bit;\n    $n = $n | $last_bit;\n    return $n;\n}\n\necho toggle_middle_bits(10);\n",
    "    $first_bit = $n & 1;\n    $last_bit = ($n >> 1) & 1;\n    $x = $n ^ ((1 << $last_bit) - 1);\n    $x = $x ^ ((1 << ($first_bit + 1)) - 1);\n    return $x;\n}\n\necho toggle_middle_bits(10);",
    "    $first_bit = ($n >> 1) << 1;\n    $last_bit = $n & 1;\n    $x = $n >> 2;\n    $x = ~$x;\n    $x = $x << 2;\n    $x = $x >> 2;\n    return $first_bit | $x | $last_bit;\n}\n\necho toggle_middle_bits(10);",
    "    $mask = 0xFFFFFFFF;\n    $mask = $mask - (1 << 0);\n    $mask = $mask - (1 << 31);\n    return $n ^ $mask;\n}\n\n$n = 0xFFFFFFFF;\necho toggle_middle_bits($n);",
    "    $first_bit = $n & 1;\n    $last_bit = ($n >> 1) & 1;\n    $x = ($n >> 1) ^ $n;\n    $x = $x >> 2;\n    $x = $x << 2;\n    $x = $x | ($first_bit << 1) | $last_bit;\n    return $x;\n}\necho toggle_middle_bits(50);",
    "    $mask = 0xFFFFFFFF;\n    $mask = $mask >> 2;\n    $mask = ~$mask;\n    $n = $n ^ $mask;\n    return $n;\n}\n\n$n = 13;\necho toggle_middle_bits($n);",
    "    $mask = (1 << ($n - 2)) - 1;\n    return ($n ^ $mask);\n}\n",
    "    $first_bit = $n & 1;\n    $last_bit = ($n >> 1) & 1;\n    $x = ($first_bit ^ $last_bit) << 1;\n    $n = $n ^ $x;\n    return $n;\n}\n\necho toggle_middle_bits(13);",
    "    $first_bit = ($n & 1);\n    $last_bit = ($n & (1 << (PHP_INT_SIZE * 8 - 1)));\n    $mask = (1 << (PHP_INT_SIZE * 8 - 2)) - 1;\n    $middle_bits = $n & $mask;\n    $middle_bits = ~$middle_bits;\n    $middle_bits = $middle_bits & $mask;\n    return ($first_bit | $middle_bits | $last_bit);\n}\n\n$n = 10;\necho toggle_middle_bits($n);",
    "    $first_bit = $n & 1;\n    $last_bit = $n & (1 << (PHP_INT_SIZE * 8 - 1));\n    $mask = (1 << (PHP_INT_SIZE * 8 - 2)) - 1;\n    $n = $n ^ $mask;\n    $n = $n | $first_bit;\n    $n = $n | $last_bit;\n    return $n;\n}\n\n$n = 0b1001101;\necho decbin(toggle_middle_bits($n));",
    "    $mask = (1 << ($n - 1)) | 1;\n    return $n ^ $mask;\n}\n\necho toggle_middle_bits(10);",
    "    $first_bit = $n & 1;\n    $last_bit = ($n >> 1) & 1;\n    $x = ($n >> 2) << 2;\n    $x = $x ^ ((1 << ($n >> 2)) - 1);\n    $x = $x | ($first_bit << ($n >> 2));\n    $x = $x | ($last_bit << (($n >> 2) + 1));\n    return $x;\n}\n\necho toggle_middle_bits(5);",
    "    $mask = 0xFFFFFFFF;\n    $mask = $mask >> 2;\n    $mask = $mask << 2;\n    $n = $n ^ $mask;\n    return $n;\n}\n",
    "    $first_bit = $n & 1;\n    $last_bit = $n & (1 << (PHP_INT_SIZE * 8 - 1));\n    $mask = (1 << (PHP_INT_SIZE * 8 - 2)) - 1;\n    $n = $n ^ $mask;\n    $n = $n | $first_bit;\n    $n = $n | $last_bit;\n    return $n;\n}\n\necho toggle_middle_bits(10);",
    "    $mask = (1 << ($n - 1)) | 1;\n    return $n ^ $mask;\n}\n\necho toggle_middle_bits(10);",
    "    $mask = (1 << ($n - 1)) - 1;\n    return $n ^ $mask;\n}\n\necho toggle_middle_bits(10);",
    "    $first_bit = ($n >> 1) << 1;\n    $last_bit = $n & 1;\n    $x = $n >> 2;\n    $x = ~$x;\n    $x = $x << 2;\n    $x = $x >> 2;\n    return $first_bit | $x | $last_bit;\n}\n\necho toggle_middle_bits(13);",
    "    $mask = (1 << ($n - 1)) | 1;\n    return $n ^ $mask;\n}\n\n$n = 13;\necho toggle_middle_bits($n);",
    "\t$first_bit = $n & 1;\n\t$last_bit = $n & (1 << (PHP_INT_SIZE * 8 - 1));\n\t$mask = 0;\n\tfor ($i = 1; $i < PHP_INT_SIZE * 8 - 1; $i++) {\n\t\t$mask = $mask | (1 << $i);\n\t}\n\t$n = $n ^ $mask;\n\t$n = $n | $first_bit;\n\t$n = $n | $last_bit;\n\treturn $n;\n}\n\necho toggle_middle_bits(7);",
    "    $first_bit = $n & 1;\n    $last_bit = $n & (1 << (PHP_INT_SIZE * 8 - 1));\n    $mask = (1 << (PHP_INT_SIZE * 8 - 1)) - 1;\n    $mask = $mask ^ (1 << 1);\n    $mask = $mask ^ (1 << (PHP_INT_SIZE * 8 - 2));\n    $n = $n ^ $mask;\n    $n = $n | $first_bit;\n    $n = $n | $last_bit;\n    return $n;\n}\n\n$n = 5;\necho toggle_middle_bits($n);",
    "    $first_bit = $n & 1;\n    $last_bit = ($n >> 1) & 1;\n    $x = ($n >> 2) << 2;\n    $x = $x ^ ((1 << ($n >> 2)) - 1);\n    $x = $x | ($first_bit << 1) | $last_bit;\n    return $x;\n}\n\n$n = 13;\necho toggle_middle_bits($n);",
    "    $mask = 0xffffffff;\n    $mask = $mask >> 2;\n    $mask = $mask << 2;\n    return $n ^ $mask;\n}\n\necho toggle_middle_bits(0b11111111111111111111111111111111);",
    "\t$mask = (1 << ($n - 1)) | 1;\n\t$mask = $mask | ($mask - 1);\n\treturn $n ^ $mask;\n}\n\necho toggle_middle_bits(10);",
    "    $first_bit = $n & 1;\n    $last_bit = ($n >> 1) & 1;\n    $x = $n ^ ((1 << $last_bit) - 1);\n    $x = $x ^ ((1 << ($first_bit + 1)) - 1);\n    return $x;\n}\n\necho toggle_middle_bits(10);",
    "    $first_bit = $n & 1;\n    $last_bit = ($n >> 1) & 1;\n    $x = $n ^ ((1 << $last_bit) - 1);\n    $x = $x ^ ((1 << ($first_bit + 1)) - 1);\n    return $x;\n}\n\necho toggle_middle_bits(13);",
    "    $mask = (1 << ($n - 1)) | 1;\n    return $n ^ $mask;\n}\n\n$n = 13;\necho toggle_middle_bits($n);",
    "    $first_bit = $n & 1;\n    $last_bit = ($n >> 1) & 1;\n    $x = $n ^ ((1 << $last_bit) - 1);\n    $x = $x ^ ((1 << ($first_bit + 1)) - 1);\n    return $x;\n}\n\necho toggle_middle_bits(10);",
    "    $first_bit = $n & 1;\n    $last_bit = ($n >> 1) & 1;\n    $x = ($n >> 1) ^ $n;\n    $x = $x >> 2;\n    $x = $x << 2;\n    $x = $x | ($first_bit << 1) | $last_bit;\n    return $x;\n}\n\necho toggle_middle_bits(13);",
    "    $first_bit = $n & 1;\n    $last_bit = $n & (1 << (PHP_INT_SIZE * 8 - 1));\n    $mask = (1 << (PHP_INT_SIZE * 8 - 2)) - 1;\n    $mask = $mask & ~($first_bit | $last_bit);\n    return ($n ^ $mask);\n}\n\necho toggle_middle_bits(10);",
    "    $mask = 0xFFFFFFFF;\n    $mask = $mask >> 2;\n    $mask = $mask << 2;\n    return ($n ^ $mask);\n}\n\necho toggle_middle_bits(50);",
    "    $mask = (1 << ($n - 1)) | 1;\n    return $n ^ $mask;\n}\n\n$n = 13;\necho toggle_middle_bits($n);",
    "    $mask = 0x7FFFFFFF;\n    $mask = $mask ^ (1 << 0);\n    $mask = $mask ^ (1 << 31);\n    return $n ^ $mask;\n}\n\n$n = 0b11111111111111111111111111111111;\necho decbin(toggle_middle_bits($n)) . \"\\n\";\n\n$n = 0b11111111111111111111111111111110;\necho decbin(toggle_middle_bits($n)) . \"\\n\";\n\n$n = 0b11111111111111111111111111111101;\necho decbin(toggle_middle_bits($n)) . \"\\n\";\n\n$n = 0b11111111111111111111111111111011;\necho decbin(toggle_middle_bits($n)) . \"\\n\";\n\n$n = 0b11111111111111111111111111110111;\necho decbin(toggle_middle_bits($n)) . \"\\n\";\n\n$n = 0b11111111111111111111111111101111;\necho decbin(toggle_middle_bits($n)) . \"\\n\";\n\n$n = 0b11111111111111111111111111011111;\necho decbin(toggle_middle_bits($n)) . \"\\n\";\n\n$n = 0b11111111111111111111111110111111;\necho decbin(toggle_middle_bits($n)) . \"\\n\";\n\n$n = 0b11111111111111111111111101111111;\necho decbin(toggle_middle_bits($n)) . \"\\n\";\n\n$n = 0b11111111111111111111111011111111;\necho decbin(toggle_middle_bits($n)) . \"\\n\";\n\n$n = 0b11111111111111111111110111111111;\necho decbin(toggle_middle_bits($n)) . \"\\n\";\n\n$n = 0b11111111111111111111101111111111;\necho decbin(toggle_middle_bits($n)) . \"\\n\";\n\n$n = 0b11111111111111111111011111111111;\necho decbin(toggle_middle_bits($n)) . \"\\n\";\n\n$n = 0b11111111111111111110111111111111;\necho decbin(",
    "\t$mask = 0xFFFFFFFF;\n\t$mask = $mask >> 2;\n\t$mask = $mask << 2;\n\t$n = $n ^ $mask;\n\treturn $n;\n}\n\n$n = 0b11010101;\necho decbin(toggle_middle_bits($n));",
    "    $first_bit = $n & 1;\n    $last_bit = ($n >> 1) & 1;\n    $x = ($n >> 2) << 2;\n    $x = $x ^ ((1 << ($n - 2)) - 1);\n    $x = $x | ($first_bit << ($n - 1));\n    $x = $x | ($last_bit << 1);\n    return $x;\n}\n\necho toggle_middle_bits(17);",
    "    $mask = 0xFFFFFFFF;\n    $mask = $mask ^ (1 << 0);\n    $mask = $mask ^ (1 << 31);\n    return $n ^ $mask;\n}\n\necho toggle_middle_bits(10);",
    "    $first_bit = $n & 1;\n    $last_bit = ($n >> 1) & 1;\n    $x = ($n >> 1) ^ $n;\n    $x = $x >> 2;\n    $x = $x << 2;\n    $x = $x ^ $n;\n    $x = $x >> 1;\n    $x = $x << 1;\n    $x = $x | $first_bit;\n    $x = $x << 1;\n    $x = $x | $last_bit;\n    return $x;\n}\n\n$n = 10;\necho toggle_middle_bits($n);",
    "    $first_bit = ($n & 1);\n    $last_bit = ($n & (1 << (strlen($n) - 1)));\n    $x = $n ^ ((1 << (strlen($n) - 1)) - 1);\n    $x = $x ^ ((1 << 1) - 1);\n    $x = $x | ($first_bit << (strlen($n) - 1));\n    $x = $x | $last_bit;\n    return $x;\n}\n\n$n = '10010101';\necho toggle_middle_bits($n);",
    "\t$first_bit = $n & 1;\n\t$last_bit = ($n >> 1) & 1;\n\t$x = $n ^ $n;\n\t$x = $x | $first_bit;\n\t$x = $x | ($last_bit << 1);\n\treturn $x;\n}\n\necho toggle_middle_bits(10);",
    "    $mask = 0x7FFFFFFF;\n    return $n ^ $mask;\n}\n\n$n = 13;\necho toggle_middle_bits($n);",
    "    $first_bit = $n & 1;\n    $last_bit = $n & (1 << (PHP_INT_SIZE * 8 - 1));\n    $mask = (1 << (PHP_INT_SIZE * 8 - 2)) - 1;\n    $n = $n ^ $mask;\n    $n = $n | $first_bit;\n    $n = $n | $last_bit;\n    return $n;\n}\n\necho toggle_middle_bits(10);",
    "    $first_bit = ($n >> 1) << 1;\n    $last_bit = $n & 1;\n    $x = ($n >> 1) ^ ($n >> 2);\n    $x = $x << 1;\n    $x = $x | $last_bit;\n    $x = $x | $first_bit;\n    return $x;\n}\n\n$n = 7;\necho toggle_middle_bits($n);",
    "    $first_bit = $n & 1;\n    $last_bit = ($n >> 1) & 1;\n    $x = ($n >> 2) << 2;\n    $x = $x ^ ((1 << ($n >> 2)) - 1);\n    $x = $x | ($first_bit << 1);\n    $x = $x | $last_bit;\n    return $x;\n}\n\n$n = 13;\necho toggle_middle_bits($n);",
    "    $first_bit = $n & 1;\n    $last_bit = ($n >> 1) & 1;\n    $x = $n ^ $n;\n    $x = $x >> 2;\n    $x = $x << 2;\n    $x = $x | $first_bit;\n    $x = $x << 1;\n    $x = $x | $last_bit;\n    return $x;\n}\n\n$n = 13;\necho toggle_middle_bits($n);",
    "    $mask = 0x7FFFFFFF;\n    $mask = $mask ^ 0x55555555;\n    return $n ^ $mask;\n}\n\n$n = 10;\necho toggle_middle_bits($n);",
    "    $first_bit = $n & 1;\n    $last_bit = $n & (1 << (PHP_INT_SIZE * 8 - 1));\n    $mask = (1 << (PHP_INT_SIZE * 8 - 1)) - 1;\n    $mask = $mask ^ (1 << 1);\n    $mask = $mask ^ 1;\n    $n = $n ^ $mask;\n    $n = $n | $first_bit;\n    $n = $n | $last_bit;\n    return $n;\n}\n\n$n = 0b11111111111111111111111111111111;\necho decbin(toggle_middle_bits($n)) . PHP_EOL;\n\n$n = 0b11111111111111111111111111111111;\necho decbin(toggle_middle_bits($n)) . PHP_EOL;\n\n$n = 0b11111111111111111111111111111111;\necho decbin(toggle_middle_bits($n)) . PHP_EOL;\n\n$n = 0b11111111111111111111111111111111;\necho decbin(toggle_middle_bits($n)) . PHP_EOL;\n\n$n = 0b11111111111111111111111111111111;\necho decbin(toggle_middle_bits($n)) . PHP_EOL;\n\n$n = 0b11111111111111111111111111111111;\necho decbin(toggle_middle_bits($n)) . PHP_EOL;\n\n$n = 0b11111111111111111111111111111111;\necho decbin(toggle_middle_bits($n)) . PHP_EOL;\n\n$n = 0b11111111111111111111111111111111;\necho decbin(toggle_middle_bits($n)) . PHP_EOL;\n\n$n = 0b11111111111111111111111111111111;\necho decbin(toggle_middle_bits($n)) . PHP_EOL;\n\n$n = 0b11111111111111111111111111111111;\necho decbin(toggle_middle_bits($n)) . PHP_EOL;\n\n$n = 0b11111111111111111111111111111111;\necho decbin(toggle_middle_bits($n)) . PHP_EOL",
    "    $first_bit = $n & 1;\n    $last_bit = ($n >> 1) & 1;\n    $x = $n ^ ((1 << $last_bit) - 1);\n    return ($x ^ ((1 << $first_bit) - 1));\n}\n\necho toggle_middle_bits(13);",
    "    $first_bit = $n & 1;\n    $last_bit = ($n >> 1) & 1;\n    $x = $n >> 2;\n    $x = $x ^ ((1 << ($x - 1)) - 1);\n    $x = $x << 2;\n    $x = $x | ($first_bit << 1) | $last_bit;\n    return $x;\n}\n",
    "    $first_bit = $n & 1;\n    $last_bit = $n & (1 << (PHP_INT_SIZE * 8 - 1));\n    $mask = (1 << (PHP_INT_SIZE * 8 - 2)) - 1;\n    $n = $n ^ $mask;\n    $n = $n | ($first_bit << (PHP_INT_SIZE * 8 - 1));\n    $n = $n | ($last_bit >> (PHP_INT_SIZE * 8 - 1));\n    return $n;\n}\n\n$n = 0b1101010101010101010101010101010101010101010101010101010101010101;\necho decbin(toggle_middle_bits($n)) . PHP_EOL;\n",
    "    $first_bit = $n & 1;\n    $last_bit = ($n >> 1) & 1;\n    $x = $n ^ ((1 << $last_bit) - 1);\n    $x = $x ^ ((1 << ($first_bit + 1)) - 1);\n    return $x;\n}\n\n$n = 13;\necho toggle_middle_bits($n);",
    "    $first_bit = $n & 1;\n    $last_bit = $n & (1 << (PHP_INT_SIZE * 8 - 1));\n    $mask = (1 << (PHP_INT_SIZE * 8 - 2)) - 1;\n    $mask = $mask & ~($first_bit | $last_bit);\n    $n = $n ^ $mask;\n    return $n;\n}\n\necho toggle_middle_bits(7);",
    "\t$first_bit = $n & 1;\n\t$last_bit = $n & (1 << (PHP_INT_SIZE * 8 - 1));\n\t$mask = ~((1 << (PHP_INT_SIZE * 8 - 1)) | 1);\n\t$n = $n ^ $mask;\n\t$n = $n | ($first_bit << (PHP_INT_SIZE * 8 - 1)) | $last_bit;\n\treturn $n;\n}\n\n$n = 23;\necho toggle_middle_bits($n);",
    "    $first_bit = $n & 1;\n    $last_bit = ($n >> 1) & 1;\n    $x = $n ^ $n;\n    $x = $x >> 2;\n    $x = $x << 2;\n    $x = $x | $first_bit;\n    $x = $x << 1;\n    $x = $x | $last_bit;\n    return $x;\n}\n\n$n = 12;\necho toggle_middle_bits($n);",
    "    $mask = (1 << ($n - 1)) | 1;\n    return $n ^ $mask;\n}\n\n$n = 13;\necho toggle_middle_bits($n);",
    "    $mask = 0x7FFFFFFF;\n    $mask = $mask >> 1;\n    $mask = $mask << 1;\n    return $n ^ $mask;\n}\n\n$n = 13;\necho toggle_middle_bits($n);",
    "    $mask = 0x7FFFFFFF;\n    $mask = $mask >> 1;\n    $mask = $mask << 1;\n    return $n ^ $mask;\n}\n\necho toggle_middle_bits(10) . \"\\n\";\necho toggle_middle_bits(13) . \"\\n\";\necho toggle_middle_bits(15) . \"\\n\";\necho toggle_middle_bits(16) . \"\\n\";\necho toggle_middle_bits(17) . \"\\n\";\necho toggle_middle_bits(18) . \"\\n\";\necho toggle_middle_bits(19) . \"\\n\";\necho toggle_middle_bits(20) . \"\\n\";\necho toggle_middle_bits(21) . \"\\n\";\necho toggle_middle_bits(22) . \"\\n\";\necho toggle_middle_bits(23) . \"\\n\";\necho toggle_middle_bits(24) . \"\\n\";\necho toggle_middle_bits(25) . \"\\n\";\necho toggle_middle_bits(26) . \"\\n\";\necho toggle_middle_bits(27) . \"\\n\";\necho toggle_middle_bits(28) . \"\\n\";\necho toggle_middle_bits(29) . \"\\n\";\necho toggle_middle_bits(30) . \"\\n\";\necho toggle_middle_bits(31) . \"\\n\";\necho toggle_middle_bits(32) . \"\\n\";\necho toggle_middle_bits(33) . \"\\n\";\necho toggle_middle_bits(34) . \"\\n\";\necho toggle_middle_bits(35) . \"\\n\";\necho toggle_middle_bits(36) . \"\\n\";\necho toggle_middle_bits(37) . \"\\n\";\necho toggle_middle_bits(38) . \"\\n\";\necho toggle_middle_bits(39) . \"\\n\";\necho toggle_middle_bits(40) . \"\\n\";\necho toggle_middle_bits(41) . \"\\n\";\necho toggle_middle_bits(42) . \"\\n\";\necho toggle_middle_bits(43) . \"\\n\";\necho toggle_middle_bits(44) . \"\\n\";\necho toggle_middle_bits(45) . \"\\n\";\necho toggle_middle_"
  ]
}