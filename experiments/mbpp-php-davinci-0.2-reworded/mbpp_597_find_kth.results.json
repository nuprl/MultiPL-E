{
  "name": "mbpp_597_find_kth",
  "language": "php",
  "prompt": "<?php\n// Write a function to find kth element from the given two sorted arrays.\nfunction find_kth($arr1, $arr2, $k) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_597_find_kth.py",
  "prompt_terminology": "reworded",
  "tests": "function candidate(...$args) {\n    return find_kth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 3, 6, 7, 9), array(1, 4, 8, 10), 5) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 112, 256, 349, 770), array(72, 86, 113, 119, 265, 445, 892), 7) !== 256) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 4, 7, 8, 10), array(2, 5, 9, 11), 6) !== 8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction",
    "\n?>",
    "\n//",
    "\n#"
  ],
  "results": [
    {
      "program": "<?php\n// Write a function to find kth element from the given two sorted arrays.\nfunction find_kth($arr1, $arr2, $k) {\n    $i = 0;\n    $j = 0;\n    $count = 0;\n    $len1 = count($arr1);\n    $len2 = count($arr2);\n    while ($i < $len1 && $j < $len2) {\n        if ($arr1[$i] < $arr2[$j]) {\n            $count++;\n            if ($count == $k) {\n                return $arr1[$i];\n            }\n            $i++;\n        } else {\n            $count++;\n            if ($count == $k) {\n                return $arr2[$j];\n            }\n            $j++;\n        }\n    }\n    while ($i < $len1) {\n        $count++;\n        if ($count == $k) {\n            return $arr1[$i];\n        }\n        $i++;\n    }\n    while ($j < $len2) {\n        $count++;\n        if ($count == $k) {\n            return $arr2[$j];\n        }\n        $j++;\n    }\n}\n\n$arr1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20];\n$arr2 = [21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40];\n$k = 10;\necho find_kth($arr1, $arr2, $k);\nfunction candidate(...$args) {\n    return find_kth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 3, 6, 7, 9), array(1, 4, 8, 10), 5) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 112, 256, 349, 770), array(72, 86, 113, 119, 265, 445, 892), 7) !== 256) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 4, 7, 8, 10), array(2, 5, 9, 11), 6) !== 8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510546,
      "stdout": "10",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find kth element from the given two sorted arrays.\nfunction find_kth($arr1, $arr2, $k) {\n    $i = 0;\n    $j = 0;\n    $count = 0;\n    while ($i < count($arr1) && $j < count($arr2)) {\n        if ($arr1[$i] < $arr2[$j]) {\n            $count++;\n            if ($count == $k) {\n                return $arr1[$i];\n            }\n            $i++;\n        } else {\n            $count++;\n            if ($count == $k) {\n                return $arr2[$j];\n            }\n            $j++;\n        }\n    }\n    while ($i < count($arr1)) {\n        $count++;\n        if ($count == $k) {\n            return $arr1[$i];\n        }\n        $i++;\n    }\n    while ($j < count($arr2)) {\n        $count++;\n        if ($count == $k) {\n            return $arr2[$j];\n        }\n        $j++;\n    }\n}\n\n$arr1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$arr2 = [11, 12, 13, 14, 15, 16, 17, 18, 19, 20];\n$k = 10;\necho find_kth($arr1, $arr2, $k);\nfunction candidate(...$args) {\n    return find_kth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 3, 6, 7, 9), array(1, 4, 8, 10), 5) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 112, 256, 349, 770), array(72, 86, 113, 119, 265, 445, 892), 7) !== 256) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 4, 7, 8, 10), array(2, 5, 9, 11), 6) !== 8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510546,
      "stdout": "10",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find kth element from the given two sorted arrays.\nfunction find_kth($arr1, $arr2, $k) {\n    $len1 = count($arr1);\n    $len2 = count($arr2);\n    if ($len1 == 0) {\n        return $arr2[$k - 1];\n    }\n    if ($len2 == 0) {\n        return $arr1[$k - 1];\n    }\n    if ($k == 1) {\n        return min($arr1[0], $arr2[0]);\n    }\n    $mid1 = min($len1, $k / 2);\n    $mid2 = min($len2, $k / 2);\n    if ($arr1[$mid1 - 1] > $arr2[$mid2 - 1]) {\n        return find_kth(array_slice($arr1, 0, $mid1), array_slice($arr2, $mid2), $k - $mid2);\n    } else {\n        return find_kth(array_slice($arr1, $mid1), array_slice($arr2, 0, $mid2), $k - $mid1);\n    }\n}\n\n$arr1 = [1, 3, 5, 7, 9];\n$arr2 = [2, 4, 6, 8, 10];\n$k = 5;\necho find_kth($arr1, $arr2, $k);\nfunction candidate(...$args) {\n    return find_kth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 3, 6, 7, 9), array(1, 4, 8, 10), 5) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 112, 256, 349, 770), array(72, 86, 113, 119, 265, 445, 892), 7) !== 256) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 4, 7, 8, 10), array(2, 5, 9, 11), 6) !== 8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510546,
      "stdout": "\nDeprecated: Implicit conversion from float 1.5 to int loses precision in /tmp/tmp6ckxqxt2.php on line 17\n\nDeprecated: Implicit conversion from float 1.5 to int loses precision in /tmp/tmp6ckxqxt2.php on line 17\n\nDeprecated: Implicit conversion from float 2.5 to int loses precision in /tmp/tmp6ckxqxt2.php on line 20\n\nDeprecated: Implicit conversion from float 2.5 to int loses precision in /tmp/tmp6ckxqxt2.php on line 20\n\nDeprecated: Implicit conversion from float 0.25 to int loses precision in /tmp/tmp6ckxqxt2.php on line 17\n\nDeprecated: Implicit conversion from float 0.25 to int loses precision in /tmp/tmp6ckxqxt2.php on line 17\n\nDeprecated: Implicit conversion from float 1.25 to int loses precision in /tmp/tmp6ckxqxt2.php on line 18\n\nDeprecated: Implicit conversion from float 1.25 to int loses precision in /tmp/tmp6ckxqxt2.php on line 18\n\nDeprecated: Implicit conversion from float -0.375 to int loses precision in /tmp/tmp6ckxqxt2.php on line 17\n\nDeprecated: Implicit conversion from float -0.375 to int loses",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find kth element from the given two sorted arrays.\nfunction find_kth($arr1, $arr2, $k) {\n  $i = 0;\n  $j = 0;\n  $count = 0;\n  while ($i < count($arr1) && $j < count($arr2)) {\n    if ($arr1[$i] < $arr2[$j]) {\n      $count++;\n      if ($count == $k) {\n        return $arr1[$i];\n      }\n      $i++;\n    } else {\n      $count++;\n      if ($count == $k) {\n        return $arr2[$j];\n      }\n      $j++;\n    }\n  }\n  while ($i < count($arr1)) {\n    $count++;\n    if ($count == $k) {\n      return $arr1[$i];\n    }\n    $i++;\n  }\n  while ($j < count($arr2)) {\n    $count++;\n    if ($count == $k) {\n      return $arr2[$j];\n    }\n    $j++;\n  }\n}\n\n$arr1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$arr2 = [11, 12, 13, 14, 15, 16, 17, 18, 19, 20];\n$k = 10;\necho find_kth($arr1, $arr2, $k);\nfunction candidate(...$args) {\n    return find_kth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 3, 6, 7, 9), array(1, 4, 8, 10), 5) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 112, 256, 349, 770), array(72, 86, 113, 119, 265, 445, 892), 7) !== 256) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 4, 7, 8, 10), array(2, 5, 9, 11), 6) !== 8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510546,
      "stdout": "10",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find kth element from the given two sorted arrays.\nfunction find_kth($arr1, $arr2, $k) {\n    $i = 0;\n    $j = 0;\n    $count = 0;\n    while ($i < count($arr1) && $j < count($arr2)) {\n        if ($arr1[$i] < $arr2[$j]) {\n            $count++;\n            if ($count == $k) {\n                return $arr1[$i];\n            }\n            $i++;\n        } else {\n            $count++;\n            if ($count == $k) {\n                return $arr2[$j];\n            }\n            $j++;\n        }\n    }\n    while ($i < count($arr1)) {\n        $count++;\n        if ($count == $k) {\n            return $arr1[$i];\n        }\n        $i++;\n    }\n    while ($j < count($arr2)) {\n        $count++;\n        if ($count == $k) {\n            return $arr2[$j];\n        }\n        $j++;\n    }\n}\n\n$arr1 = [1, 3, 5, 7, 9];\n$arr2 = [2, 4, 6, 8, 10];\n$k = 5;\necho find_kth($arr1, $arr2, $k);\nfunction candidate(...$args) {\n    return find_kth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 3, 6, 7, 9), array(1, 4, 8, 10), 5) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 112, 256, 349, 770), array(72, 86, 113, 119, 265, 445, 892), 7) !== 256) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 4, 7, 8, 10), array(2, 5, 9, 11), 6) !== 8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510546,
      "stdout": "5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find kth element from the given two sorted arrays.\nfunction find_kth($arr1, $arr2, $k) {\n    $i = 0;\n    $j = 0;\n    while ($i < count($arr1) && $j < count($arr2)) {\n        if ($arr1[$i] < $arr2[$j]) {\n            if ($i + $j == $k - 1) {\n                return $arr1[$i];\n            }\n            $i++;\n        } else {\n            if ($i + $j == $k - 1) {\n                return $arr2[$j];\n            }\n            $j++;\n        }\n    }\n    if ($i < count($arr1)) {\n        return $arr1[$k - $j - 1];\n    }\n    return $arr2[$k - $i - 1];\n}\n\n$arr1 = [1, 3, 5, 7, 9];\n$arr2 = [2, 4, 6, 8, 10];\n\necho find_kth($arr1, $arr2, 5);\nfunction candidate(...$args) {\n    return find_kth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 3, 6, 7, 9), array(1, 4, 8, 10), 5) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 112, 256, 349, 770), array(72, 86, 113, 119, 265, 445, 892), 7) !== 256) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 4, 7, 8, 10), array(2, 5, 9, 11), 6) !== 8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510546,
      "stdout": "5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find kth element from the given two sorted arrays.\nfunction find_kth($arr1, $arr2, $k) {\n    $i = 0;\n    $j = 0;\n    $count = 0;\n    while ($i < count($arr1) && $j < count($arr2)) {\n        if ($arr1[$i] < $arr2[$j]) {\n            $count++;\n            if ($count == $k) {\n                return $arr1[$i];\n            }\n            $i++;\n        } else {\n            $count++;\n            if ($count == $k) {\n                return $arr2[$j];\n            }\n            $j++;\n        }\n    }\n    while ($i < count($arr1)) {\n        $count++;\n        if ($count == $k) {\n            return $arr1[$i];\n        }\n        $i++;\n    }\n    while ($j < count($arr2)) {\n        $count++;\n        if ($count == $k) {\n            return $arr2[$j];\n        }\n        $j++;\n    }\n}\n\n$arr1 = [1, 3, 5, 7, 9];\n$arr2 = [2, 4, 6, 8, 10];\necho find_kth($arr1, $arr2, 5);\nfunction candidate(...$args) {\n    return find_kth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 3, 6, 7, 9), array(1, 4, 8, 10), 5) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 112, 256, 349, 770), array(72, 86, 113, 119, 265, 445, 892), 7) !== 256) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 4, 7, 8, 10), array(2, 5, 9, 11), 6) !== 8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510546,
      "stdout": "5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find kth element from the given two sorted arrays.\nfunction find_kth($arr1, $arr2, $k) {\n\t$i = 0;\n\t$j = 0;\n\t$count = 0;\n\twhile ($i < count($arr1) && $j < count($arr2)) {\n\t\tif ($arr1[$i] < $arr2[$j]) {\n\t\t\t$count++;\n\t\t\tif ($count == $k) {\n\t\t\t\treturn $arr1[$i];\n\t\t\t}\n\t\t\t$i++;\n\t\t} else {\n\t\t\t$count++;\n\t\t\tif ($count == $k) {\n\t\t\t\treturn $arr2[$j];\n\t\t\t}\n\t\t\t$j++;\n\t\t}\n\t}\n\twhile ($i < count($arr1)) {\n\t\t$count++;\n\t\tif ($count == $k) {\n\t\t\treturn $arr1[$i];\n\t\t}\n\t\t$i++;\n\t}\n\twhile ($j < count($arr2)) {\n\t\t$count++;\n\t\tif ($count == $k) {\n\t\t\treturn $arr2[$j];\n\t\t}\n\t\t$j++;\n\t}\n}\n\n$arr1 = array(1, 3, 5, 7, 9);\n$arr2 = array(2, 4, 6, 8, 10);\n$k = 5;\necho find_kth($arr1, $arr2, $k);\nfunction candidate(...$args) {\n    return find_kth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 3, 6, 7, 9), array(1, 4, 8, 10), 5) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 112, 256, 349, 770), array(72, 86, 113, 119, 265, 445, 892), 7) !== 256) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 4, 7, 8, 10), array(2, 5, 9, 11), 6) !== 8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510546,
      "stdout": "5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find kth element from the given two sorted arrays.\nfunction find_kth($arr1, $arr2, $k) {\n    $i = 0;\n    $j = 0;\n    $count = 0;\n    while ($i < count($arr1) && $j < count($arr2)) {\n        if ($arr1[$i] < $arr2[$j]) {\n            $count++;\n            if ($count == $k) {\n                return $arr1[$i];\n            }\n            $i++;\n        } else {\n            $count++;\n            if ($count == $k) {\n                return $arr2[$j];\n            }\n            $j++;\n        }\n    }\n    while ($i < count($arr1)) {\n        $count++;\n        if ($count == $k) {\n            return $arr1[$i];\n        }\n        $i++;\n    }\n    while ($j < count($arr2)) {\n        $count++;\n        if ($count == $k) {\n            return $arr2[$j];\n        }\n        $j++;\n    }\n}\n\n$arr1 = array(1, 3, 5, 7, 9);\n$arr2 = array(2, 4, 6, 8, 10);\n\necho find_kth($arr1, $arr2, 5);\nfunction candidate(...$args) {\n    return find_kth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 3, 6, 7, 9), array(1, 4, 8, 10), 5) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 112, 256, 349, 770), array(72, 86, 113, 119, 265, 445, 892), 7) !== 256) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 4, 7, 8, 10), array(2, 5, 9, 11), 6) !== 8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510546,
      "stdout": "5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find kth element from the given two sorted arrays.\nfunction find_kth($arr1, $arr2, $k) {\n    $len1 = count($arr1);\n    $len2 = count($arr2);\n    if ($len1 > $len2) {\n        return find_kth($arr2, $arr1, $k);\n    }\n    if ($len1 == 0) {\n        return $arr2[$k - 1];\n    }\n    if ($k == 1) {\n        return min($arr1[0], $arr2[0]);\n    }\n    $i = min($len1, floor($k / 2));\n    $j = min($len2, floor($k / 2));\n    if ($arr1[$i - 1] > $arr2[$j - 1]) {\n        return find_kth($arr1, array_slice($arr2, $j), $k - $j);\n    } else {\n        return find_kth(array_slice($arr1, $i), $arr2, $k - $i);\n    }\n}\n\n$arr1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$arr2 = [11, 12, 13, 14, 15, 16, 17, 18, 19, 20];\n$k = 5;\necho find_kth($arr1, $arr2, $k);\nfunction candidate(...$args) {\n    return find_kth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 3, 6, 7, 9), array(1, 4, 8, 10), 5) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 112, 256, 349, 770), array(72, 86, 113, 119, 265, 445, 892), 7) !== 256) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 4, 7, 8, 10), array(2, 5, 9, 11), 6) !== 8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510546,
      "stdout": "5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find kth element from the given two sorted arrays.\nfunction find_kth($arr1, $arr2, $k) {\n\t$i = 0;\n\t$j = 0;\n\t$count = 0;\n\twhile ($i < count($arr1) && $j < count($arr2)) {\n\t\tif ($arr1[$i] < $arr2[$j]) {\n\t\t\t$count++;\n\t\t\tif ($count == $k) {\n\t\t\t\treturn $arr1[$i];\n\t\t\t}\n\t\t\t$i++;\n\t\t} else {\n\t\t\t$count++;\n\t\t\tif ($count == $k) {\n\t\t\t\treturn $arr2[$j];\n\t\t\t}\n\t\t\t$j++;\n\t\t}\n\t}\n\twhile ($i < count($arr1)) {\n\t\t$count++;\n\t\tif ($count == $k) {\n\t\t\treturn $arr1[$i];\n\t\t}\n\t\t$i++;\n\t}\n\twhile ($j < count($arr2)) {\n\t\t$count++;\n\t\tif ($count == $k) {\n\t\t\treturn $arr2[$j];\n\t\t}\n\t\t$j++;\n\t}\n}\n\n$arr1 = [1, 3, 5, 7, 9];\n$arr2 = [2, 4, 6, 8, 10];\n$k = 5;\necho find_kth($arr1, $arr2, $k);\nfunction candidate(...$args) {\n    return find_kth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 3, 6, 7, 9), array(1, 4, 8, 10), 5) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 112, 256, 349, 770), array(72, 86, 113, 119, 265, 445, 892), 7) !== 256) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 4, 7, 8, 10), array(2, 5, 9, 11), 6) !== 8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510546,
      "stdout": "5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find kth element from the given two sorted arrays.\nfunction find_kth($arr1, $arr2, $k) {\n    $i = 0;\n    $j = 0;\n    $count = 0;\n    while ($i < count($arr1) && $j < count($arr2)) {\n        if ($arr1[$i] < $arr2[$j]) {\n            $count++;\n            if ($count == $k) {\n                return $arr1[$i];\n            }\n            $i++;\n        } else {\n            $count++;\n            if ($count == $k) {\n                return $arr2[$j];\n            }\n            $j++;\n        }\n    }\n    while ($i < count($arr1)) {\n        $count++;\n        if ($count == $k) {\n            return $arr1[$i];\n        }\n        $i++;\n    }\n    while ($j < count($arr2)) {\n        $count++;\n        if ($count == $k) {\n            return $arr2[$j];\n        }\n        $j++;\n    }\n}\n\n$arr1 = [1, 3, 5, 7, 9];\n$arr2 = [2, 4, 6, 8, 10];\necho find_kth($arr1, $arr2, 5);\nfunction candidate(...$args) {\n    return find_kth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 3, 6, 7, 9), array(1, 4, 8, 10), 5) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 112, 256, 349, 770), array(72, 86, 113, 119, 265, 445, 892), 7) !== 256) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 4, 7, 8, 10), array(2, 5, 9, 11), 6) !== 8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510546,
      "stdout": "5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find kth element from the given two sorted arrays.\nfunction find_kth($arr1, $arr2, $k) {\n    $i = 0;\n    $j = 0;\n    $count = 0;\n    while ($i < count($arr1) && $j < count($arr2)) {\n        if ($arr1[$i] < $arr2[$j]) {\n            $count++;\n            if ($count == $k) {\n                return $arr1[$i];\n            }\n            $i++;\n        } else {\n            $count++;\n            if ($count == $k) {\n                return $arr2[$j];\n            }\n            $j++;\n        }\n    }\n    while ($i < count($arr1)) {\n        $count++;\n        if ($count == $k) {\n            return $arr1[$i];\n        }\n        $i++;\n    }\n    while ($j < count($arr2)) {\n        $count++;\n        if ($count == $k) {\n            return $arr2[$j];\n        }\n        $j++;\n    }\n}\n\n$arr1 = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n$arr2 = [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20];\necho find_kth($arr1, $arr2, 10);\nfunction candidate(...$args) {\n    return find_kth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 3, 6, 7, 9), array(1, 4, 8, 10), 5) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 112, 256, 349, 770), array(72, 86, 113, 119, 265, 445, 892), 7) !== 256) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 4, 7, 8, 10), array(2, 5, 9, 11), 6) !== 8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510546,
      "stdout": "10",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find kth element from the given two sorted arrays.\nfunction find_kth($arr1, $arr2, $k) {\n    $i = 0;\n    $j = 0;\n    $count = 0;\n    while ($i < count($arr1) && $j < count($arr2)) {\n        if ($arr1[$i] < $arr2[$j]) {\n            $count++;\n            if ($count == $k) {\n                return $arr1[$i];\n            }\n            $i++;\n        } else {\n            $count++;\n            if ($count == $k) {\n                return $arr2[$j];\n            }\n            $j++;\n        }\n    }\n    while ($i < count($arr1)) {\n        $count++;\n        if ($count == $k) {\n            return $arr1[$i];\n        }\n        $i++;\n    }\n    while ($j < count($arr2)) {\n        $count++;\n        if ($count == $k) {\n            return $arr2[$j];\n        }\n        $j++;\n    }\n}\n\n$arr1 = [1, 3, 5, 7, 9];\n$arr2 = [2, 4, 6, 8, 10];\n$k = 5;\necho find_kth($arr1, $arr2, $k);\nfunction candidate(...$args) {\n    return find_kth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 3, 6, 7, 9), array(1, 4, 8, 10), 5) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 112, 256, 349, 770), array(72, 86, 113, 119, 265, 445, 892), 7) !== 256) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 4, 7, 8, 10), array(2, 5, 9, 11), 6) !== 8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510546,
      "stdout": "5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find kth element from the given two sorted arrays.\nfunction find_kth($arr1, $arr2, $k) {\n    $i = 0;\n    $j = 0;\n    $kth = 0;\n    while ($i < count($arr1) && $j < count($arr2)) {\n        if ($arr1[$i] < $arr2[$j]) {\n            $kth = $arr1[$i];\n            $i++;\n        } else {\n            $kth = $arr2[$j];\n            $j++;\n        }\n        $k--;\n        if ($k == 0) {\n            return $kth;\n        }\n    }\n    while ($i < count($arr1)) {\n        $kth = $arr1[$i];\n        $i++;\n        $k--;\n        if ($k == 0) {\n            return $kth;\n        }\n    }\n    while ($j < count($arr2)) {\n        $kth = $arr2[$j];\n        $j++;\n        $k--;\n        if ($k == 0) {\n            return $kth;\n        }\n    }\n}\n\n$arr1 = [2, 3, 6, 7, 9];\n$arr2 = [1, 4, 8, 10];\necho find_kth($arr1, $arr2, 5);\nfunction candidate(...$args) {\n    return find_kth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 3, 6, 7, 9), array(1, 4, 8, 10), 5) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 112, 256, 349, 770), array(72, 86, 113, 119, 265, 445, 892), 7) !== 256) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 4, 7, 8, 10), array(2, 5, 9, 11), 6) !== 8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510546,
      "stdout": "6",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find kth element from the given two sorted arrays.\nfunction find_kth($arr1, $arr2, $k) {\n    $i = 0;\n    $j = 0;\n    $count = 0;\n    while ($i < count($arr1) && $j < count($arr2)) {\n        if ($arr1[$i] < $arr2[$j]) {\n            $count++;\n            if ($count == $k) {\n                return $arr1[$i];\n            }\n            $i++;\n        } else {\n            $count++;\n            if ($count == $k) {\n                return $arr2[$j];\n            }\n            $j++;\n        }\n    }\n    while ($i < count($arr1)) {\n        $count++;\n        if ($count == $k) {\n            return $arr1[$i];\n        }\n        $i++;\n    }\n    while ($j < count($arr2)) {\n        $count++;\n        if ($count == $k) {\n            return $arr2[$j];\n        }\n        $j++;\n    }\n}\n\n$arr1 = [1, 3, 5, 7, 9];\n$arr2 = [2, 4, 6, 8, 10];\n$k = 4;\necho find_kth($arr1, $arr2, $k);\nfunction candidate(...$args) {\n    return find_kth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 3, 6, 7, 9), array(1, 4, 8, 10), 5) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 112, 256, 349, 770), array(72, 86, 113, 119, 265, 445, 892), 7) !== 256) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 4, 7, 8, 10), array(2, 5, 9, 11), 6) !== 8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510546,
      "stdout": "4",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find kth element from the given two sorted arrays.\nfunction find_kth($arr1, $arr2, $k) {\n    $i = 0;\n    $j = 0;\n    $count = 0;\n    $result = 0;\n    while ($count < $k) {\n        if ($arr1[$i] < $arr2[$j]) {\n            $result = $arr1[$i];\n            $i++;\n        } else {\n            $result = $arr2[$j];\n            $j++;\n        }\n        $count++;\n    }\n    return $result;\n}\n\n$arr1 = [1, 3, 5, 7, 9];\n$arr2 = [2, 4, 6, 8, 10];\n$k = 5;\necho find_kth($arr1, $arr2, $k);\nfunction candidate(...$args) {\n    return find_kth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 3, 6, 7, 9), array(1, 4, 8, 10), 5) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 112, 256, 349, 770), array(72, 86, 113, 119, 265, 445, 892), 7) !== 256) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 4, 7, 8, 10), array(2, 5, 9, 11), 6) !== 8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510546,
      "stdout": "5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find kth element from the given two sorted arrays.\nfunction find_kth($arr1, $arr2, $k) {\n    $i = 0;\n    $j = 0;\n    $kth = 0;\n    while ($i < count($arr1) && $j < count($arr2)) {\n        if ($arr1[$i] < $arr2[$j]) {\n            $kth = $arr1[$i];\n            $i++;\n        } else {\n            $kth = $arr2[$j];\n            $j++;\n        }\n        if ($i + $j == $k) {\n            break;\n        }\n    }\n    if ($i + $j < $k) {\n        if ($i == count($arr1)) {\n            $kth = $arr2[$j + $k - $i - $j - 1];\n        } else {\n            $kth = $arr1[$i + $k - $i - $j - 1];\n        }\n    }\n    return $kth;\n}\n\n$arr1 = [1, 3, 5, 7, 9];\n$arr2 = [2, 4, 6, 8, 10];\n$k = 5;\necho find_kth($arr1, $arr2, $k);\nfunction candidate(...$args) {\n    return find_kth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 3, 6, 7, 9), array(1, 4, 8, 10), 5) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 112, 256, 349, 770), array(72, 86, 113, 119, 265, 445, 892), 7) !== 256) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 4, 7, 8, 10), array(2, 5, 9, 11), 6) !== 8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510546,
      "stdout": "5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find kth element from the given two sorted arrays.\nfunction find_kth($arr1, $arr2, $k) {\n\t$i = 0;\n\t$j = 0;\n\t$kth = null;\n\twhile ($i < count($arr1) && $j < count($arr2)) {\n\t\tif ($arr1[$i] < $arr2[$j]) {\n\t\t\t$kth = $arr1[$i];\n\t\t\t$i++;\n\t\t} else {\n\t\t\t$kth = $arr2[$j];\n\t\t\t$j++;\n\t\t}\n\t\tif ($i + $j == $k) {\n\t\t\tbreak;\n\t\t}\n\t}\n\tif ($i + $j < $k) {\n\t\tif ($i == count($arr1)) {\n\t\t\t$kth = $arr2[$j + $k - $i - 1];\n\t\t} else {\n\t\t\t$kth = $arr1[$i + $k - $j - 1];\n\t\t}\n\t}\n\treturn $kth;\n}\n\n$arr1 = [1, 3, 5, 7, 9];\n$arr2 = [2, 4, 6, 8, 10];\n$k = 5;\n$kth = find_kth($arr1, $arr2, $k);\necho $kth;\nfunction candidate(...$args) {\n    return find_kth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 3, 6, 7, 9), array(1, 4, 8, 10), 5) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 112, 256, 349, 770), array(72, 86, 113, 119, 265, 445, 892), 7) !== 256) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 4, 7, 8, 10), array(2, 5, 9, 11), 6) !== 8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510546,
      "stdout": "5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find kth element from the given two sorted arrays.\nfunction find_kth($arr1, $arr2, $k) {\n    $i = 0;\n    $j = 0;\n    $count = 0;\n    while ($i < count($arr1) && $j < count($arr2)) {\n        if ($arr1[$i] < $arr2[$j]) {\n            $count++;\n            if ($count == $k) {\n                return $arr1[$i];\n            }\n            $i++;\n        } else {\n            $count++;\n            if ($count == $k) {\n                return $arr2[$j];\n            }\n            $j++;\n        }\n    }\n    while ($i < count($arr1)) {\n        $count++;\n        if ($count == $k) {\n            return $arr1[$i];\n        }\n        $i++;\n    }\n    while ($j < count($arr2)) {\n        $count++;\n        if ($count == $k) {\n            return $arr2[$j];\n        }\n        $j++;\n    }\n}\n\n$arr1 = [1, 3, 5, 7, 9];\n$arr2 = [2, 4, 6, 8, 10];\necho find_kth($arr1, $arr2, 7);\nfunction candidate(...$args) {\n    return find_kth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 3, 6, 7, 9), array(1, 4, 8, 10), 5) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 112, 256, 349, 770), array(72, 86, 113, 119, 265, 445, 892), 7) !== 256) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 4, 7, 8, 10), array(2, 5, 9, 11), 6) !== 8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510546,
      "stdout": "7",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find kth element from the given two sorted arrays.\nfunction find_kth($arr1, $arr2, $k) {\n    $i = 0;\n    $j = 0;\n    $count = 0;\n    while ($i < count($arr1) && $j < count($arr2)) {\n        if ($arr1[$i] < $arr2[$j]) {\n            $count++;\n            if ($count == $k) {\n                return $arr1[$i];\n            }\n            $i++;\n        } else {\n            $count++;\n            if ($count == $k) {\n                return $arr2[$j];\n            }\n            $j++;\n        }\n    }\n    while ($i < count($arr1)) {\n        $count++;\n        if ($count == $k) {\n            return $arr1[$i];\n        }\n        $i++;\n    }\n    while ($j < count($arr2)) {\n        $count++;\n        if ($count == $k) {\n            return $arr2[$j];\n        }\n        $j++;\n    }\n}\n\n$arr1 = array(2, 3, 6, 7, 9);\n$arr2 = array(1, 4, 8, 10);\n$k = 5;\necho find_kth($arr1, $arr2, $k);\nfunction candidate(...$args) {\n    return find_kth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 3, 6, 7, 9), array(1, 4, 8, 10), 5) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 112, 256, 349, 770), array(72, 86, 113, 119, 265, 445, 892), 7) !== 256) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 4, 7, 8, 10), array(2, 5, 9, 11), 6) !== 8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123418,
      "stdout": "6",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find kth element from the given two sorted arrays.\nfunction find_kth($arr1, $arr2, $k) {\n    $i = 0;\n    $j = 0;\n    $count = 0;\n    $res = 0;\n    while ($count < $k) {\n        if ($arr1[$i] < $arr2[$j]) {\n            $res = $arr1[$i];\n            $i++;\n        } else {\n            $res = $arr2[$j];\n            $j++;\n        }\n        $count++;\n    }\n    return $res;\n}\n\n$arr1 = [1, 3, 5, 7, 9];\n$arr2 = [2, 4, 6, 8, 10];\n$k = 5;\necho find_kth($arr1, $arr2, $k);\nfunction candidate(...$args) {\n    return find_kth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 3, 6, 7, 9), array(1, 4, 8, 10), 5) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 112, 256, 349, 770), array(72, 86, 113, 119, 265, 445, 892), 7) !== 256) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 4, 7, 8, 10), array(2, 5, 9, 11), 6) !== 8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123418,
      "stdout": "5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find kth element from the given two sorted arrays.\nfunction find_kth($arr1, $arr2, $k) {\n    $len1 = count($arr1);\n    $len2 = count($arr2);\n    $i = 0;\n    $j = 0;\n    $count = 0;\n    while ($i < $len1 && $j < $len2) {\n        if ($arr1[$i] < $arr2[$j]) {\n            $count++;\n            if ($count == $k) {\n                return $arr1[$i];\n            }\n            $i++;\n        } else {\n            $count++;\n            if ($count == $k) {\n                return $arr2[$j];\n            }\n            $j++;\n        }\n    }\n    while ($i < $len1) {\n        $count++;\n        if ($count == $k) {\n            return $arr1[$i];\n        }\n        $i++;\n    }\n    while ($j < $len2) {\n        $count++;\n        if ($count == $k) {\n            return $arr2[$j];\n        }\n        $j++;\n    }\n}\n\n$arr1 = array(1, 3, 5, 7, 9);\n$arr2 = array(2, 4, 6, 8, 10);\necho find_kth($arr1, $arr2, 5);\nfunction candidate(...$args) {\n    return find_kth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 3, 6, 7, 9), array(1, 4, 8, 10), 5) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 112, 256, 349, 770), array(72, 86, 113, 119, 265, 445, 892), 7) !== 256) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 4, 7, 8, 10), array(2, 5, 9, 11), 6) !== 8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123418,
      "stdout": "5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find kth element from the given two sorted arrays.\nfunction find_kth($arr1, $arr2, $k) {\n    $i = 0;\n    $j = 0;\n    $count = 0;\n    while ($i < count($arr1) && $j < count($arr2)) {\n        if ($arr1[$i] < $arr2[$j]) {\n            $count++;\n            if ($count == $k) {\n                return $arr1[$i];\n            }\n            $i++;\n        } else {\n            $count++;\n            if ($count == $k) {\n                return $arr2[$j];\n            }\n            $j++;\n        }\n    }\n    while ($i < count($arr1)) {\n        $count++;\n        if ($count == $k) {\n            return $arr1[$i];\n        }\n        $i++;\n    }\n    while ($j < count($arr2)) {\n        $count++;\n        if ($count == $k) {\n            return $arr2[$j];\n        }\n        $j++;\n    }\n}\n\n$arr1 = [1, 3, 5, 7, 9];\n$arr2 = [2, 4, 6, 8, 10];\n$k = 4;\necho find_kth($arr1, $arr2, $k);\nfunction candidate(...$args) {\n    return find_kth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 3, 6, 7, 9), array(1, 4, 8, 10), 5) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 112, 256, 349, 770), array(72, 86, 113, 119, 265, 445, 892), 7) !== 256) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 4, 7, 8, 10), array(2, 5, 9, 11), 6) !== 8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510546,
      "stdout": "4",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find kth element from the given two sorted arrays.\nfunction find_kth($arr1, $arr2, $k) {\n    $i = 0;\n    $j = 0;\n    $count = 0;\n    while ($i < count($arr1) && $j < count($arr2)) {\n        if ($arr1[$i] < $arr2[$j]) {\n            $count++;\n            if ($count == $k) {\n                return $arr1[$i];\n            }\n            $i++;\n        } else {\n            $count++;\n            if ($count == $k) {\n                return $arr2[$j];\n            }\n            $j++;\n        }\n    }\n    while ($i < count($arr1)) {\n        $count++;\n        if ($count == $k) {\n            return $arr1[$i];\n        }\n        $i++;\n    }\n    while ($j < count($arr2)) {\n        $count++;\n        if ($count == $k) {\n            return $arr2[$j];\n        }\n        $j++;\n    }\n}\n\n$arr1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$arr2 = [11, 12, 13, 14, 15, 16, 17, 18, 19, 20];\n$k = 11;\necho find_kth($arr1, $arr2, $k);\nfunction candidate(...$args) {\n    return find_kth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 3, 6, 7, 9), array(1, 4, 8, 10), 5) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 112, 256, 349, 770), array(72, 86, 113, 119, 265, 445, 892), 7) !== 256) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 4, 7, 8, 10), array(2, 5, 9, 11), 6) !== 8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123418,
      "stdout": "11",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find kth element from the given two sorted arrays.\nfunction find_kth($arr1, $arr2, $k) {\n    $len1 = count($arr1);\n    $len2 = count($arr2);\n    if ($len1 == 0) {\n        return $arr2[$k - 1];\n    }\n    if ($len2 == 0) {\n        return $arr1[$k - 1];\n    }\n    if ($k == 1) {\n        return min($arr1[0], $arr2[0]);\n    }\n    $mid1 = min($len1, $k / 2);\n    $mid2 = min($len2, $k / 2);\n    if ($arr1[$mid1 - 1] > $arr2[$mid2 - 1]) {\n        return find_kth($arr1, array_slice($arr2, $mid2), $k - $mid2);\n    } else {\n        return find_kth(array_slice($arr1, $mid1), $arr2, $k - $mid1);\n    }\n}\n\n$arr1 = [1, 3, 5, 7, 9];\n$arr2 = [2, 4, 6, 8, 10];\n\necho find_kth($arr1, $arr2, 5);\nfunction candidate(...$args) {\n    return find_kth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 3, 6, 7, 9), array(1, 4, 8, 10), 5) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 112, 256, 349, 770), array(72, 86, 113, 119, 265, 445, 892), 7) !== 256) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 4, 7, 8, 10), array(2, 5, 9, 11), 6) !== 8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123433,
      "stdout": "\nDeprecated: Implicit conversion from float 1.5 to int loses precision in /tmp/tmp0bk2900a.php on line 17\n\nDeprecated: Implicit conversion from float 1.5 to int loses precision in /tmp/tmp0bk2900a.php on line 17\n\nDeprecated: Implicit conversion from float 2.5 to int loses precision in /tmp/tmp0bk2900a.php on line 20\n\nDeprecated: Implicit conversion from float 0.25 to int loses precision in /tmp/tmp0bk2900a.php on line 17\n\nDeprecated: Implicit conversion from float 0.25 to int loses precision in /tmp/tmp0bk2900a.php on line 17\n\nDeprecated: Implicit conversion from float 1.25 to int loses precision in /tmp/tmp0bk2900a.php on line 18\n\nDeprecated: Implicit conversion from float -0.375 to int loses precision in /tmp/tmp0bk2900a.php on line 17\n\nDeprecated: Implicit conversion from float -0.375 to int loses precision in /tmp/tmp0bk2900a.php on line 17\n\nDeprecated: Implicit conversion from float 0.625 to int loses precision in /tmp/tmp0bk2900a.php on line 18\n\nDeprecated: Implicit conversion from float -0.6875 to int loses precision in /tmp/tmp0bk2900a.php on line 17\n\nDeprecated: Implicit conversion from float -0.6875 to int loses precision in /tmp/tmp0bk2900a.php on line 17\n\nDeprecated: Implicit conversion from float 0.3125 to int loses precision in /tmp/tmp0bk2900a.php on line 18\n\nDeprecated: Implicit conversion from float -0.84375 to int loses precision in /tmp/tmp0bk2900a.php on line 17\n\nDeprecated: Implicit conversion from float -0.84375 to int loses precision in /tmp/tmp0bk2900a.php on line 17\n\nDeprecated: Implicit conversion from float 0.15625 to int loses precision in /tmp/tmp0bk2900a.php on line 18\n\nDeprecated: Implicit conversion from float -0.921875 to int loses precision in /tmp/tmp0bk2900a.php on line 17\n\nDeprecated: Implicit conversion from float -0.921875 to int loses precision in /tmp/tmp0bk2900a.php on line 17\n\nDeprecated: Implicit conversion from float 0.078125 to int loses precision in /tmp/tmp0bk2900a.php on line 18\n\nDeprecated: Implicit conversion from float -0.9609375 to int loses precision in /tmp/t",
      "stderr": "",
      "exit_code": -1,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find kth element from the given two sorted arrays.\nfunction find_kth($arr1, $arr2, $k) {\n    $i = 0;\n    $j = 0;\n    $count = 0;\n    while ($i < count($arr1) && $j < count($arr2)) {\n        if ($arr1[$i] < $arr2[$j]) {\n            $count++;\n            if ($count == $k) {\n                return $arr1[$i];\n            }\n            $i++;\n        } else {\n            $count++;\n            if ($count == $k) {\n                return $arr2[$j];\n            }\n            $j++;\n        }\n    }\n    while ($i < count($arr1)) {\n        $count++;\n        if ($count == $k) {\n            return $arr1[$i];\n        }\n        $i++;\n    }\n    while ($j < count($arr2)) {\n        $count++;\n        if ($count == $k) {\n            return $arr2[$j];\n        }\n        $j++;\n    }\n}\n\n$arr1 = [1, 3, 5, 7, 9];\n$arr2 = [2, 4, 6, 8, 10];\n$k = 8;\necho find_kth($arr1, $arr2, $k);\nfunction candidate(...$args) {\n    return find_kth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 3, 6, 7, 9), array(1, 4, 8, 10), 5) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 112, 256, 349, 770), array(72, 86, 113, 119, 265, 445, 892), 7) !== 256) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 4, 7, 8, 10), array(2, 5, 9, 11), 6) !== 8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123418,
      "stdout": "8",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find kth element from the given two sorted arrays.\nfunction find_kth($arr1, $arr2, $k) {\n    $i = 0;\n    $j = 0;\n    $count = 0;\n    $result = 0;\n    while ($i < count($arr1) && $j < count($arr2)) {\n        if ($arr1[$i] < $arr2[$j]) {\n            $result = $arr1[$i];\n            $i++;\n        } else {\n            $result = $arr2[$j];\n            $j++;\n        }\n        $count++;\n        if ($count == $k) {\n            break;\n        }\n    }\n    while ($i < count($arr1)) {\n        $result = $arr1[$i];\n        $i++;\n        $count++;\n        if ($count == $k) {\n            break;\n        }\n    }\n    while ($j < count($arr2)) {\n        $result = $arr2[$j];\n        $j++;\n        $count++;\n        if ($count == $k) {\n            break;\n        }\n    }\n    return $result;\n}\n\n$arr1 = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n$arr2 = [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20];\n$k = 10;\necho find_kth($arr1, $arr2, $k);\nfunction candidate(...$args) {\n    return find_kth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 3, 6, 7, 9), array(1, 4, 8, 10), 5) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 112, 256, 349, 770), array(72, 86, 113, 119, 265, 445, 892), 7) !== 256) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 4, 7, 8, 10), array(2, 5, 9, 11), 6) !== 8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123418,
      "stdout": "10\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptub1px3d.php:49\nStack trace:\n#0 /tmp/tmptub1px3d.php(54): test()\n#1 {main}\n  thrown in /tmp/tmptub1px3d.php on line 49\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find kth element from the given two sorted arrays.\nfunction find_kth($arr1, $arr2, $k) {\n    $i = 0;\n    $j = 0;\n    $count = 0;\n    while ($i < count($arr1) && $j < count($arr2)) {\n        if ($arr1[$i] < $arr2[$j]) {\n            $i++;\n        } else {\n            $j++;\n        }\n        $count++;\n        if ($count == $k) {\n            break;\n        }\n    }\n    if ($i == count($arr1)) {\n        return $arr2[$j];\n    } else if ($j == count($arr2)) {\n        return $arr1[$i];\n    } else {\n        return min($arr1[$i], $arr2[$j]);\n    }\n}\n\n$arr1 = [1, 3, 5, 7, 9];\n$arr2 = [2, 4, 6, 8, 10];\n$k = 5;\necho find_kth($arr1, $arr2, $k);\nfunction candidate(...$args) {\n    return find_kth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 3, 6, 7, 9), array(1, 4, 8, 10), 5) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 112, 256, 349, 770), array(72, 86, 113, 119, 265, 445, 892), 7) !== 256) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 4, 7, 8, 10), array(2, 5, 9, 11), 6) !== 8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123418,
      "stdout": "6\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_6mbnc75.php:36\nStack trace:\n#0 /tmp/tmp_6mbnc75.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp_6mbnc75.php on line 36\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find kth element from the given two sorted arrays.\nfunction find_kth($arr1, $arr2, $k) {\n    $i = 0;\n    $j = 0;\n    $count = 0;\n    while ($i < count($arr1) && $j < count($arr2)) {\n        if ($arr1[$i] < $arr2[$j]) {\n            $count++;\n            if ($count == $k) {\n                return $arr1[$i];\n            }\n            $i++;\n        } else {\n            $count++;\n            if ($count == $k) {\n                return $arr2[$j];\n            }\n            $j++;\n        }\n    }\n    while ($i < count($arr1)) {\n        $count++;\n        if ($count == $k) {\n            return $arr1[$i];\n        }\n        $i++;\n    }\n    while ($j < count($arr2)) {\n        $count++;\n        if ($count == $k) {\n            return $arr2[$j];\n        }\n        $j++;\n    }\n}\n\n$arr1 = [1, 4, 7, 9, 10];\n$arr2 = [2, 3, 5, 6, 8];\n$k = 5;\necho find_kth($arr1, $arr2, $k);\nfunction candidate(...$args) {\n    return find_kth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 3, 6, 7, 9), array(1, 4, 8, 10), 5) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 112, 256, 349, 770), array(72, 86, 113, 119, 265, 445, 892), 7) !== 256) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 4, 7, 8, 10), array(2, 5, 9, 11), 6) !== 8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123418,
      "stdout": "5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find kth element from the given two sorted arrays.\nfunction find_kth($arr1, $arr2, $k) {\n    $i = 0;\n    $j = 0;\n    $count = 0;\n    while ($i < count($arr1) && $j < count($arr2)) {\n        if ($arr1[$i] < $arr2[$j]) {\n            $count++;\n            if ($count == $k) {\n                return $arr1[$i];\n            }\n            $i++;\n        } else {\n            $count++;\n            if ($count == $k) {\n                return $arr2[$j];\n            }\n            $j++;\n        }\n    }\n    while ($i < count($arr1)) {\n        $count++;\n        if ($count == $k) {\n            return $arr1[$i];\n        }\n        $i++;\n    }\n    while ($j < count($arr2)) {\n        $count++;\n        if ($count == $k) {\n            return $arr2[$j];\n        }\n        $j++;\n    }\n}\n\n$arr1 = [1, 3, 5, 7, 9];\n$arr2 = [2, 4, 6, 8, 10];\necho find_kth($arr1, $arr2, 5);\nfunction candidate(...$args) {\n    return find_kth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 3, 6, 7, 9), array(1, 4, 8, 10), 5) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 112, 256, 349, 770), array(72, 86, 113, 119, 265, 445, 892), 7) !== 256) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 4, 7, 8, 10), array(2, 5, 9, 11), 6) !== 8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510546,
      "stdout": "5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find kth element from the given two sorted arrays.\nfunction find_kth($arr1, $arr2, $k) {\n    if ($k <= 0) {\n        return false;\n    }\n    if (count($arr1) == 0) {\n        return $arr2[$k - 1];\n    }\n    if (count($arr2) == 0) {\n        return $arr1[$k - 1];\n    }\n    $mid1 = (int)(count($arr1) / 2);\n    $mid2 = (int)(count($arr2) / 2);\n    if ($mid1 + $mid2 < $k - 1) {\n        if ($arr1[$mid1] > $arr2[$mid2]) {\n            return find_kth(array_slice($arr1, 0), array_slice($arr2, $mid2 + 1), $k - $mid2 - 1);\n        } else {\n            return find_kth(array_slice($arr1, $mid1 + 1), array_slice($arr2, 0), $k - $mid1 - 1);\n        }\n    } else {\n        if ($arr1[$mid1] > $arr2[$mid2]) {\n            return find_kth(array_slice($arr1, 0, $mid1), $arr2, $k);\n        } else {\n            return find_kth($arr1, array_slice($arr2, 0, $mid2), $k);\n        }\n    }\n}\n\n$arr1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$arr2 = [11, 12, 13, 14, 15, 16, 17, 18, 19, 20];\n$k = 5;\necho find_kth($arr1, $arr2, $k);\nfunction candidate(...$args) {\n    return find_kth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 3, 6, 7, 9), array(1, 4, 8, 10), 5) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 112, 256, 349, 770), array(72, 86, 113, 119, 265, 445, 892), 7) !== 256) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 4, 7, 8, 10), array(2, 5, 9, 11), 6) !== 8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123418,
      "stdout": "5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find kth element from the given two sorted arrays.\nfunction find_kth($arr1, $arr2, $k) {\n    $i = 0;\n    $j = 0;\n    $count = 0;\n    while ($i < count($arr1) && $j < count($arr2)) {\n        if ($arr1[$i] < $arr2[$j]) {\n            $count++;\n            if ($count == $k) {\n                return $arr1[$i];\n            }\n            $i++;\n        } else {\n            $count++;\n            if ($count == $k) {\n                return $arr2[$j];\n            }\n            $j++;\n        }\n    }\n    while ($i < count($arr1)) {\n        $count++;\n        if ($count == $k) {\n            return $arr1[$i];\n        }\n        $i++;\n    }\n    while ($j < count($arr2)) {\n        $count++;\n        if ($count == $k) {\n            return $arr2[$j];\n        }\n        $j++;\n    }\n}\n\n$arr1 = [1, 3, 5, 7, 9];\n$arr2 = [2, 4, 6, 8, 10];\n\necho find_kth($arr1, $arr2, 5);\nfunction candidate(...$args) {\n    return find_kth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 3, 6, 7, 9), array(1, 4, 8, 10), 5) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 112, 256, 349, 770), array(72, 86, 113, 119, 265, 445, 892), 7) !== 256) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 4, 7, 8, 10), array(2, 5, 9, 11), 6) !== 8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123418,
      "stdout": "5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find kth element from the given two sorted arrays.\nfunction find_kth($arr1, $arr2, $k) {\n    $i = 0;\n    $j = 0;\n    $count = 0;\n    while ($i < count($arr1) && $j < count($arr2)) {\n        if ($arr1[$i] < $arr2[$j]) {\n            $count++;\n            if ($count == $k) {\n                return $arr1[$i];\n            }\n            $i++;\n        } else {\n            $count++;\n            if ($count == $k) {\n                return $arr2[$j];\n            }\n            $j++;\n        }\n    }\n    if ($i == count($arr1)) {\n        return $arr2[$j + $k - $count - 1];\n    } else {\n        return $arr1[$i + $k - $count - 1];\n    }\n}\n\n$arr1 = [1, 3, 5, 7, 9];\n$arr2 = [2, 4, 6, 8, 10];\necho find_kth($arr1, $arr2, 5);\nfunction candidate(...$args) {\n    return find_kth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 3, 6, 7, 9), array(1, 4, 8, 10), 5) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 112, 256, 349, 770), array(72, 86, 113, 119, 265, 445, 892), 7) !== 256) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 4, 7, 8, 10), array(2, 5, 9, 11), 6) !== 8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123418,
      "stdout": "5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find kth element from the given two sorted arrays.\nfunction find_kth($arr1, $arr2, $k) {\n    $len1 = count($arr1);\n    $len2 = count($arr2);\n    if ($len1 == 0) {\n        return $arr2[$k - 1];\n    }\n    if ($len2 == 0) {\n        return $arr1[$k - 1];\n    }\n    if ($k == 1) {\n        return min($arr1[0], $arr2[0]);\n    }\n    $mid1 = min($len1, $k / 2);\n    $mid2 = min($len2, $k / 2);\n    if ($arr1[$mid1 - 1] < $arr2[$mid2 - 1]) {\n        return find_kth(array_slice($arr1, $mid1), $arr2, $k - $mid1);\n    } else {\n        return find_kth($arr1, array_slice($arr2, $mid2), $k - $mid2);\n    }\n}\n\n$arr1 = [1, 3, 5, 7, 9];\n$arr2 = [2, 4, 6, 8, 10];\n$k = 5;\necho find_kth($arr1, $arr2, $k);\nfunction candidate(...$args) {\n    return find_kth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 3, 6, 7, 9), array(1, 4, 8, 10), 5) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 112, 256, 349, 770), array(72, 86, 113, 119, 265, 445, 892), 7) !== 256) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 4, 7, 8, 10), array(2, 5, 9, 11), 6) !== 8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123433,
      "stdout": "\nDeprecated: Implicit conversion from float 1.5 to int loses precision in /tmp/tmp9bebe4il.php on line 17\n\nDeprecated: Implicit conversion from float 1.5 to int loses precision in /tmp/tmp9bebe4il.php on line 17\n\nDeprecated: Implicit conversion from float 2.5 to int loses precision in /tmp/tmp9bebe4il.php on line 18\n\nDeprecated: Implicit conversion from float 0.25 to int loses precision in /tmp/tmp9bebe4il.php on line 17\n\nDeprecated: Implicit conversion from float 0.25 to int loses precision in /tmp/tmp9bebe4il.php on line 17\n\nDeprecated: Implicit conversion from float 1.25 to int loses precision in /tmp/tmp9bebe4il.php on line 20\n\nDeprecated: Implicit conversion from float -0.375 to int loses precision in /tmp/tmp9bebe4il.php on line 17\n\nDeprecated: Implicit conversion from float -0.375 to int loses precision in /tmp/tmp9bebe4il.php on line 17\n\nDeprecated: Implicit conversion from float 0.625 to int loses precision in /tmp/tmp9bebe4il.php on line 20\n\nDeprecated: Implicit conversion from float -0.6875 to int loses precision in /tmp/tmp9bebe4il.php on line 17\n\nDeprecated: Implicit conversion from float -0.6875 to int loses precision in /tmp/tmp9bebe4il.php on line 17\n\nDeprecated: Implicit conversion from float 0.3125 to int loses precision in /tmp/tmp9bebe4il.php on line 20\n\nDeprecated: Implicit conversion from float -0.84375 to int loses precision in /tmp/tmp9bebe4il.php on line 17\n\nDeprecated: Implicit conversion from float -0.84375 to int loses precision in /tmp/tmp9bebe4il.php on line 17\n\nDeprecated: Implicit conversion from float 0.15625 to int loses precision in /tmp/tmp9bebe4il.php on line 20\n\nDeprecated: Implicit conversion from float -0.921875 to int loses precision in /tmp/tmp9bebe4il.php on line 17\n\nDeprecated: Implicit conversion from float -0.921875 to int loses precision in /tmp/tmp9bebe4il.php on line 17\n\nDeprecated: Implicit conversion from float 0.078125 to int loses precision in /tmp/tmp9bebe4il.php on line 20\n\nDeprecated: Implicit conversion from float -0.9609375 to int loses precision in /tmp/t",
      "stderr": "",
      "exit_code": -1,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find kth element from the given two sorted arrays.\nfunction find_kth($arr1, $arr2, $k) {\n    $i = 0;\n    $j = 0;\n    $count = 0;\n    while ($i < count($arr1) && $j < count($arr2)) {\n        if ($arr1[$i] < $arr2[$j]) {\n            $count++;\n            if ($count == $k) {\n                return $arr1[$i];\n            }\n            $i++;\n        } else {\n            $count++;\n            if ($count == $k) {\n                return $arr2[$j];\n            }\n            $j++;\n        }\n    }\n    while ($i < count($arr1)) {\n        $count++;\n        if ($count == $k) {\n            return $arr1[$i];\n        }\n        $i++;\n    }\n    while ($j < count($arr2)) {\n        $count++;\n        if ($count == $k) {\n            return $arr2[$j];\n        }\n        $j++;\n    }\n}\n\n$arr1 = [1, 3, 5, 7, 9];\n$arr2 = [2, 4, 6, 8, 10];\n$k = 5;\necho find_kth($arr1, $arr2, $k);\nfunction candidate(...$args) {\n    return find_kth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 3, 6, 7, 9), array(1, 4, 8, 10), 5) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 112, 256, 349, 770), array(72, 86, 113, 119, 265, 445, 892), 7) !== 256) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 4, 7, 8, 10), array(2, 5, 9, 11), 6) !== 8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510546,
      "stdout": "5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find kth element from the given two sorted arrays.\nfunction find_kth($arr1, $arr2, $k) {\n    $i = 0;\n    $j = 0;\n    $count = 0;\n    while ($i < count($arr1) && $j < count($arr2)) {\n        if ($arr1[$i] < $arr2[$j]) {\n            $count++;\n            if ($count == $k) {\n                return $arr1[$i];\n            }\n            $i++;\n        } else {\n            $count++;\n            if ($count == $k) {\n                return $arr2[$j];\n            }\n            $j++;\n        }\n    }\n    while ($i < count($arr1)) {\n        $count++;\n        if ($count == $k) {\n            return $arr1[$i];\n        }\n        $i++;\n    }\n    while ($j < count($arr2)) {\n        $count++;\n        if ($count == $k) {\n            return $arr2[$j];\n        }\n        $j++;\n    }\n}\n\n$arr1 = [1, 3, 5, 7, 9];\n$arr2 = [2, 4, 6, 8, 10];\n$k = 5;\necho find_kth($arr1, $arr2, $k);\nfunction candidate(...$args) {\n    return find_kth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 3, 6, 7, 9), array(1, 4, 8, 10), 5) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 112, 256, 349, 770), array(72, 86, 113, 119, 265, 445, 892), 7) !== 256) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 4, 7, 8, 10), array(2, 5, 9, 11), 6) !== 8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510546,
      "stdout": "5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find kth element from the given two sorted arrays.\nfunction find_kth($arr1, $arr2, $k) {\n    $i = 0;\n    $j = 0;\n    $count = 0;\n    while ($i < count($arr1) && $j < count($arr2)) {\n        if ($arr1[$i] < $arr2[$j]) {\n            $count++;\n            if ($count == $k) {\n                return $arr1[$i];\n            }\n            $i++;\n        } else {\n            $count++;\n            if ($count == $k) {\n                return $arr2[$j];\n            }\n            $j++;\n        }\n    }\n    while ($i < count($arr1)) {\n        $count++;\n        if ($count == $k) {\n            return $arr1[$i];\n        }\n        $i++;\n    }\n    while ($j < count($arr2)) {\n        $count++;\n        if ($count == $k) {\n            return $arr2[$j];\n        }\n        $j++;\n    }\n}\n\n$arr1 = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n$arr2 = [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20];\n$k = 5;\necho find_kth($arr1, $arr2, $k);\nfunction candidate(...$args) {\n    return find_kth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 3, 6, 7, 9), array(1, 4, 8, 10), 5) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 112, 256, 349, 770), array(72, 86, 113, 119, 265, 445, 892), 7) !== 256) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 4, 7, 8, 10), array(2, 5, 9, 11), 6) !== 8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123418,
      "stdout": "5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find kth element from the given two sorted arrays.\nfunction find_kth($arr1, $arr2, $k) {\n    if ($k <= 0 || $k > count($arr1) + count($arr2)) {\n        return null;\n    }\n    $i = 0;\n    $j = 0;\n    while ($i < count($arr1) && $j < count($arr2)) {\n        if ($arr1[$i] < $arr2[$j]) {\n            if ($i + $j + 1 == $k) {\n                return $arr1[$i];\n            }\n            $i++;\n        } else {\n            if ($i + $j + 1 == $k) {\n                return $arr2[$j];\n            }\n            $j++;\n        }\n    }\n    if ($i < count($arr1)) {\n        return $arr1[$i + $k - 1 - $j];\n    }\n    if ($j < count($arr2)) {\n        return $arr2[$j + $k - 1 - $i];\n    }\n}\n\n$arr1 = [2, 3, 6, 7, 9];\n$arr2 = [1, 4, 8, 10];\n$k = 5;\necho find_kth($arr1, $arr2, $k);\nfunction candidate(...$args) {\n    return find_kth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 3, 6, 7, 9), array(1, 4, 8, 10), 5) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 112, 256, 349, 770), array(72, 86, 113, 119, 265, 445, 892), 7) !== 256) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 4, 7, 8, 10), array(2, 5, 9, 11), 6) !== 8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123418,
      "stdout": "6",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find kth element from the given two sorted arrays.\nfunction find_kth($arr1, $arr2, $k) {\n  $len1 = count($arr1);\n  $len2 = count($arr2);\n  if ($len1 == 0) {\n    return $arr2[$k - 1];\n  }\n  if ($len2 == 0) {\n    return $arr1[$k - 1];\n  }\n  if ($k == 1) {\n    return min($arr1[0], $arr2[0]);\n  }\n  $mid1 = min($len1, floor($k / 2));\n  $mid2 = min($len2, floor($k / 2));\n  if ($arr1[$mid1 - 1] < $arr2[$mid2 - 1]) {\n    return find_kth(array_slice($arr1, $mid1), $arr2, $k - $mid1);\n  } else {\n    return find_kth($arr1, array_slice($arr2, $mid2), $k - $mid2);\n  }\n}\n\n$arr1 = [1, 3, 5, 7, 9];\n$arr2 = [2, 4, 6, 8, 10];\n$k = 6;\necho find_kth($arr1, $arr2, $k);\nfunction candidate(...$args) {\n    return find_kth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 3, 6, 7, 9), array(1, 4, 8, 10), 5) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 112, 256, 349, 770), array(72, 86, 113, 119, 265, 445, 892), 7) !== 256) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 4, 7, 8, 10), array(2, 5, 9, 11), 6) !== 8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123418,
      "stdout": "6",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find kth element from the given two sorted arrays.\nfunction find_kth($arr1, $arr2, $k) {\n    $i = 0;\n    $j = 0;\n    $count = 0;\n    while ($i < count($arr1) && $j < count($arr2)) {\n        if ($arr1[$i] < $arr2[$j]) {\n            $count++;\n            if ($count == $k) {\n                return $arr1[$i];\n            }\n            $i++;\n        } else {\n            $count++;\n            if ($count == $k) {\n                return $arr2[$j];\n            }\n            $j++;\n        }\n    }\n    while ($i < count($arr1)) {\n        $count++;\n        if ($count == $k) {\n            return $arr1[$i];\n        }\n        $i++;\n    }\n    while ($j < count($arr2)) {\n        $count++;\n        if ($count == $k) {\n            return $arr2[$j];\n        }\n        $j++;\n    }\n}\n\n$arr1 = [1, 3, 5, 7, 9];\n$arr2 = [2, 4, 6, 8, 10];\necho find_kth($arr1, $arr2, 5);\nfunction candidate(...$args) {\n    return find_kth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 3, 6, 7, 9), array(1, 4, 8, 10), 5) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 112, 256, 349, 770), array(72, 86, 113, 119, 265, 445, 892), 7) !== 256) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 4, 7, 8, 10), array(2, 5, 9, 11), 6) !== 8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510546,
      "stdout": "5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find kth element from the given two sorted arrays.\nfunction find_kth($arr1, $arr2, $k) {\n    $i = 0;\n    $j = 0;\n    $count = 0;\n    while ($i < count($arr1) && $j < count($arr2)) {\n        if ($arr1[$i] < $arr2[$j]) {\n            $count++;\n            if ($count == $k) {\n                return $arr1[$i];\n            }\n            $i++;\n        } else {\n            $count++;\n            if ($count == $k) {\n                return $arr2[$j];\n            }\n            $j++;\n        }\n    }\n    while ($i < count($arr1)) {\n        $count++;\n        if ($count == $k) {\n            return $arr1[$i];\n        }\n        $i++;\n    }\n    while ($j < count($arr2)) {\n        $count++;\n        if ($count == $k) {\n            return $arr2[$j];\n        }\n        $j++;\n    }\n}\n\n$arr1 = array(1, 2, 3, 4, 5, 6, 7);\n$arr2 = array(2, 3, 4, 5, 6, 7, 8);\n$k = 5;\necho find_kth($arr1, $arr2, $k);\nfunction candidate(...$args) {\n    return find_kth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 3, 6, 7, 9), array(1, 4, 8, 10), 5) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 112, 256, 349, 770), array(72, 86, 113, 119, 265, 445, 892), 7) !== 256) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 4, 7, 8, 10), array(2, 5, 9, 11), 6) !== 8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123418,
      "stdout": "3",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find kth element from the given two sorted arrays.\nfunction find_kth($arr1, $arr2, $k) {\n    $i = 0;\n    $j = 0;\n    $count = 0;\n    $result = 0;\n    while ($i < count($arr1) && $j < count($arr2)) {\n        if ($arr1[$i] < $arr2[$j]) {\n            $result = $arr1[$i];\n            $i++;\n        } else {\n            $result = $arr2[$j];\n            $j++;\n        }\n        $count++;\n        if ($count == $k) {\n            return $result;\n        }\n    }\n    while ($i < count($arr1)) {\n        $result = $arr1[$i];\n        $i++;\n        $count++;\n        if ($count == $k) {\n            return $result;\n        }\n    }\n    while ($j < count($arr2)) {\n        $result = $arr2[$j];\n        $j++;\n        $count++;\n        if ($count == $k) {\n            return $result;\n        }\n    }\n}\n\n$arr1 = array(1, 3, 5, 7, 9);\n$arr2 = array(2, 4, 6, 8, 10);\n$k = 5;\necho find_kth($arr1, $arr2, $k);\nfunction candidate(...$args) {\n    return find_kth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 3, 6, 7, 9), array(1, 4, 8, 10), 5) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 112, 256, 349, 770), array(72, 86, 113, 119, 265, 445, 892), 7) !== 256) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 4, 7, 8, 10), array(2, 5, 9, 11), 6) !== 8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123418,
      "stdout": "5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find kth element from the given two sorted arrays.\nfunction find_kth($arr1, $arr2, $k) {\n    $i = 0;\n    $j = 0;\n    $count = 0;\n    $result = 0;\n    while ($i < count($arr1) && $j < count($arr2)) {\n        if ($arr1[$i] < $arr2[$j]) {\n            $result = $arr1[$i];\n            $i++;\n        } else {\n            $result = $arr2[$j];\n            $j++;\n        }\n        $count++;\n        if ($count == $k) {\n            break;\n        }\n    }\n    while ($i < count($arr1)) {\n        $result = $arr1[$i];\n        $i++;\n        $count++;\n        if ($count == $k) {\n            break;\n        }\n    }\n    while ($j < count($arr2)) {\n        $result = $arr2[$j];\n        $j++;\n        $count++;\n        if ($count == $k) {\n            break;\n        }\n    }\n    return $result;\n}\n\n$arr1 = [1, 3, 5, 7, 9];\n$arr2 = [2, 4, 6, 8, 10];\n$k = 5;\necho find_kth($arr1, $arr2, $k);\nfunction candidate(...$args) {\n    return find_kth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 3, 6, 7, 9), array(1, 4, 8, 10), 5) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 112, 256, 349, 770), array(72, 86, 113, 119, 265, 445, 892), 7) !== 256) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 4, 7, 8, 10), array(2, 5, 9, 11), 6) !== 8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123418,
      "stdout": "10\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptuz21lo2.php:49\nStack trace:\n#0 /tmp/tmptuz21lo2.php(54): test()\n#1 {main}\n  thrown in /tmp/tmptuz21lo2.php on line 49\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find kth element from the given two sorted arrays.\nfunction find_kth($arr1, $arr2, $k) {\n    $i = 0;\n    $j = 0;\n    $count = 0;\n    while ($i < count($arr1) && $j < count($arr2)) {\n        if ($arr1[$i] < $arr2[$j]) {\n            $count++;\n            if ($count == $k) {\n                return $arr1[$i];\n            }\n            $i++;\n        } else {\n            $count++;\n            if ($count == $k) {\n                return $arr2[$j];\n            }\n            $j++;\n        }\n    }\n    while ($i < count($arr1)) {\n        $count++;\n        if ($count == $k) {\n            return $arr1[$i];\n        }\n        $i++;\n    }\n    while ($j < count($arr2)) {\n        $count++;\n        if ($count == $k) {\n            return $arr2[$j];\n        }\n        $j++;\n    }\n}\n\n$arr1 = [1, 3, 5, 7, 9];\n$arr2 = [2, 4, 6, 8, 10];\n$k = 5;\necho find_kth($arr1, $arr2, $k);\nfunction candidate(...$args) {\n    return find_kth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 3, 6, 7, 9), array(1, 4, 8, 10), 5) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 112, 256, 349, 770), array(72, 86, 113, 119, 265, 445, 892), 7) !== 256) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 4, 7, 8, 10), array(2, 5, 9, 11), 6) !== 8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510546,
      "stdout": "5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find kth element from the given two sorted arrays.\nfunction find_kth($arr1, $arr2, $k) {\n    $i = 0;\n    $j = 0;\n    while ($i < count($arr1) && $j < count($arr2) && $k > 0) {\n        if ($arr1[$i] < $arr2[$j]) {\n            $i++;\n        } else {\n            $j++;\n        }\n        $k--;\n    }\n    if ($i == count($arr1)) {\n        return $arr2[$j + $k];\n    } else if ($j == count($arr2)) {\n        return $arr1[$i + $k];\n    }\n    return min($arr1[$i], $arr2[$j]);\n}\n\n$arr1 = array(2, 3, 6, 7, 9);\n$arr2 = array(1, 4, 8, 10);\necho find_kth($arr1, $arr2, 5);\nfunction candidate(...$args) {\n    return find_kth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 3, 6, 7, 9), array(1, 4, 8, 10), 5) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 112, 256, 349, 770), array(72, 86, 113, 119, 265, 445, 892), 7) !== 256) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 4, 7, 8, 10), array(2, 5, 9, 11), 6) !== 8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123418,
      "stdout": "7\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5_3vrncb.php:30\nStack trace:\n#0 /tmp/tmp5_3vrncb.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp5_3vrncb.php on line 30\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find kth element from the given two sorted arrays.\nfunction find_kth($arr1, $arr2, $k) {\n    $i = 0;\n    $j = 0;\n    $count = 0;\n    while ($i < count($arr1) && $j < count($arr2)) {\n        if ($arr1[$i] < $arr2[$j]) {\n            $count++;\n            if ($count == $k) {\n                return $arr1[$i];\n            }\n            $i++;\n        } else {\n            $count++;\n            if ($count == $k) {\n                return $arr2[$j];\n            }\n            $j++;\n        }\n    }\n    while ($i < count($arr1)) {\n        $count++;\n        if ($count == $k) {\n            return $arr1[$i];\n        }\n        $i++;\n    }\n    while ($j < count($arr2)) {\n        $count++;\n        if ($count == $k) {\n            return $arr2[$j];\n        }\n        $j++;\n    }\n}\n\n$arr1 = [1, 3, 5, 7, 9];\n$arr2 = [2, 4, 6, 8, 10];\n$k = 5;\necho find_kth($arr1, $arr2, $k);\nfunction candidate(...$args) {\n    return find_kth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 3, 6, 7, 9), array(1, 4, 8, 10), 5) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 112, 256, 349, 770), array(72, 86, 113, 119, 265, 445, 892), 7) !== 256) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 4, 7, 8, 10), array(2, 5, 9, 11), 6) !== 8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510546,
      "stdout": "5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find kth element from the given two sorted arrays.\nfunction find_kth($arr1, $arr2, $k) {\n    $i = 0;\n    $j = 0;\n    $count = 0;\n    while ($i < count($arr1) && $j < count($arr2)) {\n        if ($arr1[$i] < $arr2[$j]) {\n            $count++;\n            if ($count == $k) {\n                return $arr1[$i];\n            }\n            $i++;\n        } else {\n            $count++;\n            if ($count == $k) {\n                return $arr2[$j];\n            }\n            $j++;\n        }\n    }\n    while ($i < count($arr1)) {\n        $count++;\n        if ($count == $k) {\n            return $arr1[$i];\n        }\n        $i++;\n    }\n    while ($j < count($arr2)) {\n        $count++;\n        if ($count == $k) {\n            return $arr2[$j];\n        }\n        $j++;\n    }\n    return -1;\n}\n\n$arr1 = array(1, 2, 3, 4, 5, 6, 7, 8, 9);\n$arr2 = array(10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20);\n$k = 7;\necho find_kth($arr1, $arr2, $k);\nfunction candidate(...$args) {\n    return find_kth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 3, 6, 7, 9), array(1, 4, 8, 10), 5) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 112, 256, 349, 770), array(72, 86, 113, 119, 265, 445, 892), 7) !== 256) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 4, 7, 8, 10), array(2, 5, 9, 11), 6) !== 8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123418,
      "stdout": "7",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find kth element from the given two sorted arrays.\nfunction find_kth($arr1, $arr2, $k) {\n    $i = 0;\n    $j = 0;\n    while ($i < count($arr1) && $j < count($arr2)) {\n        if ($arr1[$i] < $arr2[$j]) {\n            $i++;\n        } else {\n            $j++;\n        }\n        if ($i + $j == $k) {\n            return $arr1[$i] < $arr2[$j] ? $arr1[$i] : $arr2[$j];\n        }\n    }\n    if ($i < count($arr1)) {\n        return $arr1[$k - $j];\n    } else {\n        return $arr2[$k - $i];\n    }\n}\n\n$arr1 = [1, 3, 5, 7, 9];\n$arr2 = [2, 4, 6, 8, 10];\n$k = 5;\necho find_kth($arr1, $arr2, $k);\nfunction candidate(...$args) {\n    return find_kth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 3, 6, 7, 9), array(1, 4, 8, 10), 5) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 112, 256, 349, 770), array(72, 86, 113, 119, 265, 445, 892), 7) !== 256) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 4, 7, 8, 10), array(2, 5, 9, 11), 6) !== 8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123418,
      "stdout": "6\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwqf2v8yz.php:32\nStack trace:\n#0 /tmp/tmpwqf2v8yz.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpwqf2v8yz.php on line 32\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find kth element from the given two sorted arrays.\nfunction find_kth($arr1, $arr2, $k) {\n    $i = 0;\n    $j = 0;\n    $count = 0;\n    while ($i < count($arr1) && $j < count($arr2)) {\n        if ($arr1[$i] < $arr2[$j]) {\n            $count++;\n            if ($count == $k) {\n                return $arr1[$i];\n            }\n            $i++;\n        } else {\n            $count++;\n            if ($count == $k) {\n                return $arr2[$j];\n            }\n            $j++;\n        }\n    }\n    while ($i < count($arr1)) {\n        $count++;\n        if ($count == $k) {\n            return $arr1[$i];\n        }\n        $i++;\n    }\n    while ($j < count($arr2)) {\n        $count++;\n        if ($count == $k) {\n            return $arr2[$j];\n        }\n        $j++;\n    }\n}\n\n$arr1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$arr2 = [11, 12, 13, 14, 15, 16, 17, 18, 19, 20];\n$k = 5;\necho find_kth($arr1, $arr2, $k);\nfunction candidate(...$args) {\n    return find_kth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 3, 6, 7, 9), array(1, 4, 8, 10), 5) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 112, 256, 349, 770), array(72, 86, 113, 119, 265, 445, 892), 7) !== 256) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 4, 7, 8, 10), array(2, 5, 9, 11), 6) !== 8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123418,
      "stdout": "5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find kth element from the given two sorted arrays.\nfunction find_kth($arr1, $arr2, $k) {\n    $i = 0;\n    $j = 0;\n    $count = 0;\n    while ($i < count($arr1) && $j < count($arr2)) {\n        if ($arr1[$i] < $arr2[$j]) {\n            $count++;\n            if ($count == $k) {\n                return $arr1[$i];\n            }\n            $i++;\n        } else {\n            $count++;\n            if ($count == $k) {\n                return $arr2[$j];\n            }\n            $j++;\n        }\n    }\n    while ($i < count($arr1)) {\n        $count++;\n        if ($count == $k) {\n            return $arr1[$i];\n        }\n        $i++;\n    }\n    while ($j < count($arr2)) {\n        $count++;\n        if ($count == $k) {\n            return $arr2[$j];\n        }\n        $j++;\n    }\n}\n\n$arr1 = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n$arr2 = [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20];\n\necho find_kth($arr1, $arr2, 10);\nfunction candidate(...$args) {\n    return find_kth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 3, 6, 7, 9), array(1, 4, 8, 10), 5) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 112, 256, 349, 770), array(72, 86, 113, 119, 265, 445, 892), 7) !== 256) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 4, 7, 8, 10), array(2, 5, 9, 11), 6) !== 8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123418,
      "stdout": "10",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find kth element from the given two sorted arrays.\nfunction find_kth($arr1, $arr2, $k) {\n    $i = 0;\n    $j = 0;\n    $count = 0;\n    while ($i < count($arr1) && $j < count($arr2)) {\n        if ($arr1[$i] < $arr2[$j]) {\n            $count++;\n            if ($count == $k) {\n                return $arr1[$i];\n            }\n            $i++;\n        } else {\n            $count++;\n            if ($count == $k) {\n                return $arr2[$j];\n            }\n            $j++;\n        }\n    }\n    while ($i < count($arr1)) {\n        $count++;\n        if ($count == $k) {\n            return $arr1[$i];\n        }\n        $i++;\n    }\n    while ($j < count($arr2)) {\n        $count++;\n        if ($count == $k) {\n            return $arr2[$j];\n        }\n        $j++;\n    }\n}\n\n$arr1 = [1, 3, 5, 7, 9];\n$arr2 = [2, 4, 6, 8, 10];\n$k = 5;\necho find_kth($arr1, $arr2, $k);\nfunction candidate(...$args) {\n    return find_kth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 3, 6, 7, 9), array(1, 4, 8, 10), 5) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 112, 256, 349, 770), array(72, 86, 113, 119, 265, 445, 892), 7) !== 256) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 4, 7, 8, 10), array(2, 5, 9, 11), 6) !== 8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510546,
      "stdout": "5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find kth element from the given two sorted arrays.\nfunction find_kth($arr1, $arr2, $k) {\n    $i = 0;\n    $j = 0;\n    $count = 0;\n    while ($i < count($arr1) && $j < count($arr2)) {\n        if ($arr1[$i] < $arr2[$j]) {\n            $count++;\n            if ($count == $k) {\n                return $arr1[$i];\n            }\n            $i++;\n        } else {\n            $count++;\n            if ($count == $k) {\n                return $arr2[$j];\n            }\n            $j++;\n        }\n    }\n    while ($i < count($arr1)) {\n        $count++;\n        if ($count == $k) {\n            return $arr1[$i];\n        }\n        $i++;\n    }\n    while ($j < count($arr2)) {\n        $count++;\n        if ($count == $k) {\n            return $arr2[$j];\n        }\n        $j++;\n    }\n}\n\n$arr1 = [1, 3, 5, 7, 9];\n$arr2 = [2, 4, 6, 8, 10];\n$k = 5;\necho find_kth($arr1, $arr2, $k);\nfunction candidate(...$args) {\n    return find_kth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 3, 6, 7, 9), array(1, 4, 8, 10), 5) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 112, 256, 349, 770), array(72, 86, 113, 119, 265, 445, 892), 7) !== 256) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 4, 7, 8, 10), array(2, 5, 9, 11), 6) !== 8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510546,
      "stdout": "5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find kth element from the given two sorted arrays.\nfunction find_kth($arr1, $arr2, $k) {\n    $i = 0;\n    $j = 0;\n    $count = 0;\n    while ($i < count($arr1) && $j < count($arr2)) {\n        if ($arr1[$i] < $arr2[$j]) {\n            $count++;\n            if ($count == $k) {\n                return $arr1[$i];\n            }\n            $i++;\n        } else {\n            $count++;\n            if ($count == $k) {\n                return $arr2[$j];\n            }\n            $j++;\n        }\n    }\n    while ($i < count($arr1)) {\n        $count++;\n        if ($count == $k) {\n            return $arr1[$i];\n        }\n        $i++;\n    }\n    while ($j < count($arr2)) {\n        $count++;\n        if ($count == $k) {\n            return $arr2[$j];\n        }\n        $j++;\n    }\n}\n\n$arr1 = [1, 2, 3, 4, 5];\n$arr2 = [6, 7, 8, 9, 10];\n$k = 5;\necho find_kth($arr1, $arr2, $k);\nfunction candidate(...$args) {\n    return find_kth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 3, 6, 7, 9), array(1, 4, 8, 10), 5) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 112, 256, 349, 770), array(72, 86, 113, 119, 265, 445, 892), 7) !== 256) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 4, 7, 8, 10), array(2, 5, 9, 11), 6) !== 8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123418,
      "stdout": "5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find kth element from the given two sorted arrays.\nfunction find_kth($arr1, $arr2, $k) {\n    $i = 0;\n    $j = 0;\n    $count = 0;\n    while ($i < count($arr1) && $j < count($arr2)) {\n        if ($arr1[$i] < $arr2[$j]) {\n            $count++;\n            if ($count == $k) {\n                return $arr1[$i];\n            }\n            $i++;\n        } else {\n            $count++;\n            if ($count == $k) {\n                return $arr2[$j];\n            }\n            $j++;\n        }\n    }\n    while ($i < count($arr1)) {\n        $count++;\n        if ($count == $k) {\n            return $arr1[$i];\n        }\n        $i++;\n    }\n    while ($j < count($arr2)) {\n        $count++;\n        if ($count == $k) {\n            return $arr2[$j];\n        }\n        $j++;\n    }\n}\n\n$arr1 = array(1, 3, 5, 7, 9);\n$arr2 = array(2, 4, 6, 8, 10);\n$k = 5;\necho find_kth($arr1, $arr2, $k);\nfunction candidate(...$args) {\n    return find_kth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 3, 6, 7, 9), array(1, 4, 8, 10), 5) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 112, 256, 349, 770), array(72, 86, 113, 119, 265, 445, 892), 7) !== 256) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 4, 7, 8, 10), array(2, 5, 9, 11), 6) !== 8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123418,
      "stdout": "5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find kth element from the given two sorted arrays.\nfunction find_kth($arr1, $arr2, $k) {\n    $i = 0;\n    $j = 0;\n    $count = 0;\n    while($i < count($arr1) && $j < count($arr2)) {\n        if($arr1[$i] < $arr2[$j]) {\n            $count++;\n            if($count == $k) {\n                return $arr1[$i];\n            }\n            $i++;\n        } else {\n            $count++;\n            if($count == $k) {\n                return $arr2[$j];\n            }\n            $j++;\n        }\n    }\n    while($i < count($arr1)) {\n        $count++;\n        if($count == $k) {\n            return $arr1[$i];\n        }\n        $i++;\n    }\n    while($j < count($arr2)) {\n        $count++;\n        if($count == $k) {\n            return $arr2[$j];\n        }\n        $j++;\n    }\n}\n\n$arr1 = [1, 3, 5, 7, 9];\n$arr2 = [2, 4, 6, 8, 10];\n$k = 7;\necho find_kth($arr1, $arr2, $k);\nfunction candidate(...$args) {\n    return find_kth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 3, 6, 7, 9), array(1, 4, 8, 10), 5) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 112, 256, 349, 770), array(72, 86, 113, 119, 265, 445, 892), 7) !== 256) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 4, 7, 8, 10), array(2, 5, 9, 11), 6) !== 8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123418,
      "stdout": "7",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find kth element from the given two sorted arrays.\nfunction find_kth($arr1, $arr2, $k) {\n    $i = 0;\n    $j = 0;\n    $kth = 0;\n    while ($i < count($arr1) && $j < count($arr2)) {\n        if ($arr1[$i] < $arr2[$j]) {\n            $kth = $arr1[$i];\n            $i++;\n        } else {\n            $kth = $arr2[$j];\n            $j++;\n        }\n        if ($i + $j == $k) {\n            break;\n        }\n    }\n    return $kth;\n}\n\n$arr1 = [1, 3, 5, 7, 9];\n$arr2 = [2, 4, 6, 8, 10];\n$k = 5;\necho find_kth($arr1, $arr2, $k);\nfunction candidate(...$args) {\n    return find_kth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 3, 6, 7, 9), array(1, 4, 8, 10), 5) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 112, 256, 349, 770), array(72, 86, 113, 119, 265, 445, 892), 7) !== 256) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 4, 7, 8, 10), array(2, 5, 9, 11), 6) !== 8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123418,
      "stdout": "5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find kth element from the given two sorted arrays.\nfunction find_kth($arr1, $arr2, $k) {\n    $i = 0;\n    $j = 0;\n    $count = 0;\n    while ($i < count($arr1) && $j < count($arr2)) {\n        if ($arr1[$i] < $arr2[$j]) {\n            $count++;\n            if ($count == $k) {\n                return $arr1[$i];\n            }\n            $i++;\n        } else {\n            $count++;\n            if ($count == $k) {\n                return $arr2[$j];\n            }\n            $j++;\n        }\n    }\n    while ($i < count($arr1)) {\n        $count++;\n        if ($count == $k) {\n            return $arr1[$i];\n        }\n        $i++;\n    }\n    while ($j < count($arr2)) {\n        $count++;\n        if ($count == $k) {\n            return $arr2[$j];\n        }\n        $j++;\n    }\n}\n\n$arr1 = [1, 3, 5, 7, 9];\n$arr2 = [2, 4, 6, 8, 10];\n$k = 5;\n\necho find_kth($arr1, $arr2, $k);\nfunction candidate(...$args) {\n    return find_kth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 3, 6, 7, 9), array(1, 4, 8, 10), 5) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 112, 256, 349, 770), array(72, 86, 113, 119, 265, 445, 892), 7) !== 256) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 4, 7, 8, 10), array(2, 5, 9, 11), 6) !== 8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123418,
      "stdout": "5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find kth element from the given two sorted arrays.\nfunction find_kth($arr1, $arr2, $k) {\n    $i = 0;\n    $j = 0;\n    $kth = 0;\n    while ($i < count($arr1) && $j < count($arr2)) {\n        if ($arr1[$i] < $arr2[$j]) {\n            $kth = $arr1[$i];\n            $i++;\n        } else {\n            $kth = $arr2[$j];\n            $j++;\n        }\n        $k--;\n        if ($k == 0) {\n            break;\n        }\n    }\n    if ($i == count($arr1)) {\n        while ($j < count($arr2)) {\n            $kth = $arr2[$j];\n            $j++;\n            $k--;\n            if ($k == 0) {\n                break;\n            }\n        }\n    }\n    if ($j == count($arr2)) {\n        while ($i < count($arr1)) {\n            $kth = $arr1[$i];\n            $i++;\n            $k--;\n            if ($k == 0) {\n                break;\n            }\n        }\n    }\n    return $kth;\n}\n\n$arr1 = array(2, 3, 6, 7, 9);\n$arr2 = array(1, 4, 8, 10);\necho find_kth($arr1, $arr2, 5);\nfunction candidate(...$args) {\n    return find_kth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 3, 6, 7, 9), array(1, 4, 8, 10), 5) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 112, 256, 349, 770), array(72, 86, 113, 119, 265, 445, 892), 7) !== 256) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 4, 7, 8, 10), array(2, 5, 9, 11), 6) !== 8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123418,
      "stdout": "6",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find kth element from the given two sorted arrays.\nfunction find_kth($arr1, $arr2, $k) {\n    $i = 0;\n    $j = 0;\n    $count = 0;\n    $result = 0;\n    while ($i < count($arr1) && $j < count($arr2)) {\n        if ($arr1[$i] < $arr2[$j]) {\n            $result = $arr1[$i];\n            $i++;\n        } else {\n            $result = $arr2[$j];\n            $j++;\n        }\n        $count++;\n        if ($count == $k) {\n            break;\n        }\n    }\n    if ($i == count($arr1)) {\n        while ($count < $k) {\n            $result = $arr2[$j];\n            $j++;\n            $count++;\n        }\n    } else if ($j == count($arr2)) {\n        while ($count < $k) {\n            $result = $arr1[$i];\n            $i++;\n            $count++;\n        }\n    }\n    return $result;\n}\n\n$arr1 = array(1, 3, 5, 7, 9);\n$arr2 = array(2, 4, 6, 8, 10);\necho find_kth($arr1, $arr2, 7);\nfunction candidate(...$args) {\n    return find_kth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 3, 6, 7, 9), array(1, 4, 8, 10), 5) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 112, 256, 349, 770), array(72, 86, 113, 119, 265, 445, 892), 7) !== 256) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 4, 7, 8, 10), array(2, 5, 9, 11), 6) !== 8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123418,
      "stdout": "7",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find kth element from the given two sorted arrays.\nfunction find_kth($arr1, $arr2, $k) {\n\t$i = 0;\n\t$j = 0;\n\t$count = 0;\n\twhile($i < count($arr1) && $j < count($arr2)) {\n\t\tif($arr1[$i] < $arr2[$j]) {\n\t\t\t$count++;\n\t\t\tif($count == $k) {\n\t\t\t\treturn $arr1[$i];\n\t\t\t}\n\t\t\t$i++;\n\t\t} else {\n\t\t\t$count++;\n\t\t\tif($count == $k) {\n\t\t\t\treturn $arr2[$j];\n\t\t\t}\n\t\t\t$j++;\n\t\t}\n\t}\n\twhile($i < count($arr1)) {\n\t\t$count++;\n\t\tif($count == $k) {\n\t\t\treturn $arr1[$i];\n\t\t}\n\t\t$i++;\n\t}\n\twhile($j < count($arr2)) {\n\t\t$count++;\n\t\tif($count == $k) {\n\t\t\treturn $arr2[$j];\n\t\t}\n\t\t$j++;\n\t}\n}\n\n$arr1 = array(2, 3, 6, 7, 9);\n$arr2 = array(1, 4, 8, 10);\necho find_kth($arr1, $arr2, 5);\nfunction candidate(...$args) {\n    return find_kth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 3, 6, 7, 9), array(1, 4, 8, 10), 5) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 112, 256, 349, 770), array(72, 86, 113, 119, 265, 445, 892), 7) !== 256) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 4, 7, 8, 10), array(2, 5, 9, 11), 6) !== 8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123418,
      "stdout": "6",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find kth element from the given two sorted arrays.\nfunction find_kth($arr1, $arr2, $k) {\n    $i = 0;\n    $j = 0;\n    $count = 0;\n    $result = 0;\n    while($i < count($arr1) && $j < count($arr2)) {\n        if($arr1[$i] < $arr2[$j]) {\n            $result = $arr1[$i];\n            $i++;\n        } else {\n            $result = $arr2[$j];\n            $j++;\n        }\n        $count++;\n        if($count == $k) {\n            break;\n        }\n    }\n    while($i < count($arr1)) {\n        $result = $arr1[$i];\n        $i++;\n        $count++;\n        if($count == $k) {\n            break;\n        }\n    }\n    while($j < count($arr2)) {\n        $result = $arr2[$j];\n        $j++;\n        $count++;\n        if($count == $k) {\n            break;\n        }\n    }\n    return $result;\n}\n\n$arr1 = [1, 3, 5, 7, 9];\n$arr2 = [2, 4, 6, 8, 10];\n$k = 5;\necho find_kth($arr1, $arr2, $k);\nfunction candidate(...$args) {\n    return find_kth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 3, 6, 7, 9), array(1, 4, 8, 10), 5) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 112, 256, 349, 770), array(72, 86, 113, 119, 265, 445, 892), 7) !== 256) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 4, 7, 8, 10), array(2, 5, 9, 11), 6) !== 8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123418,
      "stdout": "10\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr2up0xgz.php:49\nStack trace:\n#0 /tmp/tmpr2up0xgz.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpr2up0xgz.php on line 49\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find kth element from the given two sorted arrays.\nfunction find_kth($arr1, $arr2, $k) {\n    $i = 0;\n    $j = 0;\n    $count = 0;\n    while ($i < count($arr1) && $j < count($arr2)) {\n        if ($arr1[$i] < $arr2[$j]) {\n            $count++;\n            if ($count == $k) {\n                return $arr1[$i];\n            }\n            $i++;\n        } else {\n            $count++;\n            if ($count == $k) {\n                return $arr2[$j];\n            }\n            $j++;\n        }\n    }\n    while ($i < count($arr1)) {\n        $count++;\n        if ($count == $k) {\n            return $arr1[$i];\n        }\n        $i++;\n    }\n    while ($j < count($arr2)) {\n        $count++;\n        if ($count == $k) {\n            return $arr2[$j];\n        }\n        $j++;\n    }\n}\n\n$arr1 = [1, 3, 5, 7, 9];\n$arr2 = [2, 4, 6, 8, 10];\necho find_kth($arr1, $arr2, 5);\nfunction candidate(...$args) {\n    return find_kth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 3, 6, 7, 9), array(1, 4, 8, 10), 5) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 112, 256, 349, 770), array(72, 86, 113, 119, 265, 445, 892), 7) !== 256) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 4, 7, 8, 10), array(2, 5, 9, 11), 6) !== 8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510546,
      "stdout": "5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find kth element from the given two sorted arrays.\nfunction find_kth($arr1, $arr2, $k) {\n\t$i = 0;\n\t$j = 0;\n\t$count = 0;\n\twhile ($i < count($arr1) && $j < count($arr2)) {\n\t\tif ($arr1[$i] < $arr2[$j]) {\n\t\t\t$count++;\n\t\t\tif ($count == $k) {\n\t\t\t\treturn $arr1[$i];\n\t\t\t}\n\t\t\t$i++;\n\t\t} else {\n\t\t\t$count++;\n\t\t\tif ($count == $k) {\n\t\t\t\treturn $arr2[$j];\n\t\t\t}\n\t\t\t$j++;\n\t\t}\n\t}\n\tif ($i < count($arr1)) {\n\t\t$count++;\n\t\tif ($count == $k) {\n\t\t\treturn $arr1[$i];\n\t\t}\n\t\t$i++;\n\t}\n\tif ($j < count($arr2)) {\n\t\t$count++;\n\t\tif ($count == $k) {\n\t\t\treturn $arr2[$j];\n\t\t}\n\t\t$j++;\n\t}\n}\n\n$arr1 = array(1, 3, 5, 7, 9);\n$arr2 = array(2, 4, 6, 8, 10);\n$k = 7;\necho find_kth($arr1, $arr2, $k);\nfunction candidate(...$args) {\n    return find_kth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 3, 6, 7, 9), array(1, 4, 8, 10), 5) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 112, 256, 349, 770), array(72, 86, 113, 119, 265, 445, 892), 7) !== 256) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 4, 7, 8, 10), array(2, 5, 9, 11), 6) !== 8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123418,
      "stdout": "7",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find kth element from the given two sorted arrays.\nfunction find_kth($arr1, $arr2, $k) {\n    $len1 = count($arr1);\n    $len2 = count($arr2);\n    if ($len1 == 0) {\n        return $arr2[$k - 1];\n    }\n    if ($len2 == 0) {\n        return $arr1[$k - 1];\n    }\n    if ($k == 1) {\n        return min($arr1[0], $arr2[0]);\n    }\n    $mid1 = min($len1, $k / 2);\n    $mid2 = min($len2, $k / 2);\n    if ($arr1[$mid1 - 1] > $arr2[$mid2 - 1]) {\n        return find_kth($arr1, array_slice($arr2, $mid2), $k - $mid2);\n    } else {\n        return find_kth(array_slice($arr1, $mid1), $arr2, $k - $mid1);\n    }\n}\n\n$arr1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$arr2 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$k = 10;\necho find_kth($arr1, $arr2, $k);\nfunction candidate(...$args) {\n    return find_kth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 3, 6, 7, 9), array(1, 4, 8, 10), 5) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 112, 256, 349, 770), array(72, 86, 113, 119, 265, 445, 892), 7) !== 256) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 4, 7, 8, 10), array(2, 5, 9, 11), 6) !== 8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123433,
      "stdout": "\nDeprecated: Implicit conversion from float 1.5 to int loses precision in /tmp/tmpsxq0pktz.php on line 17\n\nDeprecated: Implicit conversion from float 1.5 to int loses precision in /tmp/tmpsxq0pktz.php on line 17\n\nDeprecated: Implicit conversion from float 2.5 to int loses precision in /tmp/tmpsxq0pktz.php on line 18\n\nDeprecated: Implicit conversion from float 0.25 to int loses precision in /tmp/tmpsxq0pktz.php on line 17\n\nDeprecated: Implicit conversion from float 0.25 to int loses precision in /tmp/tmpsxq0pktz.php on line 17\n\nDeprecated: Implicit conversion from float 1.25 to int loses precision in /tmp/tmpsxq0pktz.php on line 18\n\nDeprecated: Implicit conversion from float -0.375 to int loses precision in /tmp/tmpsxq0pktz.php on line 17\n\nDeprecated: Implicit conversion from float -0.375 to int loses precision in /tmp/tmpsxq0pktz.php on line 17\n\nDeprecated: Implicit conversion from float 0.625 to int loses precision in /tmp/tmpsxq0pktz.php on line 18\n\nDeprecated: Implicit conversion from float -0.6875 to int loses precision in /tmp/tmpsxq0pktz.php on line 17\n\nDeprecated: Implicit conversion from float -0.6875 to int loses precision in /tmp/tmpsxq0pktz.php on line 17\n\nDeprecated: Implicit conversion from float 0.3125 to int loses precision in /tmp/tmpsxq0pktz.php on line 18\n\nDeprecated: Implicit conversion from float -0.84375 to int loses precision in /tmp/tmpsxq0pktz.php on line 17\n\nDeprecated: Implicit conversion from float -0.84375 to int loses precision in /tmp/tmpsxq0pktz.php on line 17\n\nDeprecated: Implicit conversion from float 0.15625 to int loses precision in /tmp/tmpsxq0pktz.php on line 18\n\nDeprecated: Implicit conversion from float -0.921875 to int loses precision in /tmp/tmpsxq0pktz.php on line 17\n\nDeprecated: Implicit conversion from float -0.921875 to int loses precision in /tmp/tmpsxq0pktz.php on line 17\n\nDeprecated: Implicit conversion from float 0.078125 to int loses precision in /tmp/tmpsxq0pktz.php on line 18\n\nDeprecated: Implicit conversion from float -0.9609375 to int loses precision in /tmp/t",
      "stderr": "",
      "exit_code": -1,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find kth element from the given two sorted arrays.\nfunction find_kth($arr1, $arr2, $k) {\n  $i = 0;\n  $j = 0;\n  $kth = 0;\n  while ($i < count($arr1) && $j < count($arr2)) {\n    if ($arr1[$i] < $arr2[$j]) {\n      $kth = $arr1[$i];\n      $i++;\n    } else {\n      $kth = $arr2[$j];\n      $j++;\n    }\n    if ($i + $j == $k) {\n      break;\n    }\n  }\n  return $kth;\n}\n\n$arr1 = array(1, 3, 5, 7, 9);\n$arr2 = array(2, 4, 6, 8, 10);\n$k = 5;\necho find_kth($arr1, $arr2, $k);\nfunction candidate(...$args) {\n    return find_kth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 3, 6, 7, 9), array(1, 4, 8, 10), 5) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 112, 256, 349, 770), array(72, 86, 113, 119, 265, 445, 892), 7) !== 256) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 4, 7, 8, 10), array(2, 5, 9, 11), 6) !== 8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123418,
      "stdout": "5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find kth element from the given two sorted arrays.\nfunction find_kth($arr1, $arr2, $k) {\n\t$len1 = count($arr1);\n\t$len2 = count($arr2);\n\t$i = 0;\n\t$j = 0;\n\t$count = 0;\n\twhile($i < $len1 && $j < $len2) {\n\t\tif($arr1[$i] < $arr2[$j]) {\n\t\t\t$count++;\n\t\t\tif($count == $k) {\n\t\t\t\treturn $arr1[$i];\n\t\t\t}\n\t\t\t$i++;\n\t\t} else {\n\t\t\t$count++;\n\t\t\tif($count == $k) {\n\t\t\t\treturn $arr2[$j];\n\t\t\t}\n\t\t\t$j++;\n\t\t}\n\t}\n\twhile($i < $len1) {\n\t\t$count++;\n\t\tif($count == $k) {\n\t\t\treturn $arr1[$i];\n\t\t}\n\t\t$i++;\n\t}\n\twhile($j < $len2) {\n\t\t$count++;\n\t\tif($count == $k) {\n\t\t\treturn $arr2[$j];\n\t\t}\n\t\t$j++;\n\t}\n}\n\n$arr1 = array(1,3,5,7,9);\n$arr2 = array(2,4,6,8,10);\n$k = 10;\necho find_kth($arr1, $arr2, $k);\nfunction candidate(...$args) {\n    return find_kth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 3, 6, 7, 9), array(1, 4, 8, 10), 5) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 112, 256, 349, 770), array(72, 86, 113, 119, 265, 445, 892), 7) !== 256) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 4, 7, 8, 10), array(2, 5, 9, 11), 6) !== 8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123418,
      "stdout": "10",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find kth element from the given two sorted arrays.\nfunction find_kth($arr1, $arr2, $k) {\n    $i = 0;\n    $j = 0;\n    $count = 0;\n    while($i < count($arr1) && $j < count($arr2)) {\n        if($arr1[$i] < $arr2[$j]) {\n            $count++;\n            if($count == $k) {\n                return $arr1[$i];\n            }\n            $i++;\n        } else {\n            $count++;\n            if($count == $k) {\n                return $arr2[$j];\n            }\n            $j++;\n        }\n    }\n    while($i < count($arr1)) {\n        $count++;\n        if($count == $k) {\n            return $arr1[$i];\n        }\n        $i++;\n    }\n    while($j < count($arr2)) {\n        $count++;\n        if($count == $k) {\n            return $arr2[$j];\n        }\n        $j++;\n    }\n}\n\n$arr1 = [1, 3, 5, 7, 9];\n$arr2 = [2, 4, 6, 8, 10];\n$k = 6;\necho find_kth($arr1, $arr2, $k);\nfunction candidate(...$args) {\n    return find_kth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 3, 6, 7, 9), array(1, 4, 8, 10), 5) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 112, 256, 349, 770), array(72, 86, 113, 119, 265, 445, 892), 7) !== 256) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 4, 7, 8, 10), array(2, 5, 9, 11), 6) !== 8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123418,
      "stdout": "6",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find kth element from the given two sorted arrays.\nfunction find_kth($arr1, $arr2, $k) {\n    $i = 0;\n    $j = 0;\n    $count = 0;\n    while ($i < count($arr1) && $j < count($arr2)) {\n        if ($arr1[$i] < $arr2[$j]) {\n            $count++;\n            if ($count == $k) {\n                return $arr1[$i];\n            }\n            $i++;\n        } else {\n            $count++;\n            if ($count == $k) {\n                return $arr2[$j];\n            }\n            $j++;\n        }\n    }\n    while ($i < count($arr1)) {\n        $count++;\n        if ($count == $k) {\n            return $arr1[$i];\n        }\n        $i++;\n    }\n    while ($j < count($arr2)) {\n        $count++;\n        if ($count == $k) {\n            return $arr2[$j];\n        }\n        $j++;\n    }\n}\n\n$arr1 = [1, 3, 5, 7, 9];\n$arr2 = [2, 4, 6, 8, 10];\n$k = 5;\necho find_kth($arr1, $arr2, $k);\nfunction candidate(...$args) {\n    return find_kth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 3, 6, 7, 9), array(1, 4, 8, 10), 5) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 112, 256, 349, 770), array(72, 86, 113, 119, 265, 445, 892), 7) !== 256) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 4, 7, 8, 10), array(2, 5, 9, 11), 6) !== 8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510546,
      "stdout": "5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find kth element from the given two sorted arrays.\nfunction find_kth($arr1, $arr2, $k) {\n    $i = 0;\n    $j = 0;\n    $count = 0;\n    while ($i < count($arr1) && $j < count($arr2)) {\n        if ($arr1[$i] < $arr2[$j]) {\n            $count++;\n            if ($count == $k) {\n                return $arr1[$i];\n            }\n            $i++;\n        } else {\n            $count++;\n            if ($count == $k) {\n                return $arr2[$j];\n            }\n            $j++;\n        }\n    }\n    while ($i < count($arr1)) {\n        $count++;\n        if ($count == $k) {\n            return $arr1[$i];\n        }\n        $i++;\n    }\n    while ($j < count($arr2)) {\n        $count++;\n        if ($count == $k) {\n            return $arr2[$j];\n        }\n        $j++;\n    }\n}\n\n$arr1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$arr2 = [11, 12, 13, 14, 15, 16, 17, 18, 19, 20];\n$k = 10;\necho find_kth($arr1, $arr2, $k);\nfunction candidate(...$args) {\n    return find_kth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 3, 6, 7, 9), array(1, 4, 8, 10), 5) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 112, 256, 349, 770), array(72, 86, 113, 119, 265, 445, 892), 7) !== 256) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 4, 7, 8, 10), array(2, 5, 9, 11), 6) !== 8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510546,
      "stdout": "10",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find kth element from the given two sorted arrays.\nfunction find_kth($arr1, $arr2, $k) {\n    $len1 = count($arr1);\n    $len2 = count($arr2);\n    if ($len1 == 0) {\n        return $arr2[$k - 1];\n    }\n    if ($len2 == 0) {\n        return $arr1[$k - 1];\n    }\n    if ($k == 1) {\n        return min($arr1[0], $arr2[0]);\n    }\n    $mid1 = min($len1, $k / 2);\n    $mid2 = min($len2, $k / 2);\n    if ($arr1[$mid1 - 1] < $arr2[$mid2 - 1]) {\n        return find_kth(array_slice($arr1, $mid1), $arr2, $k - $mid1);\n    } else {\n        return find_kth($arr1, array_slice($arr2, $mid2), $k - $mid2);\n    }\n}\n\n$arr1 = [1, 3, 5, 7, 9];\n$arr2 = [2, 4, 6, 8, 10];\n$k = 5;\necho find_kth($arr1, $arr2, $k);\nfunction candidate(...$args) {\n    return find_kth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 3, 6, 7, 9), array(1, 4, 8, 10), 5) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 112, 256, 349, 770), array(72, 86, 113, 119, 265, 445, 892), 7) !== 256) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 4, 7, 8, 10), array(2, 5, 9, 11), 6) !== 8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123433,
      "stdout": "\nDeprecated: Implicit conversion from float 1.5 to int loses precision in /tmp/tmp9bebe4il.php on line 17\n\nDeprecated: Implicit conversion from float 1.5 to int loses precision in /tmp/tmp9bebe4il.php on line 17\n\nDeprecated: Implicit conversion from float 2.5 to int loses precision in /tmp/tmp9bebe4il.php on line 18\n\nDeprecated: Implicit conversion from float 0.25 to int loses precision in /tmp/tmp9bebe4il.php on line 17\n\nDeprecated: Implicit conversion from float 0.25 to int loses precision in /tmp/tmp9bebe4il.php on line 17\n\nDeprecated: Implicit conversion from float 1.25 to int loses precision in /tmp/tmp9bebe4il.php on line 20\n\nDeprecated: Implicit conversion from float -0.375 to int loses precision in /tmp/tmp9bebe4il.php on line 17\n\nDeprecated: Implicit conversion from float -0.375 to int loses precision in /tmp/tmp9bebe4il.php on line 17\n\nDeprecated: Implicit conversion from float 0.625 to int loses precision in /tmp/tmp9bebe4il.php on line 20\n\nDeprecated: Implicit conversion from float -0.6875 to int loses precision in /tmp/tmp9bebe4il.php on line 17\n\nDeprecated: Implicit conversion from float -0.6875 to int loses precision in /tmp/tmp9bebe4il.php on line 17\n\nDeprecated: Implicit conversion from float 0.3125 to int loses precision in /tmp/tmp9bebe4il.php on line 20\n\nDeprecated: Implicit conversion from float -0.84375 to int loses precision in /tmp/tmp9bebe4il.php on line 17\n\nDeprecated: Implicit conversion from float -0.84375 to int loses precision in /tmp/tmp9bebe4il.php on line 17\n\nDeprecated: Implicit conversion from float 0.15625 to int loses precision in /tmp/tmp9bebe4il.php on line 20\n\nDeprecated: Implicit conversion from float -0.921875 to int loses precision in /tmp/tmp9bebe4il.php on line 17\n\nDeprecated: Implicit conversion from float -0.921875 to int loses precision in /tmp/tmp9bebe4il.php on line 17\n\nDeprecated: Implicit conversion from float 0.078125 to int loses precision in /tmp/tmp9bebe4il.php on line 20\n\nDeprecated: Implicit conversion from float -0.9609375 to int loses precision in /tmp/t",
      "stderr": "",
      "exit_code": -1,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find kth element from the given two sorted arrays.\nfunction find_kth($arr1, $arr2, $k) {\n    $len1 = count($arr1);\n    $len2 = count($arr2);\n\n    if ($len1 == 0) {\n        return $arr2[$k - 1];\n    }\n\n    if ($len2 == 0) {\n        return $arr1[$k - 1];\n    }\n\n    if ($k == 1) {\n        return min($arr1[0], $arr2[0]);\n    }\n\n    $mid1 = $arr1[floor($len1 / 2)];\n    $mid2 = $arr2[floor($len2 / 2)];\n\n    if ($mid1 <= $mid2) {\n        if ($len1 / 2 + $len2 / 2 + 1 >= $k) {\n            return find_kth($arr1, array_slice($arr2, 0, floor($len2 / 2)), $k);\n        } else {\n            return find_kth(array_slice($arr1, floor($len1 / 2) + 1), $arr2, $k - floor($len1 / 2) - 1);\n        }\n    } else {\n        if ($len1 / 2 + $len2 / 2 + 1 >= $k) {\n            return find_kth(array_slice($arr1, 0, floor($len1 / 2)), $arr2, $k);\n        } else {\n            return find_kth($arr1, array_slice($arr2, floor($len2 / 2) + 1), $k - floor($len2 / 2) - 1);\n        }\n    }\n}\n\n$arr1 = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n$arr2 = [2, 3, 4, 5, 6, 7, 8, 9, 10];\n\necho find_kth($arr1, $arr2, 5);\nfunction candidate(...$args) {\n    return find_kth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 3, 6, 7, 9), array(1, 4, 8, 10), 5) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 112, 256, 349, 770), array(72, 86, 113, 119, 265, 445, 892), 7) !== 256) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 4, 7, 8, 10), array(2, 5, 9, 11), 6) !== 8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123418,
      "stdout": "3\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpecaljiyb.php:47\nStack trace:\n#0 /tmp/tmpecaljiyb.php(51): test()\n#1 {main}\n  thrown in /tmp/tmpecaljiyb.php on line 47\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find kth element from the given two sorted arrays.\nfunction find_kth($arr1, $arr2, $k) {\n    $i = 0;\n    $j = 0;\n    $count = 0;\n    while ($i < count($arr1) && $j < count($arr2)) {\n        if ($arr1[$i] < $arr2[$j]) {\n            $count++;\n            if ($count == $k) {\n                return $arr1[$i];\n            }\n            $i++;\n        } else {\n            $count++;\n            if ($count == $k) {\n                return $arr2[$j];\n            }\n            $j++;\n        }\n    }\n    while ($i < count($arr1)) {\n        $count++;\n        if ($count == $k) {\n            return $arr1[$i];\n        }\n        $i++;\n    }\n    while ($j < count($arr2)) {\n        $count++;\n        if ($count == $k) {\n            return $arr2[$j];\n        }\n        $j++;\n    }\n}\n\n$arr1 = [1, 3, 5, 7, 9];\n$arr2 = [2, 4, 6, 8, 10];\n\necho find_kth($arr1, $arr2, 5);\nfunction candidate(...$args) {\n    return find_kth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 3, 6, 7, 9), array(1, 4, 8, 10), 5) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 112, 256, 349, 770), array(72, 86, 113, 119, 265, 445, 892), 7) !== 256) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 4, 7, 8, 10), array(2, 5, 9, 11), 6) !== 8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123418,
      "stdout": "5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find kth element from the given two sorted arrays.\nfunction find_kth($arr1, $arr2, $k) {\n    $i = 0;\n    $j = 0;\n    $count = 0;\n    while ($i < count($arr1) && $j < count($arr2)) {\n        if ($arr1[$i] < $arr2[$j]) {\n            $count++;\n            if ($count == $k) {\n                return $arr1[$i];\n            }\n            $i++;\n        } else {\n            $count++;\n            if ($count == $k) {\n                return $arr2[$j];\n            }\n            $j++;\n        }\n    }\n    while ($i < count($arr1)) {\n        $count++;\n        if ($count == $k) {\n            return $arr1[$i];\n        }\n        $i++;\n    }\n    while ($j < count($arr2)) {\n        $count++;\n        if ($count == $k) {\n            return $arr2[$j];\n        }\n        $j++;\n    }\n}\n\n$arr1 = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n$arr2 = [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20];\n$k = 5;\necho find_kth($arr1, $arr2, $k);\nfunction candidate(...$args) {\n    return find_kth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 3, 6, 7, 9), array(1, 4, 8, 10), 5) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 112, 256, 349, 770), array(72, 86, 113, 119, 265, 445, 892), 7) !== 256) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 4, 7, 8, 10), array(2, 5, 9, 11), 6) !== 8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123418,
      "stdout": "5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find kth element from the given two sorted arrays.\nfunction find_kth($arr1, $arr2, $k) {\n    $i = 0;\n    $j = 0;\n    $count = 0;\n    while ($i < count($arr1) && $j < count($arr2)) {\n        if ($arr1[$i] < $arr2[$j]) {\n            $count++;\n            if ($count == $k) {\n                return $arr1[$i];\n            }\n            $i++;\n        } else {\n            $count++;\n            if ($count == $k) {\n                return $arr2[$j];\n            }\n            $j++;\n        }\n    }\n    while ($i < count($arr1)) {\n        $count++;\n        if ($count == $k) {\n            return $arr1[$i];\n        }\n        $i++;\n    }\n    while ($j < count($arr2)) {\n        $count++;\n        if ($count == $k) {\n            return $arr2[$j];\n        }\n        $j++;\n    }\n}\n\n$arr1 = [1, 3, 5, 7, 9];\n$arr2 = [2, 4, 6, 8, 10];\n$k = 5;\necho find_kth($arr1, $arr2, $k);\nfunction candidate(...$args) {\n    return find_kth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 3, 6, 7, 9), array(1, 4, 8, 10), 5) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 112, 256, 349, 770), array(72, 86, 113, 119, 265, 445, 892), 7) !== 256) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 4, 7, 8, 10), array(2, 5, 9, 11), 6) !== 8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510546,
      "stdout": "5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find kth element from the given two sorted arrays.\nfunction find_kth($arr1, $arr2, $k) {\n    $i = 0;\n    $j = 0;\n    $count = 0;\n    while($i < count($arr1) && $j < count($arr2)) {\n        if($arr1[$i] < $arr2[$j]) {\n            $count++;\n            if($count == $k) {\n                return $arr1[$i];\n            }\n            $i++;\n        } else {\n            $count++;\n            if($count == $k) {\n                return $arr2[$j];\n            }\n            $j++;\n        }\n    }\n    while($i < count($arr1)) {\n        $count++;\n        if($count == $k) {\n            return $arr1[$i];\n        }\n        $i++;\n    }\n    while($j < count($arr2)) {\n        $count++;\n        if($count == $k) {\n            return $arr2[$j];\n        }\n        $j++;\n    }\n}\n\n$arr1 = [1, 3, 5, 7, 9];\n$arr2 = [2, 4, 6, 8, 10];\n$k = 5;\necho find_kth($arr1, $arr2, $k);\nfunction candidate(...$args) {\n    return find_kth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 3, 6, 7, 9), array(1, 4, 8, 10), 5) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 112, 256, 349, 770), array(72, 86, 113, 119, 265, 445, 892), 7) !== 256) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 4, 7, 8, 10), array(2, 5, 9, 11), 6) !== 8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123418,
      "stdout": "5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find kth element from the given two sorted arrays.\nfunction find_kth($arr1, $arr2, $k) {\n    $i = 0;\n    $j = 0;\n    $count = 0;\n    $result = 0;\n    while ($count < $k) {\n        if ($arr1[$i] < $arr2[$j]) {\n            $result = $arr1[$i];\n            $i++;\n        } else {\n            $result = $arr2[$j];\n            $j++;\n        }\n        $count++;\n    }\n    return $result;\n}\n\n$arr1 = array(1, 3, 5, 7, 9);\n$arr2 = array(2, 4, 6, 8, 10);\n$k = 5;\necho find_kth($arr1, $arr2, $k);\nfunction candidate(...$args) {\n    return find_kth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 3, 6, 7, 9), array(1, 4, 8, 10), 5) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 112, 256, 349, 770), array(72, 86, 113, 119, 265, 445, 892), 7) !== 256) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 4, 7, 8, 10), array(2, 5, 9, 11), 6) !== 8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123418,
      "stdout": "5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find kth element from the given two sorted arrays.\nfunction find_kth($arr1, $arr2, $k) {\n    $i = 0;\n    $j = 0;\n    $count = 0;\n    while($i < count($arr1) && $j < count($arr2)) {\n        if($arr1[$i] < $arr2[$j]) {\n            $count++;\n            if($count == $k) {\n                return $arr1[$i];\n            }\n            $i++;\n        } else {\n            $count++;\n            if($count == $k) {\n                return $arr2[$j];\n            }\n            $j++;\n        }\n    }\n    while($i < count($arr1)) {\n        $count++;\n        if($count == $k) {\n            return $arr1[$i];\n        }\n        $i++;\n    }\n    while($j < count($arr2)) {\n        $count++;\n        if($count == $k) {\n            return $arr2[$j];\n        }\n        $j++;\n    }\n}\n\n$arr1 = [1, 2, 3, 4, 5];\n$arr2 = [6, 7, 8, 9, 10];\n$k = 5;\necho find_kth($arr1, $arr2, $k);\nfunction candidate(...$args) {\n    return find_kth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 3, 6, 7, 9), array(1, 4, 8, 10), 5) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 112, 256, 349, 770), array(72, 86, 113, 119, 265, 445, 892), 7) !== 256) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 4, 7, 8, 10), array(2, 5, 9, 11), 6) !== 8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123418,
      "stdout": "5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find kth element from the given two sorted arrays.\nfunction find_kth($arr1, $arr2, $k) {\n    $i = 0;\n    $j = 0;\n    $count = 0;\n    while ($i < count($arr1) && $j < count($arr2)) {\n        if ($arr1[$i] < $arr2[$j]) {\n            $count++;\n            if ($count == $k) {\n                return $arr1[$i];\n            }\n            $i++;\n        } else {\n            $count++;\n            if ($count == $k) {\n                return $arr2[$j];\n            }\n            $j++;\n        }\n    }\n    while ($i < count($arr1)) {\n        $count++;\n        if ($count == $k) {\n            return $arr1[$i];\n        }\n        $i++;\n    }\n    while ($j < count($arr2)) {\n        $count++;\n        if ($count == $k) {\n            return $arr2[$j];\n        }\n        $j++;\n    }\n}\n\n$arr1 = [1, 3, 5, 7, 9];\n$arr2 = [2, 4, 6, 8, 10];\necho find_kth($arr1, $arr2, 5);\nfunction candidate(...$args) {\n    return find_kth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 3, 6, 7, 9), array(1, 4, 8, 10), 5) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 112, 256, 349, 770), array(72, 86, 113, 119, 265, 445, 892), 7) !== 256) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 4, 7, 8, 10), array(2, 5, 9, 11), 6) !== 8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510546,
      "stdout": "5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find kth element from the given two sorted arrays.\nfunction find_kth($arr1, $arr2, $k) {\n    $i = 0;\n    $j = 0;\n    $count = 0;\n    while ($i < count($arr1) && $j < count($arr2)) {\n        if ($arr1[$i] < $arr2[$j]) {\n            $count++;\n            if ($count == $k) {\n                return $arr1[$i];\n            }\n            $i++;\n        } else {\n            $count++;\n            if ($count == $k) {\n                return $arr2[$j];\n            }\n            $j++;\n        }\n    }\n    if ($i == count($arr1)) {\n        return $arr2[$j + $k - $count - 1];\n    }\n    if ($j == count($arr2)) {\n        return $arr1[$i + $k - $count - 1];\n    }\n}\n\n$arr1 = [1, 3, 5, 7, 9];\n$arr2 = [2, 4, 6, 8, 10];\n$k = 5;\necho find_kth($arr1, $arr2, $k);\nfunction candidate(...$args) {\n    return find_kth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 3, 6, 7, 9), array(1, 4, 8, 10), 5) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 112, 256, 349, 770), array(72, 86, 113, 119, 265, 445, 892), 7) !== 256) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 4, 7, 8, 10), array(2, 5, 9, 11), 6) !== 8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123418,
      "stdout": "5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find kth element from the given two sorted arrays.\nfunction find_kth($arr1, $arr2, $k) {\n\t$i = 0;\n\t$j = 0;\n\t$count = 0;\n\t$prev = 0;\n\twhile ($i < count($arr1) && $j < count($arr2) && $count < $k) {\n\t\tif ($arr1[$i] < $arr2[$j]) {\n\t\t\t$prev = $arr1[$i];\n\t\t\t$i++;\n\t\t} else {\n\t\t\t$prev = $arr2[$j];\n\t\t\t$j++;\n\t\t}\n\t\t$count++;\n\t}\n\twhile ($i < count($arr1) && $count < $k) {\n\t\t$prev = $arr1[$i];\n\t\t$i++;\n\t\t$count++;\n\t}\n\twhile ($j < count($arr2) && $count < $k) {\n\t\t$prev = $arr2[$j];\n\t\t$j++;\n\t\t$count++;\n\t}\n\treturn $prev;\n}\n\n$arr1 = [1, 3, 5, 7, 9];\n$arr2 = [2, 4, 6, 8, 10];\n$k = 5;\necho find_kth($arr1, $arr2, $k);\nfunction candidate(...$args) {\n    return find_kth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 3, 6, 7, 9), array(1, 4, 8, 10), 5) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 112, 256, 349, 770), array(72, 86, 113, 119, 265, 445, 892), 7) !== 256) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 4, 7, 8, 10), array(2, 5, 9, 11), 6) !== 8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123418,
      "stdout": "5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find kth element from the given two sorted arrays.\nfunction find_kth($arr1, $arr2, $k) {\n    $i = 0;\n    $j = 0;\n    $count = 0;\n    $result = 0;\n    while ($i < count($arr1) && $j < count($arr2)) {\n        if ($arr1[$i] < $arr2[$j]) {\n            $result = $arr1[$i];\n            $i++;\n        } else {\n            $result = $arr2[$j];\n            $j++;\n        }\n        $count++;\n        if ($count == $k) {\n            break;\n        }\n    }\n    if ($i == count($arr1)) {\n        $result = $arr2[$j + $k - $count - 1];\n    }\n    if ($j == count($arr2)) {\n        $result = $arr1[$i + $k - $count - 1];\n    }\n    return $result;\n}\n\n$arr1 = [1, 3, 5, 7, 9];\n$arr2 = [2, 4, 6, 8, 10];\n$k = 5;\necho find_kth($arr1, $arr2, $k);\nfunction candidate(...$args) {\n    return find_kth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 3, 6, 7, 9), array(1, 4, 8, 10), 5) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 112, 256, 349, 770), array(72, 86, 113, 119, 265, 445, 892), 7) !== 256) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 4, 7, 8, 10), array(2, 5, 9, 11), 6) !== 8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123418,
      "stdout": "5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find kth element from the given two sorted arrays.\nfunction find_kth($arr1, $arr2, $k) {\n    $i = 0;\n    $j = 0;\n    $count = 0;\n    $result = 0;\n    while ($i < count($arr1) && $j < count($arr2)) {\n        if ($arr1[$i] < $arr2[$j]) {\n            $result = $arr1[$i];\n            $i++;\n        } else {\n            $result = $arr2[$j];\n            $j++;\n        }\n        $count++;\n        if ($count == $k) {\n            break;\n        }\n    }\n    while ($i < count($arr1)) {\n        $result = $arr1[$i];\n        $i++;\n        $count++;\n        if ($count == $k) {\n            break;\n        }\n    }\n    while ($j < count($arr2)) {\n        $result = $arr2[$j];\n        $j++;\n        $count++;\n        if ($count == $k) {\n            break;\n        }\n    }\n    return $result;\n}\n\n$arr1 = [1, 3, 5, 7, 9];\n$arr2 = [2, 4, 6, 8, 10];\n$k = 5;\necho find_kth($arr1, $arr2, $k);\nfunction candidate(...$args) {\n    return find_kth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 3, 6, 7, 9), array(1, 4, 8, 10), 5) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 112, 256, 349, 770), array(72, 86, 113, 119, 265, 445, 892), 7) !== 256) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 4, 7, 8, 10), array(2, 5, 9, 11), 6) !== 8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123418,
      "stdout": "10\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptuz21lo2.php:49\nStack trace:\n#0 /tmp/tmptuz21lo2.php(54): test()\n#1 {main}\n  thrown in /tmp/tmptuz21lo2.php on line 49\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find kth element from the given two sorted arrays.\nfunction find_kth($arr1, $arr2, $k) {\n    $i = 0;\n    $j = 0;\n    $count = 0;\n    $result = 0;\n    while ($i < count($arr1) && $j < count($arr2)) {\n        if ($arr1[$i] < $arr2[$j]) {\n            $result = $arr1[$i];\n            $i++;\n        } else {\n            $result = $arr2[$j];\n            $j++;\n        }\n        $count++;\n        if ($count == $k) {\n            break;\n        }\n    }\n    while ($i < count($arr1)) {\n        $result = $arr1[$i];\n        $i++;\n        $count++;\n        if ($count == $k) {\n            break;\n        }\n    }\n    while ($j < count($arr2)) {\n        $result = $arr2[$j];\n        $j++;\n        $count++;\n        if ($count == $k) {\n            break;\n        }\n    }\n    return $result;\n}\n\n$arr1 = array(1, 3, 5, 7, 9);\n$arr2 = array(2, 4, 6, 8, 10);\necho find_kth($arr1, $arr2, 5);\nfunction candidate(...$args) {\n    return find_kth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 3, 6, 7, 9), array(1, 4, 8, 10), 5) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 112, 256, 349, 770), array(72, 86, 113, 119, 265, 445, 892), 7) !== 256) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 4, 7, 8, 10), array(2, 5, 9, 11), 6) !== 8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123418,
      "stdout": "10\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4066m6ul.php:48\nStack trace:\n#0 /tmp/tmp4066m6ul.php(53): test()\n#1 {main}\n  thrown in /tmp/tmp4066m6ul.php on line 48\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find kth element from the given two sorted arrays.\nfunction find_kth($arr1, $arr2, $k) {\n    $i = 0;\n    $j = 0;\n    $kth = 0;\n    while ($i < count($arr1) && $j < count($arr2)) {\n        if ($arr1[$i] < $arr2[$j]) {\n            $kth = $arr1[$i];\n            $i++;\n        } else {\n            $kth = $arr2[$j];\n            $j++;\n        }\n        if ($i + $j == $k) {\n            break;\n        }\n    }\n    if ($i == count($arr1)) {\n        $kth = $arr2[$j + $k - $i - 1];\n    } else if ($j == count($arr2)) {\n        $kth = $arr1[$i + $k - $j - 1];\n    }\n    return $kth;\n}\n\n$arr1 = [1, 3, 5, 7, 9];\n$arr2 = [2, 4, 6, 8, 10];\n$k = 5;\necho find_kth($arr1, $arr2, $k);\nfunction candidate(...$args) {\n    return find_kth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 3, 6, 7, 9), array(1, 4, 8, 10), 5) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 112, 256, 349, 770), array(72, 86, 113, 119, 265, 445, 892), 7) !== 256) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 4, 7, 8, 10), array(2, 5, 9, 11), 6) !== 8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123418,
      "stdout": "5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find kth element from the given two sorted arrays.\nfunction find_kth($arr1, $arr2, $k) {\n    $i = 0;\n    $j = 0;\n    $count = 0;\n    while ($i < count($arr1) && $j < count($arr2)) {\n        if ($arr1[$i] < $arr2[$j]) {\n            $count++;\n            if ($count == $k) {\n                return $arr1[$i];\n            }\n            $i++;\n        } else {\n            $count++;\n            if ($count == $k) {\n                return $arr2[$j];\n            }\n            $j++;\n        }\n    }\n    while ($i < count($arr1)) {\n        $count++;\n        if ($count == $k) {\n            return $arr1[$i];\n        }\n        $i++;\n    }\n    while ($j < count($arr2)) {\n        $count++;\n        if ($count == $k) {\n            return $arr2[$j];\n        }\n        $j++;\n    }\n}\n\n$arr1 = [1, 3, 5, 7, 9];\n$arr2 = [2, 4, 6, 8, 10];\n$k = 5;\necho find_kth($arr1, $arr2, $k);\nfunction candidate(...$args) {\n    return find_kth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 3, 6, 7, 9), array(1, 4, 8, 10), 5) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 112, 256, 349, 770), array(72, 86, 113, 119, 265, 445, 892), 7) !== 256) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 4, 7, 8, 10), array(2, 5, 9, 11), 6) !== 8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510546,
      "stdout": "5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find kth element from the given two sorted arrays.\nfunction find_kth($arr1, $arr2, $k) {\n    $i = 0;\n    $j = 0;\n    $count = 0;\n    while ($i < count($arr1) && $j < count($arr2)) {\n        if ($arr1[$i] < $arr2[$j]) {\n            $count++;\n            if ($count == $k) {\n                return $arr1[$i];\n            }\n            $i++;\n        } else {\n            $count++;\n            if ($count == $k) {\n                return $arr2[$j];\n            }\n            $j++;\n        }\n    }\n    while ($i < count($arr1)) {\n        $count++;\n        if ($count == $k) {\n            return $arr1[$i];\n        }\n        $i++;\n    }\n    while ($j < count($arr2)) {\n        $count++;\n        if ($count == $k) {\n            return $arr2[$j];\n        }\n        $j++;\n    }\n}\n\n$arr1 = [1, 3, 5, 7, 9];\n$arr2 = [2, 4, 6, 8, 10];\n$k = 7;\necho find_kth($arr1, $arr2, $k);\nfunction candidate(...$args) {\n    return find_kth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 3, 6, 7, 9), array(1, 4, 8, 10), 5) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 112, 256, 349, 770), array(72, 86, 113, 119, 265, 445, 892), 7) !== 256) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 4, 7, 8, 10), array(2, 5, 9, 11), 6) !== 8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123418,
      "stdout": "7",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find kth element from the given two sorted arrays.\nfunction find_kth($arr1, $arr2, $k) {\n    $i = 0;\n    $j = 0;\n    $kth = 0;\n    while ($i < count($arr1) && $j < count($arr2)) {\n        if ($arr1[$i] < $arr2[$j]) {\n            $kth = $arr1[$i];\n            $i++;\n        } else {\n            $kth = $arr2[$j];\n            $j++;\n        }\n        $k--;\n        if ($k == 0) {\n            break;\n        }\n    }\n    if ($k > 0) {\n        if ($i < count($arr1)) {\n            $kth = $arr1[$i + $k - 1];\n        } else {\n            $kth = $arr2[$j + $k - 1];\n        }\n    }\n    return $kth;\n}\n\n$arr1 = [1, 3, 5, 7, 9];\n$arr2 = [2, 4, 6, 8, 10];\n$k = 5;\necho find_kth($arr1, $arr2, $k);\nfunction candidate(...$args) {\n    return find_kth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 3, 6, 7, 9), array(1, 4, 8, 10), 5) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 112, 256, 349, 770), array(72, 86, 113, 119, 265, 445, 892), 7) !== 256) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 4, 7, 8, 10), array(2, 5, 9, 11), 6) !== 8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123418,
      "stdout": "5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find kth element from the given two sorted arrays.\nfunction find_kth($arr1, $arr2, $k) {\n    $i = 0;\n    $j = 0;\n    $count = 0;\n    while ($i < count($arr1) && $j < count($arr2)) {\n        if ($arr1[$i] < $arr2[$j]) {\n            $count++;\n            if ($count == $k) {\n                return $arr1[$i];\n            }\n            $i++;\n        } else {\n            $count++;\n            if ($count == $k) {\n                return $arr2[$j];\n            }\n            $j++;\n        }\n    }\n    while ($i < count($arr1)) {\n        $count++;\n        if ($count == $k) {\n            return $arr1[$i];\n        }\n        $i++;\n    }\n    while ($j < count($arr2)) {\n        $count++;\n        if ($count == $k) {\n            return $arr2[$j];\n        }\n        $j++;\n    }\n}\n\n$arr1 = [1, 3, 5, 7, 9];\n$arr2 = [2, 4, 6, 8, 10];\n$k = 5;\necho find_kth($arr1, $arr2, $k);\nfunction candidate(...$args) {\n    return find_kth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 3, 6, 7, 9), array(1, 4, 8, 10), 5) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 112, 256, 349, 770), array(72, 86, 113, 119, 265, 445, 892), 7) !== 256) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 4, 7, 8, 10), array(2, 5, 9, 11), 6) !== 8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510546,
      "stdout": "5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find kth element from the given two sorted arrays.\nfunction find_kth($arr1, $arr2, $k) {\n    $i = 0;\n    $j = 0;\n    $count = 0;\n    $result = 0;\n    while ($i < count($arr1) && $j < count($arr2)) {\n        if ($arr1[$i] < $arr2[$j]) {\n            $result = $arr1[$i];\n            $i++;\n        } else {\n            $result = $arr2[$j];\n            $j++;\n        }\n        $count++;\n        if ($count == $k) {\n            break;\n        }\n    }\n    if ($i == count($arr1)) {\n        for (; $j < count($arr2); $j++) {\n            $result = $arr2[$j];\n            $count++;\n            if ($count == $k) {\n                break;\n            }\n        }\n    }\n    if ($j == count($arr2)) {\n        for (; $i < count($arr1); $i++) {\n            $result = $arr1[$i];\n            $count++;\n            if ($count == $k) {\n                break;\n            }\n        }\n    }\n    return $result;\n}\n\n$arr1 = [1, 3, 5, 7, 9];\n$arr2 = [2, 4, 6, 8, 10];\n$k = 6;\necho find_kth($arr1, $arr2, $k);\nfunction candidate(...$args) {\n    return find_kth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 3, 6, 7, 9), array(1, 4, 8, 10), 5) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 112, 256, 349, 770), array(72, 86, 113, 119, 265, 445, 892), 7) !== 256) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 4, 7, 8, 10), array(2, 5, 9, 11), 6) !== 8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123418,
      "stdout": "6",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find kth element from the given two sorted arrays.\nfunction find_kth($arr1, $arr2, $k) {\n\t$i = 0;\n\t$j = 0;\n\t$count = 0;\n\t$result = 0;\n\twhile ($i < count($arr1) && $j < count($arr2)) {\n\t\tif ($arr1[$i] < $arr2[$j]) {\n\t\t\t$result = $arr1[$i];\n\t\t\t$i++;\n\t\t} else {\n\t\t\t$result = $arr2[$j];\n\t\t\t$j++;\n\t\t}\n\t\t$count++;\n\t\tif ($count == $k) {\n\t\t\tbreak;\n\t\t}\n\t}\n\tif ($i == count($arr1)) {\n\t\twhile ($count < $k) {\n\t\t\t$result = $arr2[$j];\n\t\t\t$j++;\n\t\t\t$count++;\n\t\t}\n\t}\n\tif ($j == count($arr2)) {\n\t\twhile ($count < $k) {\n\t\t\t$result = $arr1[$i];\n\t\t\t$i++;\n\t\t\t$count++;\n\t\t}\n\t}\n\treturn $result;\n}\n\n$arr1 = array(1, 3, 5, 7, 9);\n$arr2 = array(2, 4, 6, 8, 10);\n$k = 5;\necho find_kth($arr1, $arr2, $k);\nfunction candidate(...$args) {\n    return find_kth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 3, 6, 7, 9), array(1, 4, 8, 10), 5) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 112, 256, 349, 770), array(72, 86, 113, 119, 265, 445, 892), 7) !== 256) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 4, 7, 8, 10), array(2, 5, 9, 11), 6) !== 8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123418,
      "stdout": "5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find kth element from the given two sorted arrays.\nfunction find_kth($arr1, $arr2, $k) {\n    $m = count($arr1);\n    $n = count($arr2);\n    if ($m > $n) {\n        return find_kth($arr2, $arr1, $k);\n    }\n    if ($m == 0) {\n        return $arr2[$k - 1];\n    }\n    if ($k == 1) {\n        return min($arr1[0], $arr2[0]);\n    }\n    $pa = min($k / 2, $m);\n    $pb = $k - $pa;\n    if ($arr1[$pa - 1] < $arr2[$pb - 1]) {\n        return find_kth(array_slice($arr1, $pa), $arr2, $k - $pa);\n    } else if ($arr1[$pa - 1] > $arr2[$pb - 1]) {\n        return find_kth($arr1, array_slice($arr2, $pb), $k - $pb);\n    } else {\n        return $arr1[$pa - 1];\n    }\n}\n\n$arr1 = array(1, 2, 3, 4, 5);\n$arr2 = array(6, 7, 8, 9, 10);\n$k = 5;\necho find_kth($arr1, $arr2, $k);\nfunction candidate(...$args) {\n    return find_kth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 3, 6, 7, 9), array(1, 4, 8, 10), 5) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 112, 256, 349, 770), array(72, 86, 113, 119, 265, 445, 892), 7) !== 256) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 4, 7, 8, 10), array(2, 5, 9, 11), 6) !== 8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123418,
      "stdout": "\nDeprecated: Implicit conversion from float 1.5 to int loses precision in /tmp/tmp0jy8cyd5.php on line 17\n\nDeprecated: Implicit conversion from float 1.5 to int loses precision in /tmp/tmp0jy8cyd5.php on line 17\n\nDeprecated: Implicit conversion from float 2.5 to int loses precision in /tmp/tmp0jy8cyd5.php on line 18\n\nDeprecated: Implicit conversion from float 0.25 to int loses precision in /tmp/tmp0jy8cyd5.php on line 17\n\nDeprecated: Implicit conversion from float 0.25 to int loses precision in /tmp/tmp0jy8cyd5.php on line 17\n\nDeprecated: Implicit conversion from float 1.25 to int loses precision in /tmp/tmp0jy8cyd5.php on line 18\n\nDeprecated: Implicit conversion from float -0.375 to int loses precision in /tmp/tmp0jy8cyd5.php on line 17\n\nDeprecated: Implicit conversion from float -0.375 to int loses precision in /tmp/tmp0jy8cyd5.php on line 17\n\nDeprecated: Implicit conversion from float 0.625 to int loses precision in /tmp/tmp0jy8cyd5.php on line 18\n\nDeprecated: Implicit conversion from float -0.6875 to int ",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find kth element from the given two sorted arrays.\nfunction find_kth($arr1, $arr2, $k) {\n    $i = 0;\n    $j = 0;\n    $count = 0;\n    while ($i < count($arr1) && $j < count($arr2)) {\n        if ($arr1[$i] < $arr2[$j]) {\n            $count++;\n            if ($count == $k) {\n                return $arr1[$i];\n            }\n            $i++;\n        } else {\n            $count++;\n            if ($count == $k) {\n                return $arr2[$j];\n            }\n            $j++;\n        }\n    }\n    while ($i < count($arr1)) {\n        $count++;\n        if ($count == $k) {\n            return $arr1[$i];\n        }\n        $i++;\n    }\n    while ($j < count($arr2)) {\n        $count++;\n        if ($count == $k) {\n            return $arr2[$j];\n        }\n        $j++;\n    }\n}\n\n$arr1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$arr2 = [11, 12, 13, 14, 15, 16, 17, 18, 19, 20];\n$k = 10;\necho find_kth($arr1, $arr2, $k);\nfunction candidate(...$args) {\n    return find_kth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 3, 6, 7, 9), array(1, 4, 8, 10), 5) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 112, 256, 349, 770), array(72, 86, 113, 119, 265, 445, 892), 7) !== 256) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 4, 7, 8, 10), array(2, 5, 9, 11), 6) !== 8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510546,
      "stdout": "10",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find kth element from the given two sorted arrays.\nfunction find_kth($arr1, $arr2, $k) {\n    $i = 0;\n    $j = 0;\n    $count = 0;\n    while ($i < count($arr1) && $j < count($arr2)) {\n        if ($arr1[$i] < $arr2[$j]) {\n            $count++;\n            if ($count == $k) {\n                return $arr1[$i];\n            }\n            $i++;\n        } else {\n            $count++;\n            if ($count == $k) {\n                return $arr2[$j];\n            }\n            $j++;\n        }\n    }\n    while ($i < count($arr1)) {\n        $count++;\n        if ($count == $k) {\n            return $arr1[$i];\n        }\n        $i++;\n    }\n    while ($j < count($arr2)) {\n        $count++;\n        if ($count == $k) {\n            return $arr2[$j];\n        }\n        $j++;\n    }\n}\n\n$arr1 = [1, 3, 5, 7, 9, 11, 13, 15];\n$arr2 = [2, 4, 6, 8, 10, 12, 14, 16];\n$k = 5;\necho find_kth($arr1, $arr2, $k);\nfunction candidate(...$args) {\n    return find_kth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 3, 6, 7, 9), array(1, 4, 8, 10), 5) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 112, 256, 349, 770), array(72, 86, 113, 119, 265, 445, 892), 7) !== 256) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 4, 7, 8, 10), array(2, 5, 9, 11), 6) !== 8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123418,
      "stdout": "5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find kth element from the given two sorted arrays.\nfunction find_kth($arr1, $arr2, $k) {\n\t$i = 0;\n\t$j = 0;\n\t$count = 0;\n\twhile ($i < count($arr1) && $j < count($arr2)) {\n\t\tif ($arr1[$i] < $arr2[$j]) {\n\t\t\t$count++;\n\t\t\tif ($count == $k) {\n\t\t\t\treturn $arr1[$i];\n\t\t\t}\n\t\t\t$i++;\n\t\t} else {\n\t\t\t$count++;\n\t\t\tif ($count == $k) {\n\t\t\t\treturn $arr2[$j];\n\t\t\t}\n\t\t\t$j++;\n\t\t}\n\t}\n\twhile ($i < count($arr1)) {\n\t\t$count++;\n\t\tif ($count == $k) {\n\t\t\treturn $arr1[$i];\n\t\t}\n\t\t$i++;\n\t}\n\twhile ($j < count($arr2)) {\n\t\t$count++;\n\t\tif ($count == $k) {\n\t\t\treturn $arr2[$j];\n\t\t}\n\t\t$j++;\n\t}\n}\n\n$arr1 = [1, 3, 5, 7, 9];\n$arr2 = [2, 4, 6, 8, 10];\n$k = 5;\necho find_kth($arr1, $arr2, $k);\nfunction candidate(...$args) {\n    return find_kth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 3, 6, 7, 9), array(1, 4, 8, 10), 5) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 112, 256, 349, 770), array(72, 86, 113, 119, 265, 445, 892), 7) !== 256) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 4, 7, 8, 10), array(2, 5, 9, 11), 6) !== 8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510546,
      "stdout": "5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find kth element from the given two sorted arrays.\nfunction find_kth($arr1, $arr2, $k) {\n    $i = 0;\n    $j = 0;\n    $count = 0;\n    $result = 0;\n    while ($i < count($arr1) && $j < count($arr2)) {\n        if ($arr1[$i] < $arr2[$j]) {\n            $result = $arr1[$i];\n            $i++;\n        } else {\n            $result = $arr2[$j];\n            $j++;\n        }\n        $count++;\n        if ($count == $k) {\n            break;\n        }\n    }\n    while ($i < count($arr1)) {\n        $result = $arr1[$i];\n        $i++;\n        $count++;\n        if ($count == $k) {\n            break;\n        }\n    }\n    while ($j < count($arr2)) {\n        $result = $arr2[$j];\n        $j++;\n        $count++;\n        if ($count == $k) {\n            break;\n        }\n    }\n    return $result;\n}\n\n$arr1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$arr2 = [11, 12, 13, 14, 15, 16, 17, 18, 19, 20];\n$k = 5;\necho find_kth($arr1, $arr2, $k);\nfunction candidate(...$args) {\n    return find_kth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 3, 6, 7, 9), array(1, 4, 8, 10), 5) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 112, 256, 349, 770), array(72, 86, 113, 119, 265, 445, 892), 7) !== 256) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 4, 7, 8, 10), array(2, 5, 9, 11), 6) !== 8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123418,
      "stdout": "20\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_9tdn144.php:49\nStack trace:\n#0 /tmp/tmp_9tdn144.php(54): test()\n#1 {main}\n  thrown in /tmp/tmp_9tdn144.php on line 49\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find kth element from the given two sorted arrays.\nfunction find_kth($arr1, $arr2, $k) {\n    $i = 0;\n    $j = 0;\n    $count = 0;\n    while ($i < count($arr1) && $j < count($arr2)) {\n        if ($arr1[$i] < $arr2[$j]) {\n            $count++;\n            if ($count == $k) {\n                return $arr1[$i];\n            }\n            $i++;\n        } else {\n            $count++;\n            if ($count == $k) {\n                return $arr2[$j];\n            }\n            $j++;\n        }\n    }\n    while ($i < count($arr1)) {\n        $count++;\n        if ($count == $k) {\n            return $arr1[$i];\n        }\n        $i++;\n    }\n    while ($j < count($arr2)) {\n        $count++;\n        if ($count == $k) {\n            return $arr2[$j];\n        }\n        $j++;\n    }\n}\n\n$arr1 = [1, 3, 5, 7, 9];\n$arr2 = [2, 4, 6, 8, 10];\n$k = 5;\necho find_kth($arr1, $arr2, $k);\nfunction candidate(...$args) {\n    return find_kth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 3, 6, 7, 9), array(1, 4, 8, 10), 5) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 112, 256, 349, 770), array(72, 86, 113, 119, 265, 445, 892), 7) !== 256) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 4, 7, 8, 10), array(2, 5, 9, 11), 6) !== 8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510546,
      "stdout": "5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find kth element from the given two sorted arrays.\nfunction find_kth($arr1, $arr2, $k) {\n  $i = 0;\n  $j = 0;\n  $count = 0;\n  $result = 0;\n  while ($count < $k) {\n    if ($arr1[$i] < $arr2[$j]) {\n      $result = $arr1[$i];\n      $i++;\n    } else {\n      $result = $arr2[$j];\n      $j++;\n    }\n    $count++;\n  }\n  return $result;\n}\n\n$arr1 = [1, 3, 5, 7, 9];\n$arr2 = [2, 4, 6, 8, 10];\n$k = 5;\necho find_kth($arr1, $arr2, $k);\nfunction candidate(...$args) {\n    return find_kth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 3, 6, 7, 9), array(1, 4, 8, 10), 5) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 112, 256, 349, 770), array(72, 86, 113, 119, 265, 445, 892), 7) !== 256) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 4, 7, 8, 10), array(2, 5, 9, 11), 6) !== 8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123418,
      "stdout": "5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find kth element from the given two sorted arrays.\nfunction find_kth($arr1, $arr2, $k) {\n    $i = 0;\n    $j = 0;\n    $count = 0;\n    while ($i < count($arr1) && $j < count($arr2)) {\n        if ($arr1[$i] < $arr2[$j]) {\n            $count++;\n            if ($count == $k) {\n                return $arr1[$i];\n            }\n            $i++;\n        } else {\n            $count++;\n            if ($count == $k) {\n                return $arr2[$j];\n            }\n            $j++;\n        }\n    }\n    if ($i < count($arr1)) {\n        return $arr1[$i + $k - $count - 1];\n    }\n    if ($j < count($arr2)) {\n        return $arr2[$j + $k - $count - 1];\n    }\n}\n\n$arr1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$arr2 = [11, 12, 13, 14, 15, 16, 17, 18, 19, 20];\n$k = 5;\necho find_kth($arr1, $arr2, $k);\nfunction candidate(...$args) {\n    return find_kth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 3, 6, 7, 9), array(1, 4, 8, 10), 5) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 112, 256, 349, 770), array(72, 86, 113, 119, 265, 445, 892), 7) !== 256) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 4, 7, 8, 10), array(2, 5, 9, 11), 6) !== 8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123418,
      "stdout": "5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find kth element from the given two sorted arrays.\nfunction find_kth($arr1, $arr2, $k) {\n\t$i = 0;\n\t$j = 0;\n\t$kth = 0;\n\twhile ($i < count($arr1) && $j < count($arr2)) {\n\t\tif ($arr1[$i] < $arr2[$j]) {\n\t\t\t$kth = $arr1[$i];\n\t\t\t$i++;\n\t\t} else {\n\t\t\t$kth = $arr2[$j];\n\t\t\t$j++;\n\t\t}\n\t\tif ($k == 1) {\n\t\t\tbreak;\n\t\t}\n\t\t$k--;\n\t}\n\tif ($i < count($arr1)) {\n\t\twhile ($i < count($arr1)) {\n\t\t\t$kth = $arr1[$i];\n\t\t\t$i++;\n\t\t\tif ($k == 1) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\t$k--;\n\t\t}\n\t}\n\tif ($j < count($arr2)) {\n\t\twhile ($j < count($arr2)) {\n\t\t\t$kth = $arr2[$j];\n\t\t\t$j++;\n\t\t\tif ($k == 1) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\t$k--;\n\t\t}\n\t}\n\treturn $kth;\n}\n\n$arr1 = array(1, 3, 5, 7, 9);\n$arr2 = array(2, 4, 6, 8, 10);\n$k = 4;\n$kth = find_kth($arr1, $arr2, $k);\necho $kth;\nfunction candidate(...$args) {\n    return find_kth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 3, 6, 7, 9), array(1, 4, 8, 10), 5) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 112, 256, 349, 770), array(72, 86, 113, 119, 265, 445, 892), 7) !== 256) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 4, 7, 8, 10), array(2, 5, 9, 11), 6) !== 8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123418,
      "stdout": "6\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpz87a90nl.php:53\nStack trace:\n#0 /tmp/tmpz87a90nl.php(58): test()\n#1 {main}\n  thrown in /tmp/tmpz87a90nl.php on line 53\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find kth element from the given two sorted arrays.\nfunction find_kth($arr1, $arr2, $k) {\n    $i = 0;\n    $j = 0;\n    $count = 0;\n    $result = 0;\n    while ($i < count($arr1) && $j < count($arr2)) {\n        if ($arr1[$i] < $arr2[$j]) {\n            $result = $arr1[$i];\n            $i++;\n        } else {\n            $result = $arr2[$j];\n            $j++;\n        }\n        $count++;\n        if ($count == $k) {\n            break;\n        }\n    }\n    if ($i < count($arr1)) {\n        while ($count < $k) {\n            $result = $arr1[$i];\n            $i++;\n            $count++;\n        }\n    }\n    if ($j < count($arr2)) {\n        while ($count < $k) {\n            $result = $arr2[$j];\n            $j++;\n            $count++;\n        }\n    }\n    return $result;\n}\n\n$arr1 = array(2, 3, 6, 7, 9);\n$arr2 = array(1, 4, 8, 10);\n$k = 5;\necho find_kth($arr1, $arr2, $k);\nfunction candidate(...$args) {\n    return find_kth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 3, 6, 7, 9), array(1, 4, 8, 10), 5) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 112, 256, 349, 770), array(72, 86, 113, 119, 265, 445, 892), 7) !== 256) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 4, 7, 8, 10), array(2, 5, 9, 11), 6) !== 8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123418,
      "stdout": "6",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find kth element from the given two sorted arrays.\nfunction find_kth($arr1, $arr2, $k) {\n    $i = 0;\n    $j = 0;\n    $count = 0;\n    $result = 0;\n    while ($i < count($arr1) && $j < count($arr2)) {\n        if ($arr1[$i] < $arr2[$j]) {\n            $result = $arr1[$i];\n            $i++;\n        } else {\n            $result = $arr2[$j];\n            $j++;\n        }\n        $count++;\n        if ($count == $k) {\n            break;\n        }\n    }\n    if ($count == $k) {\n        return $result;\n    }\n    if ($i < count($arr1)) {\n        return $arr1[$i + $k - $count - 1];\n    }\n    if ($j < count($arr2)) {\n        return $arr2[$j + $k - $count - 1];\n    }\n}\n\n$arr1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$arr2 = [11, 12, 13, 14, 15, 16, 17, 18, 19, 20];\n\necho find_kth($arr1, $arr2, 10);\nfunction candidate(...$args) {\n    return find_kth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 3, 6, 7, 9), array(1, 4, 8, 10), 5) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 112, 256, 349, 770), array(72, 86, 113, 119, 265, 445, 892), 7) !== 256) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 4, 7, 8, 10), array(2, 5, 9, 11), 6) !== 8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123418,
      "stdout": "10",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find kth element from the given two sorted arrays.\nfunction find_kth($arr1, $arr2, $k) {\n    $i = 0;\n    $j = 0;\n    $count = 0;\n    $len1 = count($arr1);\n    $len2 = count($arr2);\n    while ($i < $len1 && $j < $len2) {\n        if ($arr1[$i] < $arr2[$j]) {\n            $count++;\n            if ($count == $k) {\n                return $arr1[$i];\n            }\n            $i++;\n        } else {\n            $count++;\n            if ($count == $k) {\n                return $arr2[$j];\n            }\n            $j++;\n        }\n    }\n    while ($i < $len1) {\n        $count++;\n        if ($count == $k) {\n            return $arr1[$i];\n        }\n        $i++;\n    }\n    while ($j < $len2) {\n        $count++;\n        if ($count == $k) {\n            return $arr2[$j];\n        }\n        $j++;\n    }\n}\n\n$arr1 = [1, 3, 5, 7, 9];\n$arr2 = [2, 4, 6, 8, 10];\necho find_kth($arr1, $arr2, 5);\nfunction candidate(...$args) {\n    return find_kth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 3, 6, 7, 9), array(1, 4, 8, 10), 5) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 112, 256, 349, 770), array(72, 86, 113, 119, 265, 445, 892), 7) !== 256) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 4, 7, 8, 10), array(2, 5, 9, 11), 6) !== 8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123418,
      "stdout": "5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find kth element from the given two sorted arrays.\nfunction find_kth($arr1, $arr2, $k) {\n    $i = 0;\n    $j = 0;\n    $count = 0;\n    while ($i < count($arr1) && $j < count($arr2)) {\n        if ($arr1[$i] < $arr2[$j]) {\n            $count++;\n            if ($count == $k) {\n                return $arr1[$i];\n            }\n            $i++;\n        } else {\n            $count++;\n            if ($count == $k) {\n                return $arr2[$j];\n            }\n            $j++;\n        }\n    }\n    if ($i < count($arr1)) {\n        return $arr1[$k - $count - 1];\n    }\n    if ($j < count($arr2)) {\n        return $arr2[$k - $count - 1];\n    }\n}\n\n$arr1 = [1, 3, 5, 7, 9];\n$arr2 = [2, 4, 6, 8, 10];\n\necho find_kth($arr1, $arr2, 5);\nfunction candidate(...$args) {\n    return find_kth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 3, 6, 7, 9), array(1, 4, 8, 10), 5) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 112, 256, 349, 770), array(72, 86, 113, 119, 265, 445, 892), 7) !== 256) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 4, 7, 8, 10), array(2, 5, 9, 11), 6) !== 8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123418,
      "stdout": "5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find kth element from the given two sorted arrays.\nfunction find_kth($arr1, $arr2, $k) {\n    $i = 0;\n    $j = 0;\n    $count = 0;\n    $result = 0;\n    while ($i < count($arr1) && $j < count($arr2)) {\n        if ($arr1[$i] < $arr2[$j]) {\n            $result = $arr1[$i];\n            $i++;\n        } else {\n            $result = $arr2[$j];\n            $j++;\n        }\n        $count++;\n        if ($count == $k) {\n            break;\n        }\n    }\n    if ($i == count($arr1)) {\n        $result = $arr2[$j + $k - $count - 1];\n    } else if ($j == count($arr2)) {\n        $result = $arr1[$i + $k - $count - 1];\n    }\n    return $result;\n}\n\n$arr1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20];\n$arr2 = [21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40];\n$k = 10;\necho find_kth($arr1, $arr2, $k);\nfunction candidate(...$args) {\n    return find_kth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 3, 6, 7, 9), array(1, 4, 8, 10), 5) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 112, 256, 349, 770), array(72, 86, 113, 119, 265, 445, 892), 7) !== 256) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 4, 7, 8, 10), array(2, 5, 9, 11), 6) !== 8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123418,
      "stdout": "10",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find kth element from the given two sorted arrays.\nfunction find_kth($arr1, $arr2, $k) {\n    $i = 0;\n    $j = 0;\n    $count = 0;\n    while ($i < count($arr1) && $j < count($arr2)) {\n        if ($arr1[$i] < $arr2[$j]) {\n            $count++;\n            if ($count == $k) {\n                return $arr1[$i];\n            }\n            $i++;\n        } else {\n            $count++;\n            if ($count == $k) {\n                return $arr2[$j];\n            }\n            $j++;\n        }\n    }\n    while ($i < count($arr1)) {\n        $count++;\n        if ($count == $k) {\n            return $arr1[$i];\n        }\n        $i++;\n    }\n    while ($j < count($arr2)) {\n        $count++;\n        if ($count == $k) {\n            return $arr2[$j];\n        }\n        $j++;\n    }\n}\n\n$arr1 = [1, 3, 5, 7, 9];\n$arr2 = [2, 4, 6, 8, 10];\necho find_kth($arr1, $arr2, 5);\nfunction candidate(...$args) {\n    return find_kth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 3, 6, 7, 9), array(1, 4, 8, 10), 5) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 112, 256, 349, 770), array(72, 86, 113, 119, 265, 445, 892), 7) !== 256) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 4, 7, 8, 10), array(2, 5, 9, 11), 6) !== 8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510546,
      "stdout": "5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find kth element from the given two sorted arrays.\nfunction find_kth($arr1, $arr2, $k) {\n    $i = 0;\n    $j = 0;\n    while ($i < count($arr1) && $j < count($arr2)) {\n        if ($arr1[$i] < $arr2[$j]) {\n            $i++;\n        } else {\n            $j++;\n        }\n        if ($i + $j == $k) {\n            return $arr1[$i] < $arr2[$j] ? $arr1[$i] : $arr2[$j];\n        }\n    }\n    if ($i < count($arr1)) {\n        return $arr1[$k - $j];\n    } else {\n        return $arr2[$k - $i];\n    }\n}\n\n$arr1 = array(1, 3, 5, 7, 9);\n$arr2 = array(2, 4, 6, 8, 10);\n\necho find_kth($arr1, $arr2, 5);\nfunction candidate(...$args) {\n    return find_kth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 3, 6, 7, 9), array(1, 4, 8, 10), 5) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 112, 256, 349, 770), array(72, 86, 113, 119, 265, 445, 892), 7) !== 256) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 4, 7, 8, 10), array(2, 5, 9, 11), 6) !== 8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123418,
      "stdout": "6\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgim74yt1.php:32\nStack trace:\n#0 /tmp/tmpgim74yt1.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpgim74yt1.php on line 32\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find kth element from the given two sorted arrays.\nfunction find_kth($arr1, $arr2, $k) {\n    $len1 = count($arr1);\n    $len2 = count($arr2);\n    if ($len1 == 0) {\n        return $arr2[$k - 1];\n    }\n    if ($len2 == 0) {\n        return $arr1[$k - 1];\n    }\n    if ($k == 1) {\n        return min($arr1[0], $arr2[0]);\n    }\n    $mid1 = min($len1, $k / 2);\n    $mid2 = min($len2, $k / 2);\n    if ($arr1[$mid1 - 1] < $arr2[$mid2 - 1]) {\n        $arr1 = array_slice($arr1, $mid1);\n        $k -= $mid1;\n    } else {\n        $arr2 = array_slice($arr2, $mid2);\n        $k -= $mid2;\n    }\n    return find_kth($arr1, $arr2, $k);\n}\n\n$arr1 = [1, 3, 5, 7, 9];\n$arr2 = [2, 4, 6, 8, 10];\n$k = 5;\necho find_kth($arr1, $arr2, $k);\nfunction candidate(...$args) {\n    return find_kth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 3, 6, 7, 9), array(1, 4, 8, 10), 5) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 112, 256, 349, 770), array(72, 86, 113, 119, 265, 445, 892), 7) !== 256) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 4, 7, 8, 10), array(2, 5, 9, 11), 6) !== 8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123433,
      "stdout": "\nDeprecated: Implicit conversion from float 1.5 to int loses precision in /tmp/tmpwd4occu2.php on line 17\n\nDeprecated: Implicit conversion from float 1.5 to int loses precision in /tmp/tmpwd4occu2.php on line 17\n\nDeprecated: Implicit conversion from float 2.5 to int loses precision in /tmp/tmpwd4occu2.php on line 18\n\nDeprecated: Implicit conversion from float 0.25 to int loses precision in /tmp/tmpwd4occu2.php on line 17\n\nDeprecated: Implicit conversion from float 0.25 to int loses precision in /tmp/tmpwd4occu2.php on line 17\n\nDeprecated: Implicit conversion from float 1.25 to int loses precision in /tmp/tmpwd4occu2.php on line 21\n\nDeprecated: Implicit conversion from float -0.375 to int loses precision in /tmp/tmpwd4occu2.php on line 17\n\nDeprecated: Implicit conversion from float -0.375 to int loses precision in /tmp/tmpwd4occu2.php on line 17\n\nDeprecated: Implicit conversion from float 0.625 to int loses precision in /tmp/tmpwd4occu2.php on line 21\n\nDeprecated: Implicit conversion from float -0.6875 to int loses precision in /tmp/tmpwd4occu2.php on line 17\n\nDeprecated: Implicit conversion from float -0.6875 to int loses precision in /tmp/tmpwd4occu2.php on line 17\n\nDeprecated: Implicit conversion from float 0.3125 to int loses precision in /tmp/tmpwd4occu2.php on line 21\n\nDeprecated: Implicit conversion from float -0.84375 to int loses precision in /tmp/tmpwd4occu2.php on line 17\n\nDeprecated: Implicit conversion from float -0.84375 to int loses precision in /tmp/tmpwd4occu2.php on line 17\n\nDeprecated: Implicit conversion from float 0.15625 to int loses precision in /tmp/tmpwd4occu2.php on line 21\n\nDeprecated: Implicit conversion from float -0.921875 to int loses precision in /tmp/tmpwd4occu2.php on line 17\n\nDeprecated: Implicit conversion from float -0.921875 to int loses precision in /tmp/tmpwd4occu2.php on line 17\n\nDeprecated: Implicit conversion from float 0.078125 to int loses precision in /tmp/tmpwd4occu2.php on line 21\n\nDeprecated: Implicit conversion from float -0.9609375 to int loses precision in /tmp/t",
      "stderr": "",
      "exit_code": -1,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find kth element from the given two sorted arrays.\nfunction find_kth($arr1, $arr2, $k) {\n\t$i = 0;\n\t$j = 0;\n\t$count = 0;\n\t$result = 0;\n\twhile ($i < count($arr1) && $j < count($arr2)) {\n\t\tif ($arr1[$i] < $arr2[$j]) {\n\t\t\t$result = $arr1[$i];\n\t\t\t$i++;\n\t\t} else {\n\t\t\t$result = $arr2[$j];\n\t\t\t$j++;\n\t\t}\n\t\t$count++;\n\t\tif ($count == $k) {\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn $result;\n}\n\n$arr1 = [1, 2, 3, 4, 5, 6, 7];\n$arr2 = [8, 9, 10, 11, 12, 13, 14];\n$k = 5;\necho find_kth($arr1, $arr2, $k);\nfunction candidate(...$args) {\n    return find_kth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 3, 6, 7, 9), array(1, 4, 8, 10), 5) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 112, 256, 349, 770), array(72, 86, 113, 119, 265, 445, 892), 7) !== 256) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 4, 7, 8, 10), array(2, 5, 9, 11), 6) !== 8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123418,
      "stdout": "5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find kth element from the given two sorted arrays.\nfunction find_kth($arr1, $arr2, $k) {\n    $i = 0;\n    $j = 0;\n    $c = 0;\n    while ($i < count($arr1) && $j < count($arr2)) {\n        if ($arr1[$i] < $arr2[$j]) {\n            $c++;\n            if ($c == $k) {\n                return $arr1[$i];\n            }\n            $i++;\n        } else {\n            $c++;\n            if ($c == $k) {\n                return $arr2[$j];\n            }\n            $j++;\n        }\n    }\n    while ($i < count($arr1)) {\n        $c++;\n        if ($c == $k) {\n            return $arr1[$i];\n        }\n        $i++;\n    }\n    while ($j < count($arr2)) {\n        $c++;\n        if ($c == $k) {\n            return $arr2[$j];\n        }\n        $j++;\n    }\n}\n\n$arr1 = [1, 3, 5, 7, 9];\n$arr2 = [2, 4, 6, 8, 10];\n\necho find_kth($arr1, $arr2, 5);\nfunction candidate(...$args) {\n    return find_kth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 3, 6, 7, 9), array(1, 4, 8, 10), 5) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 112, 256, 349, 770), array(72, 86, 113, 119, 265, 445, 892), 7) !== 256) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 4, 7, 8, 10), array(2, 5, 9, 11), 6) !== 8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123418,
      "stdout": "5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find kth element from the given two sorted arrays.\nfunction find_kth($arr1, $arr2, $k) {\n    $i = 0;\n    $j = 0;\n    $count = 0;\n    while ($i < count($arr1) && $j < count($arr2)) {\n        if ($arr1[$i] < $arr2[$j]) {\n            $count++;\n            if ($count == $k) {\n                return $arr1[$i];\n            }\n            $i++;\n        } else {\n            $count++;\n            if ($count == $k) {\n                return $arr2[$j];\n            }\n            $j++;\n        }\n    }\n    while ($i < count($arr1)) {\n        $count++;\n        if ($count == $k) {\n            return $arr1[$i];\n        }\n        $i++;\n    }\n    while ($j < count($arr2)) {\n        $count++;\n        if ($count == $k) {\n            return $arr2[$j];\n        }\n        $j++;\n    }\n}\n\n$arr1 = [1, 3, 5, 7, 9];\n$arr2 = [2, 4, 6, 8, 10];\n$k = 5;\necho find_kth($arr1, $arr2, $k);\nfunction candidate(...$args) {\n    return find_kth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 3, 6, 7, 9), array(1, 4, 8, 10), 5) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 112, 256, 349, 770), array(72, 86, 113, 119, 265, 445, 892), 7) !== 256) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 4, 7, 8, 10), array(2, 5, 9, 11), 6) !== 8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510546,
      "stdout": "5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find kth element from the given two sorted arrays.\nfunction find_kth($arr1, $arr2, $k) {\n    $i = 0;\n    $j = 0;\n    $count = 0;\n    while ($i < count($arr1) && $j < count($arr2)) {\n        if ($arr1[$i] < $arr2[$j]) {\n            $count++;\n            if ($count == $k) {\n                return $arr1[$i];\n            }\n            $i++;\n        } else {\n            $count++;\n            if ($count == $k) {\n                return $arr2[$j];\n            }\n            $j++;\n        }\n    }\n    while ($i < count($arr1)) {\n        $count++;\n        if ($count == $k) {\n            return $arr1[$i];\n        }\n        $i++;\n    }\n    while ($j < count($arr2)) {\n        $count++;\n        if ($count == $k) {\n            return $arr2[$j];\n        }\n        $j++;\n    }\n}\n\n$arr1 = [1, 3, 5, 7, 9];\n$arr2 = [2, 4, 6, 8, 10];\n$k = 5;\necho find_kth($arr1, $arr2, $k);\nfunction candidate(...$args) {\n    return find_kth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 3, 6, 7, 9), array(1, 4, 8, 10), 5) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 112, 256, 349, 770), array(72, 86, 113, 119, 265, 445, 892), 7) !== 256) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 4, 7, 8, 10), array(2, 5, 9, 11), 6) !== 8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510546,
      "stdout": "5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find kth element from the given two sorted arrays.\nfunction find_kth($arr1, $arr2, $k) {\n    $n = count($arr1);\n    $m = count($arr2);\n    $i = 0;\n    $j = 0;\n    while ($i < $n && $j < $m) {\n        if ($arr1[$i] < $arr2[$j]) {\n            if ($k == 1) {\n                return $arr1[$i];\n            }\n            $i++;\n            $k--;\n        } else {\n            if ($k == 1) {\n                return $arr2[$j];\n            }\n            $j++;\n            $k--;\n        }\n    }\n    while ($i < $n) {\n        if ($k == 1) {\n            return $arr1[$i];\n        }\n        $i++;\n        $k--;\n    }\n    while ($j < $m) {\n        if ($k == 1) {\n            return $arr2[$j];\n        }\n        $j++;\n        $k--;\n    }\n}\n\n$arr1 = [1, 3, 5, 7, 9];\n$arr2 = [2, 4, 6, 8, 10];\n\necho find_kth($arr1, $arr2, 5);\nfunction candidate(...$args) {\n    return find_kth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 3, 6, 7, 9), array(1, 4, 8, 10), 5) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 112, 256, 349, 770), array(72, 86, 113, 119, 265, 445, 892), 7) !== 256) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 4, 7, 8, 10), array(2, 5, 9, 11), 6) !== 8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123418,
      "stdout": "5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find kth element from the given two sorted arrays.\nfunction find_kth($arr1, $arr2, $k) {\n    $i = 0;\n    $j = 0;\n    $count = 0;\n    while ($i < count($arr1) && $j < count($arr2)) {\n        if ($arr1[$i] < $arr2[$j]) {\n            $count++;\n            if ($count == $k) {\n                return $arr1[$i];\n            }\n            $i++;\n        } else {\n            $count++;\n            if ($count == $k) {\n                return $arr2[$j];\n            }\n            $j++;\n        }\n    }\n    while ($i < count($arr1)) {\n        $count++;\n        if ($count == $k) {\n            return $arr1[$i];\n        }\n        $i++;\n    }\n    while ($j < count($arr2)) {\n        $count++;\n        if ($count == $k) {\n            return $arr2[$j];\n        }\n        $j++;\n    }\n}\n\n$arr1 = [1, 3, 5, 7, 9];\n$arr2 = [2, 4, 6, 8, 10];\n$k = 5;\necho find_kth($arr1, $arr2, $k);\nfunction candidate(...$args) {\n    return find_kth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 3, 6, 7, 9), array(1, 4, 8, 10), 5) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 112, 256, 349, 770), array(72, 86, 113, 119, 265, 445, 892), 7) !== 256) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 4, 7, 8, 10), array(2, 5, 9, 11), 6) !== 8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510546,
      "stdout": "5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find kth element from the given two sorted arrays.\nfunction find_kth($arr1, $arr2, $k) {\n    $i = 0;\n    $j = 0;\n    $count = 0;\n    while ($i < count($arr1) && $j < count($arr2)) {\n        if ($arr1[$i] < $arr2[$j]) {\n            $count++;\n            if ($count == $k) {\n                return $arr1[$i];\n            }\n            $i++;\n        } else {\n            $count++;\n            if ($count == $k) {\n                return $arr2[$j];\n            }\n            $j++;\n        }\n    }\n    if ($i < count($arr1)) {\n        return $arr1[$i + $k - $count - 1];\n    }\n    if ($j < count($arr2)) {\n        return $arr2[$j + $k - $count - 1];\n    }\n}\n\n$arr1 = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n$arr2 = [2, 3, 4, 5, 6, 7, 8, 9, 10];\n$k = 9;\necho find_kth($arr1, $arr2, $k);\nfunction candidate(...$args) {\n    return find_kth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 3, 6, 7, 9), array(1, 4, 8, 10), 5) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 112, 256, 349, 770), array(72, 86, 113, 119, 265, 445, 892), 7) !== 256) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 4, 7, 8, 10), array(2, 5, 9, 11), 6) !== 8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123418,
      "stdout": "5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find kth element from the given two sorted arrays.\nfunction find_kth($arr1, $arr2, $k) {\n    $i = 0;\n    $j = 0;\n    $count = 0;\n    while ($i < count($arr1) && $j < count($arr2)) {\n        if ($arr1[$i] < $arr2[$j]) {\n            $count++;\n            if ($count == $k) {\n                return $arr1[$i];\n            }\n            $i++;\n        } else {\n            $count++;\n            if ($count == $k) {\n                return $arr2[$j];\n            }\n            $j++;\n        }\n    }\n    if ($i < count($arr1)) {\n        return $arr1[$i + $k - $count - 1];\n    }\n    if ($j < count($arr2)) {\n        return $arr2[$j + $k - $count - 1];\n    }\n}\n\n$arr1 = [1, 3, 5, 7, 9];\n$arr2 = [2, 4, 6, 8, 10];\n$k = 5;\necho find_kth($arr1, $arr2, $k);\nfunction candidate(...$args) {\n    return find_kth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 3, 6, 7, 9), array(1, 4, 8, 10), 5) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 112, 256, 349, 770), array(72, 86, 113, 119, 265, 445, 892), 7) !== 256) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 4, 7, 8, 10), array(2, 5, 9, 11), 6) !== 8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123418,
      "stdout": "5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find kth element from the given two sorted arrays.\nfunction find_kth($arr1, $arr2, $k) {\n    $i = 0;\n    $j = 0;\n    $count = 0;\n    $result = 0;\n    while ($i < count($arr1) && $j < count($arr2)) {\n        if ($arr1[$i] < $arr2[$j]) {\n            $result = $arr1[$i];\n            $i++;\n        } else {\n            $result = $arr2[$j];\n            $j++;\n        }\n        $count++;\n        if ($count == $k) {\n            break;\n        }\n    }\n    if ($count == $k) {\n        return $result;\n    }\n    if ($i == count($arr1)) {\n        while ($j < count($arr2)) {\n            $result = $arr2[$j];\n            $j++;\n            $count++;\n            if ($count == $k) {\n                break;\n            }\n        }\n    }\n    if ($j == count($arr2)) {\n        while ($i < count($arr1)) {\n            $result = $arr1[$i];\n            $i++;\n            $count++;\n            if ($count == $k) {\n                break;\n            }\n        }\n    }\n    return $result;\n}\n\n$arr1 = array(1, 3, 5, 7, 9);\n$arr2 = array(2, 4, 6, 8, 10);\n$k = 6;\necho find_kth($arr1, $arr2, $k);\nfunction candidate(...$args) {\n    return find_kth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 3, 6, 7, 9), array(1, 4, 8, 10), 5) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 112, 256, 349, 770), array(72, 86, 113, 119, 265, 445, 892), 7) !== 256) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 4, 7, 8, 10), array(2, 5, 9, 11), 6) !== 8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123418,
      "stdout": "6",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find kth element from the given two sorted arrays.\nfunction find_kth($arr1, $arr2, $k) {\n    $i = 0;\n    $j = 0;\n    $count = 0;\n    while ($i < count($arr1) && $j < count($arr2)) {\n        if ($arr1[$i] < $arr2[$j]) {\n            $count++;\n            if ($count == $k) {\n                return $arr1[$i];\n            }\n            $i++;\n        } else {\n            $count++;\n            if ($count == $k) {\n                return $arr2[$j];\n            }\n            $j++;\n        }\n    }\n    while ($i < count($arr1)) {\n        $count++;\n        if ($count == $k) {\n            return $arr1[$i];\n        }\n        $i++;\n    }\n    while ($j < count($arr2)) {\n        $count++;\n        if ($count == $k) {\n            return $arr2[$j];\n        }\n        $j++;\n    }\n}\n\n$arr1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$arr2 = [11, 12, 13, 14, 15, 16, 17, 18, 19, 20];\necho find_kth($arr1, $arr2, 5);\nfunction candidate(...$args) {\n    return find_kth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 3, 6, 7, 9), array(1, 4, 8, 10), 5) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 112, 256, 349, 770), array(72, 86, 113, 119, 265, 445, 892), 7) !== 256) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 4, 7, 8, 10), array(2, 5, 9, 11), 6) !== 8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123418,
      "stdout": "5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find kth element from the given two sorted arrays.\nfunction find_kth($arr1, $arr2, $k) {\n    $len1 = count($arr1);\n    $len2 = count($arr2);\n    if ($len1 == 0) {\n        return $arr2[$k - 1];\n    }\n    if ($len2 == 0) {\n        return $arr1[$k - 1];\n    }\n    if ($k == 1) {\n        return min($arr1[0], $arr2[0]);\n    }\n    $mid1 = min($len1, $k / 2);\n    $mid2 = min($len2, $k / 2);\n    if ($arr1[$mid1 - 1] < $arr2[$mid2 - 1]) {\n        return find_kth(array_slice($arr1, $mid1), $arr2, $k - $mid1);\n    } else {\n        return find_kth($arr1, array_slice($arr2, $mid2), $k - $mid2);\n    }\n}\n\n$arr1 = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n$arr2 = [10, 11, 12, 13, 14, 15, 16, 17, 18];\n$k = 9;\necho find_kth($arr1, $arr2, $k);\nfunction candidate(...$args) {\n    return find_kth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 3, 6, 7, 9), array(1, 4, 8, 10), 5) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 112, 256, 349, 770), array(72, 86, 113, 119, 265, 445, 892), 7) !== 256) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 4, 7, 8, 10), array(2, 5, 9, 11), 6) !== 8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123433,
      "stdout": "\nDeprecated: Implicit conversion from float 3.5 to int loses precision in /tmp/tmp35nis8n2.php on line 17\n\nDeprecated: Implicit conversion from float 3.5 to int loses precision in /tmp/tmp35nis8n2.php on line 17\n\nDeprecated: Implicit conversion from float 4.5 to int loses precision in /tmp/tmp35nis8n2.php on line 18\n\nDeprecated: Implicit conversion from float 1.25 to int loses precision in /tmp/tmp35nis8n2.php on line 17\n\nDeprecated: Implicit conversion from float 1.25 to int loses precision in /tmp/tmp35nis8n2.php on line 17\n\nDeprecated: Implicit conversion from float 2.25 to int loses precision in /tmp/tmp35nis8n2.php on line 18\n\nDeprecated: Implicit conversion from float 0.125 to int loses precision in /tmp/tmp35nis8n2.php on line 17\n\nDeprecated: Implicit conversion from float 0.125 to int loses precision in /tmp/tmp35nis8n2.php on line 17\n\nDeprecated: Implicit conversion from float 1.125 to int loses precision in /tmp/tmp35nis8n2.php on line 18\n\nDeprecated: Implicit conversion from float -0.4375 to int loses precision in /tmp/tmp35nis8n2.php on line 17\n\nDeprecated: Implicit conversion from float -0.4375 to int loses precision in /tmp/tmp35nis8n2.php on line 17\n\nDeprecated: Implicit conversion from float 0.5625 to int loses precision in /tmp/tmp35nis8n2.php on line 18\n\nDeprecated: Implicit conversion from float -0.71875 to int loses precision in /tmp/tmp35nis8n2.php on line 17\n\nDeprecated: Implicit conversion from float -0.71875 to int loses precision in /tmp/tmp35nis8n2.php on line 17\n\nDeprecated: Implicit conversion from float 0.28125 to int loses precision in /tmp/tmp35nis8n2.php on line 18\n\nDeprecated: Implicit conversion from float -0.859375 to int loses precision in /tmp/tmp35nis8n2.php on line 17\n\nDeprecated: Implicit conversion from float -0.859375 to int loses precision in /tmp/tmp35nis8n2.php on line 17\n\nDeprecated: Implicit conversion from float 0.140625 to int loses precision in /tmp/tmp35nis8n2.php on line 18\n\nDeprecated: Implicit conversion from float -0.9296875 to int loses precision in /tmp/tmp",
      "stderr": "",
      "exit_code": -1,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find kth element from the given two sorted arrays.\nfunction find_kth($arr1, $arr2, $k) {\n\t$i = 0;\n\t$j = 0;\n\twhile ($i < count($arr1) && $j < count($arr2)) {\n\t\tif ($arr1[$i] < $arr2[$j]) {\n\t\t\tif ($k == 1) {\n\t\t\t\treturn $arr1[$i];\n\t\t\t}\n\t\t\t$i++;\n\t\t} else {\n\t\t\tif ($k == 1) {\n\t\t\t\treturn $arr2[$j];\n\t\t\t}\n\t\t\t$j++;\n\t\t}\n\t\t$k--;\n\t}\n\tif ($i < count($arr1)) {\n\t\treturn $arr1[$i + $k - 1];\n\t}\n\treturn $arr2[$j + $k - 1];\n}\n\n$arr1 = [1, 3, 5, 7, 9];\n$arr2 = [2, 4, 6, 8, 10];\n\necho find_kth($arr1, $arr2, 3);\nfunction candidate(...$args) {\n    return find_kth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 3, 6, 7, 9), array(1, 4, 8, 10), 5) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 112, 256, 349, 770), array(72, 86, 113, 119, 265, 445, 892), 7) !== 256) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 4, 7, 8, 10), array(2, 5, 9, 11), 6) !== 8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123418,
      "stdout": "3",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find kth element from the given two sorted arrays.\nfunction find_kth($arr1, $arr2, $k) {\n    $i = 0;\n    $j = 0;\n    $count = 0;\n    while ($i < count($arr1) && $j < count($arr2)) {\n        if ($arr1[$i] < $arr2[$j]) {\n            $count++;\n            if ($count == $k) {\n                return $arr1[$i];\n            }\n            $i++;\n        } else {\n            $count++;\n            if ($count == $k) {\n                return $arr2[$j];\n            }\n            $j++;\n        }\n    }\n    while ($i < count($arr1)) {\n        $count++;\n        if ($count == $k) {\n            return $arr1[$i];\n        }\n        $i++;\n    }\n    while ($j < count($arr2)) {\n        $count++;\n        if ($count == $k) {\n            return $arr2[$j];\n        }\n        $j++;\n    }\n}\n\n$arr1 = [1, 3, 5, 7, 9];\n$arr2 = [2, 4, 6, 8, 10];\n$k = 6;\necho find_kth($arr1, $arr2, $k);\nfunction candidate(...$args) {\n    return find_kth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 3, 6, 7, 9), array(1, 4, 8, 10), 5) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 112, 256, 349, 770), array(72, 86, 113, 119, 265, 445, 892), 7) !== 256) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 4, 7, 8, 10), array(2, 5, 9, 11), 6) !== 8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123418,
      "stdout": "6",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find kth element from the given two sorted arrays.\nfunction find_kth($arr1, $arr2, $k) {\n    $i = 0;\n    $j = 0;\n    $count = 0;\n    while($i < count($arr1) && $j < count($arr2)) {\n        if($arr1[$i] < $arr2[$j]) {\n            $count++;\n            if($count == $k) {\n                return $arr1[$i];\n            }\n            $i++;\n        } else {\n            $count++;\n            if($count == $k) {\n                return $arr2[$j];\n            }\n            $j++;\n        }\n    }\n    while($i < count($arr1)) {\n        $count++;\n        if($count == $k) {\n            return $arr1[$i];\n        }\n        $i++;\n    }\n    while($j < count($arr2)) {\n        $count++;\n        if($count == $k) {\n            return $arr2[$j];\n        }\n        $j++;\n    }\n}\n\n$arr1 = [1,3,5,7,9];\n$arr2 = [2,4,6,8,10];\n$k = 5;\necho find_kth($arr1, $arr2, $k);\nfunction candidate(...$args) {\n    return find_kth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 3, 6, 7, 9), array(1, 4, 8, 10), 5) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 112, 256, 349, 770), array(72, 86, 113, 119, 265, 445, 892), 7) !== 256) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 4, 7, 8, 10), array(2, 5, 9, 11), 6) !== 8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123418,
      "stdout": "5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find kth element from the given two sorted arrays.\nfunction find_kth($arr1, $arr2, $k) {\n\t$len1 = count($arr1);\n\t$len2 = count($arr2);\n\tif ($len1 == 0) {\n\t\treturn $arr2[$k - 1];\n\t}\n\tif ($len2 == 0) {\n\t\treturn $arr1[$k - 1];\n\t}\n\tif ($k == 1) {\n\t\treturn min($arr1[0], $arr2[0]);\n\t}\n\t$mid1 = min($len1, $k / 2);\n\t$mid2 = min($len2, $k / 2);\n\tif ($arr1[$mid1 - 1] < $arr2[$mid2 - 1]) {\n\t\treturn find_kth(array_slice($arr1, $mid1), $arr2, $k - $mid1);\n\t} else {\n\t\treturn find_kth($arr1, array_slice($arr2, $mid2), $k - $mid2);\n\t}\n}\n\n$arr1 = array(1, 3, 5, 7, 9);\n$arr2 = array(2, 4, 6, 8, 10);\necho find_kth($arr1, $arr2, 5);\necho \"\\n\";\n\nfunction candidate(...$args) {\n    return find_kth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 3, 6, 7, 9), array(1, 4, 8, 10), 5) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 112, 256, 349, 770), array(72, 86, 113, 119, 265, 445, 892), 7) !== 256) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 4, 7, 8, 10), array(2, 5, 9, 11), 6) !== 8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123433,
      "stdout": "\nDeprecated: Implicit conversion from float 1.5 to int loses precision in /tmp/tmp7_v_za40.php on line 17\n\nDeprecated: Implicit conversion from float 1.5 to int loses precision in /tmp/tmp7_v_za40.php on line 17\n\nDeprecated: Implicit conversion from float 2.5 to int loses precision in /tmp/tmp7_v_za40.php on line 18\n\nDeprecated: Implicit conversion from float 0.25 to int loses precision in /tmp/tmp7_v_za40.php on line 17\n\nDeprecated: Implicit conversion from float 0.25 to int loses precision in /tmp/tmp7_v_za40.php on line 17\n\nDeprecated: Implicit conversion from float 1.25 to int loses precision in /tmp/tmp7_v_za40.php on line 20\n\nDeprecated: Implicit conversion from float -0.375 to int loses precision in /tmp/tmp7_v_za40.php on line 17\n\nDeprecated: Implicit conversion from float -0.375 to int loses precision in /tmp/tmp7_v_za40.php on line 17\n\nDeprecated: Implicit conversion from float 0.625 to int loses precision in /tmp/tmp7_v_za40.php on line 20\n\nDeprecated: Implicit conversion from float -0.6875 to int loses precision in /tmp/tmp7_v_za40.php on line 17\n\nDeprecated: Implicit conversion from float -0.6875 to int loses precision in /tmp/tmp7_v_za40.php on line 17\n\nDeprecated: Implicit conversion from float 0.3125 to int loses precision in /tmp/tmp7_v_za40.php on line 20\n\nDeprecated: Implicit conversion from float -0.84375 to int loses precision in /tmp/tmp7_v_za40.php on line 17\n\nDeprecated: Implicit conversion from float -0.84375 to int loses precision in /tmp/tmp7_v_za40.php on line 17\n\nDeprecated: Implicit conversion from float 0.15625 to int loses precision in /tmp/tmp7_v_za40.php on line 20\n\nDeprecated: Implicit conversion from float -0.921875 to int loses precision in /tmp/tmp7_v_za40.php on line 17\n\nDeprecated: Implicit conversion from float -0.921875 to int loses precision in /tmp/tmp7_v_za40.php on line 17\n\nDeprecated: Implicit conversion from float 0.078125 to int loses precision in /tmp/tmp7_v_za40.php on line 20\n\nDeprecated: Implicit conversion from float -0.9609375 to int loses precision in /tmp/t",
      "stderr": "",
      "exit_code": -1,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find kth element from the given two sorted arrays.\nfunction find_kth($arr1, $arr2, $k) {\n    $m = count($arr1);\n    $n = count($arr2);\n    if ($m > $n) {\n        return find_kth($arr2, $arr1, $k);\n    }\n    if ($m == 0) {\n        return $arr2[$k - 1];\n    }\n    if ($k == 1) {\n        return min($arr1[0], $arr2[0]);\n    }\n    $pa = min($k / 2, $m);\n    $pb = $k - $pa;\n    if ($arr1[$pa - 1] < $arr2[$pb - 1]) {\n        return find_kth(array_slice($arr1, $pa), $arr2, $k - $pa);\n    } elseif ($arr1[$pa - 1] > $arr2[$pb - 1]) {\n        return find_kth($arr1, array_slice($arr2, $pb), $k - $pb);\n    } else {\n        return $arr1[$pa - 1];\n    }\n}\n\n$arr1 = [1, 2, 3, 4, 5, 6, 7];\n$arr2 = [4, 5, 6, 7, 8, 9, 10];\necho find_kth($arr1, $arr2, 5);\nfunction candidate(...$args) {\n    return find_kth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 3, 6, 7, 9), array(1, 4, 8, 10), 5) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 112, 256, 349, 770), array(72, 86, 113, 119, 265, 445, 892), 7) !== 256) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 4, 7, 8, 10), array(2, 5, 9, 11), 6) !== 8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123418,
      "stdout": "\nDeprecated: Implicit conversion from float 1.5 to int loses precision in /tmp/tmp1puij1n5.php on line 17\n\nDeprecated: Implicit conversion from float 1.5 to int loses precision in /tmp/tmp1puij1n5.php on line 17\n\nDeprecated: Implicit conversion from float 2.5 to int loses precision in /tmp/tmp1puij1n5.php on line 18\n\nDeprecated: Implicit conversion from float 0.25 to int loses precision in /tmp/tmp1puij1n5.php on line 17\n\nDeprecated: Implicit conversion from float 0.25 to int loses precision in /tmp/tmp1puij1n5.php on line 17\n\nDeprecated: Implicit conversion from float 1.25 to int loses precision in /tmp/tmp1puij1n5.php on line 18\n\nDeprecated: Implicit conversion from float -0.375 to int loses precision in /tmp/tmp1puij1n5.php on line 17\n\nDeprecated: Implicit conversion from float -0.375 to int loses precision in /tmp/tmp1puij1n5.php on line 17\n\nDeprecated: Implicit conversion from float -0.375 to int loses precision in /tmp/tmp1puij1n5.php on line 19\n\nDeprecated: Implicit conversion from float -0.375 to int ",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find kth element from the given two sorted arrays.\nfunction find_kth($arr1, $arr2, $k) {\n    $i = 0;\n    $j = 0;\n    $count = 0;\n    while ($i < count($arr1) && $j < count($arr2)) {\n        if ($arr1[$i] < $arr2[$j]) {\n            $count++;\n            if ($count == $k) {\n                return $arr1[$i];\n            }\n            $i++;\n        } else {\n            $count++;\n            if ($count == $k) {\n                return $arr2[$j];\n            }\n            $j++;\n        }\n    }\n    while ($i < count($arr1)) {\n        $count++;\n        if ($count == $k) {\n            return $arr1[$i];\n        }\n        $i++;\n    }\n    while ($j < count($arr2)) {\n        $count++;\n        if ($count == $k) {\n            return $arr2[$j];\n        }\n        $j++;\n    }\n}\n\n$arr1 = [1, 3, 5, 7, 9];\n$arr2 = [2, 4, 6, 8, 10];\necho find_kth($arr1, $arr2, 7);\nfunction candidate(...$args) {\n    return find_kth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 3, 6, 7, 9), array(1, 4, 8, 10), 5) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 112, 256, 349, 770), array(72, 86, 113, 119, 265, 445, 892), 7) !== 256) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 4, 7, 8, 10), array(2, 5, 9, 11), 6) !== 8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510546,
      "stdout": "7",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find kth element from the given two sorted arrays.\nfunction find_kth($arr1, $arr2, $k) {\n    $i = 0;\n    $j = 0;\n    $count = 0;\n    while ($i < count($arr1) && $j < count($arr2)) {\n        if ($arr1[$i] < $arr2[$j]) {\n            $count++;\n            if ($count == $k) {\n                return $arr1[$i];\n            }\n            $i++;\n        } else {\n            $count++;\n            if ($count == $k) {\n                return $arr2[$j];\n            }\n            $j++;\n        }\n    }\n    while ($i < count($arr1)) {\n        $count++;\n        if ($count == $k) {\n            return $arr1[$i];\n        }\n        $i++;\n    }\n    while ($j < count($arr2)) {\n        $count++;\n        if ($count == $k) {\n            return $arr2[$j];\n        }\n        $j++;\n    }\n    return -1;\n}\n\n$arr1 = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$arr2 = array(11, 12, 13, 14, 15, 16, 17, 18, 19, 20);\necho find_kth($arr1, $arr2, 5);\nfunction candidate(...$args) {\n    return find_kth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 3, 6, 7, 9), array(1, 4, 8, 10), 5) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 112, 256, 349, 770), array(72, 86, 113, 119, 265, 445, 892), 7) !== 256) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 4, 7, 8, 10), array(2, 5, 9, 11), 6) !== 8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123418,
      "stdout": "5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find kth element from the given two sorted arrays.\nfunction find_kth($arr1, $arr2, $k) {\n    $i = 0;\n    $j = 0;\n    $count = 0;\n    while ($i < count($arr1) && $j < count($arr2)) {\n        if ($arr1[$i] < $arr2[$j]) {\n            $count++;\n            if ($count == $k) {\n                return $arr1[$i];\n            }\n            $i++;\n        } else {\n            $count++;\n            if ($count == $k) {\n                return $arr2[$j];\n            }\n            $j++;\n        }\n    }\n    while ($i < count($arr1)) {\n        $count++;\n        if ($count == $k) {\n            return $arr1[$i];\n        }\n        $i++;\n    }\n    while ($j < count($arr2)) {\n        $count++;\n        if ($count == $k) {\n            return $arr2[$j];\n        }\n        $j++;\n    }\n}\n\n$arr1 = [1, 3, 5, 7, 9];\n$arr2 = [2, 4, 6, 8, 10];\necho find_kth($arr1, $arr2, 5);\nfunction candidate(...$args) {\n    return find_kth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 3, 6, 7, 9), array(1, 4, 8, 10), 5) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 112, 256, 349, 770), array(72, 86, 113, 119, 265, 445, 892), 7) !== 256) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 4, 7, 8, 10), array(2, 5, 9, 11), 6) !== 8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510546,
      "stdout": "5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find kth element from the given two sorted arrays.\nfunction find_kth($arr1, $arr2, $k) {\n    $i = 0;\n    $j = 0;\n    $count = 0;\n    while ($i < count($arr1) && $j < count($arr2)) {\n        if ($arr1[$i] < $arr2[$j]) {\n            $count++;\n            if ($count == $k) {\n                return $arr1[$i];\n            }\n            $i++;\n        } else {\n            $count++;\n            if ($count == $k) {\n                return $arr2[$j];\n            }\n            $j++;\n        }\n    }\n    if ($i < count($arr1)) {\n        return $arr1[$i + $k - $count - 1];\n    } else {\n        return $arr2[$j + $k - $count - 1];\n    }\n}\n\n$arr1 = [1, 3, 5, 7, 9];\n$arr2 = [2, 4, 6, 8, 10];\necho find_kth($arr1, $arr2, 5);\nfunction candidate(...$args) {\n    return find_kth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 3, 6, 7, 9), array(1, 4, 8, 10), 5) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 112, 256, 349, 770), array(72, 86, 113, 119, 265, 445, 892), 7) !== 256) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 4, 7, 8, 10), array(2, 5, 9, 11), 6) !== 8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123418,
      "stdout": "5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find kth element from the given two sorted arrays.\nfunction find_kth($arr1, $arr2, $k) {\n    $i = 0;\n    $j = 0;\n    $count = 0;\n    while ($i < count($arr1) && $j < count($arr2)) {\n        if ($arr1[$i] < $arr2[$j]) {\n            $count++;\n            if ($count == $k) {\n                return $arr1[$i];\n            }\n            $i++;\n        } else {\n            $count++;\n            if ($count == $k) {\n                return $arr2[$j];\n            }\n            $j++;\n        }\n    }\n    while ($i < count($arr1)) {\n        $count++;\n        if ($count == $k) {\n            return $arr1[$i];\n        }\n        $i++;\n    }\n    while ($j < count($arr2)) {\n        $count++;\n        if ($count == $k) {\n            return $arr2[$j];\n        }\n        $j++;\n    }\n}\n\n$arr1 = [1, 3, 5, 7, 9];\n$arr2 = [2, 4, 6, 8, 10];\n$k = 5;\necho find_kth($arr1, $arr2, $k);\nfunction candidate(...$args) {\n    return find_kth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 3, 6, 7, 9), array(1, 4, 8, 10), 5) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 112, 256, 349, 770), array(72, 86, 113, 119, 265, 445, 892), 7) !== 256) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 4, 7, 8, 10), array(2, 5, 9, 11), 6) !== 8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510546,
      "stdout": "5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find kth element from the given two sorted arrays.\nfunction find_kth($arr1, $arr2, $k) {\n    $i = 0;\n    $j = 0;\n    $kth = 0;\n    while($i < count($arr1) && $j < count($arr2)) {\n        if($arr1[$i] < $arr2[$j]) {\n            $kth = $arr1[$i];\n            $i++;\n        } else {\n            $kth = $arr2[$j];\n            $j++;\n        }\n        $k--;\n        if($k == 0) {\n            return $kth;\n        }\n    }\n    while($i < count($arr1)) {\n        $kth = $arr1[$i];\n        $i++;\n        $k--;\n        if($k == 0) {\n            return $kth;\n        }\n    }\n    while($j < count($arr2)) {\n        $kth = $arr2[$j];\n        $j++;\n        $k--;\n        if($k == 0) {\n            return $kth;\n        }\n    }\n}\n\n$arr1 = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n$arr2 = [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20];\n$k = 5;\n\necho find_kth($arr1, $arr2, $k);\n\nfunction candidate(...$args) {\n    return find_kth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 3, 6, 7, 9), array(1, 4, 8, 10), 5) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 112, 256, 349, 770), array(72, 86, 113, 119, 265, 445, 892), 7) !== 256) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 4, 7, 8, 10), array(2, 5, 9, 11), 6) !== 8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123418,
      "stdout": "5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find kth element from the given two sorted arrays.\nfunction find_kth($arr1, $arr2, $k) {\n    $len1 = count($arr1);\n    $len2 = count($arr2);\n    if ($len1 == 0) {\n        return $arr2[$k - 1];\n    }\n    if ($len2 == 0) {\n        return $arr1[$k - 1];\n    }\n    if ($k == 1) {\n        return min($arr1[0], $arr2[0]);\n    }\n    $mid1 = $len1 < $k / 2 ? $len1 : $k / 2;\n    $mid2 = $len2 < $k / 2 ? $len2 : $k / 2;\n    if ($arr1[$mid1 - 1] < $arr2[$mid2 - 1]) {\n        return find_kth(array_slice($arr1, $mid1), $arr2, $k - $mid1);\n    } else {\n        return find_kth($arr1, array_slice($arr2, $mid2), $k - $mid2);\n    }\n}\n\n$arr1 = [1, 3, 5, 7, 9];\n$arr2 = [2, 4, 6, 8, 10];\n$k = 5;\necho find_kth($arr1, $arr2, $k);\nfunction candidate(...$args) {\n    return find_kth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 3, 6, 7, 9), array(1, 4, 8, 10), 5) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 112, 256, 349, 770), array(72, 86, 113, 119, 265, 445, 892), 7) !== 256) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 4, 7, 8, 10), array(2, 5, 9, 11), 6) !== 8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123433,
      "stdout": "\nDeprecated: Implicit conversion from float 1.5 to int loses precision in /tmp/tmpatrupdyy.php on line 17\n\nDeprecated: Implicit conversion from float 1.5 to int loses precision in /tmp/tmpatrupdyy.php on line 17\n\nDeprecated: Implicit conversion from float 2.5 to int loses precision in /tmp/tmpatrupdyy.php on line 18\n\nDeprecated: Implicit conversion from float 0.25 to int loses precision in /tmp/tmpatrupdyy.php on line 17\n\nDeprecated: Implicit conversion from float 0.25 to int loses precision in /tmp/tmpatrupdyy.php on line 17\n\nDeprecated: Implicit conversion from float 1.25 to int loses precision in /tmp/tmpatrupdyy.php on line 20\n\nDeprecated: Implicit conversion from float -0.375 to int loses precision in /tmp/tmpatrupdyy.php on line 17\n\nDeprecated: Implicit conversion from float -0.375 to int loses precision in /tmp/tmpatrupdyy.php on line 17\n\nDeprecated: Implicit conversion from float 0.625 to int loses precision in /tmp/tmpatrupdyy.php on line 20\n\nDeprecated: Implicit conversion from float -0.6875 to int loses precision in /tmp/tmpatrupdyy.php on line 17\n\nDeprecated: Implicit conversion from float -0.6875 to int loses precision in /tmp/tmpatrupdyy.php on line 17\n\nDeprecated: Implicit conversion from float 0.3125 to int loses precision in /tmp/tmpatrupdyy.php on line 20\n\nDeprecated: Implicit conversion from float -0.84375 to int loses precision in /tmp/tmpatrupdyy.php on line 17\n\nDeprecated: Implicit conversion from float -0.84375 to int loses precision in /tmp/tmpatrupdyy.php on line 17\n\nDeprecated: Implicit conversion from float 0.15625 to int loses precision in /tmp/tmpatrupdyy.php on line 20\n\nDeprecated: Implicit conversion from float -0.921875 to int loses precision in /tmp/tmpatrupdyy.php on line 17\n\nDeprecated: Implicit conversion from float -0.921875 to int loses precision in /tmp/tmpatrupdyy.php on line 17\n\nDeprecated: Implicit conversion from float 0.078125 to int loses precision in /tmp/tmpatrupdyy.php on line 20\n\nDeprecated: Implicit conversion from float -0.9609375 to int loses precision in /tmp/t",
      "stderr": "",
      "exit_code": -1,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find kth element from the given two sorted arrays.\nfunction find_kth($arr1, $arr2, $k) {\n    $i = 0;\n    $j = 0;\n    $count = 0;\n    while ($i < count($arr1) && $j < count($arr2)) {\n        if ($arr1[$i] < $arr2[$j]) {\n            $count++;\n            if ($count == $k) {\n                return $arr1[$i];\n            }\n            $i++;\n        } else {\n            $count++;\n            if ($count == $k) {\n                return $arr2[$j];\n            }\n            $j++;\n        }\n    }\n    while ($i < count($arr1)) {\n        $count++;\n        if ($count == $k) {\n            return $arr1[$i];\n        }\n        $i++;\n    }\n    while ($j < count($arr2)) {\n        $count++;\n        if ($count == $k) {\n            return $arr2[$j];\n        }\n        $j++;\n    }\n}\n\n$arr1 = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n$arr2 = [10, 11, 12, 13, 14, 15, 16, 17, 18];\n$k = 9;\necho find_kth($arr1, $arr2, $k);\nfunction candidate(...$args) {\n    return find_kth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 3, 6, 7, 9), array(1, 4, 8, 10), 5) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 112, 256, 349, 770), array(72, 86, 113, 119, 265, 445, 892), 7) !== 256) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 4, 7, 8, 10), array(2, 5, 9, 11), 6) !== 8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123418,
      "stdout": "9",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find kth element from the given two sorted arrays.\nfunction find_kth($arr1, $arr2, $k) {\n    $i = 0;\n    $j = 0;\n    $count = 0;\n    while ($i < count($arr1) && $j < count($arr2)) {\n        if ($arr1[$i] < $arr2[$j]) {\n            $count++;\n            if ($count == $k) {\n                return $arr1[$i];\n            }\n            $i++;\n        } else {\n            $count++;\n            if ($count == $k) {\n                return $arr2[$j];\n            }\n            $j++;\n        }\n    }\n    while ($i < count($arr1)) {\n        $count++;\n        if ($count == $k) {\n            return $arr1[$i];\n        }\n        $i++;\n    }\n    while ($j < count($arr2)) {\n        $count++;\n        if ($count == $k) {\n            return $arr2[$j];\n        }\n        $j++;\n    }\n}\n\n$arr1 = [1, 3, 5, 7, 9];\n$arr2 = [2, 4, 6, 8, 10];\n$k = 5;\necho find_kth($arr1, $arr2, $k);\nfunction candidate(...$args) {\n    return find_kth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 3, 6, 7, 9), array(1, 4, 8, 10), 5) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 112, 256, 349, 770), array(72, 86, 113, 119, 265, 445, 892), 7) !== 256) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 4, 7, 8, 10), array(2, 5, 9, 11), 6) !== 8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510546,
      "stdout": "5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find kth element from the given two sorted arrays.\nfunction find_kth($arr1, $arr2, $k) {\n    $i = 0;\n    $j = 0;\n    $count = 0;\n    while ($i < count($arr1) && $j < count($arr2)) {\n        if ($arr1[$i] < $arr2[$j]) {\n            $count++;\n            if ($count == $k) {\n                return $arr1[$i];\n            }\n            $i++;\n        } else {\n            $count++;\n            if ($count == $k) {\n                return $arr2[$j];\n            }\n            $j++;\n        }\n    }\n    if ($i < count($arr1)) {\n        return $arr1[$i + $k - $count - 1];\n    }\n    if ($j < count($arr2)) {\n        return $arr2[$j + $k - $count - 1];\n    }\n}\n\n$arr1 = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19];\n$arr2 = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20];\n$k = 5;\necho find_kth($arr1, $arr2, $k);\nfunction candidate(...$args) {\n    return find_kth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 3, 6, 7, 9), array(1, 4, 8, 10), 5) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 112, 256, 349, 770), array(72, 86, 113, 119, 265, 445, 892), 7) !== 256) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 4, 7, 8, 10), array(2, 5, 9, 11), 6) !== 8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123418,
      "stdout": "5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find kth element from the given two sorted arrays.\nfunction find_kth($arr1, $arr2, $k) {\n    $i = 0;\n    $j = 0;\n    $count = 0;\n    while ($i < count($arr1) && $j < count($arr2)) {\n        if ($arr1[$i] < $arr2[$j]) {\n            $count++;\n            if ($count == $k) {\n                return $arr1[$i];\n            }\n            $i++;\n        } else {\n            $count++;\n            if ($count == $k) {\n                return $arr2[$j];\n            }\n            $j++;\n        }\n    }\n    while ($i < count($arr1)) {\n        $count++;\n        if ($count == $k) {\n            return $arr1[$i];\n        }\n        $i++;\n    }\n    while ($j < count($arr2)) {\n        $count++;\n        if ($count == $k) {\n            return $arr2[$j];\n        }\n        $j++;\n    }\n}\n\n$arr1 = [1, 3, 5, 7, 9];\n$arr2 = [2, 4, 6, 8, 10];\n$k = 4;\necho find_kth($arr1, $arr2, $k);\nfunction candidate(...$args) {\n    return find_kth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 3, 6, 7, 9), array(1, 4, 8, 10), 5) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 112, 256, 349, 770), array(72, 86, 113, 119, 265, 445, 892), 7) !== 256) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 4, 7, 8, 10), array(2, 5, 9, 11), 6) !== 8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510546,
      "stdout": "4",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find kth element from the given two sorted arrays.\nfunction find_kth($arr1, $arr2, $k) {\n    $i = 0;\n    $j = 0;\n    $count = 0;\n    while ($i < count($arr1) && $j < count($arr2)) {\n        if ($arr1[$i] < $arr2[$j]) {\n            $count++;\n            if ($count == $k) {\n                return $arr1[$i];\n            }\n            $i++;\n        } else {\n            $count++;\n            if ($count == $k) {\n                return $arr2[$j];\n            }\n            $j++;\n        }\n    }\n    while ($i < count($arr1)) {\n        $count++;\n        if ($count == $k) {\n            return $arr1[$i];\n        }\n        $i++;\n    }\n    while ($j < count($arr2)) {\n        $count++;\n        if ($count == $k) {\n            return $arr2[$j];\n        }\n        $j++;\n    }\n}\n\n$arr1 = [2, 3, 6, 7, 9];\n$arr2 = [1, 4, 8, 10];\n$k = 5;\necho find_kth($arr1, $arr2, $k);\nfunction candidate(...$args) {\n    return find_kth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 3, 6, 7, 9), array(1, 4, 8, 10), 5) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 112, 256, 349, 770), array(72, 86, 113, 119, 265, 445, 892), 7) !== 256) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 4, 7, 8, 10), array(2, 5, 9, 11), 6) !== 8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123418,
      "stdout": "6",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find kth element from the given two sorted arrays.\nfunction find_kth($arr1, $arr2, $k) {\n    $i = 0;\n    $j = 0;\n    $count = 0;\n    while ($i < count($arr1) && $j < count($arr2)) {\n        if ($arr1[$i] < $arr2[$j]) {\n            $count++;\n            if ($count == $k) {\n                return $arr1[$i];\n            }\n            $i++;\n        } else {\n            $count++;\n            if ($count == $k) {\n                return $arr2[$j];\n            }\n            $j++;\n        }\n    }\n    while ($i < count($arr1)) {\n        $count++;\n        if ($count == $k) {\n            return $arr1[$i];\n        }\n        $i++;\n    }\n    while ($j < count($arr2)) {\n        $count++;\n        if ($count == $k) {\n            return $arr2[$j];\n        }\n        $j++;\n    }\n}\n\n$arr1 = [1, 3, 5, 7, 9];\n$arr2 = [2, 4, 6, 8, 10];\n$k = 9;\necho find_kth($arr1, $arr2, $k);\nfunction candidate(...$args) {\n    return find_kth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 3, 6, 7, 9), array(1, 4, 8, 10), 5) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 112, 256, 349, 770), array(72, 86, 113, 119, 265, 445, 892), 7) !== 256) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 4, 7, 8, 10), array(2, 5, 9, 11), 6) !== 8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123418,
      "stdout": "9",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find kth element from the given two sorted arrays.\nfunction find_kth($arr1, $arr2, $k) {\n    $i = 0;\n    $j = 0;\n    $count = 0;\n    $len1 = count($arr1);\n    $len2 = count($arr2);\n    while ($i < $len1 && $j < $len2) {\n        if ($arr1[$i] <= $arr2[$j]) {\n            $count++;\n            if ($count == $k) {\n                return $arr1[$i];\n            }\n            $i++;\n        } else {\n            $count++;\n            if ($count == $k) {\n                return $arr2[$j];\n            }\n            $j++;\n        }\n    }\n    while ($i < $len1) {\n        $count++;\n        if ($count == $k) {\n            return $arr1[$i];\n        }\n        $i++;\n    }\n    while ($j < $len2) {\n        $count++;\n        if ($count == $k) {\n            return $arr2[$j];\n        }\n        $j++;\n    }\n}\n\n$arr1 = [1, 3, 5, 7, 9];\n$arr2 = [2, 4, 6, 8, 10];\n$k = 5;\necho find_kth($arr1, $arr2, $k);\nfunction candidate(...$args) {\n    return find_kth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 3, 6, 7, 9), array(1, 4, 8, 10), 5) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 112, 256, 349, 770), array(72, 86, 113, 119, 265, 445, 892), 7) !== 256) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 4, 7, 8, 10), array(2, 5, 9, 11), 6) !== 8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123418,
      "stdout": "5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find kth element from the given two sorted arrays.\nfunction find_kth($arr1, $arr2, $k) {\n    $i = 0;\n    $j = 0;\n    $count = 0;\n    while ($i < count($arr1) && $j < count($arr2)) {\n        if ($arr1[$i] < $arr2[$j]) {\n            $count++;\n            if ($count == $k) {\n                return $arr1[$i];\n            }\n            $i++;\n        } else {\n            $count++;\n            if ($count == $k) {\n                return $arr2[$j];\n            }\n            $j++;\n        }\n    }\n    while ($i < count($arr1)) {\n        $count++;\n        if ($count == $k) {\n            return $arr1[$i];\n        }\n        $i++;\n    }\n    while ($j < count($arr2)) {\n        $count++;\n        if ($count == $k) {\n            return $arr2[$j];\n        }\n        $j++;\n    }\n}\n\n$arr1 = array(1, 3, 5, 7, 9);\n$arr2 = array(2, 4, 6, 8, 10);\n\necho find_kth($arr1, $arr2, 5);\nfunction candidate(...$args) {\n    return find_kth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 3, 6, 7, 9), array(1, 4, 8, 10), 5) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 112, 256, 349, 770), array(72, 86, 113, 119, 265, 445, 892), 7) !== 256) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 4, 7, 8, 10), array(2, 5, 9, 11), 6) !== 8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510546,
      "stdout": "5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find kth element from the given two sorted arrays.\nfunction find_kth($arr1, $arr2, $k) {\n    $i = 0;\n    $j = 0;\n    $count = 0;\n    $result = 0;\n    while ($i < count($arr1) && $j < count($arr2)) {\n        if ($arr1[$i] < $arr2[$j]) {\n            $result = $arr1[$i];\n            $i++;\n        } else {\n            $result = $arr2[$j];\n            $j++;\n        }\n        $count++;\n        if ($count == $k) {\n            break;\n        }\n    }\n    if ($i == count($arr1)) {\n        while ($j < count($arr2)) {\n            $result = $arr2[$j];\n            $j++;\n            $count++;\n            if ($count == $k) {\n                break;\n            }\n        }\n    }\n    if ($j == count($arr2)) {\n        while ($i < count($arr1)) {\n            $result = $arr1[$i];\n            $i++;\n            $count++;\n            if ($count == $k) {\n                break;\n            }\n        }\n    }\n    return $result;\n}\n\n$arr1 = [1, 3, 5, 7, 9];\n$arr2 = [2, 4, 6, 8, 10];\necho find_kth($arr1, $arr2, 4);\nfunction candidate(...$args) {\n    return find_kth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 3, 6, 7, 9), array(1, 4, 8, 10), 5) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 112, 256, 349, 770), array(72, 86, 113, 119, 265, 445, 892), 7) !== 256) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 4, 7, 8, 10), array(2, 5, 9, 11), 6) !== 8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123418,
      "stdout": "4",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find kth element from the given two sorted arrays.\nfunction find_kth($arr1, $arr2, $k) {\n    $i = 0;\n    $j = 0;\n    $count = 0;\n    while ($i < count($arr1) && $j < count($arr2)) {\n        if ($arr1[$i] < $arr2[$j]) {\n            $count++;\n            if ($count == $k) {\n                return $arr1[$i];\n            }\n            $i++;\n        } else {\n            $count++;\n            if ($count == $k) {\n                return $arr2[$j];\n            }\n            $j++;\n        }\n    }\n    while ($i < count($arr1)) {\n        $count++;\n        if ($count == $k) {\n            return $arr1[$i];\n        }\n        $i++;\n    }\n    while ($j < count($arr2)) {\n        $count++;\n        if ($count == $k) {\n            return $arr2[$j];\n        }\n        $j++;\n    }\n}\n\n$arr1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$arr2 = [11, 12, 13, 14, 15, 16, 17, 18, 19, 20];\n$k = 4;\necho find_kth($arr1, $arr2, $k);\nfunction candidate(...$args) {\n    return find_kth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 3, 6, 7, 9), array(1, 4, 8, 10), 5) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 112, 256, 349, 770), array(72, 86, 113, 119, 265, 445, 892), 7) !== 256) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 4, 7, 8, 10), array(2, 5, 9, 11), 6) !== 8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123418,
      "stdout": "4",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find kth element from the given two sorted arrays.\nfunction find_kth($arr1, $arr2, $k) {\n    $i = 0;\n    $j = 0;\n    $count = 0;\n    while ($i < count($arr1) && $j < count($arr2)) {\n        if ($arr1[$i] < $arr2[$j]) {\n            $count++;\n            if ($count == $k) {\n                return $arr1[$i];\n            }\n            $i++;\n        } else {\n            $count++;\n            if ($count == $k) {\n                return $arr2[$j];\n            }\n            $j++;\n        }\n    }\n    if ($i < count($arr1)) {\n        return $arr1[$i + $k - $count - 1];\n    }\n    if ($j < count($arr2)) {\n        return $arr2[$j + $k - $count - 1];\n    }\n}\n\n$arr1 = [1, 3, 5, 7, 9];\n$arr2 = [2, 4, 6, 8, 10];\n$k = 5;\necho find_kth($arr1, $arr2, $k);\nfunction candidate(...$args) {\n    return find_kth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 3, 6, 7, 9), array(1, 4, 8, 10), 5) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 112, 256, 349, 770), array(72, 86, 113, 119, 265, 445, 892), 7) !== 256) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 4, 7, 8, 10), array(2, 5, 9, 11), 6) !== 8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123418,
      "stdout": "5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find kth element from the given two sorted arrays.\nfunction find_kth($arr1, $arr2, $k) {\n    $i = 0;\n    $j = 0;\n    $count = 0;\n    while ($i < count($arr1) && $j < count($arr2)) {\n        if ($arr1[$i] < $arr2[$j]) {\n            $count++;\n            if ($count == $k) {\n                return $arr1[$i];\n            }\n            $i++;\n        } else {\n            $count++;\n            if ($count == $k) {\n                return $arr2[$j];\n            }\n            $j++;\n        }\n    }\n    while ($i < count($arr1)) {\n        $count++;\n        if ($count == $k) {\n            return $arr1[$i];\n        }\n        $i++;\n    }\n    while ($j < count($arr2)) {\n        $count++;\n        if ($count == $k) {\n            return $arr2[$j];\n        }\n        $j++;\n    }\n}\n\n$arr1 = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n$arr2 = [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20];\n$k = 10;\necho find_kth($arr1, $arr2, $k);\nfunction candidate(...$args) {\n    return find_kth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 3, 6, 7, 9), array(1, 4, 8, 10), 5) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 112, 256, 349, 770), array(72, 86, 113, 119, 265, 445, 892), 7) !== 256) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 4, 7, 8, 10), array(2, 5, 9, 11), 6) !== 8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123418,
      "stdout": "10",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find kth element from the given two sorted arrays.\nfunction find_kth($arr1, $arr2, $k) {\n    $i = 0;\n    $j = 0;\n    $k--;\n    while ($k > 0) {\n        if ($arr1[$i] < $arr2[$j]) {\n            $i++;\n        } else {\n            $j++;\n        }\n        $k--;\n    }\n    return $arr1[$i] < $arr2[$j] ? $arr1[$i] : $arr2[$j];\n}\n\n$arr1 = array(1, 3, 5, 7, 9);\n$arr2 = array(2, 4, 6, 8, 10);\n$k = 5;\necho find_kth($arr1, $arr2, $k);\nfunction candidate(...$args) {\n    return find_kth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 3, 6, 7, 9), array(1, 4, 8, 10), 5) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 112, 256, 349, 770), array(72, 86, 113, 119, 265, 445, 892), 7) !== 256) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 4, 7, 8, 10), array(2, 5, 9, 11), 6) !== 8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123418,
      "stdout": "5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find kth element from the given two sorted arrays.\nfunction find_kth($arr1, $arr2, $k) {\n    $len1 = count($arr1);\n    $len2 = count($arr2);\n\n    if ($len1 > $len2) {\n        return find_kth($arr2, $arr1, $k);\n    }\n\n    if ($len1 == 0) {\n        return $arr2[$k - 1];\n    }\n\n    if ($k == 1) {\n        return min($arr1[0], $arr2[0]);\n    }\n\n    $i = min(floor($k / 2), $len1);\n    $j = min(floor($k / 2), $len2);\n\n    if ($arr1[$i - 1] < $arr2[$j - 1]) {\n        return find_kth(array_slice($arr1, $i), $arr2, $k - $i);\n    } else {\n        return find_kth($arr1, array_slice($arr2, $j), $k - $j);\n    }\n}\n\n$arr1 = [1, 3, 5, 7, 9];\n$arr2 = [2, 4, 6, 8, 10];\n\necho find_kth($arr1, $arr2, 5);\nfunction candidate(...$args) {\n    return find_kth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 3, 6, 7, 9), array(1, 4, 8, 10), 5) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 112, 256, 349, 770), array(72, 86, 113, 119, 265, 445, 892), 7) !== 256) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 4, 7, 8, 10), array(2, 5, 9, 11), 6) !== 8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123418,
      "stdout": "5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find kth element from the given two sorted arrays.\nfunction find_kth($arr1, $arr2, $k) {\n\t$i = 0;\n\t$j = 0;\n\t$count = 0;\n\twhile ($i < count($arr1) && $j < count($arr2)) {\n\t\tif ($arr1[$i] < $arr2[$j]) {\n\t\t\t$count++;\n\t\t\tif ($count == $k) {\n\t\t\t\treturn $arr1[$i];\n\t\t\t}\n\t\t\t$i++;\n\t\t} else {\n\t\t\t$count++;\n\t\t\tif ($count == $k) {\n\t\t\t\treturn $arr2[$j];\n\t\t\t}\n\t\t\t$j++;\n\t\t}\n\t}\n\twhile ($i < count($arr1)) {\n\t\t$count++;\n\t\tif ($count == $k) {\n\t\t\treturn $arr1[$i];\n\t\t}\n\t\t$i++;\n\t}\n\twhile ($j < count($arr2)) {\n\t\t$count++;\n\t\tif ($count == $k) {\n\t\t\treturn $arr2[$j];\n\t\t}\n\t\t$j++;\n\t}\n}\n\n$arr1 = [1, 3, 5, 7, 9];\n$arr2 = [2, 4, 6, 8, 10];\n$k = 5;\necho find_kth($arr1, $arr2, $k);\nfunction candidate(...$args) {\n    return find_kth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 3, 6, 7, 9), array(1, 4, 8, 10), 5) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 112, 256, 349, 770), array(72, 86, 113, 119, 265, 445, 892), 7) !== 256) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 4, 7, 8, 10), array(2, 5, 9, 11), 6) !== 8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510546,
      "stdout": "5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find kth element from the given two sorted arrays.\nfunction find_kth($arr1, $arr2, $k) {\n    $i = 0;\n    $j = 0;\n    $count = 0;\n    $result = 0;\n    while ($i < count($arr1) && $j < count($arr2)) {\n        if ($arr1[$i] < $arr2[$j]) {\n            $result = $arr1[$i];\n            $i++;\n        } else {\n            $result = $arr2[$j];\n            $j++;\n        }\n        $count++;\n        if ($count == $k) {\n            break;\n        }\n    }\n    if ($i == count($arr1)) {\n        $result = $arr2[$j + $k - $count - 1];\n    }\n    if ($j == count($arr2)) {\n        $result = $arr1[$i + $k - $count - 1];\n    }\n    return $result;\n}\n\n$arr1 = array(2, 3, 6, 7, 9);\n$arr2 = array(1, 4, 8, 10);\n$k = 5;\necho find_kth($arr1, $arr2, $k);\nfunction candidate(...$args) {\n    return find_kth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 3, 6, 7, 9), array(1, 4, 8, 10), 5) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 112, 256, 349, 770), array(72, 86, 113, 119, 265, 445, 892), 7) !== 256) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 4, 7, 8, 10), array(2, 5, 9, 11), 6) !== 8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123418,
      "stdout": "6",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find kth element from the given two sorted arrays.\nfunction find_kth($arr1, $arr2, $k) {\n    $i = 0;\n    $j = 0;\n    while ($i < count($arr1) && $j < count($arr2)) {\n        if ($arr1[$i] < $arr2[$j]) {\n            $i++;\n        } else {\n            $j++;\n        }\n        if ($i + $j == $k) {\n            if ($arr1[$i] < $arr2[$j]) {\n                return $arr1[$i];\n            } else {\n                return $arr2[$j];\n            }\n        }\n    }\n    if ($i < count($arr1)) {\n        return $arr1[$i + $k - $j - 1];\n    }\n    if ($j < count($arr2)) {\n        return $arr2[$j + $k - $i - 1];\n    }\n}\n\n$arr1 = [1, 3, 5, 7, 9];\n$arr2 = [2, 4, 6, 8, 10];\n\necho find_kth($arr1, $arr2, 5);\nfunction candidate(...$args) {\n    return find_kth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 3, 6, 7, 9), array(1, 4, 8, 10), 5) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 112, 256, 349, 770), array(72, 86, 113, 119, 265, 445, 892), 7) !== 256) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 4, 7, 8, 10), array(2, 5, 9, 11), 6) !== 8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123418,
      "stdout": "6\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb6a_5zy0.php:37\nStack trace:\n#0 /tmp/tmpb6a_5zy0.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpb6a_5zy0.php on line 37\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find kth element from the given two sorted arrays.\nfunction find_kth($arr1, $arr2, $k) {\n    $i = 0;\n    $j = 0;\n    $len1 = count($arr1);\n    $len2 = count($arr2);\n    while ($i < $len1 && $j < $len2) {\n        if ($arr1[$i] < $arr2[$j]) {\n            $i++;\n        } else {\n            $j++;\n        }\n        if ($i + $j == $k) {\n            if ($arr1[$i] < $arr2[$j]) {\n                return $arr1[$i];\n            } else {\n                return $arr2[$j];\n            }\n        }\n    }\n    if ($i == $len1) {\n        return $arr2[$k - $i];\n    } else {\n        return $arr1[$k - $j];\n    }\n}\n\n$arr1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$arr2 = [11, 12, 13, 14, 15, 16, 17, 18, 19, 20];\n\necho find_kth($arr1, $arr2, 15);\nfunction candidate(...$args) {\n    return find_kth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 3, 6, 7, 9), array(1, 4, 8, 10), 5) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 112, 256, 349, 770), array(72, 86, 113, 119, 265, 445, 892), 7) !== 256) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 4, 7, 8, 10), array(2, 5, 9, 11), 6) !== 8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123418,
      "stdout": "16\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpo29qox_r.php:38\nStack trace:\n#0 /tmp/tmpo29qox_r.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpo29qox_r.php on line 38\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find kth element from the given two sorted arrays.\nfunction find_kth($arr1, $arr2, $k) {\n    $i = 0;\n    $j = 0;\n    $count = 0;\n    while ($i < count($arr1) && $j < count($arr2)) {\n        if ($arr1[$i] < $arr2[$j]) {\n            $count++;\n            if ($count == $k) {\n                return $arr1[$i];\n            }\n            $i++;\n        } else {\n            $count++;\n            if ($count == $k) {\n                return $arr2[$j];\n            }\n            $j++;\n        }\n    }\n    if ($i < count($arr1)) {\n        return $arr1[$i + $k - $count - 1];\n    }\n    if ($j < count($arr2)) {\n        return $arr2[$j + $k - $count - 1];\n    }\n}\n\n$arr1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$arr2 = [11, 12, 13, 14, 15, 16, 17, 18, 19, 20];\n$k = 10;\necho find_kth($arr1, $arr2, $k);\n\nfunction candidate(...$args) {\n    return find_kth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 3, 6, 7, 9), array(1, 4, 8, 10), 5) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 112, 256, 349, 770), array(72, 86, 113, 119, 265, 445, 892), 7) !== 256) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 4, 7, 8, 10), array(2, 5, 9, 11), 6) !== 8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123418,
      "stdout": "10",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find kth element from the given two sorted arrays.\nfunction find_kth($arr1, $arr2, $k) {\n    if (count($arr1) == 0) {\n        return $arr2[$k - 1];\n    }\n    if (count($arr2) == 0) {\n        return $arr1[$k - 1];\n    }\n    if ($k == 1) {\n        return min($arr1[0], $arr2[0]);\n    }\n    $mid1 = min(count($arr1), floor($k / 2));\n    $mid2 = min(count($arr2), floor($k / 2));\n    if ($arr1[$mid1 - 1] < $arr2[$mid2 - 1]) {\n        return find_kth(array_slice($arr1, $mid1), $arr2, $k - $mid1);\n    } else {\n        return find_kth($arr1, array_slice($arr2, $mid2), $k - $mid2);\n    }\n}\n\n$arr1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$arr2 = [11, 12, 13, 14, 15, 16, 17, 18, 19, 20];\n$k = 5;\necho find_kth($arr1, $arr2, $k);\nfunction candidate(...$args) {\n    return find_kth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 3, 6, 7, 9), array(1, 4, 8, 10), 5) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 112, 256, 349, 770), array(72, 86, 113, 119, 265, 445, 892), 7) !== 256) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 4, 7, 8, 10), array(2, 5, 9, 11), 6) !== 8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123418,
      "stdout": "5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find kth element from the given two sorted arrays.\nfunction find_kth($arr1, $arr2, $k) {\n    $i = 0;\n    $j = 0;\n    $count = 0;\n    while ($i < count($arr1) && $j < count($arr2)) {\n        if ($arr1[$i] < $arr2[$j]) {\n            $count++;\n            if ($count == $k) {\n                return $arr1[$i];\n            }\n            $i++;\n        } else {\n            $count++;\n            if ($count == $k) {\n                return $arr2[$j];\n            }\n            $j++;\n        }\n    }\n    if ($i == count($arr1)) {\n        while ($j < count($arr2)) {\n            $count++;\n            if ($count == $k) {\n                return $arr2[$j];\n            }\n            $j++;\n        }\n    } else {\n        while ($i < count($arr1)) {\n            $count++;\n            if ($count == $k) {\n                return $arr1[$i];\n            }\n            $i++;\n        }\n    }\n}\n\n$arr1 = [1, 3, 5, 7, 9];\n$arr2 = [2, 4, 6, 8, 10];\n$k = 5;\necho find_kth($arr1, $arr2, $k);\nfunction candidate(...$args) {\n    return find_kth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 3, 6, 7, 9), array(1, 4, 8, 10), 5) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 112, 256, 349, 770), array(72, 86, 113, 119, 265, 445, 892), 7) !== 256) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 4, 7, 8, 10), array(2, 5, 9, 11), 6) !== 8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123418,
      "stdout": "5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find kth element from the given two sorted arrays.\nfunction find_kth($arr1, $arr2, $k) {\n    $i = 0;\n    $j = 0;\n    $count = 0;\n    while ($i < count($arr1) && $j < count($arr2)) {\n        if ($arr1[$i] < $arr2[$j]) {\n            $count++;\n            if ($count == $k) {\n                return $arr1[$i];\n            }\n            $i++;\n        } else {\n            $count++;\n            if ($count == $k) {\n                return $arr2[$j];\n            }\n            $j++;\n        }\n    }\n    while ($i < count($arr1)) {\n        $count++;\n        if ($count == $k) {\n            return $arr1[$i];\n        }\n        $i++;\n    }\n    while ($j < count($arr2)) {\n        $count++;\n        if ($count == $k) {\n            return $arr2[$j];\n        }\n        $j++;\n    }\n}\n\n$arr1 = [1, 3, 5, 7, 9];\n$arr2 = [2, 4, 6, 8, 10];\necho find_kth($arr1, $arr2, 9);\nfunction candidate(...$args) {\n    return find_kth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 3, 6, 7, 9), array(1, 4, 8, 10), 5) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 112, 256, 349, 770), array(72, 86, 113, 119, 265, 445, 892), 7) !== 256) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 4, 7, 8, 10), array(2, 5, 9, 11), 6) !== 8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123418,
      "stdout": "9",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find kth element from the given two sorted arrays.\nfunction find_kth($arr1, $arr2, $k) {\n    $i = 0;\n    $j = 0;\n    $count = 0;\n    while ($i < count($arr1) && $j < count($arr2)) {\n        if ($arr1[$i] < $arr2[$j]) {\n            $count++;\n            if ($count == $k) {\n                return $arr1[$i];\n            }\n            $i++;\n        } else {\n            $count++;\n            if ($count == $k) {\n                return $arr2[$j];\n            }\n            $j++;\n        }\n    }\n    while ($i < count($arr1)) {\n        $count++;\n        if ($count == $k) {\n            return $arr1[$i];\n        }\n        $i++;\n    }\n    while ($j < count($arr2)) {\n        $count++;\n        if ($count == $k) {\n            return $arr2[$j];\n        }\n        $j++;\n    }\n}\n\n$arr1 = [1, 3, 5, 7, 9];\n$arr2 = [2, 4, 6, 8, 10];\n$k = 5;\necho find_kth($arr1, $arr2, $k);\nfunction candidate(...$args) {\n    return find_kth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 3, 6, 7, 9), array(1, 4, 8, 10), 5) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 112, 256, 349, 770), array(72, 86, 113, 119, 265, 445, 892), 7) !== 256) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 4, 7, 8, 10), array(2, 5, 9, 11), 6) !== 8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510546,
      "stdout": "5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find kth element from the given two sorted arrays.\nfunction find_kth($arr1, $arr2, $k) {\n    $i = 0;\n    $j = 0;\n    $count = 0;\n    $len1 = count($arr1);\n    $len2 = count($arr2);\n    while ($i < $len1 && $j < $len2) {\n        if ($arr1[$i] < $arr2[$j]) {\n            $count++;\n            if ($count == $k) {\n                return $arr1[$i];\n            }\n            $i++;\n        } else {\n            $count++;\n            if ($count == $k) {\n                return $arr2[$j];\n            }\n            $j++;\n        }\n    }\n    while ($i < $len1) {\n        $count++;\n        if ($count == $k) {\n            return $arr1[$i];\n        }\n        $i++;\n    }\n    while ($j < $len2) {\n        $count++;\n        if ($count == $k) {\n            return $arr2[$j];\n        }\n        $j++;\n    }\n}\n\n$arr1 = [1, 3, 5, 7, 9];\n$arr2 = [2, 4, 6, 8, 10];\n$k = 5;\n$result = find_kth($arr1, $arr2, $k);\necho $result;\nfunction candidate(...$args) {\n    return find_kth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 3, 6, 7, 9), array(1, 4, 8, 10), 5) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 112, 256, 349, 770), array(72, 86, 113, 119, 265, 445, 892), 7) !== 256) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 4, 7, 8, 10), array(2, 5, 9, 11), 6) !== 8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123418,
      "stdout": "5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find kth element from the given two sorted arrays.\nfunction find_kth($arr1, $arr2, $k) {\n    $i = 0;\n    $j = 0;\n    $count = 0;\n    $prev = 0;\n    while ($i < count($arr1) && $j < count($arr2)) {\n        if ($arr1[$i] < $arr2[$j]) {\n            $prev = $arr1[$i];\n            $i++;\n        } else {\n            $prev = $arr2[$j];\n            $j++;\n        }\n        $count++;\n        if ($count == $k) {\n            return $prev;\n        }\n    }\n    while ($i < count($arr1)) {\n        $prev = $arr1[$i];\n        $i++;\n        $count++;\n        if ($count == $k) {\n            return $prev;\n        }\n    }\n    while ($j < count($arr2)) {\n        $prev = $arr2[$j];\n        $j++;\n        $count++;\n        if ($count == $k) {\n            return $prev;\n        }\n    }\n}\n\n$arr1 = [1, 3, 5, 7, 9];\n$arr2 = [2, 4, 6, 8, 10];\necho find_kth($arr1, $arr2, 4);\nfunction candidate(...$args) {\n    return find_kth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 3, 6, 7, 9), array(1, 4, 8, 10), 5) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 112, 256, 349, 770), array(72, 86, 113, 119, 265, 445, 892), 7) !== 256) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 4, 7, 8, 10), array(2, 5, 9, 11), 6) !== 8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123418,
      "stdout": "4",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find kth element from the given two sorted arrays.\nfunction find_kth($arr1, $arr2, $k) {\n    $len1 = count($arr1);\n    $len2 = count($arr2);\n    if ($len1 == 0) {\n        return $arr2[$k - 1];\n    }\n    if ($len2 == 0) {\n        return $arr1[$k - 1];\n    }\n    if ($k == 1) {\n        return min($arr1[0], $arr2[0]);\n    }\n    $mid1 = min($len1, $k / 2);\n    $mid2 = min($len2, $k / 2);\n    if ($arr1[$mid1 - 1] < $arr2[$mid2 - 1]) {\n        $arr1 = array_slice($arr1, $mid1);\n        $k -= $mid1;\n    } else {\n        $arr2 = array_slice($arr2, $mid2);\n        $k -= $mid2;\n    }\n    return find_kth($arr1, $arr2, $k);\n}\n\n$arr1 = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n$arr2 = [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20];\n$k = 10;\necho find_kth($arr1, $arr2, $k);\nfunction candidate(...$args) {\n    return find_kth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 3, 6, 7, 9), array(1, 4, 8, 10), 5) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 112, 256, 349, 770), array(72, 86, 113, 119, 265, 445, 892), 7) !== 256) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 4, 7, 8, 10), array(2, 5, 9, 11), 6) !== 8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123433,
      "stdout": "\nDeprecated: Implicit conversion from float 1.5 to int loses precision in /tmp/tmpbx01b9b7.php on line 17\n\nDeprecated: Implicit conversion from float 1.5 to int loses precision in /tmp/tmpbx01b9b7.php on line 17\n\nDeprecated: Implicit conversion from float 2.5 to int loses precision in /tmp/tmpbx01b9b7.php on line 18\n\nDeprecated: Implicit conversion from float 0.25 to int loses precision in /tmp/tmpbx01b9b7.php on line 17\n\nDeprecated: Implicit conversion from float 0.25 to int loses precision in /tmp/tmpbx01b9b7.php on line 17\n\nDeprecated: Implicit conversion from float 1.25 to int loses precision in /tmp/tmpbx01b9b7.php on line 18\n\nDeprecated: Implicit conversion from float -0.375 to int loses precision in /tmp/tmpbx01b9b7.php on line 17\n\nDeprecated: Implicit conversion from float -0.375 to int loses precision in /tmp/tmpbx01b9b7.php on line 17\n\nDeprecated: Implicit conversion from float 0.625 to int loses precision in /tmp/tmpbx01b9b7.php on line 18\n\nDeprecated: Implicit conversion from float -0.6875 to int loses precision in /tmp/tmpbx01b9b7.php on line 17\n\nDeprecated: Implicit conversion from float -0.6875 to int loses precision in /tmp/tmpbx01b9b7.php on line 17\n\nDeprecated: Implicit conversion from float 0.3125 to int loses precision in /tmp/tmpbx01b9b7.php on line 18\n\nDeprecated: Implicit conversion from float -0.84375 to int loses precision in /tmp/tmpbx01b9b7.php on line 17\n\nDeprecated: Implicit conversion from float -0.84375 to int loses precision in /tmp/tmpbx01b9b7.php on line 17\n\nDeprecated: Implicit conversion from float 0.15625 to int loses precision in /tmp/tmpbx01b9b7.php on line 18\n\nDeprecated: Implicit conversion from float -0.921875 to int loses precision in /tmp/tmpbx01b9b7.php on line 17\n\nDeprecated: Implicit conversion from float -0.921875 to int loses precision in /tmp/tmpbx01b9b7.php on line 17\n\nDeprecated: Implicit conversion from float 0.078125 to int loses precision in /tmp/tmpbx01b9b7.php on line 18\n\nDeprecated: Implicit conversion from float -0.9609375 to int loses precision in /tmp/t",
      "stderr": "",
      "exit_code": -1,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find kth element from the given two sorted arrays.\nfunction find_kth($arr1, $arr2, $k) {\n    $i = 0;\n    $j = 0;\n    $kth = 0;\n    while ($i < count($arr1) && $j < count($arr2)) {\n        if ($arr1[$i] < $arr2[$j]) {\n            $kth = $arr1[$i];\n            $i++;\n        } else {\n            $kth = $arr2[$j];\n            $j++;\n        }\n        $k--;\n        if ($k == 0) {\n            break;\n        }\n    }\n    if ($k > 0) {\n        if ($i == count($arr1)) {\n            $kth = $arr2[$j + $k - 1];\n        } else {\n            $kth = $arr1[$i + $k - 1];\n        }\n    }\n    return $kth;\n}\n\n$arr1 = [1, 3, 5, 7, 9];\n$arr2 = [2, 4, 6, 8, 10];\n$k = 5;\necho find_kth($arr1, $arr2, $k);\nfunction candidate(...$args) {\n    return find_kth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 3, 6, 7, 9), array(1, 4, 8, 10), 5) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 112, 256, 349, 770), array(72, 86, 113, 119, 265, 445, 892), 7) !== 256) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 4, 7, 8, 10), array(2, 5, 9, 11), 6) !== 8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123418,
      "stdout": "5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find kth element from the given two sorted arrays.\nfunction find_kth($arr1, $arr2, $k) {\n    $i = 0;\n    $j = 0;\n    $count = 0;\n    while ($i < count($arr1) && $j < count($arr2)) {\n        if ($arr1[$i] < $arr2[$j]) {\n            $count++;\n            if ($count == $k) {\n                return $arr1[$i];\n            }\n            $i++;\n        } else {\n            $count++;\n            if ($count == $k) {\n                return $arr2[$j];\n            }\n            $j++;\n        }\n    }\n    while ($i < count($arr1)) {\n        $count++;\n        if ($count == $k) {\n            return $arr1[$i];\n        }\n        $i++;\n    }\n    while ($j < count($arr2)) {\n        $count++;\n        if ($count == $k) {\n            return $arr2[$j];\n        }\n        $j++;\n    }\n}\n\n$arr1 = [1, 3, 5, 7, 9];\n$arr2 = [2, 4, 6, 8, 10];\n$k = 6;\necho find_kth($arr1, $arr2, $k);\nfunction candidate(...$args) {\n    return find_kth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 3, 6, 7, 9), array(1, 4, 8, 10), 5) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 112, 256, 349, 770), array(72, 86, 113, 119, 265, 445, 892), 7) !== 256) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 4, 7, 8, 10), array(2, 5, 9, 11), 6) !== 8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123418,
      "stdout": "6",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find kth element from the given two sorted arrays.\nfunction find_kth($arr1, $arr2, $k) {\n    $i = 0;\n    $j = 0;\n    $count = 0;\n    while ($i < count($arr1) && $j < count($arr2)) {\n        if ($arr1[$i] < $arr2[$j]) {\n            $count++;\n            if ($count == $k) {\n                return $arr1[$i];\n            }\n            $i++;\n        } else {\n            $count++;\n            if ($count == $k) {\n                return $arr2[$j];\n            }\n            $j++;\n        }\n    }\n    while ($i < count($arr1)) {\n        $count++;\n        if ($count == $k) {\n            return $arr1[$i];\n        }\n        $i++;\n    }\n    while ($j < count($arr2)) {\n        $count++;\n        if ($count == $k) {\n            return $arr2[$j];\n        }\n        $j++;\n    }\n}\n\n$arr1 = [1, 3, 5, 7, 9];\n$arr2 = [2, 4, 6, 8, 10];\necho find_kth($arr1, $arr2, 5);\nfunction candidate(...$args) {\n    return find_kth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 3, 6, 7, 9), array(1, 4, 8, 10), 5) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 112, 256, 349, 770), array(72, 86, 113, 119, 265, 445, 892), 7) !== 256) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 4, 7, 8, 10), array(2, 5, 9, 11), 6) !== 8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510546,
      "stdout": "5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find kth element from the given two sorted arrays.\nfunction find_kth($arr1, $arr2, $k) {\n    $i = 0;\n    $j = 0;\n    $count = 0;\n    $result = 0;\n    while ($i < count($arr1) && $j < count($arr2)) {\n        if ($arr1[$i] < $arr2[$j]) {\n            $result = $arr1[$i];\n            $i++;\n        } else {\n            $result = $arr2[$j];\n            $j++;\n        }\n        $count++;\n        if ($count == $k) {\n            break;\n        }\n    }\n    while ($i < count($arr1)) {\n        $result = $arr1[$i];\n        $i++;\n        $count++;\n        if ($count == $k) {\n            break;\n        }\n    }\n    while ($j < count($arr2)) {\n        $result = $arr2[$j];\n        $j++;\n        $count++;\n        if ($count == $k) {\n            break;\n        }\n    }\n    return $result;\n}\n\n$arr1 = [1, 3, 5, 7, 9];\n$arr2 = [2, 4, 6, 8, 10];\n$k = 7;\necho find_kth($arr1, $arr2, $k);\nfunction candidate(...$args) {\n    return find_kth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 3, 6, 7, 9), array(1, 4, 8, 10), 5) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 112, 256, 349, 770), array(72, 86, 113, 119, 265, 445, 892), 7) !== 256) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 4, 7, 8, 10), array(2, 5, 9, 11), 6) !== 8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123418,
      "stdout": "10\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppnuvrxnp.php:49\nStack trace:\n#0 /tmp/tmppnuvrxnp.php(54): test()\n#1 {main}\n  thrown in /tmp/tmppnuvrxnp.php on line 49\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find kth element from the given two sorted arrays.\nfunction find_kth($arr1, $arr2, $k) {\n    $i = 0;\n    $j = 0;\n    $count = 0;\n    while ($i < count($arr1) && $j < count($arr2)) {\n        if ($arr1[$i] < $arr2[$j]) {\n            $count++;\n            if ($count == $k) {\n                return $arr1[$i];\n            }\n            $i++;\n        } else {\n            $count++;\n            if ($count == $k) {\n                return $arr2[$j];\n            }\n            $j++;\n        }\n    }\n    if ($i < count($arr1)) {\n        return $arr1[$i + $k - $count - 1];\n    }\n    if ($j < count($arr2)) {\n        return $arr2[$j + $k - $count - 1];\n    }\n}\n\n$arr1 = [1, 3, 5, 7, 9];\n$arr2 = [2, 4, 6, 8, 10];\n$k = 5;\necho find_kth($arr1, $arr2, $k);\nfunction candidate(...$args) {\n    return find_kth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 3, 6, 7, 9), array(1, 4, 8, 10), 5) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 112, 256, 349, 770), array(72, 86, 113, 119, 265, 445, 892), 7) !== 256) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 4, 7, 8, 10), array(2, 5, 9, 11), 6) !== 8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123418,
      "stdout": "5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find kth element from the given two sorted arrays.\nfunction find_kth($arr1, $arr2, $k) {\n    $i = 0;\n    $j = 0;\n    $count = 0;\n    while ($i < count($arr1) && $j < count($arr2)) {\n        if ($arr1[$i] < $arr2[$j]) {\n            $count++;\n            if ($count == $k) {\n                return $arr1[$i];\n            }\n            $i++;\n        } else {\n            $count++;\n            if ($count == $k) {\n                return $arr2[$j];\n            }\n            $j++;\n        }\n    }\n    if ($i < count($arr1)) {\n        return $arr1[$i + $k - $count - 1];\n    }\n    if ($j < count($arr2)) {\n        return $arr2[$j + $k - $count - 1];\n    }\n}\n\n$arr1 = [1, 2, 3, 4, 5];\n$arr2 = [6, 7, 8, 9, 10];\n$k = 5;\necho find_kth($arr1, $arr2, $k);\nfunction candidate(...$args) {\n    return find_kth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 3, 6, 7, 9), array(1, 4, 8, 10), 5) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 112, 256, 349, 770), array(72, 86, 113, 119, 265, 445, 892), 7) !== 256) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 4, 7, 8, 10), array(2, 5, 9, 11), 6) !== 8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123418,
      "stdout": "5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find kth element from the given two sorted arrays.\nfunction find_kth($arr1, $arr2, $k) {\n    $i = 0;\n    $j = 0;\n    $count = 0;\n    $result = 0;\n    while ($i < count($arr1) && $j < count($arr2)) {\n        if ($arr1[$i] < $arr2[$j]) {\n            $result = $arr1[$i];\n            $i++;\n        } else {\n            $result = $arr2[$j];\n            $j++;\n        }\n        $count++;\n        if ($count == $k) {\n            break;\n        }\n    }\n    while ($i < count($arr1)) {\n        $result = $arr1[$i];\n        $i++;\n        $count++;\n        if ($count == $k) {\n            break;\n        }\n    }\n    while ($j < count($arr2)) {\n        $result = $arr2[$j];\n        $j++;\n        $count++;\n        if ($count == $k) {\n            break;\n        }\n    }\n    return $result;\n}\n\n$arr1 = [1, 3, 5, 7, 9];\n$arr2 = [2, 4, 6, 8, 10];\n$k = 5;\necho find_kth($arr1, $arr2, $k);\nfunction candidate(...$args) {\n    return find_kth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 3, 6, 7, 9), array(1, 4, 8, 10), 5) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 112, 256, 349, 770), array(72, 86, 113, 119, 265, 445, 892), 7) !== 256) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 4, 7, 8, 10), array(2, 5, 9, 11), 6) !== 8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123418,
      "stdout": "10\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptuz21lo2.php:49\nStack trace:\n#0 /tmp/tmptuz21lo2.php(54): test()\n#1 {main}\n  thrown in /tmp/tmptuz21lo2.php on line 49\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find kth element from the given two sorted arrays.\nfunction find_kth($arr1, $arr2, $k) {\n    $i = 0;\n    $j = 0;\n    $count = 0;\n    while ($i < count($arr1) && $j < count($arr2)) {\n        if ($arr1[$i] < $arr2[$j]) {\n            $count++;\n            if ($count == $k) {\n                return $arr1[$i];\n            }\n            $i++;\n        } else {\n            $count++;\n            if ($count == $k) {\n                return $arr2[$j];\n            }\n            $j++;\n        }\n    }\n    while ($i < count($arr1)) {\n        $count++;\n        if ($count == $k) {\n            return $arr1[$i];\n        }\n        $i++;\n    }\n    while ($j < count($arr2)) {\n        $count++;\n        if ($count == $k) {\n            return $arr2[$j];\n        }\n        $j++;\n    }\n}\n\n$arr1 = [1, 3, 5, 7, 9];\n$arr2 = [2, 4, 6, 8, 10];\n\necho find_kth($arr1, $arr2, 5);\necho \"\\n\";\necho find_kth($arr1, $arr2, 6);\necho \"\\n\";\necho find_kth($arr1, $arr2, 7);\necho \"\\n\";\necho find_kth($arr1, $arr2, 8);\necho \"\\n\";\necho find_kth($arr1, $arr2, 9);\necho \"\\n\";\necho find_kth($arr1, $arr2, 10);\necho \"\\n\";\nfunction candidate(...$args) {\n    return find_kth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 3, 6, 7, 9), array(1, 4, 8, 10), 5) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 112, 256, 349, 770), array(72, 86, 113, 119, 265, 445, 892), 7) !== 256) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 4, 7, 8, 10), array(2, 5, 9, 11), 6) !== 8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123418,
      "stdout": "5\n6\n7\n8\n9\n10\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find kth element from the given two sorted arrays.\nfunction find_kth($arr1, $arr2, $k) {\n    $i = 0;\n    $j = 0;\n    $count = 0;\n    while ($i < count($arr1) && $j < count($arr2)) {\n        if ($arr1[$i] < $arr2[$j]) {\n            $count++;\n            if ($count == $k) {\n                return $arr1[$i];\n            }\n            $i++;\n        } else {\n            $count++;\n            if ($count == $k) {\n                return $arr2[$j];\n            }\n            $j++;\n        }\n    }\n    while ($i < count($arr1)) {\n        $count++;\n        if ($count == $k) {\n            return $arr1[$i];\n        }\n        $i++;\n    }\n    while ($j < count($arr2)) {\n        $count++;\n        if ($count == $k) {\n            return $arr2[$j];\n        }\n        $j++;\n    }\n}\n\n$arr1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$arr2 = [11, 12, 13, 14, 15, 16, 17, 18, 19, 20];\n$k = 5;\necho find_kth($arr1, $arr2, $k);\nfunction candidate(...$args) {\n    return find_kth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 3, 6, 7, 9), array(1, 4, 8, 10), 5) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 112, 256, 349, 770), array(72, 86, 113, 119, 265, 445, 892), 7) !== 256) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 4, 7, 8, 10), array(2, 5, 9, 11), 6) !== 8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123418,
      "stdout": "5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find kth element from the given two sorted arrays.\nfunction find_kth($arr1, $arr2, $k) {\n    $i = 0;\n    $j = 0;\n    $count = 0;\n    while ($i < count($arr1) && $j < count($arr2)) {\n        if ($arr1[$i] < $arr2[$j]) {\n            $count++;\n            if ($count == $k) {\n                return $arr1[$i];\n            }\n            $i++;\n        } else {\n            $count++;\n            if ($count == $k) {\n                return $arr2[$j];\n            }\n            $j++;\n        }\n    }\n    while ($i < count($arr1)) {\n        $count++;\n        if ($count == $k) {\n            return $arr1[$i];\n        }\n        $i++;\n    }\n    while ($j < count($arr2)) {\n        $count++;\n        if ($count == $k) {\n            return $arr2[$j];\n        }\n        $j++;\n    }\n}\n\n$arr1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$arr2 = [11, 12, 13, 14, 15, 16, 17, 18, 19, 20];\necho find_kth($arr1, $arr2, 11);\nfunction candidate(...$args) {\n    return find_kth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 3, 6, 7, 9), array(1, 4, 8, 10), 5) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 112, 256, 349, 770), array(72, 86, 113, 119, 265, 445, 892), 7) !== 256) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 4, 7, 8, 10), array(2, 5, 9, 11), 6) !== 8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123418,
      "stdout": "11",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find kth element from the given two sorted arrays.\nfunction find_kth($arr1, $arr2, $k) {\n    $i = 0;\n    $j = 0;\n    $count = 0;\n    $prev = 0;\n    while ($i < count($arr1) && $j < count($arr2)) {\n        if ($arr1[$i] < $arr2[$j]) {\n            $prev = $arr1[$i];\n            $i++;\n        } else {\n            $prev = $arr2[$j];\n            $j++;\n        }\n        $count++;\n        if ($count == $k) {\n            return $prev;\n        }\n    }\n    while ($i < count($arr1)) {\n        $prev = $arr1[$i];\n        $i++;\n        $count++;\n        if ($count == $k) {\n            return $prev;\n        }\n    }\n    while ($j < count($arr2)) {\n        $prev = $arr2[$j];\n        $j++;\n        $count++;\n        if ($count == $k) {\n            return $prev;\n        }\n    }\n}\n\n$arr1 = [1, 3, 5, 7, 9];\n$arr2 = [2, 4, 6, 8, 10];\n$k = 5;\necho find_kth($arr1, $arr2, $k);\nfunction candidate(...$args) {\n    return find_kth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 3, 6, 7, 9), array(1, 4, 8, 10), 5) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 112, 256, 349, 770), array(72, 86, 113, 119, 265, 445, 892), 7) !== 256) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 4, 7, 8, 10), array(2, 5, 9, 11), 6) !== 8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123418,
      "stdout": "5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find kth element from the given two sorted arrays.\nfunction find_kth($arr1, $arr2, $k) {\n    $i = 0;\n    $j = 0;\n    $kth = 0;\n    while ($i < count($arr1) && $j < count($arr2)) {\n        if ($arr1[$i] < $arr2[$j]) {\n            $kth = $arr1[$i];\n            $i++;\n        } else {\n            $kth = $arr2[$j];\n            $j++;\n        }\n        $k--;\n        if ($k == 0) {\n            return $kth;\n        }\n    }\n    while ($i < count($arr1)) {\n        $kth = $arr1[$i];\n        $i++;\n        $k--;\n        if ($k == 0) {\n            return $kth;\n        }\n    }\n    while ($j < count($arr2)) {\n        $kth = $arr2[$j];\n        $j++;\n        $k--;\n        if ($k == 0) {\n            return $kth;\n        }\n    }\n}\n\n$arr1 = [1, 3, 5, 7, 9];\n$arr2 = [2, 4, 6, 8, 10];\necho find_kth($arr1, $arr2, 5);\nfunction candidate(...$args) {\n    return find_kth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 3, 6, 7, 9), array(1, 4, 8, 10), 5) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 112, 256, 349, 770), array(72, 86, 113, 119, 265, 445, 892), 7) !== 256) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 4, 7, 8, 10), array(2, 5, 9, 11), 6) !== 8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123418,
      "stdout": "5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find kth element from the given two sorted arrays.\nfunction find_kth($arr1, $arr2, $k) {\n    if ($k > count($arr1) + count($arr2)) {\n        return null;\n    }\n    $i = 0;\n    $j = 0;\n    $count = 0;\n    while ($i < count($arr1) && $j < count($arr2)) {\n        if ($arr1[$i] < $arr2[$j]) {\n            $i++;\n        } else {\n            $j++;\n        }\n        $count++;\n        if ($count == $k) {\n            if ($arr1[$i] < $arr2[$j]) {\n                return $arr1[$i];\n            } else {\n                return $arr2[$j];\n            }\n        }\n    }\n    if ($i < count($arr1)) {\n        return $arr1[$k - count($arr2) - 1];\n    } else {\n        return $arr2[$k - count($arr1) - 1];\n    }\n}\n\n$arr1 = [1, 3, 5, 7, 9];\n$arr2 = [2, 4, 6, 8, 10];\necho find_kth($arr1, $arr2, 5);\nfunction candidate(...$args) {\n    return find_kth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 3, 6, 7, 9), array(1, 4, 8, 10), 5) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 112, 256, 349, 770), array(72, 86, 113, 119, 265, 445, 892), 7) !== 256) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 4, 7, 8, 10), array(2, 5, 9, 11), 6) !== 8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123418,
      "stdout": "6\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkkpqf8az.php:40\nStack trace:\n#0 /tmp/tmpkkpqf8az.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpkkpqf8az.php on line 40\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find kth element from the given two sorted arrays.\nfunction find_kth($arr1, $arr2, $k) {\n    $len1 = count($arr1);\n    $len2 = count($arr2);\n    if ($len1 > $len2) {\n        return find_kth($arr2, $arr1, $k);\n    }\n    if ($len1 == 0) {\n        return $arr2[$k - 1];\n    }\n    if ($k == 1) {\n        return min($arr1[0], $arr2[0]);\n    }\n    $i = min($len1, $k / 2);\n    $j = min($len2, $k / 2);\n    if ($arr1[$i - 1] > $arr2[$j - 1]) {\n        return find_kth($arr1, array_slice($arr2, $j), $k - $j);\n    } else {\n        return find_kth(array_slice($arr1, $i), $arr2, $k - $i);\n    }\n}\n\n$arr1 = [1, 3, 5, 7, 9];\n$arr2 = [2, 4, 6, 8, 10];\n$k = 5;\necho find_kth($arr1, $arr2, $k);\nfunction candidate(...$args) {\n    return find_kth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 3, 6, 7, 9), array(1, 4, 8, 10), 5) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 112, 256, 349, 770), array(72, 86, 113, 119, 265, 445, 892), 7) !== 256) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 4, 7, 8, 10), array(2, 5, 9, 11), 6) !== 8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123433,
      "stdout": "\nDeprecated: Implicit conversion from float 1.5 to int loses precision in /tmp/tmpodjnkd2d.php on line 17\n\nDeprecated: Implicit conversion from float 1.5 to int loses precision in /tmp/tmpodjnkd2d.php on line 17\n\nDeprecated: Implicit conversion from float 2.5 to int loses precision in /tmp/tmpodjnkd2d.php on line 20\n\nDeprecated: Implicit conversion from float 0.25 to int loses precision in /tmp/tmpodjnkd2d.php on line 17\n\nDeprecated: Implicit conversion from float 0.25 to int loses precision in /tmp/tmpodjnkd2d.php on line 17\n\nDeprecated: Implicit conversion from float 1.25 to int loses precision in /tmp/tmpodjnkd2d.php on line 18\n\nDeprecated: Implicit conversion from float -0.375 to int loses precision in /tmp/tmpodjnkd2d.php on line 17\n\nDeprecated: Implicit conversion from float -0.375 to int loses precision in /tmp/tmpodjnkd2d.php on line 17\n\nDeprecated: Implicit conversion from float 0.625 to int loses precision in /tmp/tmpodjnkd2d.php on line 18\n\nDeprecated: Implicit conversion from float -0.6875 to int loses precision in /tmp/tmpodjnkd2d.php on line 17\n\nDeprecated: Implicit conversion from float -0.6875 to int loses precision in /tmp/tmpodjnkd2d.php on line 17\n\nDeprecated: Implicit conversion from float 0.3125 to int loses precision in /tmp/tmpodjnkd2d.php on line 18\n\nDeprecated: Implicit conversion from float -0.84375 to int loses precision in /tmp/tmpodjnkd2d.php on line 17\n\nDeprecated: Implicit conversion from float -0.84375 to int loses precision in /tmp/tmpodjnkd2d.php on line 17\n\nDeprecated: Implicit conversion from float 0.15625 to int loses precision in /tmp/tmpodjnkd2d.php on line 18\n\nDeprecated: Implicit conversion from float -0.921875 to int loses precision in /tmp/tmpodjnkd2d.php on line 17\n\nDeprecated: Implicit conversion from float -0.921875 to int loses precision in /tmp/tmpodjnkd2d.php on line 17\n\nDeprecated: Implicit conversion from float 0.078125 to int loses precision in /tmp/tmpodjnkd2d.php on line 18\n\nDeprecated: Implicit conversion from float -0.9609375 to int loses precision in /tmp/t",
      "stderr": "",
      "exit_code": -1,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find kth element from the given two sorted arrays.\nfunction find_kth($arr1, $arr2, $k) {\n    $i = 0;\n    $j = 0;\n    $count = 0;\n    while ($i < count($arr1) && $j < count($arr2)) {\n        if ($arr1[$i] < $arr2[$j]) {\n            $count++;\n            if ($count == $k) {\n                return $arr1[$i];\n            }\n            $i++;\n        } else {\n            $count++;\n            if ($count == $k) {\n                return $arr2[$j];\n            }\n            $j++;\n        }\n    }\n    while ($i < count($arr1)) {\n        $count++;\n        if ($count == $k) {\n            return $arr1[$i];\n        }\n        $i++;\n    }\n    while ($j < count($arr2)) {\n        $count++;\n        if ($count == $k) {\n            return $arr2[$j];\n        }\n        $j++;\n    }\n}\n\n$arr1 = [1, 3, 5, 7, 9];\n$arr2 = [2, 4, 6, 8, 10];\necho find_kth($arr1, $arr2, 5);\nfunction candidate(...$args) {\n    return find_kth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 3, 6, 7, 9), array(1, 4, 8, 10), 5) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 112, 256, 349, 770), array(72, 86, 113, 119, 265, 445, 892), 7) !== 256) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 4, 7, 8, 10), array(2, 5, 9, 11), 6) !== 8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510546,
      "stdout": "5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find kth element from the given two sorted arrays.\nfunction find_kth($arr1, $arr2, $k) {\n    $i = 0;\n    $j = 0;\n    $count = 0;\n    $result = 0;\n    while ($count < $k) {\n        if ($arr1[$i] < $arr2[$j]) {\n            $result = $arr1[$i];\n            $i++;\n        } else {\n            $result = $arr2[$j];\n            $j++;\n        }\n        $count++;\n    }\n    return $result;\n}\n\n$arr1 = array(1, 3, 5, 7, 9);\n$arr2 = array(2, 4, 6, 8, 10);\n$k = 5;\necho find_kth($arr1, $arr2, $k);\nfunction candidate(...$args) {\n    return find_kth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 3, 6, 7, 9), array(1, 4, 8, 10), 5) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 112, 256, 349, 770), array(72, 86, 113, 119, 265, 445, 892), 7) !== 256) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 4, 7, 8, 10), array(2, 5, 9, 11), 6) !== 8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123418,
      "stdout": "5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find kth element from the given two sorted arrays.\nfunction find_kth($arr1, $arr2, $k) {\n    $i = 0;\n    $j = 0;\n    $count = 0;\n    while ($i < count($arr1) && $j < count($arr2)) {\n        if ($arr1[$i] < $arr2[$j]) {\n            $count++;\n            if ($count == $k) {\n                return $arr1[$i];\n            }\n            $i++;\n        } else {\n            $count++;\n            if ($count == $k) {\n                return $arr2[$j];\n            }\n            $j++;\n        }\n    }\n    while ($i < count($arr1)) {\n        $count++;\n        if ($count == $k) {\n            return $arr1[$i];\n        }\n        $i++;\n    }\n    while ($j < count($arr2)) {\n        $count++;\n        if ($count == $k) {\n            return $arr2[$j];\n        }\n        $j++;\n    }\n}\n\n$arr1 = [1, 3, 5, 7, 9];\n$arr2 = [2, 4, 6, 8, 10];\n$k = 5;\necho find_kth($arr1, $arr2, $k);\nfunction candidate(...$args) {\n    return find_kth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 3, 6, 7, 9), array(1, 4, 8, 10), 5) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 112, 256, 349, 770), array(72, 86, 113, 119, 265, 445, 892), 7) !== 256) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 4, 7, 8, 10), array(2, 5, 9, 11), 6) !== 8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510546,
      "stdout": "5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find kth element from the given two sorted arrays.\nfunction find_kth($arr1, $arr2, $k) {\n    $i = 0;\n    $j = 0;\n    $count = 0;\n    $result = 0;\n    while ($i < count($arr1) && $j < count($arr2)) {\n        if ($arr1[$i] < $arr2[$j]) {\n            $result = $arr1[$i];\n            $i++;\n        } else {\n            $result = $arr2[$j];\n            $j++;\n        }\n        $count++;\n        if ($count == $k) {\n            break;\n        }\n    }\n    if ($i < count($arr1)) {\n        while ($i < count($arr1)) {\n            $result = $arr1[$i];\n            $i++;\n            $count++;\n            if ($count == $k) {\n                break;\n            }\n        }\n    }\n    if ($j < count($arr2)) {\n        while ($j < count($arr2)) {\n            $result = $arr2[$j];\n            $j++;\n            $count++;\n            if ($count == $k) {\n                break;\n            }\n        }\n    }\n    return $result;\n}\n\n$arr1 = array(1, 3, 5, 7, 9);\n$arr2 = array(2, 4, 6, 8, 10);\n$k = 5;\necho find_kth($arr1, $arr2, $k);\nfunction candidate(...$args) {\n    return find_kth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 3, 6, 7, 9), array(1, 4, 8, 10), 5) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 112, 256, 349, 770), array(72, 86, 113, 119, 265, 445, 892), 7) !== 256) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 4, 7, 8, 10), array(2, 5, 9, 11), 6) !== 8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123418,
      "stdout": "10\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpj18t6800.php:53\nStack trace:\n#0 /tmp/tmpj18t6800.php(58): test()\n#1 {main}\n  thrown in /tmp/tmpj18t6800.php on line 53\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find kth element from the given two sorted arrays.\nfunction find_kth($arr1, $arr2, $k) {\n    $i = 0;\n    $j = 0;\n    $k--;\n    while ($k > 0) {\n        if ($arr1[$i] < $arr2[$j]) {\n            $i++;\n        } else {\n            $j++;\n        }\n        $k--;\n    }\n    return $arr1[$i] < $arr2[$j] ? $arr1[$i] : $arr2[$j];\n}\n\n$arr1 = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n$arr2 = [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20];\n\necho find_kth($arr1, $arr2, 10);\nfunction candidate(...$args) {\n    return find_kth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 3, 6, 7, 9), array(1, 4, 8, 10), 5) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 112, 256, 349, 770), array(72, 86, 113, 119, 265, 445, 892), 7) !== 256) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 4, 7, 8, 10), array(2, 5, 9, 11), 6) !== 8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123418,
      "stdout": "\nWarning: Undefined array key 9 in /tmp/tmp0z3l_3pl.php on line 15\n\nWarning: Undefined array key 9 in /tmp/tmp0z3l_3pl.php on line 15\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find kth element from the given two sorted arrays.\nfunction find_kth($arr1, $arr2, $k) {\n    $i = 0;\n    $j = 0;\n    $count = 0;\n    while ($i < count($arr1) && $j < count($arr2)) {\n        if ($arr1[$i] <= $arr2[$j]) {\n            $count++;\n            if ($count == $k) {\n                return $arr1[$i];\n            }\n            $i++;\n        } else {\n            $count++;\n            if ($count == $k) {\n                return $arr2[$j];\n            }\n            $j++;\n        }\n    }\n    while ($i < count($arr1)) {\n        $count++;\n        if ($count == $k) {\n            return $arr1[$i];\n        }\n        $i++;\n    }\n    while ($j < count($arr2)) {\n        $count++;\n        if ($count == $k) {\n            return $arr2[$j];\n        }\n        $j++;\n    }\n}\n\n$arr1 = [1, 3, 5, 7, 9];\n$arr2 = [2, 4, 6, 8, 10];\n\necho find_kth($arr1, $arr2, 5);\nfunction candidate(...$args) {\n    return find_kth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 3, 6, 7, 9), array(1, 4, 8, 10), 5) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 112, 256, 349, 770), array(72, 86, 113, 119, 265, 445, 892), 7) !== 256) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 4, 7, 8, 10), array(2, 5, 9, 11), 6) !== 8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123418,
      "stdout": "5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find kth element from the given two sorted arrays.\nfunction find_kth($arr1, $arr2, $k) {\n    $i = 0;\n    $j = 0;\n    $count = 0;\n    while ($i < count($arr1) && $j < count($arr2)) {\n        if ($arr1[$i] < $arr2[$j]) {\n            $count++;\n            if ($count == $k) {\n                return $arr1[$i];\n            }\n            $i++;\n        } else {\n            $count++;\n            if ($count == $k) {\n                return $arr2[$j];\n            }\n            $j++;\n        }\n    }\n    while ($i < count($arr1)) {\n        $count++;\n        if ($count == $k) {\n            return $arr1[$i];\n        }\n        $i++;\n    }\n    while ($j < count($arr2)) {\n        $count++;\n        if ($count == $k) {\n            return $arr2[$j];\n        }\n        $j++;\n    }\n}\n\n$arr1 = [1, 3, 5, 7, 9];\n$arr2 = [2, 4, 6, 8, 10];\necho find_kth($arr1, $arr2, 5);\nfunction candidate(...$args) {\n    return find_kth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 3, 6, 7, 9), array(1, 4, 8, 10), 5) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 112, 256, 349, 770), array(72, 86, 113, 119, 265, 445, 892), 7) !== 256) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 4, 7, 8, 10), array(2, 5, 9, 11), 6) !== 8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510546,
      "stdout": "5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find kth element from the given two sorted arrays.\nfunction find_kth($arr1, $arr2, $k) {\n    $i = 0;\n    $j = 0;\n    $count = 0;\n    while ($i < count($arr1) && $j < count($arr2)) {\n        if ($arr1[$i] < $arr2[$j]) {\n            $count++;\n            if ($count == $k) {\n                return $arr1[$i];\n            }\n            $i++;\n        } else {\n            $count++;\n            if ($count == $k) {\n                return $arr2[$j];\n            }\n            $j++;\n        }\n    }\n    while ($i < count($arr1)) {\n        $count++;\n        if ($count == $k) {\n            return $arr1[$i];\n        }\n        $i++;\n    }\n    while ($j < count($arr2)) {\n        $count++;\n        if ($count == $k) {\n            return $arr2[$j];\n        }\n        $j++;\n    }\n}\n\n$arr1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$arr2 = [11, 12, 13, 14, 15, 16, 17, 18, 19, 20];\necho find_kth($arr1, $arr2, 10);\nfunction candidate(...$args) {\n    return find_kth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 3, 6, 7, 9), array(1, 4, 8, 10), 5) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 112, 256, 349, 770), array(72, 86, 113, 119, 265, 445, 892), 7) !== 256) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 4, 7, 8, 10), array(2, 5, 9, 11), 6) !== 8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123418,
      "stdout": "10",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find kth element from the given two sorted arrays.\nfunction find_kth($arr1, $arr2, $k) {\n    $i = 0;\n    $j = 0;\n    $count = 0;\n    while ($i < count($arr1) && $j < count($arr2)) {\n        if ($arr1[$i] < $arr2[$j]) {\n            $count++;\n            if ($count == $k) {\n                return $arr1[$i];\n            }\n            $i++;\n        } else {\n            $count++;\n            if ($count == $k) {\n                return $arr2[$j];\n            }\n            $j++;\n        }\n    }\n    while ($i < count($arr1)) {\n        $count++;\n        if ($count == $k) {\n            return $arr1[$i];\n        }\n        $i++;\n    }\n    while ($j < count($arr2)) {\n        $count++;\n        if ($count == $k) {\n            return $arr2[$j];\n        }\n        $j++;\n    }\n}\n\n$arr1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$arr2 = [11, 12, 13, 14, 15, 16, 17, 18, 19, 20];\n$k = 5;\necho find_kth($arr1, $arr2, $k);\nfunction candidate(...$args) {\n    return find_kth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 3, 6, 7, 9), array(1, 4, 8, 10), 5) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 112, 256, 349, 770), array(72, 86, 113, 119, 265, 445, 892), 7) !== 256) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 4, 7, 8, 10), array(2, 5, 9, 11), 6) !== 8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123418,
      "stdout": "5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find kth element from the given two sorted arrays.\nfunction find_kth($arr1, $arr2, $k) {\n  if (count($arr1) == 0) {\n    return $arr2[$k - 1];\n  }\n  if (count($arr2) == 0) {\n    return $arr1[$k - 1];\n  }\n  if ($k == 1) {\n    return min($arr1[0], $arr2[0]);\n  }\n  $i = min(floor($k / 2), count($arr1));\n  $j = min(floor($k / 2), count($arr2));\n  if ($arr1[$i - 1] < $arr2[$j - 1]) {\n    return find_kth(array_slice($arr1, $i), $arr2, $k - $i);\n  } else {\n    return find_kth($arr1, array_slice($arr2, $j), $k - $j);\n  }\n}\n\n$arr1 = [1, 3, 5, 7, 9];\n$arr2 = [2, 4, 6, 8, 10];\n$k = 5;\necho find_kth($arr1, $arr2, $k);\nfunction candidate(...$args) {\n    return find_kth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 3, 6, 7, 9), array(1, 4, 8, 10), 5) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 112, 256, 349, 770), array(72, 86, 113, 119, 265, 445, 892), 7) !== 256) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 4, 7, 8, 10), array(2, 5, 9, 11), 6) !== 8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123418,
      "stdout": "5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find kth element from the given two sorted arrays.\nfunction find_kth($arr1, $arr2, $k) {\n    $i = 0;\n    $j = 0;\n    $m = count($arr1);\n    $n = count($arr2);\n    while ($i < $m && $j < $n) {\n        if ($arr1[$i] < $arr2[$j]) {\n            $i++;\n        } else {\n            $j++;\n        }\n        if ($i + $j == $k) {\n            if ($arr1[$i] < $arr2[$j]) {\n                return $arr1[$i];\n            } else {\n                return $arr2[$j];\n            }\n        }\n    }\n    if ($i < $m) {\n        return $arr1[$i + $k - $j - 1];\n    }\n    if ($j < $n) {\n        return $arr2[$j + $k - $i - 1];\n    }\n}\n\n$arr1 = [1, 3, 5, 7, 9];\n$arr2 = [2, 4, 6, 8, 10];\n$k = 5;\necho find_kth($arr1, $arr2, $k);\nfunction candidate(...$args) {\n    return find_kth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 3, 6, 7, 9), array(1, 4, 8, 10), 5) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 112, 256, 349, 770), array(72, 86, 113, 119, 265, 445, 892), 7) !== 256) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 4, 7, 8, 10), array(2, 5, 9, 11), 6) !== 8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123419,
      "stdout": "6\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpn0ogfu5y.php:39\nStack trace:\n#0 /tmp/tmpn0ogfu5y.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpn0ogfu5y.php on line 39\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find kth element from the given two sorted arrays.\nfunction find_kth($arr1, $arr2, $k) {\n    $len1 = count($arr1);\n    $len2 = count($arr2);\n    if ($len1 == 0) {\n        return $arr2[$k - 1];\n    }\n    if ($len2 == 0) {\n        return $arr1[$k - 1];\n    }\n    if ($k == 1) {\n        return min($arr1[0], $arr2[0]);\n    }\n    $i = min($len1, $k / 2);\n    $j = min($len2, $k / 2);\n    if ($arr1[$i - 1] > $arr2[$j - 1]) {\n        return find_kth($arr1, array_slice($arr2, $j), $k - $j);\n    } else {\n        return find_kth(array_slice($arr1, $i), $arr2, $k - $i);\n    }\n}\n\n$arr1 = array(2, 3, 6, 7, 9);\n$arr2 = array(1, 4, 8, 10);\necho find_kth($arr1, $arr2, 5);\nfunction candidate(...$args) {\n    return find_kth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 3, 6, 7, 9), array(1, 4, 8, 10), 5) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 112, 256, 349, 770), array(72, 86, 113, 119, 265, 445, 892), 7) !== 256) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 4, 7, 8, 10), array(2, 5, 9, 11), 6) !== 8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123433,
      "stdout": "\nDeprecated: Implicit conversion from float 1.5 to int loses precision in /tmp/tmphcfmgcuf.php on line 17\n\nDeprecated: Implicit conversion from float 1.5 to int loses precision in /tmp/tmphcfmgcuf.php on line 17\n\nDeprecated: Implicit conversion from float 2.5 to int loses precision in /tmp/tmphcfmgcuf.php on line 20\n\nDeprecated: Implicit conversion from float 0.25 to int loses precision in /tmp/tmphcfmgcuf.php on line 17\n\nDeprecated: Implicit conversion from float 0.25 to int loses precision in /tmp/tmphcfmgcuf.php on line 17\n\nDeprecated: Implicit conversion from float 1.25 to int loses precision in /tmp/tmphcfmgcuf.php on line 18\n\nDeprecated: Implicit conversion from float -0.375 to int loses precision in /tmp/tmphcfmgcuf.php on line 17\n\nDeprecated: Implicit conversion from float -0.375 to int loses precision in /tmp/tmphcfmgcuf.php on line 17\n\nDeprecated: Implicit conversion from float 0.625 to int loses precision in /tmp/tmphcfmgcuf.php on line 18\n\nDeprecated: Implicit conversion from float -0.6875 to int loses precision in /tmp/tmphcfmgcuf.php on line 17\n\nDeprecated: Implicit conversion from float -0.6875 to int loses precision in /tmp/tmphcfmgcuf.php on line 17\n\nDeprecated: Implicit conversion from float 0.3125 to int loses precision in /tmp/tmphcfmgcuf.php on line 18\n\nDeprecated: Implicit conversion from float -0.84375 to int loses precision in /tmp/tmphcfmgcuf.php on line 17\n\nDeprecated: Implicit conversion from float -0.84375 to int loses precision in /tmp/tmphcfmgcuf.php on line 17\n\nDeprecated: Implicit conversion from float 0.15625 to int loses precision in /tmp/tmphcfmgcuf.php on line 18\n\nDeprecated: Implicit conversion from float -0.921875 to int loses precision in /tmp/tmphcfmgcuf.php on line 17\n\nDeprecated: Implicit conversion from float -0.921875 to int loses precision in /tmp/tmphcfmgcuf.php on line 17\n\nDeprecated: Implicit conversion from float 0.078125 to int loses precision in /tmp/tmphcfmgcuf.php on line 18\n\nDeprecated: Implicit conversion from float -0.9609375 to int loses precision in /tmp/t",
      "stderr": "",
      "exit_code": -1,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find kth element from the given two sorted arrays.\nfunction find_kth($arr1, $arr2, $k) {\n    $i = 0;\n    $j = 0;\n    $count = 0;\n    $result = 0;\n    while ($i < count($arr1) && $j < count($arr2)) {\n        if ($arr1[$i] < $arr2[$j]) {\n            $result = $arr1[$i];\n            $i++;\n        } else {\n            $result = $arr2[$j];\n            $j++;\n        }\n        $count++;\n        if ($count == $k) {\n            break;\n        }\n    }\n    while ($i < count($arr1)) {\n        $result = $arr1[$i];\n        $i++;\n        $count++;\n        if ($count == $k) {\n            break;\n        }\n    }\n    while ($j < count($arr2)) {\n        $result = $arr2[$j];\n        $j++;\n        $count++;\n        if ($count == $k) {\n            break;\n        }\n    }\n    return $result;\n}\n\n$arr1 = [1, 3, 5, 7, 9];\n$arr2 = [2, 4, 6, 8, 10];\n$k = 3;\necho find_kth($arr1, $arr2, $k);\nfunction candidate(...$args) {\n    return find_kth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 3, 6, 7, 9), array(1, 4, 8, 10), 5) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 112, 256, 349, 770), array(72, 86, 113, 119, 265, 445, 892), 7) !== 256) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 4, 7, 8, 10), array(2, 5, 9, 11), 6) !== 8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123419,
      "stdout": "10\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb_ru_up5.php:49\nStack trace:\n#0 /tmp/tmpb_ru_up5.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpb_ru_up5.php on line 49\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find kth element from the given two sorted arrays.\nfunction find_kth($arr1, $arr2, $k) {\n    $i = 0;\n    $j = 0;\n    $count = 0;\n    while ($i < count($arr1) && $j < count($arr2)) {\n        if ($arr1[$i] < $arr2[$j]) {\n            $count++;\n            if ($count == $k) {\n                return $arr1[$i];\n            }\n            $i++;\n        } else {\n            $count++;\n            if ($count == $k) {\n                return $arr2[$j];\n            }\n            $j++;\n        }\n    }\n    while ($i < count($arr1)) {\n        $count++;\n        if ($count == $k) {\n            return $arr1[$i];\n        }\n        $i++;\n    }\n    while ($j < count($arr2)) {\n        $count++;\n        if ($count == $k) {\n            return $arr2[$j];\n        }\n        $j++;\n    }\n}\n\n$arr1 = [1, 3, 5, 7, 9];\n$arr2 = [2, 4, 6, 8, 10];\necho find_kth($arr1, $arr2, 5);\nfunction candidate(...$args) {\n    return find_kth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 3, 6, 7, 9), array(1, 4, 8, 10), 5) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 112, 256, 349, 770), array(72, 86, 113, 119, 265, 445, 892), 7) !== 256) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 4, 7, 8, 10), array(2, 5, 9, 11), 6) !== 8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510546,
      "stdout": "5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find kth element from the given two sorted arrays.\nfunction find_kth($arr1, $arr2, $k) {\n    $i = 0;\n    $j = 0;\n    $count = 0;\n    while ($i < count($arr1) && $j < count($arr2)) {\n        if ($arr1[$i] < $arr2[$j]) {\n            $count++;\n            if ($count == $k) {\n                return $arr1[$i];\n            }\n            $i++;\n        } else {\n            $count++;\n            if ($count == $k) {\n                return $arr2[$j];\n            }\n            $j++;\n        }\n    }\n    while ($i < count($arr1)) {\n        $count++;\n        if ($count == $k) {\n            return $arr1[$i];\n        }\n        $i++;\n    }\n    while ($j < count($arr2)) {\n        $count++;\n        if ($count == $k) {\n            return $arr2[$j];\n        }\n        $j++;\n    }\n}\n\n$arr1 = [1, 3, 5, 7, 9];\n$arr2 = [2, 4, 6, 8, 10];\n\necho find_kth($arr1, $arr2, 5);\nfunction candidate(...$args) {\n    return find_kth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 3, 6, 7, 9), array(1, 4, 8, 10), 5) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 112, 256, 349, 770), array(72, 86, 113, 119, 265, 445, 892), 7) !== 256) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 4, 7, 8, 10), array(2, 5, 9, 11), 6) !== 8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123418,
      "stdout": "5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find kth element from the given two sorted arrays.\nfunction find_kth($arr1, $arr2, $k) {\n    $i = 0;\n    $j = 0;\n    $count = 0;\n    $result = 0;\n    while ($i < count($arr1) && $j < count($arr2)) {\n        if ($arr1[$i] < $arr2[$j]) {\n            $result = $arr1[$i];\n            $i++;\n        } else {\n            $result = $arr2[$j];\n            $j++;\n        }\n        $count++;\n        if ($count == $k) {\n            break;\n        }\n    }\n    while ($i < count($arr1)) {\n        $result = $arr1[$i];\n        $i++;\n        $count++;\n        if ($count == $k) {\n            break;\n        }\n    }\n    while ($j < count($arr2)) {\n        $result = $arr2[$j];\n        $j++;\n        $count++;\n        if ($count == $k) {\n            break;\n        }\n    }\n    return $result;\n}\n\n$arr1 = [1, 3, 5, 7, 9];\n$arr2 = [2, 4, 6, 8, 10];\n$k = 5;\necho find_kth($arr1, $arr2, $k);\nfunction candidate(...$args) {\n    return find_kth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 3, 6, 7, 9), array(1, 4, 8, 10), 5) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 112, 256, 349, 770), array(72, 86, 113, 119, 265, 445, 892), 7) !== 256) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 4, 7, 8, 10), array(2, 5, 9, 11), 6) !== 8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123418,
      "stdout": "10\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptuz21lo2.php:49\nStack trace:\n#0 /tmp/tmptuz21lo2.php(54): test()\n#1 {main}\n  thrown in /tmp/tmptuz21lo2.php on line 49\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find kth element from the given two sorted arrays.\nfunction find_kth($arr1, $arr2, $k) {\n    $i = 0;\n    $j = 0;\n    $kth = 0;\n    while ($i < count($arr1) && $j < count($arr2)) {\n        if ($arr1[$i] < $arr2[$j]) {\n            $kth = $arr1[$i];\n            $i++;\n        } else {\n            $kth = $arr2[$j];\n            $j++;\n        }\n        if ($i + $j == $k) {\n            break;\n        }\n    }\n    if ($i + $j < $k) {\n        if ($i == count($arr1)) {\n            $kth = $arr2[$j + $k - $i - 1];\n        } else {\n            $kth = $arr1[$i + $k - $j - 1];\n        }\n    }\n    return $kth;\n}\n\n$arr1 = array(2, 3, 6, 7, 9);\n$arr2 = array(1, 4, 8, 10);\n$k = 5;\necho find_kth($arr1, $arr2, $k);\nfunction candidate(...$args) {\n    return find_kth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 3, 6, 7, 9), array(1, 4, 8, 10), 5) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 112, 256, 349, 770), array(72, 86, 113, 119, 265, 445, 892), 7) !== 256) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 4, 7, 8, 10), array(2, 5, 9, 11), 6) !== 8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123419,
      "stdout": "6",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find kth element from the given two sorted arrays.\nfunction find_kth($arr1, $arr2, $k) {\n    $len1 = count($arr1);\n    $len2 = count($arr2);\n    if ($len1 == 0) {\n        return $arr2[$k - 1];\n    }\n    if ($len2 == 0) {\n        return $arr1[$k - 1];\n    }\n    if ($k == 1) {\n        return min($arr1[0], $arr2[0]);\n    }\n    $mid1 = min($len1, $k / 2);\n    $mid2 = min($len2, $k / 2);\n    if ($arr1[$mid1 - 1] < $arr2[$mid2 - 1]) {\n        return find_kth(array_slice($arr1, $mid1), $arr2, $k - $mid1);\n    } else {\n        return find_kth($arr1, array_slice($arr2, $mid2), $k - $mid2);\n    }\n}\n$arr1 = array(2, 3, 6, 7, 9);\n$arr2 = array(1, 4, 8, 10);\necho find_kth($arr1, $arr2, 5);\nfunction candidate(...$args) {\n    return find_kth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 3, 6, 7, 9), array(1, 4, 8, 10), 5) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 112, 256, 349, 770), array(72, 86, 113, 119, 265, 445, 892), 7) !== 256) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 4, 7, 8, 10), array(2, 5, 9, 11), 6) !== 8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123433,
      "stdout": "\nDeprecated: Implicit conversion from float 1.5 to int loses precision in /tmp/tmpso49ywh3.php on line 17\n\nDeprecated: Implicit conversion from float 1.5 to int loses precision in /tmp/tmpso49ywh3.php on line 17\n\nDeprecated: Implicit conversion from float 2.5 to int loses precision in /tmp/tmpso49ywh3.php on line 18\n\nDeprecated: Implicit conversion from float 0.25 to int loses precision in /tmp/tmpso49ywh3.php on line 17\n\nDeprecated: Implicit conversion from float 0.25 to int loses precision in /tmp/tmpso49ywh3.php on line 17\n\nDeprecated: Implicit conversion from float 1.25 to int loses precision in /tmp/tmpso49ywh3.php on line 20\n\nDeprecated: Implicit conversion from float -0.375 to int loses precision in /tmp/tmpso49ywh3.php on line 17\n\nDeprecated: Implicit conversion from float -0.375 to int loses precision in /tmp/tmpso49ywh3.php on line 17\n\nDeprecated: Implicit conversion from float 0.625 to int loses precision in /tmp/tmpso49ywh3.php on line 20\n\nDeprecated: Implicit conversion from float -0.6875 to int loses precision in /tmp/tmpso49ywh3.php on line 17\n\nDeprecated: Implicit conversion from float -0.6875 to int loses precision in /tmp/tmpso49ywh3.php on line 17\n\nDeprecated: Implicit conversion from float 0.3125 to int loses precision in /tmp/tmpso49ywh3.php on line 20\n\nDeprecated: Implicit conversion from float -0.84375 to int loses precision in /tmp/tmpso49ywh3.php on line 17\n\nDeprecated: Implicit conversion from float -0.84375 to int loses precision in /tmp/tmpso49ywh3.php on line 17\n\nDeprecated: Implicit conversion from float 0.15625 to int loses precision in /tmp/tmpso49ywh3.php on line 20\n\nDeprecated: Implicit conversion from float -0.921875 to int loses precision in /tmp/tmpso49ywh3.php on line 17\n\nDeprecated: Implicit conversion from float -0.921875 to int loses precision in /tmp/tmpso49ywh3.php on line 17\n\nDeprecated: Implicit conversion from float 0.078125 to int loses precision in /tmp/tmpso49ywh3.php on line 20\n\nDeprecated: Implicit conversion from float -0.9609375 to int loses precision in /tmp/t",
      "stderr": "",
      "exit_code": -1,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find kth element from the given two sorted arrays.\nfunction find_kth($arr1, $arr2, $k) {\n    $len1 = count($arr1);\n    $len2 = count($arr2);\n    if ($len1 == 0) {\n        return $arr2[$k - 1];\n    }\n    if ($len2 == 0) {\n        return $arr1[$k - 1];\n    }\n    if ($k == 1) {\n        return min($arr1[0], $arr2[0]);\n    }\n    $mid1 = $len1 > $k / 2 ? $k / 2 : $len1;\n    $mid2 = $len2 > $k / 2 ? $k / 2 : $len2;\n    if ($arr1[$mid1 - 1] < $arr2[$mid2 - 1]) {\n        return find_kth(array_slice($arr1, $mid1), $arr2, $k - $mid1);\n    } else {\n        return find_kth($arr1, array_slice($arr2, $mid2), $k - $mid2);\n    }\n}\n\n$arr1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$arr2 = [11, 12, 13, 14, 15, 16, 17, 18, 19, 20];\n$k = 10;\n$kth = find_kth($arr1, $arr2, $k);\necho $kth;\nfunction candidate(...$args) {\n    return find_kth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 3, 6, 7, 9), array(1, 4, 8, 10), 5) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 112, 256, 349, 770), array(72, 86, 113, 119, 265, 445, 892), 7) !== 256) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 4, 7, 8, 10), array(2, 5, 9, 11), 6) !== 8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123433,
      "stdout": "\nDeprecated: Implicit conversion from float 1.5 to int loses precision in /tmp/tmpv44bpr2s.php on line 17\n\nDeprecated: Implicit conversion from float 1.5 to int loses precision in /tmp/tmpv44bpr2s.php on line 17\n\nDeprecated: Implicit conversion from float 2.5 to int loses precision in /tmp/tmpv44bpr2s.php on line 18\n\nDeprecated: Implicit conversion from float 0.25 to int loses precision in /tmp/tmpv44bpr2s.php on line 17\n\nDeprecated: Implicit conversion from float 0.25 to int loses precision in /tmp/tmpv44bpr2s.php on line 17\n\nDeprecated: Implicit conversion from float 1.25 to int loses precision in /tmp/tmpv44bpr2s.php on line 18\n\nDeprecated: Implicit conversion from float -0.375 to int loses precision in /tmp/tmpv44bpr2s.php on line 17\n\nDeprecated: Implicit conversion from float -0.375 to int loses precision in /tmp/tmpv44bpr2s.php on line 17\n\nDeprecated: Implicit conversion from float 0.625 to int loses precision in /tmp/tmpv44bpr2s.php on line 18\n\nDeprecated: Implicit conversion from float -0.6875 to int loses precision in /tmp/tmpv44bpr2s.php on line 17\n\nDeprecated: Implicit conversion from float -0.6875 to int loses precision in /tmp/tmpv44bpr2s.php on line 17\n\nDeprecated: Implicit conversion from float 0.3125 to int loses precision in /tmp/tmpv44bpr2s.php on line 18\n\nDeprecated: Implicit conversion from float -0.84375 to int loses precision in /tmp/tmpv44bpr2s.php on line 17\n\nDeprecated: Implicit conversion from float -0.84375 to int loses precision in /tmp/tmpv44bpr2s.php on line 17\n\nDeprecated: Implicit conversion from float 0.15625 to int loses precision in /tmp/tmpv44bpr2s.php on line 18\n\nDeprecated: Implicit conversion from float -0.921875 to int loses precision in /tmp/tmpv44bpr2s.php on line 17\n\nDeprecated: Implicit conversion from float -0.921875 to int loses precision in /tmp/tmpv44bpr2s.php on line 17\n\nDeprecated: Implicit conversion from float 0.078125 to int loses precision in /tmp/tmpv44bpr2s.php on line 18\n\nDeprecated: Implicit conversion from float -0.9609375 to int loses precision in /tmp/t",
      "stderr": "",
      "exit_code": -1,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find kth element from the given two sorted arrays.\nfunction find_kth($arr1, $arr2, $k) {\n    $i = 0;\n    $j = 0;\n    $count = 0;\n    while ($i < count($arr1) && $j < count($arr2)) {\n        if ($arr1[$i] < $arr2[$j]) {\n            $count++;\n            if ($count == $k) {\n                return $arr1[$i];\n            }\n            $i++;\n        } else {\n            $count++;\n            if ($count == $k) {\n                return $arr2[$j];\n            }\n            $j++;\n        }\n    }\n    if ($i == count($arr1)) {\n        return $arr2[$j + $k - $count - 1];\n    } else {\n        return $arr1[$i + $k - $count - 1];\n    }\n}\n\n$arr1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$arr2 = [11, 12, 13, 14, 15, 16, 17, 18, 19, 20];\n$k = 5;\necho find_kth($arr1, $arr2, $k);\nfunction candidate(...$args) {\n    return find_kth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 3, 6, 7, 9), array(1, 4, 8, 10), 5) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 112, 256, 349, 770), array(72, 86, 113, 119, 265, 445, 892), 7) !== 256) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 4, 7, 8, 10), array(2, 5, 9, 11), 6) !== 8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123419,
      "stdout": "5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find kth element from the given two sorted arrays.\nfunction find_kth($arr1, $arr2, $k) {\n    $i = 0;\n    $j = 0;\n    $count = 0;\n    while ($i < count($arr1) && $j < count($arr2)) {\n        if ($arr1[$i] < $arr2[$j]) {\n            $count++;\n            if ($count == $k) {\n                return $arr1[$i];\n            }\n            $i++;\n        } else {\n            $count++;\n            if ($count == $k) {\n                return $arr2[$j];\n            }\n            $j++;\n        }\n    }\n    while ($i < count($arr1)) {\n        $count++;\n        if ($count == $k) {\n            return $arr1[$i];\n        }\n        $i++;\n    }\n    while ($j < count($arr2)) {\n        $count++;\n        if ($count == $k) {\n            return $arr2[$j];\n        }\n        $j++;\n    }\n}\n\n$arr1 = [1, 3, 5, 7, 9];\n$arr2 = [2, 4, 6, 8, 10];\n$k = 5;\necho find_kth($arr1, $arr2, $k);\nfunction candidate(...$args) {\n    return find_kth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 3, 6, 7, 9), array(1, 4, 8, 10), 5) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 112, 256, 349, 770), array(72, 86, 113, 119, 265, 445, 892), 7) !== 256) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 4, 7, 8, 10), array(2, 5, 9, 11), 6) !== 8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510546,
      "stdout": "5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find kth element from the given two sorted arrays.\nfunction find_kth($arr1, $arr2, $k) {\n\t$i = 0;\n\t$j = 0;\n\t$count = 0;\n\twhile ($i < count($arr1) && $j < count($arr2)) {\n\t\tif ($arr1[$i] < $arr2[$j]) {\n\t\t\t$count++;\n\t\t\tif ($count == $k) {\n\t\t\t\treturn $arr1[$i];\n\t\t\t}\n\t\t\t$i++;\n\t\t} else {\n\t\t\t$count++;\n\t\t\tif ($count == $k) {\n\t\t\t\treturn $arr2[$j];\n\t\t\t}\n\t\t\t$j++;\n\t\t}\n\t}\n\twhile ($i < count($arr1)) {\n\t\t$count++;\n\t\tif ($count == $k) {\n\t\t\treturn $arr1[$i];\n\t\t}\n\t\t$i++;\n\t}\n\twhile ($j < count($arr2)) {\n\t\t$count++;\n\t\tif ($count == $k) {\n\t\t\treturn $arr2[$j];\n\t\t}\n\t\t$j++;\n\t}\n}\n\n$arr1 = [1, 3, 5, 7, 9];\n$arr2 = [2, 4, 6, 8, 10];\n$k = 5;\necho find_kth($arr1, $arr2, $k);\nfunction candidate(...$args) {\n    return find_kth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 3, 6, 7, 9), array(1, 4, 8, 10), 5) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 112, 256, 349, 770), array(72, 86, 113, 119, 265, 445, 892), 7) !== 256) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 4, 7, 8, 10), array(2, 5, 9, 11), 6) !== 8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510546,
      "stdout": "5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find kth element from the given two sorted arrays.\nfunction find_kth($arr1, $arr2, $k) {\n    $i = 0;\n    $j = 0;\n    $count = 0;\n    while ($i < count($arr1) && $j < count($arr2)) {\n        if ($arr1[$i] < $arr2[$j]) {\n            $i++;\n        } else {\n            $j++;\n        }\n        $count++;\n        if ($count == $k) {\n            if ($i < count($arr1)) {\n                return $arr1[$i];\n            } else {\n                return $arr2[$j];\n            }\n        }\n    }\n    if ($i < count($arr1)) {\n        return $arr1[$i];\n    } else {\n        return $arr2[$j];\n    }\n}\n\n$arr1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$arr2 = [11, 12, 13, 14, 15, 16, 17, 18, 19, 20];\n$k = 5;\necho find_kth($arr1, $arr2, $k);\nfunction candidate(...$args) {\n    return find_kth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 3, 6, 7, 9), array(1, 4, 8, 10), 5) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 112, 256, 349, 770), array(72, 86, 113, 119, 265, 445, 892), 7) !== 256) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 4, 7, 8, 10), array(2, 5, 9, 11), 6) !== 8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123419,
      "stdout": "6\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpv3mfunw2.php:38\nStack trace:\n#0 /tmp/tmpv3mfunw2.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpv3mfunw2.php on line 38\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find kth element from the given two sorted arrays.\nfunction find_kth($arr1, $arr2, $k) {\n    $i = 0;\n    $j = 0;\n    $count = 0;\n    while ($count < $k) {\n        if ($arr1[$i] < $arr2[$j]) {\n            $i++;\n        } else {\n            $j++;\n        }\n        $count++;\n    }\n    if ($arr1[$i] < $arr2[$j]) {\n        return $arr1[$i];\n    } else {\n        return $arr2[$j];\n    }\n}\n\n$arr1 = [1, 3, 5, 7, 9];\n$arr2 = [2, 4, 6, 8, 10];\n$k = 5;\necho find_kth($arr1, $arr2, $k);\nfunction candidate(...$args) {\n    return find_kth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 3, 6, 7, 9), array(1, 4, 8, 10), 5) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 112, 256, 349, 770), array(72, 86, 113, 119, 265, 445, 892), 7) !== 256) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 4, 7, 8, 10), array(2, 5, 9, 11), 6) !== 8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123419,
      "stdout": "6\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkzko_bwc.php:31\nStack trace:\n#0 /tmp/tmpkzko_bwc.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpkzko_bwc.php on line 31\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find kth element from the given two sorted arrays.\nfunction find_kth($arr1, $arr2, $k) {\n    $i = 0;\n    $j = 0;\n    $count = 0;\n    while ($i < count($arr1) && $j < count($arr2)) {\n        if ($arr1[$i] < $arr2[$j]) {\n            $count++;\n            if ($count == $k) {\n                return $arr1[$i];\n            }\n            $i++;\n        } else {\n            $count++;\n            if ($count == $k) {\n                return $arr2[$j];\n            }\n            $j++;\n        }\n    }\n    while ($i < count($arr1)) {\n        $count++;\n        if ($count == $k) {\n            return $arr1[$i];\n        }\n        $i++;\n    }\n    while ($j < count($arr2)) {\n        $count++;\n        if ($count == $k) {\n            return $arr2[$j];\n        }\n        $j++;\n    }\n}\n\n$arr1 = [1, 3, 5, 7, 9];\n$arr2 = [2, 4, 6, 8, 10];\necho find_kth($arr1, $arr2, 5);\nfunction candidate(...$args) {\n    return find_kth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 3, 6, 7, 9), array(1, 4, 8, 10), 5) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 112, 256, 349, 770), array(72, 86, 113, 119, 265, 445, 892), 7) !== 256) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 4, 7, 8, 10), array(2, 5, 9, 11), 6) !== 8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510546,
      "stdout": "5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find kth element from the given two sorted arrays.\nfunction find_kth($arr1, $arr2, $k) {\n\t$i = 0;\n\t$j = 0;\n\t$count = 0;\n\twhile ($i < count($arr1) && $j < count($arr2)) {\n\t\tif ($arr1[$i] < $arr2[$j]) {\n\t\t\t$count++;\n\t\t\tif ($count == $k) {\n\t\t\t\treturn $arr1[$i];\n\t\t\t}\n\t\t\t$i++;\n\t\t} else {\n\t\t\t$count++;\n\t\t\tif ($count == $k) {\n\t\t\t\treturn $arr2[$j];\n\t\t\t}\n\t\t\t$j++;\n\t\t}\n\t}\n\twhile ($i < count($arr1)) {\n\t\t$count++;\n\t\tif ($count == $k) {\n\t\t\treturn $arr1[$i];\n\t\t}\n\t\t$i++;\n\t}\n\twhile ($j < count($arr2)) {\n\t\t$count++;\n\t\tif ($count == $k) {\n\t\t\treturn $arr2[$j];\n\t\t}\n\t\t$j++;\n\t}\n}\n\n$arr1 = [1, 3, 5, 7, 9];\n$arr2 = [2, 4, 6, 8, 10];\n$k = 5;\necho find_kth($arr1, $arr2, $k);\nfunction candidate(...$args) {\n    return find_kth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 3, 6, 7, 9), array(1, 4, 8, 10), 5) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 112, 256, 349, 770), array(72, 86, 113, 119, 265, 445, 892), 7) !== 256) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 4, 7, 8, 10), array(2, 5, 9, 11), 6) !== 8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1665510546,
      "stdout": "5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "<?php\n// Write a function to find kth element from the given two sorted arrays.\nfunction find_kth($arr1, $arr2, $k) {\n    if (count($arr1) == 0) {\n        return $arr2[$k-1];\n    }\n    if (count($arr2) == 0) {\n        return $arr1[$k-1];\n    }\n    if ($k == 1) {\n        return min($arr1[0], $arr2[0]);\n    }\n    $a = $arr1[$k/2-1];\n    $b = $arr2[$k/2-1];\n    if ($a > $b) {\n        return find_kth($arr1, array_slice($arr2, $k/2), $k - $k/2);\n    } else {\n        return find_kth(array_slice($arr1, $k/2), $arr2, $k - $k/2);\n    }\n}\n\n$arr1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$arr2 = [11, 12, 13, 14, 15, 16, 17, 18, 19, 20];\necho find_kth($arr1, $arr2, 10);\nfunction candidate(...$args) {\n    return find_kth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 3, 6, 7, 9), array(1, 4, 8, 10), 5) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 112, 256, 349, 770), array(72, 86, 113, 119, 265, 445, 892), 7) !== 256) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 4, 7, 8, 10), array(2, 5, 9, 11), 6) !== 8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123433,
      "stdout": "\nDeprecated: Implicit conversion from float 1.5 to int loses precision in /tmp/tmp0k02zbgg.php on line 13\n\nDeprecated: Implicit conversion from float 1.5 to int loses precision in /tmp/tmp0k02zbgg.php on line 14\n\nDeprecated: Implicit conversion from float 2.5 to int loses precision in /tmp/tmp0k02zbgg.php on line 18\n\nDeprecated: Implicit conversion from float 0.25 to int loses precision in /tmp/tmp0k02zbgg.php on line 13\n\nDeprecated: Implicit conversion from float 0.25 to int loses precision in /tmp/tmp0k02zbgg.php on line 14\n\nDeprecated: Implicit conversion from float 1.25 to int loses precision in /tmp/tmp0k02zbgg.php on line 18\n\nDeprecated: Implicit conversion from float -0.375 to int loses precision in /tmp/tmp0k02zbgg.php on line 13\n\nDeprecated: Implicit conversion from float -0.375 to int loses precision in /tmp/tmp0k02zbgg.php on line 14\n\nDeprecated: Implicit conversion from float 0.625 to int loses precision in /tmp/tmp0k02zbgg.php on line 18\n\nDeprecated: Implicit conversion from float -0.6875 to int loses precision in /tmp/tmp0k02zbgg.php on line 13\n\nDeprecated: Implicit conversion from float -0.6875 to int loses precision in /tmp/tmp0k02zbgg.php on line 14\n\nDeprecated: Implicit conversion from float 0.3125 to int loses precision in /tmp/tmp0k02zbgg.php on line 18\n\nDeprecated: Implicit conversion from float -0.84375 to int loses precision in /tmp/tmp0k02zbgg.php on line 13\n\nDeprecated: Implicit conversion from float -0.84375 to int loses precision in /tmp/tmp0k02zbgg.php on line 14\n\nDeprecated: Implicit conversion from float 0.15625 to int loses precision in /tmp/tmp0k02zbgg.php on line 18\n\nDeprecated: Implicit conversion from float -0.921875 to int loses precision in /tmp/tmp0k02zbgg.php on line 13\n\nDeprecated: Implicit conversion from float -0.921875 to int loses precision in /tmp/tmp0k02zbgg.php on line 14\n\nDeprecated: Implicit conversion from float 0.078125 to int loses precision in /tmp/tmp0k02zbgg.php on line 18\n\nDeprecated: Implicit conversion from float -0.9609375 to int loses precision in /tmp/t",
      "stderr": "",
      "exit_code": -1,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find kth element from the given two sorted arrays.\nfunction find_kth($arr1, $arr2, $k) {\n    $i = 0;\n    $j = 0;\n    $count = 0;\n    $kth = 0;\n    while ($i < count($arr1) && $j < count($arr2)) {\n        if ($arr1[$i] < $arr2[$j]) {\n            $kth = $arr1[$i];\n            $i++;\n        } else {\n            $kth = $arr2[$j];\n            $j++;\n        }\n        $count++;\n        if ($count == $k) {\n            break;\n        }\n    }\n    while ($i < count($arr1)) {\n        $kth = $arr1[$i];\n        $i++;\n        $count++;\n        if ($count == $k) {\n            break;\n        }\n    }\n    while ($j < count($arr2)) {\n        $kth = $arr2[$j];\n        $j++;\n        $count++;\n        if ($count == $k) {\n            break;\n        }\n    }\n    return $kth;\n}\n\n$arr1 = array(1, 3, 5, 7, 9);\n$arr2 = array(2, 4, 6, 8, 10);\n$k = 5;\necho find_kth($arr1, $arr2, $k);\nfunction candidate(...$args) {\n    return find_kth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 3, 6, 7, 9), array(1, 4, 8, 10), 5) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 112, 256, 349, 770), array(72, 86, 113, 119, 265, 445, 892), 7) !== 256) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 4, 7, 8, 10), array(2, 5, 9, 11), 6) !== 8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123419,
      "stdout": "10\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmb7a0sk1.php:49\nStack trace:\n#0 /tmp/tmpmb7a0sk1.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpmb7a0sk1.php on line 49\n",
      "stderr": "",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "<?php\n// Write a function to find kth element from the given two sorted arrays.\nfunction find_kth($arr1, $arr2, $k) {\n    $i = 0;\n    $j = 0;\n    $kth = 0;\n    while ($i < count($arr1) && $j < count($arr2)) {\n        if ($arr1[$i] < $arr2[$j]) {\n            $kth = $arr1[$i];\n            $i++;\n        } else {\n            $kth = $arr2[$j];\n            $j++;\n        }\n        $k--;\n        if ($k == 0) {\n            break;\n        }\n    }\n    if ($i == count($arr1)) {\n        $kth = $arr2[$j + $k - 1];\n    }\n    if ($j == count($arr2)) {\n        $kth = $arr1[$i + $k - 1];\n    }\n    return $kth;\n}\n\n$arr1 = array(1, 3, 5, 7, 9);\n$arr2 = array(2, 4, 6, 8, 10);\n\necho find_kth($arr1, $arr2, 5);\nfunction candidate(...$args) {\n    return find_kth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 3, 6, 7, 9), array(1, 4, 8, 10), 5) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 112, 256, 349, 770), array(72, 86, 113, 119, 265, 445, 892), 7) !== 256) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 4, 7, 8, 10), array(2, 5, 9, 11), 6) !== 8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "timestamp": 1666123419,
      "stdout": "5",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}